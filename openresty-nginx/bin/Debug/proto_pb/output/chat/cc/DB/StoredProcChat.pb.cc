// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcChat.proto

#include "StoredProcChat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_StoredProcChat_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcChat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserChatBlacklist;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcChat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_proc_load_user_chat_blacklist_Parameter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcChat_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_proc_load_user_chat_blacklist_ReturnRecord;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcChat_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_proc_save_user_chat_blacklist_Parameter;
}  // namespace protobuf_StoredProcChat_2eproto
namespace db {
class UserChatBlacklistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChatBlacklist>
      _instance;
} _UserChatBlacklist_default_instance_;
class proc_load_user_chat_blacklist_ParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<proc_load_user_chat_blacklist_Parameter>
      _instance;
} _proc_load_user_chat_blacklist_Parameter_default_instance_;
class proc_load_user_chat_blacklist_ReturnRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<proc_load_user_chat_blacklist_ReturnRecord>
      _instance;
} _proc_load_user_chat_blacklist_ReturnRecord_default_instance_;
class proc_load_user_chat_blacklistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<proc_load_user_chat_blacklist>
      _instance;
} _proc_load_user_chat_blacklist_default_instance_;
class proc_save_user_chat_blacklist_ParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<proc_save_user_chat_blacklist_Parameter>
      _instance;
} _proc_save_user_chat_blacklist_Parameter_default_instance_;
class proc_save_user_chat_blacklistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<proc_save_user_chat_blacklist>
      _instance;
} _proc_save_user_chat_blacklist_default_instance_;
}  // namespace db
namespace protobuf_StoredProcChat_2eproto {
static void InitDefaultsUserChatBlacklist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserChatBlacklist_default_instance_;
    new (ptr) ::db::UserChatBlacklist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserChatBlacklist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserChatBlacklist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserChatBlacklist}, {}};

static void InitDefaultsproc_load_user_chat_blacklist_Parameter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_proc_load_user_chat_blacklist_Parameter_default_instance_;
    new (ptr) ::db::proc_load_user_chat_blacklist_Parameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::proc_load_user_chat_blacklist_Parameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_proc_load_user_chat_blacklist_Parameter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsproc_load_user_chat_blacklist_Parameter}, {}};

static void InitDefaultsproc_load_user_chat_blacklist_ReturnRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_proc_load_user_chat_blacklist_ReturnRecord_default_instance_;
    new (ptr) ::db::proc_load_user_chat_blacklist_ReturnRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::proc_load_user_chat_blacklist_ReturnRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_proc_load_user_chat_blacklist_ReturnRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsproc_load_user_chat_blacklist_ReturnRecord}, {
      &protobuf_StoredProcChat_2eproto::scc_info_UserChatBlacklist.base,}};

static void InitDefaultsproc_load_user_chat_blacklist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_proc_load_user_chat_blacklist_default_instance_;
    new (ptr) ::db::proc_load_user_chat_blacklist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::proc_load_user_chat_blacklist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_proc_load_user_chat_blacklist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsproc_load_user_chat_blacklist}, {
      &protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist_Parameter.base,
      &protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist_ReturnRecord.base,}};

static void InitDefaultsproc_save_user_chat_blacklist_Parameter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_proc_save_user_chat_blacklist_Parameter_default_instance_;
    new (ptr) ::db::proc_save_user_chat_blacklist_Parameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::proc_save_user_chat_blacklist_Parameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_proc_save_user_chat_blacklist_Parameter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsproc_save_user_chat_blacklist_Parameter}, {
      &protobuf_StoredProcChat_2eproto::scc_info_UserChatBlacklist.base,}};

static void InitDefaultsproc_save_user_chat_blacklist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_proc_save_user_chat_blacklist_default_instance_;
    new (ptr) ::db::proc_save_user_chat_blacklist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::proc_save_user_chat_blacklist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_proc_save_user_chat_blacklist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsproc_save_user_chat_blacklist}, {
      &protobuf_StoredProcChat_2eproto::scc_info_proc_save_user_chat_blacklist_Parameter.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserChatBlacklist.base);
  ::google::protobuf::internal::InitSCC(&scc_info_proc_load_user_chat_blacklist_Parameter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_proc_load_user_chat_blacklist_ReturnRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_proc_load_user_chat_blacklist.base);
  ::google::protobuf::internal::InitSCC(&scc_info_proc_save_user_chat_blacklist_Parameter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_proc_save_user_chat_blacklist.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserChatBlacklist, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserChatBlacklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserChatBlacklist, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserChatBlacklist, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserChatBlacklist, ticketid_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist_Parameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist_Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist_Parameter, p_userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist_ReturnRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist_ReturnRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist_ReturnRecord, user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_load_user_chat_blacklist, return_record_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_save_user_chat_blacklist_Parameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_save_user_chat_blacklist_Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_save_user_chat_blacklist_Parameter, p_user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_save_user_chat_blacklist, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_save_user_chat_blacklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::proc_save_user_chat_blacklist, param_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::db::UserChatBlacklist)},
  { 11, 17, sizeof(::db::proc_load_user_chat_blacklist_Parameter)},
  { 18, 24, sizeof(::db::proc_load_user_chat_blacklist_ReturnRecord)},
  { 25, 32, sizeof(::db::proc_load_user_chat_blacklist)},
  { 34, 40, sizeof(::db::proc_save_user_chat_blacklist_Parameter)},
  { 41, 47, sizeof(::db::proc_save_user_chat_blacklist)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserChatBlacklist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_proc_load_user_chat_blacklist_Parameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_proc_load_user_chat_blacklist_ReturnRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_proc_load_user_chat_blacklist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_proc_save_user_chat_blacklist_Parameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_proc_save_user_chat_blacklist_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "StoredProcChat.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024StoredProcChat.proto\022\002db\"D\n\021UserChatBl"
      "acklist\022\016\n\006userid\030\001 \002(\014\022\r\n\005index\030\002 \002(\005\022\020"
      "\n\010ticketid\030\003 \002(\004\"\373\001\n\035proc_load_user_chat"
      "_blacklist\022:\n\005param\030\001 \001(\0132+.db.proc_load"
      "_user_chat_blacklist.Parameter\022J\n\022return"
      "_record_list\030\002 \003(\0132..db.proc_load_user_c"
      "hat_blacklist.ReturnRecord\032\035\n\tParameter\022"
      "\020\n\010p_userid\030\001 \002(\014\0323\n\014ReturnRecord\022#\n\004use"
      "r\030\001 \002(\0132\025.db.UserChatBlacklist\"\217\001\n\035proc_"
      "save_user_chat_blacklist\022:\n\005param\030\002 \001(\0132"
      "+.db.proc_save_user_chat_blacklist.Param"
      "eter\0322\n\tParameter\022%\n\006p_user\030\001 \002(\0132\025.db.U"
      "serChatBlacklistB\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StoredProcChat.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_StoredProcChat_2eproto
namespace db {

// ===================================================================

void UserChatBlacklist::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChatBlacklist::kUseridFieldNumber;
const int UserChatBlacklist::kIndexFieldNumber;
const int UserChatBlacklist::kTicketidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChatBlacklist::UserChatBlacklist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcChat_2eproto::scc_info_UserChatBlacklist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserChatBlacklist)
}
UserChatBlacklist::UserChatBlacklist(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_UserChatBlacklist.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserChatBlacklist)
}
UserChatBlacklist::UserChatBlacklist(const UserChatBlacklist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&ticketid_, &from.ticketid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&ticketid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:db.UserChatBlacklist)
}

void UserChatBlacklist::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ticketid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&ticketid_)) + sizeof(index_));
}

UserChatBlacklist::~UserChatBlacklist() {
  // @@protoc_insertion_point(destructor:db.UserChatBlacklist)
  SharedDtor();
}

void UserChatBlacklist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserChatBlacklist::ArenaDtor(void* object) {
  UserChatBlacklist* _this = reinterpret_cast< UserChatBlacklist* >(object);
  (void)_this;
}
void UserChatBlacklist::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserChatBlacklist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserChatBlacklist::descriptor() {
  ::protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserChatBlacklist& UserChatBlacklist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_UserChatBlacklist.base);
  return *internal_default_instance();
}


void UserChatBlacklist::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserChatBlacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ticketid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&ticketid_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserChatBlacklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserChatBlacklist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ticketid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ticketid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticketid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserChatBlacklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserChatBlacklist)
  return false;
#undef DO_
}

void UserChatBlacklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserChatBlacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required uint64 ticketid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ticketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserChatBlacklist)
}

::google::protobuf::uint8* UserChatBlacklist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserChatBlacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required uint64 ticketid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ticketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserChatBlacklist)
  return target;
}

size_t UserChatBlacklist::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserChatBlacklist)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_ticketid()) {
    // required uint64 ticketid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ticketid());
  }

  if (has_index()) {
    // required int32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  return total_size;
}
size_t UserChatBlacklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserChatBlacklist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required uint64 ticketid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ticketid());

    // required int32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChatBlacklist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserChatBlacklist)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChatBlacklist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChatBlacklist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserChatBlacklist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserChatBlacklist)
    MergeFrom(*source);
  }
}

void UserChatBlacklist::MergeFrom(const UserChatBlacklist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserChatBlacklist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      ticketid_ = from.ticketid_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserChatBlacklist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserChatBlacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChatBlacklist::CopyFrom(const UserChatBlacklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserChatBlacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChatBlacklist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UserChatBlacklist::Swap(UserChatBlacklist* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserChatBlacklist* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserChatBlacklist::UnsafeArenaSwap(UserChatBlacklist* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserChatBlacklist::InternalSwap(UserChatBlacklist* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ticketid_, other->ticketid_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserChatBlacklist::GetMetadata() const {
  protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void proc_load_user_chat_blacklist_Parameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int proc_load_user_chat_blacklist_Parameter::kPUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

proc_load_user_chat_blacklist_Parameter::proc_load_user_chat_blacklist_Parameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist_Parameter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.proc_load_user_chat_blacklist.Parameter)
}
proc_load_user_chat_blacklist_Parameter::proc_load_user_chat_blacklist_Parameter(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist_Parameter.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.proc_load_user_chat_blacklist.Parameter)
}
proc_load_user_chat_blacklist_Parameter::proc_load_user_chat_blacklist_Parameter(const proc_load_user_chat_blacklist_Parameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  p_userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_p_userid()) {
    p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p_userid(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:db.proc_load_user_chat_blacklist.Parameter)
}

void proc_load_user_chat_blacklist_Parameter::SharedCtor() {
  p_userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

proc_load_user_chat_blacklist_Parameter::~proc_load_user_chat_blacklist_Parameter() {
  // @@protoc_insertion_point(destructor:db.proc_load_user_chat_blacklist.Parameter)
  SharedDtor();
}

void proc_load_user_chat_blacklist_Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  p_userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void proc_load_user_chat_blacklist_Parameter::ArenaDtor(void* object) {
  proc_load_user_chat_blacklist_Parameter* _this = reinterpret_cast< proc_load_user_chat_blacklist_Parameter* >(object);
  (void)_this;
}
void proc_load_user_chat_blacklist_Parameter::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void proc_load_user_chat_blacklist_Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* proc_load_user_chat_blacklist_Parameter::descriptor() {
  ::protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const proc_load_user_chat_blacklist_Parameter& proc_load_user_chat_blacklist_Parameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist_Parameter.base);
  return *internal_default_instance();
}


void proc_load_user_chat_blacklist_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:db.proc_load_user_chat_blacklist.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    p_userid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool proc_load_user_chat_blacklist_Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.proc_load_user_chat_blacklist.Parameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes p_userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_p_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.proc_load_user_chat_blacklist.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.proc_load_user_chat_blacklist.Parameter)
  return false;
#undef DO_
}

void proc_load_user_chat_blacklist_Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.proc_load_user_chat_blacklist.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes p_userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->p_userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.proc_load_user_chat_blacklist.Parameter)
}

::google::protobuf::uint8* proc_load_user_chat_blacklist_Parameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.proc_load_user_chat_blacklist.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes p_userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->p_userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.proc_load_user_chat_blacklist.Parameter)
  return target;
}

size_t proc_load_user_chat_blacklist_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.proc_load_user_chat_blacklist.Parameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes p_userid = 1;
  if (has_p_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->p_userid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proc_load_user_chat_blacklist_Parameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.proc_load_user_chat_blacklist.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const proc_load_user_chat_blacklist_Parameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const proc_load_user_chat_blacklist_Parameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.proc_load_user_chat_blacklist.Parameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.proc_load_user_chat_blacklist.Parameter)
    MergeFrom(*source);
  }
}

void proc_load_user_chat_blacklist_Parameter::MergeFrom(const proc_load_user_chat_blacklist_Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.proc_load_user_chat_blacklist.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_p_userid()) {
    set_p_userid(from.p_userid());
  }
}

void proc_load_user_chat_blacklist_Parameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.proc_load_user_chat_blacklist.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proc_load_user_chat_blacklist_Parameter::CopyFrom(const proc_load_user_chat_blacklist_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.proc_load_user_chat_blacklist.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proc_load_user_chat_blacklist_Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void proc_load_user_chat_blacklist_Parameter::Swap(proc_load_user_chat_blacklist_Parameter* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    proc_load_user_chat_blacklist_Parameter* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void proc_load_user_chat_blacklist_Parameter::UnsafeArenaSwap(proc_load_user_chat_blacklist_Parameter* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void proc_load_user_chat_blacklist_Parameter::InternalSwap(proc_load_user_chat_blacklist_Parameter* other) {
  using std::swap;
  p_userid_.Swap(&other->p_userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata proc_load_user_chat_blacklist_Parameter::GetMetadata() const {
  protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void proc_load_user_chat_blacklist_ReturnRecord::InitAsDefaultInstance() {
  ::db::_proc_load_user_chat_blacklist_ReturnRecord_default_instance_._instance.get_mutable()->user_ = const_cast< ::db::UserChatBlacklist*>(
      ::db::UserChatBlacklist::internal_default_instance());
}
void proc_load_user_chat_blacklist_ReturnRecord::unsafe_arena_set_allocated_user(
    ::db::UserChatBlacklist* user) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_;
  }
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_load_user_chat_blacklist.ReturnRecord.user)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int proc_load_user_chat_blacklist_ReturnRecord::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

proc_load_user_chat_blacklist_ReturnRecord::proc_load_user_chat_blacklist_ReturnRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist_ReturnRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.proc_load_user_chat_blacklist.ReturnRecord)
}
proc_load_user_chat_blacklist_ReturnRecord::proc_load_user_chat_blacklist_ReturnRecord(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist_ReturnRecord.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.proc_load_user_chat_blacklist.ReturnRecord)
}
proc_load_user_chat_blacklist_ReturnRecord::proc_load_user_chat_blacklist_ReturnRecord(const proc_load_user_chat_blacklist_ReturnRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::db::UserChatBlacklist(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:db.proc_load_user_chat_blacklist.ReturnRecord)
}

void proc_load_user_chat_blacklist_ReturnRecord::SharedCtor() {
  user_ = NULL;
}

proc_load_user_chat_blacklist_ReturnRecord::~proc_load_user_chat_blacklist_ReturnRecord() {
  // @@protoc_insertion_point(destructor:db.proc_load_user_chat_blacklist.ReturnRecord)
  SharedDtor();
}

void proc_load_user_chat_blacklist_ReturnRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete user_;
}

void proc_load_user_chat_blacklist_ReturnRecord::ArenaDtor(void* object) {
  proc_load_user_chat_blacklist_ReturnRecord* _this = reinterpret_cast< proc_load_user_chat_blacklist_ReturnRecord* >(object);
  (void)_this;
}
void proc_load_user_chat_blacklist_ReturnRecord::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void proc_load_user_chat_blacklist_ReturnRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* proc_load_user_chat_blacklist_ReturnRecord::descriptor() {
  ::protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const proc_load_user_chat_blacklist_ReturnRecord& proc_load_user_chat_blacklist_ReturnRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist_ReturnRecord.base);
  return *internal_default_instance();
}


void proc_load_user_chat_blacklist_ReturnRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:db.proc_load_user_chat_blacklist.ReturnRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_ != NULL);
    user_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool proc_load_user_chat_blacklist_ReturnRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.proc_load_user_chat_blacklist.ReturnRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db.UserChatBlacklist user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.proc_load_user_chat_blacklist.ReturnRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.proc_load_user_chat_blacklist.ReturnRecord)
  return false;
#undef DO_
}

void proc_load_user_chat_blacklist_ReturnRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.proc_load_user_chat_blacklist.ReturnRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .db.UserChatBlacklist user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.proc_load_user_chat_blacklist.ReturnRecord)
}

::google::protobuf::uint8* proc_load_user_chat_blacklist_ReturnRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.proc_load_user_chat_blacklist.ReturnRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .db.UserChatBlacklist user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.proc_load_user_chat_blacklist.ReturnRecord)
  return target;
}

size_t proc_load_user_chat_blacklist_ReturnRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.proc_load_user_chat_blacklist.ReturnRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .db.UserChatBlacklist user = 1;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proc_load_user_chat_blacklist_ReturnRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.proc_load_user_chat_blacklist.ReturnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const proc_load_user_chat_blacklist_ReturnRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const proc_load_user_chat_blacklist_ReturnRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.proc_load_user_chat_blacklist.ReturnRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.proc_load_user_chat_blacklist.ReturnRecord)
    MergeFrom(*source);
  }
}

void proc_load_user_chat_blacklist_ReturnRecord::MergeFrom(const proc_load_user_chat_blacklist_ReturnRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.proc_load_user_chat_blacklist.ReturnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::db::UserChatBlacklist::MergeFrom(from.user());
  }
}

void proc_load_user_chat_blacklist_ReturnRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.proc_load_user_chat_blacklist.ReturnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proc_load_user_chat_blacklist_ReturnRecord::CopyFrom(const proc_load_user_chat_blacklist_ReturnRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.proc_load_user_chat_blacklist.ReturnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proc_load_user_chat_blacklist_ReturnRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void proc_load_user_chat_blacklist_ReturnRecord::Swap(proc_load_user_chat_blacklist_ReturnRecord* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    proc_load_user_chat_blacklist_ReturnRecord* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void proc_load_user_chat_blacklist_ReturnRecord::UnsafeArenaSwap(proc_load_user_chat_blacklist_ReturnRecord* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void proc_load_user_chat_blacklist_ReturnRecord::InternalSwap(proc_load_user_chat_blacklist_ReturnRecord* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata proc_load_user_chat_blacklist_ReturnRecord::GetMetadata() const {
  protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void proc_load_user_chat_blacklist::InitAsDefaultInstance() {
  ::db::_proc_load_user_chat_blacklist_default_instance_._instance.get_mutable()->param_ = const_cast< ::db::proc_load_user_chat_blacklist_Parameter*>(
      ::db::proc_load_user_chat_blacklist_Parameter::internal_default_instance());
}
void proc_load_user_chat_blacklist::unsafe_arena_set_allocated_param(
    ::db::proc_load_user_chat_blacklist_Parameter* param) {
  if (GetArenaNoVirtual() == NULL) {
    delete param_;
  }
  param_ = param;
  if (param) {
    set_has_param();
  } else {
    clear_has_param();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_load_user_chat_blacklist.param)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int proc_load_user_chat_blacklist::kParamFieldNumber;
const int proc_load_user_chat_blacklist::kReturnRecordListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

proc_load_user_chat_blacklist::proc_load_user_chat_blacklist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.proc_load_user_chat_blacklist)
}
proc_load_user_chat_blacklist::proc_load_user_chat_blacklist(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  return_record_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.proc_load_user_chat_blacklist)
}
proc_load_user_chat_blacklist::proc_load_user_chat_blacklist(const proc_load_user_chat_blacklist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      return_record_list_(from.return_record_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_param()) {
    param_ = new ::db::proc_load_user_chat_blacklist_Parameter(*from.param_);
  } else {
    param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:db.proc_load_user_chat_blacklist)
}

void proc_load_user_chat_blacklist::SharedCtor() {
  param_ = NULL;
}

proc_load_user_chat_blacklist::~proc_load_user_chat_blacklist() {
  // @@protoc_insertion_point(destructor:db.proc_load_user_chat_blacklist)
  SharedDtor();
}

void proc_load_user_chat_blacklist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete param_;
}

void proc_load_user_chat_blacklist::ArenaDtor(void* object) {
  proc_load_user_chat_blacklist* _this = reinterpret_cast< proc_load_user_chat_blacklist* >(object);
  (void)_this;
}
void proc_load_user_chat_blacklist::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void proc_load_user_chat_blacklist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* proc_load_user_chat_blacklist::descriptor() {
  ::protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const proc_load_user_chat_blacklist& proc_load_user_chat_blacklist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_load_user_chat_blacklist.base);
  return *internal_default_instance();
}


void proc_load_user_chat_blacklist::Clear() {
// @@protoc_insertion_point(message_clear_start:db.proc_load_user_chat_blacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return_record_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(param_ != NULL);
    param_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool proc_load_user_chat_blacklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.proc_load_user_chat_blacklist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .db.proc_load_user_chat_blacklist.Parameter param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .db.proc_load_user_chat_blacklist.ReturnRecord return_record_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_return_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.proc_load_user_chat_blacklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.proc_load_user_chat_blacklist)
  return false;
#undef DO_
}

void proc_load_user_chat_blacklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.proc_load_user_chat_blacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .db.proc_load_user_chat_blacklist.Parameter param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_param(), output);
  }

  // repeated .db.proc_load_user_chat_blacklist.ReturnRecord return_record_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->return_record_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->return_record_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.proc_load_user_chat_blacklist)
}

::google::protobuf::uint8* proc_load_user_chat_blacklist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.proc_load_user_chat_blacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .db.proc_load_user_chat_blacklist.Parameter param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_param(), deterministic, target);
  }

  // repeated .db.proc_load_user_chat_blacklist.ReturnRecord return_record_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->return_record_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->return_record_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.proc_load_user_chat_blacklist)
  return target;
}

size_t proc_load_user_chat_blacklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.proc_load_user_chat_blacklist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.proc_load_user_chat_blacklist.ReturnRecord return_record_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->return_record_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->return_record_list(static_cast<int>(i)));
    }
  }

  // optional .db.proc_load_user_chat_blacklist.Parameter param = 1;
  if (has_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proc_load_user_chat_blacklist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.proc_load_user_chat_blacklist)
  GOOGLE_DCHECK_NE(&from, this);
  const proc_load_user_chat_blacklist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const proc_load_user_chat_blacklist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.proc_load_user_chat_blacklist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.proc_load_user_chat_blacklist)
    MergeFrom(*source);
  }
}

void proc_load_user_chat_blacklist::MergeFrom(const proc_load_user_chat_blacklist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.proc_load_user_chat_blacklist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  return_record_list_.MergeFrom(from.return_record_list_);
  if (from.has_param()) {
    mutable_param()->::db::proc_load_user_chat_blacklist_Parameter::MergeFrom(from.param());
  }
}

void proc_load_user_chat_blacklist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.proc_load_user_chat_blacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proc_load_user_chat_blacklist::CopyFrom(const proc_load_user_chat_blacklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.proc_load_user_chat_blacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proc_load_user_chat_blacklist::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->return_record_list())) return false;
  if (has_param()) {
    if (!this->param_->IsInitialized()) return false;
  }
  return true;
}

void proc_load_user_chat_blacklist::Swap(proc_load_user_chat_blacklist* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    proc_load_user_chat_blacklist* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void proc_load_user_chat_blacklist::UnsafeArenaSwap(proc_load_user_chat_blacklist* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void proc_load_user_chat_blacklist::InternalSwap(proc_load_user_chat_blacklist* other) {
  using std::swap;
  CastToBase(&return_record_list_)->InternalSwap(CastToBase(&other->return_record_list_));
  swap(param_, other->param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata proc_load_user_chat_blacklist::GetMetadata() const {
  protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void proc_save_user_chat_blacklist_Parameter::InitAsDefaultInstance() {
  ::db::_proc_save_user_chat_blacklist_Parameter_default_instance_._instance.get_mutable()->p_user_ = const_cast< ::db::UserChatBlacklist*>(
      ::db::UserChatBlacklist::internal_default_instance());
}
void proc_save_user_chat_blacklist_Parameter::unsafe_arena_set_allocated_p_user(
    ::db::UserChatBlacklist* p_user) {
  if (GetArenaNoVirtual() == NULL) {
    delete p_user_;
  }
  p_user_ = p_user;
  if (p_user) {
    set_has_p_user();
  } else {
    clear_has_p_user();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_save_user_chat_blacklist.Parameter.p_user)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int proc_save_user_chat_blacklist_Parameter::kPUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

proc_save_user_chat_blacklist_Parameter::proc_save_user_chat_blacklist_Parameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcChat_2eproto::scc_info_proc_save_user_chat_blacklist_Parameter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.proc_save_user_chat_blacklist.Parameter)
}
proc_save_user_chat_blacklist_Parameter::proc_save_user_chat_blacklist_Parameter(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_save_user_chat_blacklist_Parameter.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.proc_save_user_chat_blacklist.Parameter)
}
proc_save_user_chat_blacklist_Parameter::proc_save_user_chat_blacklist_Parameter(const proc_save_user_chat_blacklist_Parameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_p_user()) {
    p_user_ = new ::db::UserChatBlacklist(*from.p_user_);
  } else {
    p_user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:db.proc_save_user_chat_blacklist.Parameter)
}

void proc_save_user_chat_blacklist_Parameter::SharedCtor() {
  p_user_ = NULL;
}

proc_save_user_chat_blacklist_Parameter::~proc_save_user_chat_blacklist_Parameter() {
  // @@protoc_insertion_point(destructor:db.proc_save_user_chat_blacklist.Parameter)
  SharedDtor();
}

void proc_save_user_chat_blacklist_Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete p_user_;
}

void proc_save_user_chat_blacklist_Parameter::ArenaDtor(void* object) {
  proc_save_user_chat_blacklist_Parameter* _this = reinterpret_cast< proc_save_user_chat_blacklist_Parameter* >(object);
  (void)_this;
}
void proc_save_user_chat_blacklist_Parameter::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void proc_save_user_chat_blacklist_Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* proc_save_user_chat_blacklist_Parameter::descriptor() {
  ::protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const proc_save_user_chat_blacklist_Parameter& proc_save_user_chat_blacklist_Parameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_save_user_chat_blacklist_Parameter.base);
  return *internal_default_instance();
}


void proc_save_user_chat_blacklist_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:db.proc_save_user_chat_blacklist.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(p_user_ != NULL);
    p_user_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool proc_save_user_chat_blacklist_Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.proc_save_user_chat_blacklist.Parameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db.UserChatBlacklist p_user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.proc_save_user_chat_blacklist.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.proc_save_user_chat_blacklist.Parameter)
  return false;
#undef DO_
}

void proc_save_user_chat_blacklist_Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.proc_save_user_chat_blacklist.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .db.UserChatBlacklist p_user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_p_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.proc_save_user_chat_blacklist.Parameter)
}

::google::protobuf::uint8* proc_save_user_chat_blacklist_Parameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.proc_save_user_chat_blacklist.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .db.UserChatBlacklist p_user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_p_user(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.proc_save_user_chat_blacklist.Parameter)
  return target;
}

size_t proc_save_user_chat_blacklist_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.proc_save_user_chat_blacklist.Parameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .db.UserChatBlacklist p_user = 1;
  if (has_p_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p_user_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proc_save_user_chat_blacklist_Parameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.proc_save_user_chat_blacklist.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const proc_save_user_chat_blacklist_Parameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const proc_save_user_chat_blacklist_Parameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.proc_save_user_chat_blacklist.Parameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.proc_save_user_chat_blacklist.Parameter)
    MergeFrom(*source);
  }
}

void proc_save_user_chat_blacklist_Parameter::MergeFrom(const proc_save_user_chat_blacklist_Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.proc_save_user_chat_blacklist.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_p_user()) {
    mutable_p_user()->::db::UserChatBlacklist::MergeFrom(from.p_user());
  }
}

void proc_save_user_chat_blacklist_Parameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.proc_save_user_chat_blacklist.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proc_save_user_chat_blacklist_Parameter::CopyFrom(const proc_save_user_chat_blacklist_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.proc_save_user_chat_blacklist.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proc_save_user_chat_blacklist_Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_p_user()) {
    if (!this->p_user_->IsInitialized()) return false;
  }
  return true;
}

void proc_save_user_chat_blacklist_Parameter::Swap(proc_save_user_chat_blacklist_Parameter* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    proc_save_user_chat_blacklist_Parameter* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void proc_save_user_chat_blacklist_Parameter::UnsafeArenaSwap(proc_save_user_chat_blacklist_Parameter* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void proc_save_user_chat_blacklist_Parameter::InternalSwap(proc_save_user_chat_blacklist_Parameter* other) {
  using std::swap;
  swap(p_user_, other->p_user_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata proc_save_user_chat_blacklist_Parameter::GetMetadata() const {
  protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void proc_save_user_chat_blacklist::InitAsDefaultInstance() {
  ::db::_proc_save_user_chat_blacklist_default_instance_._instance.get_mutable()->param_ = const_cast< ::db::proc_save_user_chat_blacklist_Parameter*>(
      ::db::proc_save_user_chat_blacklist_Parameter::internal_default_instance());
}
void proc_save_user_chat_blacklist::unsafe_arena_set_allocated_param(
    ::db::proc_save_user_chat_blacklist_Parameter* param) {
  if (GetArenaNoVirtual() == NULL) {
    delete param_;
  }
  param_ = param;
  if (param) {
    set_has_param();
  } else {
    clear_has_param();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_save_user_chat_blacklist.param)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int proc_save_user_chat_blacklist::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

proc_save_user_chat_blacklist::proc_save_user_chat_blacklist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcChat_2eproto::scc_info_proc_save_user_chat_blacklist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.proc_save_user_chat_blacklist)
}
proc_save_user_chat_blacklist::proc_save_user_chat_blacklist(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_save_user_chat_blacklist.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.proc_save_user_chat_blacklist)
}
proc_save_user_chat_blacklist::proc_save_user_chat_blacklist(const proc_save_user_chat_blacklist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_param()) {
    param_ = new ::db::proc_save_user_chat_blacklist_Parameter(*from.param_);
  } else {
    param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:db.proc_save_user_chat_blacklist)
}

void proc_save_user_chat_blacklist::SharedCtor() {
  param_ = NULL;
}

proc_save_user_chat_blacklist::~proc_save_user_chat_blacklist() {
  // @@protoc_insertion_point(destructor:db.proc_save_user_chat_blacklist)
  SharedDtor();
}

void proc_save_user_chat_blacklist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete param_;
}

void proc_save_user_chat_blacklist::ArenaDtor(void* object) {
  proc_save_user_chat_blacklist* _this = reinterpret_cast< proc_save_user_chat_blacklist* >(object);
  (void)_this;
}
void proc_save_user_chat_blacklist::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void proc_save_user_chat_blacklist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* proc_save_user_chat_blacklist::descriptor() {
  ::protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const proc_save_user_chat_blacklist& proc_save_user_chat_blacklist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcChat_2eproto::scc_info_proc_save_user_chat_blacklist.base);
  return *internal_default_instance();
}


void proc_save_user_chat_blacklist::Clear() {
// @@protoc_insertion_point(message_clear_start:db.proc_save_user_chat_blacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(param_ != NULL);
    param_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool proc_save_user_chat_blacklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.proc_save_user_chat_blacklist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .db.proc_save_user_chat_blacklist.Parameter param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.proc_save_user_chat_blacklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.proc_save_user_chat_blacklist)
  return false;
#undef DO_
}

void proc_save_user_chat_blacklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.proc_save_user_chat_blacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .db.proc_save_user_chat_blacklist.Parameter param = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.proc_save_user_chat_blacklist)
}

::google::protobuf::uint8* proc_save_user_chat_blacklist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.proc_save_user_chat_blacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .db.proc_save_user_chat_blacklist.Parameter param = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_param(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.proc_save_user_chat_blacklist)
  return target;
}

size_t proc_save_user_chat_blacklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.proc_save_user_chat_blacklist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .db.proc_save_user_chat_blacklist.Parameter param = 2;
  if (has_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proc_save_user_chat_blacklist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.proc_save_user_chat_blacklist)
  GOOGLE_DCHECK_NE(&from, this);
  const proc_save_user_chat_blacklist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const proc_save_user_chat_blacklist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.proc_save_user_chat_blacklist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.proc_save_user_chat_blacklist)
    MergeFrom(*source);
  }
}

void proc_save_user_chat_blacklist::MergeFrom(const proc_save_user_chat_blacklist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.proc_save_user_chat_blacklist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_param()) {
    mutable_param()->::db::proc_save_user_chat_blacklist_Parameter::MergeFrom(from.param());
  }
}

void proc_save_user_chat_blacklist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.proc_save_user_chat_blacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proc_save_user_chat_blacklist::CopyFrom(const proc_save_user_chat_blacklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.proc_save_user_chat_blacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proc_save_user_chat_blacklist::IsInitialized() const {
  if (has_param()) {
    if (!this->param_->IsInitialized()) return false;
  }
  return true;
}

void proc_save_user_chat_blacklist::Swap(proc_save_user_chat_blacklist* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    proc_save_user_chat_blacklist* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void proc_save_user_chat_blacklist::UnsafeArenaSwap(proc_save_user_chat_blacklist* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void proc_save_user_chat_blacklist::InternalSwap(proc_save_user_chat_blacklist* other) {
  using std::swap;
  swap(param_, other->param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata proc_save_user_chat_blacklist::GetMetadata() const {
  protobuf_StoredProcChat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcChat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserChatBlacklist* Arena::CreateMaybeMessage< ::db::UserChatBlacklist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserChatBlacklist >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::proc_load_user_chat_blacklist_Parameter* Arena::CreateMaybeMessage< ::db::proc_load_user_chat_blacklist_Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::proc_load_user_chat_blacklist_Parameter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::proc_load_user_chat_blacklist_ReturnRecord* Arena::CreateMaybeMessage< ::db::proc_load_user_chat_blacklist_ReturnRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::proc_load_user_chat_blacklist_ReturnRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::proc_load_user_chat_blacklist* Arena::CreateMaybeMessage< ::db::proc_load_user_chat_blacklist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::proc_load_user_chat_blacklist >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::proc_save_user_chat_blacklist_Parameter* Arena::CreateMaybeMessage< ::db::proc_save_user_chat_blacklist_Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::proc_save_user_chat_blacklist_Parameter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::proc_save_user_chat_blacklist* Arena::CreateMaybeMessage< ::db::proc_save_user_chat_blacklist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::proc_save_user_chat_blacklist >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
