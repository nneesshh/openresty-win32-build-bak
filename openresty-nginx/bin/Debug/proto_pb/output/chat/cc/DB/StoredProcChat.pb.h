// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcChat.proto

#ifndef PROTOBUF_INCLUDED_StoredProcChat_2eproto
#define PROTOBUF_INCLUDED_StoredProcChat_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcChat_2eproto 

namespace protobuf_StoredProcChat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_StoredProcChat_2eproto
namespace db {
class UserChatBlacklist;
class UserChatBlacklistDefaultTypeInternal;
extern UserChatBlacklistDefaultTypeInternal _UserChatBlacklist_default_instance_;
class proc_load_user_chat_blacklist;
class proc_load_user_chat_blacklistDefaultTypeInternal;
extern proc_load_user_chat_blacklistDefaultTypeInternal _proc_load_user_chat_blacklist_default_instance_;
class proc_load_user_chat_blacklist_Parameter;
class proc_load_user_chat_blacklist_ParameterDefaultTypeInternal;
extern proc_load_user_chat_blacklist_ParameterDefaultTypeInternal _proc_load_user_chat_blacklist_Parameter_default_instance_;
class proc_load_user_chat_blacklist_ReturnRecord;
class proc_load_user_chat_blacklist_ReturnRecordDefaultTypeInternal;
extern proc_load_user_chat_blacklist_ReturnRecordDefaultTypeInternal _proc_load_user_chat_blacklist_ReturnRecord_default_instance_;
class proc_save_user_chat_blacklist;
class proc_save_user_chat_blacklistDefaultTypeInternal;
extern proc_save_user_chat_blacklistDefaultTypeInternal _proc_save_user_chat_blacklist_default_instance_;
class proc_save_user_chat_blacklist_Parameter;
class proc_save_user_chat_blacklist_ParameterDefaultTypeInternal;
extern proc_save_user_chat_blacklist_ParameterDefaultTypeInternal _proc_save_user_chat_blacklist_Parameter_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::UserChatBlacklist* Arena::CreateMaybeMessage<::db::UserChatBlacklist>(Arena*);
template<> ::db::proc_load_user_chat_blacklist* Arena::CreateMaybeMessage<::db::proc_load_user_chat_blacklist>(Arena*);
template<> ::db::proc_load_user_chat_blacklist_Parameter* Arena::CreateMaybeMessage<::db::proc_load_user_chat_blacklist_Parameter>(Arena*);
template<> ::db::proc_load_user_chat_blacklist_ReturnRecord* Arena::CreateMaybeMessage<::db::proc_load_user_chat_blacklist_ReturnRecord>(Arena*);
template<> ::db::proc_save_user_chat_blacklist* Arena::CreateMaybeMessage<::db::proc_save_user_chat_blacklist>(Arena*);
template<> ::db::proc_save_user_chat_blacklist_Parameter* Arena::CreateMaybeMessage<::db::proc_save_user_chat_blacklist_Parameter>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

// ===================================================================

class UserChatBlacklist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserChatBlacklist) */ {
 public:
  UserChatBlacklist();
  virtual ~UserChatBlacklist();

  UserChatBlacklist(const UserChatBlacklist& from);

  inline UserChatBlacklist& operator=(const UserChatBlacklist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserChatBlacklist(UserChatBlacklist&& from) noexcept
    : UserChatBlacklist() {
    *this = ::std::move(from);
  }

  inline UserChatBlacklist& operator=(UserChatBlacklist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserChatBlacklist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserChatBlacklist* internal_default_instance() {
    return reinterpret_cast<const UserChatBlacklist*>(
               &_UserChatBlacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(UserChatBlacklist* other);
  void Swap(UserChatBlacklist* other);
  friend void swap(UserChatBlacklist& a, UserChatBlacklist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserChatBlacklist* New() const final {
    return CreateMaybeMessage<UserChatBlacklist>(NULL);
  }

  UserChatBlacklist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserChatBlacklist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserChatBlacklist& from);
  void MergeFrom(const UserChatBlacklist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserChatBlacklist* other);
  protected:
  explicit UserChatBlacklist(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required uint64 ticketid = 3;
  bool has_ticketid() const;
  void clear_ticketid();
  static const int kTicketidFieldNumber = 3;
  ::google::protobuf::uint64 ticketid() const;
  void set_ticketid(::google::protobuf::uint64 value);

  // required int32 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserChatBlacklist)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_index();
  void clear_has_index();
  void set_has_ticketid();
  void clear_has_ticketid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::uint64 ticketid_;
  ::google::protobuf::int32 index_;
  friend struct ::protobuf_StoredProcChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_load_user_chat_blacklist_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_load_user_chat_blacklist.Parameter) */ {
 public:
  proc_load_user_chat_blacklist_Parameter();
  virtual ~proc_load_user_chat_blacklist_Parameter();

  proc_load_user_chat_blacklist_Parameter(const proc_load_user_chat_blacklist_Parameter& from);

  inline proc_load_user_chat_blacklist_Parameter& operator=(const proc_load_user_chat_blacklist_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_load_user_chat_blacklist_Parameter(proc_load_user_chat_blacklist_Parameter&& from) noexcept
    : proc_load_user_chat_blacklist_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_load_user_chat_blacklist_Parameter& operator=(proc_load_user_chat_blacklist_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_load_user_chat_blacklist_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_load_user_chat_blacklist_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_load_user_chat_blacklist_Parameter*>(
               &_proc_load_user_chat_blacklist_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(proc_load_user_chat_blacklist_Parameter* other);
  void Swap(proc_load_user_chat_blacklist_Parameter* other);
  friend void swap(proc_load_user_chat_blacklist_Parameter& a, proc_load_user_chat_blacklist_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_load_user_chat_blacklist_Parameter* New() const final {
    return CreateMaybeMessage<proc_load_user_chat_blacklist_Parameter>(NULL);
  }

  proc_load_user_chat_blacklist_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_load_user_chat_blacklist_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_load_user_chat_blacklist_Parameter& from);
  void MergeFrom(const proc_load_user_chat_blacklist_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_load_user_chat_blacklist_Parameter* other);
  protected:
  explicit proc_load_user_chat_blacklist_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes p_userid = 1;
  bool has_p_userid() const;
  void clear_p_userid();
  static const int kPUseridFieldNumber = 1;
  const ::std::string& p_userid() const;
  void set_p_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_p_userid(::std::string&& value);
  #endif
  void set_p_userid(const char* value);
  void set_p_userid(const void* value, size_t size);
  ::std::string* mutable_p_userid();
  ::std::string* release_p_userid();
  void set_allocated_p_userid(::std::string* p_userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_p_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p_userid(
      ::std::string* p_userid);

  // @@protoc_insertion_point(class_scope:db.proc_load_user_chat_blacklist.Parameter)
 private:
  void set_has_p_userid();
  void clear_has_p_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr p_userid_;
  friend struct ::protobuf_StoredProcChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_load_user_chat_blacklist_ReturnRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_load_user_chat_blacklist.ReturnRecord) */ {
 public:
  proc_load_user_chat_blacklist_ReturnRecord();
  virtual ~proc_load_user_chat_blacklist_ReturnRecord();

  proc_load_user_chat_blacklist_ReturnRecord(const proc_load_user_chat_blacklist_ReturnRecord& from);

  inline proc_load_user_chat_blacklist_ReturnRecord& operator=(const proc_load_user_chat_blacklist_ReturnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_load_user_chat_blacklist_ReturnRecord(proc_load_user_chat_blacklist_ReturnRecord&& from) noexcept
    : proc_load_user_chat_blacklist_ReturnRecord() {
    *this = ::std::move(from);
  }

  inline proc_load_user_chat_blacklist_ReturnRecord& operator=(proc_load_user_chat_blacklist_ReturnRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_load_user_chat_blacklist_ReturnRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_load_user_chat_blacklist_ReturnRecord* internal_default_instance() {
    return reinterpret_cast<const proc_load_user_chat_blacklist_ReturnRecord*>(
               &_proc_load_user_chat_blacklist_ReturnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(proc_load_user_chat_blacklist_ReturnRecord* other);
  void Swap(proc_load_user_chat_blacklist_ReturnRecord* other);
  friend void swap(proc_load_user_chat_blacklist_ReturnRecord& a, proc_load_user_chat_blacklist_ReturnRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_load_user_chat_blacklist_ReturnRecord* New() const final {
    return CreateMaybeMessage<proc_load_user_chat_blacklist_ReturnRecord>(NULL);
  }

  proc_load_user_chat_blacklist_ReturnRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_load_user_chat_blacklist_ReturnRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_load_user_chat_blacklist_ReturnRecord& from);
  void MergeFrom(const proc_load_user_chat_blacklist_ReturnRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_load_user_chat_blacklist_ReturnRecord* other);
  protected:
  explicit proc_load_user_chat_blacklist_ReturnRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.UserChatBlacklist user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  private:
  const ::db::UserChatBlacklist& _internal_user() const;
  public:
  const ::db::UserChatBlacklist& user() const;
  ::db::UserChatBlacklist* release_user();
  ::db::UserChatBlacklist* mutable_user();
  void set_allocated_user(::db::UserChatBlacklist* user);
  void unsafe_arena_set_allocated_user(
      ::db::UserChatBlacklist* user);
  ::db::UserChatBlacklist* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:db.proc_load_user_chat_blacklist.ReturnRecord)
 private:
  void set_has_user();
  void clear_has_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::UserChatBlacklist* user_;
  friend struct ::protobuf_StoredProcChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_load_user_chat_blacklist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_load_user_chat_blacklist) */ {
 public:
  proc_load_user_chat_blacklist();
  virtual ~proc_load_user_chat_blacklist();

  proc_load_user_chat_blacklist(const proc_load_user_chat_blacklist& from);

  inline proc_load_user_chat_blacklist& operator=(const proc_load_user_chat_blacklist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_load_user_chat_blacklist(proc_load_user_chat_blacklist&& from) noexcept
    : proc_load_user_chat_blacklist() {
    *this = ::std::move(from);
  }

  inline proc_load_user_chat_blacklist& operator=(proc_load_user_chat_blacklist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_load_user_chat_blacklist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_load_user_chat_blacklist* internal_default_instance() {
    return reinterpret_cast<const proc_load_user_chat_blacklist*>(
               &_proc_load_user_chat_blacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(proc_load_user_chat_blacklist* other);
  void Swap(proc_load_user_chat_blacklist* other);
  friend void swap(proc_load_user_chat_blacklist& a, proc_load_user_chat_blacklist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_load_user_chat_blacklist* New() const final {
    return CreateMaybeMessage<proc_load_user_chat_blacklist>(NULL);
  }

  proc_load_user_chat_blacklist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_load_user_chat_blacklist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_load_user_chat_blacklist& from);
  void MergeFrom(const proc_load_user_chat_blacklist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_load_user_chat_blacklist* other);
  protected:
  explicit proc_load_user_chat_blacklist(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_load_user_chat_blacklist_Parameter Parameter;
  typedef proc_load_user_chat_blacklist_ReturnRecord ReturnRecord;

  // accessors -------------------------------------------------------

  // repeated .db.proc_load_user_chat_blacklist.ReturnRecord return_record_list = 2;
  int return_record_list_size() const;
  void clear_return_record_list();
  static const int kReturnRecordListFieldNumber = 2;
  ::db::proc_load_user_chat_blacklist_ReturnRecord* mutable_return_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::proc_load_user_chat_blacklist_ReturnRecord >*
      mutable_return_record_list();
  const ::db::proc_load_user_chat_blacklist_ReturnRecord& return_record_list(int index) const;
  ::db::proc_load_user_chat_blacklist_ReturnRecord* add_return_record_list();
  const ::google::protobuf::RepeatedPtrField< ::db::proc_load_user_chat_blacklist_ReturnRecord >&
      return_record_list() const;

  // optional .db.proc_load_user_chat_blacklist.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_load_user_chat_blacklist_Parameter& _internal_param() const;
  public:
  const ::db::proc_load_user_chat_blacklist_Parameter& param() const;
  ::db::proc_load_user_chat_blacklist_Parameter* release_param();
  ::db::proc_load_user_chat_blacklist_Parameter* mutable_param();
  void set_allocated_param(::db::proc_load_user_chat_blacklist_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_load_user_chat_blacklist_Parameter* param);
  ::db::proc_load_user_chat_blacklist_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_load_user_chat_blacklist)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::proc_load_user_chat_blacklist_ReturnRecord > return_record_list_;
  ::db::proc_load_user_chat_blacklist_Parameter* param_;
  friend struct ::protobuf_StoredProcChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_save_user_chat_blacklist_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_save_user_chat_blacklist.Parameter) */ {
 public:
  proc_save_user_chat_blacklist_Parameter();
  virtual ~proc_save_user_chat_blacklist_Parameter();

  proc_save_user_chat_blacklist_Parameter(const proc_save_user_chat_blacklist_Parameter& from);

  inline proc_save_user_chat_blacklist_Parameter& operator=(const proc_save_user_chat_blacklist_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_save_user_chat_blacklist_Parameter(proc_save_user_chat_blacklist_Parameter&& from) noexcept
    : proc_save_user_chat_blacklist_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_save_user_chat_blacklist_Parameter& operator=(proc_save_user_chat_blacklist_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_save_user_chat_blacklist_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_save_user_chat_blacklist_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_save_user_chat_blacklist_Parameter*>(
               &_proc_save_user_chat_blacklist_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(proc_save_user_chat_blacklist_Parameter* other);
  void Swap(proc_save_user_chat_blacklist_Parameter* other);
  friend void swap(proc_save_user_chat_blacklist_Parameter& a, proc_save_user_chat_blacklist_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_save_user_chat_blacklist_Parameter* New() const final {
    return CreateMaybeMessage<proc_save_user_chat_blacklist_Parameter>(NULL);
  }

  proc_save_user_chat_blacklist_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_save_user_chat_blacklist_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_save_user_chat_blacklist_Parameter& from);
  void MergeFrom(const proc_save_user_chat_blacklist_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_save_user_chat_blacklist_Parameter* other);
  protected:
  explicit proc_save_user_chat_blacklist_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.UserChatBlacklist p_user = 1;
  bool has_p_user() const;
  void clear_p_user();
  static const int kPUserFieldNumber = 1;
  private:
  const ::db::UserChatBlacklist& _internal_p_user() const;
  public:
  const ::db::UserChatBlacklist& p_user() const;
  ::db::UserChatBlacklist* release_p_user();
  ::db::UserChatBlacklist* mutable_p_user();
  void set_allocated_p_user(::db::UserChatBlacklist* p_user);
  void unsafe_arena_set_allocated_p_user(
      ::db::UserChatBlacklist* p_user);
  ::db::UserChatBlacklist* unsafe_arena_release_p_user();

  // @@protoc_insertion_point(class_scope:db.proc_save_user_chat_blacklist.Parameter)
 private:
  void set_has_p_user();
  void clear_has_p_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::UserChatBlacklist* p_user_;
  friend struct ::protobuf_StoredProcChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_save_user_chat_blacklist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_save_user_chat_blacklist) */ {
 public:
  proc_save_user_chat_blacklist();
  virtual ~proc_save_user_chat_blacklist();

  proc_save_user_chat_blacklist(const proc_save_user_chat_blacklist& from);

  inline proc_save_user_chat_blacklist& operator=(const proc_save_user_chat_blacklist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_save_user_chat_blacklist(proc_save_user_chat_blacklist&& from) noexcept
    : proc_save_user_chat_blacklist() {
    *this = ::std::move(from);
  }

  inline proc_save_user_chat_blacklist& operator=(proc_save_user_chat_blacklist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_save_user_chat_blacklist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_save_user_chat_blacklist* internal_default_instance() {
    return reinterpret_cast<const proc_save_user_chat_blacklist*>(
               &_proc_save_user_chat_blacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(proc_save_user_chat_blacklist* other);
  void Swap(proc_save_user_chat_blacklist* other);
  friend void swap(proc_save_user_chat_blacklist& a, proc_save_user_chat_blacklist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_save_user_chat_blacklist* New() const final {
    return CreateMaybeMessage<proc_save_user_chat_blacklist>(NULL);
  }

  proc_save_user_chat_blacklist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_save_user_chat_blacklist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_save_user_chat_blacklist& from);
  void MergeFrom(const proc_save_user_chat_blacklist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_save_user_chat_blacklist* other);
  protected:
  explicit proc_save_user_chat_blacklist(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_save_user_chat_blacklist_Parameter Parameter;

  // accessors -------------------------------------------------------

  // optional .db.proc_save_user_chat_blacklist.Parameter param = 2;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 2;
  private:
  const ::db::proc_save_user_chat_blacklist_Parameter& _internal_param() const;
  public:
  const ::db::proc_save_user_chat_blacklist_Parameter& param() const;
  ::db::proc_save_user_chat_blacklist_Parameter* release_param();
  ::db::proc_save_user_chat_blacklist_Parameter* mutable_param();
  void set_allocated_param(::db::proc_save_user_chat_blacklist_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_save_user_chat_blacklist_Parameter* param);
  ::db::proc_save_user_chat_blacklist_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_save_user_chat_blacklist)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::proc_save_user_chat_blacklist_Parameter* param_;
  friend struct ::protobuf_StoredProcChat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserChatBlacklist

// required bytes userid = 1;
inline bool UserChatBlacklist::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserChatBlacklist::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserChatBlacklist::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserChatBlacklist::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserChatBlacklist::userid() const {
  // @@protoc_insertion_point(field_get:db.UserChatBlacklist.userid)
  return userid_.Get();
}
inline void UserChatBlacklist::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserChatBlacklist.userid)
}
#if LANG_CXX11
inline void UserChatBlacklist::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserChatBlacklist.userid)
}
#endif
inline void UserChatBlacklist::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserChatBlacklist.userid)
}
inline void UserChatBlacklist::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserChatBlacklist.userid)
}
inline ::std::string* UserChatBlacklist::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserChatBlacklist.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserChatBlacklist::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserChatBlacklist.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserChatBlacklist::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserChatBlacklist.userid)
}
inline ::std::string* UserChatBlacklist::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserChatBlacklist.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserChatBlacklist::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserChatBlacklist.userid)
}

// required int32 index = 2;
inline bool UserChatBlacklist::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserChatBlacklist::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserChatBlacklist::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserChatBlacklist::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 UserChatBlacklist::index() const {
  // @@protoc_insertion_point(field_get:db.UserChatBlacklist.index)
  return index_;
}
inline void UserChatBlacklist::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:db.UserChatBlacklist.index)
}

// required uint64 ticketid = 3;
inline bool UserChatBlacklist::has_ticketid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserChatBlacklist::set_has_ticketid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserChatBlacklist::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserChatBlacklist::clear_ticketid() {
  ticketid_ = GOOGLE_ULONGLONG(0);
  clear_has_ticketid();
}
inline ::google::protobuf::uint64 UserChatBlacklist::ticketid() const {
  // @@protoc_insertion_point(field_get:db.UserChatBlacklist.ticketid)
  return ticketid_;
}
inline void UserChatBlacklist::set_ticketid(::google::protobuf::uint64 value) {
  set_has_ticketid();
  ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.UserChatBlacklist.ticketid)
}

// -------------------------------------------------------------------

// proc_load_user_chat_blacklist_Parameter

// required bytes p_userid = 1;
inline bool proc_load_user_chat_blacklist_Parameter::has_p_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_load_user_chat_blacklist_Parameter::set_has_p_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_load_user_chat_blacklist_Parameter::clear_has_p_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_load_user_chat_blacklist_Parameter::clear_p_userid() {
  p_userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_p_userid();
}
inline const ::std::string& proc_load_user_chat_blacklist_Parameter::p_userid() const {
  // @@protoc_insertion_point(field_get:db.proc_load_user_chat_blacklist.Parameter.p_userid)
  return p_userid_.Get();
}
inline void proc_load_user_chat_blacklist_Parameter::set_p_userid(const ::std::string& value) {
  set_has_p_userid();
  p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.proc_load_user_chat_blacklist.Parameter.p_userid)
}
#if LANG_CXX11
inline void proc_load_user_chat_blacklist_Parameter::set_p_userid(::std::string&& value) {
  set_has_p_userid();
  p_userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.proc_load_user_chat_blacklist.Parameter.p_userid)
}
#endif
inline void proc_load_user_chat_blacklist_Parameter::set_p_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_p_userid();
  p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.proc_load_user_chat_blacklist.Parameter.p_userid)
}
inline void proc_load_user_chat_blacklist_Parameter::set_p_userid(const void* value,
    size_t size) {
  set_has_p_userid();
  p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.proc_load_user_chat_blacklist.Parameter.p_userid)
}
inline ::std::string* proc_load_user_chat_blacklist_Parameter::mutable_p_userid() {
  set_has_p_userid();
  // @@protoc_insertion_point(field_mutable:db.proc_load_user_chat_blacklist.Parameter.p_userid)
  return p_userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* proc_load_user_chat_blacklist_Parameter::release_p_userid() {
  // @@protoc_insertion_point(field_release:db.proc_load_user_chat_blacklist.Parameter.p_userid)
  if (!has_p_userid()) {
    return NULL;
  }
  clear_has_p_userid();
  return p_userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void proc_load_user_chat_blacklist_Parameter::set_allocated_p_userid(::std::string* p_userid) {
  if (p_userid != NULL) {
    set_has_p_userid();
  } else {
    clear_has_p_userid();
  }
  p_userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.proc_load_user_chat_blacklist.Parameter.p_userid)
}
inline ::std::string* proc_load_user_chat_blacklist_Parameter::unsafe_arena_release_p_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_load_user_chat_blacklist.Parameter.p_userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_p_userid();
  return p_userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void proc_load_user_chat_blacklist_Parameter::unsafe_arena_set_allocated_p_userid(
    ::std::string* p_userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (p_userid != NULL) {
    set_has_p_userid();
  } else {
    clear_has_p_userid();
  }
  p_userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      p_userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_load_user_chat_blacklist.Parameter.p_userid)
}

// -------------------------------------------------------------------

// proc_load_user_chat_blacklist_ReturnRecord

// required .db.UserChatBlacklist user = 1;
inline bool proc_load_user_chat_blacklist_ReturnRecord::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_load_user_chat_blacklist_ReturnRecord::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_load_user_chat_blacklist_ReturnRecord::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_load_user_chat_blacklist_ReturnRecord::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
inline const ::db::UserChatBlacklist& proc_load_user_chat_blacklist_ReturnRecord::_internal_user() const {
  return *user_;
}
inline const ::db::UserChatBlacklist& proc_load_user_chat_blacklist_ReturnRecord::user() const {
  const ::db::UserChatBlacklist* p = user_;
  // @@protoc_insertion_point(field_get:db.proc_load_user_chat_blacklist.ReturnRecord.user)
  return p != NULL ? *p : *reinterpret_cast<const ::db::UserChatBlacklist*>(
      &::db::_UserChatBlacklist_default_instance_);
}
inline ::db::UserChatBlacklist* proc_load_user_chat_blacklist_ReturnRecord::release_user() {
  // @@protoc_insertion_point(field_release:db.proc_load_user_chat_blacklist.ReturnRecord.user)
  clear_has_user();
  ::db::UserChatBlacklist* temp = user_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  user_ = NULL;
  return temp;
}
inline ::db::UserChatBlacklist* proc_load_user_chat_blacklist_ReturnRecord::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_load_user_chat_blacklist.ReturnRecord.user)
  clear_has_user();
  ::db::UserChatBlacklist* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::db::UserChatBlacklist* proc_load_user_chat_blacklist_ReturnRecord::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::db::UserChatBlacklist>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_load_user_chat_blacklist.ReturnRecord.user)
  return user_;
}
inline void proc_load_user_chat_blacklist_ReturnRecord::set_allocated_user(::db::UserChatBlacklist* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
  } else {
    clear_has_user();
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:db.proc_load_user_chat_blacklist.ReturnRecord.user)
}

// -------------------------------------------------------------------

// proc_load_user_chat_blacklist

// optional .db.proc_load_user_chat_blacklist.Parameter param = 1;
inline bool proc_load_user_chat_blacklist::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_load_user_chat_blacklist::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_load_user_chat_blacklist::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_load_user_chat_blacklist::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_load_user_chat_blacklist_Parameter& proc_load_user_chat_blacklist::_internal_param() const {
  return *param_;
}
inline const ::db::proc_load_user_chat_blacklist_Parameter& proc_load_user_chat_blacklist::param() const {
  const ::db::proc_load_user_chat_blacklist_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_load_user_chat_blacklist.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_load_user_chat_blacklist_Parameter*>(
      &::db::_proc_load_user_chat_blacklist_Parameter_default_instance_);
}
inline ::db::proc_load_user_chat_blacklist_Parameter* proc_load_user_chat_blacklist::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_load_user_chat_blacklist.param)
  clear_has_param();
  ::db::proc_load_user_chat_blacklist_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_load_user_chat_blacklist_Parameter* proc_load_user_chat_blacklist::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_load_user_chat_blacklist.param)
  clear_has_param();
  ::db::proc_load_user_chat_blacklist_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_load_user_chat_blacklist_Parameter* proc_load_user_chat_blacklist::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_load_user_chat_blacklist_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_load_user_chat_blacklist.param)
  return param_;
}
inline void proc_load_user_chat_blacklist::set_allocated_param(::db::proc_load_user_chat_blacklist_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_load_user_chat_blacklist.param)
}

// repeated .db.proc_load_user_chat_blacklist.ReturnRecord return_record_list = 2;
inline int proc_load_user_chat_blacklist::return_record_list_size() const {
  return return_record_list_.size();
}
inline void proc_load_user_chat_blacklist::clear_return_record_list() {
  return_record_list_.Clear();
}
inline ::db::proc_load_user_chat_blacklist_ReturnRecord* proc_load_user_chat_blacklist::mutable_return_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.proc_load_user_chat_blacklist.return_record_list)
  return return_record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::proc_load_user_chat_blacklist_ReturnRecord >*
proc_load_user_chat_blacklist::mutable_return_record_list() {
  // @@protoc_insertion_point(field_mutable_list:db.proc_load_user_chat_blacklist.return_record_list)
  return &return_record_list_;
}
inline const ::db::proc_load_user_chat_blacklist_ReturnRecord& proc_load_user_chat_blacklist::return_record_list(int index) const {
  // @@protoc_insertion_point(field_get:db.proc_load_user_chat_blacklist.return_record_list)
  return return_record_list_.Get(index);
}
inline ::db::proc_load_user_chat_blacklist_ReturnRecord* proc_load_user_chat_blacklist::add_return_record_list() {
  // @@protoc_insertion_point(field_add:db.proc_load_user_chat_blacklist.return_record_list)
  return return_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::proc_load_user_chat_blacklist_ReturnRecord >&
proc_load_user_chat_blacklist::return_record_list() const {
  // @@protoc_insertion_point(field_list:db.proc_load_user_chat_blacklist.return_record_list)
  return return_record_list_;
}

// -------------------------------------------------------------------

// proc_save_user_chat_blacklist_Parameter

// required .db.UserChatBlacklist p_user = 1;
inline bool proc_save_user_chat_blacklist_Parameter::has_p_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_save_user_chat_blacklist_Parameter::set_has_p_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_save_user_chat_blacklist_Parameter::clear_has_p_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_save_user_chat_blacklist_Parameter::clear_p_user() {
  if (p_user_ != NULL) p_user_->Clear();
  clear_has_p_user();
}
inline const ::db::UserChatBlacklist& proc_save_user_chat_blacklist_Parameter::_internal_p_user() const {
  return *p_user_;
}
inline const ::db::UserChatBlacklist& proc_save_user_chat_blacklist_Parameter::p_user() const {
  const ::db::UserChatBlacklist* p = p_user_;
  // @@protoc_insertion_point(field_get:db.proc_save_user_chat_blacklist.Parameter.p_user)
  return p != NULL ? *p : *reinterpret_cast<const ::db::UserChatBlacklist*>(
      &::db::_UserChatBlacklist_default_instance_);
}
inline ::db::UserChatBlacklist* proc_save_user_chat_blacklist_Parameter::release_p_user() {
  // @@protoc_insertion_point(field_release:db.proc_save_user_chat_blacklist.Parameter.p_user)
  clear_has_p_user();
  ::db::UserChatBlacklist* temp = p_user_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  p_user_ = NULL;
  return temp;
}
inline ::db::UserChatBlacklist* proc_save_user_chat_blacklist_Parameter::unsafe_arena_release_p_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_save_user_chat_blacklist.Parameter.p_user)
  clear_has_p_user();
  ::db::UserChatBlacklist* temp = p_user_;
  p_user_ = NULL;
  return temp;
}
inline ::db::UserChatBlacklist* proc_save_user_chat_blacklist_Parameter::mutable_p_user() {
  set_has_p_user();
  if (p_user_ == NULL) {
    auto* p = CreateMaybeMessage<::db::UserChatBlacklist>(GetArenaNoVirtual());
    p_user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_save_user_chat_blacklist.Parameter.p_user)
  return p_user_;
}
inline void proc_save_user_chat_blacklist_Parameter::set_allocated_p_user(::db::UserChatBlacklist* p_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_user_;
  }
  if (p_user) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(p_user);
    if (message_arena != submessage_arena) {
      p_user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_user, submessage_arena);
    }
    set_has_p_user();
  } else {
    clear_has_p_user();
  }
  p_user_ = p_user;
  // @@protoc_insertion_point(field_set_allocated:db.proc_save_user_chat_blacklist.Parameter.p_user)
}

// -------------------------------------------------------------------

// proc_save_user_chat_blacklist

// optional .db.proc_save_user_chat_blacklist.Parameter param = 2;
inline bool proc_save_user_chat_blacklist::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_save_user_chat_blacklist::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_save_user_chat_blacklist::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_save_user_chat_blacklist::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_save_user_chat_blacklist_Parameter& proc_save_user_chat_blacklist::_internal_param() const {
  return *param_;
}
inline const ::db::proc_save_user_chat_blacklist_Parameter& proc_save_user_chat_blacklist::param() const {
  const ::db::proc_save_user_chat_blacklist_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_save_user_chat_blacklist.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_save_user_chat_blacklist_Parameter*>(
      &::db::_proc_save_user_chat_blacklist_Parameter_default_instance_);
}
inline ::db::proc_save_user_chat_blacklist_Parameter* proc_save_user_chat_blacklist::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_save_user_chat_blacklist.param)
  clear_has_param();
  ::db::proc_save_user_chat_blacklist_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_save_user_chat_blacklist_Parameter* proc_save_user_chat_blacklist::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_save_user_chat_blacklist.param)
  clear_has_param();
  ::db::proc_save_user_chat_blacklist_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_save_user_chat_blacklist_Parameter* proc_save_user_chat_blacklist::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_save_user_chat_blacklist_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_save_user_chat_blacklist.param)
  return param_;
}
inline void proc_save_user_chat_blacklist::set_allocated_param(::db::proc_save_user_chat_blacklist_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_save_user_chat_blacklist.param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_StoredProcChat_2eproto
