// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#include "Chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Chat_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChatChannel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChatChannelService_ChatChannelRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChatMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientChatService_ClientChatRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientChatService_ClientChatResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserBaseData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chat_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ChatChannelService_ChatChannelResponse;
}  // namespace protobuf_Chat_2eproto
namespace chat {
class UserBaseDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserBaseData>
      _instance;
} _UserBaseData_default_instance_;
class ChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatMessage>
      _instance;
} _ChatMessage_default_instance_;
class ChatMessageNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatMessageNotify>
      _instance;
} _ChatMessageNotify_default_instance_;
class ClientChatService_ClientChatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientChatService_ClientChatRequest>
      _instance;
} _ClientChatService_ClientChatRequest_default_instance_;
class ClientChatService_ClientChatResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientChatService_ClientChatResponse>
      _instance;
} _ClientChatService_ClientChatResponse_default_instance_;
class ClientChatServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientChatService>
      _instance;
} _ClientChatService_default_instance_;
class ChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatChannel>
      _instance;
} _ChatChannel_default_instance_;
class ChatChannelService_ChatChannelRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatChannelService_ChatChannelRequest>
      _instance;
} _ChatChannelService_ChatChannelRequest_default_instance_;
class ChatChannelService_ChatChannelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatChannelService_ChatChannelResponse>
      _instance;
} _ChatChannelService_ChatChannelResponse_default_instance_;
class ChatChannelServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatChannelService>
      _instance;
} _ChatChannelService_default_instance_;
}  // namespace chat
namespace protobuf_Chat_2eproto {
static void InitDefaultsUserBaseData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_UserBaseData_default_instance_;
    new (ptr) ::chat::UserBaseData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::UserBaseData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserBaseData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserBaseData}, {}};

static void InitDefaultsChatMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ChatMessage_default_instance_;
    new (ptr) ::chat::ChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ChatMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChatMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatMessage}, {}};

static void InitDefaultsChatMessageNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ChatMessageNotify_default_instance_;
    new (ptr) ::chat::ChatMessageNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ChatMessageNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChatMessageNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChatMessageNotify}, {
      &protobuf_Chat_2eproto::scc_info_ChatMessage.base,}};

static void InitDefaultsClientChatService_ClientChatRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ClientChatService_ClientChatRequest_default_instance_;
    new (ptr) ::chat::ClientChatService_ClientChatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ClientChatService_ClientChatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientChatService_ClientChatRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientChatService_ClientChatRequest}, {}};

static void InitDefaultsClientChatService_ClientChatResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ClientChatService_ClientChatResponse_default_instance_;
    new (ptr) ::chat::ClientChatService_ClientChatResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ClientChatService_ClientChatResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientChatService_ClientChatResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientChatService_ClientChatResponse}, {}};

static void InitDefaultsClientChatService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ClientChatService_default_instance_;
    new (ptr) ::chat::ClientChatService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ClientChatService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ClientChatService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsClientChatService}, {
      &protobuf_Chat_2eproto::scc_info_ClientChatService_ClientChatRequest.base,
      &protobuf_Chat_2eproto::scc_info_ClientChatService_ClientChatResponse.base,}};

static void InitDefaultsChatChannel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ChatChannel_default_instance_;
    new (ptr) ::chat::ChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ChatChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChatChannel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatChannel}, {}};

static void InitDefaultsChatChannelService_ChatChannelRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ChatChannelService_ChatChannelRequest_default_instance_;
    new (ptr) ::chat::ChatChannelService_ChatChannelRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ChatChannelService_ChatChannelRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChatChannelService_ChatChannelRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatChannelService_ChatChannelRequest}, {}};

static void InitDefaultsChatChannelService_ChatChannelResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ChatChannelService_ChatChannelResponse_default_instance_;
    new (ptr) ::chat::ChatChannelService_ChatChannelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ChatChannelService_ChatChannelResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ChatChannelService_ChatChannelResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsChatChannelService_ChatChannelResponse}, {
      &protobuf_Chat_2eproto::scc_info_ChatChannel.base,
      &protobuf_Chat_2eproto::scc_info_UserBaseData.base,}};

static void InitDefaultsChatChannelService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ChatChannelService_default_instance_;
    new (ptr) ::chat::ChatChannelService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ChatChannelService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ChatChannelService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsChatChannelService}, {
      &protobuf_Chat_2eproto::scc_info_ChatChannelService_ChatChannelRequest.base,
      &protobuf_Chat_2eproto::scc_info_ChatChannelService_ChatChannelResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserBaseData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatMessageNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientChatService_ClientChatRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientChatService_ClientChatResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientChatService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatChannel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatChannelService_ChatChannelRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatChannelService_ChatChannelResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatChannelService.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserBaseData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserBaseData, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserBaseData, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserBaseData, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserBaseData, portrait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserBaseData, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserBaseData, state_),
  2,
  3,
  0,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, portrait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessage, error_code_),
  0,
  3,
  1,
  4,
  5,
  8,
  2,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessageNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessageNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatMessageNotify, chats_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService_ClientChatRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService_ClientChatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService_ClientChatRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService_ClientChatRequest, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService_ClientChatRequest, target_uuid_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService_ClientChatResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService_ClientChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService_ClientChatResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientChatService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannel, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannel, state_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelRequest, choice_channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelRequest, query_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelRequest, choice_uuid_),
  2,
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelResponse, channel_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelResponse, user_channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelResponse, query_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService_ChatChannelResponse, blacklist_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChatChannelService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::chat::UserBaseData)},
  { 17, 31, sizeof(::chat::ChatMessage)},
  { 40, 46, sizeof(::chat::ChatMessageNotify)},
  { 47, 55, sizeof(::chat::ClientChatService_ClientChatRequest)},
  { 58, 64, sizeof(::chat::ClientChatService_ClientChatResponse)},
  { 65, 72, sizeof(::chat::ClientChatService)},
  { 74, 82, sizeof(::chat::ChatChannel)},
  { 85, 94, sizeof(::chat::ChatChannelService_ChatChannelRequest)},
  { 98, 108, sizeof(::chat::ChatChannelService_ChatChannelResponse)},
  { 113, 120, sizeof(::chat::ChatChannelService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_UserBaseData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ChatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ChatMessageNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ClientChatService_ClientChatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ClientChatService_ClientChatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ClientChatService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ChatChannelService_ChatChannelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ChatChannelService_ChatChannelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ChatChannelService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Chat.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nChat.proto\022\004chat\"m\n\014UserBaseData\022\014\n\004uu"
      "id\030\001 \002(\004\022\r\n\005level\030\002 \002(\005\022\014\n\004nick\030\003 \002(\014\022\020\n"
      "\010portrait\030\004 \002(\005\022\021\n\tsignature\030\005 \002(\014\022\r\n\005st"
      "ate\030\006 \002(\005\"\271\001\n\013ChatMessage\022\016\n\006userid\030\001 \002("
      "\014\022\014\n\004uuid\030\002 \002(\004\022\014\n\004nick\030\003 \002(\014\022\r\n\005level\030\004"
      " \002(\005\022\020\n\010portrait\030\005 \002(\005\022%\n\004type\030\006 \002(\0162\027.c"
      "hat.CHAT_MESSAGE_TYPE\022\017\n\007content\030\007 \002(\014\022\021"
      "\n\ttimestamp\030\010 \002(\020\022\022\n\nerror_code\030\t \002(\005\"5\n"
      "\021ChatMessageNotify\022 \n\005chats\030\001 \003(\0132\021.chat"
      ".ChatMessage\"\215\002\n\021ClientChatService\0226\n\003re"
      "q\030\001 \001(\0132).chat.ClientChatService.ClientC"
      "hatRequest\0228\n\004resp\030\002 \001(\0132*.chat.ClientCh"
      "atService.ClientChatResponse\032`\n\021ClientCh"
      "atRequest\022%\n\004type\030\001 \001(\0162\027.chat.CHAT_MESS"
      "AGE_TYPE\022\017\n\007content\030\002 \001(\014\022\023\n\013target_uuid"
      "\030\003 \001(\004\032$\n\022ClientChatResponse\022\016\n\006result\030\001"
      " \002(\005\"6\n\013ChatChannel\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030"
      "\002 \002(\005\022\r\n\005state\030\003 \001(\005\"\372\004\n\022ChatChannelServ"
      "ice\0228\n\003req\030\001 \001(\0132+.chat.ChatChannelServi"
      "ce.ChatChannelRequest\022:\n\004resp\030\002 \001(\0132,.ch"
      "at.ChatChannelService.ChatChannelRespons"
      "e\032\203\001\n\022ChatChannelRequest\022)\n\003cmd\030\001 \002(\0162\034."
      "chat.ChatChannelService.CMD\022\031\n\021choice_ch"
      "annel_id\030\002 \001(\005\022\022\n\nquery_uuid\030\003 \003(\004\022\023\n\013ch"
      "oice_uuid\030\004 \001(\004\032\270\001\n\023ChatChannelResponse\022"
      "\016\n\006result\030\001 \002(\005\022\'\n\014channel_list\030\002 \003(\0132\021."
      "chat.ChatChannel\022\027\n\017user_channel_id\030\003 \001("
      "\005\022(\n\014query_result\030\004 \003(\0132\022.chat.UserBaseD"
      "ata\022%\n\tblacklist\030\005 \003(\0132\022.chat.UserBaseDa"
      "ta\"\254\001\n\003CMD\022\t\n\005QUERY\020\001\022\020\n\014QUERY_PERSON\020\002\022"
      "\023\n\017QUERY_BLACKLIST\020\003\022\022\n\016CHANGE_CHANNEL\020\004"
      "\022\024\n\020ADD_TO_BLACKLIST\020\005\022\031\n\025REMOVE_FROM_BL"
      "ACKLIST\020\006\022\025\n\021ADD_GUILD_CHANNEL\020\007\022\027\n\023LEAV"
      "E_GUILD_CHANNEL\020\010*o\n\021CHAT_MESSAGE_TYPE\022\033"
      "\n\027CHAT_MESSAGE_TYPE_WORLD\020\001\022\036\n\032CHAT_MESS"
      "AGE_TYPE_PERSONAL\020\002\022\035\n\031CHAT_MESSAGE_TYPE"
      "_SOCIATY\020\003B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Chat.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Chat_2eproto
namespace chat {
const ::google::protobuf::EnumDescriptor* ChatChannelService_CMD_descriptor() {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Chat_2eproto::file_level_enum_descriptors[0];
}
bool ChatChannelService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatChannelService_CMD ChatChannelService::QUERY;
const ChatChannelService_CMD ChatChannelService::QUERY_PERSON;
const ChatChannelService_CMD ChatChannelService::QUERY_BLACKLIST;
const ChatChannelService_CMD ChatChannelService::CHANGE_CHANNEL;
const ChatChannelService_CMD ChatChannelService::ADD_TO_BLACKLIST;
const ChatChannelService_CMD ChatChannelService::REMOVE_FROM_BLACKLIST;
const ChatChannelService_CMD ChatChannelService::ADD_GUILD_CHANNEL;
const ChatChannelService_CMD ChatChannelService::LEAVE_GUILD_CHANNEL;
const ChatChannelService_CMD ChatChannelService::CMD_MIN;
const ChatChannelService_CMD ChatChannelService::CMD_MAX;
const int ChatChannelService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CHAT_MESSAGE_TYPE_descriptor() {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Chat_2eproto::file_level_enum_descriptors[1];
}
bool CHAT_MESSAGE_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void UserBaseData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBaseData::kUuidFieldNumber;
const int UserBaseData::kLevelFieldNumber;
const int UserBaseData::kNickFieldNumber;
const int UserBaseData::kPortraitFieldNumber;
const int UserBaseData::kSignatureFieldNumber;
const int UserBaseData::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBaseData::UserBaseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_UserBaseData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.UserBaseData)
}
UserBaseData::UserBaseData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_UserBaseData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.UserBaseData)
}
UserBaseData::UserBaseData(const UserBaseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature(),
      GetArenaNoVirtual());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:chat.UserBaseData)
}

void UserBaseData::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(state_));
}

UserBaseData::~UserBaseData() {
  // @@protoc_insertion_point(destructor:chat.UserBaseData)
  SharedDtor();
}

void UserBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserBaseData::ArenaDtor(void* object) {
  UserBaseData* _this = reinterpret_cast< UserBaseData* >(object);
  (void)_this;
}
void UserBaseData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserBaseData::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserBaseData& UserBaseData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_UserBaseData.base);
  return *internal_default_instance();
}


void UserBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.UserBaseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.UserBaseData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 portrait = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_portrait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portrait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.UserBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.UserBaseData)
  return false;
#undef DO_
}

void UserBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.UserBaseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nick(), output);
  }

  // required int32 portrait = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->portrait(), output);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->signature(), output);
  }

  // required int32 state = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.UserBaseData)
}

::google::protobuf::uint8* UserBaseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.UserBaseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick(), target);
  }

  // required int32 portrait = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->portrait(), target);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->signature(), target);
  }

  // required int32 state = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.UserBaseData)
  return target;
}

size_t UserBaseData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.UserBaseData)
  size_t total_size = 0;

  if (has_nick()) {
    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (has_signature()) {
    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  if (has_uuid()) {
    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_portrait()) {
    // required int32 portrait = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrait());
  }

  if (has_state()) {
    // required int32 state = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t UserBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.UserBaseData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());

    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());

    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 portrait = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrait());

    // required int32 state = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBaseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.UserBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBaseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserBaseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.UserBaseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.UserBaseData)
    MergeFrom(*source);
  }
}

void UserBaseData::MergeFrom(const UserBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.UserBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000002u) {
      set_signature(from.signature());
    }
    if (cached_has_bits & 0x00000004u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      portrait_ = from.portrait_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserBaseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.UserBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseData::CopyFrom(const UserBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.UserBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void UserBaseData::Swap(UserBaseData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserBaseData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserBaseData::UnsafeArenaSwap(UserBaseData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserBaseData::InternalSwap(UserBaseData* other) {
  using std::swap;
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uuid_, other->uuid_);
  swap(level_, other->level_);
  swap(portrait_, other->portrait_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserBaseData::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kUseridFieldNumber;
const int ChatMessage::kUuidFieldNumber;
const int ChatMessage::kNickFieldNumber;
const int ChatMessage::kLevelFieldNumber;
const int ChatMessage::kPortraitFieldNumber;
const int ChatMessage::kTypeFieldNumber;
const int ChatMessage::kContentFieldNumber;
const int ChatMessage::kTimestampFieldNumber;
const int ChatMessage::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_ChatMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatMessage)
}
ChatMessage::ChatMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatMessage.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:chat.ChatMessage)
}

void ChatMessage::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(error_code_));
  type_ = 1;
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:chat.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatMessage::ArenaDtor(void* object) {
  ChatMessage* _this = reinterpret_cast< ChatMessage* >(object);
  (void)_this;
}
void ChatMessage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatMessage& ChatMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatMessage.base);
  return *internal_default_instance();
}


void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      userid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      content_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(error_code_));
  }
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 portrait = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_portrait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portrait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .chat.CHAT_MESSAGE_TYPE type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chat::CHAT_MESSAGE_TYPE_IsValid(value)) {
            set_type(static_cast< ::chat::CHAT_MESSAGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 error_code = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required uint64 uuid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nick(), output);
  }

  // required int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 portrait = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->portrait(), output);
  }

  // required .chat.CHAT_MESSAGE_TYPE type = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // required bytes content = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->content(), output);
  }

  // required sfixed64 timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->timestamp(), output);
  }

  // required int32 error_code = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->error_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ChatMessage)
}

::google::protobuf::uint8* ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required uint64 uuid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick(), target);
  }

  // required int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 portrait = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->portrait(), target);
  }

  // required .chat.CHAT_MESSAGE_TYPE type = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // required bytes content = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->content(), target);
  }

  // required sfixed64 timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(8, this->timestamp(), target);
  }

  // required int32 error_code = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->error_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatMessage)
  return target;
}

size_t ChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.ChatMessage)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_nick()) {
    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (has_content()) {
    // required bytes content = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_uuid()) {
    // required uint64 uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  if (has_level()) {
    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_portrait()) {
    // required int32 portrait = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrait());
  }

  if (has_timestamp()) {
    // required sfixed64 timestamp = 8;
    total_size += 1 + 8;
  }

  if (has_error_code()) {
    // required int32 error_code = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  if (has_type()) {
    // required .chat.CHAT_MESSAGE_TYPE type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());

    // required bytes content = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required uint64 uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());

    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 portrait = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrait());

    // required sfixed64 timestamp = 8;
    total_size += 1 + 8;

    // required int32 error_code = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());

    // required .chat.CHAT_MESSAGE_TYPE type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000004u) {
      set_content(from.content());
    }
    if (cached_has_bits & 0x00000008u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      portrait_ = from.portrait_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_type(from.type());
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChatMessage* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChatMessage::UnsafeArenaSwap(ChatMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uuid_, other->uuid_);
  swap(level_, other->level_);
  swap(portrait_, other->portrait_);
  swap(timestamp_, other->timestamp_);
  swap(error_code_, other->error_code_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatMessageNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessageNotify::kChatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessageNotify::ChatMessageNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_ChatMessageNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatMessageNotify)
}
ChatMessageNotify::ChatMessageNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  chats_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatMessageNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatMessageNotify)
}
ChatMessageNotify::ChatMessageNotify(const ChatMessageNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chats_(from.chats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chat.ChatMessageNotify)
}

void ChatMessageNotify::SharedCtor() {
}

ChatMessageNotify::~ChatMessageNotify() {
  // @@protoc_insertion_point(destructor:chat.ChatMessageNotify)
  SharedDtor();
}

void ChatMessageNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ChatMessageNotify::ArenaDtor(void* object) {
  ChatMessageNotify* _this = reinterpret_cast< ChatMessageNotify* >(object);
  (void)_this;
}
void ChatMessageNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChatMessageNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatMessageNotify::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatMessageNotify& ChatMessageNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatMessageNotify.base);
  return *internal_default_instance();
}


void ChatMessageNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatMessageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatMessageNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chat.ChatMessage chats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatMessageNotify)
  return false;
#undef DO_
}

void ChatMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatMessageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat.ChatMessage chats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ChatMessageNotify)
}

::google::protobuf::uint8* ChatMessageNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatMessageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat.ChatMessage chats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatMessageNotify)
  return target;
}

size_t ChatMessageNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatMessageNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .chat.ChatMessage chats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatMessageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessageNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessageNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatMessageNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatMessageNotify)
    MergeFrom(*source);
  }
}

void ChatMessageNotify::MergeFrom(const ChatMessageNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatMessageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chats_.MergeFrom(from.chats_);
}

void ChatMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatMessageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageNotify::CopyFrom(const ChatMessageNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatMessageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageNotify::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->chats())) return false;
  return true;
}

void ChatMessageNotify::Swap(ChatMessageNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChatMessageNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChatMessageNotify::UnsafeArenaSwap(ChatMessageNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChatMessageNotify::InternalSwap(ChatMessageNotify* other) {
  using std::swap;
  CastToBase(&chats_)->InternalSwap(CastToBase(&other->chats_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatMessageNotify::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientChatService_ClientChatRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientChatService_ClientChatRequest::kTypeFieldNumber;
const int ClientChatService_ClientChatRequest::kContentFieldNumber;
const int ClientChatService_ClientChatRequest::kTargetUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientChatService_ClientChatRequest::ClientChatService_ClientChatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_ClientChatService_ClientChatRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientChatService.ClientChatRequest)
}
ClientChatService_ClientChatRequest::ClientChatService_ClientChatRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ClientChatService_ClientChatRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ClientChatService.ClientChatRequest)
}
ClientChatService_ClientChatRequest::ClientChatService_ClientChatRequest(const ClientChatService_ClientChatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  ::memcpy(&target_uuid_, &from.target_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&target_uuid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:chat.ClientChatService.ClientChatRequest)
}

void ClientChatService_ClientChatRequest::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_uuid_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
}

ClientChatService_ClientChatRequest::~ClientChatService_ClientChatRequest() {
  // @@protoc_insertion_point(destructor:chat.ClientChatService.ClientChatRequest)
  SharedDtor();
}

void ClientChatService_ClientChatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientChatService_ClientChatRequest::ArenaDtor(void* object) {
  ClientChatService_ClientChatRequest* _this = reinterpret_cast< ClientChatService_ClientChatRequest* >(object);
  (void)_this;
}
void ClientChatService_ClientChatRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClientChatService_ClientChatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientChatService_ClientChatRequest::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientChatService_ClientChatRequest& ClientChatService_ClientChatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ClientChatService_ClientChatRequest.base);
  return *internal_default_instance();
}


void ClientChatService_ClientChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientChatService.ClientChatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    target_uuid_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientChatService_ClientChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ClientChatService.ClientChatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chat.CHAT_MESSAGE_TYPE type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chat::CHAT_MESSAGE_TYPE_IsValid(value)) {
            set_type(static_cast< ::chat::CHAT_MESSAGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 target_uuid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ClientChatService.ClientChatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ClientChatService.ClientChatRequest)
  return false;
#undef DO_
}

void ClientChatService_ClientChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ClientChatService.ClientChatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chat.CHAT_MESSAGE_TYPE type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // optional uint64 target_uuid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ClientChatService.ClientChatRequest)
}

::google::protobuf::uint8* ClientChatService_ClientChatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientChatService.ClientChatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chat.CHAT_MESSAGE_TYPE type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes content = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // optional uint64 target_uuid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientChatService.ClientChatRequest)
  return target;
}

size_t ClientChatService_ClientChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientChatService.ClientChatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint64 target_uuid = 3;
    if (has_target_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_uuid());
    }

    // optional .chat.CHAT_MESSAGE_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientChatService_ClientChatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientChatService.ClientChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientChatService_ClientChatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientChatService_ClientChatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientChatService.ClientChatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientChatService.ClientChatRequest)
    MergeFrom(*source);
  }
}

void ClientChatService_ClientChatRequest::MergeFrom(const ClientChatService_ClientChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientChatService.ClientChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_content(from.content());
    }
    if (cached_has_bits & 0x00000002u) {
      target_uuid_ = from.target_uuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientChatService_ClientChatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientChatService.ClientChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientChatService_ClientChatRequest::CopyFrom(const ClientChatService_ClientChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientChatService.ClientChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientChatService_ClientChatRequest::IsInitialized() const {
  return true;
}

void ClientChatService_ClientChatRequest::Swap(ClientChatService_ClientChatRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClientChatService_ClientChatRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ClientChatService_ClientChatRequest::UnsafeArenaSwap(ClientChatService_ClientChatRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClientChatService_ClientChatRequest::InternalSwap(ClientChatService_ClientChatRequest* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_uuid_, other->target_uuid_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientChatService_ClientChatRequest::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientChatService_ClientChatResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientChatService_ClientChatResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientChatService_ClientChatResponse::ClientChatService_ClientChatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_ClientChatService_ClientChatResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientChatService.ClientChatResponse)
}
ClientChatService_ClientChatResponse::ClientChatService_ClientChatResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ClientChatService_ClientChatResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ClientChatService.ClientChatResponse)
}
ClientChatService_ClientChatResponse::ClientChatService_ClientChatResponse(const ClientChatService_ClientChatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:chat.ClientChatService.ClientChatResponse)
}

void ClientChatService_ClientChatResponse::SharedCtor() {
  result_ = 0;
}

ClientChatService_ClientChatResponse::~ClientChatService_ClientChatResponse() {
  // @@protoc_insertion_point(destructor:chat.ClientChatService.ClientChatResponse)
  SharedDtor();
}

void ClientChatService_ClientChatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ClientChatService_ClientChatResponse::ArenaDtor(void* object) {
  ClientChatService_ClientChatResponse* _this = reinterpret_cast< ClientChatService_ClientChatResponse* >(object);
  (void)_this;
}
void ClientChatService_ClientChatResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClientChatService_ClientChatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientChatService_ClientChatResponse::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientChatService_ClientChatResponse& ClientChatService_ClientChatResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ClientChatService_ClientChatResponse.base);
  return *internal_default_instance();
}


void ClientChatService_ClientChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientChatService.ClientChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientChatService_ClientChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ClientChatService.ClientChatResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ClientChatService.ClientChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ClientChatService.ClientChatResponse)
  return false;
#undef DO_
}

void ClientChatService_ClientChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ClientChatService.ClientChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ClientChatService.ClientChatResponse)
}

::google::protobuf::uint8* ClientChatService_ClientChatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientChatService.ClientChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientChatService.ClientChatResponse)
  return target;
}

size_t ClientChatService_ClientChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientChatService.ClientChatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientChatService_ClientChatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientChatService.ClientChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientChatService_ClientChatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientChatService_ClientChatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientChatService.ClientChatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientChatService.ClientChatResponse)
    MergeFrom(*source);
  }
}

void ClientChatService_ClientChatResponse::MergeFrom(const ClientChatService_ClientChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientChatService.ClientChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void ClientChatService_ClientChatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientChatService.ClientChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientChatService_ClientChatResponse::CopyFrom(const ClientChatService_ClientChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientChatService.ClientChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientChatService_ClientChatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ClientChatService_ClientChatResponse::Swap(ClientChatService_ClientChatResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClientChatService_ClientChatResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ClientChatService_ClientChatResponse::UnsafeArenaSwap(ClientChatService_ClientChatResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClientChatService_ClientChatResponse::InternalSwap(ClientChatService_ClientChatResponse* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientChatService_ClientChatResponse::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientChatService::InitAsDefaultInstance() {
  ::chat::_ClientChatService_default_instance_._instance.get_mutable()->req_ = const_cast< ::chat::ClientChatService_ClientChatRequest*>(
      ::chat::ClientChatService_ClientChatRequest::internal_default_instance());
  ::chat::_ClientChatService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::chat::ClientChatService_ClientChatResponse*>(
      ::chat::ClientChatService_ClientChatResponse::internal_default_instance());
}
void ClientChatService::unsafe_arena_set_allocated_req(
    ::chat::ClientChatService_ClientChatRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientChatService.req)
}
void ClientChatService::unsafe_arena_set_allocated_resp(
    ::chat::ClientChatService_ClientChatResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientChatService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientChatService::kReqFieldNumber;
const int ClientChatService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientChatService::ClientChatService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_ClientChatService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientChatService)
}
ClientChatService::ClientChatService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ClientChatService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ClientChatService)
}
ClientChatService::ClientChatService(const ClientChatService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::chat::ClientChatService_ClientChatRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::chat::ClientChatService_ClientChatResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chat.ClientChatService)
}

void ClientChatService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

ClientChatService::~ClientChatService() {
  // @@protoc_insertion_point(destructor:chat.ClientChatService)
  SharedDtor();
}

void ClientChatService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void ClientChatService::ArenaDtor(void* object) {
  ClientChatService* _this = reinterpret_cast< ClientChatService* >(object);
  (void)_this;
}
void ClientChatService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClientChatService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientChatService::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientChatService& ClientChatService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ClientChatService.base);
  return *internal_default_instance();
}


void ClientChatService::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientChatService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientChatService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ClientChatService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chat.ClientChatService.ClientChatRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chat.ClientChatService.ClientChatResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ClientChatService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ClientChatService)
  return false;
#undef DO_
}

void ClientChatService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ClientChatService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chat.ClientChatService.ClientChatRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .chat.ClientChatService.ClientChatResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ClientChatService)
}

::google::protobuf::uint8* ClientChatService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientChatService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chat.ClientChatService.ClientChatRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .chat.ClientChatService.ClientChatResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientChatService)
  return target;
}

size_t ClientChatService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientChatService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .chat.ClientChatService.ClientChatRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .chat.ClientChatService.ClientChatResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientChatService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientChatService)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientChatService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientChatService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientChatService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientChatService)
    MergeFrom(*source);
  }
}

void ClientChatService::MergeFrom(const ClientChatService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientChatService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::chat::ClientChatService_ClientChatRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::chat::ClientChatService_ClientChatResponse::MergeFrom(from.resp());
    }
  }
}

void ClientChatService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientChatService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientChatService::CopyFrom(const ClientChatService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientChatService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientChatService::IsInitialized() const {
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void ClientChatService::Swap(ClientChatService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClientChatService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ClientChatService::UnsafeArenaSwap(ClientChatService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClientChatService::InternalSwap(ClientChatService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientChatService::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatChannel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatChannel::kIdFieldNumber;
const int ChatChannel::kTypeFieldNumber;
const int ChatChannel::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatChannel::ChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_ChatChannel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatChannel)
}
ChatChannel::ChatChannel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatChannel.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatChannel)
}
ChatChannel::ChatChannel(const ChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:chat.ChatChannel)
}

void ChatChannel::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

ChatChannel::~ChatChannel() {
  // @@protoc_insertion_point(destructor:chat.ChatChannel)
  SharedDtor();
}

void ChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ChatChannel::ArenaDtor(void* object) {
  ChatChannel* _this = reinterpret_cast< ChatChannel* >(object);
  (void)_this;
}
void ChatChannel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatChannel::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatChannel& ChatChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatChannel.base);
  return *internal_default_instance();
}


void ChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatChannel)
  return false;
#undef DO_
}

void ChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ChatChannel)
}

::google::protobuf::uint8* ChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatChannel)
  return target;
}

size_t ChatChannel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.ChatChannel)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 state = 3;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatChannel)
    MergeFrom(*source);
  }
}

void ChatChannel::MergeFrom(const ChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatChannel::CopyFrom(const ChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ChatChannel::Swap(ChatChannel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChatChannel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChatChannel::UnsafeArenaSwap(ChatChannel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChatChannel::InternalSwap(ChatChannel* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatChannel::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatChannelService_ChatChannelRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatChannelService_ChatChannelRequest::kCmdFieldNumber;
const int ChatChannelService_ChatChannelRequest::kChoiceChannelIdFieldNumber;
const int ChatChannelService_ChatChannelRequest::kQueryUuidFieldNumber;
const int ChatChannelService_ChatChannelRequest::kChoiceUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatChannelService_ChatChannelRequest::ChatChannelService_ChatChannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_ChatChannelService_ChatChannelRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatChannelService.ChatChannelRequest)
}
ChatChannelService_ChatChannelRequest::ChatChannelService_ChatChannelRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  query_uuid_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatChannelService_ChatChannelRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatChannelService.ChatChannelRequest)
}
ChatChannelService_ChatChannelRequest::ChatChannelService_ChatChannelRequest(const ChatChannelService_ChatChannelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      query_uuid_(from.query_uuid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&choice_uuid_, &from.choice_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&choice_uuid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:chat.ChatChannelService.ChatChannelRequest)
}

void ChatChannelService_ChatChannelRequest::SharedCtor() {
  ::memset(&choice_uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&choice_channel_id_) -
      reinterpret_cast<char*>(&choice_uuid_)) + sizeof(choice_channel_id_));
  cmd_ = 1;
}

ChatChannelService_ChatChannelRequest::~ChatChannelService_ChatChannelRequest() {
  // @@protoc_insertion_point(destructor:chat.ChatChannelService.ChatChannelRequest)
  SharedDtor();
}

void ChatChannelService_ChatChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ChatChannelService_ChatChannelRequest::ArenaDtor(void* object) {
  ChatChannelService_ChatChannelRequest* _this = reinterpret_cast< ChatChannelService_ChatChannelRequest* >(object);
  (void)_this;
}
void ChatChannelService_ChatChannelRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChatChannelService_ChatChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatChannelService_ChatChannelRequest::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatChannelService_ChatChannelRequest& ChatChannelService_ChatChannelRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatChannelService_ChatChannelRequest.base);
  return *internal_default_instance();
}


void ChatChannelService_ChatChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatChannelService.ChatChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_uuid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&choice_uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&choice_channel_id_) -
        reinterpret_cast<char*>(&choice_uuid_)) + sizeof(choice_channel_id_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatChannelService_ChatChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatChannelService.ChatChannelRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .chat.ChatChannelService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chat::ChatChannelService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::chat::ChatChannelService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 choice_channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_choice_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 query_uuid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24u, input, this->mutable_query_uuid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_query_uuid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 choice_uuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_choice_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &choice_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatChannelService.ChatChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatChannelService.ChatChannelRequest)
  return false;
#undef DO_
}

void ChatChannelService_ChatChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatChannelService.ChatChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chat.ChatChannelService.CMD cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 choice_channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->choice_channel_id(), output);
  }

  // repeated uint64 query_uuid = 3;
  for (int i = 0, n = this->query_uuid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->query_uuid(i), output);
  }

  // optional uint64 choice_uuid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->choice_uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ChatChannelService.ChatChannelRequest)
}

::google::protobuf::uint8* ChatChannelService_ChatChannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatChannelService.ChatChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chat.ChatChannelService.CMD cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 choice_channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->choice_channel_id(), target);
  }

  // repeated uint64 query_uuid = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(3, this->query_uuid_, target);

  // optional uint64 choice_uuid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->choice_uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatChannelService.ChatChannelRequest)
  return target;
}

size_t ChatChannelService_ChatChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatChannelService.ChatChannelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .chat.ChatChannelService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated uint64 query_uuid = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->query_uuid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->query_uuid_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 choice_uuid = 4;
    if (has_choice_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->choice_uuid());
    }

    // optional int32 choice_channel_id = 2;
    if (has_choice_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choice_channel_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatChannelService_ChatChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatChannelService.ChatChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatChannelService_ChatChannelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatChannelService_ChatChannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatChannelService.ChatChannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatChannelService.ChatChannelRequest)
    MergeFrom(*source);
  }
}

void ChatChannelService_ChatChannelRequest::MergeFrom(const ChatChannelService_ChatChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatChannelService.ChatChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_uuid_.MergeFrom(from.query_uuid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      choice_uuid_ = from.choice_uuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      choice_channel_id_ = from.choice_channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatChannelService_ChatChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatChannelService.ChatChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatChannelService_ChatChannelRequest::CopyFrom(const ChatChannelService_ChatChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatChannelService.ChatChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannelService_ChatChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void ChatChannelService_ChatChannelRequest::Swap(ChatChannelService_ChatChannelRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChatChannelService_ChatChannelRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChatChannelService_ChatChannelRequest::UnsafeArenaSwap(ChatChannelService_ChatChannelRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChatChannelService_ChatChannelRequest::InternalSwap(ChatChannelService_ChatChannelRequest* other) {
  using std::swap;
  query_uuid_.InternalSwap(&other->query_uuid_);
  swap(choice_uuid_, other->choice_uuid_);
  swap(choice_channel_id_, other->choice_channel_id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatChannelService_ChatChannelRequest::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatChannelService_ChatChannelResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatChannelService_ChatChannelResponse::kResultFieldNumber;
const int ChatChannelService_ChatChannelResponse::kChannelListFieldNumber;
const int ChatChannelService_ChatChannelResponse::kUserChannelIdFieldNumber;
const int ChatChannelService_ChatChannelResponse::kQueryResultFieldNumber;
const int ChatChannelService_ChatChannelResponse::kBlacklistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatChannelService_ChatChannelResponse::ChatChannelService_ChatChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_ChatChannelService_ChatChannelResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatChannelService.ChatChannelResponse)
}
ChatChannelService_ChatChannelResponse::ChatChannelService_ChatChannelResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  channel_list_(arena),
  query_result_(arena),
  blacklist_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatChannelService_ChatChannelResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatChannelService.ChatChannelResponse)
}
ChatChannelService_ChatChannelResponse::ChatChannelService_ChatChannelResponse(const ChatChannelService_ChatChannelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      channel_list_(from.channel_list_),
      query_result_(from.query_result_),
      blacklist_(from.blacklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_channel_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(user_channel_id_));
  // @@protoc_insertion_point(copy_constructor:chat.ChatChannelService.ChatChannelResponse)
}

void ChatChannelService_ChatChannelResponse::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_channel_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(user_channel_id_));
}

ChatChannelService_ChatChannelResponse::~ChatChannelService_ChatChannelResponse() {
  // @@protoc_insertion_point(destructor:chat.ChatChannelService.ChatChannelResponse)
  SharedDtor();
}

void ChatChannelService_ChatChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ChatChannelService_ChatChannelResponse::ArenaDtor(void* object) {
  ChatChannelService_ChatChannelResponse* _this = reinterpret_cast< ChatChannelService_ChatChannelResponse* >(object);
  (void)_this;
}
void ChatChannelService_ChatChannelResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChatChannelService_ChatChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatChannelService_ChatChannelResponse::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatChannelService_ChatChannelResponse& ChatChannelService_ChatChannelResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatChannelService_ChatChannelResponse.base);
  return *internal_default_instance();
}


void ChatChannelService_ChatChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatChannelService.ChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_list_.Clear();
  query_result_.Clear();
  blacklist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_channel_id_) -
        reinterpret_cast<char*>(&result_)) + sizeof(user_channel_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatChannelService_ChatChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatChannelService.ChatChannelResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chat.ChatChannel channel_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_channel_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_channel_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chat.UserBaseData query_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_query_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chat.UserBaseData blacklist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_blacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatChannelService.ChatChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatChannelService.ChatChannelResponse)
  return false;
#undef DO_
}

void ChatChannelService_ChatChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatChannelService.ChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .chat.ChatChannel channel_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->channel_list(static_cast<int>(i)),
      output);
  }

  // optional int32 user_channel_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_channel_id(), output);
  }

  // repeated .chat.UserBaseData query_result = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->query_result(static_cast<int>(i)),
      output);
  }

  // repeated .chat.UserBaseData blacklist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blacklist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->blacklist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ChatChannelService.ChatChannelResponse)
}

::google::protobuf::uint8* ChatChannelService_ChatChannelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatChannelService.ChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .chat.ChatChannel channel_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->channel_list(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 user_channel_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_channel_id(), target);
  }

  // repeated .chat.UserBaseData query_result = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->query_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated .chat.UserBaseData blacklist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blacklist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->blacklist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatChannelService.ChatChannelResponse)
  return target;
}

size_t ChatChannelService_ChatChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatChannelService.ChatChannelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .chat.ChatChannel channel_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->channel_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channel_list(static_cast<int>(i)));
    }
  }

  // repeated .chat.UserBaseData query_result = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->query_result_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->query_result(static_cast<int>(i)));
    }
  }

  // repeated .chat.UserBaseData blacklist = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->blacklist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blacklist(static_cast<int>(i)));
    }
  }

  // optional int32 user_channel_id = 3;
  if (has_user_channel_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatChannelService_ChatChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatChannelService.ChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatChannelService_ChatChannelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatChannelService_ChatChannelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatChannelService.ChatChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatChannelService.ChatChannelResponse)
    MergeFrom(*source);
  }
}

void ChatChannelService_ChatChannelResponse::MergeFrom(const ChatChannelService_ChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatChannelService.ChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_list_.MergeFrom(from.channel_list_);
  query_result_.MergeFrom(from.query_result_);
  blacklist_.MergeFrom(from.blacklist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_channel_id_ = from.user_channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatChannelService_ChatChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatChannelService.ChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatChannelService_ChatChannelResponse::CopyFrom(const ChatChannelService_ChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatChannelService.ChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannelService_ChatChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->channel_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->query_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->blacklist())) return false;
  return true;
}

void ChatChannelService_ChatChannelResponse::Swap(ChatChannelService_ChatChannelResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChatChannelService_ChatChannelResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChatChannelService_ChatChannelResponse::UnsafeArenaSwap(ChatChannelService_ChatChannelResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChatChannelService_ChatChannelResponse::InternalSwap(ChatChannelService_ChatChannelResponse* other) {
  using std::swap;
  CastToBase(&channel_list_)->InternalSwap(CastToBase(&other->channel_list_));
  CastToBase(&query_result_)->InternalSwap(CastToBase(&other->query_result_));
  CastToBase(&blacklist_)->InternalSwap(CastToBase(&other->blacklist_));
  swap(result_, other->result_);
  swap(user_channel_id_, other->user_channel_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatChannelService_ChatChannelResponse::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatChannelService::InitAsDefaultInstance() {
  ::chat::_ChatChannelService_default_instance_._instance.get_mutable()->req_ = const_cast< ::chat::ChatChannelService_ChatChannelRequest*>(
      ::chat::ChatChannelService_ChatChannelRequest::internal_default_instance());
  ::chat::_ChatChannelService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::chat::ChatChannelService_ChatChannelResponse*>(
      ::chat::ChatChannelService_ChatChannelResponse::internal_default_instance());
}
void ChatChannelService::unsafe_arena_set_allocated_req(
    ::chat::ChatChannelService_ChatChannelRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ChatChannelService.req)
}
void ChatChannelService::unsafe_arena_set_allocated_resp(
    ::chat::ChatChannelService_ChatChannelResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ChatChannelService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatChannelService::kReqFieldNumber;
const int ChatChannelService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatChannelService::ChatChannelService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chat_2eproto::scc_info_ChatChannelService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatChannelService)
}
ChatChannelService::ChatChannelService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatChannelService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatChannelService)
}
ChatChannelService::ChatChannelService(const ChatChannelService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::chat::ChatChannelService_ChatChannelRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::chat::ChatChannelService_ChatChannelResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChatChannelService)
}

void ChatChannelService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

ChatChannelService::~ChatChannelService() {
  // @@protoc_insertion_point(destructor:chat.ChatChannelService)
  SharedDtor();
}

void ChatChannelService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void ChatChannelService::ArenaDtor(void* object) {
  ChatChannelService* _this = reinterpret_cast< ChatChannelService* >(object);
  (void)_this;
}
void ChatChannelService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChatChannelService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatChannelService::descriptor() {
  ::protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatChannelService& ChatChannelService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chat_2eproto::scc_info_ChatChannelService.base);
  return *internal_default_instance();
}


void ChatChannelService::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatChannelService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatChannelService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatChannelService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chat.ChatChannelService.ChatChannelRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chat.ChatChannelService.ChatChannelResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatChannelService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatChannelService)
  return false;
#undef DO_
}

void ChatChannelService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatChannelService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chat.ChatChannelService.ChatChannelRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .chat.ChatChannelService.ChatChannelResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ChatChannelService)
}

::google::protobuf::uint8* ChatChannelService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatChannelService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chat.ChatChannelService.ChatChannelRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .chat.ChatChannelService.ChatChannelResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatChannelService)
  return target;
}

size_t ChatChannelService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatChannelService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .chat.ChatChannelService.ChatChannelRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .chat.ChatChannelService.ChatChannelResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatChannelService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatChannelService)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatChannelService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatChannelService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatChannelService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatChannelService)
    MergeFrom(*source);
  }
}

void ChatChannelService::MergeFrom(const ChatChannelService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatChannelService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::chat::ChatChannelService_ChatChannelRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::chat::ChatChannelService_ChatChannelResponse::MergeFrom(from.resp());
    }
  }
}

void ChatChannelService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatChannelService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatChannelService::CopyFrom(const ChatChannelService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatChannelService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannelService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void ChatChannelService::Swap(ChatChannelService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChatChannelService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChatChannelService::UnsafeArenaSwap(ChatChannelService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChatChannelService::InternalSwap(ChatChannelService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatChannelService::GetMetadata() const {
  protobuf_Chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::UserBaseData* Arena::CreateMaybeMessage< ::chat::UserBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::UserBaseData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ChatMessage* Arena::CreateMaybeMessage< ::chat::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ChatMessageNotify* Arena::CreateMaybeMessage< ::chat::ChatMessageNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatMessageNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ClientChatService_ClientChatRequest* Arena::CreateMaybeMessage< ::chat::ClientChatService_ClientChatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ClientChatService_ClientChatRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ClientChatService_ClientChatResponse* Arena::CreateMaybeMessage< ::chat::ClientChatService_ClientChatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ClientChatService_ClientChatResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ClientChatService* Arena::CreateMaybeMessage< ::chat::ClientChatService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ClientChatService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ChatChannel* Arena::CreateMaybeMessage< ::chat::ChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatChannel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ChatChannelService_ChatChannelRequest* Arena::CreateMaybeMessage< ::chat::ChatChannelService_ChatChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatChannelService_ChatChannelRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ChatChannelService_ChatChannelResponse* Arena::CreateMaybeMessage< ::chat::ChatChannelService_ChatChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatChannelService_ChatChannelResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ChatChannelService* Arena::CreateMaybeMessage< ::chat::ChatChannelService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatChannelService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
