// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef PROTOBUF_INCLUDED_Chat_2eproto
#define PROTOBUF_INCLUDED_Chat_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Chat_2eproto 

namespace protobuf_Chat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Chat_2eproto
namespace chat {
class ChatChannel;
class ChatChannelDefaultTypeInternal;
extern ChatChannelDefaultTypeInternal _ChatChannel_default_instance_;
class ChatChannelService;
class ChatChannelServiceDefaultTypeInternal;
extern ChatChannelServiceDefaultTypeInternal _ChatChannelService_default_instance_;
class ChatChannelService_ChatChannelRequest;
class ChatChannelService_ChatChannelRequestDefaultTypeInternal;
extern ChatChannelService_ChatChannelRequestDefaultTypeInternal _ChatChannelService_ChatChannelRequest_default_instance_;
class ChatChannelService_ChatChannelResponse;
class ChatChannelService_ChatChannelResponseDefaultTypeInternal;
extern ChatChannelService_ChatChannelResponseDefaultTypeInternal _ChatChannelService_ChatChannelResponse_default_instance_;
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ChatMessageNotify;
class ChatMessageNotifyDefaultTypeInternal;
extern ChatMessageNotifyDefaultTypeInternal _ChatMessageNotify_default_instance_;
class ClientChatService;
class ClientChatServiceDefaultTypeInternal;
extern ClientChatServiceDefaultTypeInternal _ClientChatService_default_instance_;
class ClientChatService_ClientChatRequest;
class ClientChatService_ClientChatRequestDefaultTypeInternal;
extern ClientChatService_ClientChatRequestDefaultTypeInternal _ClientChatService_ClientChatRequest_default_instance_;
class ClientChatService_ClientChatResponse;
class ClientChatService_ClientChatResponseDefaultTypeInternal;
extern ClientChatService_ClientChatResponseDefaultTypeInternal _ClientChatService_ClientChatResponse_default_instance_;
class UserBaseData;
class UserBaseDataDefaultTypeInternal;
extern UserBaseDataDefaultTypeInternal _UserBaseData_default_instance_;
}  // namespace chat
namespace google {
namespace protobuf {
template<> ::chat::ChatChannel* Arena::CreateMaybeMessage<::chat::ChatChannel>(Arena*);
template<> ::chat::ChatChannelService* Arena::CreateMaybeMessage<::chat::ChatChannelService>(Arena*);
template<> ::chat::ChatChannelService_ChatChannelRequest* Arena::CreateMaybeMessage<::chat::ChatChannelService_ChatChannelRequest>(Arena*);
template<> ::chat::ChatChannelService_ChatChannelResponse* Arena::CreateMaybeMessage<::chat::ChatChannelService_ChatChannelResponse>(Arena*);
template<> ::chat::ChatMessage* Arena::CreateMaybeMessage<::chat::ChatMessage>(Arena*);
template<> ::chat::ChatMessageNotify* Arena::CreateMaybeMessage<::chat::ChatMessageNotify>(Arena*);
template<> ::chat::ClientChatService* Arena::CreateMaybeMessage<::chat::ClientChatService>(Arena*);
template<> ::chat::ClientChatService_ClientChatRequest* Arena::CreateMaybeMessage<::chat::ClientChatService_ClientChatRequest>(Arena*);
template<> ::chat::ClientChatService_ClientChatResponse* Arena::CreateMaybeMessage<::chat::ClientChatService_ClientChatResponse>(Arena*);
template<> ::chat::UserBaseData* Arena::CreateMaybeMessage<::chat::UserBaseData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chat {

enum ChatChannelService_CMD {
  ChatChannelService_CMD_QUERY = 1,
  ChatChannelService_CMD_QUERY_PERSON = 2,
  ChatChannelService_CMD_QUERY_BLACKLIST = 3,
  ChatChannelService_CMD_CHANGE_CHANNEL = 4,
  ChatChannelService_CMD_ADD_TO_BLACKLIST = 5,
  ChatChannelService_CMD_REMOVE_FROM_BLACKLIST = 6,
  ChatChannelService_CMD_ADD_GUILD_CHANNEL = 7,
  ChatChannelService_CMD_LEAVE_GUILD_CHANNEL = 8
};
bool ChatChannelService_CMD_IsValid(int value);
const ChatChannelService_CMD ChatChannelService_CMD_CMD_MIN = ChatChannelService_CMD_QUERY;
const ChatChannelService_CMD ChatChannelService_CMD_CMD_MAX = ChatChannelService_CMD_LEAVE_GUILD_CHANNEL;
const int ChatChannelService_CMD_CMD_ARRAYSIZE = ChatChannelService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatChannelService_CMD_descriptor();
inline const ::std::string& ChatChannelService_CMD_Name(ChatChannelService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatChannelService_CMD_descriptor(), value);
}
inline bool ChatChannelService_CMD_Parse(
    const ::std::string& name, ChatChannelService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatChannelService_CMD>(
    ChatChannelService_CMD_descriptor(), name, value);
}
enum CHAT_MESSAGE_TYPE {
  CHAT_MESSAGE_TYPE_WORLD = 1,
  CHAT_MESSAGE_TYPE_PERSONAL = 2,
  CHAT_MESSAGE_TYPE_SOCIATY = 3
};
bool CHAT_MESSAGE_TYPE_IsValid(int value);
const CHAT_MESSAGE_TYPE CHAT_MESSAGE_TYPE_MIN = CHAT_MESSAGE_TYPE_WORLD;
const CHAT_MESSAGE_TYPE CHAT_MESSAGE_TYPE_MAX = CHAT_MESSAGE_TYPE_SOCIATY;
const int CHAT_MESSAGE_TYPE_ARRAYSIZE = CHAT_MESSAGE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHAT_MESSAGE_TYPE_descriptor();
inline const ::std::string& CHAT_MESSAGE_TYPE_Name(CHAT_MESSAGE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHAT_MESSAGE_TYPE_descriptor(), value);
}
inline bool CHAT_MESSAGE_TYPE_Parse(
    const ::std::string& name, CHAT_MESSAGE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHAT_MESSAGE_TYPE>(
    CHAT_MESSAGE_TYPE_descriptor(), name, value);
}
// ===================================================================

class UserBaseData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.UserBaseData) */ {
 public:
  UserBaseData();
  virtual ~UserBaseData();

  UserBaseData(const UserBaseData& from);

  inline UserBaseData& operator=(const UserBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserBaseData(UserBaseData&& from) noexcept
    : UserBaseData() {
    *this = ::std::move(from);
  }

  inline UserBaseData& operator=(UserBaseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBaseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBaseData* internal_default_instance() {
    return reinterpret_cast<const UserBaseData*>(
               &_UserBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(UserBaseData* other);
  void Swap(UserBaseData* other);
  friend void swap(UserBaseData& a, UserBaseData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserBaseData* New() const final {
    return CreateMaybeMessage<UserBaseData>(NULL);
  }

  UserBaseData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserBaseData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserBaseData& from);
  void MergeFrom(const UserBaseData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBaseData* other);
  protected:
  explicit UserBaseData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes nick = 3;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required bytes signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_signature();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      ::std::string* signature);

  // required uint64 uuid = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  ::google::protobuf::uint64 uuid() const;
  void set_uuid(::google::protobuf::uint64 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 portrait = 4;
  bool has_portrait() const;
  void clear_portrait();
  static const int kPortraitFieldNumber = 4;
  ::google::protobuf::int32 portrait() const;
  void set_portrait(::google::protobuf::int32 value);

  // required int32 state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.UserBaseData)
 private:
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_level();
  void clear_has_level();
  void set_has_nick();
  void clear_has_nick();
  void set_has_portrait();
  void clear_has_portrait();
  void set_has_signature();
  void clear_has_signature();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 portrait_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ChatMessage* other);
  void Swap(ChatMessage* other);
  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return CreateMaybeMessage<ChatMessage>(NULL);
  }

  ChatMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);
  protected:
  explicit ChatMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes nick = 3;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required bytes content = 7;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 7;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // required uint64 uuid = 2;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  ::google::protobuf::uint64 uuid() const;
  void set_uuid(::google::protobuf::uint64 value);

  // required int32 level = 4;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 portrait = 5;
  bool has_portrait() const;
  void clear_portrait();
  static const int kPortraitFieldNumber = 5;
  ::google::protobuf::int32 portrait() const;
  void set_portrait(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 error_code = 9;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 9;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // required .chat.CHAT_MESSAGE_TYPE type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::chat::CHAT_MESSAGE_TYPE type() const;
  void set_type(::chat::CHAT_MESSAGE_TYPE value);

  // @@protoc_insertion_point(class_scope:chat.ChatMessage)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_nick();
  void clear_has_nick();
  void set_has_level();
  void clear_has_level();
  void set_has_portrait();
  void clear_has_portrait();
  void set_has_type();
  void clear_has_type();
  void set_has_content();
  void clear_has_content();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_error_code();
  void clear_has_error_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 portrait_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 error_code_;
  int type_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatMessageNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChatMessageNotify) */ {
 public:
  ChatMessageNotify();
  virtual ~ChatMessageNotify();

  ChatMessageNotify(const ChatMessageNotify& from);

  inline ChatMessageNotify& operator=(const ChatMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessageNotify(ChatMessageNotify&& from) noexcept
    : ChatMessageNotify() {
    *this = ::std::move(from);
  }

  inline ChatMessageNotify& operator=(ChatMessageNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessageNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessageNotify* internal_default_instance() {
    return reinterpret_cast<const ChatMessageNotify*>(
               &_ChatMessageNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ChatMessageNotify* other);
  void Swap(ChatMessageNotify* other);
  friend void swap(ChatMessageNotify& a, ChatMessageNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessageNotify* New() const final {
    return CreateMaybeMessage<ChatMessageNotify>(NULL);
  }

  ChatMessageNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessageNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatMessageNotify& from);
  void MergeFrom(const ChatMessageNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageNotify* other);
  protected:
  explicit ChatMessageNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat.ChatMessage chats = 1;
  int chats_size() const;
  void clear_chats();
  static const int kChatsFieldNumber = 1;
  ::chat::ChatMessage* mutable_chats(int index);
  ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >*
      mutable_chats();
  const ::chat::ChatMessage& chats(int index) const;
  ::chat::ChatMessage* add_chats();
  const ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >&
      chats() const;

  // @@protoc_insertion_point(class_scope:chat.ChatMessageNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage > chats_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientChatService_ClientChatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ClientChatService.ClientChatRequest) */ {
 public:
  ClientChatService_ClientChatRequest();
  virtual ~ClientChatService_ClientChatRequest();

  ClientChatService_ClientChatRequest(const ClientChatService_ClientChatRequest& from);

  inline ClientChatService_ClientChatRequest& operator=(const ClientChatService_ClientChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientChatService_ClientChatRequest(ClientChatService_ClientChatRequest&& from) noexcept
    : ClientChatService_ClientChatRequest() {
    *this = ::std::move(from);
  }

  inline ClientChatService_ClientChatRequest& operator=(ClientChatService_ClientChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientChatService_ClientChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientChatService_ClientChatRequest* internal_default_instance() {
    return reinterpret_cast<const ClientChatService_ClientChatRequest*>(
               &_ClientChatService_ClientChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(ClientChatService_ClientChatRequest* other);
  void Swap(ClientChatService_ClientChatRequest* other);
  friend void swap(ClientChatService_ClientChatRequest& a, ClientChatService_ClientChatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientChatService_ClientChatRequest* New() const final {
    return CreateMaybeMessage<ClientChatService_ClientChatRequest>(NULL);
  }

  ClientChatService_ClientChatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientChatService_ClientChatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientChatService_ClientChatRequest& from);
  void MergeFrom(const ClientChatService_ClientChatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientChatService_ClientChatRequest* other);
  protected:
  explicit ClientChatService_ClientChatRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // optional uint64 target_uuid = 3;
  bool has_target_uuid() const;
  void clear_target_uuid();
  static const int kTargetUuidFieldNumber = 3;
  ::google::protobuf::uint64 target_uuid() const;
  void set_target_uuid(::google::protobuf::uint64 value);

  // optional .chat.CHAT_MESSAGE_TYPE type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::chat::CHAT_MESSAGE_TYPE type() const;
  void set_type(::chat::CHAT_MESSAGE_TYPE value);

  // @@protoc_insertion_point(class_scope:chat.ClientChatService.ClientChatRequest)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_content();
  void clear_has_content();
  void set_has_target_uuid();
  void clear_has_target_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 target_uuid_;
  int type_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientChatService_ClientChatResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ClientChatService.ClientChatResponse) */ {
 public:
  ClientChatService_ClientChatResponse();
  virtual ~ClientChatService_ClientChatResponse();

  ClientChatService_ClientChatResponse(const ClientChatService_ClientChatResponse& from);

  inline ClientChatService_ClientChatResponse& operator=(const ClientChatService_ClientChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientChatService_ClientChatResponse(ClientChatService_ClientChatResponse&& from) noexcept
    : ClientChatService_ClientChatResponse() {
    *this = ::std::move(from);
  }

  inline ClientChatService_ClientChatResponse& operator=(ClientChatService_ClientChatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientChatService_ClientChatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientChatService_ClientChatResponse* internal_default_instance() {
    return reinterpret_cast<const ClientChatService_ClientChatResponse*>(
               &_ClientChatService_ClientChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(ClientChatService_ClientChatResponse* other);
  void Swap(ClientChatService_ClientChatResponse* other);
  friend void swap(ClientChatService_ClientChatResponse& a, ClientChatService_ClientChatResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientChatService_ClientChatResponse* New() const final {
    return CreateMaybeMessage<ClientChatService_ClientChatResponse>(NULL);
  }

  ClientChatService_ClientChatResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientChatService_ClientChatResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientChatService_ClientChatResponse& from);
  void MergeFrom(const ClientChatService_ClientChatResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientChatService_ClientChatResponse* other);
  protected:
  explicit ClientChatService_ClientChatResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.ClientChatService.ClientChatResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientChatService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ClientChatService) */ {
 public:
  ClientChatService();
  virtual ~ClientChatService();

  ClientChatService(const ClientChatService& from);

  inline ClientChatService& operator=(const ClientChatService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientChatService(ClientChatService&& from) noexcept
    : ClientChatService() {
    *this = ::std::move(from);
  }

  inline ClientChatService& operator=(ClientChatService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientChatService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientChatService* internal_default_instance() {
    return reinterpret_cast<const ClientChatService*>(
               &_ClientChatService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(ClientChatService* other);
  void Swap(ClientChatService* other);
  friend void swap(ClientChatService& a, ClientChatService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientChatService* New() const final {
    return CreateMaybeMessage<ClientChatService>(NULL);
  }

  ClientChatService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientChatService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientChatService& from);
  void MergeFrom(const ClientChatService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientChatService* other);
  protected:
  explicit ClientChatService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientChatService_ClientChatRequest ClientChatRequest;
  typedef ClientChatService_ClientChatResponse ClientChatResponse;

  // accessors -------------------------------------------------------

  // optional .chat.ClientChatService.ClientChatRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::chat::ClientChatService_ClientChatRequest& _internal_req() const;
  public:
  const ::chat::ClientChatService_ClientChatRequest& req() const;
  ::chat::ClientChatService_ClientChatRequest* release_req();
  ::chat::ClientChatService_ClientChatRequest* mutable_req();
  void set_allocated_req(::chat::ClientChatService_ClientChatRequest* req);
  void unsafe_arena_set_allocated_req(
      ::chat::ClientChatService_ClientChatRequest* req);
  ::chat::ClientChatService_ClientChatRequest* unsafe_arena_release_req();

  // optional .chat.ClientChatService.ClientChatResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::chat::ClientChatService_ClientChatResponse& _internal_resp() const;
  public:
  const ::chat::ClientChatService_ClientChatResponse& resp() const;
  ::chat::ClientChatService_ClientChatResponse* release_resp();
  ::chat::ClientChatService_ClientChatResponse* mutable_resp();
  void set_allocated_resp(::chat::ClientChatService_ClientChatResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::chat::ClientChatService_ClientChatResponse* resp);
  ::chat::ClientChatService_ClientChatResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:chat.ClientChatService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::chat::ClientChatService_ClientChatRequest* req_;
  ::chat::ClientChatService_ClientChatResponse* resp_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChatChannel) */ {
 public:
  ChatChannel();
  virtual ~ChatChannel();

  ChatChannel(const ChatChannel& from);

  inline ChatChannel& operator=(const ChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatChannel(ChatChannel&& from) noexcept
    : ChatChannel() {
    *this = ::std::move(from);
  }

  inline ChatChannel& operator=(ChatChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatChannel* internal_default_instance() {
    return reinterpret_cast<const ChatChannel*>(
               &_ChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(ChatChannel* other);
  void Swap(ChatChannel* other);
  friend void swap(ChatChannel& a, ChatChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatChannel* New() const final {
    return CreateMaybeMessage<ChatChannel>(NULL);
  }

  ChatChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatChannel& from);
  void MergeFrom(const ChatChannel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatChannel* other);
  protected:
  explicit ChatChannel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.ChatChannel)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatChannelService_ChatChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChatChannelService.ChatChannelRequest) */ {
 public:
  ChatChannelService_ChatChannelRequest();
  virtual ~ChatChannelService_ChatChannelRequest();

  ChatChannelService_ChatChannelRequest(const ChatChannelService_ChatChannelRequest& from);

  inline ChatChannelService_ChatChannelRequest& operator=(const ChatChannelService_ChatChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatChannelService_ChatChannelRequest(ChatChannelService_ChatChannelRequest&& from) noexcept
    : ChatChannelService_ChatChannelRequest() {
    *this = ::std::move(from);
  }

  inline ChatChannelService_ChatChannelRequest& operator=(ChatChannelService_ChatChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatChannelService_ChatChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatChannelService_ChatChannelRequest* internal_default_instance() {
    return reinterpret_cast<const ChatChannelService_ChatChannelRequest*>(
               &_ChatChannelService_ChatChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(ChatChannelService_ChatChannelRequest* other);
  void Swap(ChatChannelService_ChatChannelRequest* other);
  friend void swap(ChatChannelService_ChatChannelRequest& a, ChatChannelService_ChatChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatChannelService_ChatChannelRequest* New() const final {
    return CreateMaybeMessage<ChatChannelService_ChatChannelRequest>(NULL);
  }

  ChatChannelService_ChatChannelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatChannelService_ChatChannelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatChannelService_ChatChannelRequest& from);
  void MergeFrom(const ChatChannelService_ChatChannelRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatChannelService_ChatChannelRequest* other);
  protected:
  explicit ChatChannelService_ChatChannelRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 query_uuid = 3;
  int query_uuid_size() const;
  void clear_query_uuid();
  static const int kQueryUuidFieldNumber = 3;
  ::google::protobuf::uint64 query_uuid(int index) const;
  void set_query_uuid(int index, ::google::protobuf::uint64 value);
  void add_query_uuid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      query_uuid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_query_uuid();

  // optional uint64 choice_uuid = 4;
  bool has_choice_uuid() const;
  void clear_choice_uuid();
  static const int kChoiceUuidFieldNumber = 4;
  ::google::protobuf::uint64 choice_uuid() const;
  void set_choice_uuid(::google::protobuf::uint64 value);

  // optional int32 choice_channel_id = 2;
  bool has_choice_channel_id() const;
  void clear_choice_channel_id();
  static const int kChoiceChannelIdFieldNumber = 2;
  ::google::protobuf::int32 choice_channel_id() const;
  void set_choice_channel_id(::google::protobuf::int32 value);

  // required .chat.ChatChannelService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::chat::ChatChannelService_CMD cmd() const;
  void set_cmd(::chat::ChatChannelService_CMD value);

  // @@protoc_insertion_point(class_scope:chat.ChatChannelService.ChatChannelRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_choice_channel_id();
  void clear_has_choice_channel_id();
  void set_has_choice_uuid();
  void clear_has_choice_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > query_uuid_;
  ::google::protobuf::uint64 choice_uuid_;
  ::google::protobuf::int32 choice_channel_id_;
  int cmd_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatChannelService_ChatChannelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChatChannelService.ChatChannelResponse) */ {
 public:
  ChatChannelService_ChatChannelResponse();
  virtual ~ChatChannelService_ChatChannelResponse();

  ChatChannelService_ChatChannelResponse(const ChatChannelService_ChatChannelResponse& from);

  inline ChatChannelService_ChatChannelResponse& operator=(const ChatChannelService_ChatChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatChannelService_ChatChannelResponse(ChatChannelService_ChatChannelResponse&& from) noexcept
    : ChatChannelService_ChatChannelResponse() {
    *this = ::std::move(from);
  }

  inline ChatChannelService_ChatChannelResponse& operator=(ChatChannelService_ChatChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatChannelService_ChatChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatChannelService_ChatChannelResponse* internal_default_instance() {
    return reinterpret_cast<const ChatChannelService_ChatChannelResponse*>(
               &_ChatChannelService_ChatChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ChatChannelService_ChatChannelResponse* other);
  void Swap(ChatChannelService_ChatChannelResponse* other);
  friend void swap(ChatChannelService_ChatChannelResponse& a, ChatChannelService_ChatChannelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatChannelService_ChatChannelResponse* New() const final {
    return CreateMaybeMessage<ChatChannelService_ChatChannelResponse>(NULL);
  }

  ChatChannelService_ChatChannelResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatChannelService_ChatChannelResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatChannelService_ChatChannelResponse& from);
  void MergeFrom(const ChatChannelService_ChatChannelResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatChannelService_ChatChannelResponse* other);
  protected:
  explicit ChatChannelService_ChatChannelResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat.ChatChannel channel_list = 2;
  int channel_list_size() const;
  void clear_channel_list();
  static const int kChannelListFieldNumber = 2;
  ::chat::ChatChannel* mutable_channel_list(int index);
  ::google::protobuf::RepeatedPtrField< ::chat::ChatChannel >*
      mutable_channel_list();
  const ::chat::ChatChannel& channel_list(int index) const;
  ::chat::ChatChannel* add_channel_list();
  const ::google::protobuf::RepeatedPtrField< ::chat::ChatChannel >&
      channel_list() const;

  // repeated .chat.UserBaseData query_result = 4;
  int query_result_size() const;
  void clear_query_result();
  static const int kQueryResultFieldNumber = 4;
  ::chat::UserBaseData* mutable_query_result(int index);
  ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData >*
      mutable_query_result();
  const ::chat::UserBaseData& query_result(int index) const;
  ::chat::UserBaseData* add_query_result();
  const ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData >&
      query_result() const;

  // repeated .chat.UserBaseData blacklist = 5;
  int blacklist_size() const;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 5;
  ::chat::UserBaseData* mutable_blacklist(int index);
  ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData >*
      mutable_blacklist();
  const ::chat::UserBaseData& blacklist(int index) const;
  ::chat::UserBaseData* add_blacklist();
  const ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData >&
      blacklist() const;

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 user_channel_id = 3;
  bool has_user_channel_id() const;
  void clear_user_channel_id();
  static const int kUserChannelIdFieldNumber = 3;
  ::google::protobuf::int32 user_channel_id() const;
  void set_user_channel_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.ChatChannelService.ChatChannelResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_user_channel_id();
  void clear_has_user_channel_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chat::ChatChannel > channel_list_;
  ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData > query_result_;
  ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData > blacklist_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 user_channel_id_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatChannelService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChatChannelService) */ {
 public:
  ChatChannelService();
  virtual ~ChatChannelService();

  ChatChannelService(const ChatChannelService& from);

  inline ChatChannelService& operator=(const ChatChannelService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatChannelService(ChatChannelService&& from) noexcept
    : ChatChannelService() {
    *this = ::std::move(from);
  }

  inline ChatChannelService& operator=(ChatChannelService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatChannelService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatChannelService* internal_default_instance() {
    return reinterpret_cast<const ChatChannelService*>(
               &_ChatChannelService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(ChatChannelService* other);
  void Swap(ChatChannelService* other);
  friend void swap(ChatChannelService& a, ChatChannelService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatChannelService* New() const final {
    return CreateMaybeMessage<ChatChannelService>(NULL);
  }

  ChatChannelService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatChannelService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatChannelService& from);
  void MergeFrom(const ChatChannelService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatChannelService* other);
  protected:
  explicit ChatChannelService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChatChannelService_ChatChannelRequest ChatChannelRequest;
  typedef ChatChannelService_ChatChannelResponse ChatChannelResponse;

  typedef ChatChannelService_CMD CMD;
  static const CMD QUERY =
    ChatChannelService_CMD_QUERY;
  static const CMD QUERY_PERSON =
    ChatChannelService_CMD_QUERY_PERSON;
  static const CMD QUERY_BLACKLIST =
    ChatChannelService_CMD_QUERY_BLACKLIST;
  static const CMD CHANGE_CHANNEL =
    ChatChannelService_CMD_CHANGE_CHANNEL;
  static const CMD ADD_TO_BLACKLIST =
    ChatChannelService_CMD_ADD_TO_BLACKLIST;
  static const CMD REMOVE_FROM_BLACKLIST =
    ChatChannelService_CMD_REMOVE_FROM_BLACKLIST;
  static const CMD ADD_GUILD_CHANNEL =
    ChatChannelService_CMD_ADD_GUILD_CHANNEL;
  static const CMD LEAVE_GUILD_CHANNEL =
    ChatChannelService_CMD_LEAVE_GUILD_CHANNEL;
  static inline bool CMD_IsValid(int value) {
    return ChatChannelService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    ChatChannelService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    ChatChannelService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    ChatChannelService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return ChatChannelService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return ChatChannelService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return ChatChannelService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .chat.ChatChannelService.ChatChannelRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::chat::ChatChannelService_ChatChannelRequest& _internal_req() const;
  public:
  const ::chat::ChatChannelService_ChatChannelRequest& req() const;
  ::chat::ChatChannelService_ChatChannelRequest* release_req();
  ::chat::ChatChannelService_ChatChannelRequest* mutable_req();
  void set_allocated_req(::chat::ChatChannelService_ChatChannelRequest* req);
  void unsafe_arena_set_allocated_req(
      ::chat::ChatChannelService_ChatChannelRequest* req);
  ::chat::ChatChannelService_ChatChannelRequest* unsafe_arena_release_req();

  // optional .chat.ChatChannelService.ChatChannelResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::chat::ChatChannelService_ChatChannelResponse& _internal_resp() const;
  public:
  const ::chat::ChatChannelService_ChatChannelResponse& resp() const;
  ::chat::ChatChannelService_ChatChannelResponse* release_resp();
  ::chat::ChatChannelService_ChatChannelResponse* mutable_resp();
  void set_allocated_resp(::chat::ChatChannelService_ChatChannelResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::chat::ChatChannelService_ChatChannelResponse* resp);
  ::chat::ChatChannelService_ChatChannelResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:chat.ChatChannelService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::chat::ChatChannelService_ChatChannelRequest* req_;
  ::chat::ChatChannelService_ChatChannelResponse* resp_;
  friend struct ::protobuf_Chat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserBaseData

// required uint64 uuid = 1;
inline bool UserBaseData::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBaseData::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBaseData::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBaseData::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 UserBaseData::uuid() const {
  // @@protoc_insertion_point(field_get:chat.UserBaseData.uuid)
  return uuid_;
}
inline void UserBaseData::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
  // @@protoc_insertion_point(field_set:chat.UserBaseData.uuid)
}

// required int32 level = 2;
inline bool UserBaseData::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserBaseData::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserBaseData::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserBaseData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserBaseData::level() const {
  // @@protoc_insertion_point(field_get:chat.UserBaseData.level)
  return level_;
}
inline void UserBaseData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:chat.UserBaseData.level)
}

// required bytes nick = 3;
inline bool UserBaseData::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBaseData::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBaseData::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBaseData::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& UserBaseData::nick() const {
  // @@protoc_insertion_point(field_get:chat.UserBaseData.nick)
  return nick_.Get();
}
inline void UserBaseData::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:chat.UserBaseData.nick)
}
#if LANG_CXX11
inline void UserBaseData::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:chat.UserBaseData.nick)
}
#endif
inline void UserBaseData::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:chat.UserBaseData.nick)
}
inline void UserBaseData::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:chat.UserBaseData.nick)
}
inline ::std::string* UserBaseData::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:chat.UserBaseData.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserBaseData::release_nick() {
  // @@protoc_insertion_point(field_release:chat.UserBaseData.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserBaseData::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:chat.UserBaseData.nick)
}
inline ::std::string* UserBaseData::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.UserBaseData.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserBaseData::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.UserBaseData.nick)
}

// required int32 portrait = 4;
inline bool UserBaseData::has_portrait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserBaseData::set_has_portrait() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserBaseData::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserBaseData::clear_portrait() {
  portrait_ = 0;
  clear_has_portrait();
}
inline ::google::protobuf::int32 UserBaseData::portrait() const {
  // @@protoc_insertion_point(field_get:chat.UserBaseData.portrait)
  return portrait_;
}
inline void UserBaseData::set_portrait(::google::protobuf::int32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:chat.UserBaseData.portrait)
}

// required bytes signature = 5;
inline bool UserBaseData::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBaseData::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBaseData::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBaseData::clear_signature() {
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_signature();
}
inline const ::std::string& UserBaseData::signature() const {
  // @@protoc_insertion_point(field_get:chat.UserBaseData.signature)
  return signature_.Get();
}
inline void UserBaseData::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:chat.UserBaseData.signature)
}
#if LANG_CXX11
inline void UserBaseData::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:chat.UserBaseData.signature)
}
#endif
inline void UserBaseData::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:chat.UserBaseData.signature)
}
inline void UserBaseData::set_signature(const void* value,
    size_t size) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:chat.UserBaseData.signature)
}
inline ::std::string* UserBaseData::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:chat.UserBaseData.signature)
  return signature_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserBaseData::release_signature() {
  // @@protoc_insertion_point(field_release:chat.UserBaseData.signature)
  if (!has_signature()) {
    return NULL;
  }
  clear_has_signature();
  return signature_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserBaseData::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:chat.UserBaseData.signature)
}
inline ::std::string* UserBaseData::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.UserBaseData.signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_signature();
  return signature_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserBaseData::unsafe_arena_set_allocated_signature(
    ::std::string* signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.UserBaseData.signature)
}

// required int32 state = 6;
inline bool UserBaseData::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserBaseData::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserBaseData::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserBaseData::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserBaseData::state() const {
  // @@protoc_insertion_point(field_get:chat.UserBaseData.state)
  return state_;
}
inline void UserBaseData::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:chat.UserBaseData.state)
}

// -------------------------------------------------------------------

// ChatMessage

// required bytes userid = 1;
inline bool ChatMessage::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& ChatMessage::userid() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.userid)
  return userid_.Get();
}
inline void ChatMessage::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:chat.ChatMessage.userid)
}
#if LANG_CXX11
inline void ChatMessage::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:chat.ChatMessage.userid)
}
#endif
inline void ChatMessage::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.userid)
}
inline void ChatMessage::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.userid)
}
inline ::std::string* ChatMessage::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChatMessage::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ChatMessage::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.userid)
}
inline ::std::string* ChatMessage::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ChatMessage.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ChatMessage::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ChatMessage.userid)
}

// required uint64 uuid = 2;
inline bool ChatMessage::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 ChatMessage::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.uuid)
  return uuid_;
}
inline void ChatMessage::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.uuid)
}

// required bytes nick = 3;
inline bool ChatMessage::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& ChatMessage::nick() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.nick)
  return nick_.Get();
}
inline void ChatMessage::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:chat.ChatMessage.nick)
}
#if LANG_CXX11
inline void ChatMessage::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:chat.ChatMessage.nick)
}
#endif
inline void ChatMessage::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.nick)
}
inline void ChatMessage::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.nick)
}
inline ::std::string* ChatMessage::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChatMessage::release_nick() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ChatMessage::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.nick)
}
inline ::std::string* ChatMessage::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ChatMessage.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ChatMessage::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ChatMessage.nick)
}

// required int32 level = 4;
inline bool ChatMessage::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatMessage::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatMessage::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatMessage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ChatMessage::level() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.level)
  return level_;
}
inline void ChatMessage::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.level)
}

// required int32 portrait = 5;
inline bool ChatMessage::has_portrait() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatMessage::set_has_portrait() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatMessage::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatMessage::clear_portrait() {
  portrait_ = 0;
  clear_has_portrait();
}
inline ::google::protobuf::int32 ChatMessage::portrait() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.portrait)
  return portrait_;
}
inline void ChatMessage::set_portrait(::google::protobuf::int32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.portrait)
}

// required .chat.CHAT_MESSAGE_TYPE type = 6;
inline bool ChatMessage::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatMessage::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::chat::CHAT_MESSAGE_TYPE ChatMessage::type() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.type)
  return static_cast< ::chat::CHAT_MESSAGE_TYPE >(type_);
}
inline void ChatMessage::set_type(::chat::CHAT_MESSAGE_TYPE value) {
  assert(::chat::CHAT_MESSAGE_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.type)
}

// required bytes content = 7;
inline bool ChatMessage::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_content();
}
inline const ::std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.content)
  return content_.Get();
}
inline void ChatMessage::set_content(const ::std::string& value) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:chat.ChatMessage.content)
}
#if LANG_CXX11
inline void ChatMessage::set_content(::std::string&& value) {
  set_has_content();
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:chat.ChatMessage.content)
}
#endif
inline void ChatMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.content)
}
inline void ChatMessage::set_content(const void* value,
    size_t size) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.content)
}
inline ::std::string* ChatMessage::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ChatMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.content)
}
inline ::std::string* ChatMessage::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ChatMessage.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_content();
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ChatMessage::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ChatMessage.content)
}

// required sfixed64 timestamp = 8;
inline bool ChatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.timestamp)
  return timestamp_;
}
inline void ChatMessage::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.timestamp)
}

// required int32 error_code = 9;
inline bool ChatMessage::has_error_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatMessage::set_has_error_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatMessage::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatMessage::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 ChatMessage::error_code() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.error_code)
  return error_code_;
}
inline void ChatMessage::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.error_code)
}

// -------------------------------------------------------------------

// ChatMessageNotify

// repeated .chat.ChatMessage chats = 1;
inline int ChatMessageNotify::chats_size() const {
  return chats_.size();
}
inline void ChatMessageNotify::clear_chats() {
  chats_.Clear();
}
inline ::chat::ChatMessage* ChatMessageNotify::mutable_chats(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ChatMessageNotify.chats)
  return chats_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >*
ChatMessageNotify::mutable_chats() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatMessageNotify.chats)
  return &chats_;
}
inline const ::chat::ChatMessage& ChatMessageNotify::chats(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatMessageNotify.chats)
  return chats_.Get(index);
}
inline ::chat::ChatMessage* ChatMessageNotify::add_chats() {
  // @@protoc_insertion_point(field_add:chat.ChatMessageNotify.chats)
  return chats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >&
ChatMessageNotify::chats() const {
  // @@protoc_insertion_point(field_list:chat.ChatMessageNotify.chats)
  return chats_;
}

// -------------------------------------------------------------------

// ClientChatService_ClientChatRequest

// optional .chat.CHAT_MESSAGE_TYPE type = 1;
inline bool ClientChatService_ClientChatRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientChatService_ClientChatRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientChatService_ClientChatRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientChatService_ClientChatRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::chat::CHAT_MESSAGE_TYPE ClientChatService_ClientChatRequest::type() const {
  // @@protoc_insertion_point(field_get:chat.ClientChatService.ClientChatRequest.type)
  return static_cast< ::chat::CHAT_MESSAGE_TYPE >(type_);
}
inline void ClientChatService_ClientChatRequest::set_type(::chat::CHAT_MESSAGE_TYPE value) {
  assert(::chat::CHAT_MESSAGE_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientChatService.ClientChatRequest.type)
}

// optional bytes content = 2;
inline bool ClientChatService_ClientChatRequest::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientChatService_ClientChatRequest::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientChatService_ClientChatRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientChatService_ClientChatRequest::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_content();
}
inline const ::std::string& ClientChatService_ClientChatRequest::content() const {
  // @@protoc_insertion_point(field_get:chat.ClientChatService.ClientChatRequest.content)
  return content_.Get();
}
inline void ClientChatService_ClientChatRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:chat.ClientChatService.ClientChatRequest.content)
}
#if LANG_CXX11
inline void ClientChatService_ClientChatRequest::set_content(::std::string&& value) {
  set_has_content();
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:chat.ClientChatService.ClientChatRequest.content)
}
#endif
inline void ClientChatService_ClientChatRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:chat.ClientChatService.ClientChatRequest.content)
}
inline void ClientChatService_ClientChatRequest::set_content(const void* value,
    size_t size) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:chat.ClientChatService.ClientChatRequest.content)
}
inline ::std::string* ClientChatService_ClientChatRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:chat.ClientChatService.ClientChatRequest.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientChatService_ClientChatRequest::release_content() {
  // @@protoc_insertion_point(field_release:chat.ClientChatService.ClientChatRequest.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ClientChatService_ClientChatRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:chat.ClientChatService.ClientChatRequest.content)
}
inline ::std::string* ClientChatService_ClientChatRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ClientChatService.ClientChatRequest.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_content();
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClientChatService_ClientChatRequest::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ClientChatService.ClientChatRequest.content)
}

// optional uint64 target_uuid = 3;
inline bool ClientChatService_ClientChatRequest::has_target_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientChatService_ClientChatRequest::set_has_target_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientChatService_ClientChatRequest::clear_has_target_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientChatService_ClientChatRequest::clear_target_uuid() {
  target_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_uuid();
}
inline ::google::protobuf::uint64 ClientChatService_ClientChatRequest::target_uuid() const {
  // @@protoc_insertion_point(field_get:chat.ClientChatService.ClientChatRequest.target_uuid)
  return target_uuid_;
}
inline void ClientChatService_ClientChatRequest::set_target_uuid(::google::protobuf::uint64 value) {
  set_has_target_uuid();
  target_uuid_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientChatService.ClientChatRequest.target_uuid)
}

// -------------------------------------------------------------------

// ClientChatService_ClientChatResponse

// required int32 result = 1;
inline bool ClientChatService_ClientChatResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientChatService_ClientChatResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientChatService_ClientChatResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientChatService_ClientChatResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ClientChatService_ClientChatResponse::result() const {
  // @@protoc_insertion_point(field_get:chat.ClientChatService.ClientChatResponse.result)
  return result_;
}
inline void ClientChatService_ClientChatResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientChatService.ClientChatResponse.result)
}

// -------------------------------------------------------------------

// ClientChatService

// optional .chat.ClientChatService.ClientChatRequest req = 1;
inline bool ClientChatService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientChatService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientChatService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientChatService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::chat::ClientChatService_ClientChatRequest& ClientChatService::_internal_req() const {
  return *req_;
}
inline const ::chat::ClientChatService_ClientChatRequest& ClientChatService::req() const {
  const ::chat::ClientChatService_ClientChatRequest* p = req_;
  // @@protoc_insertion_point(field_get:chat.ClientChatService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::chat::ClientChatService_ClientChatRequest*>(
      &::chat::_ClientChatService_ClientChatRequest_default_instance_);
}
inline ::chat::ClientChatService_ClientChatRequest* ClientChatService::release_req() {
  // @@protoc_insertion_point(field_release:chat.ClientChatService.req)
  clear_has_req();
  ::chat::ClientChatService_ClientChatRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::chat::ClientChatService_ClientChatRequest* ClientChatService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ClientChatService.req)
  clear_has_req();
  ::chat::ClientChatService_ClientChatRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::chat::ClientChatService_ClientChatRequest* ClientChatService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::chat::ClientChatService_ClientChatRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat.ClientChatService.req)
  return req_;
}
inline void ClientChatService::set_allocated_req(::chat::ClientChatService_ClientChatRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientChatService.req)
}

// optional .chat.ClientChatService.ClientChatResponse resp = 2;
inline bool ClientChatService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientChatService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientChatService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientChatService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::chat::ClientChatService_ClientChatResponse& ClientChatService::_internal_resp() const {
  return *resp_;
}
inline const ::chat::ClientChatService_ClientChatResponse& ClientChatService::resp() const {
  const ::chat::ClientChatService_ClientChatResponse* p = resp_;
  // @@protoc_insertion_point(field_get:chat.ClientChatService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::chat::ClientChatService_ClientChatResponse*>(
      &::chat::_ClientChatService_ClientChatResponse_default_instance_);
}
inline ::chat::ClientChatService_ClientChatResponse* ClientChatService::release_resp() {
  // @@protoc_insertion_point(field_release:chat.ClientChatService.resp)
  clear_has_resp();
  ::chat::ClientChatService_ClientChatResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::chat::ClientChatService_ClientChatResponse* ClientChatService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ClientChatService.resp)
  clear_has_resp();
  ::chat::ClientChatService_ClientChatResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::chat::ClientChatService_ClientChatResponse* ClientChatService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::chat::ClientChatService_ClientChatResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat.ClientChatService.resp)
  return resp_;
}
inline void ClientChatService::set_allocated_resp(::chat::ClientChatService_ClientChatResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:chat.ClientChatService.resp)
}

// -------------------------------------------------------------------

// ChatChannel

// required int32 id = 1;
inline bool ChatChannel::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatChannel::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatChannel::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatChannel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ChatChannel::id() const {
  // @@protoc_insertion_point(field_get:chat.ChatChannel.id)
  return id_;
}
inline void ChatChannel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatChannel.id)
}

// required int32 type = 2;
inline bool ChatChannel::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatChannel::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatChannel::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatChannel::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ChatChannel::type() const {
  // @@protoc_insertion_point(field_get:chat.ChatChannel.type)
  return type_;
}
inline void ChatChannel::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatChannel.type)
}

// optional int32 state = 3;
inline bool ChatChannel::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatChannel::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatChannel::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatChannel::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ChatChannel::state() const {
  // @@protoc_insertion_point(field_get:chat.ChatChannel.state)
  return state_;
}
inline void ChatChannel::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatChannel.state)
}

// -------------------------------------------------------------------

// ChatChannelService_ChatChannelRequest

// required .chat.ChatChannelService.CMD cmd = 1;
inline bool ChatChannelService_ChatChannelRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatChannelService_ChatChannelRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatChannelService_ChatChannelRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatChannelService_ChatChannelRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::chat::ChatChannelService_CMD ChatChannelService_ChatChannelRequest::cmd() const {
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.ChatChannelRequest.cmd)
  return static_cast< ::chat::ChatChannelService_CMD >(cmd_);
}
inline void ChatChannelService_ChatChannelRequest::set_cmd(::chat::ChatChannelService_CMD value) {
  assert(::chat::ChatChannelService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatChannelService.ChatChannelRequest.cmd)
}

// optional int32 choice_channel_id = 2;
inline bool ChatChannelService_ChatChannelRequest::has_choice_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatChannelService_ChatChannelRequest::set_has_choice_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatChannelService_ChatChannelRequest::clear_has_choice_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatChannelService_ChatChannelRequest::clear_choice_channel_id() {
  choice_channel_id_ = 0;
  clear_has_choice_channel_id();
}
inline ::google::protobuf::int32 ChatChannelService_ChatChannelRequest::choice_channel_id() const {
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.ChatChannelRequest.choice_channel_id)
  return choice_channel_id_;
}
inline void ChatChannelService_ChatChannelRequest::set_choice_channel_id(::google::protobuf::int32 value) {
  set_has_choice_channel_id();
  choice_channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatChannelService.ChatChannelRequest.choice_channel_id)
}

// repeated uint64 query_uuid = 3;
inline int ChatChannelService_ChatChannelRequest::query_uuid_size() const {
  return query_uuid_.size();
}
inline void ChatChannelService_ChatChannelRequest::clear_query_uuid() {
  query_uuid_.Clear();
}
inline ::google::protobuf::uint64 ChatChannelService_ChatChannelRequest::query_uuid(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.ChatChannelRequest.query_uuid)
  return query_uuid_.Get(index);
}
inline void ChatChannelService_ChatChannelRequest::set_query_uuid(int index, ::google::protobuf::uint64 value) {
  query_uuid_.Set(index, value);
  // @@protoc_insertion_point(field_set:chat.ChatChannelService.ChatChannelRequest.query_uuid)
}
inline void ChatChannelService_ChatChannelRequest::add_query_uuid(::google::protobuf::uint64 value) {
  query_uuid_.Add(value);
  // @@protoc_insertion_point(field_add:chat.ChatChannelService.ChatChannelRequest.query_uuid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ChatChannelService_ChatChannelRequest::query_uuid() const {
  // @@protoc_insertion_point(field_list:chat.ChatChannelService.ChatChannelRequest.query_uuid)
  return query_uuid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ChatChannelService_ChatChannelRequest::mutable_query_uuid() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatChannelService.ChatChannelRequest.query_uuid)
  return &query_uuid_;
}

// optional uint64 choice_uuid = 4;
inline bool ChatChannelService_ChatChannelRequest::has_choice_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatChannelService_ChatChannelRequest::set_has_choice_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatChannelService_ChatChannelRequest::clear_has_choice_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatChannelService_ChatChannelRequest::clear_choice_uuid() {
  choice_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_choice_uuid();
}
inline ::google::protobuf::uint64 ChatChannelService_ChatChannelRequest::choice_uuid() const {
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.ChatChannelRequest.choice_uuid)
  return choice_uuid_;
}
inline void ChatChannelService_ChatChannelRequest::set_choice_uuid(::google::protobuf::uint64 value) {
  set_has_choice_uuid();
  choice_uuid_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatChannelService.ChatChannelRequest.choice_uuid)
}

// -------------------------------------------------------------------

// ChatChannelService_ChatChannelResponse

// required int32 result = 1;
inline bool ChatChannelService_ChatChannelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatChannelService_ChatChannelResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatChannelService_ChatChannelResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatChannelService_ChatChannelResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ChatChannelService_ChatChannelResponse::result() const {
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.ChatChannelResponse.result)
  return result_;
}
inline void ChatChannelService_ChatChannelResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatChannelService.ChatChannelResponse.result)
}

// repeated .chat.ChatChannel channel_list = 2;
inline int ChatChannelService_ChatChannelResponse::channel_list_size() const {
  return channel_list_.size();
}
inline void ChatChannelService_ChatChannelResponse::clear_channel_list() {
  channel_list_.Clear();
}
inline ::chat::ChatChannel* ChatChannelService_ChatChannelResponse::mutable_channel_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ChatChannelService.ChatChannelResponse.channel_list)
  return channel_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chat::ChatChannel >*
ChatChannelService_ChatChannelResponse::mutable_channel_list() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatChannelService.ChatChannelResponse.channel_list)
  return &channel_list_;
}
inline const ::chat::ChatChannel& ChatChannelService_ChatChannelResponse::channel_list(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.ChatChannelResponse.channel_list)
  return channel_list_.Get(index);
}
inline ::chat::ChatChannel* ChatChannelService_ChatChannelResponse::add_channel_list() {
  // @@protoc_insertion_point(field_add:chat.ChatChannelService.ChatChannelResponse.channel_list)
  return channel_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::ChatChannel >&
ChatChannelService_ChatChannelResponse::channel_list() const {
  // @@protoc_insertion_point(field_list:chat.ChatChannelService.ChatChannelResponse.channel_list)
  return channel_list_;
}

// optional int32 user_channel_id = 3;
inline bool ChatChannelService_ChatChannelResponse::has_user_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatChannelService_ChatChannelResponse::set_has_user_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatChannelService_ChatChannelResponse::clear_has_user_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatChannelService_ChatChannelResponse::clear_user_channel_id() {
  user_channel_id_ = 0;
  clear_has_user_channel_id();
}
inline ::google::protobuf::int32 ChatChannelService_ChatChannelResponse::user_channel_id() const {
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.ChatChannelResponse.user_channel_id)
  return user_channel_id_;
}
inline void ChatChannelService_ChatChannelResponse::set_user_channel_id(::google::protobuf::int32 value) {
  set_has_user_channel_id();
  user_channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatChannelService.ChatChannelResponse.user_channel_id)
}

// repeated .chat.UserBaseData query_result = 4;
inline int ChatChannelService_ChatChannelResponse::query_result_size() const {
  return query_result_.size();
}
inline void ChatChannelService_ChatChannelResponse::clear_query_result() {
  query_result_.Clear();
}
inline ::chat::UserBaseData* ChatChannelService_ChatChannelResponse::mutable_query_result(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ChatChannelService.ChatChannelResponse.query_result)
  return query_result_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData >*
ChatChannelService_ChatChannelResponse::mutable_query_result() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatChannelService.ChatChannelResponse.query_result)
  return &query_result_;
}
inline const ::chat::UserBaseData& ChatChannelService_ChatChannelResponse::query_result(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.ChatChannelResponse.query_result)
  return query_result_.Get(index);
}
inline ::chat::UserBaseData* ChatChannelService_ChatChannelResponse::add_query_result() {
  // @@protoc_insertion_point(field_add:chat.ChatChannelService.ChatChannelResponse.query_result)
  return query_result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData >&
ChatChannelService_ChatChannelResponse::query_result() const {
  // @@protoc_insertion_point(field_list:chat.ChatChannelService.ChatChannelResponse.query_result)
  return query_result_;
}

// repeated .chat.UserBaseData blacklist = 5;
inline int ChatChannelService_ChatChannelResponse::blacklist_size() const {
  return blacklist_.size();
}
inline void ChatChannelService_ChatChannelResponse::clear_blacklist() {
  blacklist_.Clear();
}
inline ::chat::UserBaseData* ChatChannelService_ChatChannelResponse::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ChatChannelService.ChatChannelResponse.blacklist)
  return blacklist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData >*
ChatChannelService_ChatChannelResponse::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatChannelService.ChatChannelResponse.blacklist)
  return &blacklist_;
}
inline const ::chat::UserBaseData& ChatChannelService_ChatChannelResponse::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.ChatChannelResponse.blacklist)
  return blacklist_.Get(index);
}
inline ::chat::UserBaseData* ChatChannelService_ChatChannelResponse::add_blacklist() {
  // @@protoc_insertion_point(field_add:chat.ChatChannelService.ChatChannelResponse.blacklist)
  return blacklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::UserBaseData >&
ChatChannelService_ChatChannelResponse::blacklist() const {
  // @@protoc_insertion_point(field_list:chat.ChatChannelService.ChatChannelResponse.blacklist)
  return blacklist_;
}

// -------------------------------------------------------------------

// ChatChannelService

// optional .chat.ChatChannelService.ChatChannelRequest req = 1;
inline bool ChatChannelService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatChannelService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatChannelService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatChannelService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::chat::ChatChannelService_ChatChannelRequest& ChatChannelService::_internal_req() const {
  return *req_;
}
inline const ::chat::ChatChannelService_ChatChannelRequest& ChatChannelService::req() const {
  const ::chat::ChatChannelService_ChatChannelRequest* p = req_;
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::chat::ChatChannelService_ChatChannelRequest*>(
      &::chat::_ChatChannelService_ChatChannelRequest_default_instance_);
}
inline ::chat::ChatChannelService_ChatChannelRequest* ChatChannelService::release_req() {
  // @@protoc_insertion_point(field_release:chat.ChatChannelService.req)
  clear_has_req();
  ::chat::ChatChannelService_ChatChannelRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::chat::ChatChannelService_ChatChannelRequest* ChatChannelService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ChatChannelService.req)
  clear_has_req();
  ::chat::ChatChannelService_ChatChannelRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::chat::ChatChannelService_ChatChannelRequest* ChatChannelService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::chat::ChatChannelService_ChatChannelRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat.ChatChannelService.req)
  return req_;
}
inline void ChatChannelService::set_allocated_req(::chat::ChatChannelService_ChatChannelRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:chat.ChatChannelService.req)
}

// optional .chat.ChatChannelService.ChatChannelResponse resp = 2;
inline bool ChatChannelService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatChannelService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatChannelService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatChannelService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::chat::ChatChannelService_ChatChannelResponse& ChatChannelService::_internal_resp() const {
  return *resp_;
}
inline const ::chat::ChatChannelService_ChatChannelResponse& ChatChannelService::resp() const {
  const ::chat::ChatChannelService_ChatChannelResponse* p = resp_;
  // @@protoc_insertion_point(field_get:chat.ChatChannelService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::chat::ChatChannelService_ChatChannelResponse*>(
      &::chat::_ChatChannelService_ChatChannelResponse_default_instance_);
}
inline ::chat::ChatChannelService_ChatChannelResponse* ChatChannelService::release_resp() {
  // @@protoc_insertion_point(field_release:chat.ChatChannelService.resp)
  clear_has_resp();
  ::chat::ChatChannelService_ChatChannelResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::chat::ChatChannelService_ChatChannelResponse* ChatChannelService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.ChatChannelService.resp)
  clear_has_resp();
  ::chat::ChatChannelService_ChatChannelResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::chat::ChatChannelService_ChatChannelResponse* ChatChannelService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::chat::ChatChannelService_ChatChannelResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat.ChatChannelService.resp)
  return resp_;
}
inline void ChatChannelService::set_allocated_resp(::chat::ChatChannelService_ChatChannelResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:chat.ChatChannelService.resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chat::ChatChannelService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ChatChannelService_CMD>() {
  return ::chat::ChatChannelService_CMD_descriptor();
}
template <> struct is_proto_enum< ::chat::CHAT_MESSAGE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::CHAT_MESSAGE_TYPE>() {
  return ::chat::CHAT_MESSAGE_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Chat_2eproto
