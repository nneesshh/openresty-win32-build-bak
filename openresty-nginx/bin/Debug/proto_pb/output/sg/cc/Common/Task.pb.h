// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#ifndef PROTOBUF_INCLUDED_Task_2eproto
#define PROTOBUF_INCLUDED_Task_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Task_2eproto 

namespace protobuf_Task_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Task_2eproto
namespace sg {
class SystemTask;
class SystemTaskDefaultTypeInternal;
extern SystemTaskDefaultTypeInternal _SystemTask_default_instance_;
class SystemTaskNotify;
class SystemTaskNotifyDefaultTypeInternal;
extern SystemTaskNotifyDefaultTypeInternal _SystemTaskNotify_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskNotify;
class TaskNotifyDefaultTypeInternal;
extern TaskNotifyDefaultTypeInternal _TaskNotify_default_instance_;
class Task_Content;
class Task_ContentDefaultTypeInternal;
extern Task_ContentDefaultTypeInternal _Task_Content_default_instance_;
class UserSystemTaskService;
class UserSystemTaskServiceDefaultTypeInternal;
extern UserSystemTaskServiceDefaultTypeInternal _UserSystemTaskService_default_instance_;
class UserSystemTaskService_UserSystemTaskRequest;
class UserSystemTaskService_UserSystemTaskRequestDefaultTypeInternal;
extern UserSystemTaskService_UserSystemTaskRequestDefaultTypeInternal _UserSystemTaskService_UserSystemTaskRequest_default_instance_;
class UserSystemTaskService_UserSystemTaskResponse;
class UserSystemTaskService_UserSystemTaskResponseDefaultTypeInternal;
extern UserSystemTaskService_UserSystemTaskResponseDefaultTypeInternal _UserSystemTaskService_UserSystemTaskResponse_default_instance_;
class UserTaskService;
class UserTaskServiceDefaultTypeInternal;
extern UserTaskServiceDefaultTypeInternal _UserTaskService_default_instance_;
class UserTaskService_UserTaskRequest;
class UserTaskService_UserTaskRequestDefaultTypeInternal;
extern UserTaskService_UserTaskRequestDefaultTypeInternal _UserTaskService_UserTaskRequest_default_instance_;
class UserTaskService_UserTaskResponse;
class UserTaskService_UserTaskResponseDefaultTypeInternal;
extern UserTaskService_UserTaskResponseDefaultTypeInternal _UserTaskService_UserTaskResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::SystemTask* Arena::CreateMaybeMessage<::sg::SystemTask>(Arena*);
template<> ::sg::SystemTaskNotify* Arena::CreateMaybeMessage<::sg::SystemTaskNotify>(Arena*);
template<> ::sg::Task* Arena::CreateMaybeMessage<::sg::Task>(Arena*);
template<> ::sg::TaskNotify* Arena::CreateMaybeMessage<::sg::TaskNotify>(Arena*);
template<> ::sg::Task_Content* Arena::CreateMaybeMessage<::sg::Task_Content>(Arena*);
template<> ::sg::UserSystemTaskService* Arena::CreateMaybeMessage<::sg::UserSystemTaskService>(Arena*);
template<> ::sg::UserSystemTaskService_UserSystemTaskRequest* Arena::CreateMaybeMessage<::sg::UserSystemTaskService_UserSystemTaskRequest>(Arena*);
template<> ::sg::UserSystemTaskService_UserSystemTaskResponse* Arena::CreateMaybeMessage<::sg::UserSystemTaskService_UserSystemTaskResponse>(Arena*);
template<> ::sg::UserTaskService* Arena::CreateMaybeMessage<::sg::UserTaskService>(Arena*);
template<> ::sg::UserTaskService_UserTaskRequest* Arena::CreateMaybeMessage<::sg::UserTaskService_UserTaskRequest>(Arena*);
template<> ::sg::UserTaskService_UserTaskResponse* Arena::CreateMaybeMessage<::sg::UserTaskService_UserTaskResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum UserTaskService_CMD {
  UserTaskService_CMD_QUERY = 1,
  UserTaskService_CMD_TAKE_THE_TASK = 2,
  UserTaskService_CMD_DO_THE_TASK = 3,
  UserTaskService_CMD_COMPLETE_TASK = 4
};
bool UserTaskService_CMD_IsValid(int value);
const UserTaskService_CMD UserTaskService_CMD_CMD_MIN = UserTaskService_CMD_QUERY;
const UserTaskService_CMD UserTaskService_CMD_CMD_MAX = UserTaskService_CMD_COMPLETE_TASK;
const int UserTaskService_CMD_CMD_ARRAYSIZE = UserTaskService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserTaskService_CMD_descriptor();
inline const ::std::string& UserTaskService_CMD_Name(UserTaskService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserTaskService_CMD_descriptor(), value);
}
inline bool UserTaskService_CMD_Parse(
    const ::std::string& name, UserTaskService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserTaskService_CMD>(
    UserTaskService_CMD_descriptor(), name, value);
}
enum UserSystemTaskService_CMD {
  UserSystemTaskService_CMD_QUERY = 1,
  UserSystemTaskService_CMD_GET_REWARD = 2,
  UserSystemTaskService_CMD_RESET_TASK = 3
};
bool UserSystemTaskService_CMD_IsValid(int value);
const UserSystemTaskService_CMD UserSystemTaskService_CMD_CMD_MIN = UserSystemTaskService_CMD_QUERY;
const UserSystemTaskService_CMD UserSystemTaskService_CMD_CMD_MAX = UserSystemTaskService_CMD_RESET_TASK;
const int UserSystemTaskService_CMD_CMD_ARRAYSIZE = UserSystemTaskService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserSystemTaskService_CMD_descriptor();
inline const ::std::string& UserSystemTaskService_CMD_Name(UserSystemTaskService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserSystemTaskService_CMD_descriptor(), value);
}
inline bool UserSystemTaskService_CMD_Parse(
    const ::std::string& name, UserSystemTaskService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserSystemTaskService_CMD>(
    UserSystemTaskService_CMD_descriptor(), name, value);
}
enum TASK_STATE {
  TASK_STATE_LOCK = 0,
  TASK_STATE_CAN_TAKE = 1,
  TASK_STATE_DOING = 2,
  TASK_STATE_FINISH = 3
};
bool TASK_STATE_IsValid(int value);
const TASK_STATE TASK_STATE_MIN = TASK_STATE_LOCK;
const TASK_STATE TASK_STATE_MAX = TASK_STATE_FINISH;
const int TASK_STATE_ARRAYSIZE = TASK_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TASK_STATE_descriptor();
inline const ::std::string& TASK_STATE_Name(TASK_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TASK_STATE_descriptor(), value);
}
inline bool TASK_STATE_Parse(
    const ::std::string& name, TASK_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TASK_STATE>(
    TASK_STATE_descriptor(), name, value);
}
enum SYSTEM_TASK_STATE {
  SYSTEM_TASK_STATE_VALID = 1,
  SYSTEM_TASK_STATE_FINISH = 2,
  SYSTEM_TASK_STATE_INVALID = 3,
  SYSTEM_TASK_STATE_WAITING = 4
};
bool SYSTEM_TASK_STATE_IsValid(int value);
const SYSTEM_TASK_STATE SYSTEM_TASK_STATE_MIN = SYSTEM_TASK_STATE_VALID;
const SYSTEM_TASK_STATE SYSTEM_TASK_STATE_MAX = SYSTEM_TASK_STATE_WAITING;
const int SYSTEM_TASK_STATE_ARRAYSIZE = SYSTEM_TASK_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SYSTEM_TASK_STATE_descriptor();
inline const ::std::string& SYSTEM_TASK_STATE_Name(SYSTEM_TASK_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SYSTEM_TASK_STATE_descriptor(), value);
}
inline bool SYSTEM_TASK_STATE_Parse(
    const ::std::string& name, SYSTEM_TASK_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SYSTEM_TASK_STATE>(
    SYSTEM_TASK_STATE_descriptor(), name, value);
}
// ===================================================================

class Task_Content : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.Task_Content) */ {
 public:
  Task_Content();
  virtual ~Task_Content();

  Task_Content(const Task_Content& from);

  inline Task_Content& operator=(const Task_Content& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task_Content(Task_Content&& from) noexcept
    : Task_Content() {
    *this = ::std::move(from);
  }

  inline Task_Content& operator=(Task_Content&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task_Content& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task_Content* internal_default_instance() {
    return reinterpret_cast<const Task_Content*>(
               &_Task_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Task_Content* other);
  void Swap(Task_Content* other);
  friend void swap(Task_Content& a, Task_Content& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task_Content* New() const final {
    return CreateMaybeMessage<Task_Content>(NULL);
  }

  Task_Content* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Task_Content>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Task_Content& from);
  void MergeFrom(const Task_Content& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task_Content* other);
  protected:
  explicit Task_Content(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.pb_pair_string_int des = 3;
  int des_size() const;
  void clear_des();
  static const int kDesFieldNumber = 3;
  ::sg::pb_pair_string_int* mutable_des(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_string_int >*
      mutable_des();
  const ::sg::pb_pair_string_int& des(int index) const;
  ::sg::pb_pair_string_int* add_des();
  const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_string_int >&
      des() const;

  // required int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 finish_value = 4;
  bool has_finish_value() const;
  void clear_finish_value();
  static const int kFinishValueFieldNumber = 4;
  ::google::protobuf::int32 finish_value() const;
  void set_finish_value(::google::protobuf::int32 value);

  // required int32 require_value = 5;
  bool has_require_value() const;
  void clear_require_value();
  static const int kRequireValueFieldNumber = 5;
  ::google::protobuf::int32 require_value() const;
  void set_require_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.Task_Content)
 private:
  void set_has_index();
  void clear_has_index();
  void set_has_type();
  void clear_has_type();
  void set_has_finish_value();
  void clear_has_finish_value();
  void set_has_require_value();
  void clear_has_require_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_string_int > des_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 finish_value_;
  ::google::protobuf::int32 require_value_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Task* other);
  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(NULL);
  }

  Task* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  protected:
  explicit Task(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Task_Content content = 4;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  ::sg::Task_Content* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Task_Content >*
      mutable_content();
  const ::sg::Task_Content& content(int index) const;
  ::sg::Task_Content* add_content();
  const ::google::protobuf::RepeatedPtrField< ::sg::Task_Content >&
      content() const;

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required .sg.TASK_STATE state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::sg::TASK_STATE state() const;
  void set_state(::sg::TASK_STATE value);

  // required int32 step = 3;
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 3;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.Task)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_step();
  void clear_has_step();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Task_Content > content_;
  ::google::protobuf::int32 id_;
  int state_;
  ::google::protobuf::int32 step_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.SystemTask) */ {
 public:
  SystemTask();
  virtual ~SystemTask();

  SystemTask(const SystemTask& from);

  inline SystemTask& operator=(const SystemTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemTask(SystemTask&& from) noexcept
    : SystemTask() {
    *this = ::std::move(from);
  }

  inline SystemTask& operator=(SystemTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemTask* internal_default_instance() {
    return reinterpret_cast<const SystemTask*>(
               &_SystemTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(SystemTask* other);
  void Swap(SystemTask* other);
  friend void swap(SystemTask& a, SystemTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemTask* New() const final {
    return CreateMaybeMessage<SystemTask>(NULL);
  }

  SystemTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemTask& from);
  void MergeFrom(const SystemTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemTask* other);
  protected:
  explicit SystemTask(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int64 finish_value = 4;
  bool has_finish_value() const;
  void clear_finish_value();
  static const int kFinishValueFieldNumber = 4;
  ::google::protobuf::int64 finish_value() const;
  void set_finish_value(::google::protobuf::int64 value);

  // required sfixed64 deadline = 5;
  bool has_deadline() const;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 5;
  ::google::protobuf::int64 deadline() const;
  void set_deadline(::google::protobuf::int64 value);

  // required int64 require_value = 6;
  bool has_require_value() const;
  void clear_require_value();
  static const int kRequireValueFieldNumber = 6;
  ::google::protobuf::int64 require_value() const;
  void set_require_value(::google::protobuf::int64 value);

  // optional sfixed64 timestamp = 7;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required .sg.SYSTEM_TASK_STATE state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::sg::SYSTEM_TASK_STATE state() const;
  void set_state(::sg::SYSTEM_TASK_STATE value);

  // @@protoc_insertion_point(class_scope:sg.SystemTask)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_state();
  void clear_has_state();
  void set_has_finish_value();
  void clear_has_finish_value();
  void set_has_deadline();
  void clear_has_deadline();
  void set_has_require_value();
  void clear_has_require_value();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 finish_value_;
  ::google::protobuf::int64 deadline_;
  ::google::protobuf::int64 require_value_;
  ::google::protobuf::int64 timestamp_;
  int state_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserTaskService_UserTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserTaskService.UserTaskRequest) */ {
 public:
  UserTaskService_UserTaskRequest();
  virtual ~UserTaskService_UserTaskRequest();

  UserTaskService_UserTaskRequest(const UserTaskService_UserTaskRequest& from);

  inline UserTaskService_UserTaskRequest& operator=(const UserTaskService_UserTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTaskService_UserTaskRequest(UserTaskService_UserTaskRequest&& from) noexcept
    : UserTaskService_UserTaskRequest() {
    *this = ::std::move(from);
  }

  inline UserTaskService_UserTaskRequest& operator=(UserTaskService_UserTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTaskService_UserTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTaskService_UserTaskRequest* internal_default_instance() {
    return reinterpret_cast<const UserTaskService_UserTaskRequest*>(
               &_UserTaskService_UserTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UserTaskService_UserTaskRequest* other);
  void Swap(UserTaskService_UserTaskRequest* other);
  friend void swap(UserTaskService_UserTaskRequest& a, UserTaskService_UserTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTaskService_UserTaskRequest* New() const final {
    return CreateMaybeMessage<UserTaskService_UserTaskRequest>(NULL);
  }

  UserTaskService_UserTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTaskService_UserTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTaskService_UserTaskRequest& from);
  void MergeFrom(const UserTaskService_UserTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTaskService_UserTaskRequest* other);
  protected:
  explicit UserTaskService_UserTaskRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 task_id = 2;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  ::google::protobuf::int32 task_id() const;
  void set_task_id(::google::protobuf::int32 value);

  // optional int32 content_index = 3;
  bool has_content_index() const;
  void clear_content_index();
  static const int kContentIndexFieldNumber = 3;
  ::google::protobuf::int32 content_index() const;
  void set_content_index(::google::protobuf::int32 value);

  // optional int32 times = 5;
  bool has_times() const;
  void clear_times();
  static const int kTimesFieldNumber = 5;
  ::google::protobuf::int32 times() const;
  void set_times(::google::protobuf::int32 value);

  // required .sg.UserTaskService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserTaskService_CMD cmd() const;
  void set_cmd(::sg::UserTaskService_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserTaskService.UserTaskRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_task_id();
  void clear_has_task_id();
  void set_has_content_index();
  void clear_has_content_index();
  void set_has_times();
  void clear_has_times();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 content_index_;
  ::google::protobuf::int32 times_;
  int cmd_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserTaskService_UserTaskResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserTaskService.UserTaskResponse) */ {
 public:
  UserTaskService_UserTaskResponse();
  virtual ~UserTaskService_UserTaskResponse();

  UserTaskService_UserTaskResponse(const UserTaskService_UserTaskResponse& from);

  inline UserTaskService_UserTaskResponse& operator=(const UserTaskService_UserTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTaskService_UserTaskResponse(UserTaskService_UserTaskResponse&& from) noexcept
    : UserTaskService_UserTaskResponse() {
    *this = ::std::move(from);
  }

  inline UserTaskService_UserTaskResponse& operator=(UserTaskService_UserTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTaskService_UserTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTaskService_UserTaskResponse* internal_default_instance() {
    return reinterpret_cast<const UserTaskService_UserTaskResponse*>(
               &_UserTaskService_UserTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(UserTaskService_UserTaskResponse* other);
  void Swap(UserTaskService_UserTaskResponse* other);
  friend void swap(UserTaskService_UserTaskResponse& a, UserTaskService_UserTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTaskService_UserTaskResponse* New() const final {
    return CreateMaybeMessage<UserTaskService_UserTaskResponse>(NULL);
  }

  UserTaskService_UserTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTaskService_UserTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTaskService_UserTaskResponse& from);
  void MergeFrom(const UserTaskService_UserTaskResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTaskService_UserTaskResponse* other);
  protected:
  explicit UserTaskService_UserTaskResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Task tasks = 2;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 2;
  ::sg::Task* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Task >*
      mutable_tasks();
  const ::sg::Task& tasks(int index) const;
  ::sg::Task* add_tasks();
  const ::google::protobuf::RepeatedPtrField< ::sg::Task >&
      tasks() const;

  // optional .sg.Reward reward = 3;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 3;
  private:
  const ::sg::Reward& _internal_reward() const;
  public:
  const ::sg::Reward& reward() const;
  ::sg::Reward* release_reward();
  ::sg::Reward* mutable_reward();
  void set_allocated_reward(::sg::Reward* reward);
  void unsafe_arena_set_allocated_reward(
      ::sg::Reward* reward);
  ::sg::Reward* unsafe_arena_release_reward();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserTaskService.UserTaskResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_reward();
  void clear_has_reward();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Task > tasks_;
  ::sg::Reward* reward_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserTaskService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserTaskService) */ {
 public:
  UserTaskService();
  virtual ~UserTaskService();

  UserTaskService(const UserTaskService& from);

  inline UserTaskService& operator=(const UserTaskService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTaskService(UserTaskService&& from) noexcept
    : UserTaskService() {
    *this = ::std::move(from);
  }

  inline UserTaskService& operator=(UserTaskService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTaskService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTaskService* internal_default_instance() {
    return reinterpret_cast<const UserTaskService*>(
               &_UserTaskService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(UserTaskService* other);
  void Swap(UserTaskService* other);
  friend void swap(UserTaskService& a, UserTaskService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTaskService* New() const final {
    return CreateMaybeMessage<UserTaskService>(NULL);
  }

  UserTaskService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTaskService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTaskService& from);
  void MergeFrom(const UserTaskService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTaskService* other);
  protected:
  explicit UserTaskService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserTaskService_UserTaskRequest UserTaskRequest;
  typedef UserTaskService_UserTaskResponse UserTaskResponse;

  typedef UserTaskService_CMD CMD;
  static const CMD QUERY =
    UserTaskService_CMD_QUERY;
  static const CMD TAKE_THE_TASK =
    UserTaskService_CMD_TAKE_THE_TASK;
  static const CMD DO_THE_TASK =
    UserTaskService_CMD_DO_THE_TASK;
  static const CMD COMPLETE_TASK =
    UserTaskService_CMD_COMPLETE_TASK;
  static inline bool CMD_IsValid(int value) {
    return UserTaskService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    UserTaskService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    UserTaskService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    UserTaskService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return UserTaskService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return UserTaskService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return UserTaskService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserTaskService.UserTaskRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserTaskService_UserTaskRequest& _internal_req() const;
  public:
  const ::sg::UserTaskService_UserTaskRequest& req() const;
  ::sg::UserTaskService_UserTaskRequest* release_req();
  ::sg::UserTaskService_UserTaskRequest* mutable_req();
  void set_allocated_req(::sg::UserTaskService_UserTaskRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserTaskService_UserTaskRequest* req);
  ::sg::UserTaskService_UserTaskRequest* unsafe_arena_release_req();

  // optional .sg.UserTaskService.UserTaskResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserTaskService_UserTaskResponse& _internal_resp() const;
  public:
  const ::sg::UserTaskService_UserTaskResponse& resp() const;
  ::sg::UserTaskService_UserTaskResponse* release_resp();
  ::sg::UserTaskService_UserTaskResponse* mutable_resp();
  void set_allocated_resp(::sg::UserTaskService_UserTaskResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserTaskService_UserTaskResponse* resp);
  ::sg::UserTaskService_UserTaskResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserTaskService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserTaskService_UserTaskRequest* req_;
  ::sg::UserTaskService_UserTaskResponse* resp_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSystemTaskService_UserSystemTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserSystemTaskService.UserSystemTaskRequest) */ {
 public:
  UserSystemTaskService_UserSystemTaskRequest();
  virtual ~UserSystemTaskService_UserSystemTaskRequest();

  UserSystemTaskService_UserSystemTaskRequest(const UserSystemTaskService_UserSystemTaskRequest& from);

  inline UserSystemTaskService_UserSystemTaskRequest& operator=(const UserSystemTaskService_UserSystemTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSystemTaskService_UserSystemTaskRequest(UserSystemTaskService_UserSystemTaskRequest&& from) noexcept
    : UserSystemTaskService_UserSystemTaskRequest() {
    *this = ::std::move(from);
  }

  inline UserSystemTaskService_UserSystemTaskRequest& operator=(UserSystemTaskService_UserSystemTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSystemTaskService_UserSystemTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSystemTaskService_UserSystemTaskRequest* internal_default_instance() {
    return reinterpret_cast<const UserSystemTaskService_UserSystemTaskRequest*>(
               &_UserSystemTaskService_UserSystemTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(UserSystemTaskService_UserSystemTaskRequest* other);
  void Swap(UserSystemTaskService_UserSystemTaskRequest* other);
  friend void swap(UserSystemTaskService_UserSystemTaskRequest& a, UserSystemTaskService_UserSystemTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSystemTaskService_UserSystemTaskRequest* New() const final {
    return CreateMaybeMessage<UserSystemTaskService_UserSystemTaskRequest>(NULL);
  }

  UserSystemTaskService_UserSystemTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSystemTaskService_UserSystemTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSystemTaskService_UserSystemTaskRequest& from);
  void MergeFrom(const UserSystemTaskService_UserSystemTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSystemTaskService_UserSystemTaskRequest* other);
  protected:
  explicit UserSystemTaskService_UserSystemTaskRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 task_id = 2;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  ::google::protobuf::int32 task_id() const;
  void set_task_id(::google::protobuf::int32 value);

  // optional int32 query_type = 3;
  bool has_query_type() const;
  void clear_query_type();
  static const int kQueryTypeFieldNumber = 3;
  ::google::protobuf::int32 query_type() const;
  void set_query_type(::google::protobuf::int32 value);

  // required .sg.UserSystemTaskService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserSystemTaskService_CMD cmd() const;
  void set_cmd(::sg::UserSystemTaskService_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserSystemTaskService.UserSystemTaskRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_task_id();
  void clear_has_task_id();
  void set_has_query_type();
  void clear_has_query_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 query_type_;
  int cmd_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSystemTaskService_UserSystemTaskResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserSystemTaskService.UserSystemTaskResponse) */ {
 public:
  UserSystemTaskService_UserSystemTaskResponse();
  virtual ~UserSystemTaskService_UserSystemTaskResponse();

  UserSystemTaskService_UserSystemTaskResponse(const UserSystemTaskService_UserSystemTaskResponse& from);

  inline UserSystemTaskService_UserSystemTaskResponse& operator=(const UserSystemTaskService_UserSystemTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSystemTaskService_UserSystemTaskResponse(UserSystemTaskService_UserSystemTaskResponse&& from) noexcept
    : UserSystemTaskService_UserSystemTaskResponse() {
    *this = ::std::move(from);
  }

  inline UserSystemTaskService_UserSystemTaskResponse& operator=(UserSystemTaskService_UserSystemTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSystemTaskService_UserSystemTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSystemTaskService_UserSystemTaskResponse* internal_default_instance() {
    return reinterpret_cast<const UserSystemTaskService_UserSystemTaskResponse*>(
               &_UserSystemTaskService_UserSystemTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(UserSystemTaskService_UserSystemTaskResponse* other);
  void Swap(UserSystemTaskService_UserSystemTaskResponse* other);
  friend void swap(UserSystemTaskService_UserSystemTaskResponse& a, UserSystemTaskService_UserSystemTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSystemTaskService_UserSystemTaskResponse* New() const final {
    return CreateMaybeMessage<UserSystemTaskService_UserSystemTaskResponse>(NULL);
  }

  UserSystemTaskService_UserSystemTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSystemTaskService_UserSystemTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSystemTaskService_UserSystemTaskResponse& from);
  void MergeFrom(const UserSystemTaskService_UserSystemTaskResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSystemTaskService_UserSystemTaskResponse* other);
  protected:
  explicit UserSystemTaskService_UserSystemTaskResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.SystemTask tasks = 2;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 2;
  ::sg::SystemTask* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::SystemTask >*
      mutable_tasks();
  const ::sg::SystemTask& tasks(int index) const;
  ::sg::SystemTask* add_tasks();
  const ::google::protobuf::RepeatedPtrField< ::sg::SystemTask >&
      tasks() const;

  // optional .sg.Reward reward = 3;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 3;
  private:
  const ::sg::Reward& _internal_reward() const;
  public:
  const ::sg::Reward& reward() const;
  ::sg::Reward* release_reward();
  ::sg::Reward* mutable_reward();
  void set_allocated_reward(::sg::Reward* reward);
  void unsafe_arena_set_allocated_reward(
      ::sg::Reward* reward);
  ::sg::Reward* unsafe_arena_release_reward();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserSystemTaskService.UserSystemTaskResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_reward();
  void clear_has_reward();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::SystemTask > tasks_;
  ::sg::Reward* reward_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSystemTaskService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserSystemTaskService) */ {
 public:
  UserSystemTaskService();
  virtual ~UserSystemTaskService();

  UserSystemTaskService(const UserSystemTaskService& from);

  inline UserSystemTaskService& operator=(const UserSystemTaskService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSystemTaskService(UserSystemTaskService&& from) noexcept
    : UserSystemTaskService() {
    *this = ::std::move(from);
  }

  inline UserSystemTaskService& operator=(UserSystemTaskService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSystemTaskService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSystemTaskService* internal_default_instance() {
    return reinterpret_cast<const UserSystemTaskService*>(
               &_UserSystemTaskService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(UserSystemTaskService* other);
  void Swap(UserSystemTaskService* other);
  friend void swap(UserSystemTaskService& a, UserSystemTaskService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSystemTaskService* New() const final {
    return CreateMaybeMessage<UserSystemTaskService>(NULL);
  }

  UserSystemTaskService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSystemTaskService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSystemTaskService& from);
  void MergeFrom(const UserSystemTaskService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSystemTaskService* other);
  protected:
  explicit UserSystemTaskService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserSystemTaskService_UserSystemTaskRequest UserSystemTaskRequest;
  typedef UserSystemTaskService_UserSystemTaskResponse UserSystemTaskResponse;

  typedef UserSystemTaskService_CMD CMD;
  static const CMD QUERY =
    UserSystemTaskService_CMD_QUERY;
  static const CMD GET_REWARD =
    UserSystemTaskService_CMD_GET_REWARD;
  static const CMD RESET_TASK =
    UserSystemTaskService_CMD_RESET_TASK;
  static inline bool CMD_IsValid(int value) {
    return UserSystemTaskService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    UserSystemTaskService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    UserSystemTaskService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    UserSystemTaskService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return UserSystemTaskService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return UserSystemTaskService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return UserSystemTaskService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserSystemTaskService.UserSystemTaskRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserSystemTaskService_UserSystemTaskRequest& _internal_req() const;
  public:
  const ::sg::UserSystemTaskService_UserSystemTaskRequest& req() const;
  ::sg::UserSystemTaskService_UserSystemTaskRequest* release_req();
  ::sg::UserSystemTaskService_UserSystemTaskRequest* mutable_req();
  void set_allocated_req(::sg::UserSystemTaskService_UserSystemTaskRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserSystemTaskService_UserSystemTaskRequest* req);
  ::sg::UserSystemTaskService_UserSystemTaskRequest* unsafe_arena_release_req();

  // optional .sg.UserSystemTaskService.UserSystemTaskResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserSystemTaskService_UserSystemTaskResponse& _internal_resp() const;
  public:
  const ::sg::UserSystemTaskService_UserSystemTaskResponse& resp() const;
  ::sg::UserSystemTaskService_UserSystemTaskResponse* release_resp();
  ::sg::UserSystemTaskService_UserSystemTaskResponse* mutable_resp();
  void set_allocated_resp(::sg::UserSystemTaskService_UserSystemTaskResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserSystemTaskService_UserSystemTaskResponse* resp);
  ::sg::UserSystemTaskService_UserSystemTaskResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserSystemTaskService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserSystemTaskService_UserSystemTaskRequest* req_;
  ::sg::UserSystemTaskService_UserSystemTaskResponse* resp_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.TaskNotify) */ {
 public:
  TaskNotify();
  virtual ~TaskNotify();

  TaskNotify(const TaskNotify& from);

  inline TaskNotify& operator=(const TaskNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskNotify(TaskNotify&& from) noexcept
    : TaskNotify() {
    *this = ::std::move(from);
  }

  inline TaskNotify& operator=(TaskNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskNotify* internal_default_instance() {
    return reinterpret_cast<const TaskNotify*>(
               &_TaskNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(TaskNotify* other);
  void Swap(TaskNotify* other);
  friend void swap(TaskNotify& a, TaskNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskNotify* New() const final {
    return CreateMaybeMessage<TaskNotify>(NULL);
  }

  TaskNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskNotify& from);
  void MergeFrom(const TaskNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskNotify* other);
  protected:
  explicit TaskNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.Task task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  private:
  const ::sg::Task& _internal_task() const;
  public:
  const ::sg::Task& task() const;
  ::sg::Task* release_task();
  ::sg::Task* mutable_task();
  void set_allocated_task(::sg::Task* task);
  void unsafe_arena_set_allocated_task(
      ::sg::Task* task);
  ::sg::Task* unsafe_arena_release_task();

  // @@protoc_insertion_point(class_scope:sg.TaskNotify)
 private:
  void set_has_task();
  void clear_has_task();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::Task* task_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemTaskNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.SystemTaskNotify) */ {
 public:
  SystemTaskNotify();
  virtual ~SystemTaskNotify();

  SystemTaskNotify(const SystemTaskNotify& from);

  inline SystemTaskNotify& operator=(const SystemTaskNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemTaskNotify(SystemTaskNotify&& from) noexcept
    : SystemTaskNotify() {
    *this = ::std::move(from);
  }

  inline SystemTaskNotify& operator=(SystemTaskNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemTaskNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemTaskNotify* internal_default_instance() {
    return reinterpret_cast<const SystemTaskNotify*>(
               &_SystemTaskNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(SystemTaskNotify* other);
  void Swap(SystemTaskNotify* other);
  friend void swap(SystemTaskNotify& a, SystemTaskNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemTaskNotify* New() const final {
    return CreateMaybeMessage<SystemTaskNotify>(NULL);
  }

  SystemTaskNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemTaskNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemTaskNotify& from);
  void MergeFrom(const SystemTaskNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemTaskNotify* other);
  protected:
  explicit SystemTaskNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.SystemTask task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  private:
  const ::sg::SystemTask& _internal_task() const;
  public:
  const ::sg::SystemTask& task() const;
  ::sg::SystemTask* release_task();
  ::sg::SystemTask* mutable_task();
  void set_allocated_task(::sg::SystemTask* task);
  void unsafe_arena_set_allocated_task(
      ::sg::SystemTask* task);
  ::sg::SystemTask* unsafe_arena_release_task();

  // @@protoc_insertion_point(class_scope:sg.SystemTaskNotify)
 private:
  void set_has_task();
  void clear_has_task();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::SystemTask* task_;
  friend struct ::protobuf_Task_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task_Content

// required int32 index = 1;
inline bool Task_Content::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task_Content::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task_Content::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task_Content::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Task_Content::index() const {
  // @@protoc_insertion_point(field_get:sg.Task_Content.index)
  return index_;
}
inline void Task_Content::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:sg.Task_Content.index)
}

// required int32 type = 2;
inline bool Task_Content::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task_Content::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task_Content::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task_Content::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Task_Content::type() const {
  // @@protoc_insertion_point(field_get:sg.Task_Content.type)
  return type_;
}
inline void Task_Content::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sg.Task_Content.type)
}

// repeated .sg.pb_pair_string_int des = 3;
inline int Task_Content::des_size() const {
  return des_.size();
}
inline ::sg::pb_pair_string_int* Task_Content::mutable_des(int index) {
  // @@protoc_insertion_point(field_mutable:sg.Task_Content.des)
  return des_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_string_int >*
Task_Content::mutable_des() {
  // @@protoc_insertion_point(field_mutable_list:sg.Task_Content.des)
  return &des_;
}
inline const ::sg::pb_pair_string_int& Task_Content::des(int index) const {
  // @@protoc_insertion_point(field_get:sg.Task_Content.des)
  return des_.Get(index);
}
inline ::sg::pb_pair_string_int* Task_Content::add_des() {
  // @@protoc_insertion_point(field_add:sg.Task_Content.des)
  return des_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_string_int >&
Task_Content::des() const {
  // @@protoc_insertion_point(field_list:sg.Task_Content.des)
  return des_;
}

// required int32 finish_value = 4;
inline bool Task_Content::has_finish_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task_Content::set_has_finish_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task_Content::clear_has_finish_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task_Content::clear_finish_value() {
  finish_value_ = 0;
  clear_has_finish_value();
}
inline ::google::protobuf::int32 Task_Content::finish_value() const {
  // @@protoc_insertion_point(field_get:sg.Task_Content.finish_value)
  return finish_value_;
}
inline void Task_Content::set_finish_value(::google::protobuf::int32 value) {
  set_has_finish_value();
  finish_value_ = value;
  // @@protoc_insertion_point(field_set:sg.Task_Content.finish_value)
}

// required int32 require_value = 5;
inline bool Task_Content::has_require_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task_Content::set_has_require_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task_Content::clear_has_require_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task_Content::clear_require_value() {
  require_value_ = 0;
  clear_has_require_value();
}
inline ::google::protobuf::int32 Task_Content::require_value() const {
  // @@protoc_insertion_point(field_get:sg.Task_Content.require_value)
  return require_value_;
}
inline void Task_Content::set_require_value(::google::protobuf::int32 value) {
  set_has_require_value();
  require_value_ = value;
  // @@protoc_insertion_point(field_set:sg.Task_Content.require_value)
}

// -------------------------------------------------------------------

// Task

// required int32 id = 1;
inline bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Task::id() const {
  // @@protoc_insertion_point(field_get:sg.Task.id)
  return id_;
}
inline void Task::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.Task.id)
}

// required .sg.TASK_STATE state = 2;
inline bool Task::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::sg::TASK_STATE Task::state() const {
  // @@protoc_insertion_point(field_get:sg.Task.state)
  return static_cast< ::sg::TASK_STATE >(state_);
}
inline void Task::set_state(::sg::TASK_STATE value) {
  assert(::sg::TASK_STATE_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.Task.state)
}

// required int32 step = 3;
inline bool Task::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 Task::step() const {
  // @@protoc_insertion_point(field_get:sg.Task.step)
  return step_;
}
inline void Task::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:sg.Task.step)
}

// repeated .sg.Task_Content content = 4;
inline int Task::content_size() const {
  return content_.size();
}
inline void Task::clear_content() {
  content_.Clear();
}
inline ::sg::Task_Content* Task::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:sg.Task.content)
  return content_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Task_Content >*
Task::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:sg.Task.content)
  return &content_;
}
inline const ::sg::Task_Content& Task::content(int index) const {
  // @@protoc_insertion_point(field_get:sg.Task.content)
  return content_.Get(index);
}
inline ::sg::Task_Content* Task::add_content() {
  // @@protoc_insertion_point(field_add:sg.Task.content)
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Task_Content >&
Task::content() const {
  // @@protoc_insertion_point(field_list:sg.Task.content)
  return content_;
}

// -------------------------------------------------------------------

// SystemTask

// required int32 id = 1;
inline bool SystemTask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemTask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemTask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SystemTask::id() const {
  // @@protoc_insertion_point(field_get:sg.SystemTask.id)
  return id_;
}
inline void SystemTask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.SystemTask.id)
}

// required int32 type = 2;
inline bool SystemTask::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemTask::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemTask::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemTask::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SystemTask::type() const {
  // @@protoc_insertion_point(field_get:sg.SystemTask.type)
  return type_;
}
inline void SystemTask::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sg.SystemTask.type)
}

// required .sg.SYSTEM_TASK_STATE state = 3;
inline bool SystemTask::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemTask::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SystemTask::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SystemTask::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::sg::SYSTEM_TASK_STATE SystemTask::state() const {
  // @@protoc_insertion_point(field_get:sg.SystemTask.state)
  return static_cast< ::sg::SYSTEM_TASK_STATE >(state_);
}
inline void SystemTask::set_state(::sg::SYSTEM_TASK_STATE value) {
  assert(::sg::SYSTEM_TASK_STATE_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.SystemTask.state)
}

// required int64 finish_value = 4;
inline bool SystemTask::has_finish_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemTask::set_has_finish_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemTask::clear_has_finish_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemTask::clear_finish_value() {
  finish_value_ = GOOGLE_LONGLONG(0);
  clear_has_finish_value();
}
inline ::google::protobuf::int64 SystemTask::finish_value() const {
  // @@protoc_insertion_point(field_get:sg.SystemTask.finish_value)
  return finish_value_;
}
inline void SystemTask::set_finish_value(::google::protobuf::int64 value) {
  set_has_finish_value();
  finish_value_ = value;
  // @@protoc_insertion_point(field_set:sg.SystemTask.finish_value)
}

// required sfixed64 deadline = 5;
inline bool SystemTask::has_deadline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemTask::set_has_deadline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemTask::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemTask::clear_deadline() {
  deadline_ = GOOGLE_LONGLONG(0);
  clear_has_deadline();
}
inline ::google::protobuf::int64 SystemTask::deadline() const {
  // @@protoc_insertion_point(field_get:sg.SystemTask.deadline)
  return deadline_;
}
inline void SystemTask::set_deadline(::google::protobuf::int64 value) {
  set_has_deadline();
  deadline_ = value;
  // @@protoc_insertion_point(field_set:sg.SystemTask.deadline)
}

// required int64 require_value = 6;
inline bool SystemTask::has_require_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemTask::set_has_require_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemTask::clear_has_require_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemTask::clear_require_value() {
  require_value_ = GOOGLE_LONGLONG(0);
  clear_has_require_value();
}
inline ::google::protobuf::int64 SystemTask::require_value() const {
  // @@protoc_insertion_point(field_get:sg.SystemTask.require_value)
  return require_value_;
}
inline void SystemTask::set_require_value(::google::protobuf::int64 value) {
  set_has_require_value();
  require_value_ = value;
  // @@protoc_insertion_point(field_set:sg.SystemTask.require_value)
}

// optional sfixed64 timestamp = 7;
inline bool SystemTask::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemTask::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SystemTask::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SystemTask::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 SystemTask::timestamp() const {
  // @@protoc_insertion_point(field_get:sg.SystemTask.timestamp)
  return timestamp_;
}
inline void SystemTask::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.SystemTask.timestamp)
}

// -------------------------------------------------------------------

// UserTaskService_UserTaskRequest

// required .sg.UserTaskService.CMD cmd = 1;
inline bool UserTaskService_UserTaskRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserTaskService_UserTaskRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserTaskService_UserTaskRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserTaskService_UserTaskRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserTaskService_CMD UserTaskService_UserTaskRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserTaskService.UserTaskRequest.cmd)
  return static_cast< ::sg::UserTaskService_CMD >(cmd_);
}
inline void UserTaskService_UserTaskRequest::set_cmd(::sg::UserTaskService_CMD value) {
  assert(::sg::UserTaskService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTaskService.UserTaskRequest.cmd)
}

// optional int32 task_id = 2;
inline bool UserTaskService_UserTaskRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTaskService_UserTaskRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserTaskService_UserTaskRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserTaskService_UserTaskRequest::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 UserTaskService_UserTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:sg.UserTaskService.UserTaskRequest.task_id)
  return task_id_;
}
inline void UserTaskService_UserTaskRequest::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTaskService.UserTaskRequest.task_id)
}

// optional int32 content_index = 3;
inline bool UserTaskService_UserTaskRequest::has_content_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTaskService_UserTaskRequest::set_has_content_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserTaskService_UserTaskRequest::clear_has_content_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserTaskService_UserTaskRequest::clear_content_index() {
  content_index_ = 0;
  clear_has_content_index();
}
inline ::google::protobuf::int32 UserTaskService_UserTaskRequest::content_index() const {
  // @@protoc_insertion_point(field_get:sg.UserTaskService.UserTaskRequest.content_index)
  return content_index_;
}
inline void UserTaskService_UserTaskRequest::set_content_index(::google::protobuf::int32 value) {
  set_has_content_index();
  content_index_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTaskService.UserTaskRequest.content_index)
}

// optional int32 times = 5;
inline bool UserTaskService_UserTaskRequest::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserTaskService_UserTaskRequest::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserTaskService_UserTaskRequest::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserTaskService_UserTaskRequest::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 UserTaskService_UserTaskRequest::times() const {
  // @@protoc_insertion_point(field_get:sg.UserTaskService.UserTaskRequest.times)
  return times_;
}
inline void UserTaskService_UserTaskRequest::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTaskService.UserTaskRequest.times)
}

// -------------------------------------------------------------------

// UserTaskService_UserTaskResponse

// required int32 result = 1;
inline bool UserTaskService_UserTaskResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTaskService_UserTaskResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserTaskService_UserTaskResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserTaskService_UserTaskResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserTaskService_UserTaskResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserTaskService.UserTaskResponse.result)
  return result_;
}
inline void UserTaskService_UserTaskResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTaskService.UserTaskResponse.result)
}

// repeated .sg.Task tasks = 2;
inline int UserTaskService_UserTaskResponse::tasks_size() const {
  return tasks_.size();
}
inline void UserTaskService_UserTaskResponse::clear_tasks() {
  tasks_.Clear();
}
inline ::sg::Task* UserTaskService_UserTaskResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserTaskService.UserTaskResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Task >*
UserTaskService_UserTaskResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserTaskService.UserTaskResponse.tasks)
  return &tasks_;
}
inline const ::sg::Task& UserTaskService_UserTaskResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserTaskService.UserTaskResponse.tasks)
  return tasks_.Get(index);
}
inline ::sg::Task* UserTaskService_UserTaskResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:sg.UserTaskService.UserTaskResponse.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Task >&
UserTaskService_UserTaskResponse::tasks() const {
  // @@protoc_insertion_point(field_list:sg.UserTaskService.UserTaskResponse.tasks)
  return tasks_;
}

// optional .sg.Reward reward = 3;
inline bool UserTaskService_UserTaskResponse::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTaskService_UserTaskResponse::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserTaskService_UserTaskResponse::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Reward& UserTaskService_UserTaskResponse::_internal_reward() const {
  return *reward_;
}
inline const ::sg::Reward& UserTaskService_UserTaskResponse::reward() const {
  const ::sg::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:sg.UserTaskService.UserTaskResponse.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* UserTaskService_UserTaskResponse::release_reward() {
  // @@protoc_insertion_point(field_release:sg.UserTaskService.UserTaskResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserTaskService_UserTaskResponse::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserTaskService.UserTaskResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserTaskService_UserTaskResponse::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserTaskService.UserTaskResponse.reward)
  return reward_;
}
inline void UserTaskService_UserTaskResponse::set_allocated_reward(::sg::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reward_);
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reward)->GetArena();
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:sg.UserTaskService.UserTaskResponse.reward)
}

// -------------------------------------------------------------------

// UserTaskService

// optional .sg.UserTaskService.UserTaskRequest req = 1;
inline bool UserTaskService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTaskService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserTaskService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserTaskService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserTaskService_UserTaskRequest& UserTaskService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserTaskService_UserTaskRequest& UserTaskService::req() const {
  const ::sg::UserTaskService_UserTaskRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserTaskService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserTaskService_UserTaskRequest*>(
      &::sg::_UserTaskService_UserTaskRequest_default_instance_);
}
inline ::sg::UserTaskService_UserTaskRequest* UserTaskService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserTaskService.req)
  clear_has_req();
  ::sg::UserTaskService_UserTaskRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserTaskService_UserTaskRequest* UserTaskService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserTaskService.req)
  clear_has_req();
  ::sg::UserTaskService_UserTaskRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserTaskService_UserTaskRequest* UserTaskService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserTaskService_UserTaskRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserTaskService.req)
  return req_;
}
inline void UserTaskService::set_allocated_req(::sg::UserTaskService_UserTaskRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserTaskService.req)
}

// optional .sg.UserTaskService.UserTaskResponse resp = 2;
inline bool UserTaskService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTaskService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserTaskService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserTaskService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserTaskService_UserTaskResponse& UserTaskService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserTaskService_UserTaskResponse& UserTaskService::resp() const {
  const ::sg::UserTaskService_UserTaskResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserTaskService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserTaskService_UserTaskResponse*>(
      &::sg::_UserTaskService_UserTaskResponse_default_instance_);
}
inline ::sg::UserTaskService_UserTaskResponse* UserTaskService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserTaskService.resp)
  clear_has_resp();
  ::sg::UserTaskService_UserTaskResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserTaskService_UserTaskResponse* UserTaskService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserTaskService.resp)
  clear_has_resp();
  ::sg::UserTaskService_UserTaskResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserTaskService_UserTaskResponse* UserTaskService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserTaskService_UserTaskResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserTaskService.resp)
  return resp_;
}
inline void UserTaskService::set_allocated_resp(::sg::UserTaskService_UserTaskResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserTaskService.resp)
}

// -------------------------------------------------------------------

// UserSystemTaskService_UserSystemTaskRequest

// required .sg.UserSystemTaskService.CMD cmd = 1;
inline bool UserSystemTaskService_UserSystemTaskRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSystemTaskService_UserSystemTaskRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSystemTaskService_UserSystemTaskRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSystemTaskService_UserSystemTaskRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserSystemTaskService_CMD UserSystemTaskService_UserSystemTaskRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserSystemTaskService.UserSystemTaskRequest.cmd)
  return static_cast< ::sg::UserSystemTaskService_CMD >(cmd_);
}
inline void UserSystemTaskService_UserSystemTaskRequest::set_cmd(::sg::UserSystemTaskService_CMD value) {
  assert(::sg::UserSystemTaskService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserSystemTaskService.UserSystemTaskRequest.cmd)
}

// optional int32 task_id = 2;
inline bool UserSystemTaskService_UserSystemTaskRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSystemTaskService_UserSystemTaskRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSystemTaskService_UserSystemTaskRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSystemTaskService_UserSystemTaskRequest::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 UserSystemTaskService_UserSystemTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:sg.UserSystemTaskService.UserSystemTaskRequest.task_id)
  return task_id_;
}
inline void UserSystemTaskService_UserSystemTaskRequest::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
  // @@protoc_insertion_point(field_set:sg.UserSystemTaskService.UserSystemTaskRequest.task_id)
}

// optional int32 query_type = 3;
inline bool UserSystemTaskService_UserSystemTaskRequest::has_query_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSystemTaskService_UserSystemTaskRequest::set_has_query_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSystemTaskService_UserSystemTaskRequest::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSystemTaskService_UserSystemTaskRequest::clear_query_type() {
  query_type_ = 0;
  clear_has_query_type();
}
inline ::google::protobuf::int32 UserSystemTaskService_UserSystemTaskRequest::query_type() const {
  // @@protoc_insertion_point(field_get:sg.UserSystemTaskService.UserSystemTaskRequest.query_type)
  return query_type_;
}
inline void UserSystemTaskService_UserSystemTaskRequest::set_query_type(::google::protobuf::int32 value) {
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:sg.UserSystemTaskService.UserSystemTaskRequest.query_type)
}

// -------------------------------------------------------------------

// UserSystemTaskService_UserSystemTaskResponse

// required int32 result = 1;
inline bool UserSystemTaskService_UserSystemTaskResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSystemTaskService_UserSystemTaskResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSystemTaskService_UserSystemTaskResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSystemTaskService_UserSystemTaskResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserSystemTaskService_UserSystemTaskResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserSystemTaskService.UserSystemTaskResponse.result)
  return result_;
}
inline void UserSystemTaskService_UserSystemTaskResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserSystemTaskService.UserSystemTaskResponse.result)
}

// repeated .sg.SystemTask tasks = 2;
inline int UserSystemTaskService_UserSystemTaskResponse::tasks_size() const {
  return tasks_.size();
}
inline void UserSystemTaskService_UserSystemTaskResponse::clear_tasks() {
  tasks_.Clear();
}
inline ::sg::SystemTask* UserSystemTaskService_UserSystemTaskResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserSystemTaskService.UserSystemTaskResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::SystemTask >*
UserSystemTaskService_UserSystemTaskResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserSystemTaskService.UserSystemTaskResponse.tasks)
  return &tasks_;
}
inline const ::sg::SystemTask& UserSystemTaskService_UserSystemTaskResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserSystemTaskService.UserSystemTaskResponse.tasks)
  return tasks_.Get(index);
}
inline ::sg::SystemTask* UserSystemTaskService_UserSystemTaskResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:sg.UserSystemTaskService.UserSystemTaskResponse.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::SystemTask >&
UserSystemTaskService_UserSystemTaskResponse::tasks() const {
  // @@protoc_insertion_point(field_list:sg.UserSystemTaskService.UserSystemTaskResponse.tasks)
  return tasks_;
}

// optional .sg.Reward reward = 3;
inline bool UserSystemTaskService_UserSystemTaskResponse::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSystemTaskService_UserSystemTaskResponse::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSystemTaskService_UserSystemTaskResponse::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Reward& UserSystemTaskService_UserSystemTaskResponse::_internal_reward() const {
  return *reward_;
}
inline const ::sg::Reward& UserSystemTaskService_UserSystemTaskResponse::reward() const {
  const ::sg::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:sg.UserSystemTaskService.UserSystemTaskResponse.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* UserSystemTaskService_UserSystemTaskResponse::release_reward() {
  // @@protoc_insertion_point(field_release:sg.UserSystemTaskService.UserSystemTaskResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserSystemTaskService_UserSystemTaskResponse::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserSystemTaskService.UserSystemTaskResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserSystemTaskService_UserSystemTaskResponse::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserSystemTaskService.UserSystemTaskResponse.reward)
  return reward_;
}
inline void UserSystemTaskService_UserSystemTaskResponse::set_allocated_reward(::sg::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reward_);
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reward)->GetArena();
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:sg.UserSystemTaskService.UserSystemTaskResponse.reward)
}

// -------------------------------------------------------------------

// UserSystemTaskService

// optional .sg.UserSystemTaskService.UserSystemTaskRequest req = 1;
inline bool UserSystemTaskService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSystemTaskService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSystemTaskService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSystemTaskService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserSystemTaskService_UserSystemTaskRequest& UserSystemTaskService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserSystemTaskService_UserSystemTaskRequest& UserSystemTaskService::req() const {
  const ::sg::UserSystemTaskService_UserSystemTaskRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserSystemTaskService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserSystemTaskService_UserSystemTaskRequest*>(
      &::sg::_UserSystemTaskService_UserSystemTaskRequest_default_instance_);
}
inline ::sg::UserSystemTaskService_UserSystemTaskRequest* UserSystemTaskService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserSystemTaskService.req)
  clear_has_req();
  ::sg::UserSystemTaskService_UserSystemTaskRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserSystemTaskService_UserSystemTaskRequest* UserSystemTaskService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserSystemTaskService.req)
  clear_has_req();
  ::sg::UserSystemTaskService_UserSystemTaskRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserSystemTaskService_UserSystemTaskRequest* UserSystemTaskService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserSystemTaskService_UserSystemTaskRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserSystemTaskService.req)
  return req_;
}
inline void UserSystemTaskService::set_allocated_req(::sg::UserSystemTaskService_UserSystemTaskRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserSystemTaskService.req)
}

// optional .sg.UserSystemTaskService.UserSystemTaskResponse resp = 2;
inline bool UserSystemTaskService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSystemTaskService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSystemTaskService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSystemTaskService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserSystemTaskService_UserSystemTaskResponse& UserSystemTaskService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserSystemTaskService_UserSystemTaskResponse& UserSystemTaskService::resp() const {
  const ::sg::UserSystemTaskService_UserSystemTaskResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserSystemTaskService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserSystemTaskService_UserSystemTaskResponse*>(
      &::sg::_UserSystemTaskService_UserSystemTaskResponse_default_instance_);
}
inline ::sg::UserSystemTaskService_UserSystemTaskResponse* UserSystemTaskService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserSystemTaskService.resp)
  clear_has_resp();
  ::sg::UserSystemTaskService_UserSystemTaskResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserSystemTaskService_UserSystemTaskResponse* UserSystemTaskService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserSystemTaskService.resp)
  clear_has_resp();
  ::sg::UserSystemTaskService_UserSystemTaskResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserSystemTaskService_UserSystemTaskResponse* UserSystemTaskService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserSystemTaskService_UserSystemTaskResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserSystemTaskService.resp)
  return resp_;
}
inline void UserSystemTaskService::set_allocated_resp(::sg::UserSystemTaskService_UserSystemTaskResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserSystemTaskService.resp)
}

// -------------------------------------------------------------------

// TaskNotify

// required .sg.Task task = 1;
inline bool TaskNotify::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskNotify::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskNotify::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskNotify::clear_task() {
  if (task_ != NULL) task_->Clear();
  clear_has_task();
}
inline const ::sg::Task& TaskNotify::_internal_task() const {
  return *task_;
}
inline const ::sg::Task& TaskNotify::task() const {
  const ::sg::Task* p = task_;
  // @@protoc_insertion_point(field_get:sg.TaskNotify.task)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Task*>(
      &::sg::_Task_default_instance_);
}
inline ::sg::Task* TaskNotify::release_task() {
  // @@protoc_insertion_point(field_release:sg.TaskNotify.task)
  clear_has_task();
  ::sg::Task* temp = task_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  task_ = NULL;
  return temp;
}
inline ::sg::Task* TaskNotify::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.TaskNotify.task)
  clear_has_task();
  ::sg::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline ::sg::Task* TaskNotify::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.TaskNotify.task)
  return task_;
}
inline void TaskNotify::set_allocated_task(::sg::Task* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(task);
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    set_has_task();
  } else {
    clear_has_task();
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:sg.TaskNotify.task)
}

// -------------------------------------------------------------------

// SystemTaskNotify

// required .sg.SystemTask task = 1;
inline bool SystemTaskNotify::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemTaskNotify::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemTaskNotify::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemTaskNotify::clear_task() {
  if (task_ != NULL) task_->Clear();
  clear_has_task();
}
inline const ::sg::SystemTask& SystemTaskNotify::_internal_task() const {
  return *task_;
}
inline const ::sg::SystemTask& SystemTaskNotify::task() const {
  const ::sg::SystemTask* p = task_;
  // @@protoc_insertion_point(field_get:sg.SystemTaskNotify.task)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::SystemTask*>(
      &::sg::_SystemTask_default_instance_);
}
inline ::sg::SystemTask* SystemTaskNotify::release_task() {
  // @@protoc_insertion_point(field_release:sg.SystemTaskNotify.task)
  clear_has_task();
  ::sg::SystemTask* temp = task_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  task_ = NULL;
  return temp;
}
inline ::sg::SystemTask* SystemTaskNotify::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.SystemTaskNotify.task)
  clear_has_task();
  ::sg::SystemTask* temp = task_;
  task_ = NULL;
  return temp;
}
inline ::sg::SystemTask* SystemTaskNotify::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::SystemTask>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.SystemTaskNotify.task)
  return task_;
}
inline void SystemTaskNotify::set_allocated_task(::sg::SystemTask* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(task);
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    set_has_task();
  } else {
    clear_has_task();
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:sg.SystemTaskNotify.task)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::UserTaskService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserTaskService_CMD>() {
  return ::sg::UserTaskService_CMD_descriptor();
}
template <> struct is_proto_enum< ::sg::UserSystemTaskService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserSystemTaskService_CMD>() {
  return ::sg::UserSystemTaskService_CMD_descriptor();
}
template <> struct is_proto_enum< ::sg::TASK_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::TASK_STATE>() {
  return ::sg::TASK_STATE_descriptor();
}
template <> struct is_proto_enum< ::sg::SYSTEM_TASK_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::SYSTEM_TASK_STATE>() {
  return ::sg::SYSTEM_TASK_STATE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Task_2eproto
