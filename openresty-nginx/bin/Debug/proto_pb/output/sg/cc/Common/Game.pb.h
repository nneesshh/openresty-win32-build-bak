// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#ifndef PROTOBUF_INCLUDED_Game_2eproto
#define PROTOBUF_INCLUDED_Game_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Game_2eproto 

namespace protobuf_Game_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Game_2eproto
namespace sg {
class GameAnnouncementNotify;
class GameAnnouncementNotifyDefaultTypeInternal;
extern GameAnnouncementNotifyDefaultTypeInternal _GameAnnouncementNotify_default_instance_;
class GameService;
class GameServiceDefaultTypeInternal;
extern GameServiceDefaultTypeInternal _GameService_default_instance_;
class GameService_GameRequest;
class GameService_GameRequestDefaultTypeInternal;
extern GameService_GameRequestDefaultTypeInternal _GameService_GameRequest_default_instance_;
class GameService_GameResponse;
class GameService_GameResponseDefaultTypeInternal;
extern GameService_GameResponseDefaultTypeInternal _GameService_GameResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::GameAnnouncementNotify* Arena::CreateMaybeMessage<::sg::GameAnnouncementNotify>(Arena*);
template<> ::sg::GameService* Arena::CreateMaybeMessage<::sg::GameService>(Arena*);
template<> ::sg::GameService_GameRequest* Arena::CreateMaybeMessage<::sg::GameService_GameRequest>(Arena*);
template<> ::sg::GameService_GameResponse* Arena::CreateMaybeMessage<::sg::GameService_GameResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum GameService_CMD {
  GameService_CMD_QUERY = 1
};
bool GameService_CMD_IsValid(int value);
const GameService_CMD GameService_CMD_CMD_MIN = GameService_CMD_QUERY;
const GameService_CMD GameService_CMD_CMD_MAX = GameService_CMD_QUERY;
const int GameService_CMD_CMD_ARRAYSIZE = GameService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameService_CMD_descriptor();
inline const ::std::string& GameService_CMD_Name(GameService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameService_CMD_descriptor(), value);
}
inline bool GameService_CMD_Parse(
    const ::std::string& name, GameService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameService_CMD>(
    GameService_CMD_descriptor(), name, value);
}
// ===================================================================

class GameService_GameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameService.GameRequest) */ {
 public:
  GameService_GameRequest();
  virtual ~GameService_GameRequest();

  GameService_GameRequest(const GameService_GameRequest& from);

  inline GameService_GameRequest& operator=(const GameService_GameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameService_GameRequest(GameService_GameRequest&& from) noexcept
    : GameService_GameRequest() {
    *this = ::std::move(from);
  }

  inline GameService_GameRequest& operator=(GameService_GameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameService_GameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameService_GameRequest* internal_default_instance() {
    return reinterpret_cast<const GameService_GameRequest*>(
               &_GameService_GameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(GameService_GameRequest* other);
  void Swap(GameService_GameRequest* other);
  friend void swap(GameService_GameRequest& a, GameService_GameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameService_GameRequest* New() const final {
    return CreateMaybeMessage<GameService_GameRequest>(NULL);
  }

  GameService_GameRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameService_GameRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameService_GameRequest& from);
  void MergeFrom(const GameService_GameRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameService_GameRequest* other);
  protected:
  explicit GameService_GameRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.GameService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::GameService_CMD cmd() const;
  void set_cmd(::sg::GameService_CMD value);

  // @@protoc_insertion_point(class_scope:sg.GameService.GameRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int cmd_;
  friend struct ::protobuf_Game_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameService_GameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameService.GameResponse) */ {
 public:
  GameService_GameResponse();
  virtual ~GameService_GameResponse();

  GameService_GameResponse(const GameService_GameResponse& from);

  inline GameService_GameResponse& operator=(const GameService_GameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameService_GameResponse(GameService_GameResponse&& from) noexcept
    : GameService_GameResponse() {
    *this = ::std::move(from);
  }

  inline GameService_GameResponse& operator=(GameService_GameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameService_GameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameService_GameResponse* internal_default_instance() {
    return reinterpret_cast<const GameService_GameResponse*>(
               &_GameService_GameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(GameService_GameResponse* other);
  void Swap(GameService_GameResponse* other);
  friend void swap(GameService_GameResponse& a, GameService_GameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameService_GameResponse* New() const final {
    return CreateMaybeMessage<GameService_GameResponse>(NULL);
  }

  GameService_GameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameService_GameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameService_GameResponse& from);
  void MergeFrom(const GameService_GameResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameService_GameResponse* other);
  protected:
  explicit GameService_GameResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sfixed64 server_time = 1;
  bool has_server_time() const;
  void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  ::google::protobuf::int64 server_time() const;
  void set_server_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sg.GameService.GameResponse)
 private:
  void set_has_server_time();
  void clear_has_server_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 server_time_;
  friend struct ::protobuf_Game_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameService) */ {
 public:
  GameService();
  virtual ~GameService();

  GameService(const GameService& from);

  inline GameService& operator=(const GameService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameService(GameService&& from) noexcept
    : GameService() {
    *this = ::std::move(from);
  }

  inline GameService& operator=(GameService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameService* internal_default_instance() {
    return reinterpret_cast<const GameService*>(
               &_GameService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(GameService* other);
  void Swap(GameService* other);
  friend void swap(GameService& a, GameService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameService* New() const final {
    return CreateMaybeMessage<GameService>(NULL);
  }

  GameService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameService& from);
  void MergeFrom(const GameService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameService* other);
  protected:
  explicit GameService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameService_GameRequest GameRequest;
  typedef GameService_GameResponse GameResponse;

  typedef GameService_CMD CMD;
  static const CMD QUERY =
    GameService_CMD_QUERY;
  static inline bool CMD_IsValid(int value) {
    return GameService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    GameService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    GameService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    GameService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return GameService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return GameService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return GameService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.GameService.GameRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::GameService_GameRequest& _internal_req() const;
  public:
  const ::sg::GameService_GameRequest& req() const;
  ::sg::GameService_GameRequest* release_req();
  ::sg::GameService_GameRequest* mutable_req();
  void set_allocated_req(::sg::GameService_GameRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::GameService_GameRequest* req);
  ::sg::GameService_GameRequest* unsafe_arena_release_req();

  // optional .sg.GameService.GameResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::GameService_GameResponse& _internal_resp() const;
  public:
  const ::sg::GameService_GameResponse& resp() const;
  ::sg::GameService_GameResponse* release_resp();
  ::sg::GameService_GameResponse* mutable_resp();
  void set_allocated_resp(::sg::GameService_GameResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::GameService_GameResponse* resp);
  ::sg::GameService_GameResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.GameService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::GameService_GameRequest* req_;
  ::sg::GameService_GameResponse* resp_;
  friend struct ::protobuf_Game_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameAnnouncementNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameAnnouncementNotify) */ {
 public:
  GameAnnouncementNotify();
  virtual ~GameAnnouncementNotify();

  GameAnnouncementNotify(const GameAnnouncementNotify& from);

  inline GameAnnouncementNotify& operator=(const GameAnnouncementNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameAnnouncementNotify(GameAnnouncementNotify&& from) noexcept
    : GameAnnouncementNotify() {
    *this = ::std::move(from);
  }

  inline GameAnnouncementNotify& operator=(GameAnnouncementNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameAnnouncementNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAnnouncementNotify* internal_default_instance() {
    return reinterpret_cast<const GameAnnouncementNotify*>(
               &_GameAnnouncementNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(GameAnnouncementNotify* other);
  void Swap(GameAnnouncementNotify* other);
  friend void swap(GameAnnouncementNotify& a, GameAnnouncementNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameAnnouncementNotify* New() const final {
    return CreateMaybeMessage<GameAnnouncementNotify>(NULL);
  }

  GameAnnouncementNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameAnnouncementNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameAnnouncementNotify& from);
  void MergeFrom(const GameAnnouncementNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAnnouncementNotify* other);
  protected:
  explicit GameAnnouncementNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.GameAnnouncementNotify)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_Game_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameService_GameRequest

// required .sg.GameService.CMD cmd = 1;
inline bool GameService_GameRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameService_GameRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameService_GameRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameService_GameRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::GameService_CMD GameService_GameRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.GameService.GameRequest.cmd)
  return static_cast< ::sg::GameService_CMD >(cmd_);
}
inline void GameService_GameRequest::set_cmd(::sg::GameService_CMD value) {
  assert(::sg::GameService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.GameService.GameRequest.cmd)
}

// -------------------------------------------------------------------

// GameService_GameResponse

// optional sfixed64 server_time = 1;
inline bool GameService_GameResponse::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameService_GameResponse::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameService_GameResponse::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameService_GameResponse::clear_server_time() {
  server_time_ = GOOGLE_LONGLONG(0);
  clear_has_server_time();
}
inline ::google::protobuf::int64 GameService_GameResponse::server_time() const {
  // @@protoc_insertion_point(field_get:sg.GameService.GameResponse.server_time)
  return server_time_;
}
inline void GameService_GameResponse::set_server_time(::google::protobuf::int64 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:sg.GameService.GameResponse.server_time)
}

// -------------------------------------------------------------------

// GameService

// optional .sg.GameService.GameRequest req = 1;
inline bool GameService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::GameService_GameRequest& GameService::_internal_req() const {
  return *req_;
}
inline const ::sg::GameService_GameRequest& GameService::req() const {
  const ::sg::GameService_GameRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.GameService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::GameService_GameRequest*>(
      &::sg::_GameService_GameRequest_default_instance_);
}
inline ::sg::GameService_GameRequest* GameService::release_req() {
  // @@protoc_insertion_point(field_release:sg.GameService.req)
  clear_has_req();
  ::sg::GameService_GameRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::GameService_GameRequest* GameService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.GameService.req)
  clear_has_req();
  ::sg::GameService_GameRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::GameService_GameRequest* GameService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::GameService_GameRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.GameService.req)
  return req_;
}
inline void GameService::set_allocated_req(::sg::GameService_GameRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.GameService.req)
}

// optional .sg.GameService.GameResponse resp = 2;
inline bool GameService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::GameService_GameResponse& GameService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::GameService_GameResponse& GameService::resp() const {
  const ::sg::GameService_GameResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.GameService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::GameService_GameResponse*>(
      &::sg::_GameService_GameResponse_default_instance_);
}
inline ::sg::GameService_GameResponse* GameService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.GameService.resp)
  clear_has_resp();
  ::sg::GameService_GameResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::GameService_GameResponse* GameService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.GameService.resp)
  clear_has_resp();
  ::sg::GameService_GameResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::GameService_GameResponse* GameService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::GameService_GameResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.GameService.resp)
  return resp_;
}
inline void GameService::set_allocated_resp(::sg::GameService_GameResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.GameService.resp)
}

// -------------------------------------------------------------------

// GameAnnouncementNotify

// required int32 type = 1;
inline bool GameAnnouncementNotify::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameAnnouncementNotify::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameAnnouncementNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameAnnouncementNotify::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GameAnnouncementNotify::type() const {
  // @@protoc_insertion_point(field_get:sg.GameAnnouncementNotify.type)
  return type_;
}
inline void GameAnnouncementNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sg.GameAnnouncementNotify.type)
}

// required bytes data = 2;
inline bool GameAnnouncementNotify::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameAnnouncementNotify::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameAnnouncementNotify::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameAnnouncementNotify::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
inline const ::std::string& GameAnnouncementNotify::data() const {
  // @@protoc_insertion_point(field_get:sg.GameAnnouncementNotify.data)
  return data_.Get();
}
inline void GameAnnouncementNotify::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.GameAnnouncementNotify.data)
}
#if LANG_CXX11
inline void GameAnnouncementNotify::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.GameAnnouncementNotify.data)
}
#endif
inline void GameAnnouncementNotify::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.GameAnnouncementNotify.data)
}
inline void GameAnnouncementNotify::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.GameAnnouncementNotify.data)
}
inline ::std::string* GameAnnouncementNotify::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:sg.GameAnnouncementNotify.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GameAnnouncementNotify::release_data() {
  // @@protoc_insertion_point(field_release:sg.GameAnnouncementNotify.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GameAnnouncementNotify::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.GameAnnouncementNotify.data)
}
inline ::std::string* GameAnnouncementNotify::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.GameAnnouncementNotify.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GameAnnouncementNotify::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameAnnouncementNotify.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::GameService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::GameService_CMD>() {
  return ::sg::GameService_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Game_2eproto
