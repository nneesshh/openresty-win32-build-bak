// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Multiplayer.proto

#include "Multiplayer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Sailor;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Multiplayer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FrameData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MultiplayerBattleService_MultiplayerBattleResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MultiplayerRoom_Chat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MultiplayerTeamService_MultiplayerTeamRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MultiplayerBattleService_MultiplayerBattleRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MultiplayerTeamService_MultiplayerTeamResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerBattleField;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerBattleField_Member;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerRoom;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Multiplayer_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerRoom_Member;
}  // namespace protobuf_Multiplayer_2eproto
namespace protobuf_PVE_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserTeamData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DungeonContent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_UserDungeonInformation;
}  // namespace protobuf_PVE_2eproto
namespace sg {
class FrameDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameData>
      _instance;
} _FrameData_default_instance_;
class MultiplayerRoom_MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerRoom_Member>
      _instance;
} _MultiplayerRoom_Member_default_instance_;
class MultiplayerRoom_ChatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerRoom_Chat>
      _instance;
} _MultiplayerRoom_Chat_default_instance_;
class MultiplayerRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerRoom>
      _instance;
} _MultiplayerRoom_default_instance_;
class MultiplayerBattleField_MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerBattleField_Member>
      _instance;
} _MultiplayerBattleField_Member_default_instance_;
class MultiplayerBattleFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerBattleField>
      _instance;
} _MultiplayerBattleField_default_instance_;
class MultiplayerTeamService_MultiplayerTeamRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerTeamService_MultiplayerTeamRequest>
      _instance;
} _MultiplayerTeamService_MultiplayerTeamRequest_default_instance_;
class MultiplayerTeamService_MultiplayerTeamResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerTeamService_MultiplayerTeamResponse>
      _instance;
} _MultiplayerTeamService_MultiplayerTeamResponse_default_instance_;
class MultiplayerTeamServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerTeamService>
      _instance;
} _MultiplayerTeamService_default_instance_;
class UserTalkNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserTalkNotify>
      _instance;
} _UserTalkNotify_default_instance_;
class UserAddNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserAddNotify>
      _instance;
} _UserAddNotify_default_instance_;
class UserChangeSeatNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChangeSeatNotify>
      _instance;
} _UserChangeSeatNotify_default_instance_;
class UserDeleteRoomNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDeleteRoomNotify>
      _instance;
} _UserDeleteRoomNotify_default_instance_;
class UserChangeOwnerNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChangeOwnerNotify>
      _instance;
} _UserChangeOwnerNotify_default_instance_;
class UserChangeWorkNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChangeWorkNotify>
      _instance;
} _UserChangeWorkNotify_default_instance_;
class UserLeaveNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserLeaveNotify>
      _instance;
} _UserLeaveNotify_default_instance_;
class UserRenameNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserRenameNotify>
      _instance;
} _UserRenameNotify_default_instance_;
class BattleReadyNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleReadyNotify>
      _instance;
} _BattleReadyNotify_default_instance_;
class MultiplayerBattleService_MultiplayerBattleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerBattleService_MultiplayerBattleRequest>
      _instance;
} _MultiplayerBattleService_MultiplayerBattleRequest_default_instance_;
class MultiplayerBattleService_MultiplayerBattleResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerBattleService_MultiplayerBattleResponse>
      _instance;
} _MultiplayerBattleService_MultiplayerBattleResponse_default_instance_;
class MultiplayerBattleServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiplayerBattleService>
      _instance;
} _MultiplayerBattleService_default_instance_;
class FrameAddNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameAddNotify>
      _instance;
} _FrameAddNotify_default_instance_;
class UserReadyNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserReadyNotify>
      _instance;
} _UserReadyNotify_default_instance_;
class UserChangeSailorNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChangeSailorNotify>
      _instance;
} _UserChangeSailorNotify_default_instance_;
class BattleStartNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleStartNotify>
      _instance;
} _BattleStartNotify_default_instance_;
class BattleOverNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleOverNotify>
      _instance;
} _BattleOverNotify_default_instance_;
}  // namespace sg
namespace protobuf_Multiplayer_2eproto {
static void InitDefaultsFrameData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FrameData_default_instance_;
    new (ptr) ::sg::FrameData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FrameData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FrameData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrameData}, {}};

static void InitDefaultsMultiplayerRoom_Member() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerRoom_Member_default_instance_;
    new (ptr) ::sg::MultiplayerRoom_Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerRoom_Member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerRoom_Member =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMultiplayerRoom_Member}, {
      &protobuf_BaseStruct_2eproto::scc_info_UserInfo.base,
      &protobuf_BaseStruct_2eproto::scc_info_Sailor.base,}};

static void InitDefaultsMultiplayerRoom_Chat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerRoom_Chat_default_instance_;
    new (ptr) ::sg::MultiplayerRoom_Chat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerRoom_Chat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MultiplayerRoom_Chat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMultiplayerRoom_Chat}, {}};

static void InitDefaultsMultiplayerRoom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerRoom_default_instance_;
    new (ptr) ::sg::MultiplayerRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerRoom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerRoom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMultiplayerRoom}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom_Member.base,
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom_Chat.base,}};

static void InitDefaultsMultiplayerBattleField_Member() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerBattleField_Member_default_instance_;
    new (ptr) ::sg::MultiplayerBattleField_Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerBattleField_Member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerBattleField_Member =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMultiplayerBattleField_Member}, {
      &protobuf_BaseStruct_2eproto::scc_info_UserInfo.base,
      &protobuf_PVE_2eproto::scc_info_UserTeamData.base,}};

static void InitDefaultsMultiplayerBattleField() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerBattleField_default_instance_;
    new (ptr) ::sg::MultiplayerBattleField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerBattleField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerBattleField =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMultiplayerBattleField}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleField_Member.base,
      &protobuf_Multiplayer_2eproto::scc_info_FrameData.base,}};

static void InitDefaultsMultiplayerTeamService_MultiplayerTeamRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerTeamService_MultiplayerTeamRequest_default_instance_;
    new (ptr) ::sg::MultiplayerTeamService_MultiplayerTeamRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerTeamService_MultiplayerTeamRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MultiplayerTeamService_MultiplayerTeamRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMultiplayerTeamService_MultiplayerTeamRequest}, {}};

static void InitDefaultsMultiplayerTeamService_MultiplayerTeamResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerTeamService_MultiplayerTeamResponse_default_instance_;
    new (ptr) ::sg::MultiplayerTeamService_MultiplayerTeamResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerTeamService_MultiplayerTeamResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MultiplayerTeamService_MultiplayerTeamResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMultiplayerTeamService_MultiplayerTeamResponse}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base,}};

static void InitDefaultsMultiplayerTeamService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerTeamService_default_instance_;
    new (ptr) ::sg::MultiplayerTeamService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerTeamService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerTeamService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMultiplayerTeamService}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService_MultiplayerTeamRequest.base,
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService_MultiplayerTeamResponse.base,}};

static void InitDefaultsUserTalkNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserTalkNotify_default_instance_;
    new (ptr) ::sg::UserTalkNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserTalkNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserTalkNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserTalkNotify}, {}};

static void InitDefaultsUserAddNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserAddNotify_default_instance_;
    new (ptr) ::sg::UserAddNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserAddNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserAddNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserAddNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base,}};

static void InitDefaultsUserChangeSeatNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserChangeSeatNotify_default_instance_;
    new (ptr) ::sg::UserChangeSeatNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserChangeSeatNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserChangeSeatNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserChangeSeatNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base,}};

static void InitDefaultsUserDeleteRoomNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserDeleteRoomNotify_default_instance_;
    new (ptr) ::sg::UserDeleteRoomNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserDeleteRoomNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserDeleteRoomNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserDeleteRoomNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base,}};

static void InitDefaultsUserChangeOwnerNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserChangeOwnerNotify_default_instance_;
    new (ptr) ::sg::UserChangeOwnerNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserChangeOwnerNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserChangeOwnerNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserChangeOwnerNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base,}};

static void InitDefaultsUserChangeWorkNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserChangeWorkNotify_default_instance_;
    new (ptr) ::sg::UserChangeWorkNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserChangeWorkNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserChangeWorkNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserChangeWorkNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base,}};

static void InitDefaultsUserLeaveNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserLeaveNotify_default_instance_;
    new (ptr) ::sg::UserLeaveNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserLeaveNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserLeaveNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserLeaveNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base,}};

static void InitDefaultsUserRenameNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserRenameNotify_default_instance_;
    new (ptr) ::sg::UserRenameNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserRenameNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserRenameNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserRenameNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base,}};

static void InitDefaultsBattleReadyNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_BattleReadyNotify_default_instance_;
    new (ptr) ::sg::BattleReadyNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::BattleReadyNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BattleReadyNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBattleReadyNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base,}};

static void InitDefaultsMultiplayerBattleService_MultiplayerBattleRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerBattleService_MultiplayerBattleRequest_default_instance_;
    new (ptr) ::sg::MultiplayerBattleService_MultiplayerBattleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerBattleService_MultiplayerBattleRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MultiplayerBattleService_MultiplayerBattleRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMultiplayerBattleService_MultiplayerBattleRequest}, {
      &protobuf_Multiplayer_2eproto::scc_info_FrameData.base,}};

static void InitDefaultsMultiplayerBattleService_MultiplayerBattleResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerBattleService_MultiplayerBattleResponse_default_instance_;
    new (ptr) ::sg::MultiplayerBattleService_MultiplayerBattleResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerBattleService_MultiplayerBattleResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MultiplayerBattleService_MultiplayerBattleResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMultiplayerBattleService_MultiplayerBattleResponse}, {}};

static void InitDefaultsMultiplayerBattleService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MultiplayerBattleService_default_instance_;
    new (ptr) ::sg::MultiplayerBattleService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MultiplayerBattleService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MultiplayerBattleService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMultiplayerBattleService}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService_MultiplayerBattleRequest.base,
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService_MultiplayerBattleResponse.base,}};

static void InitDefaultsFrameAddNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FrameAddNotify_default_instance_;
    new (ptr) ::sg::FrameAddNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FrameAddNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FrameAddNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFrameAddNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_FrameData.base,}};

static void InitDefaultsUserReadyNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserReadyNotify_default_instance_;
    new (ptr) ::sg::UserReadyNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserReadyNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserReadyNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserReadyNotify}, {}};

static void InitDefaultsUserChangeSailorNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserChangeSailorNotify_default_instance_;
    new (ptr) ::sg::UserChangeSailorNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserChangeSailorNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserChangeSailorNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserChangeSailorNotify}, {
      &protobuf_BaseStruct_2eproto::scc_info_Sailor.base,}};

static void InitDefaultsBattleStartNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_BattleStartNotify_default_instance_;
    new (ptr) ::sg::BattleStartNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::BattleStartNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_BattleStartNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsBattleStartNotify}, {
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleField.base,
      &protobuf_PVE_2eproto::scc_info_DungeonContent.base,
      &protobuf_PVE_2eproto::scc_info_UserDungeonInformation.base,}};

static void InitDefaultsBattleOverNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_BattleOverNotify_default_instance_;
    new (ptr) ::sg::BattleOverNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::BattleOverNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BattleOverNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBattleOverNotify}, {
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FrameData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerRoom_Member.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerRoom_Chat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerRoom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerBattleField_Member.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerBattleField.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerTeamService_MultiplayerTeamRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerTeamService_MultiplayerTeamResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerTeamService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserTalkNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserAddNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserChangeSeatNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDeleteRoomNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserChangeOwnerNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserChangeWorkNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserLeaveNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserRenameNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BattleReadyNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerBattleService_MultiplayerBattleRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerBattleService_MultiplayerBattleResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiplayerBattleService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrameAddNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserReadyNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserChangeSailorNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BattleStartNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BattleOverNotify.base);
}

::google::protobuf::Metadata file_level_metadata[26];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FrameData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FrameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FrameData, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FrameData, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FrameData, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Member, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Member, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Member, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Member, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Member, sailors_),
  1,
  2,
  0,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Chat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Chat, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Chat, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom_Chat, data_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerRoom, chat_list_),
  2,
  3,
  0,
  ~0u,
  4,
  5,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField_Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField_Member, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField_Member, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField_Member, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField_Member, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField_Member, data_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, rand_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleField, type_),
  2,
  3,
  0,
  4,
  5,
  ~0u,
  ~0u,
  1,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, new_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamRequest, talk_data_),
  7,
  3,
  4,
  0,
  5,
  1,
  6,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamResponse, my_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService_MultiplayerTeamResponse, room_list_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerTeamService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTalkNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTalkNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTalkNotify, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTalkNotify, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTalkNotify, data_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAddNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAddNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAddNotify, room_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeSeatNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeSeatNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeSeatNotify, room_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDeleteRoomNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDeleteRoomNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDeleteRoomNotify, room_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeOwnerNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeOwnerNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeOwnerNotify, room_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeWorkNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeWorkNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeWorkNotify, room_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserLeaveNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserLeaveNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserLeaveNotify, room_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRenameNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRenameNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRenameNotify, room_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleReadyNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleReadyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleReadyNotify, room_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleRequest, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleRequest, sailors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleRequest, operation_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleRequest, result_),
  2,
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService_MultiplayerBattleResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MultiplayerBattleService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FrameAddNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FrameAddNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FrameAddNotify, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FrameAddNotify, data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserReadyNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserReadyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserReadyNotify, member_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserReadyNotify, ready_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeSailorNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeSailorNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeSailorNotify, member_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChangeSailorNotify, use_sailor_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleStartNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleStartNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleStartNotify, battle_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleStartNotify, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleStartNotify, user_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleStartNotify, cost_vitality_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleOverNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleOverNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleOverNotify, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::BattleOverNotify, reward_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::sg::FrameData)},
  { 11, 21, sizeof(::sg::MultiplayerRoom_Member)},
  { 26, 34, sizeof(::sg::MultiplayerRoom_Chat)},
  { 37, 50, sizeof(::sg::MultiplayerRoom)},
  { 58, 68, sizeof(::sg::MultiplayerBattleField_Member)},
  { 73, 88, sizeof(::sg::MultiplayerBattleField)},
  { 98, 111, sizeof(::sg::MultiplayerTeamService_MultiplayerTeamRequest)},
  { 119, 127, sizeof(::sg::MultiplayerTeamService_MultiplayerTeamResponse)},
  { 130, 137, sizeof(::sg::MultiplayerTeamService)},
  { 139, 147, sizeof(::sg::UserTalkNotify)},
  { 150, 156, sizeof(::sg::UserAddNotify)},
  { 157, 163, sizeof(::sg::UserChangeSeatNotify)},
  { 164, 170, sizeof(::sg::UserDeleteRoomNotify)},
  { 171, 177, sizeof(::sg::UserChangeOwnerNotify)},
  { 178, 184, sizeof(::sg::UserChangeWorkNotify)},
  { 185, 191, sizeof(::sg::UserLeaveNotify)},
  { 192, 198, sizeof(::sg::UserRenameNotify)},
  { 199, 205, sizeof(::sg::BattleReadyNotify)},
  { 206, 216, sizeof(::sg::MultiplayerBattleService_MultiplayerBattleRequest)},
  { 221, 227, sizeof(::sg::MultiplayerBattleService_MultiplayerBattleResponse)},
  { 228, 235, sizeof(::sg::MultiplayerBattleService)},
  { 237, 244, sizeof(::sg::FrameAddNotify)},
  { 246, 253, sizeof(::sg::UserReadyNotify)},
  { 255, 262, sizeof(::sg::UserChangeSailorNotify)},
  { 264, 273, sizeof(::sg::BattleStartNotify)},
  { 277, 284, sizeof(::sg::BattleOverNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FrameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerRoom_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerRoom_Chat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerBattleField_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerBattleField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerTeamService_MultiplayerTeamRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerTeamService_MultiplayerTeamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerTeamService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserTalkNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserAddNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserChangeSeatNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserDeleteRoomNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserChangeOwnerNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserChangeWorkNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserLeaveNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserRenameNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_BattleReadyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerBattleService_MultiplayerBattleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerBattleService_MultiplayerBattleResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MultiplayerBattleService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FrameAddNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserReadyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserChangeSailorNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_BattleStartNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_BattleOverNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Multiplayer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 26);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021Multiplayer.proto\022\002sg\032\020BaseStruct.prot"
      "o\032\tPVE.proto\"8\n\tFrameData\022\r\n\005frame\030\001 \001(\005"
      "\022\016\n\006source\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\"\351\002\n\017Multi"
      "playerRoom\022\n\n\002id\030\001 \002(\005\022\r\n\005state\030\002 \002(\005\022\014\n"
      "\004name\030\003 \002(\014\022+\n\007members\030\004 \003(\0132\032.sg.Multip"
      "layerRoom.Member\022\016\n\006target\030\005 \001(\005\022\014\n\004type"
      "\030\006 \001(\005\022\014\n\004work\030\007 \002(\014\022+\n\tchat_list\030\010 \003(\0132"
      "\030.sg.MultiplayerRoom.Chat\032o\n\006Member\022\r\n\005i"
      "ndex\030\001 \002(\005\022\016\n\006status\030\003 \002(\005\022\032\n\004user\030\004 \001(\013"
      "2\014.sg.UserInfo\022\r\n\005state\030\005 \001(\005\022\033\n\007sailors"
      "\030\006 \003(\0132\n.sg.Sailor\0326\n\004Chat\022\r\n\005index\030\001 \002("
      "\005\022\021\n\ttimestamp\030\002 \002(\020\022\014\n\004data\030\003 \002(\014\"\324\002\n\026M"
      "ultiplayerBattleField\022\n\n\002id\030\001 \002(\005\022\r\n\005sta"
      "te\030\002 \002(\005\022\014\n\004name\030\003 \002(\014\022\r\n\005frame\030\004 \002(\005\022\021\n"
      "\trand_seed\030\005 \002(\005\0222\n\007members\030\006 \003(\0132!.sg.M"
      "ultiplayerBattleField.Member\022\033\n\004data\030\007 \003"
      "(\0132\r.sg.FrameData\022\014\n\004work\030\010 \002(\014\022\016\n\006targe"
      "t\030\t \001(\005\022\014\n\004type\030\n \001(\005\032r\n\006Member\022\r\n\005index"
      "\030\001 \002(\005\022\016\n\006status\030\003 \002(\005\022\r\n\005state\030\004 \002(\005\022\032\n"
      "\004user\030\005 \001(\0132\014.sg.UserInfo\022\036\n\004data\030\006 \001(\0132"
      "\020.sg.UserTeamData\"\213\005\n\026MultiplayerTeamSer"
      "vice\022>\n\003req\030\001 \001(\01321.sg.MultiplayerTeamSe"
      "rvice.MultiplayerTeamRequest\022@\n\004resp\030\002 \001"
      "(\01322.sg.MultiplayerTeamService.Multiplay"
      "erTeamResponse\032\266\001\n\026MultiplayerTeamReques"
      "t\022+\n\003cmd\030\001 \002(\0162\036.sg.MultiplayerTeamServi"
      "ce.CMD\022\021\n\ttarget_id\030\002 \001(\005\022\014\n\004seat\030\003 \001(\005\022"
      "\014\n\004work\030\004 \001(\014\022\014\n\004type\030\005 \001(\005\022\014\n\004name\030\006 \001("
      "\014\022\021\n\tnew_owner\030\007 \001(\005\022\021\n\ttalk_data\030\010 \001(\014\032"
      "w\n\027MultiplayerTeamResponse\022\016\n\006result\030\001 \002"
      "(\005\022$\n\007my_room\030\002 \001(\0132\023.sg.MultiplayerRoom"
      "\022&\n\troom_list\030\003 \003(\0132\023.sg.MultiplayerRoom"
      "\"\274\001\n\003CMD\022\016\n\nQUERY_LIST\020\001\022\016\n\nQUERY_SELF\020\002"
      "\022\017\n\013CREATE_ROOM\020\003\022\014\n\010ADD_ROOM\020\004\022\016\n\nLEAVE"
      "_ROOM\020\005\022\017\n\013DELETE_ROOM\020\006\022\017\n\013CHANGE_SEAT\020"
      "\007\022\020\n\014CHANGE_OWNER\020\010\022\014\n\010SET_WORK\020\t\022\017\n\013REN"
      "AME_ROOM\020\n\022\t\n\005READY\020\013\022\010\n\004TALK\020\014\"@\n\016UserT"
      "alkNotify\022\r\n\005index\030\001 \002(\005\022\021\n\ttimestamp\030\002 "
      "\002(\020\022\014\n\004data\030\003 \002(\014\"7\n\rUserAddNotify\022&\n\tro"
      "om_data\030\001 \001(\0132\023.sg.MultiplayerRoom\">\n\024Us"
      "erChangeSeatNotify\022&\n\troom_data\030\001 \001(\0132\023."
      "sg.MultiplayerRoom\">\n\024UserDeleteRoomNoti"
      "fy\022&\n\troom_data\030\001 \001(\0132\023.sg.MultiplayerRo"
      "om\"\?\n\025UserChangeOwnerNotify\022&\n\troom_data"
      "\030\001 \001(\0132\023.sg.MultiplayerRoom\">\n\024UserChang"
      "eWorkNotify\022&\n\troom_data\030\001 \001(\0132\023.sg.Mult"
      "iplayerRoom\"9\n\017UserLeaveNotify\022&\n\troom_d"
      "ata\030\001 \001(\0132\023.sg.MultiplayerRoom\":\n\020UserRe"
      "nameNotify\022&\n\troom_data\030\001 \001(\0132\023.sg.Multi"
      "playerRoom\";\n\021BattleReadyNotify\022&\n\troom_"
      "data\030\001 \001(\0132\023.sg.MultiplayerRoom\"\264\003\n\030Mult"
      "iplayerBattleService\022B\n\003req\030\001 \001(\01325.sg.M"
      "ultiplayerBattleService.MultiplayerBattl"
      "eRequest\022D\n\004resp\030\002 \001(\01326.sg.MultiplayerB"
      "attleService.MultiplayerBattleResponse\032\244"
      "\001\n\030MultiplayerBattleRequest\022-\n\003cmd\030\001 \002(\016"
      "2 .sg.MultiplayerBattleService.CMD\022\021\n\tta"
      "rget_id\030\003 \001(\004\022\017\n\007sailors\030\004 \003(\005\022%\n\016operat"
      "ion_list\030\005 \003(\0132\r.sg.FrameData\022\016\n\006result\030"
      "\006 \001(\005\032+\n\031MultiplayerBattleResponse\022\016\n\006re"
      "sult\030\001 \002(\005\":\n\003CMD\022\t\n\005READY\020\001\022\021\n\rCHANGE_S"
      "AILOR\020\002\022\013\n\007OPERATE\020\003\022\010\n\004OVER\020\004\"<\n\016FrameA"
      "ddNotify\022\r\n\005frame\030\001 \002(\005\022\033\n\004data\030\002 \003(\0132\r."
      "sg.FrameData\"6\n\017UserReadyNotify\022\024\n\014membe"
      "r_index\030\001 \002(\005\022\r\n\005ready\030\002 \002(\010\"N\n\026UserChan"
      "geSailorNotify\022\024\n\014member_index\030\001 \002(\005\022\036\n\n"
      "use_sailor\030\002 \003(\0132\n.sg.Sailor\"\257\001\n\021BattleS"
      "tartNotify\022/\n\013battle_data\030\001 \002(\0132\032.sg.Mul"
      "tiplayerBattleField\022#\n\007content\030\002 \001(\0132\022.s"
      "g.DungeonContent\022-\n\tuser_info\030\003 \001(\0132\032.sg"
      ".UserDungeonInformation\022\025\n\rcost_vitality"
      "\030\004 \001(\005\">\n\020BattleOverNotify\022\016\n\006result\030\001 \002"
      "(\005\022\032\n\006reward\030\002 \001(\0132\n.sg.RewardB\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2915);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Multiplayer.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
  ::protobuf_PVE_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Multiplayer_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* MultiplayerTeamService_CMD_descriptor() {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Multiplayer_2eproto::file_level_enum_descriptors[0];
}
bool MultiplayerTeamService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MultiplayerTeamService_CMD MultiplayerTeamService::QUERY_LIST;
const MultiplayerTeamService_CMD MultiplayerTeamService::QUERY_SELF;
const MultiplayerTeamService_CMD MultiplayerTeamService::CREATE_ROOM;
const MultiplayerTeamService_CMD MultiplayerTeamService::ADD_ROOM;
const MultiplayerTeamService_CMD MultiplayerTeamService::LEAVE_ROOM;
const MultiplayerTeamService_CMD MultiplayerTeamService::DELETE_ROOM;
const MultiplayerTeamService_CMD MultiplayerTeamService::CHANGE_SEAT;
const MultiplayerTeamService_CMD MultiplayerTeamService::CHANGE_OWNER;
const MultiplayerTeamService_CMD MultiplayerTeamService::SET_WORK;
const MultiplayerTeamService_CMD MultiplayerTeamService::RENAME_ROOM;
const MultiplayerTeamService_CMD MultiplayerTeamService::READY;
const MultiplayerTeamService_CMD MultiplayerTeamService::TALK;
const MultiplayerTeamService_CMD MultiplayerTeamService::CMD_MIN;
const MultiplayerTeamService_CMD MultiplayerTeamService::CMD_MAX;
const int MultiplayerTeamService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MultiplayerBattleService_CMD_descriptor() {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Multiplayer_2eproto::file_level_enum_descriptors[1];
}
bool MultiplayerBattleService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MultiplayerBattleService_CMD MultiplayerBattleService::READY;
const MultiplayerBattleService_CMD MultiplayerBattleService::CHANGE_SAILOR;
const MultiplayerBattleService_CMD MultiplayerBattleService::OPERATE;
const MultiplayerBattleService_CMD MultiplayerBattleService::OVER;
const MultiplayerBattleService_CMD MultiplayerBattleService::CMD_MIN;
const MultiplayerBattleService_CMD MultiplayerBattleService::CMD_MAX;
const int MultiplayerBattleService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void FrameData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameData::kFrameFieldNumber;
const int FrameData::kSourceFieldNumber;
const int FrameData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameData::FrameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_FrameData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FrameData)
}
FrameData::FrameData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_FrameData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FrameData)
}
FrameData::FrameData(const FrameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&frame_, &from.frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&frame_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:sg.FrameData)
}

void FrameData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&frame_)) + sizeof(source_));
}

FrameData::~FrameData() {
  // @@protoc_insertion_point(destructor:sg.FrameData)
  SharedDtor();
}

void FrameData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameData::ArenaDtor(void* object) {
  FrameData* _this = reinterpret_cast< FrameData* >(object);
  (void)_this;
}
void FrameData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FrameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FrameData::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameData& FrameData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_FrameData.base);
  return *internal_default_instance();
}


void FrameData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FrameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    ::memset(&frame_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&frame_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FrameData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FrameData)
  return false;
#undef DO_
}

void FrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FrameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 frame = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // optional int32 source = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FrameData)
}

::google::protobuf::uint8* FrameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FrameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 frame = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // optional int32 source = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->source(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FrameData)
  return target;
}

size_t FrameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FrameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 frame = 1;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame());
    }

    // optional int32 source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FrameData)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FrameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FrameData)
    MergeFrom(*source);
  }
}

void FrameData::MergeFrom(const FrameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FrameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_data(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_ = from.frame_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FrameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameData::CopyFrom(const FrameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FrameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameData::IsInitialized() const {
  return true;
}

void FrameData::Swap(FrameData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FrameData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FrameData::UnsafeArenaSwap(FrameData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FrameData::InternalSwap(FrameData* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_, other->frame_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FrameData::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerRoom_Member::InitAsDefaultInstance() {
  ::sg::_MultiplayerRoom_Member_default_instance_._instance.get_mutable()->user_ = const_cast< ::sg::UserInfo*>(
      ::sg::UserInfo::internal_default_instance());
}
void MultiplayerRoom_Member::unsafe_arena_set_allocated_user(
    ::sg::UserInfo* user) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_;
  }
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MultiplayerRoom.Member.user)
}
void MultiplayerRoom_Member::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
void MultiplayerRoom_Member::clear_sailors() {
  sailors_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerRoom_Member::kIndexFieldNumber;
const int MultiplayerRoom_Member::kStatusFieldNumber;
const int MultiplayerRoom_Member::kUserFieldNumber;
const int MultiplayerRoom_Member::kStateFieldNumber;
const int MultiplayerRoom_Member::kSailorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerRoom_Member::MultiplayerRoom_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom_Member.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerRoom.Member)
}
MultiplayerRoom_Member::MultiplayerRoom_Member(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sailors_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom_Member.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerRoom.Member)
}
MultiplayerRoom_Member::MultiplayerRoom_Member(const MultiplayerRoom_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sailors_(from.sailors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::sg::UserInfo(*from.user_);
  } else {
    user_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&index_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerRoom.Member)
}

void MultiplayerRoom_Member::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&user_)) + sizeof(state_));
}

MultiplayerRoom_Member::~MultiplayerRoom_Member() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerRoom.Member)
  SharedDtor();
}

void MultiplayerRoom_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete user_;
}

void MultiplayerRoom_Member::ArenaDtor(void* object) {
  MultiplayerRoom_Member* _this = reinterpret_cast< MultiplayerRoom_Member* >(object);
  (void)_this;
}
void MultiplayerRoom_Member::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerRoom_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerRoom_Member::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerRoom_Member& MultiplayerRoom_Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom_Member.base);
  return *internal_default_instance();
}


void MultiplayerRoom_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerRoom.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sailors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_ != NULL);
    user_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&index_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerRoom_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerRoom.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserInfo user = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Sailor sailors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sailors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerRoom.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerRoom.Member)
  return false;
#undef DO_
}

void MultiplayerRoom_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerRoom.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional .sg.UserInfo user = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_user(), output);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // repeated .sg.Sailor sailors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->sailors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerRoom.Member)
}

::google::protobuf::uint8* MultiplayerRoom_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerRoom.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // optional .sg.UserInfo user = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_user(), deterministic, target);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // repeated .sg.Sailor sailors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->sailors(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerRoom.Member)
  return target;
}

size_t MultiplayerRoom_Member::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MultiplayerRoom.Member)
  size_t total_size = 0;

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_status()) {
    // required int32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
size_t MultiplayerRoom_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerRoom.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.Sailor sailors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->sailors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sailors(static_cast<int>(i)));
    }
  }

  // optional .sg.UserInfo user = 4;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // optional int32 state = 5;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerRoom_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerRoom.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerRoom_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerRoom_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerRoom.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerRoom.Member)
    MergeFrom(*source);
  }
}

void MultiplayerRoom_Member::MergeFrom(const MultiplayerRoom_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerRoom.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sailors_.MergeFrom(from.sailors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user()->::sg::UserInfo::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiplayerRoom_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerRoom.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerRoom_Member::CopyFrom(const MultiplayerRoom_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerRoom.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerRoom_Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sailors())) return false;
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void MultiplayerRoom_Member::Swap(MultiplayerRoom_Member* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerRoom_Member* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerRoom_Member::UnsafeArenaSwap(MultiplayerRoom_Member* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerRoom_Member::InternalSwap(MultiplayerRoom_Member* other) {
  using std::swap;
  CastToBase(&sailors_)->InternalSwap(CastToBase(&other->sailors_));
  swap(user_, other->user_);
  swap(index_, other->index_);
  swap(status_, other->status_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerRoom_Member::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerRoom_Chat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerRoom_Chat::kIndexFieldNumber;
const int MultiplayerRoom_Chat::kTimestampFieldNumber;
const int MultiplayerRoom_Chat::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerRoom_Chat::MultiplayerRoom_Chat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom_Chat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerRoom.Chat)
}
MultiplayerRoom_Chat::MultiplayerRoom_Chat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom_Chat.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerRoom.Chat)
}
MultiplayerRoom_Chat::MultiplayerRoom_Chat(const MultiplayerRoom_Chat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerRoom.Chat)
}

void MultiplayerRoom_Chat::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
}

MultiplayerRoom_Chat::~MultiplayerRoom_Chat() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerRoom.Chat)
  SharedDtor();
}

void MultiplayerRoom_Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultiplayerRoom_Chat::ArenaDtor(void* object) {
  MultiplayerRoom_Chat* _this = reinterpret_cast< MultiplayerRoom_Chat* >(object);
  (void)_this;
}
void MultiplayerRoom_Chat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerRoom_Chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerRoom_Chat::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerRoom_Chat& MultiplayerRoom_Chat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom_Chat.base);
  return *internal_default_instance();
}


void MultiplayerRoom_Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerRoom.Chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerRoom_Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerRoom.Chat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerRoom.Chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerRoom.Chat)
  return false;
#undef DO_
}

void MultiplayerRoom_Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerRoom.Chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required sfixed64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->timestamp(), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerRoom.Chat)
}

::google::protobuf::uint8* MultiplayerRoom_Chat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerRoom.Chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required sfixed64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->timestamp(), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerRoom.Chat)
  return target;
}

size_t MultiplayerRoom_Chat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MultiplayerRoom.Chat)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_timestamp()) {
    // required sfixed64 timestamp = 2;
    total_size += 1 + 8;
  }

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  return total_size;
}
size_t MultiplayerRoom_Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerRoom.Chat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required sfixed64 timestamp = 2;
    total_size += 1 + 8;

    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerRoom_Chat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerRoom.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerRoom_Chat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerRoom_Chat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerRoom.Chat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerRoom.Chat)
    MergeFrom(*source);
  }
}

void MultiplayerRoom_Chat::MergeFrom(const MultiplayerRoom_Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerRoom.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_data(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiplayerRoom_Chat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerRoom.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerRoom_Chat::CopyFrom(const MultiplayerRoom_Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerRoom.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerRoom_Chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MultiplayerRoom_Chat::Swap(MultiplayerRoom_Chat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerRoom_Chat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerRoom_Chat::UnsafeArenaSwap(MultiplayerRoom_Chat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerRoom_Chat::InternalSwap(MultiplayerRoom_Chat* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerRoom_Chat::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerRoom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerRoom::kIdFieldNumber;
const int MultiplayerRoom::kStateFieldNumber;
const int MultiplayerRoom::kNameFieldNumber;
const int MultiplayerRoom::kMembersFieldNumber;
const int MultiplayerRoom::kTargetFieldNumber;
const int MultiplayerRoom::kTypeFieldNumber;
const int MultiplayerRoom::kWorkFieldNumber;
const int MultiplayerRoom::kChatListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerRoom::MultiplayerRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerRoom)
}
MultiplayerRoom::MultiplayerRoom(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  members_(arena),
  chat_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerRoom)
}
MultiplayerRoom::MultiplayerRoom(const MultiplayerRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      chat_list_(from.chat_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  work_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_work()) {
    work_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.work(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerRoom)
}

void MultiplayerRoom::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  work_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

MultiplayerRoom::~MultiplayerRoom() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerRoom)
  SharedDtor();
}

void MultiplayerRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  work_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultiplayerRoom::ArenaDtor(void* object) {
  MultiplayerRoom* _this = reinterpret_cast< MultiplayerRoom* >(object);
  (void)_this;
}
void MultiplayerRoom::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerRoom::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerRoom& MultiplayerRoom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerRoom.base);
  return *internal_default_instance();
}


void MultiplayerRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  chat_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      work_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerRoom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.MultiplayerRoom.Member members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes work = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.MultiplayerRoom.Chat chat_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chat_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerRoom)
  return false;
#undef DO_
}

void MultiplayerRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // repeated .sg.MultiplayerRoom.Member members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional int32 target = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->target(), output);
  }

  // optional int32 type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // required bytes work = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->work(), output);
  }

  // repeated .sg.MultiplayerRoom.Chat chat_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->chat_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerRoom)
}

::google::protobuf::uint8* MultiplayerRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // repeated .sg.MultiplayerRoom.Member members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->members(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 target = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->target(), target);
  }

  // optional int32 type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // required bytes work = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->work(), target);
  }

  // repeated .sg.MultiplayerRoom.Chat chat_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->chat_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerRoom)
  return target;
}

size_t MultiplayerRoom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MultiplayerRoom)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_work()) {
    // required bytes work = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->work());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t MultiplayerRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes work = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->work());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.MultiplayerRoom.Member members = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated .sg.MultiplayerRoom.Chat chat_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->chat_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chat_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 48u) {
    // optional int32 target = 5;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerRoom)
    MergeFrom(*source);
  }
}

void MultiplayerRoom::MergeFrom(const MultiplayerRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  chat_list_.MergeFrom(from.chat_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_work(from.work());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiplayerRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerRoom::CopyFrom(const MultiplayerRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chat_list())) return false;
  return true;
}

void MultiplayerRoom::Swap(MultiplayerRoom* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerRoom* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerRoom::UnsafeArenaSwap(MultiplayerRoom* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerRoom::InternalSwap(MultiplayerRoom* other) {
  using std::swap;
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  CastToBase(&chat_list_)->InternalSwap(CastToBase(&other->chat_list_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  work_.Swap(&other->work_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(target_, other->target_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerRoom::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerBattleField_Member::InitAsDefaultInstance() {
  ::sg::_MultiplayerBattleField_Member_default_instance_._instance.get_mutable()->user_ = const_cast< ::sg::UserInfo*>(
      ::sg::UserInfo::internal_default_instance());
  ::sg::_MultiplayerBattleField_Member_default_instance_._instance.get_mutable()->data_ = const_cast< ::sg::UserTeamData*>(
      ::sg::UserTeamData::internal_default_instance());
}
void MultiplayerBattleField_Member::unsafe_arena_set_allocated_user(
    ::sg::UserInfo* user) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_;
  }
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MultiplayerBattleField.Member.user)
}
void MultiplayerBattleField_Member::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
void MultiplayerBattleField_Member::unsafe_arena_set_allocated_data(
    ::sg::UserTeamData* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MultiplayerBattleField.Member.data)
}
void MultiplayerBattleField_Member::clear_data() {
  if (data_ != NULL) data_->Clear();
  clear_has_data();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerBattleField_Member::kIndexFieldNumber;
const int MultiplayerBattleField_Member::kStatusFieldNumber;
const int MultiplayerBattleField_Member::kStateFieldNumber;
const int MultiplayerBattleField_Member::kUserFieldNumber;
const int MultiplayerBattleField_Member::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerBattleField_Member::MultiplayerBattleField_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleField_Member.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerBattleField.Member)
}
MultiplayerBattleField_Member::MultiplayerBattleField_Member(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleField_Member.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerBattleField.Member)
}
MultiplayerBattleField_Member::MultiplayerBattleField_Member(const MultiplayerBattleField_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::sg::UserInfo(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::sg::UserTeamData(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&index_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerBattleField.Member)
}

void MultiplayerBattleField_Member::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&user_)) + sizeof(state_));
}

MultiplayerBattleField_Member::~MultiplayerBattleField_Member() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerBattleField.Member)
  SharedDtor();
}

void MultiplayerBattleField_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete data_;
}

void MultiplayerBattleField_Member::ArenaDtor(void* object) {
  MultiplayerBattleField_Member* _this = reinterpret_cast< MultiplayerBattleField_Member* >(object);
  (void)_this;
}
void MultiplayerBattleField_Member::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerBattleField_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerBattleField_Member::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerBattleField_Member& MultiplayerBattleField_Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleField_Member.base);
  return *internal_default_instance();
}


void MultiplayerBattleField_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerBattleField.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&index_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerBattleField_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerBattleField.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserInfo user = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserTeamData data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerBattleField.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerBattleField.Member)
  return false;
#undef DO_
}

void MultiplayerBattleField_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerBattleField.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 status = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional .sg.UserInfo user = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_user(), output);
  }

  // optional .sg.UserTeamData data = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerBattleField.Member)
}

::google::protobuf::uint8* MultiplayerBattleField_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerBattleField.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional .sg.UserInfo user = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_user(), deterministic, target);
  }

  // optional .sg.UserTeamData data = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerBattleField.Member)
  return target;
}

size_t MultiplayerBattleField_Member::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MultiplayerBattleField.Member)
  size_t total_size = 0;

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_status()) {
    // required int32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_state()) {
    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t MultiplayerBattleField_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerBattleField.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserInfo user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_);
    }

    // optional .sg.UserTeamData data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerBattleField_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerBattleField.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerBattleField_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerBattleField_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerBattleField.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerBattleField.Member)
    MergeFrom(*source);
  }
}

void MultiplayerBattleField_Member::MergeFrom(const MultiplayerBattleField_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerBattleField.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user()->::sg::UserInfo::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::sg::UserTeamData::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiplayerBattleField_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerBattleField.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerBattleField_Member::CopyFrom(const MultiplayerBattleField_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerBattleField.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerBattleField_Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void MultiplayerBattleField_Member::Swap(MultiplayerBattleField_Member* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerBattleField_Member* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerBattleField_Member::UnsafeArenaSwap(MultiplayerBattleField_Member* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerBattleField_Member::InternalSwap(MultiplayerBattleField_Member* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(data_, other->data_);
  swap(index_, other->index_);
  swap(status_, other->status_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerBattleField_Member::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerBattleField::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerBattleField::kIdFieldNumber;
const int MultiplayerBattleField::kStateFieldNumber;
const int MultiplayerBattleField::kNameFieldNumber;
const int MultiplayerBattleField::kFrameFieldNumber;
const int MultiplayerBattleField::kRandSeedFieldNumber;
const int MultiplayerBattleField::kMembersFieldNumber;
const int MultiplayerBattleField::kDataFieldNumber;
const int MultiplayerBattleField::kWorkFieldNumber;
const int MultiplayerBattleField::kTargetFieldNumber;
const int MultiplayerBattleField::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerBattleField::MultiplayerBattleField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleField.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerBattleField)
}
MultiplayerBattleField::MultiplayerBattleField(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  members_(arena),
  data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleField.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerBattleField)
}
MultiplayerBattleField::MultiplayerBattleField(const MultiplayerBattleField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  work_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_work()) {
    work_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.work(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerBattleField)
}

void MultiplayerBattleField::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  work_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

MultiplayerBattleField::~MultiplayerBattleField() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerBattleField)
  SharedDtor();
}

void MultiplayerBattleField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  work_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultiplayerBattleField::ArenaDtor(void* object) {
  MultiplayerBattleField* _this = reinterpret_cast< MultiplayerBattleField* >(object);
  (void)_this;
}
void MultiplayerBattleField::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerBattleField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerBattleField::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerBattleField& MultiplayerBattleField::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleField.base);
  return *internal_default_instance();
}


void MultiplayerBattleField::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerBattleField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      work_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerBattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerBattleField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rand_seed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rand_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rand_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.MultiplayerBattleField.Member members = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.FrameData data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes work = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerBattleField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerBattleField)
  return false;
#undef DO_
}

void MultiplayerBattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerBattleField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required int32 frame = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frame(), output);
  }

  // required int32 rand_seed = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rand_seed(), output);
  }

  // repeated .sg.MultiplayerBattleField.Member members = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->members(static_cast<int>(i)),
      output);
  }

  // repeated .sg.FrameData data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->data(static_cast<int>(i)),
      output);
  }

  // required bytes work = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->work(), output);
  }

  // optional int32 target = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->target(), output);
  }

  // optional int32 type = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerBattleField)
}

::google::protobuf::uint8* MultiplayerBattleField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerBattleField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 frame = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frame(), target);
  }

  // required int32 rand_seed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rand_seed(), target);
  }

  // repeated .sg.MultiplayerBattleField.Member members = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->members(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.FrameData data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->data(static_cast<int>(i)), deterministic, target);
  }

  // required bytes work = 8;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->work(), target);
  }

  // optional int32 target = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->target(), target);
  }

  // optional int32 type = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerBattleField)
  return target;
}

size_t MultiplayerBattleField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MultiplayerBattleField)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_work()) {
    // required bytes work = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->work());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_frame()) {
    // required int32 frame = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  if (has_rand_seed()) {
    // required int32 rand_seed = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rand_seed());
  }

  return total_size;
}
size_t MultiplayerBattleField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerBattleField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes work = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->work());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 frame = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());

    // required int32 rand_seed = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rand_seed());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.MultiplayerBattleField.Member members = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated .sg.FrameData data = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 target = 9;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerBattleField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerBattleField)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerBattleField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerBattleField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerBattleField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerBattleField)
    MergeFrom(*source);
  }
}

void MultiplayerBattleField::MergeFrom(const MultiplayerBattleField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerBattleField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_work(from.work());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      frame_ = from.frame_;
    }
    if (cached_has_bits & 0x00000020u) {
      rand_seed_ = from.rand_seed_;
    }
    if (cached_has_bits & 0x00000040u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiplayerBattleField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerBattleField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerBattleField::CopyFrom(const MultiplayerBattleField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerBattleField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerBattleField::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void MultiplayerBattleField::Swap(MultiplayerBattleField* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerBattleField* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerBattleField::UnsafeArenaSwap(MultiplayerBattleField* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerBattleField::InternalSwap(MultiplayerBattleField* other) {
  using std::swap;
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  work_.Swap(&other->work_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(frame_, other->frame_);
  swap(rand_seed_, other->rand_seed_);
  swap(target_, other->target_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerBattleField::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerTeamService_MultiplayerTeamRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerTeamService_MultiplayerTeamRequest::kCmdFieldNumber;
const int MultiplayerTeamService_MultiplayerTeamRequest::kTargetIdFieldNumber;
const int MultiplayerTeamService_MultiplayerTeamRequest::kSeatFieldNumber;
const int MultiplayerTeamService_MultiplayerTeamRequest::kWorkFieldNumber;
const int MultiplayerTeamService_MultiplayerTeamRequest::kTypeFieldNumber;
const int MultiplayerTeamService_MultiplayerTeamRequest::kNameFieldNumber;
const int MultiplayerTeamService_MultiplayerTeamRequest::kNewOwnerFieldNumber;
const int MultiplayerTeamService_MultiplayerTeamRequest::kTalkDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerTeamService_MultiplayerTeamRequest::MultiplayerTeamService_MultiplayerTeamRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService_MultiplayerTeamRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerTeamService.MultiplayerTeamRequest)
}
MultiplayerTeamService_MultiplayerTeamRequest::MultiplayerTeamService_MultiplayerTeamRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService_MultiplayerTeamRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerTeamService.MultiplayerTeamRequest)
}
MultiplayerTeamService_MultiplayerTeamRequest::MultiplayerTeamService_MultiplayerTeamRequest(const MultiplayerTeamService_MultiplayerTeamRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  work_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_work()) {
    work_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.work(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  talk_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_talk_data()) {
    talk_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talk_data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerTeamService.MultiplayerTeamRequest)
}

void MultiplayerTeamService_MultiplayerTeamRequest::SharedCtor() {
  work_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talk_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_owner_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(new_owner_));
  cmd_ = 1;
}

MultiplayerTeamService_MultiplayerTeamRequest::~MultiplayerTeamService_MultiplayerTeamRequest() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  SharedDtor();
}

void MultiplayerTeamService_MultiplayerTeamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  work_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talk_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultiplayerTeamService_MultiplayerTeamRequest::ArenaDtor(void* object) {
  MultiplayerTeamService_MultiplayerTeamRequest* _this = reinterpret_cast< MultiplayerTeamService_MultiplayerTeamRequest* >(object);
  (void)_this;
}
void MultiplayerTeamService_MultiplayerTeamRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerTeamService_MultiplayerTeamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerTeamService_MultiplayerTeamRequest::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerTeamService_MultiplayerTeamRequest& MultiplayerTeamService_MultiplayerTeamRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService_MultiplayerTeamRequest.base);
  return *internal_default_instance();
}


void MultiplayerTeamService_MultiplayerTeamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      work_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      talk_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&target_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_owner_) -
        reinterpret_cast<char*>(&target_id_)) + sizeof(new_owner_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerTeamService_MultiplayerTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.MultiplayerTeamService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::MultiplayerTeamService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::MultiplayerTeamService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_seat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes work = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_owner = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_new_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes talk_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_talk_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  return false;
#undef DO_
}

void MultiplayerTeamService_MultiplayerTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MultiplayerTeamService.CMD cmd = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 target_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_id(), output);
  }

  // optional int32 seat = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  // optional bytes work = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->work(), output);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional bytes name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->name(), output);
  }

  // optional int32 new_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->new_owner(), output);
  }

  // optional bytes talk_data = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->talk_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerTeamService.MultiplayerTeamRequest)
}

::google::protobuf::uint8* MultiplayerTeamService_MultiplayerTeamRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MultiplayerTeamService.CMD cmd = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 target_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_id(), target);
  }

  // optional int32 seat = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat(), target);
  }

  // optional bytes work = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->work(), target);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional bytes name = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->name(), target);
  }

  // optional int32 new_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->new_owner(), target);
  }

  // optional bytes talk_data = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->talk_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  return target;
}

size_t MultiplayerTeamService_MultiplayerTeamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.MultiplayerTeamService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes work = 4;
    if (has_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->work());
    }

    // optional bytes name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes talk_data = 8;
    if (has_talk_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->talk_data());
    }

    // optional int32 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_id());
    }

    // optional int32 seat = 3;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 new_owner = 7;
    if (has_new_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_owner());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerTeamService_MultiplayerTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerTeamService_MultiplayerTeamRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerTeamService_MultiplayerTeamRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerTeamService.MultiplayerTeamRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerTeamService.MultiplayerTeamRequest)
    MergeFrom(*source);
  }
}

void MultiplayerTeamService_MultiplayerTeamRequest::MergeFrom(const MultiplayerTeamService_MultiplayerTeamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_work(from.work());
    }
    if (cached_has_bits & 0x00000002u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000004u) {
      set_talk_data(from.talk_data());
    }
    if (cached_has_bits & 0x00000008u) {
      target_id_ = from.target_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      seat_ = from.seat_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      new_owner_ = from.new_owner_;
    }
    if (cached_has_bits & 0x00000080u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiplayerTeamService_MultiplayerTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerTeamService_MultiplayerTeamRequest::CopyFrom(const MultiplayerTeamService_MultiplayerTeamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerTeamService.MultiplayerTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerTeamService_MultiplayerTeamRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  return true;
}

void MultiplayerTeamService_MultiplayerTeamRequest::Swap(MultiplayerTeamService_MultiplayerTeamRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerTeamService_MultiplayerTeamRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerTeamService_MultiplayerTeamRequest::UnsafeArenaSwap(MultiplayerTeamService_MultiplayerTeamRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerTeamService_MultiplayerTeamRequest::InternalSwap(MultiplayerTeamService_MultiplayerTeamRequest* other) {
  using std::swap;
  work_.Swap(&other->work_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  talk_data_.Swap(&other->talk_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_id_, other->target_id_);
  swap(seat_, other->seat_);
  swap(type_, other->type_);
  swap(new_owner_, other->new_owner_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerTeamService_MultiplayerTeamRequest::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerTeamService_MultiplayerTeamResponse::InitAsDefaultInstance() {
  ::sg::_MultiplayerTeamService_MultiplayerTeamResponse_default_instance_._instance.get_mutable()->my_room_ = const_cast< ::sg::MultiplayerRoom*>(
      ::sg::MultiplayerRoom::internal_default_instance());
}
void MultiplayerTeamService_MultiplayerTeamResponse::unsafe_arena_set_allocated_my_room(
    ::sg::MultiplayerRoom* my_room) {
  if (GetArenaNoVirtual() == NULL) {
    delete my_room_;
  }
  my_room_ = my_room;
  if (my_room) {
    set_has_my_room();
  } else {
    clear_has_my_room();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MultiplayerTeamService.MultiplayerTeamResponse.my_room)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerTeamService_MultiplayerTeamResponse::kResultFieldNumber;
const int MultiplayerTeamService_MultiplayerTeamResponse::kMyRoomFieldNumber;
const int MultiplayerTeamService_MultiplayerTeamResponse::kRoomListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerTeamService_MultiplayerTeamResponse::MultiplayerTeamService_MultiplayerTeamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService_MultiplayerTeamResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerTeamService.MultiplayerTeamResponse)
}
MultiplayerTeamService_MultiplayerTeamResponse::MultiplayerTeamService_MultiplayerTeamResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  room_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService_MultiplayerTeamResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerTeamService.MultiplayerTeamResponse)
}
MultiplayerTeamService_MultiplayerTeamResponse::MultiplayerTeamService_MultiplayerTeamResponse(const MultiplayerTeamService_MultiplayerTeamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      room_list_(from.room_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_my_room()) {
    my_room_ = new ::sg::MultiplayerRoom(*from.my_room_);
  } else {
    my_room_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerTeamService.MultiplayerTeamResponse)
}

void MultiplayerTeamService_MultiplayerTeamResponse::SharedCtor() {
  ::memset(&my_room_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&my_room_)) + sizeof(result_));
}

MultiplayerTeamService_MultiplayerTeamResponse::~MultiplayerTeamService_MultiplayerTeamResponse() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  SharedDtor();
}

void MultiplayerTeamService_MultiplayerTeamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete my_room_;
}

void MultiplayerTeamService_MultiplayerTeamResponse::ArenaDtor(void* object) {
  MultiplayerTeamService_MultiplayerTeamResponse* _this = reinterpret_cast< MultiplayerTeamService_MultiplayerTeamResponse* >(object);
  (void)_this;
}
void MultiplayerTeamService_MultiplayerTeamResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerTeamService_MultiplayerTeamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerTeamService_MultiplayerTeamResponse::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerTeamService_MultiplayerTeamResponse& MultiplayerTeamService_MultiplayerTeamResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService_MultiplayerTeamResponse.base);
  return *internal_default_instance();
}


void MultiplayerTeamService_MultiplayerTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(my_room_ != NULL);
    my_room_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerTeamService_MultiplayerTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MultiplayerRoom my_room = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_my_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.MultiplayerRoom room_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_room_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  return false;
#undef DO_
}

void MultiplayerTeamService_MultiplayerTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.MultiplayerRoom my_room = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_my_room(), output);
  }

  // repeated .sg.MultiplayerRoom room_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->room_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerTeamService.MultiplayerTeamResponse)
}

::google::protobuf::uint8* MultiplayerTeamService_MultiplayerTeamResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.MultiplayerRoom my_room = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_my_room(), deterministic, target);
  }

  // repeated .sg.MultiplayerRoom room_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->room_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  return target;
}

size_t MultiplayerTeamService_MultiplayerTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.MultiplayerRoom room_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->room_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->room_list(static_cast<int>(i)));
    }
  }

  // optional .sg.MultiplayerRoom my_room = 2;
  if (has_my_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *my_room_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerTeamService_MultiplayerTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerTeamService_MultiplayerTeamResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerTeamService_MultiplayerTeamResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerTeamService.MultiplayerTeamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerTeamService.MultiplayerTeamResponse)
    MergeFrom(*source);
  }
}

void MultiplayerTeamService_MultiplayerTeamResponse::MergeFrom(const MultiplayerTeamService_MultiplayerTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  room_list_.MergeFrom(from.room_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_my_room()->::sg::MultiplayerRoom::MergeFrom(from.my_room());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiplayerTeamService_MultiplayerTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerTeamService_MultiplayerTeamResponse::CopyFrom(const MultiplayerTeamService_MultiplayerTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerTeamService.MultiplayerTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerTeamService_MultiplayerTeamResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->room_list())) return false;
  if (has_my_room()) {
    if (!this->my_room_->IsInitialized()) return false;
  }
  return true;
}

void MultiplayerTeamService_MultiplayerTeamResponse::Swap(MultiplayerTeamService_MultiplayerTeamResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerTeamService_MultiplayerTeamResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerTeamService_MultiplayerTeamResponse::UnsafeArenaSwap(MultiplayerTeamService_MultiplayerTeamResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerTeamService_MultiplayerTeamResponse::InternalSwap(MultiplayerTeamService_MultiplayerTeamResponse* other) {
  using std::swap;
  CastToBase(&room_list_)->InternalSwap(CastToBase(&other->room_list_));
  swap(my_room_, other->my_room_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerTeamService_MultiplayerTeamResponse::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerTeamService::InitAsDefaultInstance() {
  ::sg::_MultiplayerTeamService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::MultiplayerTeamService_MultiplayerTeamRequest*>(
      ::sg::MultiplayerTeamService_MultiplayerTeamRequest::internal_default_instance());
  ::sg::_MultiplayerTeamService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::MultiplayerTeamService_MultiplayerTeamResponse*>(
      ::sg::MultiplayerTeamService_MultiplayerTeamResponse::internal_default_instance());
}
void MultiplayerTeamService::unsafe_arena_set_allocated_req(
    ::sg::MultiplayerTeamService_MultiplayerTeamRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MultiplayerTeamService.req)
}
void MultiplayerTeamService::unsafe_arena_set_allocated_resp(
    ::sg::MultiplayerTeamService_MultiplayerTeamResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MultiplayerTeamService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerTeamService::kReqFieldNumber;
const int MultiplayerTeamService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerTeamService::MultiplayerTeamService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerTeamService)
}
MultiplayerTeamService::MultiplayerTeamService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerTeamService)
}
MultiplayerTeamService::MultiplayerTeamService(const MultiplayerTeamService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::MultiplayerTeamService_MultiplayerTeamRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::MultiplayerTeamService_MultiplayerTeamResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerTeamService)
}

void MultiplayerTeamService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

MultiplayerTeamService::~MultiplayerTeamService() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerTeamService)
  SharedDtor();
}

void MultiplayerTeamService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void MultiplayerTeamService::ArenaDtor(void* object) {
  MultiplayerTeamService* _this = reinterpret_cast< MultiplayerTeamService* >(object);
  (void)_this;
}
void MultiplayerTeamService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerTeamService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerTeamService::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerTeamService& MultiplayerTeamService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerTeamService.base);
  return *internal_default_instance();
}


void MultiplayerTeamService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerTeamService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerTeamService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerTeamService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerTeamService.MultiplayerTeamRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MultiplayerTeamService.MultiplayerTeamResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerTeamService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerTeamService)
  return false;
#undef DO_
}

void MultiplayerTeamService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerTeamService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerTeamService.MultiplayerTeamRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.MultiplayerTeamService.MultiplayerTeamResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerTeamService)
}

::google::protobuf::uint8* MultiplayerTeamService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerTeamService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerTeamService.MultiplayerTeamRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.MultiplayerTeamService.MultiplayerTeamResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerTeamService)
  return target;
}

size_t MultiplayerTeamService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerTeamService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.MultiplayerTeamService.MultiplayerTeamRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.MultiplayerTeamService.MultiplayerTeamResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerTeamService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerTeamService)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerTeamService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerTeamService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerTeamService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerTeamService)
    MergeFrom(*source);
  }
}

void MultiplayerTeamService::MergeFrom(const MultiplayerTeamService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerTeamService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::MultiplayerTeamService_MultiplayerTeamRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::MultiplayerTeamService_MultiplayerTeamResponse::MergeFrom(from.resp());
    }
  }
}

void MultiplayerTeamService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerTeamService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerTeamService::CopyFrom(const MultiplayerTeamService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerTeamService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerTeamService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void MultiplayerTeamService::Swap(MultiplayerTeamService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerTeamService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerTeamService::UnsafeArenaSwap(MultiplayerTeamService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerTeamService::InternalSwap(MultiplayerTeamService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerTeamService::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserTalkNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTalkNotify::kIndexFieldNumber;
const int UserTalkNotify::kTimestampFieldNumber;
const int UserTalkNotify::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTalkNotify::UserTalkNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserTalkNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserTalkNotify)
}
UserTalkNotify::UserTalkNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserTalkNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserTalkNotify)
}
UserTalkNotify::UserTalkNotify(const UserTalkNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:sg.UserTalkNotify)
}

void UserTalkNotify::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
}

UserTalkNotify::~UserTalkNotify() {
  // @@protoc_insertion_point(destructor:sg.UserTalkNotify)
  SharedDtor();
}

void UserTalkNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserTalkNotify::ArenaDtor(void* object) {
  UserTalkNotify* _this = reinterpret_cast< UserTalkNotify* >(object);
  (void)_this;
}
void UserTalkNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserTalkNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserTalkNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserTalkNotify& UserTalkNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserTalkNotify.base);
  return *internal_default_instance();
}


void UserTalkNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserTalkNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserTalkNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserTalkNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserTalkNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserTalkNotify)
  return false;
#undef DO_
}

void UserTalkNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserTalkNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required sfixed64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->timestamp(), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserTalkNotify)
}

::google::protobuf::uint8* UserTalkNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserTalkNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required sfixed64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->timestamp(), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserTalkNotify)
  return target;
}

size_t UserTalkNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.UserTalkNotify)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_timestamp()) {
    // required sfixed64 timestamp = 2;
    total_size += 1 + 8;
  }

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  return total_size;
}
size_t UserTalkNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserTalkNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required sfixed64 timestamp = 2;
    total_size += 1 + 8;

    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTalkNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserTalkNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTalkNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserTalkNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserTalkNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserTalkNotify)
    MergeFrom(*source);
  }
}

void UserTalkNotify::MergeFrom(const UserTalkNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserTalkNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_data(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserTalkNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserTalkNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTalkNotify::CopyFrom(const UserTalkNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserTalkNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTalkNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UserTalkNotify::Swap(UserTalkNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserTalkNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserTalkNotify::UnsafeArenaSwap(UserTalkNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserTalkNotify::InternalSwap(UserTalkNotify* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserTalkNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserAddNotify::InitAsDefaultInstance() {
  ::sg::_UserAddNotify_default_instance_._instance.get_mutable()->room_data_ = const_cast< ::sg::MultiplayerRoom*>(
      ::sg::MultiplayerRoom::internal_default_instance());
}
void UserAddNotify::unsafe_arena_set_allocated_room_data(
    ::sg::MultiplayerRoom* room_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete room_data_;
  }
  room_data_ = room_data;
  if (room_data) {
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserAddNotify.room_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserAddNotify::kRoomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserAddNotify::UserAddNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserAddNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserAddNotify)
}
UserAddNotify::UserAddNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserAddNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserAddNotify)
}
UserAddNotify::UserAddNotify(const UserAddNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room_data()) {
    room_data_ = new ::sg::MultiplayerRoom(*from.room_data_);
  } else {
    room_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserAddNotify)
}

void UserAddNotify::SharedCtor() {
  room_data_ = NULL;
}

UserAddNotify::~UserAddNotify() {
  // @@protoc_insertion_point(destructor:sg.UserAddNotify)
  SharedDtor();
}

void UserAddNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete room_data_;
}

void UserAddNotify::ArenaDtor(void* object) {
  UserAddNotify* _this = reinterpret_cast< UserAddNotify* >(object);
  (void)_this;
}
void UserAddNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserAddNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserAddNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserAddNotify& UserAddNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserAddNotify.base);
  return *internal_default_instance();
}


void UserAddNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(room_data_ != NULL);
    room_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserAddNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserAddNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerRoom room_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserAddNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserAddNotify)
  return false;
#undef DO_
}

void UserAddNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_room_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserAddNotify)
}

::google::protobuf::uint8* UserAddNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_room_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserAddNotify)
  return target;
}

size_t UserAddNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserAddNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.MultiplayerRoom room_data = 1;
  if (has_room_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAddNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserAddNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAddNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserAddNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserAddNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserAddNotify)
    MergeFrom(*source);
  }
}

void UserAddNotify::MergeFrom(const UserAddNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserAddNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room_data()) {
    mutable_room_data()->::sg::MultiplayerRoom::MergeFrom(from.room_data());
  }
}

void UserAddNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserAddNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAddNotify::CopyFrom(const UserAddNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserAddNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAddNotify::IsInitialized() const {
  if (has_room_data()) {
    if (!this->room_data_->IsInitialized()) return false;
  }
  return true;
}

void UserAddNotify::Swap(UserAddNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserAddNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserAddNotify::UnsafeArenaSwap(UserAddNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserAddNotify::InternalSwap(UserAddNotify* other) {
  using std::swap;
  swap(room_data_, other->room_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserAddNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserChangeSeatNotify::InitAsDefaultInstance() {
  ::sg::_UserChangeSeatNotify_default_instance_._instance.get_mutable()->room_data_ = const_cast< ::sg::MultiplayerRoom*>(
      ::sg::MultiplayerRoom::internal_default_instance());
}
void UserChangeSeatNotify::unsafe_arena_set_allocated_room_data(
    ::sg::MultiplayerRoom* room_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete room_data_;
  }
  room_data_ = room_data;
  if (room_data) {
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserChangeSeatNotify.room_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChangeSeatNotify::kRoomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChangeSeatNotify::UserChangeSeatNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserChangeSeatNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserChangeSeatNotify)
}
UserChangeSeatNotify::UserChangeSeatNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserChangeSeatNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserChangeSeatNotify)
}
UserChangeSeatNotify::UserChangeSeatNotify(const UserChangeSeatNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room_data()) {
    room_data_ = new ::sg::MultiplayerRoom(*from.room_data_);
  } else {
    room_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserChangeSeatNotify)
}

void UserChangeSeatNotify::SharedCtor() {
  room_data_ = NULL;
}

UserChangeSeatNotify::~UserChangeSeatNotify() {
  // @@protoc_insertion_point(destructor:sg.UserChangeSeatNotify)
  SharedDtor();
}

void UserChangeSeatNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete room_data_;
}

void UserChangeSeatNotify::ArenaDtor(void* object) {
  UserChangeSeatNotify* _this = reinterpret_cast< UserChangeSeatNotify* >(object);
  (void)_this;
}
void UserChangeSeatNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserChangeSeatNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserChangeSeatNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserChangeSeatNotify& UserChangeSeatNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserChangeSeatNotify.base);
  return *internal_default_instance();
}


void UserChangeSeatNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserChangeSeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(room_data_ != NULL);
    room_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserChangeSeatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserChangeSeatNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerRoom room_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserChangeSeatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserChangeSeatNotify)
  return false;
#undef DO_
}

void UserChangeSeatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserChangeSeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_room_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserChangeSeatNotify)
}

::google::protobuf::uint8* UserChangeSeatNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserChangeSeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_room_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserChangeSeatNotify)
  return target;
}

size_t UserChangeSeatNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserChangeSeatNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.MultiplayerRoom room_data = 1;
  if (has_room_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChangeSeatNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserChangeSeatNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChangeSeatNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChangeSeatNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserChangeSeatNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserChangeSeatNotify)
    MergeFrom(*source);
  }
}

void UserChangeSeatNotify::MergeFrom(const UserChangeSeatNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserChangeSeatNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room_data()) {
    mutable_room_data()->::sg::MultiplayerRoom::MergeFrom(from.room_data());
  }
}

void UserChangeSeatNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserChangeSeatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChangeSeatNotify::CopyFrom(const UserChangeSeatNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserChangeSeatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChangeSeatNotify::IsInitialized() const {
  if (has_room_data()) {
    if (!this->room_data_->IsInitialized()) return false;
  }
  return true;
}

void UserChangeSeatNotify::Swap(UserChangeSeatNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserChangeSeatNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserChangeSeatNotify::UnsafeArenaSwap(UserChangeSeatNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserChangeSeatNotify::InternalSwap(UserChangeSeatNotify* other) {
  using std::swap;
  swap(room_data_, other->room_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserChangeSeatNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDeleteRoomNotify::InitAsDefaultInstance() {
  ::sg::_UserDeleteRoomNotify_default_instance_._instance.get_mutable()->room_data_ = const_cast< ::sg::MultiplayerRoom*>(
      ::sg::MultiplayerRoom::internal_default_instance());
}
void UserDeleteRoomNotify::unsafe_arena_set_allocated_room_data(
    ::sg::MultiplayerRoom* room_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete room_data_;
  }
  room_data_ = room_data;
  if (room_data) {
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserDeleteRoomNotify.room_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDeleteRoomNotify::kRoomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDeleteRoomNotify::UserDeleteRoomNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserDeleteRoomNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserDeleteRoomNotify)
}
UserDeleteRoomNotify::UserDeleteRoomNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserDeleteRoomNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserDeleteRoomNotify)
}
UserDeleteRoomNotify::UserDeleteRoomNotify(const UserDeleteRoomNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room_data()) {
    room_data_ = new ::sg::MultiplayerRoom(*from.room_data_);
  } else {
    room_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserDeleteRoomNotify)
}

void UserDeleteRoomNotify::SharedCtor() {
  room_data_ = NULL;
}

UserDeleteRoomNotify::~UserDeleteRoomNotify() {
  // @@protoc_insertion_point(destructor:sg.UserDeleteRoomNotify)
  SharedDtor();
}

void UserDeleteRoomNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete room_data_;
}

void UserDeleteRoomNotify::ArenaDtor(void* object) {
  UserDeleteRoomNotify* _this = reinterpret_cast< UserDeleteRoomNotify* >(object);
  (void)_this;
}
void UserDeleteRoomNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserDeleteRoomNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDeleteRoomNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDeleteRoomNotify& UserDeleteRoomNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserDeleteRoomNotify.base);
  return *internal_default_instance();
}


void UserDeleteRoomNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserDeleteRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(room_data_ != NULL);
    room_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDeleteRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserDeleteRoomNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerRoom room_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserDeleteRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserDeleteRoomNotify)
  return false;
#undef DO_
}

void UserDeleteRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserDeleteRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_room_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserDeleteRoomNotify)
}

::google::protobuf::uint8* UserDeleteRoomNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserDeleteRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_room_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserDeleteRoomNotify)
  return target;
}

size_t UserDeleteRoomNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserDeleteRoomNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.MultiplayerRoom room_data = 1;
  if (has_room_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDeleteRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserDeleteRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDeleteRoomNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDeleteRoomNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserDeleteRoomNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserDeleteRoomNotify)
    MergeFrom(*source);
  }
}

void UserDeleteRoomNotify::MergeFrom(const UserDeleteRoomNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserDeleteRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room_data()) {
    mutable_room_data()->::sg::MultiplayerRoom::MergeFrom(from.room_data());
  }
}

void UserDeleteRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserDeleteRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDeleteRoomNotify::CopyFrom(const UserDeleteRoomNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserDeleteRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDeleteRoomNotify::IsInitialized() const {
  if (has_room_data()) {
    if (!this->room_data_->IsInitialized()) return false;
  }
  return true;
}

void UserDeleteRoomNotify::Swap(UserDeleteRoomNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserDeleteRoomNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserDeleteRoomNotify::UnsafeArenaSwap(UserDeleteRoomNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserDeleteRoomNotify::InternalSwap(UserDeleteRoomNotify* other) {
  using std::swap;
  swap(room_data_, other->room_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDeleteRoomNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserChangeOwnerNotify::InitAsDefaultInstance() {
  ::sg::_UserChangeOwnerNotify_default_instance_._instance.get_mutable()->room_data_ = const_cast< ::sg::MultiplayerRoom*>(
      ::sg::MultiplayerRoom::internal_default_instance());
}
void UserChangeOwnerNotify::unsafe_arena_set_allocated_room_data(
    ::sg::MultiplayerRoom* room_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete room_data_;
  }
  room_data_ = room_data;
  if (room_data) {
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserChangeOwnerNotify.room_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChangeOwnerNotify::kRoomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChangeOwnerNotify::UserChangeOwnerNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserChangeOwnerNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserChangeOwnerNotify)
}
UserChangeOwnerNotify::UserChangeOwnerNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserChangeOwnerNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserChangeOwnerNotify)
}
UserChangeOwnerNotify::UserChangeOwnerNotify(const UserChangeOwnerNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room_data()) {
    room_data_ = new ::sg::MultiplayerRoom(*from.room_data_);
  } else {
    room_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserChangeOwnerNotify)
}

void UserChangeOwnerNotify::SharedCtor() {
  room_data_ = NULL;
}

UserChangeOwnerNotify::~UserChangeOwnerNotify() {
  // @@protoc_insertion_point(destructor:sg.UserChangeOwnerNotify)
  SharedDtor();
}

void UserChangeOwnerNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete room_data_;
}

void UserChangeOwnerNotify::ArenaDtor(void* object) {
  UserChangeOwnerNotify* _this = reinterpret_cast< UserChangeOwnerNotify* >(object);
  (void)_this;
}
void UserChangeOwnerNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserChangeOwnerNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserChangeOwnerNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserChangeOwnerNotify& UserChangeOwnerNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserChangeOwnerNotify.base);
  return *internal_default_instance();
}


void UserChangeOwnerNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserChangeOwnerNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(room_data_ != NULL);
    room_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserChangeOwnerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserChangeOwnerNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerRoom room_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserChangeOwnerNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserChangeOwnerNotify)
  return false;
#undef DO_
}

void UserChangeOwnerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserChangeOwnerNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_room_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserChangeOwnerNotify)
}

::google::protobuf::uint8* UserChangeOwnerNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserChangeOwnerNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_room_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserChangeOwnerNotify)
  return target;
}

size_t UserChangeOwnerNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserChangeOwnerNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.MultiplayerRoom room_data = 1;
  if (has_room_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChangeOwnerNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserChangeOwnerNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChangeOwnerNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChangeOwnerNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserChangeOwnerNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserChangeOwnerNotify)
    MergeFrom(*source);
  }
}

void UserChangeOwnerNotify::MergeFrom(const UserChangeOwnerNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserChangeOwnerNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room_data()) {
    mutable_room_data()->::sg::MultiplayerRoom::MergeFrom(from.room_data());
  }
}

void UserChangeOwnerNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserChangeOwnerNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChangeOwnerNotify::CopyFrom(const UserChangeOwnerNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserChangeOwnerNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChangeOwnerNotify::IsInitialized() const {
  if (has_room_data()) {
    if (!this->room_data_->IsInitialized()) return false;
  }
  return true;
}

void UserChangeOwnerNotify::Swap(UserChangeOwnerNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserChangeOwnerNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserChangeOwnerNotify::UnsafeArenaSwap(UserChangeOwnerNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserChangeOwnerNotify::InternalSwap(UserChangeOwnerNotify* other) {
  using std::swap;
  swap(room_data_, other->room_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserChangeOwnerNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserChangeWorkNotify::InitAsDefaultInstance() {
  ::sg::_UserChangeWorkNotify_default_instance_._instance.get_mutable()->room_data_ = const_cast< ::sg::MultiplayerRoom*>(
      ::sg::MultiplayerRoom::internal_default_instance());
}
void UserChangeWorkNotify::unsafe_arena_set_allocated_room_data(
    ::sg::MultiplayerRoom* room_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete room_data_;
  }
  room_data_ = room_data;
  if (room_data) {
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserChangeWorkNotify.room_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChangeWorkNotify::kRoomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChangeWorkNotify::UserChangeWorkNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserChangeWorkNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserChangeWorkNotify)
}
UserChangeWorkNotify::UserChangeWorkNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserChangeWorkNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserChangeWorkNotify)
}
UserChangeWorkNotify::UserChangeWorkNotify(const UserChangeWorkNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room_data()) {
    room_data_ = new ::sg::MultiplayerRoom(*from.room_data_);
  } else {
    room_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserChangeWorkNotify)
}

void UserChangeWorkNotify::SharedCtor() {
  room_data_ = NULL;
}

UserChangeWorkNotify::~UserChangeWorkNotify() {
  // @@protoc_insertion_point(destructor:sg.UserChangeWorkNotify)
  SharedDtor();
}

void UserChangeWorkNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete room_data_;
}

void UserChangeWorkNotify::ArenaDtor(void* object) {
  UserChangeWorkNotify* _this = reinterpret_cast< UserChangeWorkNotify* >(object);
  (void)_this;
}
void UserChangeWorkNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserChangeWorkNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserChangeWorkNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserChangeWorkNotify& UserChangeWorkNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserChangeWorkNotify.base);
  return *internal_default_instance();
}


void UserChangeWorkNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserChangeWorkNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(room_data_ != NULL);
    room_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserChangeWorkNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserChangeWorkNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerRoom room_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserChangeWorkNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserChangeWorkNotify)
  return false;
#undef DO_
}

void UserChangeWorkNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserChangeWorkNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_room_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserChangeWorkNotify)
}

::google::protobuf::uint8* UserChangeWorkNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserChangeWorkNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_room_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserChangeWorkNotify)
  return target;
}

size_t UserChangeWorkNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserChangeWorkNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.MultiplayerRoom room_data = 1;
  if (has_room_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChangeWorkNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserChangeWorkNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChangeWorkNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChangeWorkNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserChangeWorkNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserChangeWorkNotify)
    MergeFrom(*source);
  }
}

void UserChangeWorkNotify::MergeFrom(const UserChangeWorkNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserChangeWorkNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room_data()) {
    mutable_room_data()->::sg::MultiplayerRoom::MergeFrom(from.room_data());
  }
}

void UserChangeWorkNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserChangeWorkNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChangeWorkNotify::CopyFrom(const UserChangeWorkNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserChangeWorkNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChangeWorkNotify::IsInitialized() const {
  if (has_room_data()) {
    if (!this->room_data_->IsInitialized()) return false;
  }
  return true;
}

void UserChangeWorkNotify::Swap(UserChangeWorkNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserChangeWorkNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserChangeWorkNotify::UnsafeArenaSwap(UserChangeWorkNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserChangeWorkNotify::InternalSwap(UserChangeWorkNotify* other) {
  using std::swap;
  swap(room_data_, other->room_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserChangeWorkNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserLeaveNotify::InitAsDefaultInstance() {
  ::sg::_UserLeaveNotify_default_instance_._instance.get_mutable()->room_data_ = const_cast< ::sg::MultiplayerRoom*>(
      ::sg::MultiplayerRoom::internal_default_instance());
}
void UserLeaveNotify::unsafe_arena_set_allocated_room_data(
    ::sg::MultiplayerRoom* room_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete room_data_;
  }
  room_data_ = room_data;
  if (room_data) {
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserLeaveNotify.room_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLeaveNotify::kRoomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLeaveNotify::UserLeaveNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserLeaveNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserLeaveNotify)
}
UserLeaveNotify::UserLeaveNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserLeaveNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserLeaveNotify)
}
UserLeaveNotify::UserLeaveNotify(const UserLeaveNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room_data()) {
    room_data_ = new ::sg::MultiplayerRoom(*from.room_data_);
  } else {
    room_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserLeaveNotify)
}

void UserLeaveNotify::SharedCtor() {
  room_data_ = NULL;
}

UserLeaveNotify::~UserLeaveNotify() {
  // @@protoc_insertion_point(destructor:sg.UserLeaveNotify)
  SharedDtor();
}

void UserLeaveNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete room_data_;
}

void UserLeaveNotify::ArenaDtor(void* object) {
  UserLeaveNotify* _this = reinterpret_cast< UserLeaveNotify* >(object);
  (void)_this;
}
void UserLeaveNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserLeaveNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserLeaveNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserLeaveNotify& UserLeaveNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserLeaveNotify.base);
  return *internal_default_instance();
}


void UserLeaveNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserLeaveNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(room_data_ != NULL);
    room_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserLeaveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserLeaveNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerRoom room_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserLeaveNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserLeaveNotify)
  return false;
#undef DO_
}

void UserLeaveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserLeaveNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_room_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserLeaveNotify)
}

::google::protobuf::uint8* UserLeaveNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserLeaveNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_room_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserLeaveNotify)
  return target;
}

size_t UserLeaveNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserLeaveNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.MultiplayerRoom room_data = 1;
  if (has_room_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLeaveNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserLeaveNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLeaveNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserLeaveNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserLeaveNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserLeaveNotify)
    MergeFrom(*source);
  }
}

void UserLeaveNotify::MergeFrom(const UserLeaveNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserLeaveNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room_data()) {
    mutable_room_data()->::sg::MultiplayerRoom::MergeFrom(from.room_data());
  }
}

void UserLeaveNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserLeaveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLeaveNotify::CopyFrom(const UserLeaveNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserLeaveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLeaveNotify::IsInitialized() const {
  if (has_room_data()) {
    if (!this->room_data_->IsInitialized()) return false;
  }
  return true;
}

void UserLeaveNotify::Swap(UserLeaveNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserLeaveNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserLeaveNotify::UnsafeArenaSwap(UserLeaveNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserLeaveNotify::InternalSwap(UserLeaveNotify* other) {
  using std::swap;
  swap(room_data_, other->room_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserLeaveNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserRenameNotify::InitAsDefaultInstance() {
  ::sg::_UserRenameNotify_default_instance_._instance.get_mutable()->room_data_ = const_cast< ::sg::MultiplayerRoom*>(
      ::sg::MultiplayerRoom::internal_default_instance());
}
void UserRenameNotify::unsafe_arena_set_allocated_room_data(
    ::sg::MultiplayerRoom* room_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete room_data_;
  }
  room_data_ = room_data;
  if (room_data) {
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserRenameNotify.room_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRenameNotify::kRoomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRenameNotify::UserRenameNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserRenameNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserRenameNotify)
}
UserRenameNotify::UserRenameNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserRenameNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserRenameNotify)
}
UserRenameNotify::UserRenameNotify(const UserRenameNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room_data()) {
    room_data_ = new ::sg::MultiplayerRoom(*from.room_data_);
  } else {
    room_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserRenameNotify)
}

void UserRenameNotify::SharedCtor() {
  room_data_ = NULL;
}

UserRenameNotify::~UserRenameNotify() {
  // @@protoc_insertion_point(destructor:sg.UserRenameNotify)
  SharedDtor();
}

void UserRenameNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete room_data_;
}

void UserRenameNotify::ArenaDtor(void* object) {
  UserRenameNotify* _this = reinterpret_cast< UserRenameNotify* >(object);
  (void)_this;
}
void UserRenameNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserRenameNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserRenameNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRenameNotify& UserRenameNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserRenameNotify.base);
  return *internal_default_instance();
}


void UserRenameNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserRenameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(room_data_ != NULL);
    room_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserRenameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserRenameNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerRoom room_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserRenameNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserRenameNotify)
  return false;
#undef DO_
}

void UserRenameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserRenameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_room_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserRenameNotify)
}

::google::protobuf::uint8* UserRenameNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserRenameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_room_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserRenameNotify)
  return target;
}

size_t UserRenameNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserRenameNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.MultiplayerRoom room_data = 1;
  if (has_room_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRenameNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserRenameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRenameNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRenameNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserRenameNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserRenameNotify)
    MergeFrom(*source);
  }
}

void UserRenameNotify::MergeFrom(const UserRenameNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserRenameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room_data()) {
    mutable_room_data()->::sg::MultiplayerRoom::MergeFrom(from.room_data());
  }
}

void UserRenameNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserRenameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRenameNotify::CopyFrom(const UserRenameNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserRenameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRenameNotify::IsInitialized() const {
  if (has_room_data()) {
    if (!this->room_data_->IsInitialized()) return false;
  }
  return true;
}

void UserRenameNotify::Swap(UserRenameNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserRenameNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserRenameNotify::UnsafeArenaSwap(UserRenameNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserRenameNotify::InternalSwap(UserRenameNotify* other) {
  using std::swap;
  swap(room_data_, other->room_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserRenameNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BattleReadyNotify::InitAsDefaultInstance() {
  ::sg::_BattleReadyNotify_default_instance_._instance.get_mutable()->room_data_ = const_cast< ::sg::MultiplayerRoom*>(
      ::sg::MultiplayerRoom::internal_default_instance());
}
void BattleReadyNotify::unsafe_arena_set_allocated_room_data(
    ::sg::MultiplayerRoom* room_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete room_data_;
  }
  room_data_ = room_data;
  if (room_data) {
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.BattleReadyNotify.room_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleReadyNotify::kRoomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleReadyNotify::BattleReadyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_BattleReadyNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.BattleReadyNotify)
}
BattleReadyNotify::BattleReadyNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_BattleReadyNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.BattleReadyNotify)
}
BattleReadyNotify::BattleReadyNotify(const BattleReadyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room_data()) {
    room_data_ = new ::sg::MultiplayerRoom(*from.room_data_);
  } else {
    room_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.BattleReadyNotify)
}

void BattleReadyNotify::SharedCtor() {
  room_data_ = NULL;
}

BattleReadyNotify::~BattleReadyNotify() {
  // @@protoc_insertion_point(destructor:sg.BattleReadyNotify)
  SharedDtor();
}

void BattleReadyNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete room_data_;
}

void BattleReadyNotify::ArenaDtor(void* object) {
  BattleReadyNotify* _this = reinterpret_cast< BattleReadyNotify* >(object);
  (void)_this;
}
void BattleReadyNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BattleReadyNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BattleReadyNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattleReadyNotify& BattleReadyNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_BattleReadyNotify.base);
  return *internal_default_instance();
}


void BattleReadyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.BattleReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(room_data_ != NULL);
    room_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BattleReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.BattleReadyNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerRoom room_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.BattleReadyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.BattleReadyNotify)
  return false;
#undef DO_
}

void BattleReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.BattleReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_room_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.BattleReadyNotify)
}

::google::protobuf::uint8* BattleReadyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.BattleReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerRoom room_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_room_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.BattleReadyNotify)
  return target;
}

size_t BattleReadyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.BattleReadyNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.MultiplayerRoom room_data = 1;
  if (has_room_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.BattleReadyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleReadyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleReadyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.BattleReadyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.BattleReadyNotify)
    MergeFrom(*source);
  }
}

void BattleReadyNotify::MergeFrom(const BattleReadyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.BattleReadyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room_data()) {
    mutable_room_data()->::sg::MultiplayerRoom::MergeFrom(from.room_data());
  }
}

void BattleReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.BattleReadyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleReadyNotify::CopyFrom(const BattleReadyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.BattleReadyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleReadyNotify::IsInitialized() const {
  if (has_room_data()) {
    if (!this->room_data_->IsInitialized()) return false;
  }
  return true;
}

void BattleReadyNotify::Swap(BattleReadyNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BattleReadyNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BattleReadyNotify::UnsafeArenaSwap(BattleReadyNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BattleReadyNotify::InternalSwap(BattleReadyNotify* other) {
  using std::swap;
  swap(room_data_, other->room_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BattleReadyNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerBattleService_MultiplayerBattleRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerBattleService_MultiplayerBattleRequest::kCmdFieldNumber;
const int MultiplayerBattleService_MultiplayerBattleRequest::kTargetIdFieldNumber;
const int MultiplayerBattleService_MultiplayerBattleRequest::kSailorsFieldNumber;
const int MultiplayerBattleService_MultiplayerBattleRequest::kOperationListFieldNumber;
const int MultiplayerBattleService_MultiplayerBattleRequest::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerBattleService_MultiplayerBattleRequest::MultiplayerBattleService_MultiplayerBattleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService_MultiplayerBattleRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerBattleService.MultiplayerBattleRequest)
}
MultiplayerBattleService_MultiplayerBattleRequest::MultiplayerBattleService_MultiplayerBattleRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sailors_(arena),
  operation_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService_MultiplayerBattleRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerBattleService.MultiplayerBattleRequest)
}
MultiplayerBattleService_MultiplayerBattleRequest::MultiplayerBattleService_MultiplayerBattleRequest(const MultiplayerBattleService_MultiplayerBattleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sailors_(from.sailors_),
      operation_list_(from.operation_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerBattleService.MultiplayerBattleRequest)
}

void MultiplayerBattleService_MultiplayerBattleRequest::SharedCtor() {
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(result_));
  cmd_ = 1;
}

MultiplayerBattleService_MultiplayerBattleRequest::~MultiplayerBattleService_MultiplayerBattleRequest() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  SharedDtor();
}

void MultiplayerBattleService_MultiplayerBattleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void MultiplayerBattleService_MultiplayerBattleRequest::ArenaDtor(void* object) {
  MultiplayerBattleService_MultiplayerBattleRequest* _this = reinterpret_cast< MultiplayerBattleService_MultiplayerBattleRequest* >(object);
  (void)_this;
}
void MultiplayerBattleService_MultiplayerBattleRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerBattleService_MultiplayerBattleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerBattleService_MultiplayerBattleRequest::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerBattleService_MultiplayerBattleRequest& MultiplayerBattleService_MultiplayerBattleRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService_MultiplayerBattleRequest.base);
  return *internal_default_instance();
}


void MultiplayerBattleService_MultiplayerBattleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sailors_.Clear();
  operation_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&target_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&target_id_)) + sizeof(result_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerBattleService_MultiplayerBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.MultiplayerBattleService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::MultiplayerBattleService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::MultiplayerBattleService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 target_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 sailors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_sailors())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sailors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.FrameData operation_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_operation_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  return false;
#undef DO_
}

void MultiplayerBattleService_MultiplayerBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MultiplayerBattleService.CMD cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint64 target_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_id(), output);
  }

  // repeated int32 sailors = 4;
  for (int i = 0, n = this->sailors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->sailors(i), output);
  }

  // repeated .sg.FrameData operation_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operation_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->operation_list(static_cast<int>(i)),
      output);
  }

  // optional int32 result = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerBattleService.MultiplayerBattleRequest)
}

::google::protobuf::uint8* MultiplayerBattleService_MultiplayerBattleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MultiplayerBattleService.CMD cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint64 target_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_id(), target);
  }

  // repeated int32 sailors = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->sailors_, target);

  // repeated .sg.FrameData operation_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operation_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->operation_list(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 result = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  return target;
}

size_t MultiplayerBattleService_MultiplayerBattleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.MultiplayerBattleService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated int32 sailors = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->sailors_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sailors_size());
    total_size += data_size;
  }

  // repeated .sg.FrameData operation_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->operation_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->operation_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional int32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerBattleService_MultiplayerBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerBattleService_MultiplayerBattleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerBattleService_MultiplayerBattleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerBattleService.MultiplayerBattleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerBattleService.MultiplayerBattleRequest)
    MergeFrom(*source);
  }
}

void MultiplayerBattleService_MultiplayerBattleRequest::MergeFrom(const MultiplayerBattleService_MultiplayerBattleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sailors_.MergeFrom(from.sailors_);
  operation_list_.MergeFrom(from.operation_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      target_id_ = from.target_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiplayerBattleService_MultiplayerBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerBattleService_MultiplayerBattleRequest::CopyFrom(const MultiplayerBattleService_MultiplayerBattleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerBattleService.MultiplayerBattleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerBattleService_MultiplayerBattleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void MultiplayerBattleService_MultiplayerBattleRequest::Swap(MultiplayerBattleService_MultiplayerBattleRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerBattleService_MultiplayerBattleRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerBattleService_MultiplayerBattleRequest::UnsafeArenaSwap(MultiplayerBattleService_MultiplayerBattleRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerBattleService_MultiplayerBattleRequest::InternalSwap(MultiplayerBattleService_MultiplayerBattleRequest* other) {
  using std::swap;
  sailors_.InternalSwap(&other->sailors_);
  CastToBase(&operation_list_)->InternalSwap(CastToBase(&other->operation_list_));
  swap(target_id_, other->target_id_);
  swap(result_, other->result_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerBattleService_MultiplayerBattleRequest::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerBattleService_MultiplayerBattleResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerBattleService_MultiplayerBattleResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerBattleService_MultiplayerBattleResponse::MultiplayerBattleService_MultiplayerBattleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService_MultiplayerBattleResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerBattleService.MultiplayerBattleResponse)
}
MultiplayerBattleService_MultiplayerBattleResponse::MultiplayerBattleService_MultiplayerBattleResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService_MultiplayerBattleResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerBattleService.MultiplayerBattleResponse)
}
MultiplayerBattleService_MultiplayerBattleResponse::MultiplayerBattleService_MultiplayerBattleResponse(const MultiplayerBattleService_MultiplayerBattleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerBattleService.MultiplayerBattleResponse)
}

void MultiplayerBattleService_MultiplayerBattleResponse::SharedCtor() {
  result_ = 0;
}

MultiplayerBattleService_MultiplayerBattleResponse::~MultiplayerBattleService_MultiplayerBattleResponse() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  SharedDtor();
}

void MultiplayerBattleService_MultiplayerBattleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void MultiplayerBattleService_MultiplayerBattleResponse::ArenaDtor(void* object) {
  MultiplayerBattleService_MultiplayerBattleResponse* _this = reinterpret_cast< MultiplayerBattleService_MultiplayerBattleResponse* >(object);
  (void)_this;
}
void MultiplayerBattleService_MultiplayerBattleResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerBattleService_MultiplayerBattleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerBattleService_MultiplayerBattleResponse::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerBattleService_MultiplayerBattleResponse& MultiplayerBattleService_MultiplayerBattleResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService_MultiplayerBattleResponse.base);
  return *internal_default_instance();
}


void MultiplayerBattleService_MultiplayerBattleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerBattleService_MultiplayerBattleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  return false;
#undef DO_
}

void MultiplayerBattleService_MultiplayerBattleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerBattleService.MultiplayerBattleResponse)
}

::google::protobuf::uint8* MultiplayerBattleService_MultiplayerBattleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  return target;
}

size_t MultiplayerBattleService_MultiplayerBattleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerBattleService_MultiplayerBattleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerBattleService_MultiplayerBattleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerBattleService_MultiplayerBattleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerBattleService.MultiplayerBattleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerBattleService.MultiplayerBattleResponse)
    MergeFrom(*source);
  }
}

void MultiplayerBattleService_MultiplayerBattleResponse::MergeFrom(const MultiplayerBattleService_MultiplayerBattleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void MultiplayerBattleService_MultiplayerBattleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerBattleService_MultiplayerBattleResponse::CopyFrom(const MultiplayerBattleService_MultiplayerBattleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerBattleService.MultiplayerBattleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerBattleService_MultiplayerBattleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MultiplayerBattleService_MultiplayerBattleResponse::Swap(MultiplayerBattleService_MultiplayerBattleResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerBattleService_MultiplayerBattleResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerBattleService_MultiplayerBattleResponse::UnsafeArenaSwap(MultiplayerBattleService_MultiplayerBattleResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerBattleService_MultiplayerBattleResponse::InternalSwap(MultiplayerBattleService_MultiplayerBattleResponse* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerBattleService_MultiplayerBattleResponse::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiplayerBattleService::InitAsDefaultInstance() {
  ::sg::_MultiplayerBattleService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::MultiplayerBattleService_MultiplayerBattleRequest*>(
      ::sg::MultiplayerBattleService_MultiplayerBattleRequest::internal_default_instance());
  ::sg::_MultiplayerBattleService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::MultiplayerBattleService_MultiplayerBattleResponse*>(
      ::sg::MultiplayerBattleService_MultiplayerBattleResponse::internal_default_instance());
}
void MultiplayerBattleService::unsafe_arena_set_allocated_req(
    ::sg::MultiplayerBattleService_MultiplayerBattleRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MultiplayerBattleService.req)
}
void MultiplayerBattleService::unsafe_arena_set_allocated_resp(
    ::sg::MultiplayerBattleService_MultiplayerBattleResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MultiplayerBattleService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplayerBattleService::kReqFieldNumber;
const int MultiplayerBattleService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplayerBattleService::MultiplayerBattleService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MultiplayerBattleService)
}
MultiplayerBattleService::MultiplayerBattleService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MultiplayerBattleService)
}
MultiplayerBattleService::MultiplayerBattleService(const MultiplayerBattleService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::MultiplayerBattleService_MultiplayerBattleRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::MultiplayerBattleService_MultiplayerBattleResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.MultiplayerBattleService)
}

void MultiplayerBattleService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

MultiplayerBattleService::~MultiplayerBattleService() {
  // @@protoc_insertion_point(destructor:sg.MultiplayerBattleService)
  SharedDtor();
}

void MultiplayerBattleService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void MultiplayerBattleService::ArenaDtor(void* object) {
  MultiplayerBattleService* _this = reinterpret_cast< MultiplayerBattleService* >(object);
  (void)_this;
}
void MultiplayerBattleService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MultiplayerBattleService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiplayerBattleService::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplayerBattleService& MultiplayerBattleService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_MultiplayerBattleService.base);
  return *internal_default_instance();
}


void MultiplayerBattleService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MultiplayerBattleService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiplayerBattleService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MultiplayerBattleService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MultiplayerBattleService.MultiplayerBattleRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MultiplayerBattleService.MultiplayerBattleResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MultiplayerBattleService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MultiplayerBattleService)
  return false;
#undef DO_
}

void MultiplayerBattleService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MultiplayerBattleService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerBattleService.MultiplayerBattleRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.MultiplayerBattleService.MultiplayerBattleResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MultiplayerBattleService)
}

::google::protobuf::uint8* MultiplayerBattleService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MultiplayerBattleService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MultiplayerBattleService.MultiplayerBattleRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.MultiplayerBattleService.MultiplayerBattleResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MultiplayerBattleService)
  return target;
}

size_t MultiplayerBattleService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MultiplayerBattleService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.MultiplayerBattleService.MultiplayerBattleRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.MultiplayerBattleService.MultiplayerBattleResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplayerBattleService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MultiplayerBattleService)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplayerBattleService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplayerBattleService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MultiplayerBattleService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MultiplayerBattleService)
    MergeFrom(*source);
  }
}

void MultiplayerBattleService::MergeFrom(const MultiplayerBattleService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MultiplayerBattleService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::MultiplayerBattleService_MultiplayerBattleRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::MultiplayerBattleService_MultiplayerBattleResponse::MergeFrom(from.resp());
    }
  }
}

void MultiplayerBattleService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MultiplayerBattleService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplayerBattleService::CopyFrom(const MultiplayerBattleService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MultiplayerBattleService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplayerBattleService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void MultiplayerBattleService::Swap(MultiplayerBattleService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MultiplayerBattleService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MultiplayerBattleService::UnsafeArenaSwap(MultiplayerBattleService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MultiplayerBattleService::InternalSwap(MultiplayerBattleService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiplayerBattleService::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrameAddNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameAddNotify::kFrameFieldNumber;
const int FrameAddNotify::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameAddNotify::FrameAddNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_FrameAddNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FrameAddNotify)
}
FrameAddNotify::FrameAddNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_FrameAddNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FrameAddNotify)
}
FrameAddNotify::FrameAddNotify(const FrameAddNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_ = from.frame_;
  // @@protoc_insertion_point(copy_constructor:sg.FrameAddNotify)
}

void FrameAddNotify::SharedCtor() {
  frame_ = 0;
}

FrameAddNotify::~FrameAddNotify() {
  // @@protoc_insertion_point(destructor:sg.FrameAddNotify)
  SharedDtor();
}

void FrameAddNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FrameAddNotify::ArenaDtor(void* object) {
  FrameAddNotify* _this = reinterpret_cast< FrameAddNotify* >(object);
  (void)_this;
}
void FrameAddNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FrameAddNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FrameAddNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameAddNotify& FrameAddNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_FrameAddNotify.base);
  return *internal_default_instance();
}


void FrameAddNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FrameAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  frame_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameAddNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FrameAddNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.FrameData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FrameAddNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FrameAddNotify)
  return false;
#undef DO_
}

void FrameAddNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FrameAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame(), output);
  }

  // repeated .sg.FrameData data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FrameAddNotify)
}

::google::protobuf::uint8* FrameAddNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FrameAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame(), target);
  }

  // repeated .sg.FrameData data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FrameAddNotify)
  return target;
}

size_t FrameAddNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FrameAddNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 frame = 1;
  if (has_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }
  // repeated .sg.FrameData data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameAddNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FrameAddNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameAddNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameAddNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FrameAddNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FrameAddNotify)
    MergeFrom(*source);
  }
}

void FrameAddNotify::MergeFrom(const FrameAddNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FrameAddNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_frame()) {
    set_frame(from.frame());
  }
}

void FrameAddNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FrameAddNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameAddNotify::CopyFrom(const FrameAddNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FrameAddNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameAddNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FrameAddNotify::Swap(FrameAddNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FrameAddNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FrameAddNotify::UnsafeArenaSwap(FrameAddNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FrameAddNotify::InternalSwap(FrameAddNotify* other) {
  using std::swap;
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  swap(frame_, other->frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FrameAddNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserReadyNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserReadyNotify::kMemberIndexFieldNumber;
const int UserReadyNotify::kReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserReadyNotify::UserReadyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserReadyNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserReadyNotify)
}
UserReadyNotify::UserReadyNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserReadyNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserReadyNotify)
}
UserReadyNotify::UserReadyNotify(const UserReadyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&member_index_, &from.member_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&member_index_)) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:sg.UserReadyNotify)
}

void UserReadyNotify::SharedCtor() {
  ::memset(&member_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&member_index_)) + sizeof(ready_));
}

UserReadyNotify::~UserReadyNotify() {
  // @@protoc_insertion_point(destructor:sg.UserReadyNotify)
  SharedDtor();
}

void UserReadyNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserReadyNotify::ArenaDtor(void* object) {
  UserReadyNotify* _this = reinterpret_cast< UserReadyNotify* >(object);
  (void)_this;
}
void UserReadyNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserReadyNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserReadyNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserReadyNotify& UserReadyNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserReadyNotify.base);
  return *internal_default_instance();
}


void UserReadyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&member_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ready_) -
        reinterpret_cast<char*>(&member_index_)) + sizeof(ready_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserReadyNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 member_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_member_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ready = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ready();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserReadyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserReadyNotify)
  return false;
#undef DO_
}

void UserReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 member_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->member_index(), output);
  }

  // required bool ready = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ready(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserReadyNotify)
}

::google::protobuf::uint8* UserReadyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserReadyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 member_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->member_index(), target);
  }

  // required bool ready = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ready(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserReadyNotify)
  return target;
}

size_t UserReadyNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.UserReadyNotify)
  size_t total_size = 0;

  if (has_member_index()) {
    // required int32 member_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_index());
  }

  if (has_ready()) {
    // required bool ready = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UserReadyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserReadyNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 member_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_index());

    // required bool ready = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserReadyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserReadyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserReadyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserReadyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserReadyNotify)
    MergeFrom(*source);
  }
}

void UserReadyNotify::MergeFrom(const UserReadyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserReadyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      member_index_ = from.member_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      ready_ = from.ready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserReadyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserReadyNotify::CopyFrom(const UserReadyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserReadyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserReadyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserReadyNotify::Swap(UserReadyNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserReadyNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserReadyNotify::UnsafeArenaSwap(UserReadyNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserReadyNotify::InternalSwap(UserReadyNotify* other) {
  using std::swap;
  swap(member_index_, other->member_index_);
  swap(ready_, other->ready_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserReadyNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserChangeSailorNotify::InitAsDefaultInstance() {
}
void UserChangeSailorNotify::clear_use_sailor() {
  use_sailor_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChangeSailorNotify::kMemberIndexFieldNumber;
const int UserChangeSailorNotify::kUseSailorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChangeSailorNotify::UserChangeSailorNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_UserChangeSailorNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserChangeSailorNotify)
}
UserChangeSailorNotify::UserChangeSailorNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  use_sailor_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserChangeSailorNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserChangeSailorNotify)
}
UserChangeSailorNotify::UserChangeSailorNotify(const UserChangeSailorNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      use_sailor_(from.use_sailor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_index_ = from.member_index_;
  // @@protoc_insertion_point(copy_constructor:sg.UserChangeSailorNotify)
}

void UserChangeSailorNotify::SharedCtor() {
  member_index_ = 0;
}

UserChangeSailorNotify::~UserChangeSailorNotify() {
  // @@protoc_insertion_point(destructor:sg.UserChangeSailorNotify)
  SharedDtor();
}

void UserChangeSailorNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserChangeSailorNotify::ArenaDtor(void* object) {
  UserChangeSailorNotify* _this = reinterpret_cast< UserChangeSailorNotify* >(object);
  (void)_this;
}
void UserChangeSailorNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserChangeSailorNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserChangeSailorNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserChangeSailorNotify& UserChangeSailorNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_UserChangeSailorNotify.base);
  return *internal_default_instance();
}


void UserChangeSailorNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserChangeSailorNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  use_sailor_.Clear();
  member_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserChangeSailorNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserChangeSailorNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 member_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_member_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Sailor use_sailor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_use_sailor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserChangeSailorNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserChangeSailorNotify)
  return false;
#undef DO_
}

void UserChangeSailorNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserChangeSailorNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 member_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->member_index(), output);
  }

  // repeated .sg.Sailor use_sailor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->use_sailor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->use_sailor(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserChangeSailorNotify)
}

::google::protobuf::uint8* UserChangeSailorNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserChangeSailorNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 member_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->member_index(), target);
  }

  // repeated .sg.Sailor use_sailor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->use_sailor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->use_sailor(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserChangeSailorNotify)
  return target;
}

size_t UserChangeSailorNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserChangeSailorNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 member_index = 1;
  if (has_member_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_index());
  }
  // repeated .sg.Sailor use_sailor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->use_sailor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->use_sailor(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChangeSailorNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserChangeSailorNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChangeSailorNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChangeSailorNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserChangeSailorNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserChangeSailorNotify)
    MergeFrom(*source);
  }
}

void UserChangeSailorNotify::MergeFrom(const UserChangeSailorNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserChangeSailorNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  use_sailor_.MergeFrom(from.use_sailor_);
  if (from.has_member_index()) {
    set_member_index(from.member_index());
  }
}

void UserChangeSailorNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserChangeSailorNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChangeSailorNotify::CopyFrom(const UserChangeSailorNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserChangeSailorNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChangeSailorNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->use_sailor())) return false;
  return true;
}

void UserChangeSailorNotify::Swap(UserChangeSailorNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserChangeSailorNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserChangeSailorNotify::UnsafeArenaSwap(UserChangeSailorNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserChangeSailorNotify::InternalSwap(UserChangeSailorNotify* other) {
  using std::swap;
  CastToBase(&use_sailor_)->InternalSwap(CastToBase(&other->use_sailor_));
  swap(member_index_, other->member_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserChangeSailorNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BattleStartNotify::InitAsDefaultInstance() {
  ::sg::_BattleStartNotify_default_instance_._instance.get_mutable()->battle_data_ = const_cast< ::sg::MultiplayerBattleField*>(
      ::sg::MultiplayerBattleField::internal_default_instance());
  ::sg::_BattleStartNotify_default_instance_._instance.get_mutable()->content_ = const_cast< ::sg::DungeonContent*>(
      ::sg::DungeonContent::internal_default_instance());
  ::sg::_BattleStartNotify_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::sg::UserDungeonInformation*>(
      ::sg::UserDungeonInformation::internal_default_instance());
}
void BattleStartNotify::unsafe_arena_set_allocated_battle_data(
    ::sg::MultiplayerBattleField* battle_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete battle_data_;
  }
  battle_data_ = battle_data;
  if (battle_data) {
    set_has_battle_data();
  } else {
    clear_has_battle_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.BattleStartNotify.battle_data)
}
void BattleStartNotify::unsafe_arena_set_allocated_content(
    ::sg::DungeonContent* content) {
  if (GetArenaNoVirtual() == NULL) {
    delete content_;
  }
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.BattleStartNotify.content)
}
void BattleStartNotify::clear_content() {
  if (content_ != NULL) content_->Clear();
  clear_has_content();
}
void BattleStartNotify::unsafe_arena_set_allocated_user_info(
    ::sg::UserDungeonInformation* user_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_info_;
  }
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.BattleStartNotify.user_info)
}
void BattleStartNotify::clear_user_info() {
  if (user_info_ != NULL) user_info_->Clear();
  clear_has_user_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleStartNotify::kBattleDataFieldNumber;
const int BattleStartNotify::kContentFieldNumber;
const int BattleStartNotify::kUserInfoFieldNumber;
const int BattleStartNotify::kCostVitalityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleStartNotify::BattleStartNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_BattleStartNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.BattleStartNotify)
}
BattleStartNotify::BattleStartNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_BattleStartNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.BattleStartNotify)
}
BattleStartNotify::BattleStartNotify(const BattleStartNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_battle_data()) {
    battle_data_ = new ::sg::MultiplayerBattleField(*from.battle_data_);
  } else {
    battle_data_ = NULL;
  }
  if (from.has_content()) {
    content_ = new ::sg::DungeonContent(*from.content_);
  } else {
    content_ = NULL;
  }
  if (from.has_user_info()) {
    user_info_ = new ::sg::UserDungeonInformation(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  cost_vitality_ = from.cost_vitality_;
  // @@protoc_insertion_point(copy_constructor:sg.BattleStartNotify)
}

void BattleStartNotify::SharedCtor() {
  ::memset(&battle_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_vitality_) -
      reinterpret_cast<char*>(&battle_data_)) + sizeof(cost_vitality_));
}

BattleStartNotify::~BattleStartNotify() {
  // @@protoc_insertion_point(destructor:sg.BattleStartNotify)
  SharedDtor();
}

void BattleStartNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete battle_data_;
  if (this != internal_default_instance()) delete content_;
  if (this != internal_default_instance()) delete user_info_;
}

void BattleStartNotify::ArenaDtor(void* object) {
  BattleStartNotify* _this = reinterpret_cast< BattleStartNotify* >(object);
  (void)_this;
}
void BattleStartNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BattleStartNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BattleStartNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattleStartNotify& BattleStartNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_BattleStartNotify.base);
  return *internal_default_instance();
}


void BattleStartNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.BattleStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(battle_data_ != NULL);
      battle_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(content_ != NULL);
      content_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(user_info_ != NULL);
      user_info_->Clear();
    }
  }
  cost_vitality_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BattleStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.BattleStartNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.MultiplayerBattleField battle_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_battle_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.DungeonContent content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserDungeonInformation user_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cost_vitality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cost_vitality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_vitality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.BattleStartNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.BattleStartNotify)
  return false;
#undef DO_
}

void BattleStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.BattleStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MultiplayerBattleField battle_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_battle_data(), output);
  }

  // optional .sg.DungeonContent content = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_content(), output);
  }

  // optional .sg.UserDungeonInformation user_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user_info(), output);
  }

  // optional int32 cost_vitality = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost_vitality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.BattleStartNotify)
}

::google::protobuf::uint8* BattleStartNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.BattleStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MultiplayerBattleField battle_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_battle_data(), deterministic, target);
  }

  // optional .sg.DungeonContent content = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_content(), deterministic, target);
  }

  // optional .sg.UserDungeonInformation user_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user_info(), deterministic, target);
  }

  // optional int32 cost_vitality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost_vitality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.BattleStartNotify)
  return target;
}

size_t BattleStartNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.BattleStartNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.MultiplayerBattleField battle_data = 1;
  if (has_battle_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *battle_data_);
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional .sg.DungeonContent content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_);
    }

    // optional .sg.UserDungeonInformation user_info = 3;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_info_);
    }

    // optional int32 cost_vitality = 4;
    if (has_cost_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_vitality());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.BattleStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleStartNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleStartNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.BattleStartNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.BattleStartNotify)
    MergeFrom(*source);
  }
}

void BattleStartNotify::MergeFrom(const BattleStartNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.BattleStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_battle_data()->::sg::MultiplayerBattleField::MergeFrom(from.battle_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_content()->::sg::DungeonContent::MergeFrom(from.content());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_user_info()->::sg::UserDungeonInformation::MergeFrom(from.user_info());
    }
    if (cached_has_bits & 0x00000008u) {
      cost_vitality_ = from.cost_vitality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BattleStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.BattleStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleStartNotify::CopyFrom(const BattleStartNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.BattleStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStartNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_battle_data()) {
    if (!this->battle_data_->IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content_->IsInitialized()) return false;
  }
  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  return true;
}

void BattleStartNotify::Swap(BattleStartNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BattleStartNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BattleStartNotify::UnsafeArenaSwap(BattleStartNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BattleStartNotify::InternalSwap(BattleStartNotify* other) {
  using std::swap;
  swap(battle_data_, other->battle_data_);
  swap(content_, other->content_);
  swap(user_info_, other->user_info_);
  swap(cost_vitality_, other->cost_vitality_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BattleStartNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BattleOverNotify::InitAsDefaultInstance() {
  ::sg::_BattleOverNotify_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void BattleOverNotify::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.BattleOverNotify.reward)
}
void BattleOverNotify::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleOverNotify::kResultFieldNumber;
const int BattleOverNotify::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleOverNotify::BattleOverNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Multiplayer_2eproto::scc_info_BattleOverNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.BattleOverNotify)
}
BattleOverNotify::BattleOverNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_BattleOverNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.BattleOverNotify)
}
BattleOverNotify::BattleOverNotify(const BattleOverNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.BattleOverNotify)
}

void BattleOverNotify::SharedCtor() {
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(result_));
}

BattleOverNotify::~BattleOverNotify() {
  // @@protoc_insertion_point(destructor:sg.BattleOverNotify)
  SharedDtor();
}

void BattleOverNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete reward_;
}

void BattleOverNotify::ArenaDtor(void* object) {
  BattleOverNotify* _this = reinterpret_cast< BattleOverNotify* >(object);
  (void)_this;
}
void BattleOverNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BattleOverNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BattleOverNotify::descriptor() {
  ::protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattleOverNotify& BattleOverNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Multiplayer_2eproto::scc_info_BattleOverNotify.base);
  return *internal_default_instance();
}


void BattleOverNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.BattleOverNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != NULL);
    reward_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BattleOverNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.BattleOverNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.BattleOverNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.BattleOverNotify)
  return false;
#undef DO_
}

void BattleOverNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.BattleOverNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.Reward reward = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.BattleOverNotify)
}

::google::protobuf::uint8* BattleOverNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.BattleOverNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.Reward reward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.BattleOverNotify)
  return target;
}

size_t BattleOverNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.BattleOverNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional .sg.Reward reward = 2;
  if (has_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleOverNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.BattleOverNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleOverNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleOverNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.BattleOverNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.BattleOverNotify)
    MergeFrom(*source);
  }
}

void BattleOverNotify::MergeFrom(const BattleOverNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.BattleOverNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BattleOverNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.BattleOverNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleOverNotify::CopyFrom(const BattleOverNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.BattleOverNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleOverNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void BattleOverNotify::Swap(BattleOverNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BattleOverNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BattleOverNotify::UnsafeArenaSwap(BattleOverNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BattleOverNotify::InternalSwap(BattleOverNotify* other) {
  using std::swap;
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BattleOverNotify::GetMetadata() const {
  protobuf_Multiplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Multiplayer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FrameData* Arena::CreateMaybeMessage< ::sg::FrameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FrameData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerRoom_Member* Arena::CreateMaybeMessage< ::sg::MultiplayerRoom_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerRoom_Member >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerRoom_Chat* Arena::CreateMaybeMessage< ::sg::MultiplayerRoom_Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerRoom_Chat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerRoom* Arena::CreateMaybeMessage< ::sg::MultiplayerRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerRoom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerBattleField_Member* Arena::CreateMaybeMessage< ::sg::MultiplayerBattleField_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerBattleField_Member >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerBattleField* Arena::CreateMaybeMessage< ::sg::MultiplayerBattleField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerBattleField >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerTeamService_MultiplayerTeamRequest* Arena::CreateMaybeMessage< ::sg::MultiplayerTeamService_MultiplayerTeamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerTeamService_MultiplayerTeamRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerTeamService_MultiplayerTeamResponse* Arena::CreateMaybeMessage< ::sg::MultiplayerTeamService_MultiplayerTeamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerTeamService_MultiplayerTeamResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerTeamService* Arena::CreateMaybeMessage< ::sg::MultiplayerTeamService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerTeamService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserTalkNotify* Arena::CreateMaybeMessage< ::sg::UserTalkNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserTalkNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserAddNotify* Arena::CreateMaybeMessage< ::sg::UserAddNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserAddNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserChangeSeatNotify* Arena::CreateMaybeMessage< ::sg::UserChangeSeatNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserChangeSeatNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserDeleteRoomNotify* Arena::CreateMaybeMessage< ::sg::UserDeleteRoomNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserDeleteRoomNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserChangeOwnerNotify* Arena::CreateMaybeMessage< ::sg::UserChangeOwnerNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserChangeOwnerNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserChangeWorkNotify* Arena::CreateMaybeMessage< ::sg::UserChangeWorkNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserChangeWorkNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserLeaveNotify* Arena::CreateMaybeMessage< ::sg::UserLeaveNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserLeaveNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserRenameNotify* Arena::CreateMaybeMessage< ::sg::UserRenameNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserRenameNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::BattleReadyNotify* Arena::CreateMaybeMessage< ::sg::BattleReadyNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::BattleReadyNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerBattleService_MultiplayerBattleRequest* Arena::CreateMaybeMessage< ::sg::MultiplayerBattleService_MultiplayerBattleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerBattleService_MultiplayerBattleRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerBattleService_MultiplayerBattleResponse* Arena::CreateMaybeMessage< ::sg::MultiplayerBattleService_MultiplayerBattleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerBattleService_MultiplayerBattleResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MultiplayerBattleService* Arena::CreateMaybeMessage< ::sg::MultiplayerBattleService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MultiplayerBattleService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FrameAddNotify* Arena::CreateMaybeMessage< ::sg::FrameAddNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FrameAddNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserReadyNotify* Arena::CreateMaybeMessage< ::sg::UserReadyNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserReadyNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserChangeSailorNotify* Arena::CreateMaybeMessage< ::sg::UserChangeSailorNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserChangeSailorNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::BattleStartNotify* Arena::CreateMaybeMessage< ::sg::BattleStartNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::BattleStartNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::BattleOverNotify* Arena::CreateMaybeMessage< ::sg::BattleOverNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::BattleOverNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
