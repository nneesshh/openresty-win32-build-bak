// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Friend.proto

#include "Friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Friend_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FriendService_FriendRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameInviteReward;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameInviteService_GameInviteRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InputInviteCodeResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PersonTeamMember;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameInviteAcceptReward;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameInviteRewardList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PersonData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PersonDataList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PersonTeamMemberList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_QueryPersonResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_FriendService_FriendResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_GameInviteService_GameInviteResponse;
}  // namespace protobuf_Friend_2eproto
namespace sg {
class PersonTeamMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PersonTeamMember>
      _instance;
} _PersonTeamMember_default_instance_;
class PersonTeamMemberListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PersonTeamMemberList>
      _instance;
} _PersonTeamMemberList_default_instance_;
class PersonDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PersonData>
      _instance;
} _PersonData_default_instance_;
class PersonDataListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PersonDataList>
      _instance;
} _PersonDataList_default_instance_;
class QueryPersonResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryPersonResult>
      _instance;
} _QueryPersonResult_default_instance_;
class FriendService_FriendRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendService_FriendRequest>
      _instance;
} _FriendService_FriendRequest_default_instance_;
class FriendService_FriendResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendService_FriendResponse>
      _instance;
} _FriendService_FriendResponse_default_instance_;
class FriendServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendService>
      _instance;
} _FriendService_default_instance_;
class GameInviteRewardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInviteReward>
      _instance;
} _GameInviteReward_default_instance_;
class GameInviteRewardListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInviteRewardList>
      _instance;
} _GameInviteRewardList_default_instance_;
class InputInviteCodeResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputInviteCodeResult>
      _instance;
} _InputInviteCodeResult_default_instance_;
class GameInviteAcceptRewardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInviteAcceptReward>
      _instance;
} _GameInviteAcceptReward_default_instance_;
class GameInviteService_GameInviteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInviteService_GameInviteRequest>
      _instance;
} _GameInviteService_GameInviteRequest_default_instance_;
class GameInviteService_GameInviteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInviteService_GameInviteResponse>
      _instance;
} _GameInviteService_GameInviteResponse_default_instance_;
class GameInviteServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInviteService>
      _instance;
} _GameInviteService_default_instance_;
class FriendGiftNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendGiftNotify>
      _instance;
} _FriendGiftNotify_default_instance_;
}  // namespace sg
namespace protobuf_Friend_2eproto {
static void InitDefaultsPersonTeamMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PersonTeamMember_default_instance_;
    new (ptr) ::sg::PersonTeamMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PersonTeamMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PersonTeamMember =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPersonTeamMember}, {}};

static void InitDefaultsPersonTeamMemberList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PersonTeamMemberList_default_instance_;
    new (ptr) ::sg::PersonTeamMemberList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PersonTeamMemberList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PersonTeamMemberList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPersonTeamMemberList}, {
      &protobuf_Friend_2eproto::scc_info_PersonTeamMember.base,}};

static void InitDefaultsPersonData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PersonData_default_instance_;
    new (ptr) ::sg::PersonData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PersonData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PersonData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPersonData}, {
      &protobuf_Friend_2eproto::scc_info_PersonTeamMemberList.base,}};

static void InitDefaultsPersonDataList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PersonDataList_default_instance_;
    new (ptr) ::sg::PersonDataList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PersonDataList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PersonDataList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPersonDataList}, {
      &protobuf_Friend_2eproto::scc_info_PersonData.base,}};

static void InitDefaultsQueryPersonResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_QueryPersonResult_default_instance_;
    new (ptr) ::sg::QueryPersonResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::QueryPersonResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_QueryPersonResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQueryPersonResult}, {
      &protobuf_Friend_2eproto::scc_info_PersonData.base,}};

static void InitDefaultsFriendService_FriendRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FriendService_FriendRequest_default_instance_;
    new (ptr) ::sg::FriendService_FriendRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FriendService_FriendRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FriendService_FriendRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriendService_FriendRequest}, {}};

static void InitDefaultsFriendService_FriendResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FriendService_FriendResponse_default_instance_;
    new (ptr) ::sg::FriendService_FriendResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FriendService_FriendResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_FriendService_FriendResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsFriendService_FriendResponse}, {
      &protobuf_Friend_2eproto::scc_info_PersonDataList.base,
      &protobuf_Friend_2eproto::scc_info_QueryPersonResult.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsFriendService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FriendService_default_instance_;
    new (ptr) ::sg::FriendService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FriendService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FriendService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFriendService}, {
      &protobuf_Friend_2eproto::scc_info_FriendService_FriendRequest.base,
      &protobuf_Friend_2eproto::scc_info_FriendService_FriendResponse.base,}};

static void InitDefaultsGameInviteReward() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameInviteReward_default_instance_;
    new (ptr) ::sg::GameInviteReward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameInviteReward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameInviteReward =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameInviteReward}, {}};

static void InitDefaultsGameInviteRewardList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameInviteRewardList_default_instance_;
    new (ptr) ::sg::GameInviteRewardList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameInviteRewardList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameInviteRewardList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameInviteRewardList}, {
      &protobuf_Friend_2eproto::scc_info_GameInviteReward.base,}};

static void InitDefaultsInputInviteCodeResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_InputInviteCodeResult_default_instance_;
    new (ptr) ::sg::InputInviteCodeResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::InputInviteCodeResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InputInviteCodeResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInputInviteCodeResult}, {}};

static void InitDefaultsGameInviteAcceptReward() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameInviteAcceptReward_default_instance_;
    new (ptr) ::sg::GameInviteAcceptReward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameInviteAcceptReward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameInviteAcceptReward =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameInviteAcceptReward}, {
      &protobuf_BaseStruct_2eproto::scc_info_Item.base,}};

static void InitDefaultsGameInviteService_GameInviteRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameInviteService_GameInviteRequest_default_instance_;
    new (ptr) ::sg::GameInviteService_GameInviteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameInviteService_GameInviteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameInviteService_GameInviteRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameInviteService_GameInviteRequest}, {}};

static void InitDefaultsGameInviteService_GameInviteResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameInviteService_GameInviteResponse_default_instance_;
    new (ptr) ::sg::GameInviteService_GameInviteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameInviteService_GameInviteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_GameInviteService_GameInviteResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsGameInviteService_GameInviteResponse}, {
      &protobuf_Friend_2eproto::scc_info_InputInviteCodeResult.base,
      &protobuf_Friend_2eproto::scc_info_GameInviteReward.base,
      &protobuf_Friend_2eproto::scc_info_GameInviteRewardList.base,
      &protobuf_Friend_2eproto::scc_info_GameInviteAcceptReward.base,}};

static void InitDefaultsGameInviteService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameInviteService_default_instance_;
    new (ptr) ::sg::GameInviteService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameInviteService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GameInviteService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGameInviteService}, {
      &protobuf_Friend_2eproto::scc_info_GameInviteService_GameInviteRequest.base,
      &protobuf_Friend_2eproto::scc_info_GameInviteService_GameInviteResponse.base,}};

static void InitDefaultsFriendGiftNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FriendGiftNotify_default_instance_;
    new (ptr) ::sg::FriendGiftNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FriendGiftNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FriendGiftNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriendGiftNotify}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PersonTeamMember.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PersonTeamMemberList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PersonData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PersonDataList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryPersonResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendService_FriendRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendService_FriendResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameInviteReward.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameInviteRewardList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InputInviteCodeResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameInviteAcceptReward.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameInviteService_GameInviteRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameInviteService_GameInviteResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameInviteService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FriendGiftNotify.base);
}

::google::protobuf::Metadata file_level_metadata[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonTeamMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonTeamMember, posid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonTeamMember, member_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonTeamMember, member_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonTeamMember, member_star_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonTeamMemberList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonTeamMemberList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonTeamMemberList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, role_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, role_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, role_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, role_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, portrait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, portrait_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, guildid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, guild_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, guild_badge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, guild_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, is_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, logintime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, can_challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, challenge_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, gift_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, gift_item_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, gift_item_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, can_give_gift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonData, team_),
  5,
  0,
  6,
  7,
  8,
  9,
  10,
  1,
  11,
  2,
  3,
  12,
  13,
  15,
  14,
  16,
  18,
  20,
  19,
  21,
  17,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonDataList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PersonDataList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::QueryPersonResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::QueryPersonResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::QueryPersonResult, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::QueryPersonResult, param_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::QueryPersonResult, person_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendRequest, person_uuid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, friend_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, candidate_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, adding_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, confirming_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, challenge_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, challenge_num_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, ban_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, qurey_person_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, gift_accepted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, gift_accept_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService_FriendResponse, gift_accept_num_max_),
  7,
  0,
  1,
  2,
  3,
  8,
  10,
  4,
  5,
  6,
  11,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteReward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteReward, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteReward, reward_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteReward, reward_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteReward, item_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteReward, item_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteReward, item_num_),
  0,
  5,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteRewardList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteRewardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteRewardList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::InputInviteCodeResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::InputInviteCodeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::InputInviteCodeResult, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::InputInviteCodeResult, param_uuid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteAcceptReward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteAcceptReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteAcceptReward, reward_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteAcceptReward, out_accept_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteRequest, invite_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteRequest, reward_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, who_invite_me_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, invite_accept_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, invite_ok_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, input_invite_code_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, invitee_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, inviter_reward_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService_GameInviteResponse, accept_reward_),
  5,
  4,
  6,
  7,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameInviteService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendGiftNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendGiftNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FriendGiftNotify, friend_uuid_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::sg::PersonTeamMember)},
  { 13, 19, sizeof(::sg::PersonTeamMemberList)},
  { 20, 47, sizeof(::sg::PersonData)},
  { 69, 75, sizeof(::sg::PersonDataList)},
  { 76, 84, sizeof(::sg::QueryPersonResult)},
  { 87, 94, sizeof(::sg::FriendService_FriendRequest)},
  { 96, 113, sizeof(::sg::FriendService_FriendResponse)},
  { 125, 132, sizeof(::sg::FriendService)},
  { 134, 145, sizeof(::sg::GameInviteReward)},
  { 151, 157, sizeof(::sg::GameInviteRewardList)},
  { 158, 165, sizeof(::sg::InputInviteCodeResult)},
  { 167, 174, sizeof(::sg::GameInviteAcceptReward)},
  { 176, 184, sizeof(::sg::GameInviteService_GameInviteRequest)},
  { 187, 200, sizeof(::sg::GameInviteService_GameInviteResponse)},
  { 208, 215, sizeof(::sg::GameInviteService)},
  { 217, 223, sizeof(::sg::FriendGiftNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PersonTeamMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PersonTeamMemberList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PersonData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PersonDataList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_QueryPersonResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FriendService_FriendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FriendService_FriendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FriendService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameInviteReward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameInviteRewardList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_InputInviteCodeResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameInviteAcceptReward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameInviteService_GameInviteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameInviteService_GameInviteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameInviteService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FriendGiftNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Friend.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Friend.proto\022\002sg\032\020BaseStruct.proto\"c\n\020"
      "PersonTeamMember\022\r\n\005posid\030\001 \002(\005\022\025\n\rmembe"
      "r_typeid\030\002 \002(\004\022\024\n\014member_level\030\003 \002(\005\022\023\n\013"
      "member_star\030\004 \002(\005\":\n\024PersonTeamMemberLis"
      "t\022\"\n\004list\030\001 \003(\0132\024.sg.PersonTeamMember\"\362\003"
      "\n\nPersonData\022\014\n\004uuid\030\001 \002(\004\022\021\n\trole_nick\030"
      "\002 \002(\014\022\022\n\nrole_level\030\003 \002(\005\022\020\n\010role_exp\030\004 "
      "\002(\005\022\021\n\trole_rank\030\005 \002(\005\022\020\n\010portrait\030\013 \001(\005"
      "\022\026\n\016portrait_frame\030\014 \001(\005\022\021\n\tsignature\030\r "
      "\001(\014\022\017\n\007guildid\030\016 \001(\005\022\022\n\nguild_name\030\017 \001(\014"
      "\022\023\n\013guild_badge\030\020 \001(\014\022\023\n\013guild_title\030\021 \001"
      "(\005\022\r\n\005force\030\022 \002(\005\022\021\n\tis_online\030\023 \002(\010\022\021\n\t"
      "logintime\030\025 \001(\020\022\025\n\rcan_challenge\030\037 \001(\010\022\027"
      "\n\017challenge_score\030  \001(\005\022)\n\ngift_state\030) "
      "\001(\0162\025.sg.FRIEND_GIFT_STATE\022\030\n\020gift_item_"
      "typeid\030* \001(\004\022\025\n\rgift_item_num\030+ \001(\005\022\025\n\rc"
      "an_give_gift\030, \001(\010\022&\n\004team\0303 \001(\0132\030.sg.Pe"
      "rsonTeamMemberList\".\n\016PersonDataList\022\034\n\004"
      "list\030\001 \003(\0132\016.sg.PersonData\"n\n\021QueryPerso"
      "nResult\022%\n\005state\030\001 \002(\0162\026.sg.QUERY_PERSON"
      "_STATE\022\022\n\nparam_uuid\030\002 \001(\004\022\036\n\006person\030\003 \001"
      "(\0132\016.sg.PersonData\"\215\007\n\rFriendService\022,\n\003"
      "req\030\001 \001(\0132\037.sg.FriendService.FriendReque"
      "st\022.\n\004resp\030\002 \001(\0132 .sg.FriendService.Frie"
      "ndResponse\032S\n\rFriendRequest\022-\n\003cmd\030\001 \002(\016"
      "2 .sg.FriendService.FRIEND_COMMAND\022\023\n\013pe"
      "rson_uuid\030\002 \001(\004\032\260\003\n\016FriendResponse\022\016\n\006re"
      "sult\030\001 \002(\005\022\'\n\013friend_list\030\002 \001(\0132\022.sg.Per"
      "sonDataList\022*\n\016candidate_list\030\003 \001(\0132\022.sg"
      ".PersonDataList\022\'\n\013adding_list\030\004 \001(\0132\022.s"
      "g.PersonDataList\022+\n\017confirming_list\030\005 \001("
      "\0132\022.sg.PersonDataList\022\025\n\rchallenge_num\030\006"
      " \001(\005\022\031\n\021challenge_num_max\030\007 \001(\005\022$\n\010ban_l"
      "ist\030\010 \001(\0132\022.sg.PersonDataList\0222\n\023qurey_p"
      "erson_result\030\013 \001(\0132\025.sg.QueryPersonResul"
      "t\022!\n\rgift_accepted\030\025 \001(\0132\n.sg.Reward\022\027\n\017"
      "gift_accept_num\030\026 \001(\005\022\033\n\023gift_accept_num"
      "_max\030\027 \001(\005\"\225\002\n\016FRIEND_COMMAND\022\021\n\rQUERY_F"
      "RIENDS\020\001\022\016\n\nADD_FRIEND\020\002\022\021\n\rDELETE_FRIEN"
      "D\020\003\022\020\n\014VISIT_FRIEND\020\004\022\026\n\022REFRESH_CANDIDA"
      "TES\020\005\022\030\n\024QUERY_PERSON_BY_UUID\020\006\022\025\n\021REJEC"
      "T_ALL_ADDING\020\007\022\025\n\021ACCEPT_ALL_ADDING\020\010\022\031\n"
      "\025CANCEL_ALL_CONFIRMING\020\t\022\016\n\nBAN_FRIEND\020\013"
      "\022\020\n\014UNBAN_FRIEND\020\014\022\r\n\tGIVE_GIFT\020\025\022\017\n\013ACC"
      "EPT_GIFT\020\026\"\243\001\n\020GameInviteReward\022\n\n\002id\030\001 "
      "\002(\005\0222\n\014reward_state\030\002 \002(\0162\034.sg.GAME_INVI"
      "TE_REWARD_STATE\022\025\n\rreward_reason\030\003 \002(\005\022\021"
      "\n\titem_type\030\013 \002(\005\022\023\n\013item_typeid\030\014 \002(\004\022\020"
      "\n\010item_num\030\r \002(\005\":\n\024GameInviteRewardList"
      "\022\"\n\004list\030\001 \003(\0132\024.sg.GameInviteReward\"R\n\025"
      "InputInviteCodeResult\022%\n\005state\030\001 \002(\0162\026.s"
      "g.QUERY_PERSON_STATE\022\022\n\nparam_uuid\030\002 \001(\004"
      "\"N\n\026GameInviteAcceptReward\022\021\n\treward_id\030"
      "\001 \001(\005\022!\n\017out_accept_list\030\002 \003(\0132\010.sg.Item"
      "\"\207\005\n\021GameInviteService\0224\n\003req\030\001 \001(\0132\'.sg"
      ".GameInviteService.GameInviteRequest\0226\n\004"
      "resp\030\002 \001(\0132(.sg.GameInviteService.GameIn"
      "viteResponse\032s\n\021GameInviteRequest\0226\n\003cmd"
      "\030\001 \002(\0162).sg.GameInviteService.GAME_INVIT"
      "E_COMMAND\022\023\n\013invite_code\030\002 \001(\003\022\021\n\treward"
      "_id\030\003 \001(\003\032\302\002\n\022GameInviteResponse\022\016\n\006resu"
      "lt\030\001 \002(\005\022\025\n\rwho_invite_me\030\002 \001(\004\022\031\n\021invit"
      "e_accept_num\030\003 \001(\005\022\025\n\rinvite_ok_num\030\004 \001("
      "\005\022;\n\030input_invite_code_result\030\013 \001(\0132\031.sg"
      ".InputInviteCodeResult\022,\n\016invitee_reward"
      "\030\025 \001(\0132\024.sg.GameInviteReward\0225\n\023inviter_"
      "reward_list\030\026 \001(\0132\030.sg.GameInviteRewardL"
      "ist\0221\n\raccept_reward\030\037 \001(\0132\032.sg.GameInvi"
      "teAcceptReward\"J\n\023GAME_INVITE_COMMAND\022\t\n"
      "\005QUERY\020\001\022\025\n\021INPUT_INVITE_CODE\020\002\022\021\n\rACCEP"
      "T_REWARD\020\003\"\'\n\020FriendGiftNotify\022\023\n\013friend"
      "_uuid\030\001 \002(\004*\246\002\n\nRANK_TITLE\022\026\n\022RANK_TITLE"
      "_MARSHAL\020\001\022\026\n\022RANK_TITLE_GENERAL\020\002\022!\n\035RA"
      "NK_TITLE_LIEUTENANT_GENERAL\020\003\022\034\n\030RANK_TI"
      "TLE_MAJOR_GENERAL\020\004\022 \n\034RANK_TITLE_BRIGAD"
      "IER_GENERAL\020\005\022\035\n\031RANK_TITLE_SENIOR_COLON"
      "EL\020\006\022\026\n\022RANK_TITLE_COLONEL\020\007\022!\n\035RANK_TIT"
      "LE_LIEUTENANT_COLONEL\020\010\022\024\n\020RANK_TITLE_MA"
      "JOR\020\t\022\025\n\021RANK_TITLE_NEWBIE\020\n*i\n\021FRIEND_G"
      "IFT_STATE\022\032\n\026FRIEND_GIFT_STATE_NONE\020\000\022\033\n"
      "\027FRIEND_GIFT_STATE_GIVEN\020\001\022\033\n\027FRIEND_GIF"
      "T_STATE_TAKEN\020\002*\313\001\n\014FRIEND_STATE\022#\n\026FRIE"
      "ND_STATE_TO_DELETE\020\377\377\377\377\377\377\377\377\377\001\022\031\n\025FRIEND_"
      "STATE_STRANGER\020\000\022\032\n\026FRIEND_STATE_CANDIDA"
      "TE\020\001\022\027\n\023FRIEND_STATE_ADDING\020\002\022\033\n\027FRIEND_"
      "STATE_CONFIRMING\020\003\022\023\n\017FRIEND_STATE_OK\020\004\022"
      "\024\n\020FRIEND_STATE_BAN\020\005*\213\001\n\022QUERY_PERSON_S"
      "TATE\022\033\n\027QUERY_PERSON_STATE_IDLE\020\000\022\033\n\027QUE"
      "RY_PERSON_STATE_BUSY\020\001\022\031\n\025QUERY_PERSON_S"
      "TATE_OK\020\002\022 \n\034QUERY_PERSON_STATE_NOT_FOUN"
      "D\020\003*g\n\021GAME_INVITE_STATE\022\032\n\026GAME_INVITE_"
      "STATE_NONE\020\000\022\034\n\030GAME_INVITE_STATE_ACCEPT"
      "\020\001\022\030\n\024GAME_INVITE_STATE_OK\020\002*\265\001\n\030GAME_IN"
      "VITE_REWARD_STATE\022&\n\"GAME_INVITE_REWARD_"
      "STATE_NOT_READY\020\001\022\"\n\036GAME_INVITE_REWARD_"
      "STATE_READY\020\002\022#\n\037GAME_INVITE_REWARD_STAT"
      "E_ACCEPT\020\003\022(\n$GAME_INVITE_REWARD_STATE_O"
      "UT_OF_DATE\020\004B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3897);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Friend.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Friend_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* FriendService_FRIEND_COMMAND_descriptor() {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Friend_2eproto::file_level_enum_descriptors[0];
}
bool FriendService_FRIEND_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FriendService_FRIEND_COMMAND FriendService::QUERY_FRIENDS;
const FriendService_FRIEND_COMMAND FriendService::ADD_FRIEND;
const FriendService_FRIEND_COMMAND FriendService::DELETE_FRIEND;
const FriendService_FRIEND_COMMAND FriendService::VISIT_FRIEND;
const FriendService_FRIEND_COMMAND FriendService::REFRESH_CANDIDATES;
const FriendService_FRIEND_COMMAND FriendService::QUERY_PERSON_BY_UUID;
const FriendService_FRIEND_COMMAND FriendService::REJECT_ALL_ADDING;
const FriendService_FRIEND_COMMAND FriendService::ACCEPT_ALL_ADDING;
const FriendService_FRIEND_COMMAND FriendService::CANCEL_ALL_CONFIRMING;
const FriendService_FRIEND_COMMAND FriendService::BAN_FRIEND;
const FriendService_FRIEND_COMMAND FriendService::UNBAN_FRIEND;
const FriendService_FRIEND_COMMAND FriendService::GIVE_GIFT;
const FriendService_FRIEND_COMMAND FriendService::ACCEPT_GIFT;
const FriendService_FRIEND_COMMAND FriendService::FRIEND_COMMAND_MIN;
const FriendService_FRIEND_COMMAND FriendService::FRIEND_COMMAND_MAX;
const int FriendService::FRIEND_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GameInviteService_GAME_INVITE_COMMAND_descriptor() {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Friend_2eproto::file_level_enum_descriptors[1];
}
bool GameInviteService_GAME_INVITE_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameInviteService_GAME_INVITE_COMMAND GameInviteService::QUERY;
const GameInviteService_GAME_INVITE_COMMAND GameInviteService::INPUT_INVITE_CODE;
const GameInviteService_GAME_INVITE_COMMAND GameInviteService::ACCEPT_REWARD;
const GameInviteService_GAME_INVITE_COMMAND GameInviteService::GAME_INVITE_COMMAND_MIN;
const GameInviteService_GAME_INVITE_COMMAND GameInviteService::GAME_INVITE_COMMAND_MAX;
const int GameInviteService::GAME_INVITE_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RANK_TITLE_descriptor() {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Friend_2eproto::file_level_enum_descriptors[2];
}
bool RANK_TITLE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FRIEND_GIFT_STATE_descriptor() {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Friend_2eproto::file_level_enum_descriptors[3];
}
bool FRIEND_GIFT_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FRIEND_STATE_descriptor() {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Friend_2eproto::file_level_enum_descriptors[4];
}
bool FRIEND_STATE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QUERY_PERSON_STATE_descriptor() {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Friend_2eproto::file_level_enum_descriptors[5];
}
bool QUERY_PERSON_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GAME_INVITE_STATE_descriptor() {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Friend_2eproto::file_level_enum_descriptors[6];
}
bool GAME_INVITE_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GAME_INVITE_REWARD_STATE_descriptor() {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Friend_2eproto::file_level_enum_descriptors[7];
}
bool GAME_INVITE_REWARD_STATE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PersonTeamMember::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonTeamMember::kPosidFieldNumber;
const int PersonTeamMember::kMemberTypeidFieldNumber;
const int PersonTeamMember::kMemberLevelFieldNumber;
const int PersonTeamMember::kMemberStarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonTeamMember::PersonTeamMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_PersonTeamMember.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PersonTeamMember)
}
PersonTeamMember::PersonTeamMember(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_PersonTeamMember.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PersonTeamMember)
}
PersonTeamMember::PersonTeamMember(const PersonTeamMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&member_typeid_, &from.member_typeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_star_) -
    reinterpret_cast<char*>(&member_typeid_)) + sizeof(member_star_));
  // @@protoc_insertion_point(copy_constructor:sg.PersonTeamMember)
}

void PersonTeamMember::SharedCtor() {
  ::memset(&member_typeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_star_) -
      reinterpret_cast<char*>(&member_typeid_)) + sizeof(member_star_));
}

PersonTeamMember::~PersonTeamMember() {
  // @@protoc_insertion_point(destructor:sg.PersonTeamMember)
  SharedDtor();
}

void PersonTeamMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PersonTeamMember::ArenaDtor(void* object) {
  PersonTeamMember* _this = reinterpret_cast< PersonTeamMember* >(object);
  (void)_this;
}
void PersonTeamMember::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PersonTeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PersonTeamMember::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PersonTeamMember& PersonTeamMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_PersonTeamMember.base);
  return *internal_default_instance();
}


void PersonTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PersonTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&member_typeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&member_star_) -
        reinterpret_cast<char*>(&member_typeid_)) + sizeof(member_star_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PersonTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PersonTeamMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 posid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_posid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 member_typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_member_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 member_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_member_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 member_star = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_member_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PersonTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PersonTeamMember)
  return false;
#undef DO_
}

void PersonTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PersonTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 posid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posid(), output);
  }

  // required uint64 member_typeid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->member_typeid(), output);
  }

  // required int32 member_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->member_level(), output);
  }

  // required int32 member_star = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->member_star(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PersonTeamMember)
}

::google::protobuf::uint8* PersonTeamMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PersonTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 posid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posid(), target);
  }

  // required uint64 member_typeid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->member_typeid(), target);
  }

  // required int32 member_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->member_level(), target);
  }

  // required int32 member_star = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->member_star(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PersonTeamMember)
  return target;
}

size_t PersonTeamMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.PersonTeamMember)
  size_t total_size = 0;

  if (has_member_typeid()) {
    // required uint64 member_typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->member_typeid());
  }

  if (has_posid()) {
    // required int32 posid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posid());
  }

  if (has_member_level()) {
    // required int32 member_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_level());
  }

  if (has_member_star()) {
    // required int32 member_star = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_star());
  }

  return total_size;
}
size_t PersonTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PersonTeamMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 member_typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->member_typeid());

    // required int32 posid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posid());

    // required int32 member_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_level());

    // required int32 member_star = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_star());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersonTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PersonTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonTeamMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonTeamMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PersonTeamMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PersonTeamMember)
    MergeFrom(*source);
  }
}

void PersonTeamMember::MergeFrom(const PersonTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PersonTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      member_typeid_ = from.member_typeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      posid_ = from.posid_;
    }
    if (cached_has_bits & 0x00000004u) {
      member_level_ = from.member_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      member_star_ = from.member_star_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PersonTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PersonTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonTeamMember::CopyFrom(const PersonTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PersonTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void PersonTeamMember::Swap(PersonTeamMember* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PersonTeamMember* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PersonTeamMember::UnsafeArenaSwap(PersonTeamMember* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PersonTeamMember::InternalSwap(PersonTeamMember* other) {
  using std::swap;
  swap(member_typeid_, other->member_typeid_);
  swap(posid_, other->posid_);
  swap(member_level_, other->member_level_);
  swap(member_star_, other->member_star_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PersonTeamMember::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PersonTeamMemberList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonTeamMemberList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonTeamMemberList::PersonTeamMemberList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_PersonTeamMemberList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PersonTeamMemberList)
}
PersonTeamMemberList::PersonTeamMemberList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_PersonTeamMemberList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PersonTeamMemberList)
}
PersonTeamMemberList::PersonTeamMemberList(const PersonTeamMemberList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.PersonTeamMemberList)
}

void PersonTeamMemberList::SharedCtor() {
}

PersonTeamMemberList::~PersonTeamMemberList() {
  // @@protoc_insertion_point(destructor:sg.PersonTeamMemberList)
  SharedDtor();
}

void PersonTeamMemberList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PersonTeamMemberList::ArenaDtor(void* object) {
  PersonTeamMemberList* _this = reinterpret_cast< PersonTeamMemberList* >(object);
  (void)_this;
}
void PersonTeamMemberList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PersonTeamMemberList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PersonTeamMemberList::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PersonTeamMemberList& PersonTeamMemberList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_PersonTeamMemberList.base);
  return *internal_default_instance();
}


void PersonTeamMemberList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PersonTeamMemberList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PersonTeamMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PersonTeamMemberList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.PersonTeamMember list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PersonTeamMemberList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PersonTeamMemberList)
  return false;
#undef DO_
}

void PersonTeamMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PersonTeamMemberList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.PersonTeamMember list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PersonTeamMemberList)
}

::google::protobuf::uint8* PersonTeamMemberList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PersonTeamMemberList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.PersonTeamMember list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PersonTeamMemberList)
  return target;
}

size_t PersonTeamMemberList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PersonTeamMemberList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.PersonTeamMember list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersonTeamMemberList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PersonTeamMemberList)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonTeamMemberList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonTeamMemberList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PersonTeamMemberList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PersonTeamMemberList)
    MergeFrom(*source);
  }
}

void PersonTeamMemberList::MergeFrom(const PersonTeamMemberList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PersonTeamMemberList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void PersonTeamMemberList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PersonTeamMemberList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonTeamMemberList::CopyFrom(const PersonTeamMemberList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PersonTeamMemberList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonTeamMemberList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PersonTeamMemberList::Swap(PersonTeamMemberList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PersonTeamMemberList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PersonTeamMemberList::UnsafeArenaSwap(PersonTeamMemberList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PersonTeamMemberList::InternalSwap(PersonTeamMemberList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PersonTeamMemberList::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PersonData::InitAsDefaultInstance() {
  ::sg::_PersonData_default_instance_._instance.get_mutable()->team_ = const_cast< ::sg::PersonTeamMemberList*>(
      ::sg::PersonTeamMemberList::internal_default_instance());
}
void PersonData::unsafe_arena_set_allocated_team(
    ::sg::PersonTeamMemberList* team) {
  if (GetArenaNoVirtual() == NULL) {
    delete team_;
  }
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PersonData.team)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonData::kUuidFieldNumber;
const int PersonData::kRoleNickFieldNumber;
const int PersonData::kRoleLevelFieldNumber;
const int PersonData::kRoleExpFieldNumber;
const int PersonData::kRoleRankFieldNumber;
const int PersonData::kPortraitFieldNumber;
const int PersonData::kPortraitFrameFieldNumber;
const int PersonData::kSignatureFieldNumber;
const int PersonData::kGuildidFieldNumber;
const int PersonData::kGuildNameFieldNumber;
const int PersonData::kGuildBadgeFieldNumber;
const int PersonData::kGuildTitleFieldNumber;
const int PersonData::kForceFieldNumber;
const int PersonData::kIsOnlineFieldNumber;
const int PersonData::kLogintimeFieldNumber;
const int PersonData::kCanChallengeFieldNumber;
const int PersonData::kChallengeScoreFieldNumber;
const int PersonData::kGiftStateFieldNumber;
const int PersonData::kGiftItemTypeidFieldNumber;
const int PersonData::kGiftItemNumFieldNumber;
const int PersonData::kCanGiveGiftFieldNumber;
const int PersonData::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonData::PersonData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_PersonData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PersonData)
}
PersonData::PersonData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_PersonData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PersonData)
}
PersonData::PersonData(const PersonData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_role_nick()) {
    role_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_nick(),
      GetArenaNoVirtual());
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature(),
      GetArenaNoVirtual());
  }
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_name()) {
    guild_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name(),
      GetArenaNoVirtual());
  }
  guild_badge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_badge()) {
    guild_badge_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_badge(),
      GetArenaNoVirtual());
  }
  if (from.has_team()) {
    team_ = new ::sg::PersonTeamMemberList(*from.team_);
  } else {
    team_ = NULL;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gift_item_num_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(gift_item_num_));
  // @@protoc_insertion_point(copy_constructor:sg.PersonData)
}

void PersonData::SharedCtor() {
  role_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_badge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gift_item_num_) -
      reinterpret_cast<char*>(&team_)) + sizeof(gift_item_num_));
}

PersonData::~PersonData() {
  // @@protoc_insertion_point(destructor:sg.PersonData)
  SharedDtor();
}

void PersonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  role_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_badge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete team_;
}

void PersonData::ArenaDtor(void* object) {
  PersonData* _this = reinterpret_cast< PersonData* >(object);
  (void)_this;
}
void PersonData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PersonData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PersonData::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PersonData& PersonData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_PersonData.base);
  return *internal_default_instance();
}


void PersonData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PersonData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      role_nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      guild_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      guild_badge_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(team_ != NULL);
      team_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_exp_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(role_exp_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&role_rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_online_) -
        reinterpret_cast<char*>(&role_rank_)) + sizeof(is_online_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&can_challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gift_item_num_) -
        reinterpret_cast<char*>(&can_challenge_)) + sizeof(gift_item_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PersonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PersonData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes role_nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_role_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 role_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_role_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 role_exp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_role_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 role_rank = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_role_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 portrait = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_portrait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portrait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 portrait_frame = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_portrait_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portrait_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 guildid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_guildid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes guild_name = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes guild_badge = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_badge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 guild_title = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_guild_title();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_title_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 force = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_online = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_is_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 logintime = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_logintime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &logintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_challenge = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_can_challenge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 challenge_score = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_challenge_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.FRIEND_GIFT_STATE gift_state = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::FRIEND_GIFT_STATE_IsValid(value)) {
            set_gift_state(static_cast< ::sg::FRIEND_GIFT_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                41, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gift_item_typeid = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_gift_item_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gift_item_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gift_item_num = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_gift_item_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_give_gift = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_can_give_gift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_give_gift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PersonTeamMemberList team = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PersonData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PersonData)
  return false;
#undef DO_
}

void PersonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PersonData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required bytes role_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->role_nick(), output);
  }

  // required int32 role_level = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_level(), output);
  }

  // required int32 role_exp = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_exp(), output);
  }

  // required int32 role_rank = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_rank(), output);
  }

  // optional int32 portrait = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->portrait(), output);
  }

  // optional int32 portrait_frame = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->portrait_frame(), output);
  }

  // optional bytes signature = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->signature(), output);
  }

  // optional int32 guildid = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->guildid(), output);
  }

  // optional bytes guild_name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->guild_name(), output);
  }

  // optional bytes guild_badge = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->guild_badge(), output);
  }

  // optional int32 guild_title = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->guild_title(), output);
  }

  // required int32 force = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->force(), output);
  }

  // required bool is_online = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_online(), output);
  }

  // optional sfixed64 logintime = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(21, this->logintime(), output);
  }

  // optional bool can_challenge = 31;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->can_challenge(), output);
  }

  // optional int32 challenge_score = 32;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->challenge_score(), output);
  }

  // optional .sg.FRIEND_GIFT_STATE gift_state = 41;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      41, this->gift_state(), output);
  }

  // optional uint64 gift_item_typeid = 42;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(42, this->gift_item_typeid(), output);
  }

  // optional int32 gift_item_num = 43;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->gift_item_num(), output);
  }

  // optional bool can_give_gift = 44;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->can_give_gift(), output);
  }

  // optional .sg.PersonTeamMemberList team = 51;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->_internal_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PersonData)
}

::google::protobuf::uint8* PersonData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PersonData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // required bytes role_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->role_nick(), target);
  }

  // required int32 role_level = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_level(), target);
  }

  // required int32 role_exp = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_exp(), target);
  }

  // required int32 role_rank = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_rank(), target);
  }

  // optional int32 portrait = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->portrait(), target);
  }

  // optional int32 portrait_frame = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->portrait_frame(), target);
  }

  // optional bytes signature = 13;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->signature(), target);
  }

  // optional int32 guildid = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->guildid(), target);
  }

  // optional bytes guild_name = 15;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->guild_name(), target);
  }

  // optional bytes guild_badge = 16;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->guild_badge(), target);
  }

  // optional int32 guild_title = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->guild_title(), target);
  }

  // required int32 force = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->force(), target);
  }

  // required bool is_online = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_online(), target);
  }

  // optional sfixed64 logintime = 21;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(21, this->logintime(), target);
  }

  // optional bool can_challenge = 31;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->can_challenge(), target);
  }

  // optional int32 challenge_score = 32;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->challenge_score(), target);
  }

  // optional .sg.FRIEND_GIFT_STATE gift_state = 41;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      41, this->gift_state(), target);
  }

  // optional uint64 gift_item_typeid = 42;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(42, this->gift_item_typeid(), target);
  }

  // optional int32 gift_item_num = 43;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->gift_item_num(), target);
  }

  // optional bool can_give_gift = 44;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->can_give_gift(), target);
  }

  // optional .sg.PersonTeamMemberList team = 51;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, this->_internal_team(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PersonData)
  return target;
}

size_t PersonData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.PersonData)
  size_t total_size = 0;

  if (has_role_nick()) {
    // required bytes role_nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->role_nick());
  }

  if (has_uuid()) {
    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  if (has_role_level()) {
    // required int32 role_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_level());
  }

  if (has_role_exp()) {
    // required int32 role_exp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_exp());
  }

  if (has_role_rank()) {
    // required int32 role_rank = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_rank());
  }

  if (has_force()) {
    // required int32 force = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->force());
  }

  if (has_is_online()) {
    // required bool is_online = 19;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t PersonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PersonData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000a1e1) ^ 0x0000a1e1) == 0) {  // All required fields are present.
    // required bytes role_nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->role_nick());

    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());

    // required int32 role_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_level());

    // required int32 role_exp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_exp());

    // required int32 role_rank = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_rank());

    // required int32 force = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->force());

    // required bool is_online = 19;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional bytes signature = 13;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes guild_name = 15;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guild_name());
    }

    // optional bytes guild_badge = 16;
    if (has_guild_badge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guild_badge());
    }

    // optional .sg.PersonTeamMemberList team = 51;
    if (has_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_);
    }

  }
  if (_has_bits_[8 / 32] & 7680u) {
    // optional int32 portrait = 11;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->portrait());
    }

    // optional int32 portrait_frame = 12;
    if (has_portrait_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->portrait_frame());
    }

    // optional int32 guildid = 14;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }

    // optional int32 guild_title = 17;
    if (has_guild_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_title());
    }

  }
  // optional sfixed64 logintime = 21;
  if (has_logintime()) {
    total_size += 2 + 8;
  }

  if (_has_bits_[16 / 32] & 4128768u) {
    // optional bool can_challenge = 31;
    if (has_can_challenge()) {
      total_size += 2 + 1;
    }

    // optional bool can_give_gift = 44;
    if (has_can_give_gift()) {
      total_size += 2 + 1;
    }

    // optional int32 challenge_score = 32;
    if (has_challenge_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_score());
    }

    // optional uint64 gift_item_typeid = 42;
    if (has_gift_item_typeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gift_item_typeid());
    }

    // optional .sg.FRIEND_GIFT_STATE gift_state = 41;
    if (has_gift_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gift_state());
    }

    // optional int32 gift_item_num = 43;
    if (has_gift_item_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_item_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersonData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PersonData)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PersonData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PersonData)
    MergeFrom(*source);
  }
}

void PersonData::MergeFrom(const PersonData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PersonData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_role_nick(from.role_nick());
    }
    if (cached_has_bits & 0x00000002u) {
      set_signature(from.signature());
    }
    if (cached_has_bits & 0x00000004u) {
      set_guild_name(from.guild_name());
    }
    if (cached_has_bits & 0x00000008u) {
      set_guild_badge(from.guild_badge());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_team()->::sg::PersonTeamMemberList::MergeFrom(from.team());
    }
    if (cached_has_bits & 0x00000020u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000040u) {
      role_level_ = from.role_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      role_exp_ = from.role_exp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      role_rank_ = from.role_rank_;
    }
    if (cached_has_bits & 0x00000200u) {
      portrait_ = from.portrait_;
    }
    if (cached_has_bits & 0x00000400u) {
      portrait_frame_ = from.portrait_frame_;
    }
    if (cached_has_bits & 0x00000800u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00001000u) {
      guild_title_ = from.guild_title_;
    }
    if (cached_has_bits & 0x00002000u) {
      force_ = from.force_;
    }
    if (cached_has_bits & 0x00004000u) {
      logintime_ = from.logintime_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_online_ = from.is_online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      can_challenge_ = from.can_challenge_;
    }
    if (cached_has_bits & 0x00020000u) {
      can_give_gift_ = from.can_give_gift_;
    }
    if (cached_has_bits & 0x00040000u) {
      challenge_score_ = from.challenge_score_;
    }
    if (cached_has_bits & 0x00080000u) {
      gift_item_typeid_ = from.gift_item_typeid_;
    }
    if (cached_has_bits & 0x00100000u) {
      gift_state_ = from.gift_state_;
    }
    if (cached_has_bits & 0x00200000u) {
      gift_item_num_ = from.gift_item_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PersonData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PersonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonData::CopyFrom(const PersonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PersonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000a1e1) != 0x0000a1e1) return false;
  if (has_team()) {
    if (!this->team_->IsInitialized()) return false;
  }
  return true;
}

void PersonData::Swap(PersonData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PersonData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PersonData::UnsafeArenaSwap(PersonData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PersonData::InternalSwap(PersonData* other) {
  using std::swap;
  role_nick_.Swap(&other->role_nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_name_.Swap(&other->guild_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_badge_.Swap(&other->guild_badge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_, other->team_);
  swap(uuid_, other->uuid_);
  swap(role_level_, other->role_level_);
  swap(role_exp_, other->role_exp_);
  swap(role_rank_, other->role_rank_);
  swap(portrait_, other->portrait_);
  swap(portrait_frame_, other->portrait_frame_);
  swap(guildid_, other->guildid_);
  swap(guild_title_, other->guild_title_);
  swap(force_, other->force_);
  swap(logintime_, other->logintime_);
  swap(is_online_, other->is_online_);
  swap(can_challenge_, other->can_challenge_);
  swap(can_give_gift_, other->can_give_gift_);
  swap(challenge_score_, other->challenge_score_);
  swap(gift_item_typeid_, other->gift_item_typeid_);
  swap(gift_state_, other->gift_state_);
  swap(gift_item_num_, other->gift_item_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PersonData::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PersonDataList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonDataList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonDataList::PersonDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_PersonDataList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PersonDataList)
}
PersonDataList::PersonDataList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_PersonDataList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PersonDataList)
}
PersonDataList::PersonDataList(const PersonDataList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.PersonDataList)
}

void PersonDataList::SharedCtor() {
}

PersonDataList::~PersonDataList() {
  // @@protoc_insertion_point(destructor:sg.PersonDataList)
  SharedDtor();
}

void PersonDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PersonDataList::ArenaDtor(void* object) {
  PersonDataList* _this = reinterpret_cast< PersonDataList* >(object);
  (void)_this;
}
void PersonDataList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PersonDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PersonDataList::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PersonDataList& PersonDataList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_PersonDataList.base);
  return *internal_default_instance();
}


void PersonDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PersonDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PersonDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PersonDataList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.PersonData list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PersonDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PersonDataList)
  return false;
#undef DO_
}

void PersonDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PersonDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.PersonData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PersonDataList)
}

::google::protobuf::uint8* PersonDataList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PersonDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.PersonData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PersonDataList)
  return target;
}

size_t PersonDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PersonDataList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.PersonData list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersonDataList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PersonDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonDataList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonDataList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PersonDataList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PersonDataList)
    MergeFrom(*source);
  }
}

void PersonDataList::MergeFrom(const PersonDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PersonDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void PersonDataList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PersonDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonDataList::CopyFrom(const PersonDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PersonDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonDataList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PersonDataList::Swap(PersonDataList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PersonDataList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PersonDataList::UnsafeArenaSwap(PersonDataList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PersonDataList::InternalSwap(PersonDataList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PersonDataList::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryPersonResult::InitAsDefaultInstance() {
  ::sg::_QueryPersonResult_default_instance_._instance.get_mutable()->person_ = const_cast< ::sg::PersonData*>(
      ::sg::PersonData::internal_default_instance());
}
void QueryPersonResult::unsafe_arena_set_allocated_person(
    ::sg::PersonData* person) {
  if (GetArenaNoVirtual() == NULL) {
    delete person_;
  }
  person_ = person;
  if (person) {
    set_has_person();
  } else {
    clear_has_person();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.QueryPersonResult.person)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPersonResult::kStateFieldNumber;
const int QueryPersonResult::kParamUuidFieldNumber;
const int QueryPersonResult::kPersonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPersonResult::QueryPersonResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_QueryPersonResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.QueryPersonResult)
}
QueryPersonResult::QueryPersonResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_QueryPersonResult.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.QueryPersonResult)
}
QueryPersonResult::QueryPersonResult(const QueryPersonResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_person()) {
    person_ = new ::sg::PersonData(*from.person_);
  } else {
    person_ = NULL;
  }
  ::memcpy(&param_uuid_, &from.param_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&param_uuid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.QueryPersonResult)
}

void QueryPersonResult::SharedCtor() {
  ::memset(&person_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&person_)) + sizeof(state_));
}

QueryPersonResult::~QueryPersonResult() {
  // @@protoc_insertion_point(destructor:sg.QueryPersonResult)
  SharedDtor();
}

void QueryPersonResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete person_;
}

void QueryPersonResult::ArenaDtor(void* object) {
  QueryPersonResult* _this = reinterpret_cast< QueryPersonResult* >(object);
  (void)_this;
}
void QueryPersonResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QueryPersonResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QueryPersonResult::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryPersonResult& QueryPersonResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_QueryPersonResult.base);
  return *internal_default_instance();
}


void QueryPersonResult::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.QueryPersonResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(person_ != NULL);
    person_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&param_uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&param_uuid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryPersonResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.QueryPersonResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.QUERY_PERSON_STATE state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::QUERY_PERSON_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::QUERY_PERSON_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 param_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_param_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PersonData person = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_person()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.QueryPersonResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.QueryPersonResult)
  return false;
#undef DO_
}

void QueryPersonResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.QueryPersonResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.QUERY_PERSON_STATE state = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint64 param_uuid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->param_uuid(), output);
  }

  // optional .sg.PersonData person = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_person(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.QueryPersonResult)
}

::google::protobuf::uint8* QueryPersonResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.QueryPersonResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.QUERY_PERSON_STATE state = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint64 param_uuid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->param_uuid(), target);
  }

  // optional .sg.PersonData person = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_person(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.QueryPersonResult)
  return target;
}

size_t QueryPersonResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.QueryPersonResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.QUERY_PERSON_STATE state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.PersonData person = 3;
    if (has_person()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *person_);
    }

    // optional uint64 param_uuid = 2;
    if (has_param_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_uuid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPersonResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.QueryPersonResult)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPersonResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPersonResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.QueryPersonResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.QueryPersonResult)
    MergeFrom(*source);
  }
}

void QueryPersonResult::MergeFrom(const QueryPersonResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.QueryPersonResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_person()->::sg::PersonData::MergeFrom(from.person());
    }
    if (cached_has_bits & 0x00000002u) {
      param_uuid_ = from.param_uuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryPersonResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.QueryPersonResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPersonResult::CopyFrom(const QueryPersonResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.QueryPersonResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPersonResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_person()) {
    if (!this->person_->IsInitialized()) return false;
  }
  return true;
}

void QueryPersonResult::Swap(QueryPersonResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QueryPersonResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void QueryPersonResult::UnsafeArenaSwap(QueryPersonResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QueryPersonResult::InternalSwap(QueryPersonResult* other) {
  using std::swap;
  swap(person_, other->person_);
  swap(param_uuid_, other->param_uuid_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QueryPersonResult::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendService_FriendRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendService_FriendRequest::kCmdFieldNumber;
const int FriendService_FriendRequest::kPersonUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendService_FriendRequest::FriendService_FriendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_FriendService_FriendRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FriendService.FriendRequest)
}
FriendService_FriendRequest::FriendService_FriendRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_FriendService_FriendRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FriendService.FriendRequest)
}
FriendService_FriendRequest::FriendService_FriendRequest(const FriendService_FriendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&person_uuid_, &from.person_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&person_uuid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.FriendService.FriendRequest)
}

void FriendService_FriendRequest::SharedCtor() {
  person_uuid_ = GOOGLE_ULONGLONG(0);
  cmd_ = 1;
}

FriendService_FriendRequest::~FriendService_FriendRequest() {
  // @@protoc_insertion_point(destructor:sg.FriendService.FriendRequest)
  SharedDtor();
}

void FriendService_FriendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FriendService_FriendRequest::ArenaDtor(void* object) {
  FriendService_FriendRequest* _this = reinterpret_cast< FriendService_FriendRequest* >(object);
  (void)_this;
}
void FriendService_FriendRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FriendService_FriendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendService_FriendRequest::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendService_FriendRequest& FriendService_FriendRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_FriendService_FriendRequest.base);
  return *internal_default_instance();
}


void FriendService_FriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FriendService.FriendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    person_uuid_ = GOOGLE_ULONGLONG(0);
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendService_FriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FriendService.FriendRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.FriendService.FRIEND_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::FriendService_FRIEND_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::sg::FriendService_FRIEND_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 person_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_person_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &person_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FriendService.FriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FriendService.FriendRequest)
  return false;
#undef DO_
}

void FriendService_FriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FriendService.FriendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.FriendService.FRIEND_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint64 person_uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->person_uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FriendService.FriendRequest)
}

::google::protobuf::uint8* FriendService_FriendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FriendService.FriendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.FriendService.FRIEND_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint64 person_uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->person_uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FriendService.FriendRequest)
  return target;
}

size_t FriendService_FriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FriendService.FriendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.FriendService.FRIEND_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // optional uint64 person_uuid = 2;
  if (has_person_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->person_uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendService_FriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FriendService.FriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendService_FriendRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendService_FriendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FriendService.FriendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FriendService.FriendRequest)
    MergeFrom(*source);
  }
}

void FriendService_FriendRequest::MergeFrom(const FriendService_FriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FriendService.FriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      person_uuid_ = from.person_uuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendService_FriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FriendService.FriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendService_FriendRequest::CopyFrom(const FriendService_FriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FriendService.FriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendService_FriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void FriendService_FriendRequest::Swap(FriendService_FriendRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FriendService_FriendRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FriendService_FriendRequest::UnsafeArenaSwap(FriendService_FriendRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FriendService_FriendRequest::InternalSwap(FriendService_FriendRequest* other) {
  using std::swap;
  swap(person_uuid_, other->person_uuid_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendService_FriendRequest::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendService_FriendResponse::InitAsDefaultInstance() {
  ::sg::_FriendService_FriendResponse_default_instance_._instance.get_mutable()->friend_list_ = const_cast< ::sg::PersonDataList*>(
      ::sg::PersonDataList::internal_default_instance());
  ::sg::_FriendService_FriendResponse_default_instance_._instance.get_mutable()->candidate_list_ = const_cast< ::sg::PersonDataList*>(
      ::sg::PersonDataList::internal_default_instance());
  ::sg::_FriendService_FriendResponse_default_instance_._instance.get_mutable()->adding_list_ = const_cast< ::sg::PersonDataList*>(
      ::sg::PersonDataList::internal_default_instance());
  ::sg::_FriendService_FriendResponse_default_instance_._instance.get_mutable()->confirming_list_ = const_cast< ::sg::PersonDataList*>(
      ::sg::PersonDataList::internal_default_instance());
  ::sg::_FriendService_FriendResponse_default_instance_._instance.get_mutable()->ban_list_ = const_cast< ::sg::PersonDataList*>(
      ::sg::PersonDataList::internal_default_instance());
  ::sg::_FriendService_FriendResponse_default_instance_._instance.get_mutable()->qurey_person_result_ = const_cast< ::sg::QueryPersonResult*>(
      ::sg::QueryPersonResult::internal_default_instance());
  ::sg::_FriendService_FriendResponse_default_instance_._instance.get_mutable()->gift_accepted_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void FriendService_FriendResponse::unsafe_arena_set_allocated_friend_list(
    ::sg::PersonDataList* friend_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete friend_list_;
  }
  friend_list_ = friend_list;
  if (friend_list) {
    set_has_friend_list();
  } else {
    clear_has_friend_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FriendService.FriendResponse.friend_list)
}
void FriendService_FriendResponse::unsafe_arena_set_allocated_candidate_list(
    ::sg::PersonDataList* candidate_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete candidate_list_;
  }
  candidate_list_ = candidate_list;
  if (candidate_list) {
    set_has_candidate_list();
  } else {
    clear_has_candidate_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FriendService.FriendResponse.candidate_list)
}
void FriendService_FriendResponse::unsafe_arena_set_allocated_adding_list(
    ::sg::PersonDataList* adding_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete adding_list_;
  }
  adding_list_ = adding_list;
  if (adding_list) {
    set_has_adding_list();
  } else {
    clear_has_adding_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FriendService.FriendResponse.adding_list)
}
void FriendService_FriendResponse::unsafe_arena_set_allocated_confirming_list(
    ::sg::PersonDataList* confirming_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete confirming_list_;
  }
  confirming_list_ = confirming_list;
  if (confirming_list) {
    set_has_confirming_list();
  } else {
    clear_has_confirming_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FriendService.FriendResponse.confirming_list)
}
void FriendService_FriendResponse::unsafe_arena_set_allocated_ban_list(
    ::sg::PersonDataList* ban_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete ban_list_;
  }
  ban_list_ = ban_list;
  if (ban_list) {
    set_has_ban_list();
  } else {
    clear_has_ban_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FriendService.FriendResponse.ban_list)
}
void FriendService_FriendResponse::unsafe_arena_set_allocated_qurey_person_result(
    ::sg::QueryPersonResult* qurey_person_result) {
  if (GetArenaNoVirtual() == NULL) {
    delete qurey_person_result_;
  }
  qurey_person_result_ = qurey_person_result;
  if (qurey_person_result) {
    set_has_qurey_person_result();
  } else {
    clear_has_qurey_person_result();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FriendService.FriendResponse.qurey_person_result)
}
void FriendService_FriendResponse::unsafe_arena_set_allocated_gift_accepted(
    ::sg::Reward* gift_accepted) {
  if (GetArenaNoVirtual() == NULL) {
    delete gift_accepted_;
  }
  gift_accepted_ = gift_accepted;
  if (gift_accepted) {
    set_has_gift_accepted();
  } else {
    clear_has_gift_accepted();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FriendService.FriendResponse.gift_accepted)
}
void FriendService_FriendResponse::clear_gift_accepted() {
  if (gift_accepted_ != NULL) gift_accepted_->Clear();
  clear_has_gift_accepted();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendService_FriendResponse::kResultFieldNumber;
const int FriendService_FriendResponse::kFriendListFieldNumber;
const int FriendService_FriendResponse::kCandidateListFieldNumber;
const int FriendService_FriendResponse::kAddingListFieldNumber;
const int FriendService_FriendResponse::kConfirmingListFieldNumber;
const int FriendService_FriendResponse::kChallengeNumFieldNumber;
const int FriendService_FriendResponse::kChallengeNumMaxFieldNumber;
const int FriendService_FriendResponse::kBanListFieldNumber;
const int FriendService_FriendResponse::kQureyPersonResultFieldNumber;
const int FriendService_FriendResponse::kGiftAcceptedFieldNumber;
const int FriendService_FriendResponse::kGiftAcceptNumFieldNumber;
const int FriendService_FriendResponse::kGiftAcceptNumMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendService_FriendResponse::FriendService_FriendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_FriendService_FriendResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FriendService.FriendResponse)
}
FriendService_FriendResponse::FriendService_FriendResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_FriendService_FriendResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FriendService.FriendResponse)
}
FriendService_FriendResponse::FriendService_FriendResponse(const FriendService_FriendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_friend_list()) {
    friend_list_ = new ::sg::PersonDataList(*from.friend_list_);
  } else {
    friend_list_ = NULL;
  }
  if (from.has_candidate_list()) {
    candidate_list_ = new ::sg::PersonDataList(*from.candidate_list_);
  } else {
    candidate_list_ = NULL;
  }
  if (from.has_adding_list()) {
    adding_list_ = new ::sg::PersonDataList(*from.adding_list_);
  } else {
    adding_list_ = NULL;
  }
  if (from.has_confirming_list()) {
    confirming_list_ = new ::sg::PersonDataList(*from.confirming_list_);
  } else {
    confirming_list_ = NULL;
  }
  if (from.has_ban_list()) {
    ban_list_ = new ::sg::PersonDataList(*from.ban_list_);
  } else {
    ban_list_ = NULL;
  }
  if (from.has_qurey_person_result()) {
    qurey_person_result_ = new ::sg::QueryPersonResult(*from.qurey_person_result_);
  } else {
    qurey_person_result_ = NULL;
  }
  if (from.has_gift_accepted()) {
    gift_accepted_ = new ::sg::Reward(*from.gift_accepted_);
  } else {
    gift_accepted_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&gift_accept_num_) -
    reinterpret_cast<char*>(&result_)) + sizeof(gift_accept_num_));
  // @@protoc_insertion_point(copy_constructor:sg.FriendService.FriendResponse)
}

void FriendService_FriendResponse::SharedCtor() {
  ::memset(&friend_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gift_accept_num_) -
      reinterpret_cast<char*>(&friend_list_)) + sizeof(gift_accept_num_));
}

FriendService_FriendResponse::~FriendService_FriendResponse() {
  // @@protoc_insertion_point(destructor:sg.FriendService.FriendResponse)
  SharedDtor();
}

void FriendService_FriendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete friend_list_;
  if (this != internal_default_instance()) delete candidate_list_;
  if (this != internal_default_instance()) delete adding_list_;
  if (this != internal_default_instance()) delete confirming_list_;
  if (this != internal_default_instance()) delete ban_list_;
  if (this != internal_default_instance()) delete qurey_person_result_;
  if (this != internal_default_instance()) delete gift_accepted_;
}

void FriendService_FriendResponse::ArenaDtor(void* object) {
  FriendService_FriendResponse* _this = reinterpret_cast< FriendService_FriendResponse* >(object);
  (void)_this;
}
void FriendService_FriendResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FriendService_FriendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendService_FriendResponse::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendService_FriendResponse& FriendService_FriendResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_FriendService_FriendResponse.base);
  return *internal_default_instance();
}


void FriendService_FriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FriendService.FriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(friend_list_ != NULL);
      friend_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(candidate_list_ != NULL);
      candidate_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(adding_list_ != NULL);
      adding_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(confirming_list_ != NULL);
      confirming_list_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ban_list_ != NULL);
      ban_list_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(qurey_person_result_ != NULL);
      qurey_person_result_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(gift_accepted_ != NULL);
      gift_accepted_->Clear();
    }
  }
  result_ = 0;
  if (cached_has_bits & 3840u) {
    ::memset(&challenge_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gift_accept_num_) -
        reinterpret_cast<char*>(&challenge_num_)) + sizeof(gift_accept_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendService_FriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FriendService.FriendResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PersonDataList friend_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_friend_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PersonDataList candidate_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_candidate_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PersonDataList adding_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_adding_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PersonDataList confirming_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confirming_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 challenge_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_challenge_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 challenge_num_max = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_challenge_num_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_num_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PersonDataList ban_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ban_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.QueryPersonResult qurey_person_result = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qurey_person_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward gift_accepted = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gift_accepted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gift_accept_num = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_gift_accept_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_accept_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gift_accept_num_max = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_gift_accept_num_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_accept_num_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FriendService.FriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FriendService.FriendResponse)
  return false;
#undef DO_
}

void FriendService_FriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FriendService.FriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.PersonDataList friend_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_friend_list(), output);
  }

  // optional .sg.PersonDataList candidate_list = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_candidate_list(), output);
  }

  // optional .sg.PersonDataList adding_list = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_adding_list(), output);
  }

  // optional .sg.PersonDataList confirming_list = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_confirming_list(), output);
  }

  // optional int32 challenge_num = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->challenge_num(), output);
  }

  // optional int32 challenge_num_max = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->challenge_num_max(), output);
  }

  // optional .sg.PersonDataList ban_list = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_ban_list(), output);
  }

  // optional .sg.QueryPersonResult qurey_person_result = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_qurey_person_result(), output);
  }

  // optional .sg.Reward gift_accepted = 21;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_gift_accepted(), output);
  }

  // optional int32 gift_accept_num = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->gift_accept_num(), output);
  }

  // optional int32 gift_accept_num_max = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->gift_accept_num_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FriendService.FriendResponse)
}

::google::protobuf::uint8* FriendService_FriendResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FriendService.FriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.PersonDataList friend_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_friend_list(), deterministic, target);
  }

  // optional .sg.PersonDataList candidate_list = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_candidate_list(), deterministic, target);
  }

  // optional .sg.PersonDataList adding_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_adding_list(), deterministic, target);
  }

  // optional .sg.PersonDataList confirming_list = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_confirming_list(), deterministic, target);
  }

  // optional int32 challenge_num = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->challenge_num(), target);
  }

  // optional int32 challenge_num_max = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->challenge_num_max(), target);
  }

  // optional .sg.PersonDataList ban_list = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_ban_list(), deterministic, target);
  }

  // optional .sg.QueryPersonResult qurey_person_result = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_qurey_person_result(), deterministic, target);
  }

  // optional .sg.Reward gift_accepted = 21;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_gift_accepted(), deterministic, target);
  }

  // optional int32 gift_accept_num = 22;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->gift_accept_num(), target);
  }

  // optional int32 gift_accept_num_max = 23;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->gift_accept_num_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FriendService.FriendResponse)
  return target;
}

size_t FriendService_FriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FriendService.FriendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .sg.PersonDataList friend_list = 2;
    if (has_friend_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *friend_list_);
    }

    // optional .sg.PersonDataList candidate_list = 3;
    if (has_candidate_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *candidate_list_);
    }

    // optional .sg.PersonDataList adding_list = 4;
    if (has_adding_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *adding_list_);
    }

    // optional .sg.PersonDataList confirming_list = 5;
    if (has_confirming_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *confirming_list_);
    }

    // optional .sg.PersonDataList ban_list = 8;
    if (has_ban_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ban_list_);
    }

    // optional .sg.QueryPersonResult qurey_person_result = 11;
    if (has_qurey_person_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *qurey_person_result_);
    }

    // optional .sg.Reward gift_accepted = 21;
    if (has_gift_accepted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gift_accepted_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 challenge_num = 6;
    if (has_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_num());
    }

    // optional int32 gift_accept_num_max = 23;
    if (has_gift_accept_num_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_accept_num_max());
    }

    // optional int32 challenge_num_max = 7;
    if (has_challenge_num_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_num_max());
    }

    // optional int32 gift_accept_num = 22;
    if (has_gift_accept_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_accept_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendService_FriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FriendService.FriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendService_FriendResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendService_FriendResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FriendService.FriendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FriendService.FriendResponse)
    MergeFrom(*source);
  }
}

void FriendService_FriendResponse::MergeFrom(const FriendService_FriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FriendService.FriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_friend_list()->::sg::PersonDataList::MergeFrom(from.friend_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_candidate_list()->::sg::PersonDataList::MergeFrom(from.candidate_list());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_adding_list()->::sg::PersonDataList::MergeFrom(from.adding_list());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_confirming_list()->::sg::PersonDataList::MergeFrom(from.confirming_list());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_ban_list()->::sg::PersonDataList::MergeFrom(from.ban_list());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_qurey_person_result()->::sg::QueryPersonResult::MergeFrom(from.qurey_person_result());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_gift_accepted()->::sg::Reward::MergeFrom(from.gift_accepted());
    }
    if (cached_has_bits & 0x00000080u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      challenge_num_ = from.challenge_num_;
    }
    if (cached_has_bits & 0x00000200u) {
      gift_accept_num_max_ = from.gift_accept_num_max_;
    }
    if (cached_has_bits & 0x00000400u) {
      challenge_num_max_ = from.challenge_num_max_;
    }
    if (cached_has_bits & 0x00000800u) {
      gift_accept_num_ = from.gift_accept_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendService_FriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FriendService.FriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendService_FriendResponse::CopyFrom(const FriendService_FriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FriendService.FriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendService_FriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (has_friend_list()) {
    if (!this->friend_list_->IsInitialized()) return false;
  }
  if (has_candidate_list()) {
    if (!this->candidate_list_->IsInitialized()) return false;
  }
  if (has_adding_list()) {
    if (!this->adding_list_->IsInitialized()) return false;
  }
  if (has_confirming_list()) {
    if (!this->confirming_list_->IsInitialized()) return false;
  }
  if (has_ban_list()) {
    if (!this->ban_list_->IsInitialized()) return false;
  }
  if (has_qurey_person_result()) {
    if (!this->qurey_person_result_->IsInitialized()) return false;
  }
  if (has_gift_accepted()) {
    if (!this->gift_accepted_->IsInitialized()) return false;
  }
  return true;
}

void FriendService_FriendResponse::Swap(FriendService_FriendResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FriendService_FriendResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FriendService_FriendResponse::UnsafeArenaSwap(FriendService_FriendResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FriendService_FriendResponse::InternalSwap(FriendService_FriendResponse* other) {
  using std::swap;
  swap(friend_list_, other->friend_list_);
  swap(candidate_list_, other->candidate_list_);
  swap(adding_list_, other->adding_list_);
  swap(confirming_list_, other->confirming_list_);
  swap(ban_list_, other->ban_list_);
  swap(qurey_person_result_, other->qurey_person_result_);
  swap(gift_accepted_, other->gift_accepted_);
  swap(result_, other->result_);
  swap(challenge_num_, other->challenge_num_);
  swap(gift_accept_num_max_, other->gift_accept_num_max_);
  swap(challenge_num_max_, other->challenge_num_max_);
  swap(gift_accept_num_, other->gift_accept_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendService_FriendResponse::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendService::InitAsDefaultInstance() {
  ::sg::_FriendService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::FriendService_FriendRequest*>(
      ::sg::FriendService_FriendRequest::internal_default_instance());
  ::sg::_FriendService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::FriendService_FriendResponse*>(
      ::sg::FriendService_FriendResponse::internal_default_instance());
}
void FriendService::unsafe_arena_set_allocated_req(
    ::sg::FriendService_FriendRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FriendService.req)
}
void FriendService::unsafe_arena_set_allocated_resp(
    ::sg::FriendService_FriendResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FriendService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendService::kReqFieldNumber;
const int FriendService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendService::FriendService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_FriendService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FriendService)
}
FriendService::FriendService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_FriendService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FriendService)
}
FriendService::FriendService(const FriendService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::FriendService_FriendRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::FriendService_FriendResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.FriendService)
}

void FriendService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

FriendService::~FriendService() {
  // @@protoc_insertion_point(destructor:sg.FriendService)
  SharedDtor();
}

void FriendService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void FriendService::ArenaDtor(void* object) {
  FriendService* _this = reinterpret_cast< FriendService* >(object);
  (void)_this;
}
void FriendService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FriendService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendService::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendService& FriendService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_FriendService.base);
  return *internal_default_instance();
}


void FriendService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FriendService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FriendService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.FriendService.FriendRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.FriendService.FriendResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FriendService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FriendService)
  return false;
#undef DO_
}

void FriendService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FriendService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.FriendService.FriendRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.FriendService.FriendResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FriendService)
}

::google::protobuf::uint8* FriendService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FriendService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.FriendService.FriendRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.FriendService.FriendResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FriendService)
  return target;
}

size_t FriendService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FriendService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.FriendService.FriendRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.FriendService.FriendResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FriendService)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FriendService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FriendService)
    MergeFrom(*source);
  }
}

void FriendService::MergeFrom(const FriendService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FriendService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::FriendService_FriendRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::FriendService_FriendResponse::MergeFrom(from.resp());
    }
  }
}

void FriendService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FriendService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendService::CopyFrom(const FriendService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FriendService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void FriendService::Swap(FriendService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FriendService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FriendService::UnsafeArenaSwap(FriendService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FriendService::InternalSwap(FriendService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendService::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInviteReward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInviteReward::kIdFieldNumber;
const int GameInviteReward::kRewardStateFieldNumber;
const int GameInviteReward::kRewardReasonFieldNumber;
const int GameInviteReward::kItemTypeFieldNumber;
const int GameInviteReward::kItemTypeidFieldNumber;
const int GameInviteReward::kItemNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInviteReward::GameInviteReward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_GameInviteReward.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameInviteReward)
}
GameInviteReward::GameInviteReward(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteReward.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameInviteReward)
}
GameInviteReward::GameInviteReward(const GameInviteReward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(reward_state_));
  // @@protoc_insertion_point(copy_constructor:sg.GameInviteReward)
}

void GameInviteReward::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(item_num_));
  reward_state_ = 1;
}

GameInviteReward::~GameInviteReward() {
  // @@protoc_insertion_point(destructor:sg.GameInviteReward)
  SharedDtor();
}

void GameInviteReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GameInviteReward::ArenaDtor(void* object) {
  GameInviteReward* _this = reinterpret_cast< GameInviteReward* >(object);
  (void)_this;
}
void GameInviteReward::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameInviteReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInviteReward::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInviteReward& GameInviteReward::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteReward.base);
  return *internal_default_instance();
}


void GameInviteReward::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameInviteReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_num_) -
        reinterpret_cast<char*>(&id_)) + sizeof(item_num_));
    reward_state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInviteReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameInviteReward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.GAME_INVITE_REWARD_STATE reward_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GAME_INVITE_REWARD_STATE_IsValid(value)) {
            set_reward_state(static_cast< ::sg::GAME_INVITE_REWARD_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 reward_reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_reward_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 item_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_item_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 item_typeid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_item_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 item_num = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_item_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameInviteReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameInviteReward)
  return false;
#undef DO_
}

void GameInviteReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameInviteReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .sg.GAME_INVITE_REWARD_STATE reward_state = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reward_state(), output);
  }

  // required int32 reward_reason = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_reason(), output);
  }

  // required int32 item_type = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->item_type(), output);
  }

  // required uint64 item_typeid = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->item_typeid(), output);
  }

  // required int32 item_num = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->item_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameInviteReward)
}

::google::protobuf::uint8* GameInviteReward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameInviteReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .sg.GAME_INVITE_REWARD_STATE reward_state = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reward_state(), target);
  }

  // required int32 reward_reason = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_reason(), target);
  }

  // required int32 item_type = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->item_type(), target);
  }

  // required uint64 item_typeid = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->item_typeid(), target);
  }

  // required int32 item_num = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->item_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameInviteReward)
  return target;
}

size_t GameInviteReward::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.GameInviteReward)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_reward_reason()) {
    // required int32 reward_reason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reward_reason());
  }

  if (has_item_typeid()) {
    // required uint64 item_typeid = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_typeid());
  }

  if (has_item_type()) {
    // required int32 item_type = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_type());
  }

  if (has_item_num()) {
    // required int32 item_num = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_num());
  }

  if (has_reward_state()) {
    // required .sg.GAME_INVITE_REWARD_STATE reward_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_state());
  }

  return total_size;
}
size_t GameInviteReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameInviteReward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 reward_reason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reward_reason());

    // required uint64 item_typeid = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_typeid());

    // required int32 item_type = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_type());

    // required int32 item_num = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_num());

    // required .sg.GAME_INVITE_REWARD_STATE reward_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInviteReward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameInviteReward)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInviteReward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInviteReward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameInviteReward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameInviteReward)
    MergeFrom(*source);
  }
}

void GameInviteReward::MergeFrom(const GameInviteReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameInviteReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      reward_reason_ = from.reward_reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_typeid_ = from.item_typeid_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_num_ = from.item_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      reward_state_ = from.reward_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameInviteReward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameInviteReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInviteReward::CopyFrom(const GameInviteReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameInviteReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInviteReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void GameInviteReward::Swap(GameInviteReward* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameInviteReward* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameInviteReward::UnsafeArenaSwap(GameInviteReward* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameInviteReward::InternalSwap(GameInviteReward* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(reward_reason_, other->reward_reason_);
  swap(item_typeid_, other->item_typeid_);
  swap(item_type_, other->item_type_);
  swap(item_num_, other->item_num_);
  swap(reward_state_, other->reward_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInviteReward::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInviteRewardList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInviteRewardList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInviteRewardList::GameInviteRewardList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_GameInviteRewardList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameInviteRewardList)
}
GameInviteRewardList::GameInviteRewardList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteRewardList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameInviteRewardList)
}
GameInviteRewardList::GameInviteRewardList(const GameInviteRewardList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.GameInviteRewardList)
}

void GameInviteRewardList::SharedCtor() {
}

GameInviteRewardList::~GameInviteRewardList() {
  // @@protoc_insertion_point(destructor:sg.GameInviteRewardList)
  SharedDtor();
}

void GameInviteRewardList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GameInviteRewardList::ArenaDtor(void* object) {
  GameInviteRewardList* _this = reinterpret_cast< GameInviteRewardList* >(object);
  (void)_this;
}
void GameInviteRewardList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameInviteRewardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInviteRewardList::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInviteRewardList& GameInviteRewardList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteRewardList.base);
  return *internal_default_instance();
}


void GameInviteRewardList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameInviteRewardList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInviteRewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameInviteRewardList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.GameInviteReward list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameInviteRewardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameInviteRewardList)
  return false;
#undef DO_
}

void GameInviteRewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameInviteRewardList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GameInviteReward list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameInviteRewardList)
}

::google::protobuf::uint8* GameInviteRewardList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameInviteRewardList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GameInviteReward list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameInviteRewardList)
  return target;
}

size_t GameInviteRewardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameInviteRewardList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.GameInviteReward list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInviteRewardList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameInviteRewardList)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInviteRewardList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInviteRewardList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameInviteRewardList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameInviteRewardList)
    MergeFrom(*source);
  }
}

void GameInviteRewardList::MergeFrom(const GameInviteRewardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameInviteRewardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void GameInviteRewardList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameInviteRewardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInviteRewardList::CopyFrom(const GameInviteRewardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameInviteRewardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInviteRewardList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GameInviteRewardList::Swap(GameInviteRewardList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameInviteRewardList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameInviteRewardList::UnsafeArenaSwap(GameInviteRewardList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameInviteRewardList::InternalSwap(GameInviteRewardList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInviteRewardList::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InputInviteCodeResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputInviteCodeResult::kStateFieldNumber;
const int InputInviteCodeResult::kParamUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputInviteCodeResult::InputInviteCodeResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_InputInviteCodeResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.InputInviteCodeResult)
}
InputInviteCodeResult::InputInviteCodeResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_InputInviteCodeResult.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.InputInviteCodeResult)
}
InputInviteCodeResult::InputInviteCodeResult(const InputInviteCodeResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&param_uuid_, &from.param_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&param_uuid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.InputInviteCodeResult)
}

void InputInviteCodeResult::SharedCtor() {
  ::memset(&param_uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&param_uuid_)) + sizeof(state_));
}

InputInviteCodeResult::~InputInviteCodeResult() {
  // @@protoc_insertion_point(destructor:sg.InputInviteCodeResult)
  SharedDtor();
}

void InputInviteCodeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void InputInviteCodeResult::ArenaDtor(void* object) {
  InputInviteCodeResult* _this = reinterpret_cast< InputInviteCodeResult* >(object);
  (void)_this;
}
void InputInviteCodeResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void InputInviteCodeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InputInviteCodeResult::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputInviteCodeResult& InputInviteCodeResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_InputInviteCodeResult.base);
  return *internal_default_instance();
}


void InputInviteCodeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.InputInviteCodeResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&param_uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&param_uuid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InputInviteCodeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.InputInviteCodeResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.QUERY_PERSON_STATE state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::QUERY_PERSON_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::QUERY_PERSON_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 param_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_param_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.InputInviteCodeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.InputInviteCodeResult)
  return false;
#undef DO_
}

void InputInviteCodeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.InputInviteCodeResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.QUERY_PERSON_STATE state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint64 param_uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->param_uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.InputInviteCodeResult)
}

::google::protobuf::uint8* InputInviteCodeResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.InputInviteCodeResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.QUERY_PERSON_STATE state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint64 param_uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->param_uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.InputInviteCodeResult)
  return target;
}

size_t InputInviteCodeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.InputInviteCodeResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.QUERY_PERSON_STATE state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }
  // optional uint64 param_uuid = 2;
  if (has_param_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->param_uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputInviteCodeResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.InputInviteCodeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InputInviteCodeResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputInviteCodeResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.InputInviteCodeResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.InputInviteCodeResult)
    MergeFrom(*source);
  }
}

void InputInviteCodeResult::MergeFrom(const InputInviteCodeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.InputInviteCodeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      param_uuid_ = from.param_uuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputInviteCodeResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.InputInviteCodeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputInviteCodeResult::CopyFrom(const InputInviteCodeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.InputInviteCodeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputInviteCodeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void InputInviteCodeResult::Swap(InputInviteCodeResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    InputInviteCodeResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void InputInviteCodeResult::UnsafeArenaSwap(InputInviteCodeResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void InputInviteCodeResult::InternalSwap(InputInviteCodeResult* other) {
  using std::swap;
  swap(param_uuid_, other->param_uuid_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InputInviteCodeResult::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInviteAcceptReward::InitAsDefaultInstance() {
}
void GameInviteAcceptReward::clear_out_accept_list() {
  out_accept_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInviteAcceptReward::kRewardIdFieldNumber;
const int GameInviteAcceptReward::kOutAcceptListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInviteAcceptReward::GameInviteAcceptReward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_GameInviteAcceptReward.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameInviteAcceptReward)
}
GameInviteAcceptReward::GameInviteAcceptReward(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  out_accept_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteAcceptReward.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameInviteAcceptReward)
}
GameInviteAcceptReward::GameInviteAcceptReward(const GameInviteAcceptReward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      out_accept_list_(from.out_accept_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reward_id_ = from.reward_id_;
  // @@protoc_insertion_point(copy_constructor:sg.GameInviteAcceptReward)
}

void GameInviteAcceptReward::SharedCtor() {
  reward_id_ = 0;
}

GameInviteAcceptReward::~GameInviteAcceptReward() {
  // @@protoc_insertion_point(destructor:sg.GameInviteAcceptReward)
  SharedDtor();
}

void GameInviteAcceptReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GameInviteAcceptReward::ArenaDtor(void* object) {
  GameInviteAcceptReward* _this = reinterpret_cast< GameInviteAcceptReward* >(object);
  (void)_this;
}
void GameInviteAcceptReward::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameInviteAcceptReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInviteAcceptReward::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInviteAcceptReward& GameInviteAcceptReward::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteAcceptReward.base);
  return *internal_default_instance();
}


void GameInviteAcceptReward::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameInviteAcceptReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_accept_list_.Clear();
  reward_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInviteAcceptReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameInviteAcceptReward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reward_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reward_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Item out_accept_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_out_accept_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameInviteAcceptReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameInviteAcceptReward)
  return false;
#undef DO_
}

void GameInviteAcceptReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameInviteAcceptReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 reward_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_id(), output);
  }

  // repeated .sg.Item out_accept_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->out_accept_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->out_accept_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameInviteAcceptReward)
}

::google::protobuf::uint8* GameInviteAcceptReward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameInviteAcceptReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 reward_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_id(), target);
  }

  // repeated .sg.Item out_accept_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->out_accept_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->out_accept_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameInviteAcceptReward)
  return target;
}

size_t GameInviteAcceptReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameInviteAcceptReward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.Item out_accept_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->out_accept_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->out_accept_list(static_cast<int>(i)));
    }
  }

  // optional int32 reward_id = 1;
  if (has_reward_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reward_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInviteAcceptReward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameInviteAcceptReward)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInviteAcceptReward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInviteAcceptReward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameInviteAcceptReward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameInviteAcceptReward)
    MergeFrom(*source);
  }
}

void GameInviteAcceptReward::MergeFrom(const GameInviteAcceptReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameInviteAcceptReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  out_accept_list_.MergeFrom(from.out_accept_list_);
  if (from.has_reward_id()) {
    set_reward_id(from.reward_id());
  }
}

void GameInviteAcceptReward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameInviteAcceptReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInviteAcceptReward::CopyFrom(const GameInviteAcceptReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameInviteAcceptReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInviteAcceptReward::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->out_accept_list())) return false;
  return true;
}

void GameInviteAcceptReward::Swap(GameInviteAcceptReward* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameInviteAcceptReward* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameInviteAcceptReward::UnsafeArenaSwap(GameInviteAcceptReward* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameInviteAcceptReward::InternalSwap(GameInviteAcceptReward* other) {
  using std::swap;
  CastToBase(&out_accept_list_)->InternalSwap(CastToBase(&other->out_accept_list_));
  swap(reward_id_, other->reward_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInviteAcceptReward::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInviteService_GameInviteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInviteService_GameInviteRequest::kCmdFieldNumber;
const int GameInviteService_GameInviteRequest::kInviteCodeFieldNumber;
const int GameInviteService_GameInviteRequest::kRewardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInviteService_GameInviteRequest::GameInviteService_GameInviteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_GameInviteService_GameInviteRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameInviteService.GameInviteRequest)
}
GameInviteService_GameInviteRequest::GameInviteService_GameInviteRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteService_GameInviteRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameInviteService.GameInviteRequest)
}
GameInviteService_GameInviteRequest::GameInviteService_GameInviteRequest(const GameInviteService_GameInviteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&invite_code_, &from.invite_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&invite_code_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.GameInviteService.GameInviteRequest)
}

void GameInviteService_GameInviteRequest::SharedCtor() {
  ::memset(&invite_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_id_) -
      reinterpret_cast<char*>(&invite_code_)) + sizeof(reward_id_));
  cmd_ = 1;
}

GameInviteService_GameInviteRequest::~GameInviteService_GameInviteRequest() {
  // @@protoc_insertion_point(destructor:sg.GameInviteService.GameInviteRequest)
  SharedDtor();
}

void GameInviteService_GameInviteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GameInviteService_GameInviteRequest::ArenaDtor(void* object) {
  GameInviteService_GameInviteRequest* _this = reinterpret_cast< GameInviteService_GameInviteRequest* >(object);
  (void)_this;
}
void GameInviteService_GameInviteRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameInviteService_GameInviteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInviteService_GameInviteRequest::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInviteService_GameInviteRequest& GameInviteService_GameInviteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteService_GameInviteRequest.base);
  return *internal_default_instance();
}


void GameInviteService_GameInviteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameInviteService.GameInviteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&invite_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_id_) -
        reinterpret_cast<char*>(&invite_code_)) + sizeof(reward_id_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInviteService_GameInviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameInviteService.GameInviteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.GameInviteService.GAME_INVITE_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GameInviteService_GAME_INVITE_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::sg::GameInviteService_GAME_INVITE_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 invite_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_invite_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &invite_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 reward_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_reward_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameInviteService.GameInviteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameInviteService.GameInviteRequest)
  return false;
#undef DO_
}

void GameInviteService_GameInviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameInviteService.GameInviteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GameInviteService.GAME_INVITE_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int64 invite_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->invite_code(), output);
  }

  // optional int64 reward_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->reward_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameInviteService.GameInviteRequest)
}

::google::protobuf::uint8* GameInviteService_GameInviteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameInviteService.GameInviteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GameInviteService.GAME_INVITE_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int64 invite_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->invite_code(), target);
  }

  // optional int64 reward_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->reward_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameInviteService.GameInviteRequest)
  return target;
}

size_t GameInviteService_GameInviteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameInviteService.GameInviteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.GameInviteService.GAME_INVITE_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 invite_code = 2;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->invite_code());
    }

    // optional int64 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInviteService_GameInviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameInviteService.GameInviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInviteService_GameInviteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInviteService_GameInviteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameInviteService.GameInviteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameInviteService.GameInviteRequest)
    MergeFrom(*source);
  }
}

void GameInviteService_GameInviteRequest::MergeFrom(const GameInviteService_GameInviteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameInviteService.GameInviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      invite_code_ = from.invite_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      reward_id_ = from.reward_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameInviteService_GameInviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameInviteService.GameInviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInviteService_GameInviteRequest::CopyFrom(const GameInviteService_GameInviteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameInviteService.GameInviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInviteService_GameInviteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void GameInviteService_GameInviteRequest::Swap(GameInviteService_GameInviteRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameInviteService_GameInviteRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameInviteService_GameInviteRequest::UnsafeArenaSwap(GameInviteService_GameInviteRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameInviteService_GameInviteRequest::InternalSwap(GameInviteService_GameInviteRequest* other) {
  using std::swap;
  swap(invite_code_, other->invite_code_);
  swap(reward_id_, other->reward_id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInviteService_GameInviteRequest::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInviteService_GameInviteResponse::InitAsDefaultInstance() {
  ::sg::_GameInviteService_GameInviteResponse_default_instance_._instance.get_mutable()->input_invite_code_result_ = const_cast< ::sg::InputInviteCodeResult*>(
      ::sg::InputInviteCodeResult::internal_default_instance());
  ::sg::_GameInviteService_GameInviteResponse_default_instance_._instance.get_mutable()->invitee_reward_ = const_cast< ::sg::GameInviteReward*>(
      ::sg::GameInviteReward::internal_default_instance());
  ::sg::_GameInviteService_GameInviteResponse_default_instance_._instance.get_mutable()->inviter_reward_list_ = const_cast< ::sg::GameInviteRewardList*>(
      ::sg::GameInviteRewardList::internal_default_instance());
  ::sg::_GameInviteService_GameInviteResponse_default_instance_._instance.get_mutable()->accept_reward_ = const_cast< ::sg::GameInviteAcceptReward*>(
      ::sg::GameInviteAcceptReward::internal_default_instance());
}
void GameInviteService_GameInviteResponse::unsafe_arena_set_allocated_input_invite_code_result(
    ::sg::InputInviteCodeResult* input_invite_code_result) {
  if (GetArenaNoVirtual() == NULL) {
    delete input_invite_code_result_;
  }
  input_invite_code_result_ = input_invite_code_result;
  if (input_invite_code_result) {
    set_has_input_invite_code_result();
  } else {
    clear_has_input_invite_code_result();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameInviteService.GameInviteResponse.input_invite_code_result)
}
void GameInviteService_GameInviteResponse::unsafe_arena_set_allocated_invitee_reward(
    ::sg::GameInviteReward* invitee_reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete invitee_reward_;
  }
  invitee_reward_ = invitee_reward;
  if (invitee_reward) {
    set_has_invitee_reward();
  } else {
    clear_has_invitee_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameInviteService.GameInviteResponse.invitee_reward)
}
void GameInviteService_GameInviteResponse::unsafe_arena_set_allocated_inviter_reward_list(
    ::sg::GameInviteRewardList* inviter_reward_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete inviter_reward_list_;
  }
  inviter_reward_list_ = inviter_reward_list;
  if (inviter_reward_list) {
    set_has_inviter_reward_list();
  } else {
    clear_has_inviter_reward_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameInviteService.GameInviteResponse.inviter_reward_list)
}
void GameInviteService_GameInviteResponse::unsafe_arena_set_allocated_accept_reward(
    ::sg::GameInviteAcceptReward* accept_reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete accept_reward_;
  }
  accept_reward_ = accept_reward;
  if (accept_reward) {
    set_has_accept_reward();
  } else {
    clear_has_accept_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameInviteService.GameInviteResponse.accept_reward)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInviteService_GameInviteResponse::kResultFieldNumber;
const int GameInviteService_GameInviteResponse::kWhoInviteMeFieldNumber;
const int GameInviteService_GameInviteResponse::kInviteAcceptNumFieldNumber;
const int GameInviteService_GameInviteResponse::kInviteOkNumFieldNumber;
const int GameInviteService_GameInviteResponse::kInputInviteCodeResultFieldNumber;
const int GameInviteService_GameInviteResponse::kInviteeRewardFieldNumber;
const int GameInviteService_GameInviteResponse::kInviterRewardListFieldNumber;
const int GameInviteService_GameInviteResponse::kAcceptRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInviteService_GameInviteResponse::GameInviteService_GameInviteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_GameInviteService_GameInviteResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameInviteService.GameInviteResponse)
}
GameInviteService_GameInviteResponse::GameInviteService_GameInviteResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteService_GameInviteResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameInviteService.GameInviteResponse)
}
GameInviteService_GameInviteResponse::GameInviteService_GameInviteResponse(const GameInviteService_GameInviteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input_invite_code_result()) {
    input_invite_code_result_ = new ::sg::InputInviteCodeResult(*from.input_invite_code_result_);
  } else {
    input_invite_code_result_ = NULL;
  }
  if (from.has_invitee_reward()) {
    invitee_reward_ = new ::sg::GameInviteReward(*from.invitee_reward_);
  } else {
    invitee_reward_ = NULL;
  }
  if (from.has_inviter_reward_list()) {
    inviter_reward_list_ = new ::sg::GameInviteRewardList(*from.inviter_reward_list_);
  } else {
    inviter_reward_list_ = NULL;
  }
  if (from.has_accept_reward()) {
    accept_reward_ = new ::sg::GameInviteAcceptReward(*from.accept_reward_);
  } else {
    accept_reward_ = NULL;
  }
  ::memcpy(&who_invite_me_, &from.who_invite_me_,
    static_cast<size_t>(reinterpret_cast<char*>(&invite_ok_num_) -
    reinterpret_cast<char*>(&who_invite_me_)) + sizeof(invite_ok_num_));
  // @@protoc_insertion_point(copy_constructor:sg.GameInviteService.GameInviteResponse)
}

void GameInviteService_GameInviteResponse::SharedCtor() {
  ::memset(&input_invite_code_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invite_ok_num_) -
      reinterpret_cast<char*>(&input_invite_code_result_)) + sizeof(invite_ok_num_));
}

GameInviteService_GameInviteResponse::~GameInviteService_GameInviteResponse() {
  // @@protoc_insertion_point(destructor:sg.GameInviteService.GameInviteResponse)
  SharedDtor();
}

void GameInviteService_GameInviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete input_invite_code_result_;
  if (this != internal_default_instance()) delete invitee_reward_;
  if (this != internal_default_instance()) delete inviter_reward_list_;
  if (this != internal_default_instance()) delete accept_reward_;
}

void GameInviteService_GameInviteResponse::ArenaDtor(void* object) {
  GameInviteService_GameInviteResponse* _this = reinterpret_cast< GameInviteService_GameInviteResponse* >(object);
  (void)_this;
}
void GameInviteService_GameInviteResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameInviteService_GameInviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInviteService_GameInviteResponse::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInviteService_GameInviteResponse& GameInviteService_GameInviteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteService_GameInviteResponse.base);
  return *internal_default_instance();
}


void GameInviteService_GameInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameInviteService.GameInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(input_invite_code_result_ != NULL);
      input_invite_code_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(invitee_reward_ != NULL);
      invitee_reward_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inviter_reward_list_ != NULL);
      inviter_reward_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(accept_reward_ != NULL);
      accept_reward_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&who_invite_me_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invite_ok_num_) -
        reinterpret_cast<char*>(&who_invite_me_)) + sizeof(invite_ok_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInviteService_GameInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameInviteService.GameInviteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 who_invite_me = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_who_invite_me();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &who_invite_me_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 invite_accept_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_invite_accept_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_accept_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 invite_ok_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_invite_ok_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_ok_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.InputInviteCodeResult input_invite_code_result = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input_invite_code_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GameInviteReward invitee_reward = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invitee_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GameInviteRewardList inviter_reward_list = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inviter_reward_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GameInviteAcceptReward accept_reward = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accept_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameInviteService.GameInviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameInviteService.GameInviteResponse)
  return false;
#undef DO_
}

void GameInviteService_GameInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameInviteService.GameInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 who_invite_me = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->who_invite_me(), output);
  }

  // optional int32 invite_accept_num = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->invite_accept_num(), output);
  }

  // optional int32 invite_ok_num = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->invite_ok_num(), output);
  }

  // optional .sg.InputInviteCodeResult input_invite_code_result = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_input_invite_code_result(), output);
  }

  // optional .sg.GameInviteReward invitee_reward = 21;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_invitee_reward(), output);
  }

  // optional .sg.GameInviteRewardList inviter_reward_list = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_inviter_reward_list(), output);
  }

  // optional .sg.GameInviteAcceptReward accept_reward = 31;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_accept_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameInviteService.GameInviteResponse)
}

::google::protobuf::uint8* GameInviteService_GameInviteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameInviteService.GameInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 who_invite_me = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->who_invite_me(), target);
  }

  // optional int32 invite_accept_num = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->invite_accept_num(), target);
  }

  // optional int32 invite_ok_num = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->invite_ok_num(), target);
  }

  // optional .sg.InputInviteCodeResult input_invite_code_result = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_input_invite_code_result(), deterministic, target);
  }

  // optional .sg.GameInviteReward invitee_reward = 21;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_invitee_reward(), deterministic, target);
  }

  // optional .sg.GameInviteRewardList inviter_reward_list = 22;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_inviter_reward_list(), deterministic, target);
  }

  // optional .sg.GameInviteAcceptReward accept_reward = 31;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_accept_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameInviteService.GameInviteResponse)
  return target;
}

size_t GameInviteService_GameInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameInviteService.GameInviteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .sg.InputInviteCodeResult input_invite_code_result = 11;
    if (has_input_invite_code_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *input_invite_code_result_);
    }

    // optional .sg.GameInviteReward invitee_reward = 21;
    if (has_invitee_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *invitee_reward_);
    }

    // optional .sg.GameInviteRewardList inviter_reward_list = 22;
    if (has_inviter_reward_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *inviter_reward_list_);
    }

    // optional .sg.GameInviteAcceptReward accept_reward = 31;
    if (has_accept_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accept_reward_);
    }

    // optional uint64 who_invite_me = 2;
    if (has_who_invite_me()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->who_invite_me());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 invite_accept_num = 3;
    if (has_invite_accept_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_accept_num());
    }

    // optional int32 invite_ok_num = 4;
    if (has_invite_ok_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_ok_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInviteService_GameInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameInviteService.GameInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInviteService_GameInviteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInviteService_GameInviteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameInviteService.GameInviteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameInviteService.GameInviteResponse)
    MergeFrom(*source);
  }
}

void GameInviteService_GameInviteResponse::MergeFrom(const GameInviteService_GameInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameInviteService.GameInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_input_invite_code_result()->::sg::InputInviteCodeResult::MergeFrom(from.input_invite_code_result());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_invitee_reward()->::sg::GameInviteReward::MergeFrom(from.invitee_reward());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_inviter_reward_list()->::sg::GameInviteRewardList::MergeFrom(from.inviter_reward_list());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_accept_reward()->::sg::GameInviteAcceptReward::MergeFrom(from.accept_reward());
    }
    if (cached_has_bits & 0x00000010u) {
      who_invite_me_ = from.who_invite_me_;
    }
    if (cached_has_bits & 0x00000020u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000040u) {
      invite_accept_num_ = from.invite_accept_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      invite_ok_num_ = from.invite_ok_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameInviteService_GameInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameInviteService.GameInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInviteService_GameInviteResponse::CopyFrom(const GameInviteService_GameInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameInviteService.GameInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInviteService_GameInviteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (has_input_invite_code_result()) {
    if (!this->input_invite_code_result_->IsInitialized()) return false;
  }
  if (has_invitee_reward()) {
    if (!this->invitee_reward_->IsInitialized()) return false;
  }
  if (has_inviter_reward_list()) {
    if (!this->inviter_reward_list_->IsInitialized()) return false;
  }
  if (has_accept_reward()) {
    if (!this->accept_reward_->IsInitialized()) return false;
  }
  return true;
}

void GameInviteService_GameInviteResponse::Swap(GameInviteService_GameInviteResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameInviteService_GameInviteResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameInviteService_GameInviteResponse::UnsafeArenaSwap(GameInviteService_GameInviteResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameInviteService_GameInviteResponse::InternalSwap(GameInviteService_GameInviteResponse* other) {
  using std::swap;
  swap(input_invite_code_result_, other->input_invite_code_result_);
  swap(invitee_reward_, other->invitee_reward_);
  swap(inviter_reward_list_, other->inviter_reward_list_);
  swap(accept_reward_, other->accept_reward_);
  swap(who_invite_me_, other->who_invite_me_);
  swap(result_, other->result_);
  swap(invite_accept_num_, other->invite_accept_num_);
  swap(invite_ok_num_, other->invite_ok_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInviteService_GameInviteResponse::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInviteService::InitAsDefaultInstance() {
  ::sg::_GameInviteService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::GameInviteService_GameInviteRequest*>(
      ::sg::GameInviteService_GameInviteRequest::internal_default_instance());
  ::sg::_GameInviteService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::GameInviteService_GameInviteResponse*>(
      ::sg::GameInviteService_GameInviteResponse::internal_default_instance());
}
void GameInviteService::unsafe_arena_set_allocated_req(
    ::sg::GameInviteService_GameInviteRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameInviteService.req)
}
void GameInviteService::unsafe_arena_set_allocated_resp(
    ::sg::GameInviteService_GameInviteResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameInviteService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInviteService::kReqFieldNumber;
const int GameInviteService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInviteService::GameInviteService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_GameInviteService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameInviteService)
}
GameInviteService::GameInviteService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameInviteService)
}
GameInviteService::GameInviteService(const GameInviteService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::GameInviteService_GameInviteRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::GameInviteService_GameInviteResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.GameInviteService)
}

void GameInviteService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

GameInviteService::~GameInviteService() {
  // @@protoc_insertion_point(destructor:sg.GameInviteService)
  SharedDtor();
}

void GameInviteService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void GameInviteService::ArenaDtor(void* object) {
  GameInviteService* _this = reinterpret_cast< GameInviteService* >(object);
  (void)_this;
}
void GameInviteService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameInviteService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInviteService::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInviteService& GameInviteService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_GameInviteService.base);
  return *internal_default_instance();
}


void GameInviteService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameInviteService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInviteService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameInviteService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.GameInviteService.GameInviteRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GameInviteService.GameInviteResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameInviteService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameInviteService)
  return false;
#undef DO_
}

void GameInviteService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameInviteService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.GameInviteService.GameInviteRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.GameInviteService.GameInviteResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameInviteService)
}

::google::protobuf::uint8* GameInviteService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameInviteService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.GameInviteService.GameInviteRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.GameInviteService.GameInviteResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameInviteService)
  return target;
}

size_t GameInviteService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameInviteService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.GameInviteService.GameInviteRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.GameInviteService.GameInviteResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInviteService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameInviteService)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInviteService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInviteService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameInviteService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameInviteService)
    MergeFrom(*source);
  }
}

void GameInviteService::MergeFrom(const GameInviteService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameInviteService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::GameInviteService_GameInviteRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::GameInviteService_GameInviteResponse::MergeFrom(from.resp());
    }
  }
}

void GameInviteService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameInviteService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInviteService::CopyFrom(const GameInviteService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameInviteService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInviteService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void GameInviteService::Swap(GameInviteService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameInviteService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameInviteService::UnsafeArenaSwap(GameInviteService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameInviteService::InternalSwap(GameInviteService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInviteService::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendGiftNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendGiftNotify::kFriendUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendGiftNotify::FriendGiftNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Friend_2eproto::scc_info_FriendGiftNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FriendGiftNotify)
}
FriendGiftNotify::FriendGiftNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_FriendGiftNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FriendGiftNotify)
}
FriendGiftNotify::FriendGiftNotify(const FriendGiftNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friend_uuid_ = from.friend_uuid_;
  // @@protoc_insertion_point(copy_constructor:sg.FriendGiftNotify)
}

void FriendGiftNotify::SharedCtor() {
  friend_uuid_ = GOOGLE_ULONGLONG(0);
}

FriendGiftNotify::~FriendGiftNotify() {
  // @@protoc_insertion_point(destructor:sg.FriendGiftNotify)
  SharedDtor();
}

void FriendGiftNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FriendGiftNotify::ArenaDtor(void* object) {
  FriendGiftNotify* _this = reinterpret_cast< FriendGiftNotify* >(object);
  (void)_this;
}
void FriendGiftNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FriendGiftNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FriendGiftNotify::descriptor() {
  ::protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendGiftNotify& FriendGiftNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Friend_2eproto::scc_info_FriendGiftNotify.base);
  return *internal_default_instance();
}


void FriendGiftNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FriendGiftNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_uuid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendGiftNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FriendGiftNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 friend_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_friend_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FriendGiftNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FriendGiftNotify)
  return false;
#undef DO_
}

void FriendGiftNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FriendGiftNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 friend_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FriendGiftNotify)
}

::google::protobuf::uint8* FriendGiftNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FriendGiftNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 friend_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FriendGiftNotify)
  return target;
}

size_t FriendGiftNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FriendGiftNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 friend_uuid = 1;
  if (has_friend_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->friend_uuid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendGiftNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FriendGiftNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendGiftNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendGiftNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FriendGiftNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FriendGiftNotify)
    MergeFrom(*source);
  }
}

void FriendGiftNotify::MergeFrom(const FriendGiftNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FriendGiftNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_friend_uuid()) {
    set_friend_uuid(from.friend_uuid());
  }
}

void FriendGiftNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FriendGiftNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendGiftNotify::CopyFrom(const FriendGiftNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FriendGiftNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendGiftNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FriendGiftNotify::Swap(FriendGiftNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FriendGiftNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FriendGiftNotify::UnsafeArenaSwap(FriendGiftNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FriendGiftNotify::InternalSwap(FriendGiftNotify* other) {
  using std::swap;
  swap(friend_uuid_, other->friend_uuid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FriendGiftNotify::GetMetadata() const {
  protobuf_Friend_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Friend_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PersonTeamMember* Arena::CreateMaybeMessage< ::sg::PersonTeamMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PersonTeamMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PersonTeamMemberList* Arena::CreateMaybeMessage< ::sg::PersonTeamMemberList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PersonTeamMemberList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PersonData* Arena::CreateMaybeMessage< ::sg::PersonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PersonData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PersonDataList* Arena::CreateMaybeMessage< ::sg::PersonDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PersonDataList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::QueryPersonResult* Arena::CreateMaybeMessage< ::sg::QueryPersonResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::QueryPersonResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FriendService_FriendRequest* Arena::CreateMaybeMessage< ::sg::FriendService_FriendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FriendService_FriendRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FriendService_FriendResponse* Arena::CreateMaybeMessage< ::sg::FriendService_FriendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FriendService_FriendResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FriendService* Arena::CreateMaybeMessage< ::sg::FriendService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FriendService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameInviteReward* Arena::CreateMaybeMessage< ::sg::GameInviteReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameInviteReward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameInviteRewardList* Arena::CreateMaybeMessage< ::sg::GameInviteRewardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameInviteRewardList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::InputInviteCodeResult* Arena::CreateMaybeMessage< ::sg::InputInviteCodeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::InputInviteCodeResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameInviteAcceptReward* Arena::CreateMaybeMessage< ::sg::GameInviteAcceptReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameInviteAcceptReward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameInviteService_GameInviteRequest* Arena::CreateMaybeMessage< ::sg::GameInviteService_GameInviteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameInviteService_GameInviteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameInviteService_GameInviteResponse* Arena::CreateMaybeMessage< ::sg::GameInviteService_GameInviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameInviteService_GameInviteResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameInviteService* Arena::CreateMaybeMessage< ::sg::GameInviteService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameInviteService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FriendGiftNotify* Arena::CreateMaybeMessage< ::sg::FriendGiftNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FriendGiftNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
