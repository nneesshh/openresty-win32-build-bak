// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NPC.proto

#ifndef PROTOBUF_INCLUDED_NPC_2eproto
#define PROTOBUF_INCLUDED_NPC_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NPC_2eproto 

namespace protobuf_NPC_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_NPC_2eproto
namespace sg {
class UserNPCService;
class UserNPCServiceDefaultTypeInternal;
extern UserNPCServiceDefaultTypeInternal _UserNPCService_default_instance_;
class UserNPCService_UserNPCRequest;
class UserNPCService_UserNPCRequestDefaultTypeInternal;
extern UserNPCService_UserNPCRequestDefaultTypeInternal _UserNPCService_UserNPCRequest_default_instance_;
class UserNPCService_UserNPCResponse;
class UserNPCService_UserNPCResponseDefaultTypeInternal;
extern UserNPCService_UserNPCResponseDefaultTypeInternal _UserNPCService_UserNPCResponse_default_instance_;
class UserNPCStateNotify;
class UserNPCStateNotifyDefaultTypeInternal;
extern UserNPCStateNotifyDefaultTypeInternal _UserNPCStateNotify_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::UserNPCService* Arena::CreateMaybeMessage<::sg::UserNPCService>(Arena*);
template<> ::sg::UserNPCService_UserNPCRequest* Arena::CreateMaybeMessage<::sg::UserNPCService_UserNPCRequest>(Arena*);
template<> ::sg::UserNPCService_UserNPCResponse* Arena::CreateMaybeMessage<::sg::UserNPCService_UserNPCResponse>(Arena*);
template<> ::sg::UserNPCStateNotify* Arena::CreateMaybeMessage<::sg::UserNPCStateNotify>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum UserNPCService_NPC_CMD {
  UserNPCService_NPC_CMD_QUERY = 1
};
bool UserNPCService_NPC_CMD_IsValid(int value);
const UserNPCService_NPC_CMD UserNPCService_NPC_CMD_NPC_CMD_MIN = UserNPCService_NPC_CMD_QUERY;
const UserNPCService_NPC_CMD UserNPCService_NPC_CMD_NPC_CMD_MAX = UserNPCService_NPC_CMD_QUERY;
const int UserNPCService_NPC_CMD_NPC_CMD_ARRAYSIZE = UserNPCService_NPC_CMD_NPC_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserNPCService_NPC_CMD_descriptor();
inline const ::std::string& UserNPCService_NPC_CMD_Name(UserNPCService_NPC_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserNPCService_NPC_CMD_descriptor(), value);
}
inline bool UserNPCService_NPC_CMD_Parse(
    const ::std::string& name, UserNPCService_NPC_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserNPCService_NPC_CMD>(
    UserNPCService_NPC_CMD_descriptor(), name, value);
}
// ===================================================================

class UserNPCService_UserNPCRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserNPCService.UserNPCRequest) */ {
 public:
  UserNPCService_UserNPCRequest();
  virtual ~UserNPCService_UserNPCRequest();

  UserNPCService_UserNPCRequest(const UserNPCService_UserNPCRequest& from);

  inline UserNPCService_UserNPCRequest& operator=(const UserNPCService_UserNPCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNPCService_UserNPCRequest(UserNPCService_UserNPCRequest&& from) noexcept
    : UserNPCService_UserNPCRequest() {
    *this = ::std::move(from);
  }

  inline UserNPCService_UserNPCRequest& operator=(UserNPCService_UserNPCRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNPCService_UserNPCRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNPCService_UserNPCRequest* internal_default_instance() {
    return reinterpret_cast<const UserNPCService_UserNPCRequest*>(
               &_UserNPCService_UserNPCRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(UserNPCService_UserNPCRequest* other);
  void Swap(UserNPCService_UserNPCRequest* other);
  friend void swap(UserNPCService_UserNPCRequest& a, UserNPCService_UserNPCRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNPCService_UserNPCRequest* New() const final {
    return CreateMaybeMessage<UserNPCService_UserNPCRequest>(NULL);
  }

  UserNPCService_UserNPCRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNPCService_UserNPCRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNPCService_UserNPCRequest& from);
  void MergeFrom(const UserNPCService_UserNPCRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNPCService_UserNPCRequest* other);
  protected:
  explicit UserNPCService_UserNPCRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.UserNPCService.NPC_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserNPCService_NPC_CMD cmd() const;
  void set_cmd(::sg::UserNPCService_NPC_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserNPCService.UserNPCRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int cmd_;
  friend struct ::protobuf_NPC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNPCService_UserNPCResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserNPCService.UserNPCResponse) */ {
 public:
  UserNPCService_UserNPCResponse();
  virtual ~UserNPCService_UserNPCResponse();

  UserNPCService_UserNPCResponse(const UserNPCService_UserNPCResponse& from);

  inline UserNPCService_UserNPCResponse& operator=(const UserNPCService_UserNPCResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNPCService_UserNPCResponse(UserNPCService_UserNPCResponse&& from) noexcept
    : UserNPCService_UserNPCResponse() {
    *this = ::std::move(from);
  }

  inline UserNPCService_UserNPCResponse& operator=(UserNPCService_UserNPCResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNPCService_UserNPCResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNPCService_UserNPCResponse* internal_default_instance() {
    return reinterpret_cast<const UserNPCService_UserNPCResponse*>(
               &_UserNPCService_UserNPCResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(UserNPCService_UserNPCResponse* other);
  void Swap(UserNPCService_UserNPCResponse* other);
  friend void swap(UserNPCService_UserNPCResponse& a, UserNPCService_UserNPCResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNPCService_UserNPCResponse* New() const final {
    return CreateMaybeMessage<UserNPCService_UserNPCResponse>(NULL);
  }

  UserNPCService_UserNPCResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNPCService_UserNPCResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNPCService_UserNPCResponse& from);
  void MergeFrom(const UserNPCService_UserNPCResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNPCService_UserNPCResponse* other);
  protected:
  explicit UserNPCService_UserNPCResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.NPC npc_list = 2;
  int npc_list_size() const;
  void clear_npc_list();
  static const int kNpcListFieldNumber = 2;
  ::sg::NPC* mutable_npc_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::NPC >*
      mutable_npc_list();
  const ::sg::NPC& npc_list(int index) const;
  ::sg::NPC* add_npc_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::NPC >&
      npc_list() const;

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserNPCService.UserNPCResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::NPC > npc_list_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_NPC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNPCService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserNPCService) */ {
 public:
  UserNPCService();
  virtual ~UserNPCService();

  UserNPCService(const UserNPCService& from);

  inline UserNPCService& operator=(const UserNPCService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNPCService(UserNPCService&& from) noexcept
    : UserNPCService() {
    *this = ::std::move(from);
  }

  inline UserNPCService& operator=(UserNPCService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNPCService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNPCService* internal_default_instance() {
    return reinterpret_cast<const UserNPCService*>(
               &_UserNPCService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(UserNPCService* other);
  void Swap(UserNPCService* other);
  friend void swap(UserNPCService& a, UserNPCService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNPCService* New() const final {
    return CreateMaybeMessage<UserNPCService>(NULL);
  }

  UserNPCService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNPCService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNPCService& from);
  void MergeFrom(const UserNPCService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNPCService* other);
  protected:
  explicit UserNPCService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserNPCService_UserNPCRequest UserNPCRequest;
  typedef UserNPCService_UserNPCResponse UserNPCResponse;

  typedef UserNPCService_NPC_CMD NPC_CMD;
  static const NPC_CMD QUERY =
    UserNPCService_NPC_CMD_QUERY;
  static inline bool NPC_CMD_IsValid(int value) {
    return UserNPCService_NPC_CMD_IsValid(value);
  }
  static const NPC_CMD NPC_CMD_MIN =
    UserNPCService_NPC_CMD_NPC_CMD_MIN;
  static const NPC_CMD NPC_CMD_MAX =
    UserNPCService_NPC_CMD_NPC_CMD_MAX;
  static const int NPC_CMD_ARRAYSIZE =
    UserNPCService_NPC_CMD_NPC_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NPC_CMD_descriptor() {
    return UserNPCService_NPC_CMD_descriptor();
  }
  static inline const ::std::string& NPC_CMD_Name(NPC_CMD value) {
    return UserNPCService_NPC_CMD_Name(value);
  }
  static inline bool NPC_CMD_Parse(const ::std::string& name,
      NPC_CMD* value) {
    return UserNPCService_NPC_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserNPCService.UserNPCRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserNPCService_UserNPCRequest& _internal_req() const;
  public:
  const ::sg::UserNPCService_UserNPCRequest& req() const;
  ::sg::UserNPCService_UserNPCRequest* release_req();
  ::sg::UserNPCService_UserNPCRequest* mutable_req();
  void set_allocated_req(::sg::UserNPCService_UserNPCRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserNPCService_UserNPCRequest* req);
  ::sg::UserNPCService_UserNPCRequest* unsafe_arena_release_req();

  // optional .sg.UserNPCService.UserNPCResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserNPCService_UserNPCResponse& _internal_resp() const;
  public:
  const ::sg::UserNPCService_UserNPCResponse& resp() const;
  ::sg::UserNPCService_UserNPCResponse* release_resp();
  ::sg::UserNPCService_UserNPCResponse* mutable_resp();
  void set_allocated_resp(::sg::UserNPCService_UserNPCResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserNPCService_UserNPCResponse* resp);
  ::sg::UserNPCService_UserNPCResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserNPCService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserNPCService_UserNPCRequest* req_;
  ::sg::UserNPCService_UserNPCResponse* resp_;
  friend struct ::protobuf_NPC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNPCStateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserNPCStateNotify) */ {
 public:
  UserNPCStateNotify();
  virtual ~UserNPCStateNotify();

  UserNPCStateNotify(const UserNPCStateNotify& from);

  inline UserNPCStateNotify& operator=(const UserNPCStateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNPCStateNotify(UserNPCStateNotify&& from) noexcept
    : UserNPCStateNotify() {
    *this = ::std::move(from);
  }

  inline UserNPCStateNotify& operator=(UserNPCStateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNPCStateNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNPCStateNotify* internal_default_instance() {
    return reinterpret_cast<const UserNPCStateNotify*>(
               &_UserNPCStateNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UserNPCStateNotify* other);
  void Swap(UserNPCStateNotify* other);
  friend void swap(UserNPCStateNotify& a, UserNPCStateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNPCStateNotify* New() const final {
    return CreateMaybeMessage<UserNPCStateNotify>(NULL);
  }

  UserNPCStateNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNPCStateNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNPCStateNotify& from);
  void MergeFrom(const UserNPCStateNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNPCStateNotify* other);
  protected:
  explicit UserNPCStateNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.NPC npc = 1;
  bool has_npc() const;
  void clear_npc();
  static const int kNpcFieldNumber = 1;
  private:
  const ::sg::NPC& _internal_npc() const;
  public:
  const ::sg::NPC& npc() const;
  ::sg::NPC* release_npc();
  ::sg::NPC* mutable_npc();
  void set_allocated_npc(::sg::NPC* npc);
  void unsafe_arena_set_allocated_npc(
      ::sg::NPC* npc);
  ::sg::NPC* unsafe_arena_release_npc();

  // @@protoc_insertion_point(class_scope:sg.UserNPCStateNotify)
 private:
  void set_has_npc();
  void clear_has_npc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::NPC* npc_;
  friend struct ::protobuf_NPC_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserNPCService_UserNPCRequest

// required .sg.UserNPCService.NPC_CMD cmd = 1;
inline bool UserNPCService_UserNPCRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNPCService_UserNPCRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNPCService_UserNPCRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNPCService_UserNPCRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserNPCService_NPC_CMD UserNPCService_UserNPCRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserNPCService.UserNPCRequest.cmd)
  return static_cast< ::sg::UserNPCService_NPC_CMD >(cmd_);
}
inline void UserNPCService_UserNPCRequest::set_cmd(::sg::UserNPCService_NPC_CMD value) {
  assert(::sg::UserNPCService_NPC_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserNPCService.UserNPCRequest.cmd)
}

// -------------------------------------------------------------------

// UserNPCService_UserNPCResponse

// required int32 result = 1;
inline bool UserNPCService_UserNPCResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNPCService_UserNPCResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNPCService_UserNPCResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNPCService_UserNPCResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserNPCService_UserNPCResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserNPCService.UserNPCResponse.result)
  return result_;
}
inline void UserNPCService_UserNPCResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserNPCService.UserNPCResponse.result)
}

// repeated .sg.NPC npc_list = 2;
inline int UserNPCService_UserNPCResponse::npc_list_size() const {
  return npc_list_.size();
}
inline ::sg::NPC* UserNPCService_UserNPCResponse::mutable_npc_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserNPCService.UserNPCResponse.npc_list)
  return npc_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::NPC >*
UserNPCService_UserNPCResponse::mutable_npc_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserNPCService.UserNPCResponse.npc_list)
  return &npc_list_;
}
inline const ::sg::NPC& UserNPCService_UserNPCResponse::npc_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserNPCService.UserNPCResponse.npc_list)
  return npc_list_.Get(index);
}
inline ::sg::NPC* UserNPCService_UserNPCResponse::add_npc_list() {
  // @@protoc_insertion_point(field_add:sg.UserNPCService.UserNPCResponse.npc_list)
  return npc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::NPC >&
UserNPCService_UserNPCResponse::npc_list() const {
  // @@protoc_insertion_point(field_list:sg.UserNPCService.UserNPCResponse.npc_list)
  return npc_list_;
}

// -------------------------------------------------------------------

// UserNPCService

// optional .sg.UserNPCService.UserNPCRequest req = 1;
inline bool UserNPCService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNPCService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNPCService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNPCService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserNPCService_UserNPCRequest& UserNPCService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserNPCService_UserNPCRequest& UserNPCService::req() const {
  const ::sg::UserNPCService_UserNPCRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserNPCService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserNPCService_UserNPCRequest*>(
      &::sg::_UserNPCService_UserNPCRequest_default_instance_);
}
inline ::sg::UserNPCService_UserNPCRequest* UserNPCService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserNPCService.req)
  clear_has_req();
  ::sg::UserNPCService_UserNPCRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserNPCService_UserNPCRequest* UserNPCService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserNPCService.req)
  clear_has_req();
  ::sg::UserNPCService_UserNPCRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserNPCService_UserNPCRequest* UserNPCService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserNPCService_UserNPCRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserNPCService.req)
  return req_;
}
inline void UserNPCService::set_allocated_req(::sg::UserNPCService_UserNPCRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserNPCService.req)
}

// optional .sg.UserNPCService.UserNPCResponse resp = 2;
inline bool UserNPCService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserNPCService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserNPCService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserNPCService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserNPCService_UserNPCResponse& UserNPCService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserNPCService_UserNPCResponse& UserNPCService::resp() const {
  const ::sg::UserNPCService_UserNPCResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserNPCService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserNPCService_UserNPCResponse*>(
      &::sg::_UserNPCService_UserNPCResponse_default_instance_);
}
inline ::sg::UserNPCService_UserNPCResponse* UserNPCService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserNPCService.resp)
  clear_has_resp();
  ::sg::UserNPCService_UserNPCResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserNPCService_UserNPCResponse* UserNPCService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserNPCService.resp)
  clear_has_resp();
  ::sg::UserNPCService_UserNPCResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserNPCService_UserNPCResponse* UserNPCService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserNPCService_UserNPCResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserNPCService.resp)
  return resp_;
}
inline void UserNPCService::set_allocated_resp(::sg::UserNPCService_UserNPCResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserNPCService.resp)
}

// -------------------------------------------------------------------

// UserNPCStateNotify

// required .sg.NPC npc = 1;
inline bool UserNPCStateNotify::has_npc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNPCStateNotify::set_has_npc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNPCStateNotify::clear_has_npc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::NPC& UserNPCStateNotify::_internal_npc() const {
  return *npc_;
}
inline const ::sg::NPC& UserNPCStateNotify::npc() const {
  const ::sg::NPC* p = npc_;
  // @@protoc_insertion_point(field_get:sg.UserNPCStateNotify.npc)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::NPC*>(
      &::sg::_NPC_default_instance_);
}
inline ::sg::NPC* UserNPCStateNotify::release_npc() {
  // @@protoc_insertion_point(field_release:sg.UserNPCStateNotify.npc)
  clear_has_npc();
  ::sg::NPC* temp = npc_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  npc_ = NULL;
  return temp;
}
inline ::sg::NPC* UserNPCStateNotify::unsafe_arena_release_npc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserNPCStateNotify.npc)
  clear_has_npc();
  ::sg::NPC* temp = npc_;
  npc_ = NULL;
  return temp;
}
inline ::sg::NPC* UserNPCStateNotify::mutable_npc() {
  set_has_npc();
  if (npc_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::NPC>(GetArenaNoVirtual());
    npc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserNPCStateNotify.npc)
  return npc_;
}
inline void UserNPCStateNotify::set_allocated_npc(::sg::NPC* npc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(npc_);
  }
  if (npc) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(npc)->GetArena();
    if (message_arena != submessage_arena) {
      npc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, npc, submessage_arena);
    }
    set_has_npc();
  } else {
    clear_has_npc();
  }
  npc_ = npc;
  // @@protoc_insertion_point(field_set_allocated:sg.UserNPCStateNotify.npc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::UserNPCService_NPC_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserNPCService_NPC_CMD>() {
  return ::sg::UserNPCService_NPC_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NPC_2eproto
