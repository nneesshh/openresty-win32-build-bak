// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EasterEgg.proto

#ifndef PROTOBUF_INCLUDED_EasterEgg_2eproto
#define PROTOBUF_INCLUDED_EasterEgg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_EasterEgg_2eproto 

namespace protobuf_EasterEgg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_EasterEgg_2eproto
namespace sg {
class EasterEgg;
class EasterEggDefaultTypeInternal;
extern EasterEggDefaultTypeInternal _EasterEgg_default_instance_;
class EasterEggService;
class EasterEggServiceDefaultTypeInternal;
extern EasterEggServiceDefaultTypeInternal _EasterEggService_default_instance_;
class EasterEggService_EasterEggRequest;
class EasterEggService_EasterEggRequestDefaultTypeInternal;
extern EasterEggService_EasterEggRequestDefaultTypeInternal _EasterEggService_EasterEggRequest_default_instance_;
class EasterEggService_EasterEggResponse;
class EasterEggService_EasterEggResponseDefaultTypeInternal;
extern EasterEggService_EasterEggResponseDefaultTypeInternal _EasterEggService_EasterEggResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::EasterEgg* Arena::CreateMaybeMessage<::sg::EasterEgg>(Arena*);
template<> ::sg::EasterEggService* Arena::CreateMaybeMessage<::sg::EasterEggService>(Arena*);
template<> ::sg::EasterEggService_EasterEggRequest* Arena::CreateMaybeMessage<::sg::EasterEggService_EasterEggRequest>(Arena*);
template<> ::sg::EasterEggService_EasterEggResponse* Arena::CreateMaybeMessage<::sg::EasterEggService_EasterEggResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum EasterEggService_CMD {
  EasterEggService_CMD_QUERY = 1,
  EasterEggService_CMD_OPEN = 2
};
bool EasterEggService_CMD_IsValid(int value);
const EasterEggService_CMD EasterEggService_CMD_CMD_MIN = EasterEggService_CMD_QUERY;
const EasterEggService_CMD EasterEggService_CMD_CMD_MAX = EasterEggService_CMD_OPEN;
const int EasterEggService_CMD_CMD_ARRAYSIZE = EasterEggService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* EasterEggService_CMD_descriptor();
inline const ::std::string& EasterEggService_CMD_Name(EasterEggService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    EasterEggService_CMD_descriptor(), value);
}
inline bool EasterEggService_CMD_Parse(
    const ::std::string& name, EasterEggService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EasterEggService_CMD>(
    EasterEggService_CMD_descriptor(), name, value);
}
// ===================================================================

class EasterEgg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.EasterEgg) */ {
 public:
  EasterEgg();
  virtual ~EasterEgg();

  EasterEgg(const EasterEgg& from);

  inline EasterEgg& operator=(const EasterEgg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EasterEgg(EasterEgg&& from) noexcept
    : EasterEgg() {
    *this = ::std::move(from);
  }

  inline EasterEgg& operator=(EasterEgg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EasterEgg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EasterEgg* internal_default_instance() {
    return reinterpret_cast<const EasterEgg*>(
               &_EasterEgg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(EasterEgg* other);
  void Swap(EasterEgg* other);
  friend void swap(EasterEgg& a, EasterEgg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EasterEgg* New() const final {
    return CreateMaybeMessage<EasterEgg>(NULL);
  }

  EasterEgg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EasterEgg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EasterEgg& from);
  void MergeFrom(const EasterEgg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EasterEgg* other);
  protected:
  explicit EasterEgg(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 entryid = 1;
  bool has_entryid() const;
  void clear_entryid();
  static const int kEntryidFieldNumber = 1;
  ::google::protobuf::uint64 entryid() const;
  void set_entryid(::google::protobuf::uint64 value);

  // optional sfixed64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.EasterEgg)
 private:
  void set_has_entryid();
  void clear_has_entryid();
  void set_has_id();
  void clear_has_id();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 entryid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_EasterEgg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EasterEggService_EasterEggRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.EasterEggService.EasterEggRequest) */ {
 public:
  EasterEggService_EasterEggRequest();
  virtual ~EasterEggService_EasterEggRequest();

  EasterEggService_EasterEggRequest(const EasterEggService_EasterEggRequest& from);

  inline EasterEggService_EasterEggRequest& operator=(const EasterEggService_EasterEggRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EasterEggService_EasterEggRequest(EasterEggService_EasterEggRequest&& from) noexcept
    : EasterEggService_EasterEggRequest() {
    *this = ::std::move(from);
  }

  inline EasterEggService_EasterEggRequest& operator=(EasterEggService_EasterEggRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EasterEggService_EasterEggRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EasterEggService_EasterEggRequest* internal_default_instance() {
    return reinterpret_cast<const EasterEggService_EasterEggRequest*>(
               &_EasterEggService_EasterEggRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(EasterEggService_EasterEggRequest* other);
  void Swap(EasterEggService_EasterEggRequest* other);
  friend void swap(EasterEggService_EasterEggRequest& a, EasterEggService_EasterEggRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EasterEggService_EasterEggRequest* New() const final {
    return CreateMaybeMessage<EasterEggService_EasterEggRequest>(NULL);
  }

  EasterEggService_EasterEggRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EasterEggService_EasterEggRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EasterEggService_EasterEggRequest& from);
  void MergeFrom(const EasterEggService_EasterEggRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EasterEggService_EasterEggRequest* other);
  protected:
  explicit EasterEggService_EasterEggRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 entryid = 2;
  bool has_entryid() const;
  void clear_entryid();
  static const int kEntryidFieldNumber = 2;
  ::google::protobuf::uint64 entryid() const;
  void set_entryid(::google::protobuf::uint64 value);

  // optional int32 choice = 3;
  bool has_choice() const;
  void clear_choice();
  static const int kChoiceFieldNumber = 3;
  ::google::protobuf::int32 choice() const;
  void set_choice(::google::protobuf::int32 value);

  // required .sg.EasterEggService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::EasterEggService_CMD cmd() const;
  void set_cmd(::sg::EasterEggService_CMD value);

  // @@protoc_insertion_point(class_scope:sg.EasterEggService.EasterEggRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_entryid();
  void clear_has_entryid();
  void set_has_choice();
  void clear_has_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 entryid_;
  ::google::protobuf::int32 choice_;
  int cmd_;
  friend struct ::protobuf_EasterEgg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EasterEggService_EasterEggResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.EasterEggService.EasterEggResponse) */ {
 public:
  EasterEggService_EasterEggResponse();
  virtual ~EasterEggService_EasterEggResponse();

  EasterEggService_EasterEggResponse(const EasterEggService_EasterEggResponse& from);

  inline EasterEggService_EasterEggResponse& operator=(const EasterEggService_EasterEggResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EasterEggService_EasterEggResponse(EasterEggService_EasterEggResponse&& from) noexcept
    : EasterEggService_EasterEggResponse() {
    *this = ::std::move(from);
  }

  inline EasterEggService_EasterEggResponse& operator=(EasterEggService_EasterEggResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EasterEggService_EasterEggResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EasterEggService_EasterEggResponse* internal_default_instance() {
    return reinterpret_cast<const EasterEggService_EasterEggResponse*>(
               &_EasterEggService_EasterEggResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(EasterEggService_EasterEggResponse* other);
  void Swap(EasterEggService_EasterEggResponse* other);
  friend void swap(EasterEggService_EasterEggResponse& a, EasterEggService_EasterEggResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EasterEggService_EasterEggResponse* New() const final {
    return CreateMaybeMessage<EasterEggService_EasterEggResponse>(NULL);
  }

  EasterEggService_EasterEggResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EasterEggService_EasterEggResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EasterEggService_EasterEggResponse& from);
  void MergeFrom(const EasterEggService_EasterEggResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EasterEggService_EasterEggResponse* other);
  protected:
  explicit EasterEggService_EasterEggResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.EasterEgg easter_egg_list = 3;
  int easter_egg_list_size() const;
  void clear_easter_egg_list();
  static const int kEasterEggListFieldNumber = 3;
  ::sg::EasterEgg* mutable_easter_egg_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::EasterEgg >*
      mutable_easter_egg_list();
  const ::sg::EasterEgg& easter_egg_list(int index) const;
  ::sg::EasterEgg* add_easter_egg_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::EasterEgg >&
      easter_egg_list() const;

  // optional .sg.pb_pair_int64_int saved_customer = 4;
  bool has_saved_customer() const;
  void clear_saved_customer();
  static const int kSavedCustomerFieldNumber = 4;
  private:
  const ::sg::pb_pair_int64_int& _internal_saved_customer() const;
  public:
  const ::sg::pb_pair_int64_int& saved_customer() const;
  ::sg::pb_pair_int64_int* release_saved_customer();
  ::sg::pb_pair_int64_int* mutable_saved_customer();
  void set_allocated_saved_customer(::sg::pb_pair_int64_int* saved_customer);
  void unsafe_arena_set_allocated_saved_customer(
      ::sg::pb_pair_int64_int* saved_customer);
  ::sg::pb_pair_int64_int* unsafe_arena_release_saved_customer();

  // optional .sg.Reward get = 5;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 5;
  private:
  const ::sg::Reward& _internal_get() const;
  public:
  const ::sg::Reward& get() const;
  ::sg::Reward* release_get();
  ::sg::Reward* mutable_get();
  void set_allocated_get(::sg::Reward* get);
  void unsafe_arena_set_allocated_get(
      ::sg::Reward* get);
  ::sg::Reward* unsafe_arena_release_get();

  // optional .sg.Reward lose = 6;
  bool has_lose() const;
  void clear_lose();
  static const int kLoseFieldNumber = 6;
  private:
  const ::sg::Reward& _internal_lose() const;
  public:
  const ::sg::Reward& lose() const;
  ::sg::Reward* release_lose();
  ::sg::Reward* mutable_lose();
  void set_allocated_lose(::sg::Reward* lose);
  void unsafe_arena_set_allocated_lose(
      ::sg::Reward* lose);
  ::sg::Reward* unsafe_arena_release_lose();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.EasterEggService.EasterEggResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_saved_customer();
  void clear_has_saved_customer();
  void set_has_get();
  void clear_has_get();
  void set_has_lose();
  void clear_has_lose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::EasterEgg > easter_egg_list_;
  ::sg::pb_pair_int64_int* saved_customer_;
  ::sg::Reward* get_;
  ::sg::Reward* lose_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_EasterEgg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EasterEggService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.EasterEggService) */ {
 public:
  EasterEggService();
  virtual ~EasterEggService();

  EasterEggService(const EasterEggService& from);

  inline EasterEggService& operator=(const EasterEggService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EasterEggService(EasterEggService&& from) noexcept
    : EasterEggService() {
    *this = ::std::move(from);
  }

  inline EasterEggService& operator=(EasterEggService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EasterEggService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EasterEggService* internal_default_instance() {
    return reinterpret_cast<const EasterEggService*>(
               &_EasterEggService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(EasterEggService* other);
  void Swap(EasterEggService* other);
  friend void swap(EasterEggService& a, EasterEggService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EasterEggService* New() const final {
    return CreateMaybeMessage<EasterEggService>(NULL);
  }

  EasterEggService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EasterEggService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EasterEggService& from);
  void MergeFrom(const EasterEggService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EasterEggService* other);
  protected:
  explicit EasterEggService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EasterEggService_EasterEggRequest EasterEggRequest;
  typedef EasterEggService_EasterEggResponse EasterEggResponse;

  typedef EasterEggService_CMD CMD;
  static const CMD QUERY =
    EasterEggService_CMD_QUERY;
  static const CMD OPEN =
    EasterEggService_CMD_OPEN;
  static inline bool CMD_IsValid(int value) {
    return EasterEggService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    EasterEggService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    EasterEggService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    EasterEggService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return EasterEggService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return EasterEggService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return EasterEggService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.EasterEggService.EasterEggRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::EasterEggService_EasterEggRequest& _internal_req() const;
  public:
  const ::sg::EasterEggService_EasterEggRequest& req() const;
  ::sg::EasterEggService_EasterEggRequest* release_req();
  ::sg::EasterEggService_EasterEggRequest* mutable_req();
  void set_allocated_req(::sg::EasterEggService_EasterEggRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::EasterEggService_EasterEggRequest* req);
  ::sg::EasterEggService_EasterEggRequest* unsafe_arena_release_req();

  // optional .sg.EasterEggService.EasterEggResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::EasterEggService_EasterEggResponse& _internal_resp() const;
  public:
  const ::sg::EasterEggService_EasterEggResponse& resp() const;
  ::sg::EasterEggService_EasterEggResponse* release_resp();
  ::sg::EasterEggService_EasterEggResponse* mutable_resp();
  void set_allocated_resp(::sg::EasterEggService_EasterEggResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::EasterEggService_EasterEggResponse* resp);
  ::sg::EasterEggService_EasterEggResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.EasterEggService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::EasterEggService_EasterEggRequest* req_;
  ::sg::EasterEggService_EasterEggResponse* resp_;
  friend struct ::protobuf_EasterEgg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EasterEgg

// optional uint64 entryid = 1;
inline bool EasterEgg::has_entryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EasterEgg::set_has_entryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EasterEgg::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EasterEgg::clear_entryid() {
  entryid_ = GOOGLE_ULONGLONG(0);
  clear_has_entryid();
}
inline ::google::protobuf::uint64 EasterEgg::entryid() const {
  // @@protoc_insertion_point(field_get:sg.EasterEgg.entryid)
  return entryid_;
}
inline void EasterEgg::set_entryid(::google::protobuf::uint64 value) {
  set_has_entryid();
  entryid_ = value;
  // @@protoc_insertion_point(field_set:sg.EasterEgg.entryid)
}

// optional int32 id = 2;
inline bool EasterEgg::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EasterEgg::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EasterEgg::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EasterEgg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EasterEgg::id() const {
  // @@protoc_insertion_point(field_get:sg.EasterEgg.id)
  return id_;
}
inline void EasterEgg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.EasterEgg.id)
}

// optional sfixed64 timestamp = 3;
inline bool EasterEgg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EasterEgg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EasterEgg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EasterEgg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 EasterEgg::timestamp() const {
  // @@protoc_insertion_point(field_get:sg.EasterEgg.timestamp)
  return timestamp_;
}
inline void EasterEgg::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.EasterEgg.timestamp)
}

// -------------------------------------------------------------------

// EasterEggService_EasterEggRequest

// required .sg.EasterEggService.CMD cmd = 1;
inline bool EasterEggService_EasterEggRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EasterEggService_EasterEggRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EasterEggService_EasterEggRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EasterEggService_EasterEggRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::EasterEggService_CMD EasterEggService_EasterEggRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.EasterEggService.EasterEggRequest.cmd)
  return static_cast< ::sg::EasterEggService_CMD >(cmd_);
}
inline void EasterEggService_EasterEggRequest::set_cmd(::sg::EasterEggService_CMD value) {
  assert(::sg::EasterEggService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.EasterEggService.EasterEggRequest.cmd)
}

// optional uint64 entryid = 2;
inline bool EasterEggService_EasterEggRequest::has_entryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EasterEggService_EasterEggRequest::set_has_entryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EasterEggService_EasterEggRequest::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EasterEggService_EasterEggRequest::clear_entryid() {
  entryid_ = GOOGLE_ULONGLONG(0);
  clear_has_entryid();
}
inline ::google::protobuf::uint64 EasterEggService_EasterEggRequest::entryid() const {
  // @@protoc_insertion_point(field_get:sg.EasterEggService.EasterEggRequest.entryid)
  return entryid_;
}
inline void EasterEggService_EasterEggRequest::set_entryid(::google::protobuf::uint64 value) {
  set_has_entryid();
  entryid_ = value;
  // @@protoc_insertion_point(field_set:sg.EasterEggService.EasterEggRequest.entryid)
}

// optional int32 choice = 3;
inline bool EasterEggService_EasterEggRequest::has_choice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EasterEggService_EasterEggRequest::set_has_choice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EasterEggService_EasterEggRequest::clear_has_choice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EasterEggService_EasterEggRequest::clear_choice() {
  choice_ = 0;
  clear_has_choice();
}
inline ::google::protobuf::int32 EasterEggService_EasterEggRequest::choice() const {
  // @@protoc_insertion_point(field_get:sg.EasterEggService.EasterEggRequest.choice)
  return choice_;
}
inline void EasterEggService_EasterEggRequest::set_choice(::google::protobuf::int32 value) {
  set_has_choice();
  choice_ = value;
  // @@protoc_insertion_point(field_set:sg.EasterEggService.EasterEggRequest.choice)
}

// -------------------------------------------------------------------

// EasterEggService_EasterEggResponse

// required int32 result = 1;
inline bool EasterEggService_EasterEggResponse::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EasterEggService_EasterEggResponse::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EasterEggService_EasterEggResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EasterEggService_EasterEggResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 EasterEggService_EasterEggResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.EasterEggService.EasterEggResponse.result)
  return result_;
}
inline void EasterEggService_EasterEggResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.EasterEggService.EasterEggResponse.result)
}

// repeated .sg.EasterEgg easter_egg_list = 3;
inline int EasterEggService_EasterEggResponse::easter_egg_list_size() const {
  return easter_egg_list_.size();
}
inline void EasterEggService_EasterEggResponse::clear_easter_egg_list() {
  easter_egg_list_.Clear();
}
inline ::sg::EasterEgg* EasterEggService_EasterEggResponse::mutable_easter_egg_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.EasterEggService.EasterEggResponse.easter_egg_list)
  return easter_egg_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::EasterEgg >*
EasterEggService_EasterEggResponse::mutable_easter_egg_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.EasterEggService.EasterEggResponse.easter_egg_list)
  return &easter_egg_list_;
}
inline const ::sg::EasterEgg& EasterEggService_EasterEggResponse::easter_egg_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.EasterEggService.EasterEggResponse.easter_egg_list)
  return easter_egg_list_.Get(index);
}
inline ::sg::EasterEgg* EasterEggService_EasterEggResponse::add_easter_egg_list() {
  // @@protoc_insertion_point(field_add:sg.EasterEggService.EasterEggResponse.easter_egg_list)
  return easter_egg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::EasterEgg >&
EasterEggService_EasterEggResponse::easter_egg_list() const {
  // @@protoc_insertion_point(field_list:sg.EasterEggService.EasterEggResponse.easter_egg_list)
  return easter_egg_list_;
}

// optional .sg.pb_pair_int64_int saved_customer = 4;
inline bool EasterEggService_EasterEggResponse::has_saved_customer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EasterEggService_EasterEggResponse::set_has_saved_customer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EasterEggService_EasterEggResponse::clear_has_saved_customer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::pb_pair_int64_int& EasterEggService_EasterEggResponse::_internal_saved_customer() const {
  return *saved_customer_;
}
inline const ::sg::pb_pair_int64_int& EasterEggService_EasterEggResponse::saved_customer() const {
  const ::sg::pb_pair_int64_int* p = saved_customer_;
  // @@protoc_insertion_point(field_get:sg.EasterEggService.EasterEggResponse.saved_customer)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::pb_pair_int64_int*>(
      &::sg::_pb_pair_int64_int_default_instance_);
}
inline ::sg::pb_pair_int64_int* EasterEggService_EasterEggResponse::release_saved_customer() {
  // @@protoc_insertion_point(field_release:sg.EasterEggService.EasterEggResponse.saved_customer)
  clear_has_saved_customer();
  ::sg::pb_pair_int64_int* temp = saved_customer_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  saved_customer_ = NULL;
  return temp;
}
inline ::sg::pb_pair_int64_int* EasterEggService_EasterEggResponse::unsafe_arena_release_saved_customer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.EasterEggService.EasterEggResponse.saved_customer)
  clear_has_saved_customer();
  ::sg::pb_pair_int64_int* temp = saved_customer_;
  saved_customer_ = NULL;
  return temp;
}
inline ::sg::pb_pair_int64_int* EasterEggService_EasterEggResponse::mutable_saved_customer() {
  set_has_saved_customer();
  if (saved_customer_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::pb_pair_int64_int>(GetArenaNoVirtual());
    saved_customer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.EasterEggService.EasterEggResponse.saved_customer)
  return saved_customer_;
}
inline void EasterEggService_EasterEggResponse::set_allocated_saved_customer(::sg::pb_pair_int64_int* saved_customer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(saved_customer_);
  }
  if (saved_customer) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(saved_customer)->GetArena();
    if (message_arena != submessage_arena) {
      saved_customer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, saved_customer, submessage_arena);
    }
    set_has_saved_customer();
  } else {
    clear_has_saved_customer();
  }
  saved_customer_ = saved_customer;
  // @@protoc_insertion_point(field_set_allocated:sg.EasterEggService.EasterEggResponse.saved_customer)
}

// optional .sg.Reward get = 5;
inline bool EasterEggService_EasterEggResponse::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EasterEggService_EasterEggResponse::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EasterEggService_EasterEggResponse::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::Reward& EasterEggService_EasterEggResponse::_internal_get() const {
  return *get_;
}
inline const ::sg::Reward& EasterEggService_EasterEggResponse::get() const {
  const ::sg::Reward* p = get_;
  // @@protoc_insertion_point(field_get:sg.EasterEggService.EasterEggResponse.get)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* EasterEggService_EasterEggResponse::release_get() {
  // @@protoc_insertion_point(field_release:sg.EasterEggService.EasterEggResponse.get)
  clear_has_get();
  ::sg::Reward* temp = get_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  get_ = NULL;
  return temp;
}
inline ::sg::Reward* EasterEggService_EasterEggResponse::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.EasterEggService.EasterEggResponse.get)
  clear_has_get();
  ::sg::Reward* temp = get_;
  get_ = NULL;
  return temp;
}
inline ::sg::Reward* EasterEggService_EasterEggResponse::mutable_get() {
  set_has_get();
  if (get_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    get_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.EasterEggService.EasterEggResponse.get)
  return get_;
}
inline void EasterEggService_EasterEggResponse::set_allocated_get(::sg::Reward* get) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(get_);
  }
  if (get) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(get)->GetArena();
    if (message_arena != submessage_arena) {
      get = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    set_has_get();
  } else {
    clear_has_get();
  }
  get_ = get;
  // @@protoc_insertion_point(field_set_allocated:sg.EasterEggService.EasterEggResponse.get)
}

// optional .sg.Reward lose = 6;
inline bool EasterEggService_EasterEggResponse::has_lose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EasterEggService_EasterEggResponse::set_has_lose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EasterEggService_EasterEggResponse::clear_has_lose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sg::Reward& EasterEggService_EasterEggResponse::_internal_lose() const {
  return *lose_;
}
inline const ::sg::Reward& EasterEggService_EasterEggResponse::lose() const {
  const ::sg::Reward* p = lose_;
  // @@protoc_insertion_point(field_get:sg.EasterEggService.EasterEggResponse.lose)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* EasterEggService_EasterEggResponse::release_lose() {
  // @@protoc_insertion_point(field_release:sg.EasterEggService.EasterEggResponse.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* EasterEggService_EasterEggResponse::unsafe_arena_release_lose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.EasterEggService.EasterEggResponse.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* EasterEggService_EasterEggResponse::mutable_lose() {
  set_has_lose();
  if (lose_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    lose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.EasterEggService.EasterEggResponse.lose)
  return lose_;
}
inline void EasterEggService_EasterEggResponse::set_allocated_lose(::sg::Reward* lose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lose_);
  }
  if (lose) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lose)->GetArena();
    if (message_arena != submessage_arena) {
      lose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lose, submessage_arena);
    }
    set_has_lose();
  } else {
    clear_has_lose();
  }
  lose_ = lose;
  // @@protoc_insertion_point(field_set_allocated:sg.EasterEggService.EasterEggResponse.lose)
}

// -------------------------------------------------------------------

// EasterEggService

// optional .sg.EasterEggService.EasterEggRequest req = 1;
inline bool EasterEggService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EasterEggService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EasterEggService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EasterEggService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::EasterEggService_EasterEggRequest& EasterEggService::_internal_req() const {
  return *req_;
}
inline const ::sg::EasterEggService_EasterEggRequest& EasterEggService::req() const {
  const ::sg::EasterEggService_EasterEggRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.EasterEggService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::EasterEggService_EasterEggRequest*>(
      &::sg::_EasterEggService_EasterEggRequest_default_instance_);
}
inline ::sg::EasterEggService_EasterEggRequest* EasterEggService::release_req() {
  // @@protoc_insertion_point(field_release:sg.EasterEggService.req)
  clear_has_req();
  ::sg::EasterEggService_EasterEggRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::EasterEggService_EasterEggRequest* EasterEggService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.EasterEggService.req)
  clear_has_req();
  ::sg::EasterEggService_EasterEggRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::EasterEggService_EasterEggRequest* EasterEggService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::EasterEggService_EasterEggRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.EasterEggService.req)
  return req_;
}
inline void EasterEggService::set_allocated_req(::sg::EasterEggService_EasterEggRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.EasterEggService.req)
}

// optional .sg.EasterEggService.EasterEggResponse resp = 2;
inline bool EasterEggService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EasterEggService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EasterEggService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EasterEggService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::EasterEggService_EasterEggResponse& EasterEggService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::EasterEggService_EasterEggResponse& EasterEggService::resp() const {
  const ::sg::EasterEggService_EasterEggResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.EasterEggService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::EasterEggService_EasterEggResponse*>(
      &::sg::_EasterEggService_EasterEggResponse_default_instance_);
}
inline ::sg::EasterEggService_EasterEggResponse* EasterEggService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.EasterEggService.resp)
  clear_has_resp();
  ::sg::EasterEggService_EasterEggResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::EasterEggService_EasterEggResponse* EasterEggService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.EasterEggService.resp)
  clear_has_resp();
  ::sg::EasterEggService_EasterEggResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::EasterEggService_EasterEggResponse* EasterEggService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::EasterEggService_EasterEggResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.EasterEggService.resp)
  return resp_;
}
inline void EasterEggService::set_allocated_resp(::sg::EasterEggService_EasterEggResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.EasterEggService.resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::EasterEggService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::EasterEggService_CMD>() {
  return ::sg::EasterEggService_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_EasterEgg_2eproto
