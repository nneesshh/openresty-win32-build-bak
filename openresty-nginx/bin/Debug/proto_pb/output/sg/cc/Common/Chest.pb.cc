// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chest.proto

#include "Chest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Chest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Chest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserChestService_UserChestRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Chest_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserChestService_UserChestResponse;
}  // namespace protobuf_Chest_2eproto
namespace sg {
class ChestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chest>
      _instance;
} _Chest_default_instance_;
class UserChestService_UserChestRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChestService_UserChestRequest>
      _instance;
} _UserChestService_UserChestRequest_default_instance_;
class UserChestService_UserChestResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChestService_UserChestResponse>
      _instance;
} _UserChestService_UserChestResponse_default_instance_;
class UserChestServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChestService>
      _instance;
} _UserChestService_default_instance_;
}  // namespace sg
namespace protobuf_Chest_2eproto {
static void InitDefaultsChest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Chest_default_instance_;
    new (ptr) ::sg::Chest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Chest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Chest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChest}, {}};

static void InitDefaultsUserChestService_UserChestRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserChestService_UserChestRequest_default_instance_;
    new (ptr) ::sg::UserChestService_UserChestRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserChestService_UserChestRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserChestService_UserChestRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserChestService_UserChestRequest}, {}};

static void InitDefaultsUserChestService_UserChestResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserChestService_UserChestResponse_default_instance_;
    new (ptr) ::sg::UserChestService_UserChestResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserChestService_UserChestResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserChestService_UserChestResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserChestService_UserChestResponse}, {
      &protobuf_Chest_2eproto::scc_info_Chest.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsUserChestService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserChestService_default_instance_;
    new (ptr) ::sg::UserChestService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserChestService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserChestService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserChestService}, {
      &protobuf_Chest_2eproto::scc_info_UserChestService_UserChestRequest.base,
      &protobuf_Chest_2eproto::scc_info_UserChestService_UserChestResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Chest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserChestService_UserChestRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserChestService_UserChestResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserChestService.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Chest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Chest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Chest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Chest, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService_UserChestRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService_UserChestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService_UserChestRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService_UserChestRequest, open_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService_UserChestResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService_UserChestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService_UserChestResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService_UserChestResponse, chest_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService_UserChestResponse, reward_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserChestService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::sg::Chest)},
  { 9, 16, sizeof(::sg::UserChestService_UserChestRequest)},
  { 18, 26, sizeof(::sg::UserChestService_UserChestResponse)},
  { 29, 36, sizeof(::sg::UserChestService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Chest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserChestService_UserChestRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserChestService_UserChestResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserChestService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Chest.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013Chest.proto\022\002sg\032\020BaseStruct.proto\"\"\n\005C"
      "hest\022\n\n\002id\030\001 \002(\005\022\r\n\005state\030\002 \002(\005\"\320\002\n\020User"
      "ChestService\0222\n\003req\030\001 \001(\0132%.sg.UserChest"
      "Service.UserChestRequest\0224\n\004resp\030\002 \001(\0132&"
      ".sg.UserChestService.UserChestResponse\032P"
      "\n\020UserChestRequest\022+\n\003cmd\030\001 \002(\0162\036.sg.Use"
      "rChestService.CHEST_CMD\022\017\n\007open_id\030\002 \001(\005"
      "\032^\n\021UserChestResponse\022\016\n\006result\030\001 \002(\005\022\035\n"
      "\nchest_list\030\002 \003(\0132\t.sg.Chest\022\032\n\006reward\030\003"
      " \001(\0132\n.sg.Reward\" \n\tCHEST_CMD\022\t\n\005QUERY\020\001"
      "\022\010\n\004OPEN\020\002B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 415);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Chest.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Chest_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* UserChestService_CHEST_CMD_descriptor() {
  protobuf_Chest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Chest_2eproto::file_level_enum_descriptors[0];
}
bool UserChestService_CHEST_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserChestService_CHEST_CMD UserChestService::QUERY;
const UserChestService_CHEST_CMD UserChestService::OPEN;
const UserChestService_CHEST_CMD UserChestService::CHEST_CMD_MIN;
const UserChestService_CHEST_CMD UserChestService::CHEST_CMD_MAX;
const int UserChestService::CHEST_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Chest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chest::kIdFieldNumber;
const int Chest::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chest::Chest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chest_2eproto::scc_info_Chest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Chest)
}
Chest::Chest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chest_2eproto::scc_info_Chest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Chest)
}
Chest::Chest(const Chest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.Chest)
}

void Chest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

Chest::~Chest() {
  // @@protoc_insertion_point(destructor:sg.Chest)
  SharedDtor();
}

void Chest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Chest::ArenaDtor(void* object) {
  Chest* _this = reinterpret_cast< Chest* >(object);
  (void)_this;
}
void Chest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Chest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Chest::descriptor() {
  ::protobuf_Chest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chest& Chest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chest_2eproto::scc_info_Chest.base);
  return *internal_default_instance();
}


void Chest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Chest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Chest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Chest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Chest)
  return false;
#undef DO_
}

void Chest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Chest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Chest)
}

::google::protobuf::uint8* Chest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Chest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Chest)
  return target;
}

size_t Chest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Chest)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t Chest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Chest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Chest)
  GOOGLE_DCHECK_NE(&from, this);
  const Chest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Chest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Chest)
    MergeFrom(*source);
  }
}

void Chest::MergeFrom(const Chest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Chest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Chest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Chest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chest::CopyFrom(const Chest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Chest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Chest::Swap(Chest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Chest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Chest::UnsafeArenaSwap(Chest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Chest::InternalSwap(Chest* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Chest::GetMetadata() const {
  protobuf_Chest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserChestService_UserChestRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChestService_UserChestRequest::kCmdFieldNumber;
const int UserChestService_UserChestRequest::kOpenIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChestService_UserChestRequest::UserChestService_UserChestRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chest_2eproto::scc_info_UserChestService_UserChestRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserChestService.UserChestRequest)
}
UserChestService_UserChestRequest::UserChestService_UserChestRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chest_2eproto::scc_info_UserChestService_UserChestRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserChestService.UserChestRequest)
}
UserChestService_UserChestRequest::UserChestService_UserChestRequest(const UserChestService_UserChestRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&open_id_, &from.open_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&open_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserChestService.UserChestRequest)
}

void UserChestService_UserChestRequest::SharedCtor() {
  open_id_ = 0;
  cmd_ = 1;
}

UserChestService_UserChestRequest::~UserChestService_UserChestRequest() {
  // @@protoc_insertion_point(destructor:sg.UserChestService.UserChestRequest)
  SharedDtor();
}

void UserChestService_UserChestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserChestService_UserChestRequest::ArenaDtor(void* object) {
  UserChestService_UserChestRequest* _this = reinterpret_cast< UserChestService_UserChestRequest* >(object);
  (void)_this;
}
void UserChestService_UserChestRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserChestService_UserChestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserChestService_UserChestRequest::descriptor() {
  ::protobuf_Chest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserChestService_UserChestRequest& UserChestService_UserChestRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chest_2eproto::scc_info_UserChestService_UserChestRequest.base);
  return *internal_default_instance();
}


void UserChestService_UserChestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserChestService.UserChestRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    open_id_ = 0;
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserChestService_UserChestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserChestService.UserChestRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserChestService.CHEST_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserChestService_CHEST_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserChestService_CHEST_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 open_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_open_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserChestService.UserChestRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserChestService.UserChestRequest)
  return false;
#undef DO_
}

void UserChestService_UserChestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserChestService.UserChestRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserChestService.CHEST_CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 open_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserChestService.UserChestRequest)
}

::google::protobuf::uint8* UserChestService_UserChestRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserChestService.UserChestRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserChestService.CHEST_CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 open_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserChestService.UserChestRequest)
  return target;
}

size_t UserChestService_UserChestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserChestService.UserChestRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserChestService.CHEST_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // optional int32 open_id = 2;
  if (has_open_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChestService_UserChestRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserChestService.UserChestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChestService_UserChestRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChestService_UserChestRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserChestService.UserChestRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserChestService.UserChestRequest)
    MergeFrom(*source);
  }
}

void UserChestService_UserChestRequest::MergeFrom(const UserChestService_UserChestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserChestService.UserChestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      open_id_ = from.open_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserChestService_UserChestRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserChestService.UserChestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChestService_UserChestRequest::CopyFrom(const UserChestService_UserChestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserChestService.UserChestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChestService_UserChestRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void UserChestService_UserChestRequest::Swap(UserChestService_UserChestRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserChestService_UserChestRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserChestService_UserChestRequest::UnsafeArenaSwap(UserChestService_UserChestRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserChestService_UserChestRequest::InternalSwap(UserChestService_UserChestRequest* other) {
  using std::swap;
  swap(open_id_, other->open_id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserChestService_UserChestRequest::GetMetadata() const {
  protobuf_Chest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserChestService_UserChestResponse::InitAsDefaultInstance() {
  ::sg::_UserChestService_UserChestResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void UserChestService_UserChestResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserChestService.UserChestResponse.reward)
}
void UserChestService_UserChestResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChestService_UserChestResponse::kResultFieldNumber;
const int UserChestService_UserChestResponse::kChestListFieldNumber;
const int UserChestService_UserChestResponse::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChestService_UserChestResponse::UserChestService_UserChestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chest_2eproto::scc_info_UserChestService_UserChestResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserChestService.UserChestResponse)
}
UserChestService_UserChestResponse::UserChestService_UserChestResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  chest_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chest_2eproto::scc_info_UserChestService_UserChestResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserChestService.UserChestResponse)
}
UserChestService_UserChestResponse::UserChestService_UserChestResponse(const UserChestService_UserChestResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      chest_list_(from.chest_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.UserChestService.UserChestResponse)
}

void UserChestService_UserChestResponse::SharedCtor() {
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(result_));
}

UserChestService_UserChestResponse::~UserChestService_UserChestResponse() {
  // @@protoc_insertion_point(destructor:sg.UserChestService.UserChestResponse)
  SharedDtor();
}

void UserChestService_UserChestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete reward_;
}

void UserChestService_UserChestResponse::ArenaDtor(void* object) {
  UserChestService_UserChestResponse* _this = reinterpret_cast< UserChestService_UserChestResponse* >(object);
  (void)_this;
}
void UserChestService_UserChestResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserChestService_UserChestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserChestService_UserChestResponse::descriptor() {
  ::protobuf_Chest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserChestService_UserChestResponse& UserChestService_UserChestResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chest_2eproto::scc_info_UserChestService_UserChestResponse.base);
  return *internal_default_instance();
}


void UserChestService_UserChestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserChestService.UserChestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chest_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != NULL);
    reward_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserChestService_UserChestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserChestService.UserChestResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Chest chest_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chest_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserChestService.UserChestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserChestService.UserChestResponse)
  return false;
#undef DO_
}

void UserChestService_UserChestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserChestService.UserChestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.Chest chest_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chest_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->chest_list(static_cast<int>(i)),
      output);
  }

  // optional .sg.Reward reward = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserChestService.UserChestResponse)
}

::google::protobuf::uint8* UserChestService_UserChestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserChestService.UserChestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.Chest chest_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chest_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->chest_list(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.Reward reward = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserChestService.UserChestResponse)
  return target;
}

size_t UserChestService_UserChestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserChestService.UserChestResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.Chest chest_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->chest_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chest_list(static_cast<int>(i)));
    }
  }

  // optional .sg.Reward reward = 3;
  if (has_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChestService_UserChestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserChestService.UserChestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChestService_UserChestResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChestService_UserChestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserChestService.UserChestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserChestService.UserChestResponse)
    MergeFrom(*source);
  }
}

void UserChestService_UserChestResponse::MergeFrom(const UserChestService_UserChestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserChestService.UserChestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chest_list_.MergeFrom(from.chest_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserChestService_UserChestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserChestService.UserChestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChestService_UserChestResponse::CopyFrom(const UserChestService_UserChestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserChestService.UserChestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChestService_UserChestResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chest_list())) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void UserChestService_UserChestResponse::Swap(UserChestService_UserChestResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserChestService_UserChestResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserChestService_UserChestResponse::UnsafeArenaSwap(UserChestService_UserChestResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserChestService_UserChestResponse::InternalSwap(UserChestService_UserChestResponse* other) {
  using std::swap;
  CastToBase(&chest_list_)->InternalSwap(CastToBase(&other->chest_list_));
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserChestService_UserChestResponse::GetMetadata() const {
  protobuf_Chest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserChestService::InitAsDefaultInstance() {
  ::sg::_UserChestService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserChestService_UserChestRequest*>(
      ::sg::UserChestService_UserChestRequest::internal_default_instance());
  ::sg::_UserChestService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserChestService_UserChestResponse*>(
      ::sg::UserChestService_UserChestResponse::internal_default_instance());
}
void UserChestService::unsafe_arena_set_allocated_req(
    ::sg::UserChestService_UserChestRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserChestService.req)
}
void UserChestService::unsafe_arena_set_allocated_resp(
    ::sg::UserChestService_UserChestResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserChestService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChestService::kReqFieldNumber;
const int UserChestService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChestService::UserChestService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Chest_2eproto::scc_info_UserChestService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserChestService)
}
UserChestService::UserChestService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Chest_2eproto::scc_info_UserChestService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserChestService)
}
UserChestService::UserChestService(const UserChestService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserChestService_UserChestRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserChestService_UserChestResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserChestService)
}

void UserChestService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserChestService::~UserChestService() {
  // @@protoc_insertion_point(destructor:sg.UserChestService)
  SharedDtor();
}

void UserChestService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserChestService::ArenaDtor(void* object) {
  UserChestService* _this = reinterpret_cast< UserChestService* >(object);
  (void)_this;
}
void UserChestService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserChestService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserChestService::descriptor() {
  ::protobuf_Chest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserChestService& UserChestService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Chest_2eproto::scc_info_UserChestService.base);
  return *internal_default_instance();
}


void UserChestService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserChestService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserChestService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserChestService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserChestService.UserChestRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserChestService.UserChestResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserChestService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserChestService)
  return false;
#undef DO_
}

void UserChestService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserChestService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserChestService.UserChestRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserChestService.UserChestResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserChestService)
}

::google::protobuf::uint8* UserChestService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserChestService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserChestService.UserChestRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserChestService.UserChestResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserChestService)
  return target;
}

size_t UserChestService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserChestService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserChestService.UserChestRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserChestService.UserChestResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChestService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserChestService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChestService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserChestService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserChestService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserChestService)
    MergeFrom(*source);
  }
}

void UserChestService::MergeFrom(const UserChestService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserChestService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserChestService_UserChestRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserChestService_UserChestResponse::MergeFrom(from.resp());
    }
  }
}

void UserChestService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserChestService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChestService::CopyFrom(const UserChestService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserChestService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChestService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserChestService::Swap(UserChestService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserChestService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserChestService::UnsafeArenaSwap(UserChestService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserChestService::InternalSwap(UserChestService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserChestService::GetMetadata() const {
  protobuf_Chest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Chest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Chest* Arena::CreateMaybeMessage< ::sg::Chest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Chest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserChestService_UserChestRequest* Arena::CreateMaybeMessage< ::sg::UserChestService_UserChestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserChestService_UserChestRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserChestService_UserChestResponse* Arena::CreateMaybeMessage< ::sg::UserChestService_UserChestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserChestService_UserChestResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserChestService* Arena::CreateMaybeMessage< ::sg::UserChestService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserChestService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
