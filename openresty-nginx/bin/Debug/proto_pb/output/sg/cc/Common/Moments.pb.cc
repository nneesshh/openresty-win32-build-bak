// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Moments.proto

#include "Moments.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Moments_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Moments_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CommentContent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Moments_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CommentService_CommentRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Moments_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CommentContentList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Moments_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CommentData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Moments_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CommentService_CommentResponse;
}  // namespace protobuf_Moments_2eproto
namespace sg {
class CommentContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommentContent>
      _instance;
} _CommentContent_default_instance_;
class CommentContentListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommentContentList>
      _instance;
} _CommentContentList_default_instance_;
class CommentDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommentData>
      _instance;
} _CommentData_default_instance_;
class CommentDataListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommentDataList>
      _instance;
} _CommentDataList_default_instance_;
class CommentService_CommentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommentService_CommentRequest>
      _instance;
} _CommentService_CommentRequest_default_instance_;
class CommentService_CommentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommentService_CommentResponse>
      _instance;
} _CommentService_CommentResponse_default_instance_;
class CommentServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommentService>
      _instance;
} _CommentService_default_instance_;
}  // namespace sg
namespace protobuf_Moments_2eproto {
static void InitDefaultsCommentContent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_CommentContent_default_instance_;
    new (ptr) ::sg::CommentContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::CommentContent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommentContent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommentContent}, {}};

static void InitDefaultsCommentContentList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_CommentContentList_default_instance_;
    new (ptr) ::sg::CommentContentList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::CommentContentList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommentContentList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommentContentList}, {
      &protobuf_Moments_2eproto::scc_info_CommentContent.base,}};

static void InitDefaultsCommentData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_CommentData_default_instance_;
    new (ptr) ::sg::CommentData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::CommentData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommentData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommentData}, {
      &protobuf_Moments_2eproto::scc_info_CommentContentList.base,}};

static void InitDefaultsCommentDataList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_CommentDataList_default_instance_;
    new (ptr) ::sg::CommentDataList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::CommentDataList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommentDataList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommentDataList}, {
      &protobuf_Moments_2eproto::scc_info_CommentData.base,}};

static void InitDefaultsCommentService_CommentRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_CommentService_CommentRequest_default_instance_;
    new (ptr) ::sg::CommentService_CommentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::CommentService_CommentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommentService_CommentRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommentService_CommentRequest}, {}};

static void InitDefaultsCommentService_CommentResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_CommentService_CommentResponse_default_instance_;
    new (ptr) ::sg::CommentService_CommentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::CommentService_CommentResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommentService_CommentResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommentService_CommentResponse}, {
      &protobuf_Moments_2eproto::scc_info_CommentData.base,}};

static void InitDefaultsCommentService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_CommentService_default_instance_;
    new (ptr) ::sg::CommentService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::CommentService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CommentService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCommentService}, {
      &protobuf_Moments_2eproto::scc_info_CommentService_CommentRequest.base,
      &protobuf_Moments_2eproto::scc_info_CommentService_CommentResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CommentContent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommentContentList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommentData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommentDataList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommentService_CommentRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommentService_CommentResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommentService.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContent, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContent, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContent, like_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContent, self_like_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContent, createtime_),
  2,
  0,
  1,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContentList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentContentList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentData, subject_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentData, subject_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentData, subject_day_hot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentData, self_postid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentData, content_list_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentDataList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentDataList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentRequest, subject_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentRequest, content_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentRequest, comment_content_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService_CommentResponse, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::CommentService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::sg::CommentContent)},
  { 17, 23, sizeof(::sg::CommentContentList)},
  { 24, 34, sizeof(::sg::CommentData)},
  { 39, 45, sizeof(::sg::CommentDataList)},
  { 46, 55, sizeof(::sg::CommentService_CommentRequest)},
  { 59, 66, sizeof(::sg::CommentService_CommentResponse)},
  { 68, 75, sizeof(::sg::CommentService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_CommentContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_CommentContentList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_CommentData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_CommentDataList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_CommentService_CommentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_CommentService_CommentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_CommentService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Moments.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rMoments.proto\022\002sg\"t\n\016CommentContent\022\n\n"
      "\002id\030\001 \002(\005\022\014\n\004nick\030\002 \002(\014\022\017\n\007content\030\003 \002(\014"
      "\022\020\n\010like_num\030\004 \002(\005\022\021\n\tself_like\030\005 \002(\010\022\022\n"
      "\ncreatetime\030\013 \002(\020\"6\n\022CommentContentList\022"
      " \n\004list\030\001 \003(\0132\022.sg.CommentContent\"\271\001\n\013Co"
      "mmentData\022\026\n\016subject_typeid\030\001 \002(\004\0226\n\020sub"
      "ject_category\030\002 \002(\0162\034.sg.COMMENT_SUBJECT"
      "_CATEGORY\022\027\n\017subject_day_hot\030\003 \001(\005\022\023\n\013se"
      "lf_postid\030\004 \001(\005\022,\n\014content_list\030\013 \001(\0132\026."
      "sg.CommentContentList\"0\n\017CommentDataList"
      "\022\035\n\004list\030\001 \003(\0132\017.sg.CommentData\"\356\002\n\016Comm"
      "entService\022.\n\003req\030\001 \001(\0132!.sg.CommentServ"
      "ice.CommentRequest\0220\n\004resp\030\002 \001(\0132\".sg.Co"
      "mmentService.CommentResponse\032\206\001\n\016Comment"
      "Request\022/\n\003cmd\030\001 \002(\0162\".sg.CommentService"
      ".COMMENT_COMMAND\022\026\n\016subject_typeid\030\002 \001(\003"
      "\022\022\n\ncontent_id\030\003 \001(\005\022\027\n\017comment_content\030"
      "\004 \001(\014\032@\n\017CommentResponse\022\016\n\006result\030\001 \002(\005"
      "\022\035\n\004data\030\002 \001(\0132\017.sg.CommentData\"/\n\017COMME"
      "NT_COMMAND\022\t\n\005QUERY\020\001\022\007\n\003ADD\020\002\022\010\n\004LIKE\020\003"
      "*\207\001\n\030COMMENT_SUBJECT_CATEGORY\022\033\n\027COMMENT"
      "_SUBJECT_UNKNOWN\020\000\022\030\n\024COMMENT_SUBJECT_SH"
      "IP\020\001\022\031\n\025COMMENT_SUBJECT_EQUIP\020\002\022\031\n\025COMME"
      "NT_SUBJECT_SCENE\020\003*\245\002\n\rCOMMENT_ERROR\022/\n\""
      "COMMENT_ERROR_SUBJECTID_IS_INVALID\020\377\377\377\377\377"
      "\377\377\377\377\001\0224\n\'COMMENT_ERROR_CONTENT_LENGTH_IS"
      "_INVALID\020\376\377\377\377\377\377\377\377\377\001\0220\n#COMMENT_ERROR_ROL"
      "E_LEVEL_IS_TOO_LOW\020\375\377\377\377\377\377\377\377\377\001\022/\n\"COMMENT"
      "_ERROR_COMMENT_NUM_OVERFLOW\020\374\377\377\377\377\377\377\377\377\001\022-"
      "\n COMMENT_ERROR_COMMENT_IS_TOO_HOT\020\373\377\377\377\377"
      "\377\377\377\377\001\022\033\n\016COMMENT_ERROR_\020\372\377\377\377\377\377\377\377\377\001B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Moments.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Moments_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* CommentService_COMMENT_COMMAND_descriptor() {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Moments_2eproto::file_level_enum_descriptors[0];
}
bool CommentService_COMMENT_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommentService_COMMENT_COMMAND CommentService::QUERY;
const CommentService_COMMENT_COMMAND CommentService::ADD;
const CommentService_COMMENT_COMMAND CommentService::LIKE;
const CommentService_COMMENT_COMMAND CommentService::COMMENT_COMMAND_MIN;
const CommentService_COMMENT_COMMAND CommentService::COMMENT_COMMAND_MAX;
const int CommentService::COMMENT_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* COMMENT_SUBJECT_CATEGORY_descriptor() {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Moments_2eproto::file_level_enum_descriptors[1];
}
bool COMMENT_SUBJECT_CATEGORY_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* COMMENT_ERROR_descriptor() {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Moments_2eproto::file_level_enum_descriptors[2];
}
bool COMMENT_ERROR_IsValid(int value) {
  switch (value) {
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CommentContent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommentContent::kIdFieldNumber;
const int CommentContent::kNickFieldNumber;
const int CommentContent::kContentFieldNumber;
const int CommentContent::kLikeNumFieldNumber;
const int CommentContent::kSelfLikeFieldNumber;
const int CommentContent::kCreatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommentContent::CommentContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Moments_2eproto::scc_info_CommentContent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.CommentContent)
}
CommentContent::CommentContent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentContent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.CommentContent)
}
CommentContent::CommentContent(const CommentContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&id_)) + sizeof(createtime_));
  // @@protoc_insertion_point(copy_constructor:sg.CommentContent)
}

void CommentContent::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&id_)) + sizeof(createtime_));
}

CommentContent::~CommentContent() {
  // @@protoc_insertion_point(destructor:sg.CommentContent)
  SharedDtor();
}

void CommentContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommentContent::ArenaDtor(void* object) {
  CommentContent* _this = reinterpret_cast< CommentContent* >(object);
  (void)_this;
}
void CommentContent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommentContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommentContent::descriptor() {
  ::protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommentContent& CommentContent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentContent.base);
  return *internal_default_instance();
}


void CommentContent::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.CommentContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      content_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&createtime_) -
        reinterpret_cast<char*>(&id_)) + sizeof(createtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommentContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.CommentContent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 like_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_like_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &like_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool self_like = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_self_like();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_like_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 createtime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.CommentContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.CommentContent)
  return false;
#undef DO_
}

void CommentContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.CommentContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nick(), output);
  }

  // required bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // required int32 like_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->like_num(), output);
  }

  // required bool self_like = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->self_like(), output);
  }

  // required sfixed64 createtime = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->createtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.CommentContent)
}

::google::protobuf::uint8* CommentContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.CommentContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes nick = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nick(), target);
  }

  // required bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // required int32 like_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->like_num(), target);
  }

  // required bool self_like = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->self_like(), target);
  }

  // required sfixed64 createtime = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->createtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.CommentContent)
  return target;
}

size_t CommentContent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.CommentContent)
  size_t total_size = 0;

  if (has_nick()) {
    // required bytes nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (has_content()) {
    // required bytes content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_like_num()) {
    // required int32 like_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->like_num());
  }

  if (has_self_like()) {
    // required bool self_like = 5;
    total_size += 1 + 1;
  }

  if (has_createtime()) {
    // required sfixed64 createtime = 11;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CommentContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.CommentContent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());

    // required bytes content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 like_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->like_num());

    // required bool self_like = 5;
    total_size += 1 + 1;

    // required sfixed64 createtime = 11;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.CommentContent)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommentContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.CommentContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.CommentContent)
    MergeFrom(*source);
  }
}

void CommentContent::MergeFrom(const CommentContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.CommentContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000002u) {
      set_content(from.content());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      like_num_ = from.like_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      self_like_ = from.self_like_;
    }
    if (cached_has_bits & 0x00000020u) {
      createtime_ = from.createtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommentContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.CommentContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentContent::CopyFrom(const CommentContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.CommentContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void CommentContent::Swap(CommentContent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommentContent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommentContent::UnsafeArenaSwap(CommentContent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommentContent::InternalSwap(CommentContent* other) {
  using std::swap;
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(like_num_, other->like_num_);
  swap(self_like_, other->self_like_);
  swap(createtime_, other->createtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommentContent::GetMetadata() const {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommentContentList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommentContentList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommentContentList::CommentContentList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Moments_2eproto::scc_info_CommentContentList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.CommentContentList)
}
CommentContentList::CommentContentList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentContentList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.CommentContentList)
}
CommentContentList::CommentContentList(const CommentContentList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.CommentContentList)
}

void CommentContentList::SharedCtor() {
}

CommentContentList::~CommentContentList() {
  // @@protoc_insertion_point(destructor:sg.CommentContentList)
  SharedDtor();
}

void CommentContentList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CommentContentList::ArenaDtor(void* object) {
  CommentContentList* _this = reinterpret_cast< CommentContentList* >(object);
  (void)_this;
}
void CommentContentList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommentContentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommentContentList::descriptor() {
  ::protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommentContentList& CommentContentList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentContentList.base);
  return *internal_default_instance();
}


void CommentContentList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.CommentContentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommentContentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.CommentContentList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.CommentContent list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.CommentContentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.CommentContentList)
  return false;
#undef DO_
}

void CommentContentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.CommentContentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.CommentContent list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.CommentContentList)
}

::google::protobuf::uint8* CommentContentList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.CommentContentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.CommentContent list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.CommentContentList)
  return target;
}

size_t CommentContentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.CommentContentList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.CommentContent list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentContentList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.CommentContentList)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentContentList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommentContentList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.CommentContentList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.CommentContentList)
    MergeFrom(*source);
  }
}

void CommentContentList::MergeFrom(const CommentContentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.CommentContentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CommentContentList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.CommentContentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentContentList::CopyFrom(const CommentContentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.CommentContentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentContentList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void CommentContentList::Swap(CommentContentList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommentContentList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommentContentList::UnsafeArenaSwap(CommentContentList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommentContentList::InternalSwap(CommentContentList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommentContentList::GetMetadata() const {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommentData::InitAsDefaultInstance() {
  ::sg::_CommentData_default_instance_._instance.get_mutable()->content_list_ = const_cast< ::sg::CommentContentList*>(
      ::sg::CommentContentList::internal_default_instance());
}
void CommentData::unsafe_arena_set_allocated_content_list(
    ::sg::CommentContentList* content_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete content_list_;
  }
  content_list_ = content_list;
  if (content_list) {
    set_has_content_list();
  } else {
    clear_has_content_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.CommentData.content_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommentData::kSubjectTypeidFieldNumber;
const int CommentData::kSubjectCategoryFieldNumber;
const int CommentData::kSubjectDayHotFieldNumber;
const int CommentData::kSelfPostidFieldNumber;
const int CommentData::kContentListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommentData::CommentData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Moments_2eproto::scc_info_CommentData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.CommentData)
}
CommentData::CommentData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.CommentData)
}
CommentData::CommentData(const CommentData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_content_list()) {
    content_list_ = new ::sg::CommentContentList(*from.content_list_);
  } else {
    content_list_ = NULL;
  }
  ::memcpy(&subject_typeid_, &from.subject_typeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_postid_) -
    reinterpret_cast<char*>(&subject_typeid_)) + sizeof(self_postid_));
  // @@protoc_insertion_point(copy_constructor:sg.CommentData)
}

void CommentData::SharedCtor() {
  ::memset(&content_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_postid_) -
      reinterpret_cast<char*>(&content_list_)) + sizeof(self_postid_));
}

CommentData::~CommentData() {
  // @@protoc_insertion_point(destructor:sg.CommentData)
  SharedDtor();
}

void CommentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete content_list_;
}

void CommentData::ArenaDtor(void* object) {
  CommentData* _this = reinterpret_cast< CommentData* >(object);
  (void)_this;
}
void CommentData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommentData::descriptor() {
  ::protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommentData& CommentData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentData.base);
  return *internal_default_instance();
}


void CommentData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.CommentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(content_list_ != NULL);
    content_list_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&subject_typeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&self_postid_) -
        reinterpret_cast<char*>(&subject_typeid_)) + sizeof(self_postid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.CommentData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 subject_typeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_subject_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subject_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.COMMENT_SUBJECT_CATEGORY subject_category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::COMMENT_SUBJECT_CATEGORY_IsValid(value)) {
            set_subject_category(static_cast< ::sg::COMMENT_SUBJECT_CATEGORY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 subject_day_hot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_subject_day_hot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subject_day_hot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 self_postid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_self_postid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_postid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.CommentContentList content_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_content_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.CommentData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.CommentData)
  return false;
#undef DO_
}

void CommentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.CommentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 subject_typeid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->subject_typeid(), output);
  }

  // required .sg.COMMENT_SUBJECT_CATEGORY subject_category = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->subject_category(), output);
  }

  // optional int32 subject_day_hot = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subject_day_hot(), output);
  }

  // optional int32 self_postid = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->self_postid(), output);
  }

  // optional .sg.CommentContentList content_list = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_content_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.CommentData)
}

::google::protobuf::uint8* CommentData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.CommentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 subject_typeid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->subject_typeid(), target);
  }

  // required .sg.COMMENT_SUBJECT_CATEGORY subject_category = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->subject_category(), target);
  }

  // optional int32 subject_day_hot = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subject_day_hot(), target);
  }

  // optional int32 self_postid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->self_postid(), target);
  }

  // optional .sg.CommentContentList content_list = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_content_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.CommentData)
  return target;
}

size_t CommentData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.CommentData)
  size_t total_size = 0;

  if (has_subject_typeid()) {
    // required uint64 subject_typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->subject_typeid());
  }

  if (has_subject_category()) {
    // required .sg.COMMENT_SUBJECT_CATEGORY subject_category = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subject_category());
  }

  return total_size;
}
size_t CommentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.CommentData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint64 subject_typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->subject_typeid());

    // required .sg.COMMENT_SUBJECT_CATEGORY subject_category = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subject_category());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .sg.CommentContentList content_list = 11;
  if (has_content_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *content_list_);
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional int32 subject_day_hot = 3;
    if (has_subject_day_hot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subject_day_hot());
    }

    // optional int32 self_postid = 4;
    if (has_self_postid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_postid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.CommentData)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommentData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.CommentData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.CommentData)
    MergeFrom(*source);
  }
}

void CommentData::MergeFrom(const CommentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.CommentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_content_list()->::sg::CommentContentList::MergeFrom(from.content_list());
    }
    if (cached_has_bits & 0x00000002u) {
      subject_typeid_ = from.subject_typeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      subject_category_ = from.subject_category_;
    }
    if (cached_has_bits & 0x00000008u) {
      subject_day_hot_ = from.subject_day_hot_;
    }
    if (cached_has_bits & 0x00000010u) {
      self_postid_ = from.self_postid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommentData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.CommentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentData::CopyFrom(const CommentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.CommentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_content_list()) {
    if (!this->content_list_->IsInitialized()) return false;
  }
  return true;
}

void CommentData::Swap(CommentData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommentData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommentData::UnsafeArenaSwap(CommentData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommentData::InternalSwap(CommentData* other) {
  using std::swap;
  swap(content_list_, other->content_list_);
  swap(subject_typeid_, other->subject_typeid_);
  swap(subject_category_, other->subject_category_);
  swap(subject_day_hot_, other->subject_day_hot_);
  swap(self_postid_, other->self_postid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommentData::GetMetadata() const {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommentDataList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommentDataList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommentDataList::CommentDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Moments_2eproto::scc_info_CommentDataList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.CommentDataList)
}
CommentDataList::CommentDataList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentDataList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.CommentDataList)
}
CommentDataList::CommentDataList(const CommentDataList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.CommentDataList)
}

void CommentDataList::SharedCtor() {
}

CommentDataList::~CommentDataList() {
  // @@protoc_insertion_point(destructor:sg.CommentDataList)
  SharedDtor();
}

void CommentDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CommentDataList::ArenaDtor(void* object) {
  CommentDataList* _this = reinterpret_cast< CommentDataList* >(object);
  (void)_this;
}
void CommentDataList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommentDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommentDataList::descriptor() {
  ::protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommentDataList& CommentDataList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentDataList.base);
  return *internal_default_instance();
}


void CommentDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.CommentDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommentDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.CommentDataList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.CommentData list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.CommentDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.CommentDataList)
  return false;
#undef DO_
}

void CommentDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.CommentDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.CommentData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.CommentDataList)
}

::google::protobuf::uint8* CommentDataList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.CommentDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.CommentData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.CommentDataList)
  return target;
}

size_t CommentDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.CommentDataList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.CommentData list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentDataList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.CommentDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentDataList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommentDataList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.CommentDataList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.CommentDataList)
    MergeFrom(*source);
  }
}

void CommentDataList::MergeFrom(const CommentDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.CommentDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CommentDataList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.CommentDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentDataList::CopyFrom(const CommentDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.CommentDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentDataList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void CommentDataList::Swap(CommentDataList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommentDataList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommentDataList::UnsafeArenaSwap(CommentDataList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommentDataList::InternalSwap(CommentDataList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommentDataList::GetMetadata() const {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommentService_CommentRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommentService_CommentRequest::kCmdFieldNumber;
const int CommentService_CommentRequest::kSubjectTypeidFieldNumber;
const int CommentService_CommentRequest::kContentIdFieldNumber;
const int CommentService_CommentRequest::kCommentContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommentService_CommentRequest::CommentService_CommentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Moments_2eproto::scc_info_CommentService_CommentRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.CommentService.CommentRequest)
}
CommentService_CommentRequest::CommentService_CommentRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentService_CommentRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.CommentService.CommentRequest)
}
CommentService_CommentRequest::CommentService_CommentRequest(const CommentService_CommentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment_content()) {
    comment_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_content(),
      GetArenaNoVirtual());
  }
  ::memcpy(&subject_typeid_, &from.subject_typeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&subject_typeid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.CommentService.CommentRequest)
}

void CommentService_CommentRequest::SharedCtor() {
  comment_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&subject_typeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_id_) -
      reinterpret_cast<char*>(&subject_typeid_)) + sizeof(content_id_));
  cmd_ = 1;
}

CommentService_CommentRequest::~CommentService_CommentRequest() {
  // @@protoc_insertion_point(destructor:sg.CommentService.CommentRequest)
  SharedDtor();
}

void CommentService_CommentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  comment_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommentService_CommentRequest::ArenaDtor(void* object) {
  CommentService_CommentRequest* _this = reinterpret_cast< CommentService_CommentRequest* >(object);
  (void)_this;
}
void CommentService_CommentRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommentService_CommentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommentService_CommentRequest::descriptor() {
  ::protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommentService_CommentRequest& CommentService_CommentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentService_CommentRequest.base);
  return *internal_default_instance();
}


void CommentService_CommentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.CommentService.CommentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    comment_content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&subject_typeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&content_id_) -
        reinterpret_cast<char*>(&subject_typeid_)) + sizeof(content_id_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommentService_CommentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.CommentService.CommentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.CommentService.COMMENT_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::CommentService_COMMENT_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::sg::CommentService_COMMENT_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 subject_typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_subject_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subject_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 content_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_content_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes comment_content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_comment_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.CommentService.CommentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.CommentService.CommentRequest)
  return false;
#undef DO_
}

void CommentService_CommentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.CommentService.CommentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.CommentService.COMMENT_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int64 subject_typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->subject_typeid(), output);
  }

  // optional int32 content_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->content_id(), output);
  }

  // optional bytes comment_content = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->comment_content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.CommentService.CommentRequest)
}

::google::protobuf::uint8* CommentService_CommentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.CommentService.CommentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.CommentService.COMMENT_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int64 subject_typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->subject_typeid(), target);
  }

  // optional int32 content_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->content_id(), target);
  }

  // optional bytes comment_content = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->comment_content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.CommentService.CommentRequest)
  return target;
}

size_t CommentService_CommentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.CommentService.CommentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.CommentService.COMMENT_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes comment_content = 4;
    if (has_comment_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->comment_content());
    }

    // optional int64 subject_typeid = 2;
    if (has_subject_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->subject_typeid());
    }

    // optional int32 content_id = 3;
    if (has_content_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentService_CommentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.CommentService.CommentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentService_CommentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommentService_CommentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.CommentService.CommentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.CommentService.CommentRequest)
    MergeFrom(*source);
  }
}

void CommentService_CommentRequest::MergeFrom(const CommentService_CommentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.CommentService.CommentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_comment_content(from.comment_content());
    }
    if (cached_has_bits & 0x00000002u) {
      subject_typeid_ = from.subject_typeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      content_id_ = from.content_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommentService_CommentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.CommentService.CommentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentService_CommentRequest::CopyFrom(const CommentService_CommentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.CommentService.CommentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentService_CommentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void CommentService_CommentRequest::Swap(CommentService_CommentRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommentService_CommentRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommentService_CommentRequest::UnsafeArenaSwap(CommentService_CommentRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommentService_CommentRequest::InternalSwap(CommentService_CommentRequest* other) {
  using std::swap;
  comment_content_.Swap(&other->comment_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(subject_typeid_, other->subject_typeid_);
  swap(content_id_, other->content_id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommentService_CommentRequest::GetMetadata() const {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommentService_CommentResponse::InitAsDefaultInstance() {
  ::sg::_CommentService_CommentResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::sg::CommentData*>(
      ::sg::CommentData::internal_default_instance());
}
void CommentService_CommentResponse::unsafe_arena_set_allocated_data(
    ::sg::CommentData* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.CommentService.CommentResponse.data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommentService_CommentResponse::kResultFieldNumber;
const int CommentService_CommentResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommentService_CommentResponse::CommentService_CommentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Moments_2eproto::scc_info_CommentService_CommentResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.CommentService.CommentResponse)
}
CommentService_CommentResponse::CommentService_CommentResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentService_CommentResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.CommentService.CommentResponse)
}
CommentService_CommentResponse::CommentService_CommentResponse(const CommentService_CommentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::sg::CommentData(*from.data_);
  } else {
    data_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.CommentService.CommentResponse)
}

void CommentService_CommentResponse::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&data_)) + sizeof(result_));
}

CommentService_CommentResponse::~CommentService_CommentResponse() {
  // @@protoc_insertion_point(destructor:sg.CommentService.CommentResponse)
  SharedDtor();
}

void CommentService_CommentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete data_;
}

void CommentService_CommentResponse::ArenaDtor(void* object) {
  CommentService_CommentResponse* _this = reinterpret_cast< CommentService_CommentResponse* >(object);
  (void)_this;
}
void CommentService_CommentResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommentService_CommentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommentService_CommentResponse::descriptor() {
  ::protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommentService_CommentResponse& CommentService_CommentResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentService_CommentResponse.base);
  return *internal_default_instance();
}


void CommentService_CommentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.CommentService.CommentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommentService_CommentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.CommentService.CommentResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.CommentData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.CommentService.CommentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.CommentService.CommentResponse)
  return false;
#undef DO_
}

void CommentService_CommentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.CommentService.CommentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.CommentData data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.CommentService.CommentResponse)
}

::google::protobuf::uint8* CommentService_CommentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.CommentService.CommentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.CommentData data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.CommentService.CommentResponse)
  return target;
}

size_t CommentService_CommentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.CommentService.CommentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional .sg.CommentData data = 2;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentService_CommentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.CommentService.CommentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentService_CommentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommentService_CommentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.CommentService.CommentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.CommentService.CommentResponse)
    MergeFrom(*source);
  }
}

void CommentService_CommentResponse::MergeFrom(const CommentService_CommentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.CommentService.CommentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::sg::CommentData::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommentService_CommentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.CommentService.CommentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentService_CommentResponse::CopyFrom(const CommentService_CommentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.CommentService.CommentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentService_CommentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void CommentService_CommentResponse::Swap(CommentService_CommentResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommentService_CommentResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommentService_CommentResponse::UnsafeArenaSwap(CommentService_CommentResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommentService_CommentResponse::InternalSwap(CommentService_CommentResponse* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommentService_CommentResponse::GetMetadata() const {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommentService::InitAsDefaultInstance() {
  ::sg::_CommentService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::CommentService_CommentRequest*>(
      ::sg::CommentService_CommentRequest::internal_default_instance());
  ::sg::_CommentService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::CommentService_CommentResponse*>(
      ::sg::CommentService_CommentResponse::internal_default_instance());
}
void CommentService::unsafe_arena_set_allocated_req(
    ::sg::CommentService_CommentRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.CommentService.req)
}
void CommentService::unsafe_arena_set_allocated_resp(
    ::sg::CommentService_CommentResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.CommentService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommentService::kReqFieldNumber;
const int CommentService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommentService::CommentService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Moments_2eproto::scc_info_CommentService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.CommentService)
}
CommentService::CommentService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.CommentService)
}
CommentService::CommentService(const CommentService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::CommentService_CommentRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::CommentService_CommentResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.CommentService)
}

void CommentService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

CommentService::~CommentService() {
  // @@protoc_insertion_point(destructor:sg.CommentService)
  SharedDtor();
}

void CommentService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void CommentService::ArenaDtor(void* object) {
  CommentService* _this = reinterpret_cast< CommentService* >(object);
  (void)_this;
}
void CommentService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommentService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommentService::descriptor() {
  ::protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommentService& CommentService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Moments_2eproto::scc_info_CommentService.base);
  return *internal_default_instance();
}


void CommentService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.CommentService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommentService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.CommentService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.CommentService.CommentRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.CommentService.CommentResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.CommentService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.CommentService)
  return false;
#undef DO_
}

void CommentService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.CommentService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.CommentService.CommentRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.CommentService.CommentResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.CommentService)
}

::google::protobuf::uint8* CommentService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.CommentService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.CommentService.CommentRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.CommentService.CommentResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.CommentService)
  return target;
}

size_t CommentService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.CommentService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.CommentService.CommentRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.CommentService.CommentResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.CommentService)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommentService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.CommentService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.CommentService)
    MergeFrom(*source);
  }
}

void CommentService::MergeFrom(const CommentService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.CommentService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::CommentService_CommentRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::CommentService_CommentResponse::MergeFrom(from.resp());
    }
  }
}

void CommentService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.CommentService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentService::CopyFrom(const CommentService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.CommentService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void CommentService::Swap(CommentService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommentService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommentService::UnsafeArenaSwap(CommentService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommentService::InternalSwap(CommentService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommentService::GetMetadata() const {
  protobuf_Moments_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Moments_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::CommentContent* Arena::CreateMaybeMessage< ::sg::CommentContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::CommentContent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::CommentContentList* Arena::CreateMaybeMessage< ::sg::CommentContentList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::CommentContentList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::CommentData* Arena::CreateMaybeMessage< ::sg::CommentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::CommentData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::CommentDataList* Arena::CreateMaybeMessage< ::sg::CommentDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::CommentDataList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::CommentService_CommentRequest* Arena::CreateMaybeMessage< ::sg::CommentService_CommentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::CommentService_CommentRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::CommentService_CommentResponse* Arena::CreateMaybeMessage< ::sg::CommentService_CommentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::CommentService_CommentResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::CommentService* Arena::CreateMaybeMessage< ::sg::CommentService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::CommentService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
