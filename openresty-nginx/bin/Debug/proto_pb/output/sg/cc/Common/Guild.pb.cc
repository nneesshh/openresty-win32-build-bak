// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Guild.proto

#include "Guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Guild_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DonateItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GuildBuilding;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GuildSignin;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GuildStoreItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GuildTrack;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GuildUserData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DonateItemList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GuildBuildingList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GuildData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GuildDataList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GuildService_GuildRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GuildSigninList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GuildStoreItemList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GuildTrackList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GuildUserDataList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Guild_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_GuildService_GuildResponse;
}  // namespace protobuf_Guild_2eproto
namespace sg {
class GuildStoreItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildStoreItem>
      _instance;
} _GuildStoreItem_default_instance_;
class GuildStoreItemListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildStoreItemList>
      _instance;
} _GuildStoreItemList_default_instance_;
class GuildBuildingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildBuilding>
      _instance;
} _GuildBuilding_default_instance_;
class GuildBuildingListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildBuildingList>
      _instance;
} _GuildBuildingList_default_instance_;
class GuildUserDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildUserData>
      _instance;
} _GuildUserData_default_instance_;
class GuildUserDataListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildUserDataList>
      _instance;
} _GuildUserDataList_default_instance_;
class GuildDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildData>
      _instance;
} _GuildData_default_instance_;
class GuildDataListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildDataList>
      _instance;
} _GuildDataList_default_instance_;
class GuildSigninDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildSignin>
      _instance;
} _GuildSignin_default_instance_;
class GuildSigninListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildSigninList>
      _instance;
} _GuildSigninList_default_instance_;
class GuildTrackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildTrack>
      _instance;
} _GuildTrack_default_instance_;
class GuildTrackListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildTrackList>
      _instance;
} _GuildTrackList_default_instance_;
class DonateItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DonateItem>
      _instance;
} _DonateItem_default_instance_;
class DonateItemListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DonateItemList>
      _instance;
} _DonateItemList_default_instance_;
class GuildService_GuildRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildService_GuildRequest>
      _instance;
} _GuildService_GuildRequest_default_instance_;
class GuildService_GuildResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildService_GuildResponse>
      _instance;
} _GuildService_GuildResponse_default_instance_;
class GuildServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GuildService>
      _instance;
} _GuildService_default_instance_;
class GameGuildTrackNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameGuildTrackNotify>
      _instance;
} _GameGuildTrackNotify_default_instance_;
}  // namespace sg
namespace protobuf_Guild_2eproto {
static void InitDefaultsGuildStoreItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildStoreItem_default_instance_;
    new (ptr) ::sg::GuildStoreItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildStoreItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GuildStoreItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGuildStoreItem}, {}};

static void InitDefaultsGuildStoreItemList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildStoreItemList_default_instance_;
    new (ptr) ::sg::GuildStoreItemList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildStoreItemList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GuildStoreItemList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGuildStoreItemList}, {
      &protobuf_Guild_2eproto::scc_info_GuildStoreItem.base,}};

static void InitDefaultsGuildBuilding() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildBuilding_default_instance_;
    new (ptr) ::sg::GuildBuilding();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildBuilding::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GuildBuilding =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGuildBuilding}, {}};

static void InitDefaultsGuildBuildingList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildBuildingList_default_instance_;
    new (ptr) ::sg::GuildBuildingList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildBuildingList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GuildBuildingList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGuildBuildingList}, {
      &protobuf_Guild_2eproto::scc_info_GuildBuilding.base,}};

static void InitDefaultsGuildUserData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildUserData_default_instance_;
    new (ptr) ::sg::GuildUserData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildUserData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GuildUserData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGuildUserData}, {}};

static void InitDefaultsGuildUserDataList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildUserDataList_default_instance_;
    new (ptr) ::sg::GuildUserDataList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildUserDataList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GuildUserDataList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGuildUserDataList}, {
      &protobuf_Guild_2eproto::scc_info_GuildUserData.base,}};

static void InitDefaultsGuildData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildData_default_instance_;
    new (ptr) ::sg::GuildData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GuildData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGuildData}, {
      &protobuf_Guild_2eproto::scc_info_GuildUserDataList.base,}};

static void InitDefaultsGuildDataList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildDataList_default_instance_;
    new (ptr) ::sg::GuildDataList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildDataList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GuildDataList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGuildDataList}, {
      &protobuf_Guild_2eproto::scc_info_GuildData.base,}};

static void InitDefaultsGuildSignin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildSignin_default_instance_;
    new (ptr) ::sg::GuildSignin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildSignin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GuildSignin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGuildSignin}, {}};

static void InitDefaultsGuildSigninList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildSigninList_default_instance_;
    new (ptr) ::sg::GuildSigninList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildSigninList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GuildSigninList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGuildSigninList}, {
      &protobuf_Guild_2eproto::scc_info_GuildSignin.base,}};

static void InitDefaultsGuildTrack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildTrack_default_instance_;
    new (ptr) ::sg::GuildTrack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildTrack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GuildTrack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGuildTrack}, {}};

static void InitDefaultsGuildTrackList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildTrackList_default_instance_;
    new (ptr) ::sg::GuildTrackList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildTrackList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GuildTrackList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGuildTrackList}, {
      &protobuf_Guild_2eproto::scc_info_GuildTrack.base,}};

static void InitDefaultsDonateItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DonateItem_default_instance_;
    new (ptr) ::sg::DonateItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DonateItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DonateItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDonateItem}, {}};

static void InitDefaultsDonateItemList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DonateItemList_default_instance_;
    new (ptr) ::sg::DonateItemList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DonateItemList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DonateItemList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDonateItemList}, {
      &protobuf_Guild_2eproto::scc_info_DonateItem.base,}};

static void InitDefaultsGuildService_GuildRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildService_GuildRequest_default_instance_;
    new (ptr) ::sg::GuildService_GuildRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildService_GuildRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GuildService_GuildRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGuildService_GuildRequest}, {
      &protobuf_Guild_2eproto::scc_info_DonateItemList.base,}};

static void InitDefaultsGuildService_GuildResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildService_GuildResponse_default_instance_;
    new (ptr) ::sg::GuildService_GuildResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildService_GuildResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_GuildService_GuildResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsGuildService_GuildResponse}, {
      &protobuf_Guild_2eproto::scc_info_GuildDataList.base,
      &protobuf_Guild_2eproto::scc_info_GuildTrackList.base,
      &protobuf_Guild_2eproto::scc_info_GuildSigninList.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,
      &protobuf_Guild_2eproto::scc_info_GuildStoreItemList.base,
      &protobuf_Guild_2eproto::scc_info_GuildBuildingList.base,}};

static void InitDefaultsGuildService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GuildService_default_instance_;
    new (ptr) ::sg::GuildService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GuildService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GuildService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGuildService}, {
      &protobuf_Guild_2eproto::scc_info_GuildService_GuildRequest.base,
      &protobuf_Guild_2eproto::scc_info_GuildService_GuildResponse.base,}};

static void InitDefaultsGameGuildTrackNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameGuildTrackNotify_default_instance_;
    new (ptr) ::sg::GameGuildTrackNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameGuildTrackNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GameGuildTrackNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGameGuildTrackNotify}, {
      &protobuf_Guild_2eproto::scc_info_GuildTrack.base,
      &protobuf_Guild_2eproto::scc_info_GuildData.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GuildStoreItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildStoreItemList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildBuilding.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildBuildingList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildUserData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildUserDataList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildDataList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildSignin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildSigninList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildTrack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildTrackList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DonateItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DonateItemList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildService_GuildRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildService_GuildResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GuildService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameGuildTrackNotify.base);
}

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildStoreItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildStoreItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildStoreItem, item_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildStoreItem, item_num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildStoreItemList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildStoreItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildStoreItemList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuilding, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuilding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuilding, building_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuilding, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuilding, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuilding, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuilding, starttime_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuildingList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuildingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildBuildingList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, role_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, role_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, role_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, role_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, role_portrait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, role_portrait_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, role_force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, optime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, is_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, donation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserData, donation_today_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  13,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserDataList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildUserDataList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, population_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, fund_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, announcement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, badge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, accept_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, join_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, join_force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, shopping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, member_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildData, join_list_),
  5,
  0,
  6,
  8,
  7,
  1,
  14,
  2,
  9,
  10,
  11,
  12,
  13,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildDataList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildDataList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildSignin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildSignin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildSignin, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildSignin, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildSignin, drop_str_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildSigninList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildSigninList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildSigninList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, guildid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, announcement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, target_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, target_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, target_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, donation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, building_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, building_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrack, optime_),
  4,
  0,
  5,
  6,
  1,
  2,
  7,
  3,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrackList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildTrackList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DonateItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DonateItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DonateItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DonateItem, num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DonateItemList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DonateItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DonateItemList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, guildid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, announcement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, user_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, user_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, donate_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, badge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, accept_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, join_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, join_force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, signin_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildRequest, building_type_),
  12,
  4,
  0,
  1,
  6,
  5,
  3,
  2,
  7,
  8,
  10,
  11,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, guild_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, track_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, self_joinning_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, signin_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, signin_drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, last_quit_optime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, quit_join_cd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, store_item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, donate_drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService_GuildResponse, building_list_),
  7,
  0,
  1,
  ~0u,
  2,
  3,
  9,
  8,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GuildService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameGuildTrackNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameGuildTrackNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameGuildTrackNotify, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameGuildTrackNotify, guild_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::sg::GuildStoreItem)},
  { 9, 15, sizeof(::sg::GuildStoreItemList)},
  { 16, 26, sizeof(::sg::GuildBuilding)},
  { 31, 37, sizeof(::sg::GuildBuildingList)},
  { 38, 57, sizeof(::sg::GuildUserData)},
  { 71, 77, sizeof(::sg::GuildUserDataList)},
  { 78, 98, sizeof(::sg::GuildData)},
  { 113, 119, sizeof(::sg::GuildDataList)},
  { 120, 128, sizeof(::sg::GuildSignin)},
  { 131, 137, sizeof(::sg::GuildSigninList)},
  { 138, 156, sizeof(::sg::GuildTrack)},
  { 169, 175, sizeof(::sg::GuildTrackList)},
  { 176, 183, sizeof(::sg::DonateItem)},
  { 185, 191, sizeof(::sg::DonateItemList)},
  { 192, 210, sizeof(::sg::GuildService_GuildRequest)},
  { 223, 239, sizeof(::sg::GuildService_GuildResponse)},
  { 250, 257, sizeof(::sg::GuildService)},
  { 259, 266, sizeof(::sg::GameGuildTrackNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildStoreItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildStoreItemList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildBuilding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildBuildingList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildUserData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildUserDataList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildDataList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildSignin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildSigninList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildTrack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildTrackList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DonateItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DonateItemList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildService_GuildRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildService_GuildResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GuildService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameGuildTrackNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Guild.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013Guild.proto\022\002sg\032\020BaseStruct.proto\"7\n\016G"
      "uildStoreItem\022\023\n\013item_typeid\030\001 \002(\004\022\020\n\010it"
      "em_num\030\002 \002(\005\"6\n\022GuildStoreItemList\022 \n\004li"
      "st\030\001 \003(\0132\022.sg.GuildStoreItem\"\354\001\n\rGuildBu"
      "ilding\022\025\n\rbuilding_type\030\001 \002(\005\022\r\n\005level\030\002"
      " \002(\005\022/\n\005state\030\003 \002(\0162 .sg.GuildBuilding.B"
      "UILDING_STATE\022\017\n\007seconds\030\004 \002(\005\022\021\n\tstartt"
      "ime\030\005 \002(\020\"/\n\rBUILDING_TYPE\022\010\n\004TECH\020\001\022\n\n\006"
      "SQUARE\020\002\022\010\n\004SHOP\020\003\"/\n\016BUILDING_STATE\022\010\n\004"
      "IDLE\020\000\022\010\n\004BUSY\020\001\022\t\n\005READY\020\002\"4\n\021GuildBuil"
      "dingList\022\037\n\004list\030\001 \003(\0132\021.sg.GuildBuildin"
      "g\"\310\002\n\rGuildUserData\022\014\n\004uuid\030\001 \002(\004\022\021\n\trol"
      "e_nick\030\002 \002(\014\022\022\n\nrole_level\030\003 \002(\005\022\020\n\010role"
      "_exp\030\004 \002(\005\022\021\n\trole_rank\030\005 \002(\005\022\025\n\rrole_po"
      "rtrait\030\006 \002(\005\022\033\n\023role_portrait_frame\030\007 \002("
      "\005\022\022\n\nrole_force\030\010 \002(\005\022#\n\005state\030\t \002(\0162\024.s"
      "g.GUILD_USER_STATE\022\016\n\006optime\030\013 \002(\020\022\021\n\tis"
      "_online\030\014 \002(\010\022#\n\005title\030\025 \002(\0162\024.sg.GUILD_"
      "USER_TITLE\022\020\n\010donation\030\026 \002(\005\022\026\n\016donation"
      "_today\030\027 \001(\005\"4\n\021GuildUserDataList\022\037\n\004lis"
      "t\030\001 \003(\0132\021.sg.GuildUserData\"\345\002\n\tGuildData"
      "\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\r\n\005level\030\003 \002("
      "\005\022\022\n\npopulation\030\004 \002(\005\022\014\n\004fund\030\005 \002(\004\022\024\n\014a"
      "nnouncement\030\006 \002(\014\022\036\n\005state\030\007 \002(\0162\017.sg.GU"
      "ILD_STATE\022\r\n\005badge\030\010 \002(\014\022*\n\013accept_type\030"
      "\013 \001(\0162\025.sg.GUILD_ACCEPT_TYPE\022\022\n\njoin_lev"
      "el\030\014 \001(\005\022\022\n\njoin_force\030\r \001(\005\022\020\n\010shopping"
      "\030\016 \001(\010\022\014\n\004chat\030\017 \001(\010\022*\n\013member_list\030\025 \001("
      "\0132\025.sg.GuildUserDataList\022(\n\tjoin_list\030\026 "
      "\001(\0132\025.sg.GuildUserDataList\",\n\rGuildDataL"
      "ist\022\033\n\004list\030\001 \003(\0132\r.sg.GuildData\"\204\001\n\013Gui"
      "ldSignin\022\014\n\004type\030\001 \002(\005\022$\n\005state\030\002 \002(\0162\025."
      "sg.GuildSignin.STATE\022\020\n\010drop_str\030\003 \001(\014\"/"
      "\n\005STATE\022\016\n\nNOT_SIGNIN\020\000\022\n\n\006SIGNIN\020\001\022\n\n\006A"
      "CCEPT\020\002\"0\n\017GuildSigninList\022\035\n\004list\030\001 \003(\013"
      "2\017.sg.GuildSignin\"\266\003\n\nGuildTrack\022\014\n\004uuid"
      "\030\001 \002(\004\022\014\n\004nick\030\002 \002(\014\022\023\n\013action_type\030\003 \002("
      "\005\022\017\n\007guildid\030\013 \001(\005\022\014\n\004name\030\014 \001(\014\022\024\n\014anno"
      "uncement\030\r \001(\014\022\023\n\013target_uuid\030\016 \001(\004\022\023\n\013t"
      "arget_nick\030\017 \001(\014\022\024\n\014target_title\030\020 \001(\005\022\020"
      "\n\010donation\030\021 \001(\005\022\025\n\rbuilding_type\030\022 \001(\005\022"
      "\026\n\016building_level\030\023 \001(\005\022\016\n\006optime\030\025 \001(\020\""
      "\260\001\n\021TRACK_ACTION_TYPE\022\010\n\004JOIN\020\001\022\010\n\004QUIT\020"
      "\002\022\n\n\006DONATE\020\003\022\n\n\006ACCEPT\020\013\022\n\n\006REJECT\020\014\022\010\n"
      "\004KICK\020\r\022\013\n\007APPOINT\020\016\022\025\n\021SELECT_NEW_LEADE"
      "R\020\017\022\032\n\026BUILDING_UPGRADE_START\020\025\022\031\n\025BUILD"
      "ING_UPGRADE_OVER\020\026\".\n\016GuildTrackList\022\034\n\004"
      "list\030\001 \003(\0132\016.sg.GuildTrack\"%\n\nDonateItem"
      "\022\n\n\002id\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\".\n\016DonateItemL"
      "ist\022\034\n\004list\030\001 \003(\0132\016.sg.DonateItem\"\222\t\n\014Gu"
      "ildService\022*\n\003req\030\001 \001(\0132\035.sg.GuildServic"
      "e.GuildRequest\022,\n\004resp\030\002 \001(\0132\036.sg.GuildS"
      "ervice.GuildResponse\032\317\002\n\014GuildRequest\022+\n"
      "\003cmd\030\001 \002(\0162\036.sg.GuildService.GUILD_COMMA"
      "ND\022\017\n\007guildid\030\002 \001(\005\022\014\n\004name\030\003 \001(\014\022\024\n\014ann"
      "ouncement\030\004 \001(\014\022\021\n\tuser_uuid\030\005 \001(\004\022\022\n\nus"
      "er_title\030\006 \001(\005\022\'\n\013donate_list\030\007 \001(\0132\022.sg"
      ".DonateItemList\022\r\n\005badge\030\010 \001(\014\022*\n\013accept"
      "_type\030\013 \001(\0162\025.sg.GUILD_ACCEPT_TYPE\022\022\n\njo"
      "in_level\030\014 \001(\005\022\022\n\njoin_force\030\r \001(\005\022\023\n\013si"
      "gnin_type\030\025 \001(\005\022\025\n\rbuilding_type\030\037 \001(\005\032\205"
      "\003\n\rGuildResponse\022\016\n\006result\030\001 \002(\005\022%\n\nguil"
      "d_list\030\002 \001(\0132\021.sg.GuildDataList\022&\n\ntrack"
      "_list\030\003 \001(\0132\022.sg.GuildTrackList\022\032\n\022self_"
      "joinning_list\030\004 \003(\005\022(\n\013signin_list\030\013 \001(\013"
      "2\023.sg.GuildSigninList\022\037\n\013signin_drop\030\014 \001"
      "(\0132\n.sg.Reward\022\030\n\020last_quit_optime\030\r \001(\020"
      "\022\024\n\014quit_join_cd\030\016 \001(\005\022/\n\017store_item_lis"
      "t\030\017 \001(\0132\026.sg.GuildStoreItemList\022\037\n\013donat"
      "e_drop\030\020 \001(\0132\n.sg.Reward\022,\n\rbuilding_lis"
      "t\030\021 \001(\0132\025.sg.GuildBuildingList\"\315\002\n\rGUILD"
      "_COMMAND\022\n\n\006CREATE\020\001\022\013\n\007UPGRADE\020\002\022\n\n\006MOD"
      "IFY\020\003\022\013\n\007DISBAND\020\004\022\026\n\022REFRESH_CANDIDATES"
      "\020\005\022\010\n\004JOIN\020\013\022\010\n\004QUIT\020\014\022\n\n\006DONATE\020\r\022\021\n\rMA"
      "NAGE_ACCEPT\020\025\022\021\n\rMANAGE_REJECT\020\026\022\017\n\013MANA"
      "GE_KICK\020\027\022\022\n\016MANAGE_APPOINT\020\030\022\r\n\tQUERY_A"
      "LL\020\037\022\r\n\tQUERY_ONE\020 \022\017\n\013QUERY_TRACK\020!\022\020\n\014"
      "QUERY_SIGNIN\020)\022\021\n\rACCEPT_SIGNIN\020*\022\017\n\013QUE"
      "RY_STORE\0203\022\022\n\016QUERY_BUILDING\020=\022\016\n\nBUILD_"
      "ONCE\020>\"S\n\024GameGuildTrackNotify\022\035\n\005track\030"
      "\001 \002(\0132\016.sg.GuildTrack\022\034\n\005guild\030\002 \001(\0132\r.s"
      "g.GuildData*F\n\013GUILD_STATE\022\021\n\rGUILD_PREP"
      "ARE\020\001\022\017\n\013GUILD_READY\020\002\022\023\n\017GUILD_DISBANDE"
      "D\020\003*s\n\021GUILD_ACCEPT_TYPE\022\035\n\031GUILD_ACCEPT"
      "_TYPE_DISABLE\020\000\022!\n\035GUILD_ACCEPT_TYPE_AUT"
      "O_ACCEPT\020\001\022\034\n\030GUILD_ACCEPT_TYPE_MANUAL\020\002"
      "*\206\002\n\020GUILD_USER_TITLE\022\031\n\025GUILD_USER_TITL"
      "E_NONE\020\000\022\037\n\033GUILD_USER_TITLE_APPRENTICE\020"
      "\001\022\032\n\026GUILD_USER_TITLE_ELITE\020\002\022\033\n\027GUILD_U"
      "SER_TITLE_EXPERT\020\003\022\033\n\027GUILD_USER_TITLE_M"
      "ASTER\020\004\022!\n\035GUILD_USER_TITLE_GRAND_MASTER"
      "\020\005\022 \n\034GUILD_USER_TITLE_VICE_LEADER\020\013\022\033\n\027"
      "GUILD_USER_TITLE_LEADER\020\014*\221\001\n\020GUILD_USER"
      "_STATE\022\'\n\032GUILD_USER_STATE_TO_DELETE\020\377\377\377"
      "\377\377\377\377\377\377\001\022\034\n\030GUILD_USER_STATE_FREEMAN\020\000\022\035\n"
      "\031GUILD_USER_STATE_JOINNING\020\001\022\027\n\023GUILD_US"
      "ER_STATE_OK\020\002*l\n\021GUILD_SIGNIN_TYPE\022\032\n\026GU"
      "ILD_SIGNIN_TYPE_GOLD\020\001\022\035\n\031GUILD_SIGNIN_T"
      "YPE_DIAMOND\020\002\022\034\n\030GUILD_SIGNIN_TYPE_LUXUR"
      "Y\020\003B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3968);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Guild.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Guild_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* GuildBuilding_BUILDING_TYPE_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[0];
}
bool GuildBuilding_BUILDING_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GuildBuilding_BUILDING_TYPE GuildBuilding::TECH;
const GuildBuilding_BUILDING_TYPE GuildBuilding::SQUARE;
const GuildBuilding_BUILDING_TYPE GuildBuilding::SHOP;
const GuildBuilding_BUILDING_TYPE GuildBuilding::BUILDING_TYPE_MIN;
const GuildBuilding_BUILDING_TYPE GuildBuilding::BUILDING_TYPE_MAX;
const int GuildBuilding::BUILDING_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GuildBuilding_BUILDING_STATE_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[1];
}
bool GuildBuilding_BUILDING_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GuildBuilding_BUILDING_STATE GuildBuilding::IDLE;
const GuildBuilding_BUILDING_STATE GuildBuilding::BUSY;
const GuildBuilding_BUILDING_STATE GuildBuilding::READY;
const GuildBuilding_BUILDING_STATE GuildBuilding::BUILDING_STATE_MIN;
const GuildBuilding_BUILDING_STATE GuildBuilding::BUILDING_STATE_MAX;
const int GuildBuilding::BUILDING_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GuildSignin_STATE_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[2];
}
bool GuildSignin_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GuildSignin_STATE GuildSignin::NOT_SIGNIN;
const GuildSignin_STATE GuildSignin::SIGNIN;
const GuildSignin_STATE GuildSignin::ACCEPT;
const GuildSignin_STATE GuildSignin::STATE_MIN;
const GuildSignin_STATE GuildSignin::STATE_MAX;
const int GuildSignin::STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GuildTrack_TRACK_ACTION_TYPE_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[3];
}
bool GuildTrack_TRACK_ACTION_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::JOIN;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::QUIT;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::DONATE;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::ACCEPT;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::REJECT;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::KICK;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::APPOINT;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::SELECT_NEW_LEADER;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::BUILDING_UPGRADE_START;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::BUILDING_UPGRADE_OVER;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::TRACK_ACTION_TYPE_MIN;
const GuildTrack_TRACK_ACTION_TYPE GuildTrack::TRACK_ACTION_TYPE_MAX;
const int GuildTrack::TRACK_ACTION_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GuildService_GUILD_COMMAND_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[4];
}
bool GuildService_GUILD_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 11:
    case 12:
    case 13:
    case 21:
    case 22:
    case 23:
    case 24:
    case 31:
    case 32:
    case 33:
    case 41:
    case 42:
    case 51:
    case 61:
    case 62:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GuildService_GUILD_COMMAND GuildService::CREATE;
const GuildService_GUILD_COMMAND GuildService::UPGRADE;
const GuildService_GUILD_COMMAND GuildService::MODIFY;
const GuildService_GUILD_COMMAND GuildService::DISBAND;
const GuildService_GUILD_COMMAND GuildService::REFRESH_CANDIDATES;
const GuildService_GUILD_COMMAND GuildService::JOIN;
const GuildService_GUILD_COMMAND GuildService::QUIT;
const GuildService_GUILD_COMMAND GuildService::DONATE;
const GuildService_GUILD_COMMAND GuildService::MANAGE_ACCEPT;
const GuildService_GUILD_COMMAND GuildService::MANAGE_REJECT;
const GuildService_GUILD_COMMAND GuildService::MANAGE_KICK;
const GuildService_GUILD_COMMAND GuildService::MANAGE_APPOINT;
const GuildService_GUILD_COMMAND GuildService::QUERY_ALL;
const GuildService_GUILD_COMMAND GuildService::QUERY_ONE;
const GuildService_GUILD_COMMAND GuildService::QUERY_TRACK;
const GuildService_GUILD_COMMAND GuildService::QUERY_SIGNIN;
const GuildService_GUILD_COMMAND GuildService::ACCEPT_SIGNIN;
const GuildService_GUILD_COMMAND GuildService::QUERY_STORE;
const GuildService_GUILD_COMMAND GuildService::QUERY_BUILDING;
const GuildService_GUILD_COMMAND GuildService::BUILD_ONCE;
const GuildService_GUILD_COMMAND GuildService::GUILD_COMMAND_MIN;
const GuildService_GUILD_COMMAND GuildService::GUILD_COMMAND_MAX;
const int GuildService::GUILD_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GUILD_STATE_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[5];
}
bool GUILD_STATE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GUILD_ACCEPT_TYPE_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[6];
}
bool GUILD_ACCEPT_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GUILD_USER_TITLE_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[7];
}
bool GUILD_USER_TITLE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GUILD_USER_STATE_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[8];
}
bool GUILD_USER_STATE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GUILD_SIGNIN_TYPE_descriptor() {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Guild_2eproto::file_level_enum_descriptors[9];
}
bool GUILD_SIGNIN_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GuildStoreItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildStoreItem::kItemTypeidFieldNumber;
const int GuildStoreItem::kItemNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildStoreItem::GuildStoreItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildStoreItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildStoreItem)
}
GuildStoreItem::GuildStoreItem(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildStoreItem.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildStoreItem)
}
GuildStoreItem::GuildStoreItem(const GuildStoreItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_typeid_, &from.item_typeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_num_) -
    reinterpret_cast<char*>(&item_typeid_)) + sizeof(item_num_));
  // @@protoc_insertion_point(copy_constructor:sg.GuildStoreItem)
}

void GuildStoreItem::SharedCtor() {
  ::memset(&item_typeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_num_) -
      reinterpret_cast<char*>(&item_typeid_)) + sizeof(item_num_));
}

GuildStoreItem::~GuildStoreItem() {
  // @@protoc_insertion_point(destructor:sg.GuildStoreItem)
  SharedDtor();
}

void GuildStoreItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GuildStoreItem::ArenaDtor(void* object) {
  GuildStoreItem* _this = reinterpret_cast< GuildStoreItem* >(object);
  (void)_this;
}
void GuildStoreItem::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildStoreItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildStoreItem::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildStoreItem& GuildStoreItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildStoreItem.base);
  return *internal_default_instance();
}


void GuildStoreItem::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildStoreItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&item_typeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_num_) -
        reinterpret_cast<char*>(&item_typeid_)) + sizeof(item_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildStoreItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildStoreItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 item_typeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_item_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 item_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_item_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildStoreItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildStoreItem)
  return false;
#undef DO_
}

void GuildStoreItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildStoreItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 item_typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_typeid(), output);
  }

  // required int32 item_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildStoreItem)
}

::google::protobuf::uint8* GuildStoreItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildStoreItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 item_typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_typeid(), target);
  }

  // required int32 item_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildStoreItem)
  return target;
}

size_t GuildStoreItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.GuildStoreItem)
  size_t total_size = 0;

  if (has_item_typeid()) {
    // required uint64 item_typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_typeid());
  }

  if (has_item_num()) {
    // required int32 item_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_num());
  }

  return total_size;
}
size_t GuildStoreItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildStoreItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 item_typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_typeid());

    // required int32 item_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildStoreItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildStoreItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildStoreItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildStoreItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildStoreItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildStoreItem)
    MergeFrom(*source);
  }
}

void GuildStoreItem::MergeFrom(const GuildStoreItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildStoreItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_typeid_ = from.item_typeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_num_ = from.item_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildStoreItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildStoreItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildStoreItem::CopyFrom(const GuildStoreItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildStoreItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildStoreItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GuildStoreItem::Swap(GuildStoreItem* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildStoreItem* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildStoreItem::UnsafeArenaSwap(GuildStoreItem* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildStoreItem::InternalSwap(GuildStoreItem* other) {
  using std::swap;
  swap(item_typeid_, other->item_typeid_);
  swap(item_num_, other->item_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildStoreItem::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildStoreItemList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildStoreItemList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildStoreItemList::GuildStoreItemList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildStoreItemList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildStoreItemList)
}
GuildStoreItemList::GuildStoreItemList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildStoreItemList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildStoreItemList)
}
GuildStoreItemList::GuildStoreItemList(const GuildStoreItemList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.GuildStoreItemList)
}

void GuildStoreItemList::SharedCtor() {
}

GuildStoreItemList::~GuildStoreItemList() {
  // @@protoc_insertion_point(destructor:sg.GuildStoreItemList)
  SharedDtor();
}

void GuildStoreItemList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GuildStoreItemList::ArenaDtor(void* object) {
  GuildStoreItemList* _this = reinterpret_cast< GuildStoreItemList* >(object);
  (void)_this;
}
void GuildStoreItemList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildStoreItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildStoreItemList::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildStoreItemList& GuildStoreItemList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildStoreItemList.base);
  return *internal_default_instance();
}


void GuildStoreItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildStoreItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildStoreItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildStoreItemList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.GuildStoreItem list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildStoreItemList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildStoreItemList)
  return false;
#undef DO_
}

void GuildStoreItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildStoreItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildStoreItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildStoreItemList)
}

::google::protobuf::uint8* GuildStoreItemList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildStoreItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildStoreItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildStoreItemList)
  return target;
}

size_t GuildStoreItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildStoreItemList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.GuildStoreItem list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildStoreItemList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildStoreItemList)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildStoreItemList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildStoreItemList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildStoreItemList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildStoreItemList)
    MergeFrom(*source);
  }
}

void GuildStoreItemList::MergeFrom(const GuildStoreItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildStoreItemList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void GuildStoreItemList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildStoreItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildStoreItemList::CopyFrom(const GuildStoreItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildStoreItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildStoreItemList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GuildStoreItemList::Swap(GuildStoreItemList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildStoreItemList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildStoreItemList::UnsafeArenaSwap(GuildStoreItemList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildStoreItemList::InternalSwap(GuildStoreItemList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildStoreItemList::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildBuilding::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildBuilding::kBuildingTypeFieldNumber;
const int GuildBuilding::kLevelFieldNumber;
const int GuildBuilding::kStateFieldNumber;
const int GuildBuilding::kSecondsFieldNumber;
const int GuildBuilding::kStarttimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildBuilding::GuildBuilding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildBuilding.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildBuilding)
}
GuildBuilding::GuildBuilding(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildBuilding.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildBuilding)
}
GuildBuilding::GuildBuilding(const GuildBuilding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&building_type_, &from.building_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&building_type_)) + sizeof(starttime_));
  // @@protoc_insertion_point(copy_constructor:sg.GuildBuilding)
}

void GuildBuilding::SharedCtor() {
  ::memset(&building_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&building_type_)) + sizeof(starttime_));
}

GuildBuilding::~GuildBuilding() {
  // @@protoc_insertion_point(destructor:sg.GuildBuilding)
  SharedDtor();
}

void GuildBuilding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GuildBuilding::ArenaDtor(void* object) {
  GuildBuilding* _this = reinterpret_cast< GuildBuilding* >(object);
  (void)_this;
}
void GuildBuilding::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildBuilding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildBuilding::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildBuilding& GuildBuilding::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildBuilding.base);
  return *internal_default_instance();
}


void GuildBuilding::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildBuilding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&building_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&starttime_) -
        reinterpret_cast<char*>(&building_type_)) + sizeof(starttime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildBuilding)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 building_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_building_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.GuildBuilding.BUILDING_STATE state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GuildBuilding_BUILDING_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::GuildBuilding_BUILDING_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 starttime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildBuilding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildBuilding)
  return false;
#undef DO_
}

void GuildBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildBuilding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 building_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->building_type(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required .sg.GuildBuilding.BUILDING_STATE state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required int32 seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seconds(), output);
  }

  // required sfixed64 starttime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->starttime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildBuilding)
}

::google::protobuf::uint8* GuildBuilding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildBuilding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 building_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->building_type(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required .sg.GuildBuilding.BUILDING_STATE state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required int32 seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seconds(), target);
  }

  // required sfixed64 starttime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->starttime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildBuilding)
  return target;
}

size_t GuildBuilding::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.GuildBuilding)
  size_t total_size = 0;

  if (has_building_type()) {
    // required int32 building_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->building_type());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_state()) {
    // required .sg.GuildBuilding.BUILDING_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_seconds()) {
    // required int32 seconds = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  if (has_starttime()) {
    // required sfixed64 starttime = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t GuildBuilding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildBuilding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 building_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->building_type());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required .sg.GuildBuilding.BUILDING_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required int32 seconds = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());

    // required sfixed64 starttime = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildBuilding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildBuilding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildBuilding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildBuilding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildBuilding)
    MergeFrom(*source);
  }
}

void GuildBuilding::MergeFrom(const GuildBuilding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      building_type_ = from.building_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      starttime_ = from.starttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildBuilding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBuilding::CopyFrom(const GuildBuilding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBuilding::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void GuildBuilding::Swap(GuildBuilding* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildBuilding* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildBuilding::UnsafeArenaSwap(GuildBuilding* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildBuilding::InternalSwap(GuildBuilding* other) {
  using std::swap;
  swap(building_type_, other->building_type_);
  swap(level_, other->level_);
  swap(state_, other->state_);
  swap(seconds_, other->seconds_);
  swap(starttime_, other->starttime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildBuilding::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildBuildingList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildBuildingList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildBuildingList::GuildBuildingList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildBuildingList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildBuildingList)
}
GuildBuildingList::GuildBuildingList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildBuildingList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildBuildingList)
}
GuildBuildingList::GuildBuildingList(const GuildBuildingList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.GuildBuildingList)
}

void GuildBuildingList::SharedCtor() {
}

GuildBuildingList::~GuildBuildingList() {
  // @@protoc_insertion_point(destructor:sg.GuildBuildingList)
  SharedDtor();
}

void GuildBuildingList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GuildBuildingList::ArenaDtor(void* object) {
  GuildBuildingList* _this = reinterpret_cast< GuildBuildingList* >(object);
  (void)_this;
}
void GuildBuildingList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildBuildingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildBuildingList::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildBuildingList& GuildBuildingList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildBuildingList.base);
  return *internal_default_instance();
}


void GuildBuildingList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildBuildingList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildBuildingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildBuildingList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.GuildBuilding list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildBuildingList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildBuildingList)
  return false;
#undef DO_
}

void GuildBuildingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildBuildingList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildBuilding list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildBuildingList)
}

::google::protobuf::uint8* GuildBuildingList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildBuildingList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildBuilding list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildBuildingList)
  return target;
}

size_t GuildBuildingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildBuildingList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.GuildBuilding list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildBuildingList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildBuildingList)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildBuildingList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildBuildingList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildBuildingList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildBuildingList)
    MergeFrom(*source);
  }
}

void GuildBuildingList::MergeFrom(const GuildBuildingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildBuildingList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void GuildBuildingList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildBuildingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBuildingList::CopyFrom(const GuildBuildingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildBuildingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBuildingList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GuildBuildingList::Swap(GuildBuildingList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildBuildingList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildBuildingList::UnsafeArenaSwap(GuildBuildingList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildBuildingList::InternalSwap(GuildBuildingList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildBuildingList::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildUserData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildUserData::kUuidFieldNumber;
const int GuildUserData::kRoleNickFieldNumber;
const int GuildUserData::kRoleLevelFieldNumber;
const int GuildUserData::kRoleExpFieldNumber;
const int GuildUserData::kRoleRankFieldNumber;
const int GuildUserData::kRolePortraitFieldNumber;
const int GuildUserData::kRolePortraitFrameFieldNumber;
const int GuildUserData::kRoleForceFieldNumber;
const int GuildUserData::kStateFieldNumber;
const int GuildUserData::kOptimeFieldNumber;
const int GuildUserData::kIsOnlineFieldNumber;
const int GuildUserData::kTitleFieldNumber;
const int GuildUserData::kDonationFieldNumber;
const int GuildUserData::kDonationTodayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildUserData::GuildUserData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildUserData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildUserData)
}
GuildUserData::GuildUserData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildUserData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildUserData)
}
GuildUserData::GuildUserData(const GuildUserData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_role_nick()) {
    role_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_nick(),
      GetArenaNoVirtual());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.GuildUserData)
}

void GuildUserData::SharedCtor() {
  role_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&donation_today_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(donation_today_));
  state_ = -1;
}

GuildUserData::~GuildUserData() {
  // @@protoc_insertion_point(destructor:sg.GuildUserData)
  SharedDtor();
}

void GuildUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  role_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GuildUserData::ArenaDtor(void* object) {
  GuildUserData* _this = reinterpret_cast< GuildUserData* >(object);
  (void)_this;
}
void GuildUserData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildUserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildUserData::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildUserData& GuildUserData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildUserData.base);
  return *internal_default_instance();
}


void GuildUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    role_nick_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_force_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(role_force_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&optime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&donation_today_) -
        reinterpret_cast<char*>(&optime_)) + sizeof(donation_today_));
    state_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildUserData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes role_nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_role_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 role_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_role_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 role_exp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_role_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 role_rank = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_role_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 role_portrait = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_role_portrait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_portrait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 role_portrait_frame = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_role_portrait_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_portrait_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 role_force = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_role_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.GUILD_USER_STATE state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GUILD_USER_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::GUILD_USER_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_online = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.GUILD_USER_TITLE title = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GUILD_USER_TITLE_IsValid(value)) {
            set_title(static_cast< ::sg::GUILD_USER_TITLE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 donation = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_donation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 donation_today = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_donation_today();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_today_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildUserData)
  return false;
#undef DO_
}

void GuildUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required bytes role_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->role_nick(), output);
  }

  // required int32 role_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_level(), output);
  }

  // required int32 role_exp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_exp(), output);
  }

  // required int32 role_rank = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_rank(), output);
  }

  // required int32 role_portrait = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->role_portrait(), output);
  }

  // required int32 role_portrait_frame = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_portrait_frame(), output);
  }

  // required int32 role_force = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->role_force(), output);
  }

  // required .sg.GUILD_USER_STATE state = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->state(), output);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  // required bool is_online = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_online(), output);
  }

  // required .sg.GUILD_USER_TITLE title = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->title(), output);
  }

  // required int32 donation = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->donation(), output);
  }

  // optional int32 donation_today = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->donation_today(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildUserData)
}

::google::protobuf::uint8* GuildUserData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // required bytes role_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->role_nick(), target);
  }

  // required int32 role_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_level(), target);
  }

  // required int32 role_exp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_exp(), target);
  }

  // required int32 role_rank = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_rank(), target);
  }

  // required int32 role_portrait = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->role_portrait(), target);
  }

  // required int32 role_portrait_frame = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_portrait_frame(), target);
  }

  // required int32 role_force = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->role_force(), target);
  }

  // required .sg.GUILD_USER_STATE state = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->state(), target);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  // required bool is_online = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_online(), target);
  }

  // required .sg.GUILD_USER_TITLE title = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->title(), target);
  }

  // required int32 donation = 22;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->donation(), target);
  }

  // optional int32 donation_today = 23;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->donation_today(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildUserData)
  return target;
}

size_t GuildUserData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.GuildUserData)
  size_t total_size = 0;

  if (has_role_nick()) {
    // required bytes role_nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->role_nick());
  }

  if (has_uuid()) {
    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  if (has_role_level()) {
    // required int32 role_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_level());
  }

  if (has_role_exp()) {
    // required int32 role_exp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_exp());
  }

  if (has_role_rank()) {
    // required int32 role_rank = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_rank());
  }

  if (has_role_portrait()) {
    // required int32 role_portrait = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_portrait());
  }

  if (has_role_portrait_frame()) {
    // required int32 role_portrait_frame = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_portrait_frame());
  }

  if (has_role_force()) {
    // required int32 role_force = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_force());
  }

  if (has_optime()) {
    // required sfixed64 optime = 11;
    total_size += 1 + 8;
  }

  if (has_is_online()) {
    // required bool is_online = 12;
    total_size += 1 + 1;
  }

  if (has_title()) {
    // required .sg.GUILD_USER_TITLE title = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->title());
  }

  if (has_donation()) {
    // required int32 donation = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->donation());
  }

  if (has_state()) {
    // required .sg.GUILD_USER_STATE state = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t GuildUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildUserData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00002fff) ^ 0x00002fff) == 0) {  // All required fields are present.
    // required bytes role_nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->role_nick());

    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());

    // required int32 role_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_level());

    // required int32 role_exp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_exp());

    // required int32 role_rank = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_rank());

    // required int32 role_portrait = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_portrait());

    // required int32 role_portrait_frame = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_portrait_frame());

    // required int32 role_force = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_force());

    // required sfixed64 optime = 11;
    total_size += 1 + 8;

    // required bool is_online = 12;
    total_size += 1 + 1;

    // required .sg.GUILD_USER_TITLE title = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->title());

    // required int32 donation = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->donation());

    // required .sg.GUILD_USER_STATE state = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 donation_today = 23;
  if (has_donation_today()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->donation_today());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildUserData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildUserData)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildUserData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildUserData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildUserData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildUserData)
    MergeFrom(*source);
  }
}

void GuildUserData::MergeFrom(const GuildUserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildUserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_role_nick(from.role_nick());
    }
    if (cached_has_bits & 0x00000002u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_level_ = from.role_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      role_exp_ = from.role_exp_;
    }
    if (cached_has_bits & 0x00000010u) {
      role_rank_ = from.role_rank_;
    }
    if (cached_has_bits & 0x00000020u) {
      role_portrait_ = from.role_portrait_;
    }
    if (cached_has_bits & 0x00000040u) {
      role_portrait_frame_ = from.role_portrait_frame_;
    }
    if (cached_has_bits & 0x00000080u) {
      role_force_ = from.role_force_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      optime_ = from.optime_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_online_ = from.is_online_;
    }
    if (cached_has_bits & 0x00000400u) {
      title_ = from.title_;
    }
    if (cached_has_bits & 0x00000800u) {
      donation_ = from.donation_;
    }
    if (cached_has_bits & 0x00001000u) {
      donation_today_ = from.donation_today_;
    }
    if (cached_has_bits & 0x00002000u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildUserData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildUserData::CopyFrom(const GuildUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildUserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002fff) != 0x00002fff) return false;
  return true;
}

void GuildUserData::Swap(GuildUserData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildUserData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildUserData::UnsafeArenaSwap(GuildUserData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildUserData::InternalSwap(GuildUserData* other) {
  using std::swap;
  role_nick_.Swap(&other->role_nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uuid_, other->uuid_);
  swap(role_level_, other->role_level_);
  swap(role_exp_, other->role_exp_);
  swap(role_rank_, other->role_rank_);
  swap(role_portrait_, other->role_portrait_);
  swap(role_portrait_frame_, other->role_portrait_frame_);
  swap(role_force_, other->role_force_);
  swap(optime_, other->optime_);
  swap(is_online_, other->is_online_);
  swap(title_, other->title_);
  swap(donation_, other->donation_);
  swap(donation_today_, other->donation_today_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildUserData::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildUserDataList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildUserDataList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildUserDataList::GuildUserDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildUserDataList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildUserDataList)
}
GuildUserDataList::GuildUserDataList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildUserDataList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildUserDataList)
}
GuildUserDataList::GuildUserDataList(const GuildUserDataList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.GuildUserDataList)
}

void GuildUserDataList::SharedCtor() {
}

GuildUserDataList::~GuildUserDataList() {
  // @@protoc_insertion_point(destructor:sg.GuildUserDataList)
  SharedDtor();
}

void GuildUserDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GuildUserDataList::ArenaDtor(void* object) {
  GuildUserDataList* _this = reinterpret_cast< GuildUserDataList* >(object);
  (void)_this;
}
void GuildUserDataList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildUserDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildUserDataList::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildUserDataList& GuildUserDataList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildUserDataList.base);
  return *internal_default_instance();
}


void GuildUserDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildUserDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildUserDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildUserDataList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.GuildUserData list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildUserDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildUserDataList)
  return false;
#undef DO_
}

void GuildUserDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildUserDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildUserData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildUserDataList)
}

::google::protobuf::uint8* GuildUserDataList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildUserDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildUserData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildUserDataList)
  return target;
}

size_t GuildUserDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildUserDataList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.GuildUserData list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildUserDataList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildUserDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildUserDataList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildUserDataList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildUserDataList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildUserDataList)
    MergeFrom(*source);
  }
}

void GuildUserDataList::MergeFrom(const GuildUserDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildUserDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void GuildUserDataList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildUserDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildUserDataList::CopyFrom(const GuildUserDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildUserDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildUserDataList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GuildUserDataList::Swap(GuildUserDataList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildUserDataList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildUserDataList::UnsafeArenaSwap(GuildUserDataList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildUserDataList::InternalSwap(GuildUserDataList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildUserDataList::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildData::InitAsDefaultInstance() {
  ::sg::_GuildData_default_instance_._instance.get_mutable()->member_list_ = const_cast< ::sg::GuildUserDataList*>(
      ::sg::GuildUserDataList::internal_default_instance());
  ::sg::_GuildData_default_instance_._instance.get_mutable()->join_list_ = const_cast< ::sg::GuildUserDataList*>(
      ::sg::GuildUserDataList::internal_default_instance());
}
void GuildData::unsafe_arena_set_allocated_member_list(
    ::sg::GuildUserDataList* member_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete member_list_;
  }
  member_list_ = member_list;
  if (member_list) {
    set_has_member_list();
  } else {
    clear_has_member_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildData.member_list)
}
void GuildData::unsafe_arena_set_allocated_join_list(
    ::sg::GuildUserDataList* join_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete join_list_;
  }
  join_list_ = join_list;
  if (join_list) {
    set_has_join_list();
  } else {
    clear_has_join_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildData.join_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildData::kIdFieldNumber;
const int GuildData::kNameFieldNumber;
const int GuildData::kLevelFieldNumber;
const int GuildData::kPopulationFieldNumber;
const int GuildData::kFundFieldNumber;
const int GuildData::kAnnouncementFieldNumber;
const int GuildData::kStateFieldNumber;
const int GuildData::kBadgeFieldNumber;
const int GuildData::kAcceptTypeFieldNumber;
const int GuildData::kJoinLevelFieldNumber;
const int GuildData::kJoinForceFieldNumber;
const int GuildData::kShoppingFieldNumber;
const int GuildData::kChatFieldNumber;
const int GuildData::kMemberListFieldNumber;
const int GuildData::kJoinListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildData::GuildData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildData)
}
GuildData::GuildData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildData)
}
GuildData::GuildData(const GuildData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement()) {
    announcement_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement(),
      GetArenaNoVirtual());
  }
  badge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_badge()) {
    badge_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.badge(),
      GetArenaNoVirtual());
  }
  if (from.has_member_list()) {
    member_list_ = new ::sg::GuildUserDataList(*from.member_list_);
  } else {
    member_list_ = NULL;
  }
  if (from.has_join_list()) {
    join_list_ = new ::sg::GuildUserDataList(*from.join_list_);
  } else {
    join_list_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.GuildData)
}

void GuildData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  badge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&member_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_) -
      reinterpret_cast<char*>(&member_list_)) + sizeof(chat_));
  state_ = 1;
}

GuildData::~GuildData() {
  // @@protoc_insertion_point(destructor:sg.GuildData)
  SharedDtor();
}

void GuildData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  badge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete member_list_;
  if (this != internal_default_instance()) delete join_list_;
}

void GuildData::ArenaDtor(void* object) {
  GuildData* _this = reinterpret_cast< GuildData* >(object);
  (void)_this;
}
void GuildData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildData::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildData& GuildData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildData.base);
  return *internal_default_instance();
}


void GuildData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      badge_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(member_list_ != NULL);
      member_list_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(join_list_ != NULL);
      join_list_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fund_) -
        reinterpret_cast<char*>(&id_)) + sizeof(fund_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&population_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_) -
        reinterpret_cast<char*>(&population_)) + sizeof(chat_));
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 population = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_population();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &population_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 fund = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_fund();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fund_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes announcement = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_announcement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.GUILD_STATE state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GUILD_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::GUILD_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes badge = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_badge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GUILD_ACCEPT_TYPE accept_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GUILD_ACCEPT_TYPE_IsValid(value)) {
            set_accept_type(static_cast< ::sg::GUILD_ACCEPT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 join_level = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_join_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 join_force = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_join_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shopping = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_shopping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shopping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chat = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GuildUserDataList member_list = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GuildUserDataList join_list = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_join_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildData)
  return false;
#undef DO_
}

void GuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 level = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 population = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->population(), output);
  }

  // required uint64 fund = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fund(), output);
  }

  // required bytes announcement = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->announcement(), output);
  }

  // required .sg.GUILD_STATE state = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  // required bytes badge = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->badge(), output);
  }

  // optional .sg.GUILD_ACCEPT_TYPE accept_type = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->accept_type(), output);
  }

  // optional int32 join_level = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->join_level(), output);
  }

  // optional int32 join_force = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->join_force(), output);
  }

  // optional bool shopping = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->shopping(), output);
  }

  // optional bool chat = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->chat(), output);
  }

  // optional .sg.GuildUserDataList member_list = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_member_list(), output);
  }

  // optional .sg.GuildUserDataList join_list = 22;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_join_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildData)
}

::google::protobuf::uint8* GuildData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 level = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 population = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->population(), target);
  }

  // required uint64 fund = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fund(), target);
  }

  // required bytes announcement = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->announcement(), target);
  }

  // required .sg.GUILD_STATE state = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->state(), target);
  }

  // required bytes badge = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->badge(), target);
  }

  // optional .sg.GUILD_ACCEPT_TYPE accept_type = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->accept_type(), target);
  }

  // optional int32 join_level = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->join_level(), target);
  }

  // optional int32 join_force = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->join_force(), target);
  }

  // optional bool shopping = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->shopping(), target);
  }

  // optional bool chat = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->chat(), target);
  }

  // optional .sg.GuildUserDataList member_list = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_member_list(), deterministic, target);
  }

  // optional .sg.GuildUserDataList join_list = 22;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_join_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildData)
  return target;
}

size_t GuildData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.GuildData)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_announcement()) {
    // required bytes announcement = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->announcement());
  }

  if (has_badge()) {
    // required bytes badge = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->badge());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_level()) {
    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_fund()) {
    // required uint64 fund = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fund());
  }

  if (has_population()) {
    // required int32 population = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->population());
  }

  if (has_state()) {
    // required .sg.GUILD_STATE state = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t GuildData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000041e7) ^ 0x000041e7) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes announcement = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->announcement());

    // required bytes badge = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->badge());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required uint64 fund = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fund());

    // required int32 population = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->population());

    // required .sg.GUILD_STATE state = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional .sg.GuildUserDataList member_list = 21;
    if (has_member_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *member_list_);
    }

    // optional .sg.GuildUserDataList join_list = 22;
    if (has_join_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *join_list_);
    }

  }
  if (_has_bits_[8 / 32] & 15872u) {
    // optional .sg.GUILD_ACCEPT_TYPE accept_type = 11;
    if (has_accept_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->accept_type());
    }

    // optional int32 join_level = 12;
    if (has_join_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->join_level());
    }

    // optional int32 join_force = 13;
    if (has_join_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->join_force());
    }

    // optional bool shopping = 14;
    if (has_shopping()) {
      total_size += 1 + 1;
    }

    // optional bool chat = 15;
    if (has_chat()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildData)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildData)
    MergeFrom(*source);
  }
}

void GuildData::MergeFrom(const GuildData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_announcement(from.announcement());
    }
    if (cached_has_bits & 0x00000004u) {
      set_badge(from.badge());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_member_list()->::sg::GuildUserDataList::MergeFrom(from.member_list());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_join_list()->::sg::GuildUserDataList::MergeFrom(from.join_list());
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000080u) {
      fund_ = from.fund_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      population_ = from.population_;
    }
    if (cached_has_bits & 0x00000200u) {
      accept_type_ = from.accept_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      join_level_ = from.join_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      join_force_ = from.join_force_;
    }
    if (cached_has_bits & 0x00001000u) {
      shopping_ = from.shopping_;
    }
    if (cached_has_bits & 0x00002000u) {
      chat_ = from.chat_;
    }
    if (cached_has_bits & 0x00004000u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildData::CopyFrom(const GuildData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000041e7) != 0x000041e7) return false;
  if (has_member_list()) {
    if (!this->member_list_->IsInitialized()) return false;
  }
  if (has_join_list()) {
    if (!this->join_list_->IsInitialized()) return false;
  }
  return true;
}

void GuildData::Swap(GuildData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildData::UnsafeArenaSwap(GuildData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildData::InternalSwap(GuildData* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  announcement_.Swap(&other->announcement_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  badge_.Swap(&other->badge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(member_list_, other->member_list_);
  swap(join_list_, other->join_list_);
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(fund_, other->fund_);
  swap(population_, other->population_);
  swap(accept_type_, other->accept_type_);
  swap(join_level_, other->join_level_);
  swap(join_force_, other->join_force_);
  swap(shopping_, other->shopping_);
  swap(chat_, other->chat_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildData::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildDataList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildDataList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildDataList::GuildDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildDataList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildDataList)
}
GuildDataList::GuildDataList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildDataList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildDataList)
}
GuildDataList::GuildDataList(const GuildDataList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.GuildDataList)
}

void GuildDataList::SharedCtor() {
}

GuildDataList::~GuildDataList() {
  // @@protoc_insertion_point(destructor:sg.GuildDataList)
  SharedDtor();
}

void GuildDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GuildDataList::ArenaDtor(void* object) {
  GuildDataList* _this = reinterpret_cast< GuildDataList* >(object);
  (void)_this;
}
void GuildDataList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildDataList::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildDataList& GuildDataList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildDataList.base);
  return *internal_default_instance();
}


void GuildDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildDataList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.GuildData list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildDataList)
  return false;
#undef DO_
}

void GuildDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildDataList)
}

::google::protobuf::uint8* GuildDataList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildDataList)
  return target;
}

size_t GuildDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildDataList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.GuildData list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildDataList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildDataList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildDataList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildDataList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildDataList)
    MergeFrom(*source);
  }
}

void GuildDataList::MergeFrom(const GuildDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void GuildDataList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDataList::CopyFrom(const GuildDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDataList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GuildDataList::Swap(GuildDataList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildDataList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildDataList::UnsafeArenaSwap(GuildDataList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildDataList::InternalSwap(GuildDataList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildDataList::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildSignin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildSignin::kTypeFieldNumber;
const int GuildSignin::kStateFieldNumber;
const int GuildSignin::kDropStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildSignin::GuildSignin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildSignin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildSignin)
}
GuildSignin::GuildSignin(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildSignin.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildSignin)
}
GuildSignin::GuildSignin(const GuildSignin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  drop_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop_str()) {
    drop_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_str(),
      GetArenaNoVirtual());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.GuildSignin)
}

void GuildSignin::SharedCtor() {
  drop_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(state_));
}

GuildSignin::~GuildSignin() {
  // @@protoc_insertion_point(destructor:sg.GuildSignin)
  SharedDtor();
}

void GuildSignin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  drop_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GuildSignin::ArenaDtor(void* object) {
  GuildSignin* _this = reinterpret_cast< GuildSignin* >(object);
  (void)_this;
}
void GuildSignin::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildSignin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildSignin::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildSignin& GuildSignin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildSignin.base);
  return *internal_default_instance();
}


void GuildSignin::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildSignin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    drop_str_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&type_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildSignin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildSignin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.GuildSignin.STATE state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GuildSignin_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::GuildSignin_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes drop_str = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildSignin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildSignin)
  return false;
#undef DO_
}

void GuildSignin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildSignin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required .sg.GuildSignin.STATE state = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional bytes drop_str = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->drop_str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildSignin)
}

::google::protobuf::uint8* GuildSignin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildSignin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required .sg.GuildSignin.STATE state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional bytes drop_str = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->drop_str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildSignin)
  return target;
}

size_t GuildSignin::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.GuildSignin)
  size_t total_size = 0;

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_state()) {
    // required .sg.GuildSignin.STATE state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t GuildSignin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildSignin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required .sg.GuildSignin.STATE state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes drop_str = 3;
  if (has_drop_str()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildSignin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildSignin)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildSignin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildSignin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildSignin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildSignin)
    MergeFrom(*source);
  }
}

void GuildSignin::MergeFrom(const GuildSignin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildSignin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_drop_str(from.drop_str());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildSignin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildSignin::CopyFrom(const GuildSignin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildSignin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void GuildSignin::Swap(GuildSignin* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildSignin* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildSignin::UnsafeArenaSwap(GuildSignin* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildSignin::InternalSwap(GuildSignin* other) {
  using std::swap;
  drop_str_.Swap(&other->drop_str_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildSignin::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildSigninList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildSigninList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildSigninList::GuildSigninList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildSigninList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildSigninList)
}
GuildSigninList::GuildSigninList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildSigninList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildSigninList)
}
GuildSigninList::GuildSigninList(const GuildSigninList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.GuildSigninList)
}

void GuildSigninList::SharedCtor() {
}

GuildSigninList::~GuildSigninList() {
  // @@protoc_insertion_point(destructor:sg.GuildSigninList)
  SharedDtor();
}

void GuildSigninList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GuildSigninList::ArenaDtor(void* object) {
  GuildSigninList* _this = reinterpret_cast< GuildSigninList* >(object);
  (void)_this;
}
void GuildSigninList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildSigninList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildSigninList::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildSigninList& GuildSigninList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildSigninList.base);
  return *internal_default_instance();
}


void GuildSigninList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildSigninList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildSigninList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildSigninList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.GuildSignin list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildSigninList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildSigninList)
  return false;
#undef DO_
}

void GuildSigninList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildSigninList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildSignin list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildSigninList)
}

::google::protobuf::uint8* GuildSigninList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildSigninList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildSignin list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildSigninList)
  return target;
}

size_t GuildSigninList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildSigninList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.GuildSignin list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildSigninList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildSigninList)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildSigninList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildSigninList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildSigninList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildSigninList)
    MergeFrom(*source);
  }
}

void GuildSigninList::MergeFrom(const GuildSigninList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildSigninList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void GuildSigninList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildSigninList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildSigninList::CopyFrom(const GuildSigninList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildSigninList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildSigninList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GuildSigninList::Swap(GuildSigninList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildSigninList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildSigninList::UnsafeArenaSwap(GuildSigninList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildSigninList::InternalSwap(GuildSigninList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildSigninList::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildTrack::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildTrack::kUuidFieldNumber;
const int GuildTrack::kNickFieldNumber;
const int GuildTrack::kActionTypeFieldNumber;
const int GuildTrack::kGuildidFieldNumber;
const int GuildTrack::kNameFieldNumber;
const int GuildTrack::kAnnouncementFieldNumber;
const int GuildTrack::kTargetUuidFieldNumber;
const int GuildTrack::kTargetNickFieldNumber;
const int GuildTrack::kTargetTitleFieldNumber;
const int GuildTrack::kDonationFieldNumber;
const int GuildTrack::kBuildingTypeFieldNumber;
const int GuildTrack::kBuildingLevelFieldNumber;
const int GuildTrack::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildTrack::GuildTrack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildTrack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildTrack)
}
GuildTrack::GuildTrack(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildTrack.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildTrack)
}
GuildTrack::GuildTrack(const GuildTrack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement()) {
    announcement_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement(),
      GetArenaNoVirtual());
  }
  target_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_nick()) {
    target_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_nick(),
      GetArenaNoVirtual());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:sg.GuildTrack)
}

void GuildTrack::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(optime_));
}

GuildTrack::~GuildTrack() {
  // @@protoc_insertion_point(destructor:sg.GuildTrack)
  SharedDtor();
}

void GuildTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GuildTrack::ArenaDtor(void* object) {
  GuildTrack* _this = reinterpret_cast< GuildTrack* >(object);
  (void)_this;
}
void GuildTrack::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildTrack::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildTrack& GuildTrack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildTrack.base);
  return *internal_default_instance();
}


void GuildTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      announcement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      target_nick_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_uuid_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(target_uuid_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&target_title_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&target_title_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildTrack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 action_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_action_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 guildid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_guildid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes announcement = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_announcement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 target_uuid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_target_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes target_nick = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_title = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_target_title();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_title_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 donation = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_donation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 building_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_building_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 building_level = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_building_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 optime = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildTrack)
  return false;
#undef DO_
}

void GuildTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required bytes nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nick(), output);
  }

  // required int32 action_type = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_type(), output);
  }

  // optional int32 guildid = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->guildid(), output);
  }

  // optional bytes name = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->name(), output);
  }

  // optional bytes announcement = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->announcement(), output);
  }

  // optional uint64 target_uuid = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->target_uuid(), output);
  }

  // optional bytes target_nick = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->target_nick(), output);
  }

  // optional int32 target_title = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->target_title(), output);
  }

  // optional int32 donation = 17;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->donation(), output);
  }

  // optional int32 building_type = 18;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->building_type(), output);
  }

  // optional int32 building_level = 19;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->building_level(), output);
  }

  // optional sfixed64 optime = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(21, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildTrack)
}

::google::protobuf::uint8* GuildTrack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // required bytes nick = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nick(), target);
  }

  // required int32 action_type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_type(), target);
  }

  // optional int32 guildid = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->guildid(), target);
  }

  // optional bytes name = 12;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->name(), target);
  }

  // optional bytes announcement = 13;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->announcement(), target);
  }

  // optional uint64 target_uuid = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->target_uuid(), target);
  }

  // optional bytes target_nick = 15;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->target_nick(), target);
  }

  // optional int32 target_title = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->target_title(), target);
  }

  // optional int32 donation = 17;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->donation(), target);
  }

  // optional int32 building_type = 18;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->building_type(), target);
  }

  // optional int32 building_level = 19;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->building_level(), target);
  }

  // optional sfixed64 optime = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(21, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildTrack)
  return target;
}

size_t GuildTrack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.GuildTrack)
  size_t total_size = 0;

  if (has_nick()) {
    // required bytes nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (has_uuid()) {
    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  if (has_action_type()) {
    // required int32 action_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action_type());
  }

  return total_size;
}
size_t GuildTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildTrack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000031) ^ 0x00000031) == 0) {  // All required fields are present.
    // required bytes nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());

    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());

    // required int32 action_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional bytes name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes announcement = 13;
    if (has_announcement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->announcement());
    }

    // optional bytes target_nick = 15;
    if (has_target_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_nick());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 guildid = 11;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }

    // optional uint64 target_uuid = 14;
    if (has_target_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_uuid());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 target_title = 16;
    if (has_target_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_title());
    }

    // optional int32 donation = 17;
    if (has_donation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donation());
    }

    // optional int32 building_type = 18;
    if (has_building_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_type());
    }

    // optional int32 building_level = 19;
    if (has_building_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_level());
    }

    // optional sfixed64 optime = 21;
    if (has_optime()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildTrack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildTrack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildTrack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildTrack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildTrack)
    MergeFrom(*source);
  }
}

void GuildTrack::MergeFrom(const GuildTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000002u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000004u) {
      set_announcement(from.announcement());
    }
    if (cached_has_bits & 0x00000008u) {
      set_target_nick(from.target_nick());
    }
    if (cached_has_bits & 0x00000010u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000020u) {
      action_type_ = from.action_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000080u) {
      target_uuid_ = from.target_uuid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      target_title_ = from.target_title_;
    }
    if (cached_has_bits & 0x00000200u) {
      donation_ = from.donation_;
    }
    if (cached_has_bits & 0x00000400u) {
      building_type_ = from.building_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      building_level_ = from.building_level_;
    }
    if (cached_has_bits & 0x00001000u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildTrack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildTrack::CopyFrom(const GuildTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildTrack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;
  return true;
}

void GuildTrack::Swap(GuildTrack* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildTrack* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildTrack::UnsafeArenaSwap(GuildTrack* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildTrack::InternalSwap(GuildTrack* other) {
  using std::swap;
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  announcement_.Swap(&other->announcement_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_nick_.Swap(&other->target_nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uuid_, other->uuid_);
  swap(action_type_, other->action_type_);
  swap(guildid_, other->guildid_);
  swap(target_uuid_, other->target_uuid_);
  swap(target_title_, other->target_title_);
  swap(donation_, other->donation_);
  swap(building_type_, other->building_type_);
  swap(building_level_, other->building_level_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildTrack::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildTrackList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildTrackList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildTrackList::GuildTrackList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildTrackList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildTrackList)
}
GuildTrackList::GuildTrackList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildTrackList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildTrackList)
}
GuildTrackList::GuildTrackList(const GuildTrackList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.GuildTrackList)
}

void GuildTrackList::SharedCtor() {
}

GuildTrackList::~GuildTrackList() {
  // @@protoc_insertion_point(destructor:sg.GuildTrackList)
  SharedDtor();
}

void GuildTrackList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GuildTrackList::ArenaDtor(void* object) {
  GuildTrackList* _this = reinterpret_cast< GuildTrackList* >(object);
  (void)_this;
}
void GuildTrackList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildTrackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildTrackList::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildTrackList& GuildTrackList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildTrackList.base);
  return *internal_default_instance();
}


void GuildTrackList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildTrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildTrackList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildTrackList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.GuildTrack list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildTrackList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildTrackList)
  return false;
#undef DO_
}

void GuildTrackList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildTrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildTrack list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildTrackList)
}

::google::protobuf::uint8* GuildTrackList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildTrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.GuildTrack list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildTrackList)
  return target;
}

size_t GuildTrackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildTrackList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.GuildTrack list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildTrackList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildTrackList)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildTrackList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildTrackList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildTrackList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildTrackList)
    MergeFrom(*source);
  }
}

void GuildTrackList::MergeFrom(const GuildTrackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildTrackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void GuildTrackList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildTrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildTrackList::CopyFrom(const GuildTrackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildTrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildTrackList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GuildTrackList::Swap(GuildTrackList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildTrackList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildTrackList::UnsafeArenaSwap(GuildTrackList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildTrackList::InternalSwap(GuildTrackList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildTrackList::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DonateItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DonateItem::kIdFieldNumber;
const int DonateItem::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DonateItem::DonateItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_DonateItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DonateItem)
}
DonateItem::DonateItem(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_DonateItem.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DonateItem)
}
DonateItem::DonateItem(const DonateItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:sg.DonateItem)
}

void DonateItem::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
}

DonateItem::~DonateItem() {
  // @@protoc_insertion_point(destructor:sg.DonateItem)
  SharedDtor();
}

void DonateItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DonateItem::ArenaDtor(void* object) {
  DonateItem* _this = reinterpret_cast< DonateItem* >(object);
  (void)_this;
}
void DonateItem::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DonateItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DonateItem::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DonateItem& DonateItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_DonateItem.base);
  return *internal_default_instance();
}


void DonateItem::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DonateItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&id_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DonateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DonateItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DonateItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DonateItem)
  return false;
#undef DO_
}

void DonateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DonateItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DonateItem)
}

::google::protobuf::uint8* DonateItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DonateItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DonateItem)
  return target;
}

size_t DonateItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.DonateItem)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_num()) {
    // required int32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  return total_size;
}
size_t DonateItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DonateItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DonateItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DonateItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DonateItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DonateItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DonateItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DonateItem)
    MergeFrom(*source);
  }
}

void DonateItem::MergeFrom(const DonateItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DonateItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DonateItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DonateItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonateItem::CopyFrom(const DonateItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DonateItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonateItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DonateItem::Swap(DonateItem* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DonateItem* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DonateItem::UnsafeArenaSwap(DonateItem* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DonateItem::InternalSwap(DonateItem* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DonateItem::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DonateItemList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DonateItemList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DonateItemList::DonateItemList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_DonateItemList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DonateItemList)
}
DonateItemList::DonateItemList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_DonateItemList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DonateItemList)
}
DonateItemList::DonateItemList(const DonateItemList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.DonateItemList)
}

void DonateItemList::SharedCtor() {
}

DonateItemList::~DonateItemList() {
  // @@protoc_insertion_point(destructor:sg.DonateItemList)
  SharedDtor();
}

void DonateItemList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DonateItemList::ArenaDtor(void* object) {
  DonateItemList* _this = reinterpret_cast< DonateItemList* >(object);
  (void)_this;
}
void DonateItemList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DonateItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DonateItemList::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DonateItemList& DonateItemList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_DonateItemList.base);
  return *internal_default_instance();
}


void DonateItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DonateItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DonateItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DonateItemList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.DonateItem list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DonateItemList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DonateItemList)
  return false;
#undef DO_
}

void DonateItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DonateItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.DonateItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DonateItemList)
}

::google::protobuf::uint8* DonateItemList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DonateItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.DonateItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DonateItemList)
  return target;
}

size_t DonateItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DonateItemList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.DonateItem list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DonateItemList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DonateItemList)
  GOOGLE_DCHECK_NE(&from, this);
  const DonateItemList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DonateItemList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DonateItemList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DonateItemList)
    MergeFrom(*source);
  }
}

void DonateItemList::MergeFrom(const DonateItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DonateItemList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void DonateItemList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DonateItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonateItemList::CopyFrom(const DonateItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DonateItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonateItemList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void DonateItemList::Swap(DonateItemList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DonateItemList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DonateItemList::UnsafeArenaSwap(DonateItemList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DonateItemList::InternalSwap(DonateItemList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DonateItemList::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildService_GuildRequest::InitAsDefaultInstance() {
  ::sg::_GuildService_GuildRequest_default_instance_._instance.get_mutable()->donate_list_ = const_cast< ::sg::DonateItemList*>(
      ::sg::DonateItemList::internal_default_instance());
}
void GuildService_GuildRequest::unsafe_arena_set_allocated_donate_list(
    ::sg::DonateItemList* donate_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete donate_list_;
  }
  donate_list_ = donate_list;
  if (donate_list) {
    set_has_donate_list();
  } else {
    clear_has_donate_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.GuildRequest.donate_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildService_GuildRequest::kCmdFieldNumber;
const int GuildService_GuildRequest::kGuildidFieldNumber;
const int GuildService_GuildRequest::kNameFieldNumber;
const int GuildService_GuildRequest::kAnnouncementFieldNumber;
const int GuildService_GuildRequest::kUserUuidFieldNumber;
const int GuildService_GuildRequest::kUserTitleFieldNumber;
const int GuildService_GuildRequest::kDonateListFieldNumber;
const int GuildService_GuildRequest::kBadgeFieldNumber;
const int GuildService_GuildRequest::kAcceptTypeFieldNumber;
const int GuildService_GuildRequest::kJoinLevelFieldNumber;
const int GuildService_GuildRequest::kJoinForceFieldNumber;
const int GuildService_GuildRequest::kSigninTypeFieldNumber;
const int GuildService_GuildRequest::kBuildingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildService_GuildRequest::GuildService_GuildRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildService_GuildRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildService.GuildRequest)
}
GuildService_GuildRequest::GuildService_GuildRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildService_GuildRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildService.GuildRequest)
}
GuildService_GuildRequest::GuildService_GuildRequest(const GuildService_GuildRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement()) {
    announcement_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement(),
      GetArenaNoVirtual());
  }
  badge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_badge()) {
    badge_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.badge(),
      GetArenaNoVirtual());
  }
  if (from.has_donate_list()) {
    donate_list_ = new ::sg::DonateItemList(*from.donate_list_);
  } else {
    donate_list_ = NULL;
  }
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.GuildService.GuildRequest)
}

void GuildService_GuildRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  badge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&donate_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signin_type_) -
      reinterpret_cast<char*>(&donate_list_)) + sizeof(signin_type_));
  cmd_ = 1;
}

GuildService_GuildRequest::~GuildService_GuildRequest() {
  // @@protoc_insertion_point(destructor:sg.GuildService.GuildRequest)
  SharedDtor();
}

void GuildService_GuildRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  badge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete donate_list_;
}

void GuildService_GuildRequest::ArenaDtor(void* object) {
  GuildService_GuildRequest* _this = reinterpret_cast< GuildService_GuildRequest* >(object);
  (void)_this;
}
void GuildService_GuildRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildService_GuildRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildService_GuildRequest::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildService_GuildRequest& GuildService_GuildRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildService_GuildRequest.base);
  return *internal_default_instance();
}


void GuildService_GuildRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildService.GuildRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      badge_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(donate_list_ != NULL);
      donate_list_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accept_type_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(accept_type_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&join_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signin_type_) -
        reinterpret_cast<char*>(&join_level_)) + sizeof(signin_type_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildService_GuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildService.GuildRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.GuildService.GUILD_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GuildService_GUILD_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::sg::GuildService_GUILD_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 guildid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_guildid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes announcement = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_announcement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 user_uuid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_user_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_title = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_user_title();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_title_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.DonateItemList donate_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_donate_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes badge = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_badge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GUILD_ACCEPT_TYPE accept_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GUILD_ACCEPT_TYPE_IsValid(value)) {
            set_accept_type(static_cast< ::sg::GUILD_ACCEPT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 join_level = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_join_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 join_force = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_join_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 signin_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_signin_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signin_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 building_type = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_building_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildService.GuildRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildService.GuildRequest)
  return false;
#undef DO_
}

void GuildService_GuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildService.GuildRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GuildService.GUILD_COMMAND cmd = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 guildid = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildid(), output);
  }

  // optional bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // optional bytes announcement = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->announcement(), output);
  }

  // optional uint64 user_uuid = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_uuid(), output);
  }

  // optional int32 user_title = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->user_title(), output);
  }

  // optional .sg.DonateItemList donate_list = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_donate_list(), output);
  }

  // optional bytes badge = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->badge(), output);
  }

  // optional .sg.GUILD_ACCEPT_TYPE accept_type = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->accept_type(), output);
  }

  // optional int32 join_level = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->join_level(), output);
  }

  // optional int32 join_force = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->join_force(), output);
  }

  // optional int32 signin_type = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->signin_type(), output);
  }

  // optional int32 building_type = 31;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->building_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildService.GuildRequest)
}

::google::protobuf::uint8* GuildService_GuildRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildService.GuildRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GuildService.GUILD_COMMAND cmd = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 guildid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildid(), target);
  }

  // optional bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional bytes announcement = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->announcement(), target);
  }

  // optional uint64 user_uuid = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_uuid(), target);
  }

  // optional int32 user_title = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->user_title(), target);
  }

  // optional .sg.DonateItemList donate_list = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_donate_list(), deterministic, target);
  }

  // optional bytes badge = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->badge(), target);
  }

  // optional .sg.GUILD_ACCEPT_TYPE accept_type = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->accept_type(), target);
  }

  // optional int32 join_level = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->join_level(), target);
  }

  // optional int32 join_force = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->join_force(), target);
  }

  // optional int32 signin_type = 21;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->signin_type(), target);
  }

  // optional int32 building_type = 31;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->building_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildService.GuildRequest)
  return target;
}

size_t GuildService_GuildRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildService.GuildRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.GuildService.GUILD_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes announcement = 4;
    if (has_announcement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->announcement());
    }

    // optional bytes badge = 8;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->badge());
    }

    // optional .sg.DonateItemList donate_list = 7;
    if (has_donate_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *donate_list_);
    }

    // optional int32 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }

    // optional int32 user_title = 6;
    if (has_user_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_title());
    }

    // optional uint64 user_uuid = 5;
    if (has_user_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uuid());
    }

    // optional .sg.GUILD_ACCEPT_TYPE accept_type = 11;
    if (has_accept_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->accept_type());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 join_level = 12;
    if (has_join_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->join_level());
    }

    // optional int32 building_type = 31;
    if (has_building_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_type());
    }

    // optional int32 join_force = 13;
    if (has_join_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->join_force());
    }

    // optional int32 signin_type = 21;
    if (has_signin_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signin_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildService_GuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildService.GuildRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildService_GuildRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildService_GuildRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildService.GuildRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildService.GuildRequest)
    MergeFrom(*source);
  }
}

void GuildService_GuildRequest::MergeFrom(const GuildService_GuildRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildService.GuildRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_announcement(from.announcement());
    }
    if (cached_has_bits & 0x00000004u) {
      set_badge(from.badge());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_donate_list()->::sg::DonateItemList::MergeFrom(from.donate_list());
    }
    if (cached_has_bits & 0x00000010u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000020u) {
      user_title_ = from.user_title_;
    }
    if (cached_has_bits & 0x00000040u) {
      user_uuid_ = from.user_uuid_;
    }
    if (cached_has_bits & 0x00000080u) {
      accept_type_ = from.accept_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      join_level_ = from.join_level_;
    }
    if (cached_has_bits & 0x00000200u) {
      building_type_ = from.building_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      join_force_ = from.join_force_;
    }
    if (cached_has_bits & 0x00000800u) {
      signin_type_ = from.signin_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildService_GuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildService.GuildRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildService_GuildRequest::CopyFrom(const GuildService_GuildRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildService.GuildRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildService_GuildRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001000) != 0x00001000) return false;
  if (has_donate_list()) {
    if (!this->donate_list_->IsInitialized()) return false;
  }
  return true;
}

void GuildService_GuildRequest::Swap(GuildService_GuildRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildService_GuildRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildService_GuildRequest::UnsafeArenaSwap(GuildService_GuildRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildService_GuildRequest::InternalSwap(GuildService_GuildRequest* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  announcement_.Swap(&other->announcement_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  badge_.Swap(&other->badge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(donate_list_, other->donate_list_);
  swap(guildid_, other->guildid_);
  swap(user_title_, other->user_title_);
  swap(user_uuid_, other->user_uuid_);
  swap(accept_type_, other->accept_type_);
  swap(join_level_, other->join_level_);
  swap(building_type_, other->building_type_);
  swap(join_force_, other->join_force_);
  swap(signin_type_, other->signin_type_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildService_GuildRequest::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildService_GuildResponse::InitAsDefaultInstance() {
  ::sg::_GuildService_GuildResponse_default_instance_._instance.get_mutable()->guild_list_ = const_cast< ::sg::GuildDataList*>(
      ::sg::GuildDataList::internal_default_instance());
  ::sg::_GuildService_GuildResponse_default_instance_._instance.get_mutable()->track_list_ = const_cast< ::sg::GuildTrackList*>(
      ::sg::GuildTrackList::internal_default_instance());
  ::sg::_GuildService_GuildResponse_default_instance_._instance.get_mutable()->signin_list_ = const_cast< ::sg::GuildSigninList*>(
      ::sg::GuildSigninList::internal_default_instance());
  ::sg::_GuildService_GuildResponse_default_instance_._instance.get_mutable()->signin_drop_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
  ::sg::_GuildService_GuildResponse_default_instance_._instance.get_mutable()->store_item_list_ = const_cast< ::sg::GuildStoreItemList*>(
      ::sg::GuildStoreItemList::internal_default_instance());
  ::sg::_GuildService_GuildResponse_default_instance_._instance.get_mutable()->donate_drop_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
  ::sg::_GuildService_GuildResponse_default_instance_._instance.get_mutable()->building_list_ = const_cast< ::sg::GuildBuildingList*>(
      ::sg::GuildBuildingList::internal_default_instance());
}
void GuildService_GuildResponse::unsafe_arena_set_allocated_guild_list(
    ::sg::GuildDataList* guild_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete guild_list_;
  }
  guild_list_ = guild_list;
  if (guild_list) {
    set_has_guild_list();
  } else {
    clear_has_guild_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.GuildResponse.guild_list)
}
void GuildService_GuildResponse::unsafe_arena_set_allocated_track_list(
    ::sg::GuildTrackList* track_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete track_list_;
  }
  track_list_ = track_list;
  if (track_list) {
    set_has_track_list();
  } else {
    clear_has_track_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.GuildResponse.track_list)
}
void GuildService_GuildResponse::unsafe_arena_set_allocated_signin_list(
    ::sg::GuildSigninList* signin_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete signin_list_;
  }
  signin_list_ = signin_list;
  if (signin_list) {
    set_has_signin_list();
  } else {
    clear_has_signin_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.GuildResponse.signin_list)
}
void GuildService_GuildResponse::unsafe_arena_set_allocated_signin_drop(
    ::sg::Reward* signin_drop) {
  if (GetArenaNoVirtual() == NULL) {
    delete signin_drop_;
  }
  signin_drop_ = signin_drop;
  if (signin_drop) {
    set_has_signin_drop();
  } else {
    clear_has_signin_drop();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.GuildResponse.signin_drop)
}
void GuildService_GuildResponse::clear_signin_drop() {
  if (signin_drop_ != NULL) signin_drop_->Clear();
  clear_has_signin_drop();
}
void GuildService_GuildResponse::unsafe_arena_set_allocated_store_item_list(
    ::sg::GuildStoreItemList* store_item_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete store_item_list_;
  }
  store_item_list_ = store_item_list;
  if (store_item_list) {
    set_has_store_item_list();
  } else {
    clear_has_store_item_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.GuildResponse.store_item_list)
}
void GuildService_GuildResponse::unsafe_arena_set_allocated_donate_drop(
    ::sg::Reward* donate_drop) {
  if (GetArenaNoVirtual() == NULL) {
    delete donate_drop_;
  }
  donate_drop_ = donate_drop;
  if (donate_drop) {
    set_has_donate_drop();
  } else {
    clear_has_donate_drop();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.GuildResponse.donate_drop)
}
void GuildService_GuildResponse::clear_donate_drop() {
  if (donate_drop_ != NULL) donate_drop_->Clear();
  clear_has_donate_drop();
}
void GuildService_GuildResponse::unsafe_arena_set_allocated_building_list(
    ::sg::GuildBuildingList* building_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete building_list_;
  }
  building_list_ = building_list;
  if (building_list) {
    set_has_building_list();
  } else {
    clear_has_building_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.GuildResponse.building_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildService_GuildResponse::kResultFieldNumber;
const int GuildService_GuildResponse::kGuildListFieldNumber;
const int GuildService_GuildResponse::kTrackListFieldNumber;
const int GuildService_GuildResponse::kSelfJoinningListFieldNumber;
const int GuildService_GuildResponse::kSigninListFieldNumber;
const int GuildService_GuildResponse::kSigninDropFieldNumber;
const int GuildService_GuildResponse::kLastQuitOptimeFieldNumber;
const int GuildService_GuildResponse::kQuitJoinCdFieldNumber;
const int GuildService_GuildResponse::kStoreItemListFieldNumber;
const int GuildService_GuildResponse::kDonateDropFieldNumber;
const int GuildService_GuildResponse::kBuildingListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildService_GuildResponse::GuildService_GuildResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildService_GuildResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildService.GuildResponse)
}
GuildService_GuildResponse::GuildService_GuildResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  self_joinning_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildService_GuildResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildService.GuildResponse)
}
GuildService_GuildResponse::GuildService_GuildResponse(const GuildService_GuildResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      self_joinning_list_(from.self_joinning_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_guild_list()) {
    guild_list_ = new ::sg::GuildDataList(*from.guild_list_);
  } else {
    guild_list_ = NULL;
  }
  if (from.has_track_list()) {
    track_list_ = new ::sg::GuildTrackList(*from.track_list_);
  } else {
    track_list_ = NULL;
  }
  if (from.has_signin_list()) {
    signin_list_ = new ::sg::GuildSigninList(*from.signin_list_);
  } else {
    signin_list_ = NULL;
  }
  if (from.has_signin_drop()) {
    signin_drop_ = new ::sg::Reward(*from.signin_drop_);
  } else {
    signin_drop_ = NULL;
  }
  if (from.has_store_item_list()) {
    store_item_list_ = new ::sg::GuildStoreItemList(*from.store_item_list_);
  } else {
    store_item_list_ = NULL;
  }
  if (from.has_donate_drop()) {
    donate_drop_ = new ::sg::Reward(*from.donate_drop_);
  } else {
    donate_drop_ = NULL;
  }
  if (from.has_building_list()) {
    building_list_ = new ::sg::GuildBuildingList(*from.building_list_);
  } else {
    building_list_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_quit_optime_) -
    reinterpret_cast<char*>(&result_)) + sizeof(last_quit_optime_));
  // @@protoc_insertion_point(copy_constructor:sg.GuildService.GuildResponse)
}

void GuildService_GuildResponse::SharedCtor() {
  ::memset(&guild_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_quit_optime_) -
      reinterpret_cast<char*>(&guild_list_)) + sizeof(last_quit_optime_));
}

GuildService_GuildResponse::~GuildService_GuildResponse() {
  // @@protoc_insertion_point(destructor:sg.GuildService.GuildResponse)
  SharedDtor();
}

void GuildService_GuildResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete guild_list_;
  if (this != internal_default_instance()) delete track_list_;
  if (this != internal_default_instance()) delete signin_list_;
  if (this != internal_default_instance()) delete signin_drop_;
  if (this != internal_default_instance()) delete store_item_list_;
  if (this != internal_default_instance()) delete donate_drop_;
  if (this != internal_default_instance()) delete building_list_;
}

void GuildService_GuildResponse::ArenaDtor(void* object) {
  GuildService_GuildResponse* _this = reinterpret_cast< GuildService_GuildResponse* >(object);
  (void)_this;
}
void GuildService_GuildResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildService_GuildResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildService_GuildResponse::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildService_GuildResponse& GuildService_GuildResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildService_GuildResponse.base);
  return *internal_default_instance();
}


void GuildService_GuildResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildService.GuildResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  self_joinning_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(guild_list_ != NULL);
      guild_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(track_list_ != NULL);
      track_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(signin_list_ != NULL);
      signin_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(signin_drop_ != NULL);
      signin_drop_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(store_item_list_ != NULL);
      store_item_list_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(donate_drop_ != NULL);
      donate_drop_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(building_list_ != NULL);
      building_list_->Clear();
    }
  }
  result_ = 0;
  if (cached_has_bits & 768u) {
    ::memset(&quit_join_cd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_quit_optime_) -
        reinterpret_cast<char*>(&quit_join_cd_)) + sizeof(last_quit_optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildService_GuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildService.GuildResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GuildDataList guild_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GuildTrackList track_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_track_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 self_joinning_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_self_joinning_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_self_joinning_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GuildSigninList signin_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signin_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward signin_drop = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signin_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 last_quit_optime = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_last_quit_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_quit_optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quit_join_cd = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_quit_join_cd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quit_join_cd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GuildStoreItemList store_item_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_store_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward donate_drop = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_donate_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GuildBuildingList building_list = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_building_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildService.GuildResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildService.GuildResponse)
  return false;
#undef DO_
}

void GuildService_GuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildService.GuildResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.GuildDataList guild_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_guild_list(), output);
  }

  // optional .sg.GuildTrackList track_list = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_track_list(), output);
  }

  // repeated int32 self_joinning_list = 4;
  for (int i = 0, n = this->self_joinning_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->self_joinning_list(i), output);
  }

  // optional .sg.GuildSigninList signin_list = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_signin_list(), output);
  }

  // optional .sg.Reward signin_drop = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_signin_drop(), output);
  }

  // optional sfixed64 last_quit_optime = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->last_quit_optime(), output);
  }

  // optional int32 quit_join_cd = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->quit_join_cd(), output);
  }

  // optional .sg.GuildStoreItemList store_item_list = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_store_item_list(), output);
  }

  // optional .sg.Reward donate_drop = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_donate_drop(), output);
  }

  // optional .sg.GuildBuildingList building_list = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_building_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildService.GuildResponse)
}

::google::protobuf::uint8* GuildService_GuildResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildService.GuildResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.GuildDataList guild_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_guild_list(), deterministic, target);
  }

  // optional .sg.GuildTrackList track_list = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_track_list(), deterministic, target);
  }

  // repeated int32 self_joinning_list = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->self_joinning_list_, target);

  // optional .sg.GuildSigninList signin_list = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_signin_list(), deterministic, target);
  }

  // optional .sg.Reward signin_drop = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_signin_drop(), deterministic, target);
  }

  // optional sfixed64 last_quit_optime = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->last_quit_optime(), target);
  }

  // optional int32 quit_join_cd = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->quit_join_cd(), target);
  }

  // optional .sg.GuildStoreItemList store_item_list = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_store_item_list(), deterministic, target);
  }

  // optional .sg.Reward donate_drop = 16;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_donate_drop(), deterministic, target);
  }

  // optional .sg.GuildBuildingList building_list = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_building_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildService.GuildResponse)
  return target;
}

size_t GuildService_GuildResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildService.GuildResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated int32 self_joinning_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->self_joinning_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->self_joinning_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .sg.GuildDataList guild_list = 2;
    if (has_guild_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *guild_list_);
    }

    // optional .sg.GuildTrackList track_list = 3;
    if (has_track_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *track_list_);
    }

    // optional .sg.GuildSigninList signin_list = 11;
    if (has_signin_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signin_list_);
    }

    // optional .sg.Reward signin_drop = 12;
    if (has_signin_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signin_drop_);
    }

    // optional .sg.GuildStoreItemList store_item_list = 15;
    if (has_store_item_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *store_item_list_);
    }

    // optional .sg.Reward donate_drop = 16;
    if (has_donate_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *donate_drop_);
    }

    // optional .sg.GuildBuildingList building_list = 17;
    if (has_building_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *building_list_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 quit_join_cd = 14;
    if (has_quit_join_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quit_join_cd());
    }

    // optional sfixed64 last_quit_optime = 13;
    if (has_last_quit_optime()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildService_GuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildService.GuildResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildService_GuildResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildService_GuildResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildService.GuildResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildService.GuildResponse)
    MergeFrom(*source);
  }
}

void GuildService_GuildResponse::MergeFrom(const GuildService_GuildResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildService.GuildResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  self_joinning_list_.MergeFrom(from.self_joinning_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_guild_list()->::sg::GuildDataList::MergeFrom(from.guild_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_track_list()->::sg::GuildTrackList::MergeFrom(from.track_list());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_signin_list()->::sg::GuildSigninList::MergeFrom(from.signin_list());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_signin_drop()->::sg::Reward::MergeFrom(from.signin_drop());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_store_item_list()->::sg::GuildStoreItemList::MergeFrom(from.store_item_list());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_donate_drop()->::sg::Reward::MergeFrom(from.donate_drop());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_building_list()->::sg::GuildBuildingList::MergeFrom(from.building_list());
    }
    if (cached_has_bits & 0x00000080u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      quit_join_cd_ = from.quit_join_cd_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_quit_optime_ = from.last_quit_optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildService_GuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildService.GuildResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildService_GuildResponse::CopyFrom(const GuildService_GuildResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildService.GuildResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildService_GuildResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (has_guild_list()) {
    if (!this->guild_list_->IsInitialized()) return false;
  }
  if (has_track_list()) {
    if (!this->track_list_->IsInitialized()) return false;
  }
  if (has_signin_list()) {
    if (!this->signin_list_->IsInitialized()) return false;
  }
  if (has_signin_drop()) {
    if (!this->signin_drop_->IsInitialized()) return false;
  }
  if (has_store_item_list()) {
    if (!this->store_item_list_->IsInitialized()) return false;
  }
  if (has_donate_drop()) {
    if (!this->donate_drop_->IsInitialized()) return false;
  }
  if (has_building_list()) {
    if (!this->building_list_->IsInitialized()) return false;
  }
  return true;
}

void GuildService_GuildResponse::Swap(GuildService_GuildResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildService_GuildResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildService_GuildResponse::UnsafeArenaSwap(GuildService_GuildResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildService_GuildResponse::InternalSwap(GuildService_GuildResponse* other) {
  using std::swap;
  self_joinning_list_.InternalSwap(&other->self_joinning_list_);
  swap(guild_list_, other->guild_list_);
  swap(track_list_, other->track_list_);
  swap(signin_list_, other->signin_list_);
  swap(signin_drop_, other->signin_drop_);
  swap(store_item_list_, other->store_item_list_);
  swap(donate_drop_, other->donate_drop_);
  swap(building_list_, other->building_list_);
  swap(result_, other->result_);
  swap(quit_join_cd_, other->quit_join_cd_);
  swap(last_quit_optime_, other->last_quit_optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildService_GuildResponse::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GuildService::InitAsDefaultInstance() {
  ::sg::_GuildService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::GuildService_GuildRequest*>(
      ::sg::GuildService_GuildRequest::internal_default_instance());
  ::sg::_GuildService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::GuildService_GuildResponse*>(
      ::sg::GuildService_GuildResponse::internal_default_instance());
}
void GuildService::unsafe_arena_set_allocated_req(
    ::sg::GuildService_GuildRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.req)
}
void GuildService::unsafe_arena_set_allocated_resp(
    ::sg::GuildService_GuildResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GuildService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildService::kReqFieldNumber;
const int GuildService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildService::GuildService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GuildService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GuildService)
}
GuildService::GuildService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GuildService)
}
GuildService::GuildService(const GuildService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::GuildService_GuildRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::GuildService_GuildResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.GuildService)
}

void GuildService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

GuildService::~GuildService() {
  // @@protoc_insertion_point(destructor:sg.GuildService)
  SharedDtor();
}

void GuildService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void GuildService::ArenaDtor(void* object) {
  GuildService* _this = reinterpret_cast< GuildService* >(object);
  (void)_this;
}
void GuildService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GuildService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GuildService::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GuildService& GuildService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GuildService.base);
  return *internal_default_instance();
}


void GuildService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GuildService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GuildService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GuildService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.GuildService.GuildRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GuildService.GuildResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GuildService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GuildService)
  return false;
#undef DO_
}

void GuildService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GuildService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.GuildService.GuildRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.GuildService.GuildResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GuildService)
}

::google::protobuf::uint8* GuildService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GuildService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.GuildService.GuildRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.GuildService.GuildResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GuildService)
  return target;
}

size_t GuildService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GuildService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.GuildService.GuildRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.GuildService.GuildResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GuildService)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GuildService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GuildService)
    MergeFrom(*source);
  }
}

void GuildService::MergeFrom(const GuildService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GuildService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::GuildService_GuildRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::GuildService_GuildResponse::MergeFrom(from.resp());
    }
  }
}

void GuildService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GuildService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildService::CopyFrom(const GuildService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GuildService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void GuildService::Swap(GuildService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GuildService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GuildService::UnsafeArenaSwap(GuildService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GuildService::InternalSwap(GuildService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GuildService::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameGuildTrackNotify::InitAsDefaultInstance() {
  ::sg::_GameGuildTrackNotify_default_instance_._instance.get_mutable()->track_ = const_cast< ::sg::GuildTrack*>(
      ::sg::GuildTrack::internal_default_instance());
  ::sg::_GameGuildTrackNotify_default_instance_._instance.get_mutable()->guild_ = const_cast< ::sg::GuildData*>(
      ::sg::GuildData::internal_default_instance());
}
void GameGuildTrackNotify::unsafe_arena_set_allocated_track(
    ::sg::GuildTrack* track) {
  if (GetArenaNoVirtual() == NULL) {
    delete track_;
  }
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameGuildTrackNotify.track)
}
void GameGuildTrackNotify::unsafe_arena_set_allocated_guild(
    ::sg::GuildData* guild) {
  if (GetArenaNoVirtual() == NULL) {
    delete guild_;
  }
  guild_ = guild;
  if (guild) {
    set_has_guild();
  } else {
    clear_has_guild();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameGuildTrackNotify.guild)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameGuildTrackNotify::kTrackFieldNumber;
const int GameGuildTrackNotify::kGuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameGuildTrackNotify::GameGuildTrackNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Guild_2eproto::scc_info_GameGuildTrackNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameGuildTrackNotify)
}
GameGuildTrackNotify::GameGuildTrackNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GameGuildTrackNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameGuildTrackNotify)
}
GameGuildTrackNotify::GameGuildTrackNotify(const GameGuildTrackNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_track()) {
    track_ = new ::sg::GuildTrack(*from.track_);
  } else {
    track_ = NULL;
  }
  if (from.has_guild()) {
    guild_ = new ::sg::GuildData(*from.guild_);
  } else {
    guild_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.GameGuildTrackNotify)
}

void GameGuildTrackNotify::SharedCtor() {
  ::memset(&track_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guild_) -
      reinterpret_cast<char*>(&track_)) + sizeof(guild_));
}

GameGuildTrackNotify::~GameGuildTrackNotify() {
  // @@protoc_insertion_point(destructor:sg.GameGuildTrackNotify)
  SharedDtor();
}

void GameGuildTrackNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete track_;
  if (this != internal_default_instance()) delete guild_;
}

void GameGuildTrackNotify::ArenaDtor(void* object) {
  GameGuildTrackNotify* _this = reinterpret_cast< GameGuildTrackNotify* >(object);
  (void)_this;
}
void GameGuildTrackNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameGuildTrackNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameGuildTrackNotify::descriptor() {
  ::protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameGuildTrackNotify& GameGuildTrackNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Guild_2eproto::scc_info_GameGuildTrackNotify.base);
  return *internal_default_instance();
}


void GameGuildTrackNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameGuildTrackNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(track_ != NULL);
      track_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(guild_ != NULL);
      guild_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameGuildTrackNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameGuildTrackNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.GuildTrack track = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_track()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GuildData guild = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameGuildTrackNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameGuildTrackNotify)
  return false;
#undef DO_
}

void GameGuildTrackNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameGuildTrackNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GuildTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_track(), output);
  }

  // optional .sg.GuildData guild = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_guild(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameGuildTrackNotify)
}

::google::protobuf::uint8* GameGuildTrackNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameGuildTrackNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GuildTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_track(), deterministic, target);
  }

  // optional .sg.GuildData guild = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_guild(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameGuildTrackNotify)
  return target;
}

size_t GameGuildTrackNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameGuildTrackNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.GuildTrack track = 1;
  if (has_track()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *track_);
  }
  // optional .sg.GuildData guild = 2;
  if (has_guild()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameGuildTrackNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameGuildTrackNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GameGuildTrackNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameGuildTrackNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameGuildTrackNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameGuildTrackNotify)
    MergeFrom(*source);
  }
}

void GameGuildTrackNotify::MergeFrom(const GameGuildTrackNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameGuildTrackNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_track()->::sg::GuildTrack::MergeFrom(from.track());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_guild()->::sg::GuildData::MergeFrom(from.guild());
    }
  }
}

void GameGuildTrackNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameGuildTrackNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameGuildTrackNotify::CopyFrom(const GameGuildTrackNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameGuildTrackNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGuildTrackNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_track()) {
    if (!this->track_->IsInitialized()) return false;
  }
  if (has_guild()) {
    if (!this->guild_->IsInitialized()) return false;
  }
  return true;
}

void GameGuildTrackNotify::Swap(GameGuildTrackNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameGuildTrackNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameGuildTrackNotify::UnsafeArenaSwap(GameGuildTrackNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameGuildTrackNotify::InternalSwap(GameGuildTrackNotify* other) {
  using std::swap;
  swap(track_, other->track_);
  swap(guild_, other->guild_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameGuildTrackNotify::GetMetadata() const {
  protobuf_Guild_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Guild_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildStoreItem* Arena::CreateMaybeMessage< ::sg::GuildStoreItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildStoreItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildStoreItemList* Arena::CreateMaybeMessage< ::sg::GuildStoreItemList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildStoreItemList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildBuilding* Arena::CreateMaybeMessage< ::sg::GuildBuilding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildBuilding >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildBuildingList* Arena::CreateMaybeMessage< ::sg::GuildBuildingList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildBuildingList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildUserData* Arena::CreateMaybeMessage< ::sg::GuildUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildUserData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildUserDataList* Arena::CreateMaybeMessage< ::sg::GuildUserDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildUserDataList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildData* Arena::CreateMaybeMessage< ::sg::GuildData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildDataList* Arena::CreateMaybeMessage< ::sg::GuildDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildDataList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildSignin* Arena::CreateMaybeMessage< ::sg::GuildSignin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildSignin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildSigninList* Arena::CreateMaybeMessage< ::sg::GuildSigninList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildSigninList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildTrack* Arena::CreateMaybeMessage< ::sg::GuildTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildTrack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildTrackList* Arena::CreateMaybeMessage< ::sg::GuildTrackList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildTrackList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DonateItem* Arena::CreateMaybeMessage< ::sg::DonateItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DonateItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DonateItemList* Arena::CreateMaybeMessage< ::sg::DonateItemList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DonateItemList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildService_GuildRequest* Arena::CreateMaybeMessage< ::sg::GuildService_GuildRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildService_GuildRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildService_GuildResponse* Arena::CreateMaybeMessage< ::sg::GuildService_GuildResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildService_GuildResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GuildService* Arena::CreateMaybeMessage< ::sg::GuildService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GuildService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameGuildTrackNotify* Arena::CreateMaybeMessage< ::sg::GameGuildTrackNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameGuildTrackNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
