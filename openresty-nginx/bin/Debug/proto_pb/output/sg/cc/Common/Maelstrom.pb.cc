// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Maelstrom.proto

#include "Maelstrom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_int;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Maelstrom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Maelstrom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MaelstromBuilding;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Maelstrom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MaelstromService_MaelstromRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Maelstrom_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MaelstromEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Maelstrom_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MaelstromState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Maelstrom_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_MaelstromService_MaelstromResponse;
}  // namespace protobuf_Maelstrom_2eproto
namespace sg {
class MaelstromStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaelstromState>
      _instance;
} _MaelstromState_default_instance_;
class MaelstromBuildingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaelstromBuilding>
      _instance;
} _MaelstromBuilding_default_instance_;
class MaelstromEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaelstromEvent>
      _instance;
} _MaelstromEvent_default_instance_;
class MaelstromService_MaelstromRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaelstromService_MaelstromRequest>
      _instance;
} _MaelstromService_MaelstromRequest_default_instance_;
class MaelstromService_MaelstromResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaelstromService_MaelstromResponse>
      _instance;
} _MaelstromService_MaelstromResponse_default_instance_;
class MaelstromServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaelstromService>
      _instance;
} _MaelstromService_default_instance_;
class ShipRestoreNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShipRestoreNotify>
      _instance;
} _ShipRestoreNotify_default_instance_;
class MaelstromBuildingLevelUpNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaelstromBuildingLevelUpNotify>
      _instance;
} _MaelstromBuildingLevelUpNotify_default_instance_;
class ShipInjuredNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShipInjuredNotify>
      _instance;
} _ShipInjuredNotify_default_instance_;
class OilOutputNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OilOutputNotify>
      _instance;
} _OilOutputNotify_default_instance_;
}  // namespace sg
namespace protobuf_Maelstrom_2eproto {
static void InitDefaultsMaelstromState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MaelstromState_default_instance_;
    new (ptr) ::sg::MaelstromState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MaelstromState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MaelstromState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMaelstromState}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,}};

static void InitDefaultsMaelstromBuilding() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MaelstromBuilding_default_instance_;
    new (ptr) ::sg::MaelstromBuilding();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MaelstromBuilding::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MaelstromBuilding =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMaelstromBuilding}, {}};

static void InitDefaultsMaelstromEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MaelstromEvent_default_instance_;
    new (ptr) ::sg::MaelstromEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MaelstromEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MaelstromEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMaelstromEvent}, {
      &protobuf_BaseStruct_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsMaelstromService_MaelstromRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MaelstromService_MaelstromRequest_default_instance_;
    new (ptr) ::sg::MaelstromService_MaelstromRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MaelstromService_MaelstromRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MaelstromService_MaelstromRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMaelstromService_MaelstromRequest}, {}};

static void InitDefaultsMaelstromService_MaelstromResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MaelstromService_MaelstromResponse_default_instance_;
    new (ptr) ::sg::MaelstromService_MaelstromResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MaelstromService_MaelstromResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_MaelstromService_MaelstromResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMaelstromService_MaelstromResponse}, {
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromBuilding.base,
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromState.base,
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromEvent.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsMaelstromService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MaelstromService_default_instance_;
    new (ptr) ::sg::MaelstromService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MaelstromService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MaelstromService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMaelstromService}, {
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromService_MaelstromRequest.base,
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromService_MaelstromResponse.base,}};

static void InitDefaultsShipRestoreNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_ShipRestoreNotify_default_instance_;
    new (ptr) ::sg::ShipRestoreNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::ShipRestoreNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShipRestoreNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShipRestoreNotify}, {}};

static void InitDefaultsMaelstromBuildingLevelUpNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MaelstromBuildingLevelUpNotify_default_instance_;
    new (ptr) ::sg::MaelstromBuildingLevelUpNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MaelstromBuildingLevelUpNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MaelstromBuildingLevelUpNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMaelstromBuildingLevelUpNotify}, {}};

static void InitDefaultsShipInjuredNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_ShipInjuredNotify_default_instance_;
    new (ptr) ::sg::ShipInjuredNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::ShipInjuredNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShipInjuredNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShipInjuredNotify}, {}};

static void InitDefaultsOilOutputNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_OilOutputNotify_default_instance_;
    new (ptr) ::sg::OilOutputNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::OilOutputNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OilOutputNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOilOutputNotify}, {
      &protobuf_BaseStruct_2eproto::scc_info_Item.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MaelstromState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MaelstromBuilding.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MaelstromEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MaelstromService_MaelstromRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MaelstromService_MaelstromResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MaelstromService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShipRestoreNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MaelstromBuildingLevelUpNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShipInjuredNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OilOutputNotify.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, explore_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, fog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, oil_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, repair_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, refresh_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, explore_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, talent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromState, event_record_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuilding, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuilding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuilding, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuilding, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuilding, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuilding, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuilding, level_up_timestamp_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromEvent, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromEvent, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromEvent, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromEvent, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromEvent, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromEvent, player_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromRequest, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromRequest, building_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromRequest, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromRequest, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromRequest, talent_id_),
  4,
  ~0u,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromResponse, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromResponse, building_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromResponse, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromResponse, ship_injured_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromResponse, event_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService_MaelstromResponse, reward_),
  2,
  3,
  ~0u,
  0,
  4,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipRestoreNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipRestoreNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuildingLevelUpNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuildingLevelUpNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MaelstromBuildingLevelUpNotify, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipInjuredNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipInjuredNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipInjuredNotify, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipInjuredNotify, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipInjuredNotify, repair_timestamp_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OilOutputNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OilOutputNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OilOutputNotify, output_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::sg::MaelstromState)},
  { 25, 35, sizeof(::sg::MaelstromBuilding)},
  { 40, 52, sizeof(::sg::MaelstromEvent)},
  { 59, 70, sizeof(::sg::MaelstromService_MaelstromRequest)},
  { 76, 88, sizeof(::sg::MaelstromService_MaelstromResponse)},
  { 95, 102, sizeof(::sg::MaelstromService)},
  { 104, 109, sizeof(::sg::ShipRestoreNotify)},
  { 109, 115, sizeof(::sg::MaelstromBuildingLevelUpNotify)},
  { 116, 124, sizeof(::sg::ShipInjuredNotify)},
  { 127, 133, sizeof(::sg::OilOutputNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MaelstromState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MaelstromBuilding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MaelstromEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MaelstromService_MaelstromRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MaelstromService_MaelstromResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MaelstromService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_ShipRestoreNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MaelstromBuildingLevelUpNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_ShipInjuredNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_OilOutputNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Maelstrom.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017Maelstrom.proto\022\002sg\032\020BaseStruct.proto\""
      "\373\001\n\016MaelstromState\022\025\n\rexplore_level\030\001 \002("
      "\005\022\r\n\005pos_x\030\002 \001(\005\022\r\n\005pos_y\030\003 \001(\005\022\013\n\003fog\030\004"
      " \001(\014\022\013\n\003oil\030\005 \001(\005\022\030\n\020repair_timestamp\030\006 "
      "\001(\020\022\031\n\021refresh_timestamp\030\007 \001(\020\022\025\n\rexplor"
      "e_point\030\010 \001(\005\022#\n\006talent\030\t \003(\0132\023.sg.pb_pa"
      "ir_int_int\022)\n\014event_record\030\n \003(\0132\023.sg.pb"
      "_pair_int_int\"k\n\021MaelstromBuilding\022\n\n\002id"
      "\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\r\n\005level\030\003 \002(\005\022\021\n\tt"
      "imestamp\030\004 \001(\020\022\032\n\022level_up_timestamp\030\005 \001"
      "(\020\"\206\001\n\016MaelstromEvent\022\n\n\002id\030\001 \002(\005\022\016\n\006typ"
      "eid\030\002 \002(\005\022\r\n\005level\030\003 \002(\005\022\r\n\005state\030\004 \001(\005\022"
      "\r\n\005pos_x\030\005 \001(\005\022\r\n\005pos_y\030\006 \001(\005\022\034\n\006player\030"
      "\007 \001(\0132\014.sg.UserInfo\"\370\004\n\020MaelstromService"
      "\0222\n\003req\030\001 \001(\0132%.sg.MaelstromService.Mael"
      "stromRequest\0224\n\004resp\030\002 \001(\0132&.sg.Maelstro"
      "mService.MaelstromResponse\032\224\001\n\020Maelstrom"
      "Request\022%\n\003cmd\030\001 \002(\0162\030.sg.MaelstromServi"
      "ce.CMD\022\021\n\tdirection\030\002 \003(\005\022\020\n\010building\030\003 "
      "\001(\005\022\020\n\010event_id\030\004 \001(\005\022\017\n\007success\030\005 \001(\010\022\021"
      "\n\ttalent_id\030\006 \001(\005\032\334\001\n\021MaelstromResponse\022"
      "\016\n\006result\030\001 \002(\005\022\014\n\004step\030\002 \001(\005\022,\n\rbuildin"
      "g_list\030\003 \003(\0132\025.sg.MaelstromBuilding\022!\n\005s"
      "tate\030\004 \001(\0132\022.sg.MaelstromState\022\024\n\014ship_i"
      "njured\030\005 \001(\010\022&\n\nevent_list\030\006 \003(\0132\022.sg.Ma"
      "elstromEvent\022\032\n\006reward\030\007 \001(\0132\n.sg.Reward"
      "\"\203\001\n\003CMD\022\t\n\005ENTER\020\001\022\010\n\004MOVE\020\002\022\t\n\005RESET\020\003"
      "\022\025\n\021BUILDING_LEVEL_UP\020\004\022\n\n\006SUPPLY\020\005\022\017\n\013Q"
      "UERY_EVENT\020\006\022\023\n\017DEAL_WITH_EVENT\020\007\022\023\n\017TAL"
      "ENT_LEVEL_UP\020\010\"\023\n\021ShipRestoreNotify\",\n\036M"
      "aelstromBuildingLevelUpNotify\022\n\n\002id\030\001 \002("
      "\005\"K\n\021ShipInjuredNotify\022\r\n\005pos_x\030\001 \001(\005\022\r\n"
      "\005pos_y\030\002 \001(\005\022\030\n\020repair_timestamp\030\003 \001(\020\"+"
      "\n\017OilOutputNotify\022\030\n\006output\030\001 \002(\0132\010.sg.I"
      "tem*\245\001\n\030MAELSTROM_MOVE_DIRECTION\022\037\n\033MAEL"
      "STROM_MOVE_DIRECTION_UP\020\001\022!\n\035MAELSTROM_M"
      "OVE_DIRECTION_DOWN\020\002\022!\n\035MAELSTROM_MOVE_D"
      "IRECTION_LEFT\020\003\022\"\n\036MAELSTROM_MOVE_DIRECT"
      "ION_RIGHT\020\004*c\n\027MAELSTROM_BUILDING_TYPE\022\""
      "\n\036MAELSTROM_BUILDING_TYPE_BEACON\020\001\022$\n MA"
      "ELSTROM_BUILDING_TYPE_OIL_WELL\020\002B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1637);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Maelstrom.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Maelstrom_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* MaelstromService_CMD_descriptor() {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Maelstrom_2eproto::file_level_enum_descriptors[0];
}
bool MaelstromService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MaelstromService_CMD MaelstromService::ENTER;
const MaelstromService_CMD MaelstromService::MOVE;
const MaelstromService_CMD MaelstromService::RESET;
const MaelstromService_CMD MaelstromService::BUILDING_LEVEL_UP;
const MaelstromService_CMD MaelstromService::SUPPLY;
const MaelstromService_CMD MaelstromService::QUERY_EVENT;
const MaelstromService_CMD MaelstromService::DEAL_WITH_EVENT;
const MaelstromService_CMD MaelstromService::TALENT_LEVEL_UP;
const MaelstromService_CMD MaelstromService::CMD_MIN;
const MaelstromService_CMD MaelstromService::CMD_MAX;
const int MaelstromService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MAELSTROM_MOVE_DIRECTION_descriptor() {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Maelstrom_2eproto::file_level_enum_descriptors[1];
}
bool MAELSTROM_MOVE_DIRECTION_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAELSTROM_BUILDING_TYPE_descriptor() {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Maelstrom_2eproto::file_level_enum_descriptors[2];
}
bool MAELSTROM_BUILDING_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MaelstromState::InitAsDefaultInstance() {
}
void MaelstromState::clear_talent() {
  talent_.Clear();
}
void MaelstromState::clear_event_record() {
  event_record_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaelstromState::kExploreLevelFieldNumber;
const int MaelstromState::kPosXFieldNumber;
const int MaelstromState::kPosYFieldNumber;
const int MaelstromState::kFogFieldNumber;
const int MaelstromState::kOilFieldNumber;
const int MaelstromState::kRepairTimestampFieldNumber;
const int MaelstromState::kRefreshTimestampFieldNumber;
const int MaelstromState::kExplorePointFieldNumber;
const int MaelstromState::kTalentFieldNumber;
const int MaelstromState::kEventRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaelstromState::MaelstromState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MaelstromState)
}
MaelstromState::MaelstromState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  talent_(arena),
  event_record_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromState.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MaelstromState)
}
MaelstromState::MaelstromState(const MaelstromState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      talent_(from.talent_),
      event_record_(from.event_record_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fog()) {
    fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fog(),
      GetArenaNoVirtual());
  }
  ::memcpy(&explore_level_, &from.explore_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&explore_point_) -
    reinterpret_cast<char*>(&explore_level_)) + sizeof(explore_point_));
  // @@protoc_insertion_point(copy_constructor:sg.MaelstromState)
}

void MaelstromState::SharedCtor() {
  fog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&explore_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explore_point_) -
      reinterpret_cast<char*>(&explore_level_)) + sizeof(explore_point_));
}

MaelstromState::~MaelstromState() {
  // @@protoc_insertion_point(destructor:sg.MaelstromState)
  SharedDtor();
}

void MaelstromState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  fog_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MaelstromState::ArenaDtor(void* object) {
  MaelstromState* _this = reinterpret_cast< MaelstromState* >(object);
  (void)_this;
}
void MaelstromState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaelstromState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MaelstromState::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaelstromState& MaelstromState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromState.base);
  return *internal_default_instance();
}


void MaelstromState::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MaelstromState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  talent_.Clear();
  event_record_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    fog_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&explore_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explore_point_) -
        reinterpret_cast<char*>(&explore_level_)) + sizeof(explore_point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaelstromState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MaelstromState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 explore_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_explore_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explore_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes fog = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 oil = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_oil();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oil_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 repair_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_repair_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &repair_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 refresh_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_refresh_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &refresh_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 explore_point = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_explore_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explore_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int talent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_talent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int event_record = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MaelstromState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MaelstromState)
  return false;
#undef DO_
}

void MaelstromState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MaelstromState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 explore_level = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->explore_level(), output);
  }

  // optional int32 pos_x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_x(), output);
  }

  // optional int32 pos_y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_y(), output);
  }

  // optional bytes fog = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->fog(), output);
  }

  // optional int32 oil = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->oil(), output);
  }

  // optional sfixed64 repair_timestamp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->repair_timestamp(), output);
  }

  // optional sfixed64 refresh_timestamp = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->refresh_timestamp(), output);
  }

  // optional int32 explore_point = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->explore_point(), output);
  }

  // repeated .sg.pb_pair_int_int talent = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->talent_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->talent(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_int event_record = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_record_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->event_record(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MaelstromState)
}

::google::protobuf::uint8* MaelstromState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MaelstromState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 explore_level = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->explore_level(), target);
  }

  // optional int32 pos_x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_x(), target);
  }

  // optional int32 pos_y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_y(), target);
  }

  // optional bytes fog = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->fog(), target);
  }

  // optional int32 oil = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->oil(), target);
  }

  // optional sfixed64 repair_timestamp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->repair_timestamp(), target);
  }

  // optional sfixed64 refresh_timestamp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->refresh_timestamp(), target);
  }

  // optional int32 explore_point = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->explore_point(), target);
  }

  // repeated .sg.pb_pair_int_int talent = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->talent_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->talent(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_int event_record = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_record_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->event_record(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MaelstromState)
  return target;
}

size_t MaelstromState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MaelstromState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 explore_level = 1;
  if (has_explore_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->explore_level());
  }
  // repeated .sg.pb_pair_int_int talent = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->talent_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->talent(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int event_record = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->event_record_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event_record(static_cast<int>(i)));
    }
  }

  // optional bytes fog = 4;
  if (has_fog()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fog());
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional int32 pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 oil = 5;
    if (has_oil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oil());
    }

    // optional sfixed64 repair_timestamp = 6;
    if (has_repair_timestamp()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 refresh_timestamp = 7;
    if (has_refresh_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int32 explore_point = 8;
    if (has_explore_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->explore_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaelstromState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MaelstromState)
  GOOGLE_DCHECK_NE(&from, this);
  const MaelstromState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaelstromState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MaelstromState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MaelstromState)
    MergeFrom(*source);
  }
}

void MaelstromState::MergeFrom(const MaelstromState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MaelstromState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  talent_.MergeFrom(from.talent_);
  event_record_.MergeFrom(from.event_record_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_fog(from.fog());
    }
    if (cached_has_bits & 0x00000002u) {
      explore_level_ = from.explore_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      oil_ = from.oil_;
    }
    if (cached_has_bits & 0x00000020u) {
      repair_timestamp_ = from.repair_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      refresh_timestamp_ = from.refresh_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      explore_point_ = from.explore_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaelstromState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MaelstromState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaelstromState::CopyFrom(const MaelstromState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MaelstromState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaelstromState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->talent())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->event_record())) return false;
  return true;
}

void MaelstromState::Swap(MaelstromState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaelstromState* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaelstromState::UnsafeArenaSwap(MaelstromState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaelstromState::InternalSwap(MaelstromState* other) {
  using std::swap;
  CastToBase(&talent_)->InternalSwap(CastToBase(&other->talent_));
  CastToBase(&event_record_)->InternalSwap(CastToBase(&other->event_record_));
  fog_.Swap(&other->fog_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(explore_level_, other->explore_level_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(oil_, other->oil_);
  swap(repair_timestamp_, other->repair_timestamp_);
  swap(refresh_timestamp_, other->refresh_timestamp_);
  swap(explore_point_, other->explore_point_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MaelstromState::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaelstromBuilding::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaelstromBuilding::kIdFieldNumber;
const int MaelstromBuilding::kTypeFieldNumber;
const int MaelstromBuilding::kLevelFieldNumber;
const int MaelstromBuilding::kTimestampFieldNumber;
const int MaelstromBuilding::kLevelUpTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaelstromBuilding::MaelstromBuilding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromBuilding.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MaelstromBuilding)
}
MaelstromBuilding::MaelstromBuilding(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromBuilding.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MaelstromBuilding)
}
MaelstromBuilding::MaelstromBuilding(const MaelstromBuilding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:sg.MaelstromBuilding)
}

void MaelstromBuilding::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
}

MaelstromBuilding::~MaelstromBuilding() {
  // @@protoc_insertion_point(destructor:sg.MaelstromBuilding)
  SharedDtor();
}

void MaelstromBuilding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void MaelstromBuilding::ArenaDtor(void* object) {
  MaelstromBuilding* _this = reinterpret_cast< MaelstromBuilding* >(object);
  (void)_this;
}
void MaelstromBuilding::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaelstromBuilding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MaelstromBuilding::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaelstromBuilding& MaelstromBuilding::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromBuilding.base);
  return *internal_default_instance();
}


void MaelstromBuilding::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MaelstromBuilding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&id_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaelstromBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MaelstromBuilding)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 level_up_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_level_up_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &level_up_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MaelstromBuilding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MaelstromBuilding)
  return false;
#undef DO_
}

void MaelstromBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MaelstromBuilding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 level = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional sfixed64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->timestamp(), output);
  }

  // optional sfixed64 level_up_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->level_up_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MaelstromBuilding)
}

::google::protobuf::uint8* MaelstromBuilding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MaelstromBuilding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 level = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional sfixed64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->timestamp(), target);
  }

  // optional sfixed64 level_up_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->level_up_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MaelstromBuilding)
  return target;
}

size_t MaelstromBuilding::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MaelstromBuilding)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_level()) {
    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t MaelstromBuilding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MaelstromBuilding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional sfixed64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 level_up_timestamp = 5;
    if (has_level_up_timestamp()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaelstromBuilding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MaelstromBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  const MaelstromBuilding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaelstromBuilding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MaelstromBuilding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MaelstromBuilding)
    MergeFrom(*source);
  }
}

void MaelstromBuilding::MergeFrom(const MaelstromBuilding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MaelstromBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_up_timestamp_ = from.level_up_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaelstromBuilding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MaelstromBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaelstromBuilding::CopyFrom(const MaelstromBuilding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MaelstromBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaelstromBuilding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  return true;
}

void MaelstromBuilding::Swap(MaelstromBuilding* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaelstromBuilding* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaelstromBuilding::UnsafeArenaSwap(MaelstromBuilding* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaelstromBuilding::InternalSwap(MaelstromBuilding* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(timestamp_, other->timestamp_);
  swap(level_up_timestamp_, other->level_up_timestamp_);
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MaelstromBuilding::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaelstromEvent::InitAsDefaultInstance() {
  ::sg::_MaelstromEvent_default_instance_._instance.get_mutable()->player_ = const_cast< ::sg::UserInfo*>(
      ::sg::UserInfo::internal_default_instance());
}
void MaelstromEvent::unsafe_arena_set_allocated_player(
    ::sg::UserInfo* player) {
  if (GetArenaNoVirtual() == NULL) {
    delete player_;
  }
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MaelstromEvent.player)
}
void MaelstromEvent::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaelstromEvent::kIdFieldNumber;
const int MaelstromEvent::kTypeidFieldNumber;
const int MaelstromEvent::kLevelFieldNumber;
const int MaelstromEvent::kStateFieldNumber;
const int MaelstromEvent::kPosXFieldNumber;
const int MaelstromEvent::kPosYFieldNumber;
const int MaelstromEvent::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaelstromEvent::MaelstromEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MaelstromEvent)
}
MaelstromEvent::MaelstromEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MaelstromEvent)
}
MaelstromEvent::MaelstromEvent(const MaelstromEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::sg::UserInfo(*from.player_);
  } else {
    player_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pos_y_));
  // @@protoc_insertion_point(copy_constructor:sg.MaelstromEvent)
}

void MaelstromEvent::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&player_)) + sizeof(pos_y_));
}

MaelstromEvent::~MaelstromEvent() {
  // @@protoc_insertion_point(destructor:sg.MaelstromEvent)
  SharedDtor();
}

void MaelstromEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete player_;
}

void MaelstromEvent::ArenaDtor(void* object) {
  MaelstromEvent* _this = reinterpret_cast< MaelstromEvent* >(object);
  (void)_this;
}
void MaelstromEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaelstromEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MaelstromEvent::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaelstromEvent& MaelstromEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromEvent.base);
  return *internal_default_instance();
}


void MaelstromEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MaelstromEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_y_) -
        reinterpret_cast<char*>(&id_)) + sizeof(pos_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaelstromEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MaelstromEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserInfo player = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MaelstromEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MaelstromEvent)
  return false;
#undef DO_
}

void MaelstromEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MaelstromEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // required int32 level = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 pos_x = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_x(), output);
  }

  // optional int32 pos_y = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_y(), output);
  }

  // optional .sg.UserInfo player = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MaelstromEvent)
}

::google::protobuf::uint8* MaelstromEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MaelstromEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // required int32 level = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 pos_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_x(), target);
  }

  // optional int32 pos_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_y(), target);
  }

  // optional .sg.UserInfo player = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_player(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MaelstromEvent)
  return target;
}

size_t MaelstromEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MaelstromEvent)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_level()) {
    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t MaelstromEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MaelstromEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .sg.UserInfo player = 7;
  if (has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (_has_bits_[0 / 32] & 112u) {
    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 pos_x = 5;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 6;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaelstromEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MaelstromEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MaelstromEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaelstromEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MaelstromEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MaelstromEvent)
    MergeFrom(*source);
  }
}

void MaelstromEvent::MergeFrom(const MaelstromEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MaelstromEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player()->::sg::UserInfo::MergeFrom(from.player());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      pos_y_ = from.pos_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaelstromEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MaelstromEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaelstromEvent::CopyFrom(const MaelstromEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MaelstromEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaelstromEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void MaelstromEvent::Swap(MaelstromEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaelstromEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaelstromEvent::UnsafeArenaSwap(MaelstromEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaelstromEvent::InternalSwap(MaelstromEvent* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(level_, other->level_);
  swap(state_, other->state_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MaelstromEvent::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaelstromService_MaelstromRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaelstromService_MaelstromRequest::kCmdFieldNumber;
const int MaelstromService_MaelstromRequest::kDirectionFieldNumber;
const int MaelstromService_MaelstromRequest::kBuildingFieldNumber;
const int MaelstromService_MaelstromRequest::kEventIdFieldNumber;
const int MaelstromService_MaelstromRequest::kSuccessFieldNumber;
const int MaelstromService_MaelstromRequest::kTalentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaelstromService_MaelstromRequest::MaelstromService_MaelstromRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromService_MaelstromRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MaelstromService.MaelstromRequest)
}
MaelstromService_MaelstromRequest::MaelstromService_MaelstromRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  direction_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromService_MaelstromRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MaelstromService.MaelstromRequest)
}
MaelstromService_MaelstromRequest::MaelstromService_MaelstromRequest(const MaelstromService_MaelstromRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      direction_(from.direction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&building_, &from.building_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&building_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.MaelstromService.MaelstromRequest)
}

void MaelstromService_MaelstromRequest::SharedCtor() {
  ::memset(&building_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&talent_id_) -
      reinterpret_cast<char*>(&building_)) + sizeof(talent_id_));
  cmd_ = 1;
}

MaelstromService_MaelstromRequest::~MaelstromService_MaelstromRequest() {
  // @@protoc_insertion_point(destructor:sg.MaelstromService.MaelstromRequest)
  SharedDtor();
}

void MaelstromService_MaelstromRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void MaelstromService_MaelstromRequest::ArenaDtor(void* object) {
  MaelstromService_MaelstromRequest* _this = reinterpret_cast< MaelstromService_MaelstromRequest* >(object);
  (void)_this;
}
void MaelstromService_MaelstromRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaelstromService_MaelstromRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MaelstromService_MaelstromRequest::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaelstromService_MaelstromRequest& MaelstromService_MaelstromRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromService_MaelstromRequest.base);
  return *internal_default_instance();
}


void MaelstromService_MaelstromRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MaelstromService.MaelstromRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  direction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&building_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&talent_id_) -
        reinterpret_cast<char*>(&building_)) + sizeof(talent_id_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaelstromService_MaelstromRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MaelstromService.MaelstromRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.MaelstromService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::MaelstromService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::MaelstromService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_direction())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_direction())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 building = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_building();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 talent_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_talent_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MaelstromService.MaelstromRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MaelstromService.MaelstromRequest)
  return false;
#undef DO_
}

void MaelstromService_MaelstromRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MaelstromService.MaelstromRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MaelstromService.CMD cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // repeated int32 direction = 2;
  for (int i = 0, n = this->direction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->direction(i), output);
  }

  // optional int32 building = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->building(), output);
  }

  // optional int32 event_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_id(), output);
  }

  // optional bool success = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->success(), output);
  }

  // optional int32 talent_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->talent_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MaelstromService.MaelstromRequest)
}

::google::protobuf::uint8* MaelstromService_MaelstromRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MaelstromService.MaelstromRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MaelstromService.CMD cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // repeated int32 direction = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->direction_, target);

  // optional int32 building = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->building(), target);
  }

  // optional int32 event_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_id(), target);
  }

  // optional bool success = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->success(), target);
  }

  // optional int32 talent_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->talent_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MaelstromService.MaelstromRequest)
  return target;
}

size_t MaelstromService_MaelstromRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MaelstromService.MaelstromRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.MaelstromService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated int32 direction = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->direction_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->direction_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 building = 3;
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building());
    }

    // optional int32 event_id = 4;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional bool success = 5;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional int32 talent_id = 6;
    if (has_talent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaelstromService_MaelstromRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MaelstromService.MaelstromRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MaelstromService_MaelstromRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaelstromService_MaelstromRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MaelstromService.MaelstromRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MaelstromService.MaelstromRequest)
    MergeFrom(*source);
  }
}

void MaelstromService_MaelstromRequest::MergeFrom(const MaelstromService_MaelstromRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MaelstromService.MaelstromRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  direction_.MergeFrom(from.direction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      building_ = from.building_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      talent_id_ = from.talent_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaelstromService_MaelstromRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MaelstromService.MaelstromRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaelstromService_MaelstromRequest::CopyFrom(const MaelstromService_MaelstromRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MaelstromService.MaelstromRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaelstromService_MaelstromRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void MaelstromService_MaelstromRequest::Swap(MaelstromService_MaelstromRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaelstromService_MaelstromRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaelstromService_MaelstromRequest::UnsafeArenaSwap(MaelstromService_MaelstromRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaelstromService_MaelstromRequest::InternalSwap(MaelstromService_MaelstromRequest* other) {
  using std::swap;
  direction_.InternalSwap(&other->direction_);
  swap(building_, other->building_);
  swap(event_id_, other->event_id_);
  swap(success_, other->success_);
  swap(talent_id_, other->talent_id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MaelstromService_MaelstromRequest::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaelstromService_MaelstromResponse::InitAsDefaultInstance() {
  ::sg::_MaelstromService_MaelstromResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::sg::MaelstromState*>(
      ::sg::MaelstromState::internal_default_instance());
  ::sg::_MaelstromService_MaelstromResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void MaelstromService_MaelstromResponse::unsafe_arena_set_allocated_state(
    ::sg::MaelstromState* state) {
  if (GetArenaNoVirtual() == NULL) {
    delete state_;
  }
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MaelstromService.MaelstromResponse.state)
}
void MaelstromService_MaelstromResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MaelstromService.MaelstromResponse.reward)
}
void MaelstromService_MaelstromResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaelstromService_MaelstromResponse::kResultFieldNumber;
const int MaelstromService_MaelstromResponse::kStepFieldNumber;
const int MaelstromService_MaelstromResponse::kBuildingListFieldNumber;
const int MaelstromService_MaelstromResponse::kStateFieldNumber;
const int MaelstromService_MaelstromResponse::kShipInjuredFieldNumber;
const int MaelstromService_MaelstromResponse::kEventListFieldNumber;
const int MaelstromService_MaelstromResponse::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaelstromService_MaelstromResponse::MaelstromService_MaelstromResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromService_MaelstromResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MaelstromService.MaelstromResponse)
}
MaelstromService_MaelstromResponse::MaelstromService_MaelstromResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  building_list_(arena),
  event_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromService_MaelstromResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MaelstromService.MaelstromResponse)
}
MaelstromService_MaelstromResponse::MaelstromService_MaelstromResponse(const MaelstromService_MaelstromResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      building_list_(from.building_list_),
      event_list_(from.event_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::sg::MaelstromState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&ship_injured_) -
    reinterpret_cast<char*>(&result_)) + sizeof(ship_injured_));
  // @@protoc_insertion_point(copy_constructor:sg.MaelstromService.MaelstromResponse)
}

void MaelstromService_MaelstromResponse::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ship_injured_) -
      reinterpret_cast<char*>(&state_)) + sizeof(ship_injured_));
}

MaelstromService_MaelstromResponse::~MaelstromService_MaelstromResponse() {
  // @@protoc_insertion_point(destructor:sg.MaelstromService.MaelstromResponse)
  SharedDtor();
}

void MaelstromService_MaelstromResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete reward_;
}

void MaelstromService_MaelstromResponse::ArenaDtor(void* object) {
  MaelstromService_MaelstromResponse* _this = reinterpret_cast< MaelstromService_MaelstromResponse* >(object);
  (void)_this;
}
void MaelstromService_MaelstromResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaelstromService_MaelstromResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MaelstromService_MaelstromResponse::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaelstromService_MaelstromResponse& MaelstromService_MaelstromResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromService_MaelstromResponse.base);
  return *internal_default_instance();
}


void MaelstromService_MaelstromResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MaelstromService.MaelstromResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  building_list_.Clear();
  event_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reward_ != NULL);
      reward_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ship_injured_) -
        reinterpret_cast<char*>(&result_)) + sizeof(ship_injured_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaelstromService_MaelstromResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MaelstromService.MaelstromResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 step = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.MaelstromBuilding building_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_building_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MaelstromState state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ship_injured = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ship_injured();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ship_injured_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.MaelstromEvent event_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MaelstromService.MaelstromResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MaelstromService.MaelstromResponse)
  return false;
#undef DO_
}

void MaelstromService_MaelstromResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MaelstromService.MaelstromResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 step = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }

  // repeated .sg.MaelstromBuilding building_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->building_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->building_list(static_cast<int>(i)),
      output);
  }

  // optional .sg.MaelstromState state = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_state(), output);
  }

  // optional bool ship_injured = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ship_injured(), output);
  }

  // repeated .sg.MaelstromEvent event_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->event_list(static_cast<int>(i)),
      output);
  }

  // optional .sg.Reward reward = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MaelstromService.MaelstromResponse)
}

::google::protobuf::uint8* MaelstromService_MaelstromResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MaelstromService.MaelstromResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 step = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }

  // repeated .sg.MaelstromBuilding building_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->building_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->building_list(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.MaelstromState state = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_state(), deterministic, target);
  }

  // optional bool ship_injured = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ship_injured(), target);
  }

  // repeated .sg.MaelstromEvent event_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->event_list(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.Reward reward = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MaelstromService.MaelstromResponse)
  return target;
}

size_t MaelstromService_MaelstromResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MaelstromService.MaelstromResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.MaelstromBuilding building_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->building_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->building_list(static_cast<int>(i)));
    }
  }

  // repeated .sg.MaelstromEvent event_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->event_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.MaelstromState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .sg.Reward reward = 7;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reward_);
    }

  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional int32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional bool ship_injured = 5;
    if (has_ship_injured()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaelstromService_MaelstromResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MaelstromService.MaelstromResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MaelstromService_MaelstromResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaelstromService_MaelstromResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MaelstromService.MaelstromResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MaelstromService.MaelstromResponse)
    MergeFrom(*source);
  }
}

void MaelstromService_MaelstromResponse::MergeFrom(const MaelstromService_MaelstromResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MaelstromService.MaelstromResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  building_list_.MergeFrom(from.building_list_);
  event_list_.MergeFrom(from.event_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::sg::MaelstromState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000010u) {
      ship_injured_ = from.ship_injured_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaelstromService_MaelstromResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MaelstromService.MaelstromResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaelstromService_MaelstromResponse::CopyFrom(const MaelstromService_MaelstromResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MaelstromService.MaelstromResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaelstromService_MaelstromResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->building_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->event_list())) return false;
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void MaelstromService_MaelstromResponse::Swap(MaelstromService_MaelstromResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaelstromService_MaelstromResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaelstromService_MaelstromResponse::UnsafeArenaSwap(MaelstromService_MaelstromResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaelstromService_MaelstromResponse::InternalSwap(MaelstromService_MaelstromResponse* other) {
  using std::swap;
  CastToBase(&building_list_)->InternalSwap(CastToBase(&other->building_list_));
  CastToBase(&event_list_)->InternalSwap(CastToBase(&other->event_list_));
  swap(state_, other->state_);
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(step_, other->step_);
  swap(ship_injured_, other->ship_injured_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MaelstromService_MaelstromResponse::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaelstromService::InitAsDefaultInstance() {
  ::sg::_MaelstromService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::MaelstromService_MaelstromRequest*>(
      ::sg::MaelstromService_MaelstromRequest::internal_default_instance());
  ::sg::_MaelstromService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::MaelstromService_MaelstromResponse*>(
      ::sg::MaelstromService_MaelstromResponse::internal_default_instance());
}
void MaelstromService::unsafe_arena_set_allocated_req(
    ::sg::MaelstromService_MaelstromRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MaelstromService.req)
}
void MaelstromService::unsafe_arena_set_allocated_resp(
    ::sg::MaelstromService_MaelstromResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MaelstromService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaelstromService::kReqFieldNumber;
const int MaelstromService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaelstromService::MaelstromService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MaelstromService)
}
MaelstromService::MaelstromService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MaelstromService)
}
MaelstromService::MaelstromService(const MaelstromService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::MaelstromService_MaelstromRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::MaelstromService_MaelstromResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.MaelstromService)
}

void MaelstromService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

MaelstromService::~MaelstromService() {
  // @@protoc_insertion_point(destructor:sg.MaelstromService)
  SharedDtor();
}

void MaelstromService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void MaelstromService::ArenaDtor(void* object) {
  MaelstromService* _this = reinterpret_cast< MaelstromService* >(object);
  (void)_this;
}
void MaelstromService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaelstromService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MaelstromService::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaelstromService& MaelstromService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromService.base);
  return *internal_default_instance();
}


void MaelstromService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MaelstromService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaelstromService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MaelstromService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MaelstromService.MaelstromRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MaelstromService.MaelstromResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MaelstromService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MaelstromService)
  return false;
#undef DO_
}

void MaelstromService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MaelstromService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MaelstromService.MaelstromRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.MaelstromService.MaelstromResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MaelstromService)
}

::google::protobuf::uint8* MaelstromService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MaelstromService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MaelstromService.MaelstromRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.MaelstromService.MaelstromResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MaelstromService)
  return target;
}

size_t MaelstromService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MaelstromService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.MaelstromService.MaelstromRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.MaelstromService.MaelstromResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaelstromService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MaelstromService)
  GOOGLE_DCHECK_NE(&from, this);
  const MaelstromService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaelstromService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MaelstromService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MaelstromService)
    MergeFrom(*source);
  }
}

void MaelstromService::MergeFrom(const MaelstromService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MaelstromService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::MaelstromService_MaelstromRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::MaelstromService_MaelstromResponse::MergeFrom(from.resp());
    }
  }
}

void MaelstromService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MaelstromService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaelstromService::CopyFrom(const MaelstromService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MaelstromService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaelstromService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void MaelstromService::Swap(MaelstromService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaelstromService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaelstromService::UnsafeArenaSwap(MaelstromService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaelstromService::InternalSwap(MaelstromService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MaelstromService::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShipRestoreNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShipRestoreNotify::ShipRestoreNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_ShipRestoreNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.ShipRestoreNotify)
}
ShipRestoreNotify::ShipRestoreNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_ShipRestoreNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.ShipRestoreNotify)
}
ShipRestoreNotify::ShipRestoreNotify(const ShipRestoreNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.ShipRestoreNotify)
}

void ShipRestoreNotify::SharedCtor() {
}

ShipRestoreNotify::~ShipRestoreNotify() {
  // @@protoc_insertion_point(destructor:sg.ShipRestoreNotify)
  SharedDtor();
}

void ShipRestoreNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ShipRestoreNotify::ArenaDtor(void* object) {
  ShipRestoreNotify* _this = reinterpret_cast< ShipRestoreNotify* >(object);
  (void)_this;
}
void ShipRestoreNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ShipRestoreNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShipRestoreNotify::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShipRestoreNotify& ShipRestoreNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_ShipRestoreNotify.base);
  return *internal_default_instance();
}


void ShipRestoreNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.ShipRestoreNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShipRestoreNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.ShipRestoreNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:sg.ShipRestoreNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.ShipRestoreNotify)
  return false;
#undef DO_
}

void ShipRestoreNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.ShipRestoreNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.ShipRestoreNotify)
}

::google::protobuf::uint8* ShipRestoreNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.ShipRestoreNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.ShipRestoreNotify)
  return target;
}

size_t ShipRestoreNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.ShipRestoreNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShipRestoreNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.ShipRestoreNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ShipRestoreNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShipRestoreNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.ShipRestoreNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.ShipRestoreNotify)
    MergeFrom(*source);
  }
}

void ShipRestoreNotify::MergeFrom(const ShipRestoreNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.ShipRestoreNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ShipRestoreNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.ShipRestoreNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipRestoreNotify::CopyFrom(const ShipRestoreNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.ShipRestoreNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipRestoreNotify::IsInitialized() const {
  return true;
}

void ShipRestoreNotify::Swap(ShipRestoreNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ShipRestoreNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ShipRestoreNotify::UnsafeArenaSwap(ShipRestoreNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ShipRestoreNotify::InternalSwap(ShipRestoreNotify* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShipRestoreNotify::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaelstromBuildingLevelUpNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaelstromBuildingLevelUpNotify::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaelstromBuildingLevelUpNotify::MaelstromBuildingLevelUpNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_MaelstromBuildingLevelUpNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MaelstromBuildingLevelUpNotify)
}
MaelstromBuildingLevelUpNotify::MaelstromBuildingLevelUpNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromBuildingLevelUpNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MaelstromBuildingLevelUpNotify)
}
MaelstromBuildingLevelUpNotify::MaelstromBuildingLevelUpNotify(const MaelstromBuildingLevelUpNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sg.MaelstromBuildingLevelUpNotify)
}

void MaelstromBuildingLevelUpNotify::SharedCtor() {
  id_ = 0;
}

MaelstromBuildingLevelUpNotify::~MaelstromBuildingLevelUpNotify() {
  // @@protoc_insertion_point(destructor:sg.MaelstromBuildingLevelUpNotify)
  SharedDtor();
}

void MaelstromBuildingLevelUpNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void MaelstromBuildingLevelUpNotify::ArenaDtor(void* object) {
  MaelstromBuildingLevelUpNotify* _this = reinterpret_cast< MaelstromBuildingLevelUpNotify* >(object);
  (void)_this;
}
void MaelstromBuildingLevelUpNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaelstromBuildingLevelUpNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MaelstromBuildingLevelUpNotify::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaelstromBuildingLevelUpNotify& MaelstromBuildingLevelUpNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_MaelstromBuildingLevelUpNotify.base);
  return *internal_default_instance();
}


void MaelstromBuildingLevelUpNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MaelstromBuildingLevelUpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaelstromBuildingLevelUpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MaelstromBuildingLevelUpNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MaelstromBuildingLevelUpNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MaelstromBuildingLevelUpNotify)
  return false;
#undef DO_
}

void MaelstromBuildingLevelUpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MaelstromBuildingLevelUpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MaelstromBuildingLevelUpNotify)
}

::google::protobuf::uint8* MaelstromBuildingLevelUpNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MaelstromBuildingLevelUpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MaelstromBuildingLevelUpNotify)
  return target;
}

size_t MaelstromBuildingLevelUpNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MaelstromBuildingLevelUpNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaelstromBuildingLevelUpNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MaelstromBuildingLevelUpNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MaelstromBuildingLevelUpNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaelstromBuildingLevelUpNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MaelstromBuildingLevelUpNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MaelstromBuildingLevelUpNotify)
    MergeFrom(*source);
  }
}

void MaelstromBuildingLevelUpNotify::MergeFrom(const MaelstromBuildingLevelUpNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MaelstromBuildingLevelUpNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void MaelstromBuildingLevelUpNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MaelstromBuildingLevelUpNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaelstromBuildingLevelUpNotify::CopyFrom(const MaelstromBuildingLevelUpNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MaelstromBuildingLevelUpNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaelstromBuildingLevelUpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MaelstromBuildingLevelUpNotify::Swap(MaelstromBuildingLevelUpNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaelstromBuildingLevelUpNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaelstromBuildingLevelUpNotify::UnsafeArenaSwap(MaelstromBuildingLevelUpNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaelstromBuildingLevelUpNotify::InternalSwap(MaelstromBuildingLevelUpNotify* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MaelstromBuildingLevelUpNotify::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShipInjuredNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShipInjuredNotify::kPosXFieldNumber;
const int ShipInjuredNotify::kPosYFieldNumber;
const int ShipInjuredNotify::kRepairTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShipInjuredNotify::ShipInjuredNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_ShipInjuredNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.ShipInjuredNotify)
}
ShipInjuredNotify::ShipInjuredNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_ShipInjuredNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.ShipInjuredNotify)
}
ShipInjuredNotify::ShipInjuredNotify(const ShipInjuredNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pos_x_, &from.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&repair_timestamp_) -
    reinterpret_cast<char*>(&pos_x_)) + sizeof(repair_timestamp_));
  // @@protoc_insertion_point(copy_constructor:sg.ShipInjuredNotify)
}

void ShipInjuredNotify::SharedCtor() {
  ::memset(&pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repair_timestamp_) -
      reinterpret_cast<char*>(&pos_x_)) + sizeof(repair_timestamp_));
}

ShipInjuredNotify::~ShipInjuredNotify() {
  // @@protoc_insertion_point(destructor:sg.ShipInjuredNotify)
  SharedDtor();
}

void ShipInjuredNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ShipInjuredNotify::ArenaDtor(void* object) {
  ShipInjuredNotify* _this = reinterpret_cast< ShipInjuredNotify* >(object);
  (void)_this;
}
void ShipInjuredNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ShipInjuredNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShipInjuredNotify::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShipInjuredNotify& ShipInjuredNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_ShipInjuredNotify.base);
  return *internal_default_instance();
}


void ShipInjuredNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.ShipInjuredNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&pos_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&repair_timestamp_) -
        reinterpret_cast<char*>(&pos_x_)) + sizeof(repair_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShipInjuredNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.ShipInjuredNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 repair_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_repair_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &repair_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.ShipInjuredNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.ShipInjuredNotify)
  return false;
#undef DO_
}

void ShipInjuredNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.ShipInjuredNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pos_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos_x(), output);
  }

  // optional int32 pos_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_y(), output);
  }

  // optional sfixed64 repair_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->repair_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.ShipInjuredNotify)
}

::google::protobuf::uint8* ShipInjuredNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.ShipInjuredNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pos_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos_x(), target);
  }

  // optional int32 pos_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_y(), target);
  }

  // optional sfixed64 repair_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->repair_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.ShipInjuredNotify)
  return target;
}

size_t ShipInjuredNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.ShipInjuredNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 pos_x = 1;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 2;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional sfixed64 repair_timestamp = 3;
    if (has_repair_timestamp()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShipInjuredNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.ShipInjuredNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ShipInjuredNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShipInjuredNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.ShipInjuredNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.ShipInjuredNotify)
    MergeFrom(*source);
  }
}

void ShipInjuredNotify::MergeFrom(const ShipInjuredNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.ShipInjuredNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      repair_timestamp_ = from.repair_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShipInjuredNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.ShipInjuredNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipInjuredNotify::CopyFrom(const ShipInjuredNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.ShipInjuredNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipInjuredNotify::IsInitialized() const {
  return true;
}

void ShipInjuredNotify::Swap(ShipInjuredNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ShipInjuredNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ShipInjuredNotify::UnsafeArenaSwap(ShipInjuredNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ShipInjuredNotify::InternalSwap(ShipInjuredNotify* other) {
  using std::swap;
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(repair_timestamp_, other->repair_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShipInjuredNotify::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OilOutputNotify::InitAsDefaultInstance() {
  ::sg::_OilOutputNotify_default_instance_._instance.get_mutable()->output_ = const_cast< ::sg::Item*>(
      ::sg::Item::internal_default_instance());
}
void OilOutputNotify::unsafe_arena_set_allocated_output(
    ::sg::Item* output) {
  if (GetArenaNoVirtual() == NULL) {
    delete output_;
  }
  output_ = output;
  if (output) {
    set_has_output();
  } else {
    clear_has_output();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.OilOutputNotify.output)
}
void OilOutputNotify::clear_output() {
  if (output_ != NULL) output_->Clear();
  clear_has_output();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OilOutputNotify::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OilOutputNotify::OilOutputNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Maelstrom_2eproto::scc_info_OilOutputNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.OilOutputNotify)
}
OilOutputNotify::OilOutputNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_OilOutputNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.OilOutputNotify)
}
OilOutputNotify::OilOutputNotify(const OilOutputNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output()) {
    output_ = new ::sg::Item(*from.output_);
  } else {
    output_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.OilOutputNotify)
}

void OilOutputNotify::SharedCtor() {
  output_ = NULL;
}

OilOutputNotify::~OilOutputNotify() {
  // @@protoc_insertion_point(destructor:sg.OilOutputNotify)
  SharedDtor();
}

void OilOutputNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete output_;
}

void OilOutputNotify::ArenaDtor(void* object) {
  OilOutputNotify* _this = reinterpret_cast< OilOutputNotify* >(object);
  (void)_this;
}
void OilOutputNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OilOutputNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OilOutputNotify::descriptor() {
  ::protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OilOutputNotify& OilOutputNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Maelstrom_2eproto::scc_info_OilOutputNotify.base);
  return *internal_default_instance();
}


void OilOutputNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.OilOutputNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(output_ != NULL);
    output_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OilOutputNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.OilOutputNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.Item output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.OilOutputNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.OilOutputNotify)
  return false;
#undef DO_
}

void OilOutputNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.OilOutputNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Item output = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.OilOutputNotify)
}

::google::protobuf::uint8* OilOutputNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.OilOutputNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Item output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_output(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.OilOutputNotify)
  return target;
}

size_t OilOutputNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.OilOutputNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.Item output = 1;
  if (has_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OilOutputNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.OilOutputNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const OilOutputNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OilOutputNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.OilOutputNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.OilOutputNotify)
    MergeFrom(*source);
  }
}

void OilOutputNotify::MergeFrom(const OilOutputNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.OilOutputNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_output()) {
    mutable_output()->::sg::Item::MergeFrom(from.output());
  }
}

void OilOutputNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.OilOutputNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OilOutputNotify::CopyFrom(const OilOutputNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.OilOutputNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OilOutputNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_output()) {
    if (!this->output_->IsInitialized()) return false;
  }
  return true;
}

void OilOutputNotify::Swap(OilOutputNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OilOutputNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OilOutputNotify::UnsafeArenaSwap(OilOutputNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OilOutputNotify::InternalSwap(OilOutputNotify* other) {
  using std::swap;
  swap(output_, other->output_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OilOutputNotify::GetMetadata() const {
  protobuf_Maelstrom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Maelstrom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MaelstromState* Arena::CreateMaybeMessage< ::sg::MaelstromState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MaelstromState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MaelstromBuilding* Arena::CreateMaybeMessage< ::sg::MaelstromBuilding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MaelstromBuilding >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MaelstromEvent* Arena::CreateMaybeMessage< ::sg::MaelstromEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MaelstromEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MaelstromService_MaelstromRequest* Arena::CreateMaybeMessage< ::sg::MaelstromService_MaelstromRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MaelstromService_MaelstromRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MaelstromService_MaelstromResponse* Arena::CreateMaybeMessage< ::sg::MaelstromService_MaelstromResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MaelstromService_MaelstromResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MaelstromService* Arena::CreateMaybeMessage< ::sg::MaelstromService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MaelstromService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::ShipRestoreNotify* Arena::CreateMaybeMessage< ::sg::ShipRestoreNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::ShipRestoreNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MaelstromBuildingLevelUpNotify* Arena::CreateMaybeMessage< ::sg::MaelstromBuildingLevelUpNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MaelstromBuildingLevelUpNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::ShipInjuredNotify* Arena::CreateMaybeMessage< ::sg::ShipInjuredNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::ShipInjuredNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::OilOutputNotify* Arena::CreateMaybeMessage< ::sg::OilOutputNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::OilOutputNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
