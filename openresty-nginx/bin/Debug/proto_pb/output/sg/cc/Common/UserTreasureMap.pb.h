// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserTreasureMap.proto

#ifndef PROTOBUF_INCLUDED_UserTreasureMap_2eproto
#define PROTOBUF_INCLUDED_UserTreasureMap_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_UserTreasureMap_2eproto 

namespace protobuf_UserTreasureMap_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_UserTreasureMap_2eproto
namespace sg {
class TreasureHuntInfo;
class TreasureHuntInfoDefaultTypeInternal;
extern TreasureHuntInfoDefaultTypeInternal _TreasureHuntInfo_default_instance_;
class TreasureMapStateNotify;
class TreasureMapStateNotifyDefaultTypeInternal;
extern TreasureMapStateNotifyDefaultTypeInternal _TreasureMapStateNotify_default_instance_;
class UserTreasureMapService;
class UserTreasureMapServiceDefaultTypeInternal;
extern UserTreasureMapServiceDefaultTypeInternal _UserTreasureMapService_default_instance_;
class UserTreasureMapService_TreasureMapRequest;
class UserTreasureMapService_TreasureMapRequestDefaultTypeInternal;
extern UserTreasureMapService_TreasureMapRequestDefaultTypeInternal _UserTreasureMapService_TreasureMapRequest_default_instance_;
class UserTreasureMapService_TreasureMapResponse;
class UserTreasureMapService_TreasureMapResponseDefaultTypeInternal;
extern UserTreasureMapService_TreasureMapResponseDefaultTypeInternal _UserTreasureMapService_TreasureMapResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::TreasureHuntInfo* Arena::CreateMaybeMessage<::sg::TreasureHuntInfo>(Arena*);
template<> ::sg::TreasureMapStateNotify* Arena::CreateMaybeMessage<::sg::TreasureMapStateNotify>(Arena*);
template<> ::sg::UserTreasureMapService* Arena::CreateMaybeMessage<::sg::UserTreasureMapService>(Arena*);
template<> ::sg::UserTreasureMapService_TreasureMapRequest* Arena::CreateMaybeMessage<::sg::UserTreasureMapService_TreasureMapRequest>(Arena*);
template<> ::sg::UserTreasureMapService_TreasureMapResponse* Arena::CreateMaybeMessage<::sg::UserTreasureMapService_TreasureMapResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum UserTreasureMapService_HUNT_COMMAND {
  UserTreasureMapService_HUNT_COMMAND_QUERY = 1,
  UserTreasureMapService_HUNT_COMMAND_START = 2,
  UserTreasureMapService_HUNT_COMMAND_COMPLETE = 3,
  UserTreasureMapService_HUNT_COMMAND_CANCEL = 4
};
bool UserTreasureMapService_HUNT_COMMAND_IsValid(int value);
const UserTreasureMapService_HUNT_COMMAND UserTreasureMapService_HUNT_COMMAND_HUNT_COMMAND_MIN = UserTreasureMapService_HUNT_COMMAND_QUERY;
const UserTreasureMapService_HUNT_COMMAND UserTreasureMapService_HUNT_COMMAND_HUNT_COMMAND_MAX = UserTreasureMapService_HUNT_COMMAND_CANCEL;
const int UserTreasureMapService_HUNT_COMMAND_HUNT_COMMAND_ARRAYSIZE = UserTreasureMapService_HUNT_COMMAND_HUNT_COMMAND_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserTreasureMapService_HUNT_COMMAND_descriptor();
inline const ::std::string& UserTreasureMapService_HUNT_COMMAND_Name(UserTreasureMapService_HUNT_COMMAND value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserTreasureMapService_HUNT_COMMAND_descriptor(), value);
}
inline bool UserTreasureMapService_HUNT_COMMAND_Parse(
    const ::std::string& name, UserTreasureMapService_HUNT_COMMAND* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserTreasureMapService_HUNT_COMMAND>(
    UserTreasureMapService_HUNT_COMMAND_descriptor(), name, value);
}
enum TREASURE_MAP_TYPE {
  TREASURE_MAP_TYPE_UNKNOWN = 0,
  TREASURE_MAP_TYPE_COMPASS = 1,
  TREASURE_MAP_TYPE_MAP = 2
};
bool TREASURE_MAP_TYPE_IsValid(int value);
const TREASURE_MAP_TYPE TREASURE_MAP_TYPE_MIN = TREASURE_MAP_TYPE_UNKNOWN;
const TREASURE_MAP_TYPE TREASURE_MAP_TYPE_MAX = TREASURE_MAP_TYPE_MAP;
const int TREASURE_MAP_TYPE_ARRAYSIZE = TREASURE_MAP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TREASURE_MAP_TYPE_descriptor();
inline const ::std::string& TREASURE_MAP_TYPE_Name(TREASURE_MAP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TREASURE_MAP_TYPE_descriptor(), value);
}
inline bool TREASURE_MAP_TYPE_Parse(
    const ::std::string& name, TREASURE_MAP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TREASURE_MAP_TYPE>(
    TREASURE_MAP_TYPE_descriptor(), name, value);
}
enum TREASURE_LOCATION_TYPE {
  TREASURE_LOCATION_TYPE_UNKNOWN = 0,
  TREASURE_LOCATION_TYPE_SEA_AREA = 1,
  TREASURE_LOCATION_TYPE_HARBOR = 2
};
bool TREASURE_LOCATION_TYPE_IsValid(int value);
const TREASURE_LOCATION_TYPE TREASURE_LOCATION_TYPE_MIN = TREASURE_LOCATION_TYPE_UNKNOWN;
const TREASURE_LOCATION_TYPE TREASURE_LOCATION_TYPE_MAX = TREASURE_LOCATION_TYPE_HARBOR;
const int TREASURE_LOCATION_TYPE_ARRAYSIZE = TREASURE_LOCATION_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TREASURE_LOCATION_TYPE_descriptor();
inline const ::std::string& TREASURE_LOCATION_TYPE_Name(TREASURE_LOCATION_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TREASURE_LOCATION_TYPE_descriptor(), value);
}
inline bool TREASURE_LOCATION_TYPE_Parse(
    const ::std::string& name, TREASURE_LOCATION_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TREASURE_LOCATION_TYPE>(
    TREASURE_LOCATION_TYPE_descriptor(), name, value);
}
enum TREASURE_TRIGGER_TYPE {
  TREASURE_TRIGGER_TYPE_NONE = 0,
  TREASURE_TRIGGER_TYPE_FIGHT = 1,
  TREASURE_TRIGGER_TYPE_TREASURE = 2,
  TREASURE_TRIGGER_TYPE_TRAP = 3
};
bool TREASURE_TRIGGER_TYPE_IsValid(int value);
const TREASURE_TRIGGER_TYPE TREASURE_TRIGGER_TYPE_MIN = TREASURE_TRIGGER_TYPE_NONE;
const TREASURE_TRIGGER_TYPE TREASURE_TRIGGER_TYPE_MAX = TREASURE_TRIGGER_TYPE_TRAP;
const int TREASURE_TRIGGER_TYPE_ARRAYSIZE = TREASURE_TRIGGER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TREASURE_TRIGGER_TYPE_descriptor();
inline const ::std::string& TREASURE_TRIGGER_TYPE_Name(TREASURE_TRIGGER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TREASURE_TRIGGER_TYPE_descriptor(), value);
}
inline bool TREASURE_TRIGGER_TYPE_Parse(
    const ::std::string& name, TREASURE_TRIGGER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TREASURE_TRIGGER_TYPE>(
    TREASURE_TRIGGER_TYPE_descriptor(), name, value);
}
enum TREASURE_HUNT_STATE {
  TREASURE_HUNT_STATE_IDLE = 0,
  TREASURE_HUNT_STATE_HUNT = 1,
  TREASURE_HUNT_STATE_FIGHT = 2,
  TREASURE_HUNT_STATE_HARVEST = 3,
  TREASURE_HUNT_STATE_TRAPPED = 4,
  TREASURE_HUNT_STATE_FIGHT_OVER = 5,
  TREASURE_HUNT_STATE_CANCELED = 6
};
bool TREASURE_HUNT_STATE_IsValid(int value);
const TREASURE_HUNT_STATE TREASURE_HUNT_STATE_MIN = TREASURE_HUNT_STATE_IDLE;
const TREASURE_HUNT_STATE TREASURE_HUNT_STATE_MAX = TREASURE_HUNT_STATE_CANCELED;
const int TREASURE_HUNT_STATE_ARRAYSIZE = TREASURE_HUNT_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TREASURE_HUNT_STATE_descriptor();
inline const ::std::string& TREASURE_HUNT_STATE_Name(TREASURE_HUNT_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TREASURE_HUNT_STATE_descriptor(), value);
}
inline bool TREASURE_HUNT_STATE_Parse(
    const ::std::string& name, TREASURE_HUNT_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TREASURE_HUNT_STATE>(
    TREASURE_HUNT_STATE_descriptor(), name, value);
}
enum TREASURE_TRAP_TYPE {
  TREASURE_TRAP_TYPE_NONE = 0,
  TREASURE_TRAP_TYPE_REEF = 1,
  TREASURE_TRAP_TYPE_POISON = 2
};
bool TREASURE_TRAP_TYPE_IsValid(int value);
const TREASURE_TRAP_TYPE TREASURE_TRAP_TYPE_MIN = TREASURE_TRAP_TYPE_NONE;
const TREASURE_TRAP_TYPE TREASURE_TRAP_TYPE_MAX = TREASURE_TRAP_TYPE_POISON;
const int TREASURE_TRAP_TYPE_ARRAYSIZE = TREASURE_TRAP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TREASURE_TRAP_TYPE_descriptor();
inline const ::std::string& TREASURE_TRAP_TYPE_Name(TREASURE_TRAP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TREASURE_TRAP_TYPE_descriptor(), value);
}
inline bool TREASURE_TRAP_TYPE_Parse(
    const ::std::string& name, TREASURE_TRAP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TREASURE_TRAP_TYPE>(
    TREASURE_TRAP_TYPE_descriptor(), name, value);
}
// ===================================================================

class TreasureHuntInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.TreasureHuntInfo) */ {
 public:
  TreasureHuntInfo();
  virtual ~TreasureHuntInfo();

  TreasureHuntInfo(const TreasureHuntInfo& from);

  inline TreasureHuntInfo& operator=(const TreasureHuntInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreasureHuntInfo(TreasureHuntInfo&& from) noexcept
    : TreasureHuntInfo() {
    *this = ::std::move(from);
  }

  inline TreasureHuntInfo& operator=(TreasureHuntInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureHuntInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreasureHuntInfo* internal_default_instance() {
    return reinterpret_cast<const TreasureHuntInfo*>(
               &_TreasureHuntInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(TreasureHuntInfo* other);
  void Swap(TreasureHuntInfo* other);
  friend void swap(TreasureHuntInfo& a, TreasureHuntInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreasureHuntInfo* New() const final {
    return CreateMaybeMessage<TreasureHuntInfo>(NULL);
  }

  TreasureHuntInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TreasureHuntInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TreasureHuntInfo& from);
  void MergeFrom(const TreasureHuntInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreasureHuntInfo* other);
  protected:
  explicit TreasureHuntInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 huntid = 1;
  bool has_huntid() const;
  void clear_huntid();
  static const int kHuntidFieldNumber = 1;
  ::google::protobuf::int32 huntid() const;
  void set_huntid(::google::protobuf::int32 value);

  // required int32 toolid = 2;
  bool has_toolid() const;
  void clear_toolid();
  static const int kToolidFieldNumber = 2;
  ::google::protobuf::int32 toolid() const;
  void set_toolid(::google::protobuf::int32 value);

  // optional .sg.TREASURE_HUNT_STATE state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::sg::TREASURE_HUNT_STATE state() const;
  void set_state(::sg::TREASURE_HUNT_STATE value);

  // optional int32 areaid = 4;
  bool has_areaid() const;
  void clear_areaid();
  static const int kAreaidFieldNumber = 4;
  ::google::protobuf::int32 areaid() const;
  void set_areaid(::google::protobuf::int32 value);

  // optional int32 coord_x = 5;
  bool has_coord_x() const;
  void clear_coord_x();
  static const int kCoordXFieldNumber = 5;
  ::google::protobuf::int32 coord_x() const;
  void set_coord_x(::google::protobuf::int32 value);

  // optional int32 coord_y = 6;
  bool has_coord_y() const;
  void clear_coord_y();
  static const int kCoordYFieldNumber = 6;
  ::google::protobuf::int32 coord_y() const;
  void set_coord_y(::google::protobuf::int32 value);

  // optional int32 left_num2 = 33;
  bool has_left_num2() const;
  void clear_left_num2();
  static const int kLeftNum2FieldNumber = 33;
  ::google::protobuf::int32 left_num2() const;
  void set_left_num2(::google::protobuf::int32 value);

  // optional int32 monster_group = 11;
  bool has_monster_group() const;
  void clear_monster_group();
  static const int kMonsterGroupFieldNumber = 11;
  ::google::protobuf::int32 monster_group() const;
  void set_monster_group(::google::protobuf::int32 value);

  // optional .sg.TREASURE_TRAP_TYPE trap_type = 21;
  bool has_trap_type() const;
  void clear_trap_type();
  static const int kTrapTypeFieldNumber = 21;
  ::sg::TREASURE_TRAP_TYPE trap_type() const;
  void set_trap_type(::sg::TREASURE_TRAP_TYPE value);

  // optional int32 trap_lost_num = 22;
  bool has_trap_lost_num() const;
  void clear_trap_lost_num();
  static const int kTrapLostNumFieldNumber = 22;
  ::google::protobuf::int32 trap_lost_num() const;
  void set_trap_lost_num(::google::protobuf::int32 value);

  // optional int32 left_num1 = 32;
  bool has_left_num1() const;
  void clear_left_num1();
  static const int kLeftNum1FieldNumber = 32;
  ::google::protobuf::int32 left_num1() const;
  void set_left_num1(::google::protobuf::int32 value);

  // optional sfixed64 optime = 31;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 31;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sg.TreasureHuntInfo)
 private:
  void set_has_huntid();
  void clear_has_huntid();
  void set_has_toolid();
  void clear_has_toolid();
  void set_has_state();
  void clear_has_state();
  void set_has_areaid();
  void clear_has_areaid();
  void set_has_coord_x();
  void clear_has_coord_x();
  void set_has_coord_y();
  void clear_has_coord_y();
  void set_has_monster_group();
  void clear_has_monster_group();
  void set_has_trap_type();
  void clear_has_trap_type();
  void set_has_trap_lost_num();
  void clear_has_trap_lost_num();
  void set_has_optime();
  void clear_has_optime();
  void set_has_left_num1();
  void clear_has_left_num1();
  void set_has_left_num2();
  void clear_has_left_num2();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 huntid_;
  ::google::protobuf::int32 toolid_;
  int state_;
  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int32 coord_x_;
  ::google::protobuf::int32 coord_y_;
  ::google::protobuf::int32 left_num2_;
  ::google::protobuf::int32 monster_group_;
  int trap_type_;
  ::google::protobuf::int32 trap_lost_num_;
  ::google::protobuf::int32 left_num1_;
  ::google::protobuf::int64 optime_;
  friend struct ::protobuf_UserTreasureMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserTreasureMapService_TreasureMapRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserTreasureMapService.TreasureMapRequest) */ {
 public:
  UserTreasureMapService_TreasureMapRequest();
  virtual ~UserTreasureMapService_TreasureMapRequest();

  UserTreasureMapService_TreasureMapRequest(const UserTreasureMapService_TreasureMapRequest& from);

  inline UserTreasureMapService_TreasureMapRequest& operator=(const UserTreasureMapService_TreasureMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTreasureMapService_TreasureMapRequest(UserTreasureMapService_TreasureMapRequest&& from) noexcept
    : UserTreasureMapService_TreasureMapRequest() {
    *this = ::std::move(from);
  }

  inline UserTreasureMapService_TreasureMapRequest& operator=(UserTreasureMapService_TreasureMapRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTreasureMapService_TreasureMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTreasureMapService_TreasureMapRequest* internal_default_instance() {
    return reinterpret_cast<const UserTreasureMapService_TreasureMapRequest*>(
               &_UserTreasureMapService_TreasureMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(UserTreasureMapService_TreasureMapRequest* other);
  void Swap(UserTreasureMapService_TreasureMapRequest* other);
  friend void swap(UserTreasureMapService_TreasureMapRequest& a, UserTreasureMapService_TreasureMapRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTreasureMapService_TreasureMapRequest* New() const final {
    return CreateMaybeMessage<UserTreasureMapService_TreasureMapRequest>(NULL);
  }

  UserTreasureMapService_TreasureMapRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTreasureMapService_TreasureMapRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTreasureMapService_TreasureMapRequest& from);
  void MergeFrom(const UserTreasureMapService_TreasureMapRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTreasureMapService_TreasureMapRequest* other);
  protected:
  explicit UserTreasureMapService_TreasureMapRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.TREASURE_MAP_TYPE map_type = 2;
  bool has_map_type() const;
  void clear_map_type();
  static const int kMapTypeFieldNumber = 2;
  ::sg::TREASURE_MAP_TYPE map_type() const;
  void set_map_type(::sg::TREASURE_MAP_TYPE value);

  // optional int32 areaid = 3;
  bool has_areaid() const;
  void clear_areaid();
  static const int kAreaidFieldNumber = 3;
  ::google::protobuf::int32 areaid() const;
  void set_areaid(::google::protobuf::int32 value);

  // optional int32 coord_x = 4;
  bool has_coord_x() const;
  void clear_coord_x();
  static const int kCoordXFieldNumber = 4;
  ::google::protobuf::int32 coord_x() const;
  void set_coord_x(::google::protobuf::int32 value);

  // optional int32 coord_y = 5;
  bool has_coord_y() const;
  void clear_coord_y();
  static const int kCoordYFieldNumber = 5;
  ::google::protobuf::int32 coord_y() const;
  void set_coord_y(::google::protobuf::int32 value);

  // required .sg.UserTreasureMapService.HUNT_COMMAND cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserTreasureMapService_HUNT_COMMAND cmd() const;
  void set_cmd(::sg::UserTreasureMapService_HUNT_COMMAND value);

  // @@protoc_insertion_point(class_scope:sg.UserTreasureMapService.TreasureMapRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_map_type();
  void clear_has_map_type();
  void set_has_areaid();
  void clear_has_areaid();
  void set_has_coord_x();
  void clear_has_coord_x();
  void set_has_coord_y();
  void clear_has_coord_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int map_type_;
  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int32 coord_x_;
  ::google::protobuf::int32 coord_y_;
  int cmd_;
  friend struct ::protobuf_UserTreasureMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserTreasureMapService_TreasureMapResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserTreasureMapService.TreasureMapResponse) */ {
 public:
  UserTreasureMapService_TreasureMapResponse();
  virtual ~UserTreasureMapService_TreasureMapResponse();

  UserTreasureMapService_TreasureMapResponse(const UserTreasureMapService_TreasureMapResponse& from);

  inline UserTreasureMapService_TreasureMapResponse& operator=(const UserTreasureMapService_TreasureMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTreasureMapService_TreasureMapResponse(UserTreasureMapService_TreasureMapResponse&& from) noexcept
    : UserTreasureMapService_TreasureMapResponse() {
    *this = ::std::move(from);
  }

  inline UserTreasureMapService_TreasureMapResponse& operator=(UserTreasureMapService_TreasureMapResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTreasureMapService_TreasureMapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTreasureMapService_TreasureMapResponse* internal_default_instance() {
    return reinterpret_cast<const UserTreasureMapService_TreasureMapResponse*>(
               &_UserTreasureMapService_TreasureMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(UserTreasureMapService_TreasureMapResponse* other);
  void Swap(UserTreasureMapService_TreasureMapResponse* other);
  friend void swap(UserTreasureMapService_TreasureMapResponse& a, UserTreasureMapService_TreasureMapResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTreasureMapService_TreasureMapResponse* New() const final {
    return CreateMaybeMessage<UserTreasureMapService_TreasureMapResponse>(NULL);
  }

  UserTreasureMapService_TreasureMapResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTreasureMapService_TreasureMapResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTreasureMapService_TreasureMapResponse& from);
  void MergeFrom(const UserTreasureMapService_TreasureMapResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTreasureMapService_TreasureMapResponse* other);
  protected:
  explicit UserTreasureMapService_TreasureMapResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.TreasureHuntInfo hunt_info = 2;
  bool has_hunt_info() const;
  void clear_hunt_info();
  static const int kHuntInfoFieldNumber = 2;
  private:
  const ::sg::TreasureHuntInfo& _internal_hunt_info() const;
  public:
  const ::sg::TreasureHuntInfo& hunt_info() const;
  ::sg::TreasureHuntInfo* release_hunt_info();
  ::sg::TreasureHuntInfo* mutable_hunt_info();
  void set_allocated_hunt_info(::sg::TreasureHuntInfo* hunt_info);
  void unsafe_arena_set_allocated_hunt_info(
      ::sg::TreasureHuntInfo* hunt_info);
  ::sg::TreasureHuntInfo* unsafe_arena_release_hunt_info();

  // optional .sg.Reward out_drop = 11;
  bool has_out_drop() const;
  void clear_out_drop();
  static const int kOutDropFieldNumber = 11;
  private:
  const ::sg::Reward& _internal_out_drop() const;
  public:
  const ::sg::Reward& out_drop() const;
  ::sg::Reward* release_out_drop();
  ::sg::Reward* mutable_out_drop();
  void set_allocated_out_drop(::sg::Reward* out_drop);
  void unsafe_arena_set_allocated_out_drop(
      ::sg::Reward* out_drop);
  ::sg::Reward* unsafe_arena_release_out_drop();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserTreasureMapService.TreasureMapResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_hunt_info();
  void clear_has_hunt_info();
  void set_has_out_drop();
  void clear_has_out_drop();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::TreasureHuntInfo* hunt_info_;
  ::sg::Reward* out_drop_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_UserTreasureMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserTreasureMapService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserTreasureMapService) */ {
 public:
  UserTreasureMapService();
  virtual ~UserTreasureMapService();

  UserTreasureMapService(const UserTreasureMapService& from);

  inline UserTreasureMapService& operator=(const UserTreasureMapService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTreasureMapService(UserTreasureMapService&& from) noexcept
    : UserTreasureMapService() {
    *this = ::std::move(from);
  }

  inline UserTreasureMapService& operator=(UserTreasureMapService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTreasureMapService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTreasureMapService* internal_default_instance() {
    return reinterpret_cast<const UserTreasureMapService*>(
               &_UserTreasureMapService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UserTreasureMapService* other);
  void Swap(UserTreasureMapService* other);
  friend void swap(UserTreasureMapService& a, UserTreasureMapService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTreasureMapService* New() const final {
    return CreateMaybeMessage<UserTreasureMapService>(NULL);
  }

  UserTreasureMapService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTreasureMapService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTreasureMapService& from);
  void MergeFrom(const UserTreasureMapService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTreasureMapService* other);
  protected:
  explicit UserTreasureMapService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserTreasureMapService_TreasureMapRequest TreasureMapRequest;
  typedef UserTreasureMapService_TreasureMapResponse TreasureMapResponse;

  typedef UserTreasureMapService_HUNT_COMMAND HUNT_COMMAND;
  static const HUNT_COMMAND QUERY =
    UserTreasureMapService_HUNT_COMMAND_QUERY;
  static const HUNT_COMMAND START =
    UserTreasureMapService_HUNT_COMMAND_START;
  static const HUNT_COMMAND COMPLETE =
    UserTreasureMapService_HUNT_COMMAND_COMPLETE;
  static const HUNT_COMMAND CANCEL =
    UserTreasureMapService_HUNT_COMMAND_CANCEL;
  static inline bool HUNT_COMMAND_IsValid(int value) {
    return UserTreasureMapService_HUNT_COMMAND_IsValid(value);
  }
  static const HUNT_COMMAND HUNT_COMMAND_MIN =
    UserTreasureMapService_HUNT_COMMAND_HUNT_COMMAND_MIN;
  static const HUNT_COMMAND HUNT_COMMAND_MAX =
    UserTreasureMapService_HUNT_COMMAND_HUNT_COMMAND_MAX;
  static const int HUNT_COMMAND_ARRAYSIZE =
    UserTreasureMapService_HUNT_COMMAND_HUNT_COMMAND_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HUNT_COMMAND_descriptor() {
    return UserTreasureMapService_HUNT_COMMAND_descriptor();
  }
  static inline const ::std::string& HUNT_COMMAND_Name(HUNT_COMMAND value) {
    return UserTreasureMapService_HUNT_COMMAND_Name(value);
  }
  static inline bool HUNT_COMMAND_Parse(const ::std::string& name,
      HUNT_COMMAND* value) {
    return UserTreasureMapService_HUNT_COMMAND_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserTreasureMapService.TreasureMapRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserTreasureMapService_TreasureMapRequest& _internal_req() const;
  public:
  const ::sg::UserTreasureMapService_TreasureMapRequest& req() const;
  ::sg::UserTreasureMapService_TreasureMapRequest* release_req();
  ::sg::UserTreasureMapService_TreasureMapRequest* mutable_req();
  void set_allocated_req(::sg::UserTreasureMapService_TreasureMapRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserTreasureMapService_TreasureMapRequest* req);
  ::sg::UserTreasureMapService_TreasureMapRequest* unsafe_arena_release_req();

  // optional .sg.UserTreasureMapService.TreasureMapResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserTreasureMapService_TreasureMapResponse& _internal_resp() const;
  public:
  const ::sg::UserTreasureMapService_TreasureMapResponse& resp() const;
  ::sg::UserTreasureMapService_TreasureMapResponse* release_resp();
  ::sg::UserTreasureMapService_TreasureMapResponse* mutable_resp();
  void set_allocated_resp(::sg::UserTreasureMapService_TreasureMapResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserTreasureMapService_TreasureMapResponse* resp);
  ::sg::UserTreasureMapService_TreasureMapResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserTreasureMapService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserTreasureMapService_TreasureMapRequest* req_;
  ::sg::UserTreasureMapService_TreasureMapResponse* resp_;
  friend struct ::protobuf_UserTreasureMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TreasureMapStateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.TreasureMapStateNotify) */ {
 public:
  TreasureMapStateNotify();
  virtual ~TreasureMapStateNotify();

  TreasureMapStateNotify(const TreasureMapStateNotify& from);

  inline TreasureMapStateNotify& operator=(const TreasureMapStateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreasureMapStateNotify(TreasureMapStateNotify&& from) noexcept
    : TreasureMapStateNotify() {
    *this = ::std::move(from);
  }

  inline TreasureMapStateNotify& operator=(TreasureMapStateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureMapStateNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreasureMapStateNotify* internal_default_instance() {
    return reinterpret_cast<const TreasureMapStateNotify*>(
               &_TreasureMapStateNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(TreasureMapStateNotify* other);
  void Swap(TreasureMapStateNotify* other);
  friend void swap(TreasureMapStateNotify& a, TreasureMapStateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreasureMapStateNotify* New() const final {
    return CreateMaybeMessage<TreasureMapStateNotify>(NULL);
  }

  TreasureMapStateNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TreasureMapStateNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TreasureMapStateNotify& from);
  void MergeFrom(const TreasureMapStateNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreasureMapStateNotify* other);
  protected:
  explicit TreasureMapStateNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.TreasureHuntInfo hunt_info = 1;
  bool has_hunt_info() const;
  void clear_hunt_info();
  static const int kHuntInfoFieldNumber = 1;
  private:
  const ::sg::TreasureHuntInfo& _internal_hunt_info() const;
  public:
  const ::sg::TreasureHuntInfo& hunt_info() const;
  ::sg::TreasureHuntInfo* release_hunt_info();
  ::sg::TreasureHuntInfo* mutable_hunt_info();
  void set_allocated_hunt_info(::sg::TreasureHuntInfo* hunt_info);
  void unsafe_arena_set_allocated_hunt_info(
      ::sg::TreasureHuntInfo* hunt_info);
  ::sg::TreasureHuntInfo* unsafe_arena_release_hunt_info();

  // optional .sg.Reward out_drop = 11;
  bool has_out_drop() const;
  void clear_out_drop();
  static const int kOutDropFieldNumber = 11;
  private:
  const ::sg::Reward& _internal_out_drop() const;
  public:
  const ::sg::Reward& out_drop() const;
  ::sg::Reward* release_out_drop();
  ::sg::Reward* mutable_out_drop();
  void set_allocated_out_drop(::sg::Reward* out_drop);
  void unsafe_arena_set_allocated_out_drop(
      ::sg::Reward* out_drop);
  ::sg::Reward* unsafe_arena_release_out_drop();

  // @@protoc_insertion_point(class_scope:sg.TreasureMapStateNotify)
 private:
  void set_has_hunt_info();
  void clear_has_hunt_info();
  void set_has_out_drop();
  void clear_has_out_drop();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::TreasureHuntInfo* hunt_info_;
  ::sg::Reward* out_drop_;
  friend struct ::protobuf_UserTreasureMap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TreasureHuntInfo

// required int32 huntid = 1;
inline bool TreasureHuntInfo::has_huntid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureHuntInfo::set_has_huntid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureHuntInfo::clear_has_huntid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureHuntInfo::clear_huntid() {
  huntid_ = 0;
  clear_has_huntid();
}
inline ::google::protobuf::int32 TreasureHuntInfo::huntid() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.huntid)
  return huntid_;
}
inline void TreasureHuntInfo::set_huntid(::google::protobuf::int32 value) {
  set_has_huntid();
  huntid_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.huntid)
}

// required int32 toolid = 2;
inline bool TreasureHuntInfo::has_toolid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreasureHuntInfo::set_has_toolid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreasureHuntInfo::clear_has_toolid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreasureHuntInfo::clear_toolid() {
  toolid_ = 0;
  clear_has_toolid();
}
inline ::google::protobuf::int32 TreasureHuntInfo::toolid() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.toolid)
  return toolid_;
}
inline void TreasureHuntInfo::set_toolid(::google::protobuf::int32 value) {
  set_has_toolid();
  toolid_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.toolid)
}

// optional .sg.TREASURE_HUNT_STATE state = 3;
inline bool TreasureHuntInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TreasureHuntInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TreasureHuntInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TreasureHuntInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::sg::TREASURE_HUNT_STATE TreasureHuntInfo::state() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.state)
  return static_cast< ::sg::TREASURE_HUNT_STATE >(state_);
}
inline void TreasureHuntInfo::set_state(::sg::TREASURE_HUNT_STATE value) {
  assert(::sg::TREASURE_HUNT_STATE_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.state)
}

// optional int32 areaid = 4;
inline bool TreasureHuntInfo::has_areaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TreasureHuntInfo::set_has_areaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TreasureHuntInfo::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TreasureHuntInfo::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 TreasureHuntInfo::areaid() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.areaid)
  return areaid_;
}
inline void TreasureHuntInfo::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.areaid)
}

// optional int32 coord_x = 5;
inline bool TreasureHuntInfo::has_coord_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TreasureHuntInfo::set_has_coord_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TreasureHuntInfo::clear_has_coord_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TreasureHuntInfo::clear_coord_x() {
  coord_x_ = 0;
  clear_has_coord_x();
}
inline ::google::protobuf::int32 TreasureHuntInfo::coord_x() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.coord_x)
  return coord_x_;
}
inline void TreasureHuntInfo::set_coord_x(::google::protobuf::int32 value) {
  set_has_coord_x();
  coord_x_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.coord_x)
}

// optional int32 coord_y = 6;
inline bool TreasureHuntInfo::has_coord_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TreasureHuntInfo::set_has_coord_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TreasureHuntInfo::clear_has_coord_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TreasureHuntInfo::clear_coord_y() {
  coord_y_ = 0;
  clear_has_coord_y();
}
inline ::google::protobuf::int32 TreasureHuntInfo::coord_y() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.coord_y)
  return coord_y_;
}
inline void TreasureHuntInfo::set_coord_y(::google::protobuf::int32 value) {
  set_has_coord_y();
  coord_y_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.coord_y)
}

// optional int32 monster_group = 11;
inline bool TreasureHuntInfo::has_monster_group() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TreasureHuntInfo::set_has_monster_group() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TreasureHuntInfo::clear_has_monster_group() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TreasureHuntInfo::clear_monster_group() {
  monster_group_ = 0;
  clear_has_monster_group();
}
inline ::google::protobuf::int32 TreasureHuntInfo::monster_group() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.monster_group)
  return monster_group_;
}
inline void TreasureHuntInfo::set_monster_group(::google::protobuf::int32 value) {
  set_has_monster_group();
  monster_group_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.monster_group)
}

// optional .sg.TREASURE_TRAP_TYPE trap_type = 21;
inline bool TreasureHuntInfo::has_trap_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TreasureHuntInfo::set_has_trap_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TreasureHuntInfo::clear_has_trap_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TreasureHuntInfo::clear_trap_type() {
  trap_type_ = 0;
  clear_has_trap_type();
}
inline ::sg::TREASURE_TRAP_TYPE TreasureHuntInfo::trap_type() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.trap_type)
  return static_cast< ::sg::TREASURE_TRAP_TYPE >(trap_type_);
}
inline void TreasureHuntInfo::set_trap_type(::sg::TREASURE_TRAP_TYPE value) {
  assert(::sg::TREASURE_TRAP_TYPE_IsValid(value));
  set_has_trap_type();
  trap_type_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.trap_type)
}

// optional int32 trap_lost_num = 22;
inline bool TreasureHuntInfo::has_trap_lost_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TreasureHuntInfo::set_has_trap_lost_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TreasureHuntInfo::clear_has_trap_lost_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TreasureHuntInfo::clear_trap_lost_num() {
  trap_lost_num_ = 0;
  clear_has_trap_lost_num();
}
inline ::google::protobuf::int32 TreasureHuntInfo::trap_lost_num() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.trap_lost_num)
  return trap_lost_num_;
}
inline void TreasureHuntInfo::set_trap_lost_num(::google::protobuf::int32 value) {
  set_has_trap_lost_num();
  trap_lost_num_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.trap_lost_num)
}

// optional sfixed64 optime = 31;
inline bool TreasureHuntInfo::has_optime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TreasureHuntInfo::set_has_optime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TreasureHuntInfo::clear_has_optime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TreasureHuntInfo::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 TreasureHuntInfo::optime() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.optime)
  return optime_;
}
inline void TreasureHuntInfo::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.optime)
}

// optional int32 left_num1 = 32;
inline bool TreasureHuntInfo::has_left_num1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TreasureHuntInfo::set_has_left_num1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TreasureHuntInfo::clear_has_left_num1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TreasureHuntInfo::clear_left_num1() {
  left_num1_ = 0;
  clear_has_left_num1();
}
inline ::google::protobuf::int32 TreasureHuntInfo::left_num1() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.left_num1)
  return left_num1_;
}
inline void TreasureHuntInfo::set_left_num1(::google::protobuf::int32 value) {
  set_has_left_num1();
  left_num1_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.left_num1)
}

// optional int32 left_num2 = 33;
inline bool TreasureHuntInfo::has_left_num2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TreasureHuntInfo::set_has_left_num2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TreasureHuntInfo::clear_has_left_num2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TreasureHuntInfo::clear_left_num2() {
  left_num2_ = 0;
  clear_has_left_num2();
}
inline ::google::protobuf::int32 TreasureHuntInfo::left_num2() const {
  // @@protoc_insertion_point(field_get:sg.TreasureHuntInfo.left_num2)
  return left_num2_;
}
inline void TreasureHuntInfo::set_left_num2(::google::protobuf::int32 value) {
  set_has_left_num2();
  left_num2_ = value;
  // @@protoc_insertion_point(field_set:sg.TreasureHuntInfo.left_num2)
}

// -------------------------------------------------------------------

// UserTreasureMapService_TreasureMapRequest

// required .sg.UserTreasureMapService.HUNT_COMMAND cmd = 1;
inline bool UserTreasureMapService_TreasureMapRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserTreasureMapService_TreasureMapRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserTreasureMapService_HUNT_COMMAND UserTreasureMapService_TreasureMapRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.TreasureMapRequest.cmd)
  return static_cast< ::sg::UserTreasureMapService_HUNT_COMMAND >(cmd_);
}
inline void UserTreasureMapService_TreasureMapRequest::set_cmd(::sg::UserTreasureMapService_HUNT_COMMAND value) {
  assert(::sg::UserTreasureMapService_HUNT_COMMAND_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTreasureMapService.TreasureMapRequest.cmd)
}

// optional .sg.TREASURE_MAP_TYPE map_type = 2;
inline bool UserTreasureMapService_TreasureMapRequest::has_map_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTreasureMapService_TreasureMapRequest::set_has_map_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_has_map_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_map_type() {
  map_type_ = 0;
  clear_has_map_type();
}
inline ::sg::TREASURE_MAP_TYPE UserTreasureMapService_TreasureMapRequest::map_type() const {
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.TreasureMapRequest.map_type)
  return static_cast< ::sg::TREASURE_MAP_TYPE >(map_type_);
}
inline void UserTreasureMapService_TreasureMapRequest::set_map_type(::sg::TREASURE_MAP_TYPE value) {
  assert(::sg::TREASURE_MAP_TYPE_IsValid(value));
  set_has_map_type();
  map_type_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTreasureMapService.TreasureMapRequest.map_type)
}

// optional int32 areaid = 3;
inline bool UserTreasureMapService_TreasureMapRequest::has_areaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTreasureMapService_TreasureMapRequest::set_has_areaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 UserTreasureMapService_TreasureMapRequest::areaid() const {
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.TreasureMapRequest.areaid)
  return areaid_;
}
inline void UserTreasureMapService_TreasureMapRequest::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTreasureMapService.TreasureMapRequest.areaid)
}

// optional int32 coord_x = 4;
inline bool UserTreasureMapService_TreasureMapRequest::has_coord_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserTreasureMapService_TreasureMapRequest::set_has_coord_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_has_coord_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_coord_x() {
  coord_x_ = 0;
  clear_has_coord_x();
}
inline ::google::protobuf::int32 UserTreasureMapService_TreasureMapRequest::coord_x() const {
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.TreasureMapRequest.coord_x)
  return coord_x_;
}
inline void UserTreasureMapService_TreasureMapRequest::set_coord_x(::google::protobuf::int32 value) {
  set_has_coord_x();
  coord_x_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTreasureMapService.TreasureMapRequest.coord_x)
}

// optional int32 coord_y = 5;
inline bool UserTreasureMapService_TreasureMapRequest::has_coord_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserTreasureMapService_TreasureMapRequest::set_has_coord_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_has_coord_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserTreasureMapService_TreasureMapRequest::clear_coord_y() {
  coord_y_ = 0;
  clear_has_coord_y();
}
inline ::google::protobuf::int32 UserTreasureMapService_TreasureMapRequest::coord_y() const {
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.TreasureMapRequest.coord_y)
  return coord_y_;
}
inline void UserTreasureMapService_TreasureMapRequest::set_coord_y(::google::protobuf::int32 value) {
  set_has_coord_y();
  coord_y_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTreasureMapService.TreasureMapRequest.coord_y)
}

// -------------------------------------------------------------------

// UserTreasureMapService_TreasureMapResponse

// required int32 result = 1;
inline bool UserTreasureMapService_TreasureMapResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserTreasureMapService_TreasureMapResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserTreasureMapService_TreasureMapResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserTreasureMapService_TreasureMapResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserTreasureMapService_TreasureMapResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.TreasureMapResponse.result)
  return result_;
}
inline void UserTreasureMapService_TreasureMapResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserTreasureMapService.TreasureMapResponse.result)
}

// optional .sg.TreasureHuntInfo hunt_info = 2;
inline bool UserTreasureMapService_TreasureMapResponse::has_hunt_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTreasureMapService_TreasureMapResponse::set_has_hunt_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserTreasureMapService_TreasureMapResponse::clear_has_hunt_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserTreasureMapService_TreasureMapResponse::clear_hunt_info() {
  if (hunt_info_ != NULL) hunt_info_->Clear();
  clear_has_hunt_info();
}
inline const ::sg::TreasureHuntInfo& UserTreasureMapService_TreasureMapResponse::_internal_hunt_info() const {
  return *hunt_info_;
}
inline const ::sg::TreasureHuntInfo& UserTreasureMapService_TreasureMapResponse::hunt_info() const {
  const ::sg::TreasureHuntInfo* p = hunt_info_;
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.TreasureMapResponse.hunt_info)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::TreasureHuntInfo*>(
      &::sg::_TreasureHuntInfo_default_instance_);
}
inline ::sg::TreasureHuntInfo* UserTreasureMapService_TreasureMapResponse::release_hunt_info() {
  // @@protoc_insertion_point(field_release:sg.UserTreasureMapService.TreasureMapResponse.hunt_info)
  clear_has_hunt_info();
  ::sg::TreasureHuntInfo* temp = hunt_info_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  hunt_info_ = NULL;
  return temp;
}
inline ::sg::TreasureHuntInfo* UserTreasureMapService_TreasureMapResponse::unsafe_arena_release_hunt_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserTreasureMapService.TreasureMapResponse.hunt_info)
  clear_has_hunt_info();
  ::sg::TreasureHuntInfo* temp = hunt_info_;
  hunt_info_ = NULL;
  return temp;
}
inline ::sg::TreasureHuntInfo* UserTreasureMapService_TreasureMapResponse::mutable_hunt_info() {
  set_has_hunt_info();
  if (hunt_info_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::TreasureHuntInfo>(GetArenaNoVirtual());
    hunt_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserTreasureMapService.TreasureMapResponse.hunt_info)
  return hunt_info_;
}
inline void UserTreasureMapService_TreasureMapResponse::set_allocated_hunt_info(::sg::TreasureHuntInfo* hunt_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hunt_info_;
  }
  if (hunt_info) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(hunt_info);
    if (message_arena != submessage_arena) {
      hunt_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hunt_info, submessage_arena);
    }
    set_has_hunt_info();
  } else {
    clear_has_hunt_info();
  }
  hunt_info_ = hunt_info;
  // @@protoc_insertion_point(field_set_allocated:sg.UserTreasureMapService.TreasureMapResponse.hunt_info)
}

// optional .sg.Reward out_drop = 11;
inline bool UserTreasureMapService_TreasureMapResponse::has_out_drop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTreasureMapService_TreasureMapResponse::set_has_out_drop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserTreasureMapService_TreasureMapResponse::clear_has_out_drop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::Reward& UserTreasureMapService_TreasureMapResponse::_internal_out_drop() const {
  return *out_drop_;
}
inline const ::sg::Reward& UserTreasureMapService_TreasureMapResponse::out_drop() const {
  const ::sg::Reward* p = out_drop_;
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.TreasureMapResponse.out_drop)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* UserTreasureMapService_TreasureMapResponse::release_out_drop() {
  // @@protoc_insertion_point(field_release:sg.UserTreasureMapService.TreasureMapResponse.out_drop)
  clear_has_out_drop();
  ::sg::Reward* temp = out_drop_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  out_drop_ = NULL;
  return temp;
}
inline ::sg::Reward* UserTreasureMapService_TreasureMapResponse::unsafe_arena_release_out_drop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserTreasureMapService.TreasureMapResponse.out_drop)
  clear_has_out_drop();
  ::sg::Reward* temp = out_drop_;
  out_drop_ = NULL;
  return temp;
}
inline ::sg::Reward* UserTreasureMapService_TreasureMapResponse::mutable_out_drop() {
  set_has_out_drop();
  if (out_drop_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    out_drop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserTreasureMapService.TreasureMapResponse.out_drop)
  return out_drop_;
}
inline void UserTreasureMapService_TreasureMapResponse::set_allocated_out_drop(::sg::Reward* out_drop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(out_drop_);
  }
  if (out_drop) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(out_drop)->GetArena();
    if (message_arena != submessage_arena) {
      out_drop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, out_drop, submessage_arena);
    }
    set_has_out_drop();
  } else {
    clear_has_out_drop();
  }
  out_drop_ = out_drop;
  // @@protoc_insertion_point(field_set_allocated:sg.UserTreasureMapService.TreasureMapResponse.out_drop)
}

// -------------------------------------------------------------------

// UserTreasureMapService

// optional .sg.UserTreasureMapService.TreasureMapRequest req = 1;
inline bool UserTreasureMapService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTreasureMapService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserTreasureMapService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserTreasureMapService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserTreasureMapService_TreasureMapRequest& UserTreasureMapService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserTreasureMapService_TreasureMapRequest& UserTreasureMapService::req() const {
  const ::sg::UserTreasureMapService_TreasureMapRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserTreasureMapService_TreasureMapRequest*>(
      &::sg::_UserTreasureMapService_TreasureMapRequest_default_instance_);
}
inline ::sg::UserTreasureMapService_TreasureMapRequest* UserTreasureMapService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserTreasureMapService.req)
  clear_has_req();
  ::sg::UserTreasureMapService_TreasureMapRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserTreasureMapService_TreasureMapRequest* UserTreasureMapService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserTreasureMapService.req)
  clear_has_req();
  ::sg::UserTreasureMapService_TreasureMapRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserTreasureMapService_TreasureMapRequest* UserTreasureMapService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserTreasureMapService_TreasureMapRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserTreasureMapService.req)
  return req_;
}
inline void UserTreasureMapService::set_allocated_req(::sg::UserTreasureMapService_TreasureMapRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserTreasureMapService.req)
}

// optional .sg.UserTreasureMapService.TreasureMapResponse resp = 2;
inline bool UserTreasureMapService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTreasureMapService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserTreasureMapService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserTreasureMapService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserTreasureMapService_TreasureMapResponse& UserTreasureMapService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserTreasureMapService_TreasureMapResponse& UserTreasureMapService::resp() const {
  const ::sg::UserTreasureMapService_TreasureMapResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserTreasureMapService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserTreasureMapService_TreasureMapResponse*>(
      &::sg::_UserTreasureMapService_TreasureMapResponse_default_instance_);
}
inline ::sg::UserTreasureMapService_TreasureMapResponse* UserTreasureMapService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserTreasureMapService.resp)
  clear_has_resp();
  ::sg::UserTreasureMapService_TreasureMapResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserTreasureMapService_TreasureMapResponse* UserTreasureMapService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserTreasureMapService.resp)
  clear_has_resp();
  ::sg::UserTreasureMapService_TreasureMapResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserTreasureMapService_TreasureMapResponse* UserTreasureMapService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserTreasureMapService_TreasureMapResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserTreasureMapService.resp)
  return resp_;
}
inline void UserTreasureMapService::set_allocated_resp(::sg::UserTreasureMapService_TreasureMapResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserTreasureMapService.resp)
}

// -------------------------------------------------------------------

// TreasureMapStateNotify

// required .sg.TreasureHuntInfo hunt_info = 1;
inline bool TreasureMapStateNotify::has_hunt_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureMapStateNotify::set_has_hunt_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureMapStateNotify::clear_has_hunt_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureMapStateNotify::clear_hunt_info() {
  if (hunt_info_ != NULL) hunt_info_->Clear();
  clear_has_hunt_info();
}
inline const ::sg::TreasureHuntInfo& TreasureMapStateNotify::_internal_hunt_info() const {
  return *hunt_info_;
}
inline const ::sg::TreasureHuntInfo& TreasureMapStateNotify::hunt_info() const {
  const ::sg::TreasureHuntInfo* p = hunt_info_;
  // @@protoc_insertion_point(field_get:sg.TreasureMapStateNotify.hunt_info)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::TreasureHuntInfo*>(
      &::sg::_TreasureHuntInfo_default_instance_);
}
inline ::sg::TreasureHuntInfo* TreasureMapStateNotify::release_hunt_info() {
  // @@protoc_insertion_point(field_release:sg.TreasureMapStateNotify.hunt_info)
  clear_has_hunt_info();
  ::sg::TreasureHuntInfo* temp = hunt_info_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  hunt_info_ = NULL;
  return temp;
}
inline ::sg::TreasureHuntInfo* TreasureMapStateNotify::unsafe_arena_release_hunt_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.TreasureMapStateNotify.hunt_info)
  clear_has_hunt_info();
  ::sg::TreasureHuntInfo* temp = hunt_info_;
  hunt_info_ = NULL;
  return temp;
}
inline ::sg::TreasureHuntInfo* TreasureMapStateNotify::mutable_hunt_info() {
  set_has_hunt_info();
  if (hunt_info_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::TreasureHuntInfo>(GetArenaNoVirtual());
    hunt_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.TreasureMapStateNotify.hunt_info)
  return hunt_info_;
}
inline void TreasureMapStateNotify::set_allocated_hunt_info(::sg::TreasureHuntInfo* hunt_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hunt_info_;
  }
  if (hunt_info) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(hunt_info);
    if (message_arena != submessage_arena) {
      hunt_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hunt_info, submessage_arena);
    }
    set_has_hunt_info();
  } else {
    clear_has_hunt_info();
  }
  hunt_info_ = hunt_info;
  // @@protoc_insertion_point(field_set_allocated:sg.TreasureMapStateNotify.hunt_info)
}

// optional .sg.Reward out_drop = 11;
inline bool TreasureMapStateNotify::has_out_drop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreasureMapStateNotify::set_has_out_drop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreasureMapStateNotify::clear_has_out_drop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::Reward& TreasureMapStateNotify::_internal_out_drop() const {
  return *out_drop_;
}
inline const ::sg::Reward& TreasureMapStateNotify::out_drop() const {
  const ::sg::Reward* p = out_drop_;
  // @@protoc_insertion_point(field_get:sg.TreasureMapStateNotify.out_drop)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* TreasureMapStateNotify::release_out_drop() {
  // @@protoc_insertion_point(field_release:sg.TreasureMapStateNotify.out_drop)
  clear_has_out_drop();
  ::sg::Reward* temp = out_drop_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  out_drop_ = NULL;
  return temp;
}
inline ::sg::Reward* TreasureMapStateNotify::unsafe_arena_release_out_drop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.TreasureMapStateNotify.out_drop)
  clear_has_out_drop();
  ::sg::Reward* temp = out_drop_;
  out_drop_ = NULL;
  return temp;
}
inline ::sg::Reward* TreasureMapStateNotify::mutable_out_drop() {
  set_has_out_drop();
  if (out_drop_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    out_drop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.TreasureMapStateNotify.out_drop)
  return out_drop_;
}
inline void TreasureMapStateNotify::set_allocated_out_drop(::sg::Reward* out_drop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(out_drop_);
  }
  if (out_drop) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(out_drop)->GetArena();
    if (message_arena != submessage_arena) {
      out_drop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, out_drop, submessage_arena);
    }
    set_has_out_drop();
  } else {
    clear_has_out_drop();
  }
  out_drop_ = out_drop;
  // @@protoc_insertion_point(field_set_allocated:sg.TreasureMapStateNotify.out_drop)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::UserTreasureMapService_HUNT_COMMAND> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserTreasureMapService_HUNT_COMMAND>() {
  return ::sg::UserTreasureMapService_HUNT_COMMAND_descriptor();
}
template <> struct is_proto_enum< ::sg::TREASURE_MAP_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::TREASURE_MAP_TYPE>() {
  return ::sg::TREASURE_MAP_TYPE_descriptor();
}
template <> struct is_proto_enum< ::sg::TREASURE_LOCATION_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::TREASURE_LOCATION_TYPE>() {
  return ::sg::TREASURE_LOCATION_TYPE_descriptor();
}
template <> struct is_proto_enum< ::sg::TREASURE_TRIGGER_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::TREASURE_TRIGGER_TYPE>() {
  return ::sg::TREASURE_TRIGGER_TYPE_descriptor();
}
template <> struct is_proto_enum< ::sg::TREASURE_HUNT_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::TREASURE_HUNT_STATE>() {
  return ::sg::TREASURE_HUNT_STATE_descriptor();
}
template <> struct is_proto_enum< ::sg::TREASURE_TRAP_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::TREASURE_TRAP_TYPE>() {
  return ::sg::TREASURE_TRAP_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_UserTreasureMap_2eproto
