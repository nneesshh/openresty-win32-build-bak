// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rank.proto

#include "Rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Rank_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Rank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PVPRankState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Rank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PVPRecord_SailorData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Rank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RankService_RankRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Rank_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PVPRankingData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Rank_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PVPRecord;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Rank_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RankService_RankResponse;
}  // namespace protobuf_Rank_2eproto
namespace sg {
class PVPRankStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPRankState>
      _instance;
} _PVPRankState_default_instance_;
class PVPRankingDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPRankingData>
      _instance;
} _PVPRankingData_default_instance_;
class PVPRecord_SailorDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPRecord_SailorData>
      _instance;
} _PVPRecord_SailorData_default_instance_;
class PVPRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPRecord>
      _instance;
} _PVPRecord_default_instance_;
class RankService_RankRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RankService_RankRequest>
      _instance;
} _RankService_RankRequest_default_instance_;
class RankService_RankResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RankService_RankResponse>
      _instance;
} _RankService_RankResponse_default_instance_;
class RankServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RankService>
      _instance;
} _RankService_default_instance_;
}  // namespace sg
namespace protobuf_Rank_2eproto {
static void InitDefaultsPVPRankState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPRankState_default_instance_;
    new (ptr) ::sg::PVPRankState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPRankState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PVPRankState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPVPRankState}, {}};

static void InitDefaultsPVPRankingData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPRankingData_default_instance_;
    new (ptr) ::sg::PVPRankingData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPRankingData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PVPRankingData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPVPRankingData}, {
      &protobuf_BaseStruct_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsPVPRecord_SailorData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPRecord_SailorData_default_instance_;
    new (ptr) ::sg::PVPRecord_SailorData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPRecord_SailorData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PVPRecord_SailorData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPVPRecord_SailorData}, {}};

static void InitDefaultsPVPRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPRecord_default_instance_;
    new (ptr) ::sg::PVPRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PVPRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPVPRecord}, {
      &protobuf_Rank_2eproto::scc_info_PVPRecord_SailorData.base,}};

static void InitDefaultsRankService_RankRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_RankService_RankRequest_default_instance_;
    new (ptr) ::sg::RankService_RankRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::RankService_RankRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RankService_RankRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRankService_RankRequest}, {}};

static void InitDefaultsRankService_RankResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_RankService_RankResponse_default_instance_;
    new (ptr) ::sg::RankService_RankResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::RankService_RankResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RankService_RankResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRankService_RankResponse}, {
      &protobuf_Rank_2eproto::scc_info_PVPRankState.base,
      &protobuf_Rank_2eproto::scc_info_PVPRankingData.base,
      &protobuf_Rank_2eproto::scc_info_PVPRecord.base,}};

static void InitDefaultsRankService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_RankService_default_instance_;
    new (ptr) ::sg::RankService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::RankService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RankService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRankService}, {
      &protobuf_Rank_2eproto::scc_info_RankService_RankRequest.base,
      &protobuf_Rank_2eproto::scc_info_RankService_RankResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PVPRankState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPRankingData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPRecord_SailorData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RankService_RankRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RankService_RankResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RankService.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankState, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankState, lose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankState, ranking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankState, ranking_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankState, ranking_ratio_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankingData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankingData, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankingData, ranking_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRankingData, ranking_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord_SailorData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord_SailorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord_SailorData, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord_SailorData, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord_SailorData, star_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord, player_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord, player_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord, team_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord, enemy_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPRecord, change_score_),
  0,
  1,
  ~0u,
  ~0u,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankRequest, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankResponse, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankResponse, roles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService_RankResponse, record_list_),
  1,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RankService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::sg::PVPRankState)},
  { 15, 23, sizeof(::sg::PVPRankingData)},
  { 26, 34, sizeof(::sg::PVPRecord_SailorData)},
  { 37, 49, sizeof(::sg::PVPRecord)},
  { 56, 63, sizeof(::sg::RankService_RankRequest)},
  { 65, 74, sizeof(::sg::RankService_RankResponse)},
  { 78, 85, sizeof(::sg::RankService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPRankState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPRankingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPRecord_SailorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_RankService_RankRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_RankService_RankResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_RankService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Rank.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nRank.proto\022\002sg\032\020BaseStruct.proto\"h\n\014PV"
      "PRankState\022\013\n\003win\030\001 \001(\005\022\014\n\004lose\030\002 \001(\005\022\017\n"
      "\007ranking\030\003 \001(\005\022\025\n\rranking_score\030\004 \001(\005\022\025\n"
      "\rranking_ratio\030\005 \001(\002\"T\n\016PVPRankingData\022\032"
      "\n\004info\030\001 \002(\0132\014.sg.UserInfo\022\025\n\rranking_sc"
      "ore\030\002 \002(\005\022\017\n\007ranking\030\003 \002(\005\"\205\002\n\tPVPRecord"
      "\022\023\n\013player_nick\030\001 \002(\014\022\024\n\014player_level\030\002 "
      "\002(\005\022+\n\tteam_data\030\003 \003(\0132\030.sg.PVPRecord.Sa"
      "ilorData\022,\n\nenemy_data\030\004 \003(\0132\030.sg.PVPRec"
      "ord.SailorData\022\021\n\ttimestamp\030\005 \002(\020\022\016\n\006res"
      "ult\030\006 \002(\005\022\024\n\014change_score\030\007 \002(\005\0329\n\nSailo"
      "rData\022\016\n\006typeid\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\014\n\004"
      "star\030\003 \002(\005\"\375\002\n\013RankService\022(\n\003req\030\001 \001(\0132"
      "\033.sg.RankService.RankRequest\022*\n\004resp\030\002 \001"
      "(\0132\034.sg.RankService.RankResponse\032V\n\013Rank"
      "Request\022%\n\003cmd\030\001 \002(\0162\030.sg.RankService.RA"
      "NK_CMD\022 \n\004type\030\002 \001(\0162\022.sg.RANK_LIST_TYPE"
      "\032\206\001\n\014RankResponse\022\016\n\006result\030\001 \002(\005\022\037\n\005sta"
      "te\030\002 \001(\0132\020.sg.PVPRankState\022!\n\005roles\030\003 \003("
      "\0132\022.sg.PVPRankingData\022\"\n\013record_list\030\004 \003"
      "(\0132\r.sg.PVPRecord\"7\n\010RANK_CMD\022\t\n\005QUERY\020\001"
      "\022\016\n\nQUERY_SELF\020\002\022\020\n\014QUERY_RECORD\020\003*!\n\016RA"
      "NK_LIST_TYPE\022\017\n\013PVP_RANKING\020\001B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Rank.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Rank_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* RankService_RANK_CMD_descriptor() {
  protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rank_2eproto::file_level_enum_descriptors[0];
}
bool RankService_RANK_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RankService_RANK_CMD RankService::QUERY;
const RankService_RANK_CMD RankService::QUERY_SELF;
const RankService_RANK_CMD RankService::QUERY_RECORD;
const RankService_RANK_CMD RankService::RANK_CMD_MIN;
const RankService_RANK_CMD RankService::RANK_CMD_MAX;
const int RankService::RANK_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RANK_LIST_TYPE_descriptor() {
  protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rank_2eproto::file_level_enum_descriptors[1];
}
bool RANK_LIST_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PVPRankState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPRankState::kWinFieldNumber;
const int PVPRankState::kLoseFieldNumber;
const int PVPRankState::kRankingFieldNumber;
const int PVPRankState::kRankingScoreFieldNumber;
const int PVPRankState::kRankingRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPRankState::PVPRankState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Rank_2eproto::scc_info_PVPRankState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPRankState)
}
PVPRankState::PVPRankState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_PVPRankState.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPRankState)
}
PVPRankState::PVPRankState(const PVPRankState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&win_, &from.win_,
    static_cast<size_t>(reinterpret_cast<char*>(&ranking_ratio_) -
    reinterpret_cast<char*>(&win_)) + sizeof(ranking_ratio_));
  // @@protoc_insertion_point(copy_constructor:sg.PVPRankState)
}

void PVPRankState::SharedCtor() {
  ::memset(&win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ranking_ratio_) -
      reinterpret_cast<char*>(&win_)) + sizeof(ranking_ratio_));
}

PVPRankState::~PVPRankState() {
  // @@protoc_insertion_point(destructor:sg.PVPRankState)
  SharedDtor();
}

void PVPRankState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PVPRankState::ArenaDtor(void* object) {
  PVPRankState* _this = reinterpret_cast< PVPRankState* >(object);
  (void)_this;
}
void PVPRankState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPRankState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPRankState::descriptor() {
  ::protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPRankState& PVPRankState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_PVPRankState.base);
  return *internal_default_instance();
}


void PVPRankState::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPRankState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&win_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ranking_ratio_) -
        reinterpret_cast<char*>(&win_)) + sizeof(ranking_ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPRankState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPRankState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 win = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_win();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ranking = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ranking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ranking_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ranking_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ranking_ratio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_ranking_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ranking_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPRankState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPRankState)
  return false;
#undef DO_
}

void PVPRankState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPRankState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 win = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win(), output);
  }

  // optional int32 lose = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lose(), output);
  }

  // optional int32 ranking = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  // optional int32 ranking_score = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ranking_score(), output);
  }

  // optional float ranking_ratio = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ranking_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPRankState)
}

::google::protobuf::uint8* PVPRankState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPRankState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 win = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->win(), target);
  }

  // optional int32 lose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lose(), target);
  }

  // optional int32 ranking = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  // optional int32 ranking_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ranking_score(), target);
  }

  // optional float ranking_ratio = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ranking_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPRankState)
  return target;
}

size_t PVPRankState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPRankState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 win = 1;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

    // optional int32 lose = 2;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose());
    }

    // optional int32 ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 ranking_score = 4;
    if (has_ranking_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_score());
    }

    // optional float ranking_ratio = 5;
    if (has_ranking_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPRankState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPRankState)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPRankState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPRankState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPRankState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPRankState)
    MergeFrom(*source);
  }
}

void PVPRankState::MergeFrom(const PVPRankState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPRankState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      win_ = from.win_;
    }
    if (cached_has_bits & 0x00000002u) {
      lose_ = from.lose_;
    }
    if (cached_has_bits & 0x00000004u) {
      ranking_ = from.ranking_;
    }
    if (cached_has_bits & 0x00000008u) {
      ranking_score_ = from.ranking_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      ranking_ratio_ = from.ranking_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPRankState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPRankState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRankState::CopyFrom(const PVPRankState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPRankState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRankState::IsInitialized() const {
  return true;
}

void PVPRankState::Swap(PVPRankState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPRankState* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPRankState::UnsafeArenaSwap(PVPRankState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPRankState::InternalSwap(PVPRankState* other) {
  using std::swap;
  swap(win_, other->win_);
  swap(lose_, other->lose_);
  swap(ranking_, other->ranking_);
  swap(ranking_score_, other->ranking_score_);
  swap(ranking_ratio_, other->ranking_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPRankState::GetMetadata() const {
  protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPRankingData::InitAsDefaultInstance() {
  ::sg::_PVPRankingData_default_instance_._instance.get_mutable()->info_ = const_cast< ::sg::UserInfo*>(
      ::sg::UserInfo::internal_default_instance());
}
void PVPRankingData::unsafe_arena_set_allocated_info(
    ::sg::UserInfo* info) {
  if (GetArenaNoVirtual() == NULL) {
    delete info_;
  }
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVPRankingData.info)
}
void PVPRankingData::clear_info() {
  if (info_ != NULL) info_->Clear();
  clear_has_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPRankingData::kInfoFieldNumber;
const int PVPRankingData::kRankingScoreFieldNumber;
const int PVPRankingData::kRankingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPRankingData::PVPRankingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Rank_2eproto::scc_info_PVPRankingData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPRankingData)
}
PVPRankingData::PVPRankingData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_PVPRankingData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPRankingData)
}
PVPRankingData::PVPRankingData(const PVPRankingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::sg::UserInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&ranking_score_, &from.ranking_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&ranking_) -
    reinterpret_cast<char*>(&ranking_score_)) + sizeof(ranking_));
  // @@protoc_insertion_point(copy_constructor:sg.PVPRankingData)
}

void PVPRankingData::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ranking_) -
      reinterpret_cast<char*>(&info_)) + sizeof(ranking_));
}

PVPRankingData::~PVPRankingData() {
  // @@protoc_insertion_point(destructor:sg.PVPRankingData)
  SharedDtor();
}

void PVPRankingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete info_;
}

void PVPRankingData::ArenaDtor(void* object) {
  PVPRankingData* _this = reinterpret_cast< PVPRankingData* >(object);
  (void)_this;
}
void PVPRankingData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPRankingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPRankingData::descriptor() {
  ::protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPRankingData& PVPRankingData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_PVPRankingData.base);
  return *internal_default_instance();
}


void PVPRankingData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPRankingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != NULL);
    info_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ranking_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ranking_) -
        reinterpret_cast<char*>(&ranking_score_)) + sizeof(ranking_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPRankingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPRankingData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ranking_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ranking_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ranking = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ranking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPRankingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPRankingData)
  return false;
#undef DO_
}

void PVPRankingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPRankingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_info(), output);
  }

  // required int32 ranking_score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking_score(), output);
  }

  // required int32 ranking = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPRankingData)
}

::google::protobuf::uint8* PVPRankingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPRankingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_info(), deterministic, target);
  }

  // required int32 ranking_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking_score(), target);
  }

  // required int32 ranking = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPRankingData)
  return target;
}

size_t PVPRankingData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.PVPRankingData)
  size_t total_size = 0;

  if (has_info()) {
    // required .sg.UserInfo info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (has_ranking_score()) {
    // required int32 ranking_score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ranking_score());
  }

  if (has_ranking()) {
    // required int32 ranking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ranking());
  }

  return total_size;
}
size_t PVPRankingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPRankingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .sg.UserInfo info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);

    // required int32 ranking_score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ranking_score());

    // required int32 ranking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ranking());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPRankingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPRankingData)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPRankingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPRankingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPRankingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPRankingData)
    MergeFrom(*source);
  }
}

void PVPRankingData::MergeFrom(const PVPRankingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPRankingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::sg::UserInfo::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      ranking_score_ = from.ranking_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      ranking_ = from.ranking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPRankingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPRankingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRankingData::CopyFrom(const PVPRankingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPRankingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRankingData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_info()) {
    if (!this->info_->IsInitialized()) return false;
  }
  return true;
}

void PVPRankingData::Swap(PVPRankingData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPRankingData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPRankingData::UnsafeArenaSwap(PVPRankingData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPRankingData::InternalSwap(PVPRankingData* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(ranking_score_, other->ranking_score_);
  swap(ranking_, other->ranking_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPRankingData::GetMetadata() const {
  protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPRecord_SailorData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPRecord_SailorData::kTypeidFieldNumber;
const int PVPRecord_SailorData::kLevelFieldNumber;
const int PVPRecord_SailorData::kStarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPRecord_SailorData::PVPRecord_SailorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Rank_2eproto::scc_info_PVPRecord_SailorData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPRecord.SailorData)
}
PVPRecord_SailorData::PVPRecord_SailorData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_PVPRecord_SailorData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPRecord.SailorData)
}
PVPRecord_SailorData::PVPRecord_SailorData(const PVPRecord_SailorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&typeid__, &from.typeid__,
    static_cast<size_t>(reinterpret_cast<char*>(&star_) -
    reinterpret_cast<char*>(&typeid__)) + sizeof(star_));
  // @@protoc_insertion_point(copy_constructor:sg.PVPRecord.SailorData)
}

void PVPRecord_SailorData::SharedCtor() {
  ::memset(&typeid__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_) -
      reinterpret_cast<char*>(&typeid__)) + sizeof(star_));
}

PVPRecord_SailorData::~PVPRecord_SailorData() {
  // @@protoc_insertion_point(destructor:sg.PVPRecord.SailorData)
  SharedDtor();
}

void PVPRecord_SailorData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PVPRecord_SailorData::ArenaDtor(void* object) {
  PVPRecord_SailorData* _this = reinterpret_cast< PVPRecord_SailorData* >(object);
  (void)_this;
}
void PVPRecord_SailorData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPRecord_SailorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPRecord_SailorData::descriptor() {
  ::protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPRecord_SailorData& PVPRecord_SailorData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_PVPRecord_SailorData.base);
  return *internal_default_instance();
}


void PVPRecord_SailorData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPRecord.SailorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&typeid__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&star_) -
        reinterpret_cast<char*>(&typeid__)) + sizeof(star_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPRecord_SailorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPRecord.SailorData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 typeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPRecord.SailorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPRecord.SailorData)
  return false;
#undef DO_
}

void PVPRecord_SailorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPRecord.SailorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 star = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPRecord.SailorData)
}

::google::protobuf::uint8* PVPRecord_SailorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPRecord.SailorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 star = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPRecord.SailorData)
  return target;
}

size_t PVPRecord_SailorData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.PVPRecord.SailorData)
  size_t total_size = 0;

  if (has_typeid_()) {
    // required int32 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_star()) {
    // required int32 star = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  return total_size;
}
size_t PVPRecord_SailorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPRecord.SailorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 star = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPRecord_SailorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPRecord.SailorData)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPRecord_SailorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPRecord_SailorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPRecord.SailorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPRecord.SailorData)
    MergeFrom(*source);
  }
}

void PVPRecord_SailorData::MergeFrom(const PVPRecord_SailorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPRecord.SailorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      star_ = from.star_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPRecord_SailorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPRecord.SailorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRecord_SailorData::CopyFrom(const PVPRecord_SailorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPRecord.SailorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRecord_SailorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PVPRecord_SailorData::Swap(PVPRecord_SailorData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPRecord_SailorData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPRecord_SailorData::UnsafeArenaSwap(PVPRecord_SailorData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPRecord_SailorData::InternalSwap(PVPRecord_SailorData* other) {
  using std::swap;
  swap(typeid__, other->typeid__);
  swap(level_, other->level_);
  swap(star_, other->star_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPRecord_SailorData::GetMetadata() const {
  protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPRecord::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPRecord::kPlayerNickFieldNumber;
const int PVPRecord::kPlayerLevelFieldNumber;
const int PVPRecord::kTeamDataFieldNumber;
const int PVPRecord::kEnemyDataFieldNumber;
const int PVPRecord::kTimestampFieldNumber;
const int PVPRecord::kResultFieldNumber;
const int PVPRecord::kChangeScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPRecord::PVPRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Rank_2eproto::scc_info_PVPRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPRecord)
}
PVPRecord::PVPRecord(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  team_data_(arena),
  enemy_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_PVPRecord.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPRecord)
}
PVPRecord::PVPRecord(const PVPRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      team_data_(from.team_data_),
      enemy_data_(from.enemy_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_nick()) {
    player_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_nick(),
      GetArenaNoVirtual());
  }
  ::memcpy(&player_level_, &from.player_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_score_) -
    reinterpret_cast<char*>(&player_level_)) + sizeof(change_score_));
  // @@protoc_insertion_point(copy_constructor:sg.PVPRecord)
}

void PVPRecord::SharedCtor() {
  player_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_score_) -
      reinterpret_cast<char*>(&player_level_)) + sizeof(change_score_));
}

PVPRecord::~PVPRecord() {
  // @@protoc_insertion_point(destructor:sg.PVPRecord)
  SharedDtor();
}

void PVPRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  player_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PVPRecord::ArenaDtor(void* object) {
  PVPRecord* _this = reinterpret_cast< PVPRecord* >(object);
  (void)_this;
}
void PVPRecord::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPRecord::descriptor() {
  ::protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPRecord& PVPRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_PVPRecord.base);
  return *internal_default_instance();
}


void PVPRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_data_.Clear();
  enemy_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_nick_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 30u) {
    ::memset(&player_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_score_) -
        reinterpret_cast<char*>(&player_level_)) + sizeof(change_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes player_nick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 player_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_player_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.PVPRecord.SailorData team_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.PVPRecord.SailorData enemy_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_enemy_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 change_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_change_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPRecord)
  return false;
#undef DO_
}

void PVPRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes player_nick = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->player_nick(), output);
  }

  // required int32 player_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_level(), output);
  }

  // repeated .sg.PVPRecord.SailorData team_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->team_data(static_cast<int>(i)),
      output);
  }

  // repeated .sg.PVPRecord.SailorData enemy_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemy_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->enemy_data(static_cast<int>(i)),
      output);
  }

  // required sfixed64 timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->timestamp(), output);
  }

  // required int32 result = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->result(), output);
  }

  // required int32 change_score = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->change_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPRecord)
}

::google::protobuf::uint8* PVPRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes player_nick = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->player_nick(), target);
  }

  // required int32 player_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_level(), target);
  }

  // repeated .sg.PVPRecord.SailorData team_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->team_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.PVPRecord.SailorData enemy_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemy_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->enemy_data(static_cast<int>(i)), deterministic, target);
  }

  // required sfixed64 timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->timestamp(), target);
  }

  // required int32 result = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->result(), target);
  }

  // required int32 change_score = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->change_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPRecord)
  return target;
}

size_t PVPRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.PVPRecord)
  size_t total_size = 0;

  if (has_player_nick()) {
    // required bytes player_nick = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->player_nick());
  }

  if (has_player_level()) {
    // required int32 player_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_level());
  }

  if (has_result()) {
    // required int32 result = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  if (has_timestamp()) {
    // required sfixed64 timestamp = 5;
    total_size += 1 + 8;
  }

  if (has_change_score()) {
    // required int32 change_score = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->change_score());
  }

  return total_size;
}
size_t PVPRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes player_nick = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->player_nick());

    // required int32 player_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_level());

    // required int32 result = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

    // required sfixed64 timestamp = 5;
    total_size += 1 + 8;

    // required int32 change_score = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->change_score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.PVPRecord.SailorData team_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->team_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_data(static_cast<int>(i)));
    }
  }

  // repeated .sg.PVPRecord.SailorData enemy_data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->enemy_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->enemy_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPRecord)
    MergeFrom(*source);
  }
}

void PVPRecord::MergeFrom(const PVPRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_data_.MergeFrom(from.team_data_);
  enemy_data_.MergeFrom(from.enemy_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_player_nick(from.player_nick());
    }
    if (cached_has_bits & 0x00000002u) {
      player_level_ = from.player_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      change_score_ = from.change_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRecord::CopyFrom(const PVPRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->team_data())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->enemy_data())) return false;
  return true;
}

void PVPRecord::Swap(PVPRecord* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPRecord* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPRecord::UnsafeArenaSwap(PVPRecord* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPRecord::InternalSwap(PVPRecord* other) {
  using std::swap;
  CastToBase(&team_data_)->InternalSwap(CastToBase(&other->team_data_));
  CastToBase(&enemy_data_)->InternalSwap(CastToBase(&other->enemy_data_));
  player_nick_.Swap(&other->player_nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_level_, other->player_level_);
  swap(result_, other->result_);
  swap(timestamp_, other->timestamp_);
  swap(change_score_, other->change_score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPRecord::GetMetadata() const {
  protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RankService_RankRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankService_RankRequest::kCmdFieldNumber;
const int RankService_RankRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankService_RankRequest::RankService_RankRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Rank_2eproto::scc_info_RankService_RankRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.RankService.RankRequest)
}
RankService_RankRequest::RankService_RankRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_RankService_RankRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.RankService.RankRequest)
}
RankService_RankRequest::RankService_RankRequest(const RankService_RankRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sg.RankService.RankRequest)
}

void RankService_RankRequest::SharedCtor() {
  cmd_ = 1;
  type_ = 1;
}

RankService_RankRequest::~RankService_RankRequest() {
  // @@protoc_insertion_point(destructor:sg.RankService.RankRequest)
  SharedDtor();
}

void RankService_RankRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void RankService_RankRequest::ArenaDtor(void* object) {
  RankService_RankRequest* _this = reinterpret_cast< RankService_RankRequest* >(object);
  (void)_this;
}
void RankService_RankRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RankService_RankRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RankService_RankRequest::descriptor() {
  ::protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankService_RankRequest& RankService_RankRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_RankService_RankRequest.base);
  return *internal_default_instance();
}


void RankService_RankRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.RankService.RankRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    cmd_ = 1;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankService_RankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.RankService.RankRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.RankService.RANK_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::RankService_RANK_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::RankService_RANK_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.RANK_LIST_TYPE type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::RANK_LIST_TYPE_IsValid(value)) {
            set_type(static_cast< ::sg::RANK_LIST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.RankService.RankRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.RankService.RankRequest)
  return false;
#undef DO_
}

void RankService_RankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.RankService.RankRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.RankService.RANK_CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .sg.RANK_LIST_TYPE type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.RankService.RankRequest)
}

::google::protobuf::uint8* RankService_RankRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.RankService.RankRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.RankService.RANK_CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .sg.RANK_LIST_TYPE type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.RankService.RankRequest)
  return target;
}

size_t RankService_RankRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.RankService.RankRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.RankService.RANK_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // optional .sg.RANK_LIST_TYPE type = 2;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankService_RankRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.RankService.RankRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RankService_RankRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankService_RankRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.RankService.RankRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.RankService.RankRequest)
    MergeFrom(*source);
  }
}

void RankService_RankRequest::MergeFrom(const RankService_RankRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.RankService.RankRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RankService_RankRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.RankService.RankRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankService_RankRequest::CopyFrom(const RankService_RankRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.RankService.RankRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankService_RankRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RankService_RankRequest::Swap(RankService_RankRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RankService_RankRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RankService_RankRequest::UnsafeArenaSwap(RankService_RankRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RankService_RankRequest::InternalSwap(RankService_RankRequest* other) {
  using std::swap;
  swap(cmd_, other->cmd_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RankService_RankRequest::GetMetadata() const {
  protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RankService_RankResponse::InitAsDefaultInstance() {
  ::sg::_RankService_RankResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::sg::PVPRankState*>(
      ::sg::PVPRankState::internal_default_instance());
}
void RankService_RankResponse::unsafe_arena_set_allocated_state(
    ::sg::PVPRankState* state) {
  if (GetArenaNoVirtual() == NULL) {
    delete state_;
  }
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.RankService.RankResponse.state)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankService_RankResponse::kResultFieldNumber;
const int RankService_RankResponse::kStateFieldNumber;
const int RankService_RankResponse::kRolesFieldNumber;
const int RankService_RankResponse::kRecordListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankService_RankResponse::RankService_RankResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Rank_2eproto::scc_info_RankService_RankResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.RankService.RankResponse)
}
RankService_RankResponse::RankService_RankResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  roles_(arena),
  record_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_RankService_RankResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.RankService.RankResponse)
}
RankService_RankResponse::RankService_RankResponse(const RankService_RankResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      roles_(from.roles_),
      record_list_(from.record_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::sg::PVPRankState(*from.state_);
  } else {
    state_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.RankService.RankResponse)
}

void RankService_RankResponse::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&state_)) + sizeof(result_));
}

RankService_RankResponse::~RankService_RankResponse() {
  // @@protoc_insertion_point(destructor:sg.RankService.RankResponse)
  SharedDtor();
}

void RankService_RankResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete state_;
}

void RankService_RankResponse::ArenaDtor(void* object) {
  RankService_RankResponse* _this = reinterpret_cast< RankService_RankResponse* >(object);
  (void)_this;
}
void RankService_RankResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RankService_RankResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RankService_RankResponse::descriptor() {
  ::protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankService_RankResponse& RankService_RankResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_RankService_RankResponse.base);
  return *internal_default_instance();
}


void RankService_RankResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.RankService.RankResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  record_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankService_RankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.RankService.RankResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PVPRankState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.PVPRankingData roles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.PVPRecord record_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.RankService.RankResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.RankService.RankResponse)
  return false;
#undef DO_
}

void RankService_RankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.RankService.RankResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.PVPRankState state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  // repeated .sg.PVPRankingData roles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->roles(static_cast<int>(i)),
      output);
  }

  // repeated .sg.PVPRecord record_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->record_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.RankService.RankResponse)
}

::google::protobuf::uint8* RankService_RankResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.RankService.RankResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.PVPRankState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  // repeated .sg.PVPRankingData roles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->roles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.PVPRecord record_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->record_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.RankService.RankResponse)
  return target;
}

size_t RankService_RankResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.RankService.RankResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.PVPRankingData roles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->roles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roles(static_cast<int>(i)));
    }
  }

  // repeated .sg.PVPRecord record_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->record_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->record_list(static_cast<int>(i)));
    }
  }

  // optional .sg.PVPRankState state = 2;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankService_RankResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.RankService.RankResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RankService_RankResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankService_RankResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.RankService.RankResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.RankService.RankResponse)
    MergeFrom(*source);
  }
}

void RankService_RankResponse::MergeFrom(const RankService_RankResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.RankService.RankResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  record_list_.MergeFrom(from.record_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::sg::PVPRankState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RankService_RankResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.RankService.RankResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankService_RankResponse::CopyFrom(const RankService_RankResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.RankService.RankResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankService_RankResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->roles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record_list())) return false;
  return true;
}

void RankService_RankResponse::Swap(RankService_RankResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RankService_RankResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RankService_RankResponse::UnsafeArenaSwap(RankService_RankResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RankService_RankResponse::InternalSwap(RankService_RankResponse* other) {
  using std::swap;
  CastToBase(&roles_)->InternalSwap(CastToBase(&other->roles_));
  CastToBase(&record_list_)->InternalSwap(CastToBase(&other->record_list_));
  swap(state_, other->state_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RankService_RankResponse::GetMetadata() const {
  protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RankService::InitAsDefaultInstance() {
  ::sg::_RankService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::RankService_RankRequest*>(
      ::sg::RankService_RankRequest::internal_default_instance());
  ::sg::_RankService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::RankService_RankResponse*>(
      ::sg::RankService_RankResponse::internal_default_instance());
}
void RankService::unsafe_arena_set_allocated_req(
    ::sg::RankService_RankRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.RankService.req)
}
void RankService::unsafe_arena_set_allocated_resp(
    ::sg::RankService_RankResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.RankService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankService::kReqFieldNumber;
const int RankService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankService::RankService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Rank_2eproto::scc_info_RankService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.RankService)
}
RankService::RankService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_RankService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.RankService)
}
RankService::RankService(const RankService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::RankService_RankRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::RankService_RankResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.RankService)
}

void RankService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

RankService::~RankService() {
  // @@protoc_insertion_point(destructor:sg.RankService)
  SharedDtor();
}

void RankService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void RankService::ArenaDtor(void* object) {
  RankService* _this = reinterpret_cast< RankService* >(object);
  (void)_this;
}
void RankService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RankService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RankService::descriptor() {
  ::protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankService& RankService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Rank_2eproto::scc_info_RankService.base);
  return *internal_default_instance();
}


void RankService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.RankService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.RankService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.RankService.RankRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.RankService.RankResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.RankService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.RankService)
  return false;
#undef DO_
}

void RankService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.RankService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.RankService.RankRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.RankService.RankResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.RankService)
}

::google::protobuf::uint8* RankService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.RankService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.RankService.RankRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.RankService.RankResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.RankService)
  return target;
}

size_t RankService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.RankService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.RankService.RankRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.RankService.RankResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.RankService)
  GOOGLE_DCHECK_NE(&from, this);
  const RankService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.RankService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.RankService)
    MergeFrom(*source);
  }
}

void RankService::MergeFrom(const RankService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.RankService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::RankService_RankRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::RankService_RankResponse::MergeFrom(from.resp());
    }
  }
}

void RankService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.RankService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankService::CopyFrom(const RankService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.RankService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void RankService::Swap(RankService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RankService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RankService::UnsafeArenaSwap(RankService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RankService::InternalSwap(RankService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RankService::GetMetadata() const {
  protobuf_Rank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Rank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPRankState* Arena::CreateMaybeMessage< ::sg::PVPRankState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPRankState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPRankingData* Arena::CreateMaybeMessage< ::sg::PVPRankingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPRankingData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPRecord_SailorData* Arena::CreateMaybeMessage< ::sg::PVPRecord_SailorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPRecord_SailorData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPRecord* Arena::CreateMaybeMessage< ::sg::PVPRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::RankService_RankRequest* Arena::CreateMaybeMessage< ::sg::RankService_RankRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::RankService_RankRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::RankService_RankResponse* Arena::CreateMaybeMessage< ::sg::RankService_RankResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::RankService_RankResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::RankService* Arena::CreateMaybeMessage< ::sg::RankService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::RankService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
