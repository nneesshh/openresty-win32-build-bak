// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerInvade.proto

#ifndef PROTOBUF_INCLUDED_PlayerInvade_2eproto
#define PROTOBUF_INCLUDED_PlayerInvade_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PlayerInvade_2eproto 

namespace protobuf_PlayerInvade_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_PlayerInvade_2eproto
namespace sg {
class PlayerInvadeNotify;
class PlayerInvadeNotifyDefaultTypeInternal;
extern PlayerInvadeNotifyDefaultTypeInternal _PlayerInvadeNotify_default_instance_;
class PlayerInvadeRecord;
class PlayerInvadeRecordDefaultTypeInternal;
extern PlayerInvadeRecordDefaultTypeInternal _PlayerInvadeRecord_default_instance_;
class PlayerInvadeService;
class PlayerInvadeServiceDefaultTypeInternal;
extern PlayerInvadeServiceDefaultTypeInternal _PlayerInvadeService_default_instance_;
class PlayerInvadeService_PlayerInvadeRequest;
class PlayerInvadeService_PlayerInvadeRequestDefaultTypeInternal;
extern PlayerInvadeService_PlayerInvadeRequestDefaultTypeInternal _PlayerInvadeService_PlayerInvadeRequest_default_instance_;
class PlayerInvadeService_PlayerInvadeResponse;
class PlayerInvadeService_PlayerInvadeResponseDefaultTypeInternal;
extern PlayerInvadeService_PlayerInvadeResponseDefaultTypeInternal _PlayerInvadeService_PlayerInvadeResponse_default_instance_;
class PlayerInvadeState;
class PlayerInvadeStateDefaultTypeInternal;
extern PlayerInvadeStateDefaultTypeInternal _PlayerInvadeState_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::PlayerInvadeNotify* Arena::CreateMaybeMessage<::sg::PlayerInvadeNotify>(Arena*);
template<> ::sg::PlayerInvadeRecord* Arena::CreateMaybeMessage<::sg::PlayerInvadeRecord>(Arena*);
template<> ::sg::PlayerInvadeService* Arena::CreateMaybeMessage<::sg::PlayerInvadeService>(Arena*);
template<> ::sg::PlayerInvadeService_PlayerInvadeRequest* Arena::CreateMaybeMessage<::sg::PlayerInvadeService_PlayerInvadeRequest>(Arena*);
template<> ::sg::PlayerInvadeService_PlayerInvadeResponse* Arena::CreateMaybeMessage<::sg::PlayerInvadeService_PlayerInvadeResponse>(Arena*);
template<> ::sg::PlayerInvadeState* Arena::CreateMaybeMessage<::sg::PlayerInvadeState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum PlayerInvadeService_CMD {
  PlayerInvadeService_CMD_QUERY = 1,
  PlayerInvadeService_CMD_QUERY_STATE = 2
};
bool PlayerInvadeService_CMD_IsValid(int value);
const PlayerInvadeService_CMD PlayerInvadeService_CMD_CMD_MIN = PlayerInvadeService_CMD_QUERY;
const PlayerInvadeService_CMD PlayerInvadeService_CMD_CMD_MAX = PlayerInvadeService_CMD_QUERY_STATE;
const int PlayerInvadeService_CMD_CMD_ARRAYSIZE = PlayerInvadeService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerInvadeService_CMD_descriptor();
inline const ::std::string& PlayerInvadeService_CMD_Name(PlayerInvadeService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerInvadeService_CMD_descriptor(), value);
}
inline bool PlayerInvadeService_CMD_Parse(
    const ::std::string& name, PlayerInvadeService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerInvadeService_CMD>(
    PlayerInvadeService_CMD_descriptor(), name, value);
}
// ===================================================================

class PlayerInvadeRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PlayerInvadeRecord) */ {
 public:
  PlayerInvadeRecord();
  virtual ~PlayerInvadeRecord();

  PlayerInvadeRecord(const PlayerInvadeRecord& from);

  inline PlayerInvadeRecord& operator=(const PlayerInvadeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInvadeRecord(PlayerInvadeRecord&& from) noexcept
    : PlayerInvadeRecord() {
    *this = ::std::move(from);
  }

  inline PlayerInvadeRecord& operator=(PlayerInvadeRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInvadeRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInvadeRecord* internal_default_instance() {
    return reinterpret_cast<const PlayerInvadeRecord*>(
               &_PlayerInvadeRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(PlayerInvadeRecord* other);
  void Swap(PlayerInvadeRecord* other);
  friend void swap(PlayerInvadeRecord& a, PlayerInvadeRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInvadeRecord* New() const final {
    return CreateMaybeMessage<PlayerInvadeRecord>(NULL);
  }

  PlayerInvadeRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInvadeRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerInvadeRecord& from);
  void MergeFrom(const PlayerInvadeRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInvadeRecord* other);
  protected:
  explicit PlayerInvadeRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.UserInfo player = 3;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 3;
  private:
  const ::sg::UserInfo& _internal_player() const;
  public:
  const ::sg::UserInfo& player() const;
  ::sg::UserInfo* release_player();
  ::sg::UserInfo* mutable_player();
  void set_allocated_player(::sg::UserInfo* player);
  void unsafe_arena_set_allocated_player(
      ::sg::UserInfo* player);
  ::sg::UserInfo* unsafe_arena_release_player();

  // optional .sg.Reward revenge_reward = 7;
  bool has_revenge_reward() const;
  void clear_revenge_reward();
  static const int kRevengeRewardFieldNumber = 7;
  private:
  const ::sg::Reward& _internal_revenge_reward() const;
  public:
  const ::sg::Reward& revenge_reward() const;
  ::sg::Reward* release_revenge_reward();
  ::sg::Reward* mutable_revenge_reward();
  void set_allocated_revenge_reward(::sg::Reward* revenge_reward);
  void unsafe_arena_set_allocated_revenge_reward(
      ::sg::Reward* revenge_reward);
  ::sg::Reward* unsafe_arena_release_revenge_reward();

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional sfixed64 happen_time = 4;
  bool has_happen_time() const;
  void clear_happen_time();
  static const int kHappenTimeFieldNumber = 4;
  ::google::protobuf::int64 happen_time() const;
  void set_happen_time(::google::protobuf::int64 value);

  // optional sfixed64 revenge_deadline = 5;
  bool has_revenge_deadline() const;
  void clear_revenge_deadline();
  static const int kRevengeDeadlineFieldNumber = 5;
  ::google::protobuf::int64 revenge_deadline() const;
  void set_revenge_deadline(::google::protobuf::int64 value);

  // optional int32 result = 6;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 6;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 score_change = 8;
  bool has_score_change() const;
  void clear_score_change();
  static const int kScoreChangeFieldNumber = 8;
  ::google::protobuf::int32 score_change() const;
  void set_score_change(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PlayerInvadeRecord)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_player();
  void clear_has_player();
  void set_has_happen_time();
  void clear_has_happen_time();
  void set_has_revenge_deadline();
  void clear_has_revenge_deadline();
  void set_has_result();
  void clear_has_result();
  void set_has_revenge_reward();
  void clear_has_revenge_reward();
  void set_has_score_change();
  void clear_has_score_change();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserInfo* player_;
  ::sg::Reward* revenge_reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 happen_time_;
  ::google::protobuf::int64 revenge_deadline_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 score_change_;
  friend struct ::protobuf_PlayerInvade_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerInvadeState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PlayerInvadeState) */ {
 public:
  PlayerInvadeState();
  virtual ~PlayerInvadeState();

  PlayerInvadeState(const PlayerInvadeState& from);

  inline PlayerInvadeState& operator=(const PlayerInvadeState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInvadeState(PlayerInvadeState&& from) noexcept
    : PlayerInvadeState() {
    *this = ::std::move(from);
  }

  inline PlayerInvadeState& operator=(PlayerInvadeState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInvadeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInvadeState* internal_default_instance() {
    return reinterpret_cast<const PlayerInvadeState*>(
               &_PlayerInvadeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(PlayerInvadeState* other);
  void Swap(PlayerInvadeState* other);
  friend void swap(PlayerInvadeState& a, PlayerInvadeState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInvadeState* New() const final {
    return CreateMaybeMessage<PlayerInvadeState>(NULL);
  }

  PlayerInvadeState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInvadeState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerInvadeState& from);
  void MergeFrom(const PlayerInvadeState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInvadeState* other);
  protected:
  explicit PlayerInvadeState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.pb_pair_int_int drop_get = 5;
  int drop_get_size() const;
  void clear_drop_get();
  static const int kDropGetFieldNumber = 5;
  ::sg::pb_pair_int_int* mutable_drop_get(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >*
      mutable_drop_get();
  const ::sg::pb_pair_int_int& drop_get(int index) const;
  ::sg::pb_pair_int_int* add_drop_get();
  const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >&
      drop_get() const;

  // optional .sg.UserInfo match_player = 1;
  bool has_match_player() const;
  void clear_match_player();
  static const int kMatchPlayerFieldNumber = 1;
  private:
  const ::sg::UserInfo& _internal_match_player() const;
  public:
  const ::sg::UserInfo& match_player() const;
  ::sg::UserInfo* release_match_player();
  ::sg::UserInfo* mutable_match_player();
  void set_allocated_match_player(::sg::UserInfo* match_player);
  void unsafe_arena_set_allocated_match_player(
      ::sg::UserInfo* match_player);
  ::sg::UserInfo* unsafe_arena_release_match_player();

  // optional sfixed64 defend_deadline = 2;
  bool has_defend_deadline() const;
  void clear_defend_deadline();
  static const int kDefendDeadlineFieldNumber = 2;
  ::google::protobuf::int64 defend_deadline() const;
  void set_defend_deadline(::google::protobuf::int64 value);

  // optional sfixed64 deadline = 3;
  bool has_deadline() const;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 3;
  ::google::protobuf::int64 deadline() const;
  void set_deadline(::google::protobuf::int64 value);

  // optional int32 win = 4;
  bool has_win() const;
  void clear_win();
  static const int kWinFieldNumber = 4;
  ::google::protobuf::int32 win() const;
  void set_win(::google::protobuf::int32 value);

  // optional int32 score = 6;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 6;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PlayerInvadeState)
 private:
  void set_has_match_player();
  void clear_has_match_player();
  void set_has_defend_deadline();
  void clear_has_defend_deadline();
  void set_has_deadline();
  void clear_has_deadline();
  void set_has_win();
  void clear_has_win();
  void set_has_score();
  void clear_has_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int > drop_get_;
  ::sg::UserInfo* match_player_;
  ::google::protobuf::int64 defend_deadline_;
  ::google::protobuf::int64 deadline_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 score_;
  friend struct ::protobuf_PlayerInvade_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerInvadeService_PlayerInvadeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PlayerInvadeService.PlayerInvadeRequest) */ {
 public:
  PlayerInvadeService_PlayerInvadeRequest();
  virtual ~PlayerInvadeService_PlayerInvadeRequest();

  PlayerInvadeService_PlayerInvadeRequest(const PlayerInvadeService_PlayerInvadeRequest& from);

  inline PlayerInvadeService_PlayerInvadeRequest& operator=(const PlayerInvadeService_PlayerInvadeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInvadeService_PlayerInvadeRequest(PlayerInvadeService_PlayerInvadeRequest&& from) noexcept
    : PlayerInvadeService_PlayerInvadeRequest() {
    *this = ::std::move(from);
  }

  inline PlayerInvadeService_PlayerInvadeRequest& operator=(PlayerInvadeService_PlayerInvadeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInvadeService_PlayerInvadeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInvadeService_PlayerInvadeRequest* internal_default_instance() {
    return reinterpret_cast<const PlayerInvadeService_PlayerInvadeRequest*>(
               &_PlayerInvadeService_PlayerInvadeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(PlayerInvadeService_PlayerInvadeRequest* other);
  void Swap(PlayerInvadeService_PlayerInvadeRequest* other);
  friend void swap(PlayerInvadeService_PlayerInvadeRequest& a, PlayerInvadeService_PlayerInvadeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInvadeService_PlayerInvadeRequest* New() const final {
    return CreateMaybeMessage<PlayerInvadeService_PlayerInvadeRequest>(NULL);
  }

  PlayerInvadeService_PlayerInvadeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInvadeService_PlayerInvadeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerInvadeService_PlayerInvadeRequest& from);
  void MergeFrom(const PlayerInvadeService_PlayerInvadeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInvadeService_PlayerInvadeRequest* other);
  protected:
  explicit PlayerInvadeService_PlayerInvadeRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.PlayerInvadeService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::PlayerInvadeService_CMD cmd() const;
  void set_cmd(::sg::PlayerInvadeService_CMD value);

  // @@protoc_insertion_point(class_scope:sg.PlayerInvadeService.PlayerInvadeRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int cmd_;
  friend struct ::protobuf_PlayerInvade_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerInvadeService_PlayerInvadeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PlayerInvadeService.PlayerInvadeResponse) */ {
 public:
  PlayerInvadeService_PlayerInvadeResponse();
  virtual ~PlayerInvadeService_PlayerInvadeResponse();

  PlayerInvadeService_PlayerInvadeResponse(const PlayerInvadeService_PlayerInvadeResponse& from);

  inline PlayerInvadeService_PlayerInvadeResponse& operator=(const PlayerInvadeService_PlayerInvadeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInvadeService_PlayerInvadeResponse(PlayerInvadeService_PlayerInvadeResponse&& from) noexcept
    : PlayerInvadeService_PlayerInvadeResponse() {
    *this = ::std::move(from);
  }

  inline PlayerInvadeService_PlayerInvadeResponse& operator=(PlayerInvadeService_PlayerInvadeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInvadeService_PlayerInvadeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInvadeService_PlayerInvadeResponse* internal_default_instance() {
    return reinterpret_cast<const PlayerInvadeService_PlayerInvadeResponse*>(
               &_PlayerInvadeService_PlayerInvadeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(PlayerInvadeService_PlayerInvadeResponse* other);
  void Swap(PlayerInvadeService_PlayerInvadeResponse* other);
  friend void swap(PlayerInvadeService_PlayerInvadeResponse& a, PlayerInvadeService_PlayerInvadeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInvadeService_PlayerInvadeResponse* New() const final {
    return CreateMaybeMessage<PlayerInvadeService_PlayerInvadeResponse>(NULL);
  }

  PlayerInvadeService_PlayerInvadeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInvadeService_PlayerInvadeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerInvadeService_PlayerInvadeResponse& from);
  void MergeFrom(const PlayerInvadeService_PlayerInvadeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInvadeService_PlayerInvadeResponse* other);
  protected:
  explicit PlayerInvadeService_PlayerInvadeResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.PlayerInvadeRecord record_list = 3;
  int record_list_size() const;
  void clear_record_list();
  static const int kRecordListFieldNumber = 3;
  ::sg::PlayerInvadeRecord* mutable_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::PlayerInvadeRecord >*
      mutable_record_list();
  const ::sg::PlayerInvadeRecord& record_list(int index) const;
  ::sg::PlayerInvadeRecord* add_record_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::PlayerInvadeRecord >&
      record_list() const;

  // optional .sg.PlayerInvadeState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  private:
  const ::sg::PlayerInvadeState& _internal_state() const;
  public:
  const ::sg::PlayerInvadeState& state() const;
  ::sg::PlayerInvadeState* release_state();
  ::sg::PlayerInvadeState* mutable_state();
  void set_allocated_state(::sg::PlayerInvadeState* state);
  void unsafe_arena_set_allocated_state(
      ::sg::PlayerInvadeState* state);
  ::sg::PlayerInvadeState* unsafe_arena_release_state();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PlayerInvadeService.PlayerInvadeResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::PlayerInvadeRecord > record_list_;
  ::sg::PlayerInvadeState* state_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_PlayerInvade_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerInvadeService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PlayerInvadeService) */ {
 public:
  PlayerInvadeService();
  virtual ~PlayerInvadeService();

  PlayerInvadeService(const PlayerInvadeService& from);

  inline PlayerInvadeService& operator=(const PlayerInvadeService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInvadeService(PlayerInvadeService&& from) noexcept
    : PlayerInvadeService() {
    *this = ::std::move(from);
  }

  inline PlayerInvadeService& operator=(PlayerInvadeService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInvadeService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInvadeService* internal_default_instance() {
    return reinterpret_cast<const PlayerInvadeService*>(
               &_PlayerInvadeService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(PlayerInvadeService* other);
  void Swap(PlayerInvadeService* other);
  friend void swap(PlayerInvadeService& a, PlayerInvadeService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInvadeService* New() const final {
    return CreateMaybeMessage<PlayerInvadeService>(NULL);
  }

  PlayerInvadeService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInvadeService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerInvadeService& from);
  void MergeFrom(const PlayerInvadeService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInvadeService* other);
  protected:
  explicit PlayerInvadeService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerInvadeService_PlayerInvadeRequest PlayerInvadeRequest;
  typedef PlayerInvadeService_PlayerInvadeResponse PlayerInvadeResponse;

  typedef PlayerInvadeService_CMD CMD;
  static const CMD QUERY =
    PlayerInvadeService_CMD_QUERY;
  static const CMD QUERY_STATE =
    PlayerInvadeService_CMD_QUERY_STATE;
  static inline bool CMD_IsValid(int value) {
    return PlayerInvadeService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    PlayerInvadeService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    PlayerInvadeService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    PlayerInvadeService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return PlayerInvadeService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return PlayerInvadeService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return PlayerInvadeService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.PlayerInvadeService.PlayerInvadeRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::PlayerInvadeService_PlayerInvadeRequest& _internal_req() const;
  public:
  const ::sg::PlayerInvadeService_PlayerInvadeRequest& req() const;
  ::sg::PlayerInvadeService_PlayerInvadeRequest* release_req();
  ::sg::PlayerInvadeService_PlayerInvadeRequest* mutable_req();
  void set_allocated_req(::sg::PlayerInvadeService_PlayerInvadeRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::PlayerInvadeService_PlayerInvadeRequest* req);
  ::sg::PlayerInvadeService_PlayerInvadeRequest* unsafe_arena_release_req();

  // optional .sg.PlayerInvadeService.PlayerInvadeResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::PlayerInvadeService_PlayerInvadeResponse& _internal_resp() const;
  public:
  const ::sg::PlayerInvadeService_PlayerInvadeResponse& resp() const;
  ::sg::PlayerInvadeService_PlayerInvadeResponse* release_resp();
  ::sg::PlayerInvadeService_PlayerInvadeResponse* mutable_resp();
  void set_allocated_resp(::sg::PlayerInvadeService_PlayerInvadeResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::PlayerInvadeService_PlayerInvadeResponse* resp);
  ::sg::PlayerInvadeService_PlayerInvadeResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.PlayerInvadeService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::PlayerInvadeService_PlayerInvadeRequest* req_;
  ::sg::PlayerInvadeService_PlayerInvadeResponse* resp_;
  friend struct ::protobuf_PlayerInvade_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerInvadeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PlayerInvadeNotify) */ {
 public:
  PlayerInvadeNotify();
  virtual ~PlayerInvadeNotify();

  PlayerInvadeNotify(const PlayerInvadeNotify& from);

  inline PlayerInvadeNotify& operator=(const PlayerInvadeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInvadeNotify(PlayerInvadeNotify&& from) noexcept
    : PlayerInvadeNotify() {
    *this = ::std::move(from);
  }

  inline PlayerInvadeNotify& operator=(PlayerInvadeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInvadeNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInvadeNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerInvadeNotify*>(
               &_PlayerInvadeNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(PlayerInvadeNotify* other);
  void Swap(PlayerInvadeNotify* other);
  friend void swap(PlayerInvadeNotify& a, PlayerInvadeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInvadeNotify* New() const final {
    return CreateMaybeMessage<PlayerInvadeNotify>(NULL);
  }

  PlayerInvadeNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInvadeNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerInvadeNotify& from);
  void MergeFrom(const PlayerInvadeNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInvadeNotify* other);
  protected:
  explicit PlayerInvadeNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.PlayerInvadeRecord record = 1;
  bool has_record() const;
  void clear_record();
  static const int kRecordFieldNumber = 1;
  private:
  const ::sg::PlayerInvadeRecord& _internal_record() const;
  public:
  const ::sg::PlayerInvadeRecord& record() const;
  ::sg::PlayerInvadeRecord* release_record();
  ::sg::PlayerInvadeRecord* mutable_record();
  void set_allocated_record(::sg::PlayerInvadeRecord* record);
  void unsafe_arena_set_allocated_record(
      ::sg::PlayerInvadeRecord* record);
  ::sg::PlayerInvadeRecord* unsafe_arena_release_record();

  // optional .sg.Reward lose = 2;
  bool has_lose() const;
  void clear_lose();
  static const int kLoseFieldNumber = 2;
  private:
  const ::sg::Reward& _internal_lose() const;
  public:
  const ::sg::Reward& lose() const;
  ::sg::Reward* release_lose();
  ::sg::Reward* mutable_lose();
  void set_allocated_lose(::sg::Reward* lose);
  void unsafe_arena_set_allocated_lose(
      ::sg::Reward* lose);
  ::sg::Reward* unsafe_arena_release_lose();

  // @@protoc_insertion_point(class_scope:sg.PlayerInvadeNotify)
 private:
  void set_has_record();
  void clear_has_record();
  void set_has_lose();
  void clear_has_lose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::PlayerInvadeRecord* record_;
  ::sg::Reward* lose_;
  friend struct ::protobuf_PlayerInvade_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerInvadeRecord

// required int32 id = 1;
inline bool PlayerInvadeRecord::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInvadeRecord::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInvadeRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInvadeRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlayerInvadeRecord::id() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeRecord.id)
  return id_;
}
inline void PlayerInvadeRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeRecord.id)
}

// required int32 state = 2;
inline bool PlayerInvadeRecord::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInvadeRecord::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInvadeRecord::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInvadeRecord::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 PlayerInvadeRecord::state() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeRecord.state)
  return state_;
}
inline void PlayerInvadeRecord::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeRecord.state)
}

// optional .sg.UserInfo player = 3;
inline bool PlayerInvadeRecord::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInvadeRecord::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInvadeRecord::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::UserInfo& PlayerInvadeRecord::_internal_player() const {
  return *player_;
}
inline const ::sg::UserInfo& PlayerInvadeRecord::player() const {
  const ::sg::UserInfo* p = player_;
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeRecord.player)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserInfo*>(
      &::sg::_UserInfo_default_instance_);
}
inline ::sg::UserInfo* PlayerInvadeRecord::release_player() {
  // @@protoc_insertion_point(field_release:sg.PlayerInvadeRecord.player)
  clear_has_player();
  ::sg::UserInfo* temp = player_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  player_ = NULL;
  return temp;
}
inline ::sg::UserInfo* PlayerInvadeRecord::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerInvadeRecord.player)
  clear_has_player();
  ::sg::UserInfo* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::sg::UserInfo* PlayerInvadeRecord::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserInfo>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeRecord.player)
  return player_;
}
inline void PlayerInvadeRecord::set_allocated_player(::sg::UserInfo* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_);
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(player)->GetArena();
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerInvadeRecord.player)
}

// optional sfixed64 happen_time = 4;
inline bool PlayerInvadeRecord::has_happen_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInvadeRecord::set_has_happen_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInvadeRecord::clear_has_happen_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInvadeRecord::clear_happen_time() {
  happen_time_ = GOOGLE_LONGLONG(0);
  clear_has_happen_time();
}
inline ::google::protobuf::int64 PlayerInvadeRecord::happen_time() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeRecord.happen_time)
  return happen_time_;
}
inline void PlayerInvadeRecord::set_happen_time(::google::protobuf::int64 value) {
  set_has_happen_time();
  happen_time_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeRecord.happen_time)
}

// optional sfixed64 revenge_deadline = 5;
inline bool PlayerInvadeRecord::has_revenge_deadline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInvadeRecord::set_has_revenge_deadline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInvadeRecord::clear_has_revenge_deadline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInvadeRecord::clear_revenge_deadline() {
  revenge_deadline_ = GOOGLE_LONGLONG(0);
  clear_has_revenge_deadline();
}
inline ::google::protobuf::int64 PlayerInvadeRecord::revenge_deadline() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeRecord.revenge_deadline)
  return revenge_deadline_;
}
inline void PlayerInvadeRecord::set_revenge_deadline(::google::protobuf::int64 value) {
  set_has_revenge_deadline();
  revenge_deadline_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeRecord.revenge_deadline)
}

// optional int32 result = 6;
inline bool PlayerInvadeRecord::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInvadeRecord::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInvadeRecord::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInvadeRecord::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PlayerInvadeRecord::result() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeRecord.result)
  return result_;
}
inline void PlayerInvadeRecord::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeRecord.result)
}

// optional .sg.Reward revenge_reward = 7;
inline bool PlayerInvadeRecord::has_revenge_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInvadeRecord::set_has_revenge_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInvadeRecord::clear_has_revenge_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::Reward& PlayerInvadeRecord::_internal_revenge_reward() const {
  return *revenge_reward_;
}
inline const ::sg::Reward& PlayerInvadeRecord::revenge_reward() const {
  const ::sg::Reward* p = revenge_reward_;
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeRecord.revenge_reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* PlayerInvadeRecord::release_revenge_reward() {
  // @@protoc_insertion_point(field_release:sg.PlayerInvadeRecord.revenge_reward)
  clear_has_revenge_reward();
  ::sg::Reward* temp = revenge_reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  revenge_reward_ = NULL;
  return temp;
}
inline ::sg::Reward* PlayerInvadeRecord::unsafe_arena_release_revenge_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerInvadeRecord.revenge_reward)
  clear_has_revenge_reward();
  ::sg::Reward* temp = revenge_reward_;
  revenge_reward_ = NULL;
  return temp;
}
inline ::sg::Reward* PlayerInvadeRecord::mutable_revenge_reward() {
  set_has_revenge_reward();
  if (revenge_reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    revenge_reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeRecord.revenge_reward)
  return revenge_reward_;
}
inline void PlayerInvadeRecord::set_allocated_revenge_reward(::sg::Reward* revenge_reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(revenge_reward_);
  }
  if (revenge_reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(revenge_reward)->GetArena();
    if (message_arena != submessage_arena) {
      revenge_reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, revenge_reward, submessage_arena);
    }
    set_has_revenge_reward();
  } else {
    clear_has_revenge_reward();
  }
  revenge_reward_ = revenge_reward;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerInvadeRecord.revenge_reward)
}

// optional int32 score_change = 8;
inline bool PlayerInvadeRecord::has_score_change() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerInvadeRecord::set_has_score_change() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerInvadeRecord::clear_has_score_change() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerInvadeRecord::clear_score_change() {
  score_change_ = 0;
  clear_has_score_change();
}
inline ::google::protobuf::int32 PlayerInvadeRecord::score_change() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeRecord.score_change)
  return score_change_;
}
inline void PlayerInvadeRecord::set_score_change(::google::protobuf::int32 value) {
  set_has_score_change();
  score_change_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeRecord.score_change)
}

// -------------------------------------------------------------------

// PlayerInvadeState

// optional .sg.UserInfo match_player = 1;
inline bool PlayerInvadeState::has_match_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInvadeState::set_has_match_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInvadeState::clear_has_match_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::UserInfo& PlayerInvadeState::_internal_match_player() const {
  return *match_player_;
}
inline const ::sg::UserInfo& PlayerInvadeState::match_player() const {
  const ::sg::UserInfo* p = match_player_;
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeState.match_player)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserInfo*>(
      &::sg::_UserInfo_default_instance_);
}
inline ::sg::UserInfo* PlayerInvadeState::release_match_player() {
  // @@protoc_insertion_point(field_release:sg.PlayerInvadeState.match_player)
  clear_has_match_player();
  ::sg::UserInfo* temp = match_player_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  match_player_ = NULL;
  return temp;
}
inline ::sg::UserInfo* PlayerInvadeState::unsafe_arena_release_match_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerInvadeState.match_player)
  clear_has_match_player();
  ::sg::UserInfo* temp = match_player_;
  match_player_ = NULL;
  return temp;
}
inline ::sg::UserInfo* PlayerInvadeState::mutable_match_player() {
  set_has_match_player();
  if (match_player_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserInfo>(GetArenaNoVirtual());
    match_player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeState.match_player)
  return match_player_;
}
inline void PlayerInvadeState::set_allocated_match_player(::sg::UserInfo* match_player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(match_player_);
  }
  if (match_player) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(match_player)->GetArena();
    if (message_arena != submessage_arena) {
      match_player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match_player, submessage_arena);
    }
    set_has_match_player();
  } else {
    clear_has_match_player();
  }
  match_player_ = match_player;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerInvadeState.match_player)
}

// optional sfixed64 defend_deadline = 2;
inline bool PlayerInvadeState::has_defend_deadline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInvadeState::set_has_defend_deadline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInvadeState::clear_has_defend_deadline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInvadeState::clear_defend_deadline() {
  defend_deadline_ = GOOGLE_LONGLONG(0);
  clear_has_defend_deadline();
}
inline ::google::protobuf::int64 PlayerInvadeState::defend_deadline() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeState.defend_deadline)
  return defend_deadline_;
}
inline void PlayerInvadeState::set_defend_deadline(::google::protobuf::int64 value) {
  set_has_defend_deadline();
  defend_deadline_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeState.defend_deadline)
}

// optional sfixed64 deadline = 3;
inline bool PlayerInvadeState::has_deadline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInvadeState::set_has_deadline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInvadeState::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInvadeState::clear_deadline() {
  deadline_ = GOOGLE_LONGLONG(0);
  clear_has_deadline();
}
inline ::google::protobuf::int64 PlayerInvadeState::deadline() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeState.deadline)
  return deadline_;
}
inline void PlayerInvadeState::set_deadline(::google::protobuf::int64 value) {
  set_has_deadline();
  deadline_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeState.deadline)
}

// optional int32 win = 4;
inline bool PlayerInvadeState::has_win() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInvadeState::set_has_win() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInvadeState::clear_has_win() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInvadeState::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 PlayerInvadeState::win() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeState.win)
  return win_;
}
inline void PlayerInvadeState::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeState.win)
}

// repeated .sg.pb_pair_int_int drop_get = 5;
inline int PlayerInvadeState::drop_get_size() const {
  return drop_get_.size();
}
inline ::sg::pb_pair_int_int* PlayerInvadeState::mutable_drop_get(int index) {
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeState.drop_get)
  return drop_get_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >*
PlayerInvadeState::mutable_drop_get() {
  // @@protoc_insertion_point(field_mutable_list:sg.PlayerInvadeState.drop_get)
  return &drop_get_;
}
inline const ::sg::pb_pair_int_int& PlayerInvadeState::drop_get(int index) const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeState.drop_get)
  return drop_get_.Get(index);
}
inline ::sg::pb_pair_int_int* PlayerInvadeState::add_drop_get() {
  // @@protoc_insertion_point(field_add:sg.PlayerInvadeState.drop_get)
  return drop_get_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >&
PlayerInvadeState::drop_get() const {
  // @@protoc_insertion_point(field_list:sg.PlayerInvadeState.drop_get)
  return drop_get_;
}

// optional int32 score = 6;
inline bool PlayerInvadeState::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInvadeState::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInvadeState::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInvadeState::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 PlayerInvadeState::score() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeState.score)
  return score_;
}
inline void PlayerInvadeState::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeState.score)
}

// -------------------------------------------------------------------

// PlayerInvadeService_PlayerInvadeRequest

// required .sg.PlayerInvadeService.CMD cmd = 1;
inline bool PlayerInvadeService_PlayerInvadeRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInvadeService_PlayerInvadeRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInvadeService_PlayerInvadeRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInvadeService_PlayerInvadeRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::PlayerInvadeService_CMD PlayerInvadeService_PlayerInvadeRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeService.PlayerInvadeRequest.cmd)
  return static_cast< ::sg::PlayerInvadeService_CMD >(cmd_);
}
inline void PlayerInvadeService_PlayerInvadeRequest::set_cmd(::sg::PlayerInvadeService_CMD value) {
  assert(::sg::PlayerInvadeService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeService.PlayerInvadeRequest.cmd)
}

// -------------------------------------------------------------------

// PlayerInvadeService_PlayerInvadeResponse

// required int32 result = 1;
inline bool PlayerInvadeService_PlayerInvadeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInvadeService_PlayerInvadeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInvadeService_PlayerInvadeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInvadeService_PlayerInvadeResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PlayerInvadeService_PlayerInvadeResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeService.PlayerInvadeResponse.result)
  return result_;
}
inline void PlayerInvadeService_PlayerInvadeResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerInvadeService.PlayerInvadeResponse.result)
}

// optional .sg.PlayerInvadeState state = 2;
inline bool PlayerInvadeService_PlayerInvadeResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInvadeService_PlayerInvadeResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInvadeService_PlayerInvadeResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInvadeService_PlayerInvadeResponse::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
inline const ::sg::PlayerInvadeState& PlayerInvadeService_PlayerInvadeResponse::_internal_state() const {
  return *state_;
}
inline const ::sg::PlayerInvadeState& PlayerInvadeService_PlayerInvadeResponse::state() const {
  const ::sg::PlayerInvadeState* p = state_;
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeService.PlayerInvadeResponse.state)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PlayerInvadeState*>(
      &::sg::_PlayerInvadeState_default_instance_);
}
inline ::sg::PlayerInvadeState* PlayerInvadeService_PlayerInvadeResponse::release_state() {
  // @@protoc_insertion_point(field_release:sg.PlayerInvadeService.PlayerInvadeResponse.state)
  clear_has_state();
  ::sg::PlayerInvadeState* temp = state_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  state_ = NULL;
  return temp;
}
inline ::sg::PlayerInvadeState* PlayerInvadeService_PlayerInvadeResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerInvadeService.PlayerInvadeResponse.state)
  clear_has_state();
  ::sg::PlayerInvadeState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::sg::PlayerInvadeState* PlayerInvadeService_PlayerInvadeResponse::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PlayerInvadeState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeService.PlayerInvadeResponse.state)
  return state_;
}
inline void PlayerInvadeService_PlayerInvadeResponse::set_allocated_state(::sg::PlayerInvadeState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerInvadeService.PlayerInvadeResponse.state)
}

// repeated .sg.PlayerInvadeRecord record_list = 3;
inline int PlayerInvadeService_PlayerInvadeResponse::record_list_size() const {
  return record_list_.size();
}
inline void PlayerInvadeService_PlayerInvadeResponse::clear_record_list() {
  record_list_.Clear();
}
inline ::sg::PlayerInvadeRecord* PlayerInvadeService_PlayerInvadeResponse::mutable_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeService.PlayerInvadeResponse.record_list)
  return record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::PlayerInvadeRecord >*
PlayerInvadeService_PlayerInvadeResponse::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.PlayerInvadeService.PlayerInvadeResponse.record_list)
  return &record_list_;
}
inline const ::sg::PlayerInvadeRecord& PlayerInvadeService_PlayerInvadeResponse::record_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeService.PlayerInvadeResponse.record_list)
  return record_list_.Get(index);
}
inline ::sg::PlayerInvadeRecord* PlayerInvadeService_PlayerInvadeResponse::add_record_list() {
  // @@protoc_insertion_point(field_add:sg.PlayerInvadeService.PlayerInvadeResponse.record_list)
  return record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::PlayerInvadeRecord >&
PlayerInvadeService_PlayerInvadeResponse::record_list() const {
  // @@protoc_insertion_point(field_list:sg.PlayerInvadeService.PlayerInvadeResponse.record_list)
  return record_list_;
}

// -------------------------------------------------------------------

// PlayerInvadeService

// optional .sg.PlayerInvadeService.PlayerInvadeRequest req = 1;
inline bool PlayerInvadeService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInvadeService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInvadeService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInvadeService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::PlayerInvadeService_PlayerInvadeRequest& PlayerInvadeService::_internal_req() const {
  return *req_;
}
inline const ::sg::PlayerInvadeService_PlayerInvadeRequest& PlayerInvadeService::req() const {
  const ::sg::PlayerInvadeService_PlayerInvadeRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PlayerInvadeService_PlayerInvadeRequest*>(
      &::sg::_PlayerInvadeService_PlayerInvadeRequest_default_instance_);
}
inline ::sg::PlayerInvadeService_PlayerInvadeRequest* PlayerInvadeService::release_req() {
  // @@protoc_insertion_point(field_release:sg.PlayerInvadeService.req)
  clear_has_req();
  ::sg::PlayerInvadeService_PlayerInvadeRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::PlayerInvadeService_PlayerInvadeRequest* PlayerInvadeService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerInvadeService.req)
  clear_has_req();
  ::sg::PlayerInvadeService_PlayerInvadeRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::PlayerInvadeService_PlayerInvadeRequest* PlayerInvadeService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PlayerInvadeService_PlayerInvadeRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeService.req)
  return req_;
}
inline void PlayerInvadeService::set_allocated_req(::sg::PlayerInvadeService_PlayerInvadeRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerInvadeService.req)
}

// optional .sg.PlayerInvadeService.PlayerInvadeResponse resp = 2;
inline bool PlayerInvadeService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInvadeService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInvadeService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInvadeService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::PlayerInvadeService_PlayerInvadeResponse& PlayerInvadeService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::PlayerInvadeService_PlayerInvadeResponse& PlayerInvadeService::resp() const {
  const ::sg::PlayerInvadeService_PlayerInvadeResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PlayerInvadeService_PlayerInvadeResponse*>(
      &::sg::_PlayerInvadeService_PlayerInvadeResponse_default_instance_);
}
inline ::sg::PlayerInvadeService_PlayerInvadeResponse* PlayerInvadeService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.PlayerInvadeService.resp)
  clear_has_resp();
  ::sg::PlayerInvadeService_PlayerInvadeResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::PlayerInvadeService_PlayerInvadeResponse* PlayerInvadeService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerInvadeService.resp)
  clear_has_resp();
  ::sg::PlayerInvadeService_PlayerInvadeResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::PlayerInvadeService_PlayerInvadeResponse* PlayerInvadeService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PlayerInvadeService_PlayerInvadeResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeService.resp)
  return resp_;
}
inline void PlayerInvadeService::set_allocated_resp(::sg::PlayerInvadeService_PlayerInvadeResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerInvadeService.resp)
}

// -------------------------------------------------------------------

// PlayerInvadeNotify

// required .sg.PlayerInvadeRecord record = 1;
inline bool PlayerInvadeNotify::has_record() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInvadeNotify::set_has_record() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInvadeNotify::clear_has_record() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInvadeNotify::clear_record() {
  if (record_ != NULL) record_->Clear();
  clear_has_record();
}
inline const ::sg::PlayerInvadeRecord& PlayerInvadeNotify::_internal_record() const {
  return *record_;
}
inline const ::sg::PlayerInvadeRecord& PlayerInvadeNotify::record() const {
  const ::sg::PlayerInvadeRecord* p = record_;
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeNotify.record)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PlayerInvadeRecord*>(
      &::sg::_PlayerInvadeRecord_default_instance_);
}
inline ::sg::PlayerInvadeRecord* PlayerInvadeNotify::release_record() {
  // @@protoc_insertion_point(field_release:sg.PlayerInvadeNotify.record)
  clear_has_record();
  ::sg::PlayerInvadeRecord* temp = record_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  record_ = NULL;
  return temp;
}
inline ::sg::PlayerInvadeRecord* PlayerInvadeNotify::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerInvadeNotify.record)
  clear_has_record();
  ::sg::PlayerInvadeRecord* temp = record_;
  record_ = NULL;
  return temp;
}
inline ::sg::PlayerInvadeRecord* PlayerInvadeNotify::mutable_record() {
  set_has_record();
  if (record_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PlayerInvadeRecord>(GetArenaNoVirtual());
    record_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeNotify.record)
  return record_;
}
inline void PlayerInvadeNotify::set_allocated_record(::sg::PlayerInvadeRecord* record) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete record_;
  }
  if (record) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(record);
    if (message_arena != submessage_arena) {
      record = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    set_has_record();
  } else {
    clear_has_record();
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerInvadeNotify.record)
}

// optional .sg.Reward lose = 2;
inline bool PlayerInvadeNotify::has_lose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInvadeNotify::set_has_lose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInvadeNotify::clear_has_lose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::Reward& PlayerInvadeNotify::_internal_lose() const {
  return *lose_;
}
inline const ::sg::Reward& PlayerInvadeNotify::lose() const {
  const ::sg::Reward* p = lose_;
  // @@protoc_insertion_point(field_get:sg.PlayerInvadeNotify.lose)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* PlayerInvadeNotify::release_lose() {
  // @@protoc_insertion_point(field_release:sg.PlayerInvadeNotify.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* PlayerInvadeNotify::unsafe_arena_release_lose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerInvadeNotify.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* PlayerInvadeNotify::mutable_lose() {
  set_has_lose();
  if (lose_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    lose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerInvadeNotify.lose)
  return lose_;
}
inline void PlayerInvadeNotify::set_allocated_lose(::sg::Reward* lose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lose_);
  }
  if (lose) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lose)->GetArena();
    if (message_arena != submessage_arena) {
      lose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lose, submessage_arena);
    }
    set_has_lose();
  } else {
    clear_has_lose();
  }
  lose_ = lose;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerInvadeNotify.lose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::PlayerInvadeService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::PlayerInvadeService_CMD>() {
  return ::sg::PlayerInvadeService_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PlayerInvade_2eproto
