// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wanted.proto

#ifndef PROTOBUF_INCLUDED_Wanted_2eproto
#define PROTOBUF_INCLUDED_Wanted_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Wanted_2eproto 

namespace protobuf_Wanted_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Wanted_2eproto
namespace sg {
class UserWantedNotify;
class UserWantedNotifyDefaultTypeInternal;
extern UserWantedNotifyDefaultTypeInternal _UserWantedNotify_default_instance_;
class UserWantedService;
class UserWantedServiceDefaultTypeInternal;
extern UserWantedServiceDefaultTypeInternal _UserWantedService_default_instance_;
class UserWantedService_UserWantedRequest;
class UserWantedService_UserWantedRequestDefaultTypeInternal;
extern UserWantedService_UserWantedRequestDefaultTypeInternal _UserWantedService_UserWantedRequest_default_instance_;
class UserWantedService_UserWantedResponse;
class UserWantedService_UserWantedResponseDefaultTypeInternal;
extern UserWantedService_UserWantedResponseDefaultTypeInternal _UserWantedService_UserWantedResponse_default_instance_;
class Wanted;
class WantedDefaultTypeInternal;
extern WantedDefaultTypeInternal _Wanted_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::UserWantedNotify* Arena::CreateMaybeMessage<::sg::UserWantedNotify>(Arena*);
template<> ::sg::UserWantedService* Arena::CreateMaybeMessage<::sg::UserWantedService>(Arena*);
template<> ::sg::UserWantedService_UserWantedRequest* Arena::CreateMaybeMessage<::sg::UserWantedService_UserWantedRequest>(Arena*);
template<> ::sg::UserWantedService_UserWantedResponse* Arena::CreateMaybeMessage<::sg::UserWantedService_UserWantedResponse>(Arena*);
template<> ::sg::Wanted* Arena::CreateMaybeMessage<::sg::Wanted>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum UserWantedService_WANTED_CMD {
  UserWantedService_WANTED_CMD_QUERY = 1
};
bool UserWantedService_WANTED_CMD_IsValid(int value);
const UserWantedService_WANTED_CMD UserWantedService_WANTED_CMD_WANTED_CMD_MIN = UserWantedService_WANTED_CMD_QUERY;
const UserWantedService_WANTED_CMD UserWantedService_WANTED_CMD_WANTED_CMD_MAX = UserWantedService_WANTED_CMD_QUERY;
const int UserWantedService_WANTED_CMD_WANTED_CMD_ARRAYSIZE = UserWantedService_WANTED_CMD_WANTED_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserWantedService_WANTED_CMD_descriptor();
inline const ::std::string& UserWantedService_WANTED_CMD_Name(UserWantedService_WANTED_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserWantedService_WANTED_CMD_descriptor(), value);
}
inline bool UserWantedService_WANTED_CMD_Parse(
    const ::std::string& name, UserWantedService_WANTED_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserWantedService_WANTED_CMD>(
    UserWantedService_WANTED_CMD_descriptor(), name, value);
}
// ===================================================================

class Wanted : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.Wanted) */ {
 public:
  Wanted();
  virtual ~Wanted();

  Wanted(const Wanted& from);

  inline Wanted& operator=(const Wanted& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Wanted(Wanted&& from) noexcept
    : Wanted() {
    *this = ::std::move(from);
  }

  inline Wanted& operator=(Wanted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Wanted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wanted* internal_default_instance() {
    return reinterpret_cast<const Wanted*>(
               &_Wanted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Wanted* other);
  void Swap(Wanted* other);
  friend void swap(Wanted& a, Wanted& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Wanted* New() const final {
    return CreateMaybeMessage<Wanted>(NULL);
  }

  Wanted* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Wanted>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Wanted& from);
  void MergeFrom(const Wanted& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wanted* other);
  protected:
  explicit Wanted(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.Locale locale = 5;
  bool has_locale() const;
  void clear_locale();
  static const int kLocaleFieldNumber = 5;
  private:
  const ::sg::Locale& _internal_locale() const;
  public:
  const ::sg::Locale& locale() const;
  ::sg::Locale* release_locale();
  ::sg::Locale* mutable_locale();
  void set_allocated_locale(::sg::Locale* locale);
  void unsafe_arena_set_allocated_locale(
      ::sg::Locale* locale);
  ::sg::Locale* unsafe_arena_release_locale();

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 typeid = 3;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 3;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required sfixed64 optime = 8;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 8;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sg.Wanted)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_state();
  void clear_has_state();
  void set_has_locale();
  void clear_has_locale();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::Locale* locale_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 optime_;
  friend struct ::protobuf_Wanted_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserWantedService_UserWantedRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserWantedService.UserWantedRequest) */ {
 public:
  UserWantedService_UserWantedRequest();
  virtual ~UserWantedService_UserWantedRequest();

  UserWantedService_UserWantedRequest(const UserWantedService_UserWantedRequest& from);

  inline UserWantedService_UserWantedRequest& operator=(const UserWantedService_UserWantedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserWantedService_UserWantedRequest(UserWantedService_UserWantedRequest&& from) noexcept
    : UserWantedService_UserWantedRequest() {
    *this = ::std::move(from);
  }

  inline UserWantedService_UserWantedRequest& operator=(UserWantedService_UserWantedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserWantedService_UserWantedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserWantedService_UserWantedRequest* internal_default_instance() {
    return reinterpret_cast<const UserWantedService_UserWantedRequest*>(
               &_UserWantedService_UserWantedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(UserWantedService_UserWantedRequest* other);
  void Swap(UserWantedService_UserWantedRequest* other);
  friend void swap(UserWantedService_UserWantedRequest& a, UserWantedService_UserWantedRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserWantedService_UserWantedRequest* New() const final {
    return CreateMaybeMessage<UserWantedService_UserWantedRequest>(NULL);
  }

  UserWantedService_UserWantedRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserWantedService_UserWantedRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserWantedService_UserWantedRequest& from);
  void MergeFrom(const UserWantedService_UserWantedRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserWantedService_UserWantedRequest* other);
  protected:
  explicit UserWantedService_UserWantedRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.UserWantedService.WANTED_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserWantedService_WANTED_CMD cmd() const;
  void set_cmd(::sg::UserWantedService_WANTED_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserWantedService.UserWantedRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int cmd_;
  friend struct ::protobuf_Wanted_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserWantedService_UserWantedResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserWantedService.UserWantedResponse) */ {
 public:
  UserWantedService_UserWantedResponse();
  virtual ~UserWantedService_UserWantedResponse();

  UserWantedService_UserWantedResponse(const UserWantedService_UserWantedResponse& from);

  inline UserWantedService_UserWantedResponse& operator=(const UserWantedService_UserWantedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserWantedService_UserWantedResponse(UserWantedService_UserWantedResponse&& from) noexcept
    : UserWantedService_UserWantedResponse() {
    *this = ::std::move(from);
  }

  inline UserWantedService_UserWantedResponse& operator=(UserWantedService_UserWantedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserWantedService_UserWantedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserWantedService_UserWantedResponse* internal_default_instance() {
    return reinterpret_cast<const UserWantedService_UserWantedResponse*>(
               &_UserWantedService_UserWantedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(UserWantedService_UserWantedResponse* other);
  void Swap(UserWantedService_UserWantedResponse* other);
  friend void swap(UserWantedService_UserWantedResponse& a, UserWantedService_UserWantedResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserWantedService_UserWantedResponse* New() const final {
    return CreateMaybeMessage<UserWantedService_UserWantedResponse>(NULL);
  }

  UserWantedService_UserWantedResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserWantedService_UserWantedResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserWantedService_UserWantedResponse& from);
  void MergeFrom(const UserWantedService_UserWantedResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserWantedService_UserWantedResponse* other);
  protected:
  explicit UserWantedService_UserWantedResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Wanted wanted_list = 2;
  int wanted_list_size() const;
  void clear_wanted_list();
  static const int kWantedListFieldNumber = 2;
  ::sg::Wanted* mutable_wanted_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Wanted >*
      mutable_wanted_list();
  const ::sg::Wanted& wanted_list(int index) const;
  ::sg::Wanted* add_wanted_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::Wanted >&
      wanted_list() const;

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserWantedService.UserWantedResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Wanted > wanted_list_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_Wanted_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserWantedService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserWantedService) */ {
 public:
  UserWantedService();
  virtual ~UserWantedService();

  UserWantedService(const UserWantedService& from);

  inline UserWantedService& operator=(const UserWantedService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserWantedService(UserWantedService&& from) noexcept
    : UserWantedService() {
    *this = ::std::move(from);
  }

  inline UserWantedService& operator=(UserWantedService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserWantedService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserWantedService* internal_default_instance() {
    return reinterpret_cast<const UserWantedService*>(
               &_UserWantedService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UserWantedService* other);
  void Swap(UserWantedService* other);
  friend void swap(UserWantedService& a, UserWantedService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserWantedService* New() const final {
    return CreateMaybeMessage<UserWantedService>(NULL);
  }

  UserWantedService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserWantedService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserWantedService& from);
  void MergeFrom(const UserWantedService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserWantedService* other);
  protected:
  explicit UserWantedService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserWantedService_UserWantedRequest UserWantedRequest;
  typedef UserWantedService_UserWantedResponse UserWantedResponse;

  typedef UserWantedService_WANTED_CMD WANTED_CMD;
  static const WANTED_CMD QUERY =
    UserWantedService_WANTED_CMD_QUERY;
  static inline bool WANTED_CMD_IsValid(int value) {
    return UserWantedService_WANTED_CMD_IsValid(value);
  }
  static const WANTED_CMD WANTED_CMD_MIN =
    UserWantedService_WANTED_CMD_WANTED_CMD_MIN;
  static const WANTED_CMD WANTED_CMD_MAX =
    UserWantedService_WANTED_CMD_WANTED_CMD_MAX;
  static const int WANTED_CMD_ARRAYSIZE =
    UserWantedService_WANTED_CMD_WANTED_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WANTED_CMD_descriptor() {
    return UserWantedService_WANTED_CMD_descriptor();
  }
  static inline const ::std::string& WANTED_CMD_Name(WANTED_CMD value) {
    return UserWantedService_WANTED_CMD_Name(value);
  }
  static inline bool WANTED_CMD_Parse(const ::std::string& name,
      WANTED_CMD* value) {
    return UserWantedService_WANTED_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserWantedService.UserWantedRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserWantedService_UserWantedRequest& _internal_req() const;
  public:
  const ::sg::UserWantedService_UserWantedRequest& req() const;
  ::sg::UserWantedService_UserWantedRequest* release_req();
  ::sg::UserWantedService_UserWantedRequest* mutable_req();
  void set_allocated_req(::sg::UserWantedService_UserWantedRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserWantedService_UserWantedRequest* req);
  ::sg::UserWantedService_UserWantedRequest* unsafe_arena_release_req();

  // optional .sg.UserWantedService.UserWantedResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserWantedService_UserWantedResponse& _internal_resp() const;
  public:
  const ::sg::UserWantedService_UserWantedResponse& resp() const;
  ::sg::UserWantedService_UserWantedResponse* release_resp();
  ::sg::UserWantedService_UserWantedResponse* mutable_resp();
  void set_allocated_resp(::sg::UserWantedService_UserWantedResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserWantedService_UserWantedResponse* resp);
  ::sg::UserWantedService_UserWantedResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserWantedService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserWantedService_UserWantedRequest* req_;
  ::sg::UserWantedService_UserWantedResponse* resp_;
  friend struct ::protobuf_Wanted_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserWantedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserWantedNotify) */ {
 public:
  UserWantedNotify();
  virtual ~UserWantedNotify();

  UserWantedNotify(const UserWantedNotify& from);

  inline UserWantedNotify& operator=(const UserWantedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserWantedNotify(UserWantedNotify&& from) noexcept
    : UserWantedNotify() {
    *this = ::std::move(from);
  }

  inline UserWantedNotify& operator=(UserWantedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserWantedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserWantedNotify* internal_default_instance() {
    return reinterpret_cast<const UserWantedNotify*>(
               &_UserWantedNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(UserWantedNotify* other);
  void Swap(UserWantedNotify* other);
  friend void swap(UserWantedNotify& a, UserWantedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserWantedNotify* New() const final {
    return CreateMaybeMessage<UserWantedNotify>(NULL);
  }

  UserWantedNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserWantedNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserWantedNotify& from);
  void MergeFrom(const UserWantedNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserWantedNotify* other);
  protected:
  explicit UserWantedNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.Wanted wanted = 1;
  bool has_wanted() const;
  void clear_wanted();
  static const int kWantedFieldNumber = 1;
  private:
  const ::sg::Wanted& _internal_wanted() const;
  public:
  const ::sg::Wanted& wanted() const;
  ::sg::Wanted* release_wanted();
  ::sg::Wanted* mutable_wanted();
  void set_allocated_wanted(::sg::Wanted* wanted);
  void unsafe_arena_set_allocated_wanted(
      ::sg::Wanted* wanted);
  ::sg::Wanted* unsafe_arena_release_wanted();

  // @@protoc_insertion_point(class_scope:sg.UserWantedNotify)
 private:
  void set_has_wanted();
  void clear_has_wanted();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::Wanted* wanted_;
  friend struct ::protobuf_Wanted_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Wanted

// required int32 id = 2;
inline bool Wanted::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wanted::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wanted::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wanted::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Wanted::id() const {
  // @@protoc_insertion_point(field_get:sg.Wanted.id)
  return id_;
}
inline void Wanted::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.Wanted.id)
}

// required int32 typeid = 3;
inline bool Wanted::has_typeid_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wanted::set_has_typeid_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wanted::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wanted::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 Wanted::typeid_() const {
  // @@protoc_insertion_point(field_get:sg.Wanted.typeid)
  return typeid__;
}
inline void Wanted::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:sg.Wanted.typeid)
}

// required int32 state = 4;
inline bool Wanted::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Wanted::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Wanted::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Wanted::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Wanted::state() const {
  // @@protoc_insertion_point(field_get:sg.Wanted.state)
  return state_;
}
inline void Wanted::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.Wanted.state)
}

// required .sg.Locale locale = 5;
inline bool Wanted::has_locale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wanted::set_has_locale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wanted::clear_has_locale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Locale& Wanted::_internal_locale() const {
  return *locale_;
}
inline const ::sg::Locale& Wanted::locale() const {
  const ::sg::Locale* p = locale_;
  // @@protoc_insertion_point(field_get:sg.Wanted.locale)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Locale*>(
      &::sg::_Locale_default_instance_);
}
inline ::sg::Locale* Wanted::release_locale() {
  // @@protoc_insertion_point(field_release:sg.Wanted.locale)
  clear_has_locale();
  ::sg::Locale* temp = locale_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  locale_ = NULL;
  return temp;
}
inline ::sg::Locale* Wanted::unsafe_arena_release_locale() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.Wanted.locale)
  clear_has_locale();
  ::sg::Locale* temp = locale_;
  locale_ = NULL;
  return temp;
}
inline ::sg::Locale* Wanted::mutable_locale() {
  set_has_locale();
  if (locale_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Locale>(GetArenaNoVirtual());
    locale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.Wanted.locale)
  return locale_;
}
inline void Wanted::set_allocated_locale(::sg::Locale* locale) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(locale_);
  }
  if (locale) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(locale)->GetArena();
    if (message_arena != submessage_arena) {
      locale = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, locale, submessage_arena);
    }
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_ = locale;
  // @@protoc_insertion_point(field_set_allocated:sg.Wanted.locale)
}

// required sfixed64 optime = 8;
inline bool Wanted::has_optime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Wanted::set_has_optime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Wanted::clear_has_optime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Wanted::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 Wanted::optime() const {
  // @@protoc_insertion_point(field_get:sg.Wanted.optime)
  return optime_;
}
inline void Wanted::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:sg.Wanted.optime)
}

// -------------------------------------------------------------------

// UserWantedService_UserWantedRequest

// required .sg.UserWantedService.WANTED_CMD cmd = 1;
inline bool UserWantedService_UserWantedRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserWantedService_UserWantedRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserWantedService_UserWantedRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserWantedService_UserWantedRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserWantedService_WANTED_CMD UserWantedService_UserWantedRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserWantedService.UserWantedRequest.cmd)
  return static_cast< ::sg::UserWantedService_WANTED_CMD >(cmd_);
}
inline void UserWantedService_UserWantedRequest::set_cmd(::sg::UserWantedService_WANTED_CMD value) {
  assert(::sg::UserWantedService_WANTED_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserWantedService.UserWantedRequest.cmd)
}

// -------------------------------------------------------------------

// UserWantedService_UserWantedResponse

// required int32 result = 1;
inline bool UserWantedService_UserWantedResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserWantedService_UserWantedResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserWantedService_UserWantedResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserWantedService_UserWantedResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserWantedService_UserWantedResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserWantedService.UserWantedResponse.result)
  return result_;
}
inline void UserWantedService_UserWantedResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserWantedService.UserWantedResponse.result)
}

// repeated .sg.Wanted wanted_list = 2;
inline int UserWantedService_UserWantedResponse::wanted_list_size() const {
  return wanted_list_.size();
}
inline void UserWantedService_UserWantedResponse::clear_wanted_list() {
  wanted_list_.Clear();
}
inline ::sg::Wanted* UserWantedService_UserWantedResponse::mutable_wanted_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserWantedService.UserWantedResponse.wanted_list)
  return wanted_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Wanted >*
UserWantedService_UserWantedResponse::mutable_wanted_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserWantedService.UserWantedResponse.wanted_list)
  return &wanted_list_;
}
inline const ::sg::Wanted& UserWantedService_UserWantedResponse::wanted_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserWantedService.UserWantedResponse.wanted_list)
  return wanted_list_.Get(index);
}
inline ::sg::Wanted* UserWantedService_UserWantedResponse::add_wanted_list() {
  // @@protoc_insertion_point(field_add:sg.UserWantedService.UserWantedResponse.wanted_list)
  return wanted_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Wanted >&
UserWantedService_UserWantedResponse::wanted_list() const {
  // @@protoc_insertion_point(field_list:sg.UserWantedService.UserWantedResponse.wanted_list)
  return wanted_list_;
}

// -------------------------------------------------------------------

// UserWantedService

// optional .sg.UserWantedService.UserWantedRequest req = 1;
inline bool UserWantedService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserWantedService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserWantedService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserWantedService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserWantedService_UserWantedRequest& UserWantedService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserWantedService_UserWantedRequest& UserWantedService::req() const {
  const ::sg::UserWantedService_UserWantedRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserWantedService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserWantedService_UserWantedRequest*>(
      &::sg::_UserWantedService_UserWantedRequest_default_instance_);
}
inline ::sg::UserWantedService_UserWantedRequest* UserWantedService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserWantedService.req)
  clear_has_req();
  ::sg::UserWantedService_UserWantedRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserWantedService_UserWantedRequest* UserWantedService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserWantedService.req)
  clear_has_req();
  ::sg::UserWantedService_UserWantedRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserWantedService_UserWantedRequest* UserWantedService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserWantedService_UserWantedRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserWantedService.req)
  return req_;
}
inline void UserWantedService::set_allocated_req(::sg::UserWantedService_UserWantedRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserWantedService.req)
}

// optional .sg.UserWantedService.UserWantedResponse resp = 2;
inline bool UserWantedService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserWantedService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserWantedService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserWantedService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserWantedService_UserWantedResponse& UserWantedService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserWantedService_UserWantedResponse& UserWantedService::resp() const {
  const ::sg::UserWantedService_UserWantedResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserWantedService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserWantedService_UserWantedResponse*>(
      &::sg::_UserWantedService_UserWantedResponse_default_instance_);
}
inline ::sg::UserWantedService_UserWantedResponse* UserWantedService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserWantedService.resp)
  clear_has_resp();
  ::sg::UserWantedService_UserWantedResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserWantedService_UserWantedResponse* UserWantedService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserWantedService.resp)
  clear_has_resp();
  ::sg::UserWantedService_UserWantedResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserWantedService_UserWantedResponse* UserWantedService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserWantedService_UserWantedResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserWantedService.resp)
  return resp_;
}
inline void UserWantedService::set_allocated_resp(::sg::UserWantedService_UserWantedResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserWantedService.resp)
}

// -------------------------------------------------------------------

// UserWantedNotify

// required .sg.Wanted wanted = 1;
inline bool UserWantedNotify::has_wanted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserWantedNotify::set_has_wanted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserWantedNotify::clear_has_wanted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserWantedNotify::clear_wanted() {
  if (wanted_ != NULL) wanted_->Clear();
  clear_has_wanted();
}
inline const ::sg::Wanted& UserWantedNotify::_internal_wanted() const {
  return *wanted_;
}
inline const ::sg::Wanted& UserWantedNotify::wanted() const {
  const ::sg::Wanted* p = wanted_;
  // @@protoc_insertion_point(field_get:sg.UserWantedNotify.wanted)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Wanted*>(
      &::sg::_Wanted_default_instance_);
}
inline ::sg::Wanted* UserWantedNotify::release_wanted() {
  // @@protoc_insertion_point(field_release:sg.UserWantedNotify.wanted)
  clear_has_wanted();
  ::sg::Wanted* temp = wanted_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  wanted_ = NULL;
  return temp;
}
inline ::sg::Wanted* UserWantedNotify::unsafe_arena_release_wanted() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserWantedNotify.wanted)
  clear_has_wanted();
  ::sg::Wanted* temp = wanted_;
  wanted_ = NULL;
  return temp;
}
inline ::sg::Wanted* UserWantedNotify::mutable_wanted() {
  set_has_wanted();
  if (wanted_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Wanted>(GetArenaNoVirtual());
    wanted_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserWantedNotify.wanted)
  return wanted_;
}
inline void UserWantedNotify::set_allocated_wanted(::sg::Wanted* wanted) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete wanted_;
  }
  if (wanted) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(wanted);
    if (message_arena != submessage_arena) {
      wanted = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wanted, submessage_arena);
    }
    set_has_wanted();
  } else {
    clear_has_wanted();
  }
  wanted_ = wanted;
  // @@protoc_insertion_point(field_set_allocated:sg.UserWantedNotify.wanted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::UserWantedService_WANTED_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserWantedService_WANTED_CMD>() {
  return ::sg::UserWantedService_WANTED_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Wanted_2eproto
