// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Equip.proto

#ifndef PROTOBUF_INCLUDED_Equip_2eproto
#define PROTOBUF_INCLUDED_Equip_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Equip_2eproto 

namespace protobuf_Equip_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Equip_2eproto
namespace sg {
class EquipService;
class EquipServiceDefaultTypeInternal;
extern EquipServiceDefaultTypeInternal _EquipService_default_instance_;
class EquipService_EquipRequest;
class EquipService_EquipRequestDefaultTypeInternal;
extern EquipService_EquipRequestDefaultTypeInternal _EquipService_EquipRequest_default_instance_;
class EquipService_EquipResponse;
class EquipService_EquipResponseDefaultTypeInternal;
extern EquipService_EquipResponseDefaultTypeInternal _EquipService_EquipResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::EquipService* Arena::CreateMaybeMessage<::sg::EquipService>(Arena*);
template<> ::sg::EquipService_EquipRequest* Arena::CreateMaybeMessage<::sg::EquipService_EquipRequest>(Arena*);
template<> ::sg::EquipService_EquipResponse* Arena::CreateMaybeMessage<::sg::EquipService_EquipResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum EquipService_EQUIP_CMD {
  EquipService_EQUIP_CMD_QUERY = 1,
  EquipService_EQUIP_CMD_REFINE = 2,
  EquipService_EQUIP_CMD_DECOMPOSE = 3,
  EquipService_EQUIP_CMD_LOCK = 4,
  EquipService_EQUIP_CMD_RESET_REFINE = 5,
  EquipService_EQUIP_CMD_SALE = 6,
  EquipService_EQUIP_CMD_QUALITY_REFINE = 7
};
bool EquipService_EQUIP_CMD_IsValid(int value);
const EquipService_EQUIP_CMD EquipService_EQUIP_CMD_EQUIP_CMD_MIN = EquipService_EQUIP_CMD_QUERY;
const EquipService_EQUIP_CMD EquipService_EQUIP_CMD_EQUIP_CMD_MAX = EquipService_EQUIP_CMD_QUALITY_REFINE;
const int EquipService_EQUIP_CMD_EQUIP_CMD_ARRAYSIZE = EquipService_EQUIP_CMD_EQUIP_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipService_EQUIP_CMD_descriptor();
inline const ::std::string& EquipService_EQUIP_CMD_Name(EquipService_EQUIP_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipService_EQUIP_CMD_descriptor(), value);
}
inline bool EquipService_EQUIP_CMD_Parse(
    const ::std::string& name, EquipService_EQUIP_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipService_EQUIP_CMD>(
    EquipService_EQUIP_CMD_descriptor(), name, value);
}
// ===================================================================

class EquipService_EquipRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.EquipService.EquipRequest) */ {
 public:
  EquipService_EquipRequest();
  virtual ~EquipService_EquipRequest();

  EquipService_EquipRequest(const EquipService_EquipRequest& from);

  inline EquipService_EquipRequest& operator=(const EquipService_EquipRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EquipService_EquipRequest(EquipService_EquipRequest&& from) noexcept
    : EquipService_EquipRequest() {
    *this = ::std::move(from);
  }

  inline EquipService_EquipRequest& operator=(EquipService_EquipRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipService_EquipRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EquipService_EquipRequest* internal_default_instance() {
    return reinterpret_cast<const EquipService_EquipRequest*>(
               &_EquipService_EquipRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(EquipService_EquipRequest* other);
  void Swap(EquipService_EquipRequest* other);
  friend void swap(EquipService_EquipRequest& a, EquipService_EquipRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EquipService_EquipRequest* New() const final {
    return CreateMaybeMessage<EquipService_EquipRequest>(NULL);
  }

  EquipService_EquipRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EquipService_EquipRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EquipService_EquipRequest& from);
  void MergeFrom(const EquipService_EquipRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipService_EquipRequest* other);
  protected:
  explicit EquipService_EquipRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 decompose_list = 6;
  int decompose_list_size() const;
  void clear_decompose_list();
  static const int kDecomposeListFieldNumber = 6;
  ::google::protobuf::int32 decompose_list(int index) const;
  void set_decompose_list(int index, ::google::protobuf::int32 value);
  void add_decompose_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      decompose_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_decompose_list();

  // optional int32 equip_id = 2;
  bool has_equip_id() const;
  void clear_equip_id();
  static const int kEquipIdFieldNumber = 2;
  ::google::protobuf::int32 equip_id() const;
  void set_equip_id(::google::protobuf::int32 value);

  // optional int32 slot_id = 3;
  bool has_slot_id() const;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 3;
  ::google::protobuf::int32 slot_id() const;
  void set_slot_id(::google::protobuf::int32 value);

  // optional int32 refine_way = 4;
  bool has_refine_way() const;
  void clear_refine_way();
  static const int kRefineWayFieldNumber = 4;
  ::google::protobuf::int32 refine_way() const;
  void set_refine_way(::google::protobuf::int32 value);

  // optional int32 decompose_way = 5;
  bool has_decompose_way() const;
  void clear_decompose_way();
  static const int kDecomposeWayFieldNumber = 5;
  ::google::protobuf::int32 decompose_way() const;
  void set_decompose_way(::google::protobuf::int32 value);

  // required .sg.EquipService.EQUIP_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::EquipService_EQUIP_CMD cmd() const;
  void set_cmd(::sg::EquipService_EQUIP_CMD value);

  // @@protoc_insertion_point(class_scope:sg.EquipService.EquipRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_equip_id();
  void clear_has_equip_id();
  void set_has_slot_id();
  void clear_has_slot_id();
  void set_has_refine_way();
  void clear_has_refine_way();
  void set_has_decompose_way();
  void clear_has_decompose_way();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > decompose_list_;
  ::google::protobuf::int32 equip_id_;
  ::google::protobuf::int32 slot_id_;
  ::google::protobuf::int32 refine_way_;
  ::google::protobuf::int32 decompose_way_;
  int cmd_;
  friend struct ::protobuf_Equip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EquipService_EquipResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.EquipService.EquipResponse) */ {
 public:
  EquipService_EquipResponse();
  virtual ~EquipService_EquipResponse();

  EquipService_EquipResponse(const EquipService_EquipResponse& from);

  inline EquipService_EquipResponse& operator=(const EquipService_EquipResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EquipService_EquipResponse(EquipService_EquipResponse&& from) noexcept
    : EquipService_EquipResponse() {
    *this = ::std::move(from);
  }

  inline EquipService_EquipResponse& operator=(EquipService_EquipResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipService_EquipResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EquipService_EquipResponse* internal_default_instance() {
    return reinterpret_cast<const EquipService_EquipResponse*>(
               &_EquipService_EquipResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(EquipService_EquipResponse* other);
  void Swap(EquipService_EquipResponse* other);
  friend void swap(EquipService_EquipResponse& a, EquipService_EquipResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EquipService_EquipResponse* New() const final {
    return CreateMaybeMessage<EquipService_EquipResponse>(NULL);
  }

  EquipService_EquipResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EquipService_EquipResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EquipService_EquipResponse& from);
  void MergeFrom(const EquipService_EquipResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipService_EquipResponse* other);
  protected:
  explicit EquipService_EquipResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Equip equip_list = 3;
  int equip_list_size() const;
  void clear_equip_list();
  static const int kEquipListFieldNumber = 3;
  ::sg::Equip* mutable_equip_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Equip >*
      mutable_equip_list();
  const ::sg::Equip& equip_list(int index) const;
  ::sg::Equip* add_equip_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::Equip >&
      equip_list() const;

  // optional .sg.Reward get = 4;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 4;
  private:
  const ::sg::Reward& _internal_get() const;
  public:
  const ::sg::Reward& get() const;
  ::sg::Reward* release_get();
  ::sg::Reward* mutable_get();
  void set_allocated_get(::sg::Reward* get);
  void unsafe_arena_set_allocated_get(
      ::sg::Reward* get);
  ::sg::Reward* unsafe_arena_release_get();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional bool big_success = 2;
  bool has_big_success() const;
  void clear_big_success();
  static const int kBigSuccessFieldNumber = 2;
  bool big_success() const;
  void set_big_success(bool value);

  // @@protoc_insertion_point(class_scope:sg.EquipService.EquipResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_big_success();
  void clear_has_big_success();
  void set_has_get();
  void clear_has_get();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Equip > equip_list_;
  ::sg::Reward* get_;
  ::google::protobuf::int32 result_;
  bool big_success_;
  friend struct ::protobuf_Equip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EquipService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.EquipService) */ {
 public:
  EquipService();
  virtual ~EquipService();

  EquipService(const EquipService& from);

  inline EquipService& operator=(const EquipService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EquipService(EquipService&& from) noexcept
    : EquipService() {
    *this = ::std::move(from);
  }

  inline EquipService& operator=(EquipService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EquipService* internal_default_instance() {
    return reinterpret_cast<const EquipService*>(
               &_EquipService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(EquipService* other);
  void Swap(EquipService* other);
  friend void swap(EquipService& a, EquipService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EquipService* New() const final {
    return CreateMaybeMessage<EquipService>(NULL);
  }

  EquipService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EquipService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EquipService& from);
  void MergeFrom(const EquipService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipService* other);
  protected:
  explicit EquipService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EquipService_EquipRequest EquipRequest;
  typedef EquipService_EquipResponse EquipResponse;

  typedef EquipService_EQUIP_CMD EQUIP_CMD;
  static const EQUIP_CMD QUERY =
    EquipService_EQUIP_CMD_QUERY;
  static const EQUIP_CMD REFINE =
    EquipService_EQUIP_CMD_REFINE;
  static const EQUIP_CMD DECOMPOSE =
    EquipService_EQUIP_CMD_DECOMPOSE;
  static const EQUIP_CMD LOCK =
    EquipService_EQUIP_CMD_LOCK;
  static const EQUIP_CMD RESET_REFINE =
    EquipService_EQUIP_CMD_RESET_REFINE;
  static const EQUIP_CMD SALE =
    EquipService_EQUIP_CMD_SALE;
  static const EQUIP_CMD QUALITY_REFINE =
    EquipService_EQUIP_CMD_QUALITY_REFINE;
  static inline bool EQUIP_CMD_IsValid(int value) {
    return EquipService_EQUIP_CMD_IsValid(value);
  }
  static const EQUIP_CMD EQUIP_CMD_MIN =
    EquipService_EQUIP_CMD_EQUIP_CMD_MIN;
  static const EQUIP_CMD EQUIP_CMD_MAX =
    EquipService_EQUIP_CMD_EQUIP_CMD_MAX;
  static const int EQUIP_CMD_ARRAYSIZE =
    EquipService_EQUIP_CMD_EQUIP_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EQUIP_CMD_descriptor() {
    return EquipService_EQUIP_CMD_descriptor();
  }
  static inline const ::std::string& EQUIP_CMD_Name(EQUIP_CMD value) {
    return EquipService_EQUIP_CMD_Name(value);
  }
  static inline bool EQUIP_CMD_Parse(const ::std::string& name,
      EQUIP_CMD* value) {
    return EquipService_EQUIP_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.EquipService.EquipRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::EquipService_EquipRequest& _internal_req() const;
  public:
  const ::sg::EquipService_EquipRequest& req() const;
  ::sg::EquipService_EquipRequest* release_req();
  ::sg::EquipService_EquipRequest* mutable_req();
  void set_allocated_req(::sg::EquipService_EquipRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::EquipService_EquipRequest* req);
  ::sg::EquipService_EquipRequest* unsafe_arena_release_req();

  // optional .sg.EquipService.EquipResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::EquipService_EquipResponse& _internal_resp() const;
  public:
  const ::sg::EquipService_EquipResponse& resp() const;
  ::sg::EquipService_EquipResponse* release_resp();
  ::sg::EquipService_EquipResponse* mutable_resp();
  void set_allocated_resp(::sg::EquipService_EquipResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::EquipService_EquipResponse* resp);
  ::sg::EquipService_EquipResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.EquipService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::EquipService_EquipRequest* req_;
  ::sg::EquipService_EquipResponse* resp_;
  friend struct ::protobuf_Equip_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EquipService_EquipRequest

// required .sg.EquipService.EQUIP_CMD cmd = 1;
inline bool EquipService_EquipRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipService_EquipRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipService_EquipRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipService_EquipRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::EquipService_EQUIP_CMD EquipService_EquipRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipRequest.cmd)
  return static_cast< ::sg::EquipService_EQUIP_CMD >(cmd_);
}
inline void EquipService_EquipRequest::set_cmd(::sg::EquipService_EQUIP_CMD value) {
  assert(::sg::EquipService_EQUIP_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.EquipService.EquipRequest.cmd)
}

// optional int32 equip_id = 2;
inline bool EquipService_EquipRequest::has_equip_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipService_EquipRequest::set_has_equip_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipService_EquipRequest::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipService_EquipRequest::clear_equip_id() {
  equip_id_ = 0;
  clear_has_equip_id();
}
inline ::google::protobuf::int32 EquipService_EquipRequest::equip_id() const {
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipRequest.equip_id)
  return equip_id_;
}
inline void EquipService_EquipRequest::set_equip_id(::google::protobuf::int32 value) {
  set_has_equip_id();
  equip_id_ = value;
  // @@protoc_insertion_point(field_set:sg.EquipService.EquipRequest.equip_id)
}

// optional int32 slot_id = 3;
inline bool EquipService_EquipRequest::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipService_EquipRequest::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipService_EquipRequest::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipService_EquipRequest::clear_slot_id() {
  slot_id_ = 0;
  clear_has_slot_id();
}
inline ::google::protobuf::int32 EquipService_EquipRequest::slot_id() const {
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipRequest.slot_id)
  return slot_id_;
}
inline void EquipService_EquipRequest::set_slot_id(::google::protobuf::int32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:sg.EquipService.EquipRequest.slot_id)
}

// optional int32 refine_way = 4;
inline bool EquipService_EquipRequest::has_refine_way() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipService_EquipRequest::set_has_refine_way() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipService_EquipRequest::clear_has_refine_way() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipService_EquipRequest::clear_refine_way() {
  refine_way_ = 0;
  clear_has_refine_way();
}
inline ::google::protobuf::int32 EquipService_EquipRequest::refine_way() const {
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipRequest.refine_way)
  return refine_way_;
}
inline void EquipService_EquipRequest::set_refine_way(::google::protobuf::int32 value) {
  set_has_refine_way();
  refine_way_ = value;
  // @@protoc_insertion_point(field_set:sg.EquipService.EquipRequest.refine_way)
}

// optional int32 decompose_way = 5;
inline bool EquipService_EquipRequest::has_decompose_way() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipService_EquipRequest::set_has_decompose_way() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipService_EquipRequest::clear_has_decompose_way() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipService_EquipRequest::clear_decompose_way() {
  decompose_way_ = 0;
  clear_has_decompose_way();
}
inline ::google::protobuf::int32 EquipService_EquipRequest::decompose_way() const {
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipRequest.decompose_way)
  return decompose_way_;
}
inline void EquipService_EquipRequest::set_decompose_way(::google::protobuf::int32 value) {
  set_has_decompose_way();
  decompose_way_ = value;
  // @@protoc_insertion_point(field_set:sg.EquipService.EquipRequest.decompose_way)
}

// repeated int32 decompose_list = 6;
inline int EquipService_EquipRequest::decompose_list_size() const {
  return decompose_list_.size();
}
inline void EquipService_EquipRequest::clear_decompose_list() {
  decompose_list_.Clear();
}
inline ::google::protobuf::int32 EquipService_EquipRequest::decompose_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipRequest.decompose_list)
  return decompose_list_.Get(index);
}
inline void EquipService_EquipRequest::set_decompose_list(int index, ::google::protobuf::int32 value) {
  decompose_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:sg.EquipService.EquipRequest.decompose_list)
}
inline void EquipService_EquipRequest::add_decompose_list(::google::protobuf::int32 value) {
  decompose_list_.Add(value);
  // @@protoc_insertion_point(field_add:sg.EquipService.EquipRequest.decompose_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipService_EquipRequest::decompose_list() const {
  // @@protoc_insertion_point(field_list:sg.EquipService.EquipRequest.decompose_list)
  return decompose_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipService_EquipRequest::mutable_decompose_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.EquipService.EquipRequest.decompose_list)
  return &decompose_list_;
}

// -------------------------------------------------------------------

// EquipService_EquipResponse

// required int32 result = 1;
inline bool EquipService_EquipResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipService_EquipResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipService_EquipResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipService_EquipResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipService_EquipResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipResponse.result)
  return result_;
}
inline void EquipService_EquipResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.EquipService.EquipResponse.result)
}

// optional bool big_success = 2;
inline bool EquipService_EquipResponse::has_big_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipService_EquipResponse::set_has_big_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipService_EquipResponse::clear_has_big_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipService_EquipResponse::clear_big_success() {
  big_success_ = false;
  clear_has_big_success();
}
inline bool EquipService_EquipResponse::big_success() const {
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipResponse.big_success)
  return big_success_;
}
inline void EquipService_EquipResponse::set_big_success(bool value) {
  set_has_big_success();
  big_success_ = value;
  // @@protoc_insertion_point(field_set:sg.EquipService.EquipResponse.big_success)
}

// repeated .sg.Equip equip_list = 3;
inline int EquipService_EquipResponse::equip_list_size() const {
  return equip_list_.size();
}
inline ::sg::Equip* EquipService_EquipResponse::mutable_equip_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.EquipService.EquipResponse.equip_list)
  return equip_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Equip >*
EquipService_EquipResponse::mutable_equip_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.EquipService.EquipResponse.equip_list)
  return &equip_list_;
}
inline const ::sg::Equip& EquipService_EquipResponse::equip_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipResponse.equip_list)
  return equip_list_.Get(index);
}
inline ::sg::Equip* EquipService_EquipResponse::add_equip_list() {
  // @@protoc_insertion_point(field_add:sg.EquipService.EquipResponse.equip_list)
  return equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Equip >&
EquipService_EquipResponse::equip_list() const {
  // @@protoc_insertion_point(field_list:sg.EquipService.EquipResponse.equip_list)
  return equip_list_;
}

// optional .sg.Reward get = 4;
inline bool EquipService_EquipResponse::has_get() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipService_EquipResponse::set_has_get() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipService_EquipResponse::clear_has_get() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Reward& EquipService_EquipResponse::_internal_get() const {
  return *get_;
}
inline const ::sg::Reward& EquipService_EquipResponse::get() const {
  const ::sg::Reward* p = get_;
  // @@protoc_insertion_point(field_get:sg.EquipService.EquipResponse.get)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* EquipService_EquipResponse::release_get() {
  // @@protoc_insertion_point(field_release:sg.EquipService.EquipResponse.get)
  clear_has_get();
  ::sg::Reward* temp = get_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  get_ = NULL;
  return temp;
}
inline ::sg::Reward* EquipService_EquipResponse::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.EquipService.EquipResponse.get)
  clear_has_get();
  ::sg::Reward* temp = get_;
  get_ = NULL;
  return temp;
}
inline ::sg::Reward* EquipService_EquipResponse::mutable_get() {
  set_has_get();
  if (get_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    get_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.EquipService.EquipResponse.get)
  return get_;
}
inline void EquipService_EquipResponse::set_allocated_get(::sg::Reward* get) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(get_);
  }
  if (get) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(get)->GetArena();
    if (message_arena != submessage_arena) {
      get = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    set_has_get();
  } else {
    clear_has_get();
  }
  get_ = get;
  // @@protoc_insertion_point(field_set_allocated:sg.EquipService.EquipResponse.get)
}

// -------------------------------------------------------------------

// EquipService

// optional .sg.EquipService.EquipRequest req = 1;
inline bool EquipService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::EquipService_EquipRequest& EquipService::_internal_req() const {
  return *req_;
}
inline const ::sg::EquipService_EquipRequest& EquipService::req() const {
  const ::sg::EquipService_EquipRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.EquipService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::EquipService_EquipRequest*>(
      &::sg::_EquipService_EquipRequest_default_instance_);
}
inline ::sg::EquipService_EquipRequest* EquipService::release_req() {
  // @@protoc_insertion_point(field_release:sg.EquipService.req)
  clear_has_req();
  ::sg::EquipService_EquipRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::EquipService_EquipRequest* EquipService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.EquipService.req)
  clear_has_req();
  ::sg::EquipService_EquipRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::EquipService_EquipRequest* EquipService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::EquipService_EquipRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.EquipService.req)
  return req_;
}
inline void EquipService::set_allocated_req(::sg::EquipService_EquipRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.EquipService.req)
}

// optional .sg.EquipService.EquipResponse resp = 2;
inline bool EquipService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::EquipService_EquipResponse& EquipService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::EquipService_EquipResponse& EquipService::resp() const {
  const ::sg::EquipService_EquipResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.EquipService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::EquipService_EquipResponse*>(
      &::sg::_EquipService_EquipResponse_default_instance_);
}
inline ::sg::EquipService_EquipResponse* EquipService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.EquipService.resp)
  clear_has_resp();
  ::sg::EquipService_EquipResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::EquipService_EquipResponse* EquipService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.EquipService.resp)
  clear_has_resp();
  ::sg::EquipService_EquipResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::EquipService_EquipResponse* EquipService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::EquipService_EquipResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.EquipService.resp)
  return resp_;
}
inline void EquipService::set_allocated_resp(::sg::EquipService_EquipResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.EquipService.resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::EquipService_EQUIP_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::EquipService_EQUIP_CMD>() {
  return ::sg::EquipService_EQUIP_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Equip_2eproto
