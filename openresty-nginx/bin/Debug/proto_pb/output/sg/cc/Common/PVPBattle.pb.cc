// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PVPBattle.proto

#include "PVPBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_PVPBattle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVPBattle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerOperation;
}  // namespace protobuf_PVPBattle_2eproto
namespace sg {
class ControllerOperationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerOperation>
      _instance;
} _ControllerOperation_default_instance_;
class PVPBattleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPBattleRequest>
      _instance;
} _PVPBattleRequest_default_instance_;
class PVPBattleStartNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPBattleStartNotify>
      _instance;
} _PVPBattleStartNotify_default_instance_;
class PVPBattleControlNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPBattleControlNotify>
      _instance;
} _PVPBattleControlNotify_default_instance_;
class PVPBattleOverNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPBattleOverNotify>
      _instance;
} _PVPBattleOverNotify_default_instance_;
}  // namespace sg
namespace protobuf_PVPBattle_2eproto {
static void InitDefaultsControllerOperation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_ControllerOperation_default_instance_;
    new (ptr) ::sg::ControllerOperation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::ControllerOperation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerOperation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControllerOperation}, {}};

static void InitDefaultsPVPBattleRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPBattleRequest_default_instance_;
    new (ptr) ::sg::PVPBattleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPBattleRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PVPBattleRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPVPBattleRequest}, {
      &protobuf_PVPBattle_2eproto::scc_info_ControllerOperation.base,}};

static void InitDefaultsPVPBattleStartNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPBattleStartNotify_default_instance_;
    new (ptr) ::sg::PVPBattleStartNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPBattleStartNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PVPBattleStartNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPVPBattleStartNotify}, {}};

static void InitDefaultsPVPBattleControlNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPBattleControlNotify_default_instance_;
    new (ptr) ::sg::PVPBattleControlNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPBattleControlNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PVPBattleControlNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPVPBattleControlNotify}, {
      &protobuf_PVPBattle_2eproto::scc_info_ControllerOperation.base,}};

static void InitDefaultsPVPBattleOverNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPBattleOverNotify_default_instance_;
    new (ptr) ::sg::PVPBattleOverNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPBattleOverNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PVPBattleOverNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPVPBattleOverNotify}, {
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerOperation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPBattleRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPBattleStartNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPBattleControlNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPBattleOverNotify.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ControllerOperation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ControllerOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ControllerOperation, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ControllerOperation, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ControllerOperation, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleRequest, battle_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleRequest, operation_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleStartNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleStartNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleStartNotify, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleStartNotify, random_seed_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleControlNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleControlNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleControlNotify, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleControlNotify, time_now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleControlNotify, operations_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleOverNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleOverNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleOverNotify, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleOverNotify, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPBattleOverNotify, reward_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::sg::ControllerOperation)},
  { 11, 19, sizeof(::sg::PVPBattleRequest)},
  { 22, 29, sizeof(::sg::PVPBattleStartNotify)},
  { 31, 39, sizeof(::sg::PVPBattleControlNotify)},
  { 42, 50, sizeof(::sg::PVPBattleOverNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_ControllerOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPBattleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPBattleStartNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPBattleControlNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPBattleOverNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "PVPBattle.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017PVPBattle.proto\022\002sg\032\020BaseStruct.proto\""
      "E\n\023ControllerOperation\022\r\n\005index\030\001 \002(\005\022\021\n"
      "\ttimestamp\030\002 \001(\002\022\014\n\004data\030\004 \001(\014\"v\n\020PVPBat"
      "tleRequest\022\037\n\003cmd\030\001 \002(\0162\022.sg.PVP_BATTLE_"
      "CMD\022\025\n\rbattle_result\030\002 \001(\005\022*\n\toperation\030"
      "\003 \003(\0132\027.sg.ControllerOperation\"@\n\024PVPBat"
      "tleStartNotify\022\023\n\013frame_index\030\001 \002(\005\022\023\n\013r"
      "andom_seed\030\002 \001(\004\"l\n\026PVPBattleControlNoti"
      "fy\022\023\n\013frame_index\030\001 \002(\005\022\020\n\010time_now\030\002 \002("
      "\002\022+\n\noperations\030\003 \003(\0132\027.sg.ControllerOpe"
      "ration\"P\n\023PVPBattleOverNotify\022\016\n\006result\030"
      "\001 \002(\005\022\r\n\005score\030\002 \001(\005\022\032\n\006reward\030\003 \001(\0132\n.s"
      "g.Reward*2\n\016PVP_BATTLE_CMD\022\t\n\005READY\020\001\022\013\n"
      "\007CONTROL\020\002\022\010\n\004OVER\020\003B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PVPBattle.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_PVPBattle_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* PVP_BATTLE_CMD_descriptor() {
  protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PVPBattle_2eproto::file_level_enum_descriptors[0];
}
bool PVP_BATTLE_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ControllerOperation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerOperation::kIndexFieldNumber;
const int ControllerOperation::kTimestampFieldNumber;
const int ControllerOperation::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerOperation::ControllerOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPBattle_2eproto::scc_info_ControllerOperation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.ControllerOperation)
}
ControllerOperation::ControllerOperation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_ControllerOperation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.ControllerOperation)
}
ControllerOperation::ControllerOperation(const ControllerOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&index_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:sg.ControllerOperation)
}

void ControllerOperation::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&index_)) + sizeof(timestamp_));
}

ControllerOperation::~ControllerOperation() {
  // @@protoc_insertion_point(destructor:sg.ControllerOperation)
  SharedDtor();
}

void ControllerOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ControllerOperation::ArenaDtor(void* object) {
  ControllerOperation* _this = reinterpret_cast< ControllerOperation* >(object);
  (void)_this;
}
void ControllerOperation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ControllerOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerOperation::descriptor() {
  ::protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerOperation& ControllerOperation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_ControllerOperation.base);
  return *internal_default_instance();
}


void ControllerOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.ControllerOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&index_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.ControllerOperation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.ControllerOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.ControllerOperation)
  return false;
#undef DO_
}

void ControllerOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.ControllerOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional float timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->timestamp(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.ControllerOperation)
}

::google::protobuf::uint8* ControllerOperation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.ControllerOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional float timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->timestamp(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.ControllerOperation)
  return target;
}

size_t ControllerOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.ControllerOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 index = 1;
  if (has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }
  // optional bytes data = 4;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional float timestamp = 2;
  if (has_timestamp()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.ControllerOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerOperation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerOperation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.ControllerOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.ControllerOperation)
    MergeFrom(*source);
  }
}

void ControllerOperation::MergeFrom(const ControllerOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.ControllerOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_data(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.ControllerOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerOperation::CopyFrom(const ControllerOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.ControllerOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ControllerOperation::Swap(ControllerOperation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ControllerOperation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ControllerOperation::UnsafeArenaSwap(ControllerOperation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ControllerOperation::InternalSwap(ControllerOperation* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerOperation::GetMetadata() const {
  protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPBattleRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPBattleRequest::kCmdFieldNumber;
const int PVPBattleRequest::kBattleResultFieldNumber;
const int PVPBattleRequest::kOperationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPBattleRequest::PVPBattleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPBattle_2eproto::scc_info_PVPBattleRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPBattleRequest)
}
PVPBattleRequest::PVPBattleRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  operation_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_PVPBattleRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPBattleRequest)
}
PVPBattleRequest::PVPBattleRequest(const PVPBattleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      operation_(from.operation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battle_result_, &from.battle_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&battle_result_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.PVPBattleRequest)
}

void PVPBattleRequest::SharedCtor() {
  battle_result_ = 0;
  cmd_ = 1;
}

PVPBattleRequest::~PVPBattleRequest() {
  // @@protoc_insertion_point(destructor:sg.PVPBattleRequest)
  SharedDtor();
}

void PVPBattleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PVPBattleRequest::ArenaDtor(void* object) {
  PVPBattleRequest* _this = reinterpret_cast< PVPBattleRequest* >(object);
  (void)_this;
}
void PVPBattleRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPBattleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPBattleRequest::descriptor() {
  ::protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPBattleRequest& PVPBattleRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_PVPBattleRequest.base);
  return *internal_default_instance();
}


void PVPBattleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPBattleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    battle_result_ = 0;
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPBattleRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.PVP_BATTLE_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::PVP_BATTLE_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::PVP_BATTLE_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 battle_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_battle_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.ControllerOperation operation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPBattleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPBattleRequest)
  return false;
#undef DO_
}

void PVPBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPBattleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PVP_BATTLE_CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 battle_result = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_result(), output);
  }

  // repeated .sg.ControllerOperation operation = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->operation(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPBattleRequest)
}

::google::protobuf::uint8* PVPBattleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPBattleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PVP_BATTLE_CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 battle_result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_result(), target);
  }

  // repeated .sg.ControllerOperation operation = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operation_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->operation(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPBattleRequest)
  return target;
}

size_t PVPBattleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPBattleRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.PVP_BATTLE_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated .sg.ControllerOperation operation = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->operation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->operation(static_cast<int>(i)));
    }
  }

  // optional int32 battle_result = 2;
  if (has_battle_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battle_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPBattleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPBattleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPBattleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPBattleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPBattleRequest)
    MergeFrom(*source);
  }
}

void PVPBattleRequest::MergeFrom(const PVPBattleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPBattleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operation_.MergeFrom(from.operation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      battle_result_ = from.battle_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPBattleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPBattleRequest::CopyFrom(const PVPBattleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPBattleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPBattleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->operation())) return false;
  return true;
}

void PVPBattleRequest::Swap(PVPBattleRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPBattleRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPBattleRequest::UnsafeArenaSwap(PVPBattleRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPBattleRequest::InternalSwap(PVPBattleRequest* other) {
  using std::swap;
  CastToBase(&operation_)->InternalSwap(CastToBase(&other->operation_));
  swap(battle_result_, other->battle_result_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPBattleRequest::GetMetadata() const {
  protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPBattleStartNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPBattleStartNotify::kFrameIndexFieldNumber;
const int PVPBattleStartNotify::kRandomSeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPBattleStartNotify::PVPBattleStartNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPBattle_2eproto::scc_info_PVPBattleStartNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPBattleStartNotify)
}
PVPBattleStartNotify::PVPBattleStartNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_PVPBattleStartNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPBattleStartNotify)
}
PVPBattleStartNotify::PVPBattleStartNotify(const PVPBattleStartNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&random_seed_, &from.random_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_index_) -
    reinterpret_cast<char*>(&random_seed_)) + sizeof(frame_index_));
  // @@protoc_insertion_point(copy_constructor:sg.PVPBattleStartNotify)
}

void PVPBattleStartNotify::SharedCtor() {
  ::memset(&random_seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_index_) -
      reinterpret_cast<char*>(&random_seed_)) + sizeof(frame_index_));
}

PVPBattleStartNotify::~PVPBattleStartNotify() {
  // @@protoc_insertion_point(destructor:sg.PVPBattleStartNotify)
  SharedDtor();
}

void PVPBattleStartNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PVPBattleStartNotify::ArenaDtor(void* object) {
  PVPBattleStartNotify* _this = reinterpret_cast< PVPBattleStartNotify* >(object);
  (void)_this;
}
void PVPBattleStartNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPBattleStartNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPBattleStartNotify::descriptor() {
  ::protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPBattleStartNotify& PVPBattleStartNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_PVPBattleStartNotify.base);
  return *internal_default_instance();
}


void PVPBattleStartNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPBattleStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&random_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_index_) -
        reinterpret_cast<char*>(&random_seed_)) + sizeof(frame_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPBattleStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPBattleStartNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frame_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 random_seed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPBattleStartNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPBattleStartNotify)
  return false;
#undef DO_
}

void PVPBattleStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPBattleStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 frame_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_index(), output);
  }

  // optional uint64 random_seed = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->random_seed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPBattleStartNotify)
}

::google::protobuf::uint8* PVPBattleStartNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPBattleStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 frame_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_index(), target);
  }

  // optional uint64 random_seed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->random_seed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPBattleStartNotify)
  return target;
}

size_t PVPBattleStartNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPBattleStartNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 frame_index = 1;
  if (has_frame_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_index());
  }
  // optional uint64 random_seed = 2;
  if (has_random_seed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->random_seed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPBattleStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPBattleStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPBattleStartNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPBattleStartNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPBattleStartNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPBattleStartNotify)
    MergeFrom(*source);
  }
}

void PVPBattleStartNotify::MergeFrom(const PVPBattleStartNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPBattleStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      random_seed_ = from.random_seed_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_index_ = from.frame_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPBattleStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPBattleStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPBattleStartNotify::CopyFrom(const PVPBattleStartNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPBattleStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPBattleStartNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void PVPBattleStartNotify::Swap(PVPBattleStartNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPBattleStartNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPBattleStartNotify::UnsafeArenaSwap(PVPBattleStartNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPBattleStartNotify::InternalSwap(PVPBattleStartNotify* other) {
  using std::swap;
  swap(random_seed_, other->random_seed_);
  swap(frame_index_, other->frame_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPBattleStartNotify::GetMetadata() const {
  protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPBattleControlNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPBattleControlNotify::kFrameIndexFieldNumber;
const int PVPBattleControlNotify::kTimeNowFieldNumber;
const int PVPBattleControlNotify::kOperationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPBattleControlNotify::PVPBattleControlNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPBattle_2eproto::scc_info_PVPBattleControlNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPBattleControlNotify)
}
PVPBattleControlNotify::PVPBattleControlNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  operations_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_PVPBattleControlNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPBattleControlNotify)
}
PVPBattleControlNotify::PVPBattleControlNotify(const PVPBattleControlNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_index_, &from.frame_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_now_) -
    reinterpret_cast<char*>(&frame_index_)) + sizeof(time_now_));
  // @@protoc_insertion_point(copy_constructor:sg.PVPBattleControlNotify)
}

void PVPBattleControlNotify::SharedCtor() {
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_now_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(time_now_));
}

PVPBattleControlNotify::~PVPBattleControlNotify() {
  // @@protoc_insertion_point(destructor:sg.PVPBattleControlNotify)
  SharedDtor();
}

void PVPBattleControlNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PVPBattleControlNotify::ArenaDtor(void* object) {
  PVPBattleControlNotify* _this = reinterpret_cast< PVPBattleControlNotify* >(object);
  (void)_this;
}
void PVPBattleControlNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPBattleControlNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPBattleControlNotify::descriptor() {
  ::protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPBattleControlNotify& PVPBattleControlNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_PVPBattleControlNotify.base);
  return *internal_default_instance();
}


void PVPBattleControlNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPBattleControlNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&frame_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_now_) -
        reinterpret_cast<char*>(&frame_index_)) + sizeof(time_now_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPBattleControlNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPBattleControlNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frame_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float time_now = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_time_now();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.ControllerOperation operations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPBattleControlNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPBattleControlNotify)
  return false;
#undef DO_
}

void PVPBattleControlNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPBattleControlNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 frame_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_index(), output);
  }

  // required float time_now = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_now(), output);
  }

  // repeated .sg.ControllerOperation operations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->operations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPBattleControlNotify)
}

::google::protobuf::uint8* PVPBattleControlNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPBattleControlNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 frame_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_index(), target);
  }

  // required float time_now = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time_now(), target);
  }

  // repeated .sg.ControllerOperation operations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->operations(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPBattleControlNotify)
  return target;
}

size_t PVPBattleControlNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.PVPBattleControlNotify)
  size_t total_size = 0;

  if (has_frame_index()) {
    // required int32 frame_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_index());
  }

  if (has_time_now()) {
    // required float time_now = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PVPBattleControlNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPBattleControlNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 frame_index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_index());

    // required float time_now = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.ControllerOperation operations = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->operations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPBattleControlNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPBattleControlNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPBattleControlNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPBattleControlNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPBattleControlNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPBattleControlNotify)
    MergeFrom(*source);
  }
}

void PVPBattleControlNotify::MergeFrom(const PVPBattleControlNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPBattleControlNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      frame_index_ = from.frame_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_now_ = from.time_now_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPBattleControlNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPBattleControlNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPBattleControlNotify::CopyFrom(const PVPBattleControlNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPBattleControlNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPBattleControlNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->operations())) return false;
  return true;
}

void PVPBattleControlNotify::Swap(PVPBattleControlNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPBattleControlNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPBattleControlNotify::UnsafeArenaSwap(PVPBattleControlNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPBattleControlNotify::InternalSwap(PVPBattleControlNotify* other) {
  using std::swap;
  CastToBase(&operations_)->InternalSwap(CastToBase(&other->operations_));
  swap(frame_index_, other->frame_index_);
  swap(time_now_, other->time_now_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPBattleControlNotify::GetMetadata() const {
  protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPBattleOverNotify::InitAsDefaultInstance() {
  ::sg::_PVPBattleOverNotify_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void PVPBattleOverNotify::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVPBattleOverNotify.reward)
}
void PVPBattleOverNotify::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPBattleOverNotify::kResultFieldNumber;
const int PVPBattleOverNotify::kScoreFieldNumber;
const int PVPBattleOverNotify::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPBattleOverNotify::PVPBattleOverNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPBattle_2eproto::scc_info_PVPBattleOverNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPBattleOverNotify)
}
PVPBattleOverNotify::PVPBattleOverNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_PVPBattleOverNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPBattleOverNotify)
}
PVPBattleOverNotify::PVPBattleOverNotify(const PVPBattleOverNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&result_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:sg.PVPBattleOverNotify)
}

void PVPBattleOverNotify::SharedCtor() {
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(score_));
}

PVPBattleOverNotify::~PVPBattleOverNotify() {
  // @@protoc_insertion_point(destructor:sg.PVPBattleOverNotify)
  SharedDtor();
}

void PVPBattleOverNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete reward_;
}

void PVPBattleOverNotify::ArenaDtor(void* object) {
  PVPBattleOverNotify* _this = reinterpret_cast< PVPBattleOverNotify* >(object);
  (void)_this;
}
void PVPBattleOverNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPBattleOverNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPBattleOverNotify::descriptor() {
  ::protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPBattleOverNotify& PVPBattleOverNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPBattle_2eproto::scc_info_PVPBattleOverNotify.base);
  return *internal_default_instance();
}


void PVPBattleOverNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPBattleOverNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != NULL);
    reward_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&result_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPBattleOverNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPBattleOverNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPBattleOverNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPBattleOverNotify)
  return false;
#undef DO_
}

void PVPBattleOverNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPBattleOverNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional .sg.Reward reward = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPBattleOverNotify)
}

::google::protobuf::uint8* PVPBattleOverNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPBattleOverNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional .sg.Reward reward = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPBattleOverNotify)
  return target;
}

size_t PVPBattleOverNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPBattleOverNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional .sg.Reward reward = 3;
  if (has_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // optional int32 score = 2;
  if (has_score()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPBattleOverNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPBattleOverNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPBattleOverNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPBattleOverNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPBattleOverNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPBattleOverNotify)
    MergeFrom(*source);
  }
}

void PVPBattleOverNotify::MergeFrom(const PVPBattleOverNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPBattleOverNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPBattleOverNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPBattleOverNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPBattleOverNotify::CopyFrom(const PVPBattleOverNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPBattleOverNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPBattleOverNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void PVPBattleOverNotify::Swap(PVPBattleOverNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPBattleOverNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPBattleOverNotify::UnsafeArenaSwap(PVPBattleOverNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPBattleOverNotify::InternalSwap(PVPBattleOverNotify* other) {
  using std::swap;
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPBattleOverNotify::GetMetadata() const {
  protobuf_PVPBattle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPBattle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::ControllerOperation* Arena::CreateMaybeMessage< ::sg::ControllerOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::ControllerOperation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPBattleRequest* Arena::CreateMaybeMessage< ::sg::PVPBattleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPBattleRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPBattleStartNotify* Arena::CreateMaybeMessage< ::sg::PVPBattleStartNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPBattleStartNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPBattleControlNotify* Arena::CreateMaybeMessage< ::sg::PVPBattleControlNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPBattleControlNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPBattleOverNotify* Arena::CreateMaybeMessage< ::sg::PVPBattleOverNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPBattleOverNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
