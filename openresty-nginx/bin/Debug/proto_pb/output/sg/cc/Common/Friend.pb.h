// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Friend.proto

#ifndef PROTOBUF_INCLUDED_Friend_2eproto
#define PROTOBUF_INCLUDED_Friend_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Friend_2eproto 

namespace protobuf_Friend_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Friend_2eproto
namespace sg {
class FriendGiftNotify;
class FriendGiftNotifyDefaultTypeInternal;
extern FriendGiftNotifyDefaultTypeInternal _FriendGiftNotify_default_instance_;
class FriendService;
class FriendServiceDefaultTypeInternal;
extern FriendServiceDefaultTypeInternal _FriendService_default_instance_;
class FriendService_FriendRequest;
class FriendService_FriendRequestDefaultTypeInternal;
extern FriendService_FriendRequestDefaultTypeInternal _FriendService_FriendRequest_default_instance_;
class FriendService_FriendResponse;
class FriendService_FriendResponseDefaultTypeInternal;
extern FriendService_FriendResponseDefaultTypeInternal _FriendService_FriendResponse_default_instance_;
class GameInviteAcceptReward;
class GameInviteAcceptRewardDefaultTypeInternal;
extern GameInviteAcceptRewardDefaultTypeInternal _GameInviteAcceptReward_default_instance_;
class GameInviteReward;
class GameInviteRewardDefaultTypeInternal;
extern GameInviteRewardDefaultTypeInternal _GameInviteReward_default_instance_;
class GameInviteRewardList;
class GameInviteRewardListDefaultTypeInternal;
extern GameInviteRewardListDefaultTypeInternal _GameInviteRewardList_default_instance_;
class GameInviteService;
class GameInviteServiceDefaultTypeInternal;
extern GameInviteServiceDefaultTypeInternal _GameInviteService_default_instance_;
class GameInviteService_GameInviteRequest;
class GameInviteService_GameInviteRequestDefaultTypeInternal;
extern GameInviteService_GameInviteRequestDefaultTypeInternal _GameInviteService_GameInviteRequest_default_instance_;
class GameInviteService_GameInviteResponse;
class GameInviteService_GameInviteResponseDefaultTypeInternal;
extern GameInviteService_GameInviteResponseDefaultTypeInternal _GameInviteService_GameInviteResponse_default_instance_;
class InputInviteCodeResult;
class InputInviteCodeResultDefaultTypeInternal;
extern InputInviteCodeResultDefaultTypeInternal _InputInviteCodeResult_default_instance_;
class PersonData;
class PersonDataDefaultTypeInternal;
extern PersonDataDefaultTypeInternal _PersonData_default_instance_;
class PersonDataList;
class PersonDataListDefaultTypeInternal;
extern PersonDataListDefaultTypeInternal _PersonDataList_default_instance_;
class PersonTeamMember;
class PersonTeamMemberDefaultTypeInternal;
extern PersonTeamMemberDefaultTypeInternal _PersonTeamMember_default_instance_;
class PersonTeamMemberList;
class PersonTeamMemberListDefaultTypeInternal;
extern PersonTeamMemberListDefaultTypeInternal _PersonTeamMemberList_default_instance_;
class QueryPersonResult;
class QueryPersonResultDefaultTypeInternal;
extern QueryPersonResultDefaultTypeInternal _QueryPersonResult_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::FriendGiftNotify* Arena::CreateMaybeMessage<::sg::FriendGiftNotify>(Arena*);
template<> ::sg::FriendService* Arena::CreateMaybeMessage<::sg::FriendService>(Arena*);
template<> ::sg::FriendService_FriendRequest* Arena::CreateMaybeMessage<::sg::FriendService_FriendRequest>(Arena*);
template<> ::sg::FriendService_FriendResponse* Arena::CreateMaybeMessage<::sg::FriendService_FriendResponse>(Arena*);
template<> ::sg::GameInviteAcceptReward* Arena::CreateMaybeMessage<::sg::GameInviteAcceptReward>(Arena*);
template<> ::sg::GameInviteReward* Arena::CreateMaybeMessage<::sg::GameInviteReward>(Arena*);
template<> ::sg::GameInviteRewardList* Arena::CreateMaybeMessage<::sg::GameInviteRewardList>(Arena*);
template<> ::sg::GameInviteService* Arena::CreateMaybeMessage<::sg::GameInviteService>(Arena*);
template<> ::sg::GameInviteService_GameInviteRequest* Arena::CreateMaybeMessage<::sg::GameInviteService_GameInviteRequest>(Arena*);
template<> ::sg::GameInviteService_GameInviteResponse* Arena::CreateMaybeMessage<::sg::GameInviteService_GameInviteResponse>(Arena*);
template<> ::sg::InputInviteCodeResult* Arena::CreateMaybeMessage<::sg::InputInviteCodeResult>(Arena*);
template<> ::sg::PersonData* Arena::CreateMaybeMessage<::sg::PersonData>(Arena*);
template<> ::sg::PersonDataList* Arena::CreateMaybeMessage<::sg::PersonDataList>(Arena*);
template<> ::sg::PersonTeamMember* Arena::CreateMaybeMessage<::sg::PersonTeamMember>(Arena*);
template<> ::sg::PersonTeamMemberList* Arena::CreateMaybeMessage<::sg::PersonTeamMemberList>(Arena*);
template<> ::sg::QueryPersonResult* Arena::CreateMaybeMessage<::sg::QueryPersonResult>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum FriendService_FRIEND_COMMAND {
  FriendService_FRIEND_COMMAND_QUERY_FRIENDS = 1,
  FriendService_FRIEND_COMMAND_ADD_FRIEND = 2,
  FriendService_FRIEND_COMMAND_DELETE_FRIEND = 3,
  FriendService_FRIEND_COMMAND_VISIT_FRIEND = 4,
  FriendService_FRIEND_COMMAND_REFRESH_CANDIDATES = 5,
  FriendService_FRIEND_COMMAND_QUERY_PERSON_BY_UUID = 6,
  FriendService_FRIEND_COMMAND_REJECT_ALL_ADDING = 7,
  FriendService_FRIEND_COMMAND_ACCEPT_ALL_ADDING = 8,
  FriendService_FRIEND_COMMAND_CANCEL_ALL_CONFIRMING = 9,
  FriendService_FRIEND_COMMAND_BAN_FRIEND = 11,
  FriendService_FRIEND_COMMAND_UNBAN_FRIEND = 12,
  FriendService_FRIEND_COMMAND_GIVE_GIFT = 21,
  FriendService_FRIEND_COMMAND_ACCEPT_GIFT = 22
};
bool FriendService_FRIEND_COMMAND_IsValid(int value);
const FriendService_FRIEND_COMMAND FriendService_FRIEND_COMMAND_FRIEND_COMMAND_MIN = FriendService_FRIEND_COMMAND_QUERY_FRIENDS;
const FriendService_FRIEND_COMMAND FriendService_FRIEND_COMMAND_FRIEND_COMMAND_MAX = FriendService_FRIEND_COMMAND_ACCEPT_GIFT;
const int FriendService_FRIEND_COMMAND_FRIEND_COMMAND_ARRAYSIZE = FriendService_FRIEND_COMMAND_FRIEND_COMMAND_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendService_FRIEND_COMMAND_descriptor();
inline const ::std::string& FriendService_FRIEND_COMMAND_Name(FriendService_FRIEND_COMMAND value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendService_FRIEND_COMMAND_descriptor(), value);
}
inline bool FriendService_FRIEND_COMMAND_Parse(
    const ::std::string& name, FriendService_FRIEND_COMMAND* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendService_FRIEND_COMMAND>(
    FriendService_FRIEND_COMMAND_descriptor(), name, value);
}
enum GameInviteService_GAME_INVITE_COMMAND {
  GameInviteService_GAME_INVITE_COMMAND_QUERY = 1,
  GameInviteService_GAME_INVITE_COMMAND_INPUT_INVITE_CODE = 2,
  GameInviteService_GAME_INVITE_COMMAND_ACCEPT_REWARD = 3
};
bool GameInviteService_GAME_INVITE_COMMAND_IsValid(int value);
const GameInviteService_GAME_INVITE_COMMAND GameInviteService_GAME_INVITE_COMMAND_GAME_INVITE_COMMAND_MIN = GameInviteService_GAME_INVITE_COMMAND_QUERY;
const GameInviteService_GAME_INVITE_COMMAND GameInviteService_GAME_INVITE_COMMAND_GAME_INVITE_COMMAND_MAX = GameInviteService_GAME_INVITE_COMMAND_ACCEPT_REWARD;
const int GameInviteService_GAME_INVITE_COMMAND_GAME_INVITE_COMMAND_ARRAYSIZE = GameInviteService_GAME_INVITE_COMMAND_GAME_INVITE_COMMAND_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameInviteService_GAME_INVITE_COMMAND_descriptor();
inline const ::std::string& GameInviteService_GAME_INVITE_COMMAND_Name(GameInviteService_GAME_INVITE_COMMAND value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameInviteService_GAME_INVITE_COMMAND_descriptor(), value);
}
inline bool GameInviteService_GAME_INVITE_COMMAND_Parse(
    const ::std::string& name, GameInviteService_GAME_INVITE_COMMAND* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameInviteService_GAME_INVITE_COMMAND>(
    GameInviteService_GAME_INVITE_COMMAND_descriptor(), name, value);
}
enum RANK_TITLE {
  RANK_TITLE_MARSHAL = 1,
  RANK_TITLE_GENERAL = 2,
  RANK_TITLE_LIEUTENANT_GENERAL = 3,
  RANK_TITLE_MAJOR_GENERAL = 4,
  RANK_TITLE_BRIGADIER_GENERAL = 5,
  RANK_TITLE_SENIOR_COLONEL = 6,
  RANK_TITLE_COLONEL = 7,
  RANK_TITLE_LIEUTENANT_COLONEL = 8,
  RANK_TITLE_MAJOR = 9,
  RANK_TITLE_NEWBIE = 10
};
bool RANK_TITLE_IsValid(int value);
const RANK_TITLE RANK_TITLE_MIN = RANK_TITLE_MARSHAL;
const RANK_TITLE RANK_TITLE_MAX = RANK_TITLE_NEWBIE;
const int RANK_TITLE_ARRAYSIZE = RANK_TITLE_MAX + 1;

const ::google::protobuf::EnumDescriptor* RANK_TITLE_descriptor();
inline const ::std::string& RANK_TITLE_Name(RANK_TITLE value) {
  return ::google::protobuf::internal::NameOfEnum(
    RANK_TITLE_descriptor(), value);
}
inline bool RANK_TITLE_Parse(
    const ::std::string& name, RANK_TITLE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RANK_TITLE>(
    RANK_TITLE_descriptor(), name, value);
}
enum FRIEND_GIFT_STATE {
  FRIEND_GIFT_STATE_NONE = 0,
  FRIEND_GIFT_STATE_GIVEN = 1,
  FRIEND_GIFT_STATE_TAKEN = 2
};
bool FRIEND_GIFT_STATE_IsValid(int value);
const FRIEND_GIFT_STATE FRIEND_GIFT_STATE_MIN = FRIEND_GIFT_STATE_NONE;
const FRIEND_GIFT_STATE FRIEND_GIFT_STATE_MAX = FRIEND_GIFT_STATE_TAKEN;
const int FRIEND_GIFT_STATE_ARRAYSIZE = FRIEND_GIFT_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* FRIEND_GIFT_STATE_descriptor();
inline const ::std::string& FRIEND_GIFT_STATE_Name(FRIEND_GIFT_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FRIEND_GIFT_STATE_descriptor(), value);
}
inline bool FRIEND_GIFT_STATE_Parse(
    const ::std::string& name, FRIEND_GIFT_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FRIEND_GIFT_STATE>(
    FRIEND_GIFT_STATE_descriptor(), name, value);
}
enum FRIEND_STATE {
  FRIEND_STATE_TO_DELETE = -1,
  FRIEND_STATE_STRANGER = 0,
  FRIEND_STATE_CANDIDATE = 1,
  FRIEND_STATE_ADDING = 2,
  FRIEND_STATE_CONFIRMING = 3,
  FRIEND_STATE_OK = 4,
  FRIEND_STATE_BAN = 5
};
bool FRIEND_STATE_IsValid(int value);
const FRIEND_STATE FRIEND_STATE_MIN = FRIEND_STATE_TO_DELETE;
const FRIEND_STATE FRIEND_STATE_MAX = FRIEND_STATE_BAN;
const int FRIEND_STATE_ARRAYSIZE = FRIEND_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* FRIEND_STATE_descriptor();
inline const ::std::string& FRIEND_STATE_Name(FRIEND_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FRIEND_STATE_descriptor(), value);
}
inline bool FRIEND_STATE_Parse(
    const ::std::string& name, FRIEND_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FRIEND_STATE>(
    FRIEND_STATE_descriptor(), name, value);
}
enum QUERY_PERSON_STATE {
  QUERY_PERSON_STATE_IDLE = 0,
  QUERY_PERSON_STATE_BUSY = 1,
  QUERY_PERSON_STATE_OK = 2,
  QUERY_PERSON_STATE_NOT_FOUND = 3
};
bool QUERY_PERSON_STATE_IsValid(int value);
const QUERY_PERSON_STATE QUERY_PERSON_STATE_MIN = QUERY_PERSON_STATE_IDLE;
const QUERY_PERSON_STATE QUERY_PERSON_STATE_MAX = QUERY_PERSON_STATE_NOT_FOUND;
const int QUERY_PERSON_STATE_ARRAYSIZE = QUERY_PERSON_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* QUERY_PERSON_STATE_descriptor();
inline const ::std::string& QUERY_PERSON_STATE_Name(QUERY_PERSON_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    QUERY_PERSON_STATE_descriptor(), value);
}
inline bool QUERY_PERSON_STATE_Parse(
    const ::std::string& name, QUERY_PERSON_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QUERY_PERSON_STATE>(
    QUERY_PERSON_STATE_descriptor(), name, value);
}
enum GAME_INVITE_STATE {
  GAME_INVITE_STATE_NONE = 0,
  GAME_INVITE_STATE_ACCEPT = 1,
  GAME_INVITE_STATE_OK = 2
};
bool GAME_INVITE_STATE_IsValid(int value);
const GAME_INVITE_STATE GAME_INVITE_STATE_MIN = GAME_INVITE_STATE_NONE;
const GAME_INVITE_STATE GAME_INVITE_STATE_MAX = GAME_INVITE_STATE_OK;
const int GAME_INVITE_STATE_ARRAYSIZE = GAME_INVITE_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GAME_INVITE_STATE_descriptor();
inline const ::std::string& GAME_INVITE_STATE_Name(GAME_INVITE_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GAME_INVITE_STATE_descriptor(), value);
}
inline bool GAME_INVITE_STATE_Parse(
    const ::std::string& name, GAME_INVITE_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GAME_INVITE_STATE>(
    GAME_INVITE_STATE_descriptor(), name, value);
}
enum GAME_INVITE_REWARD_STATE {
  GAME_INVITE_REWARD_STATE_NOT_READY = 1,
  GAME_INVITE_REWARD_STATE_READY = 2,
  GAME_INVITE_REWARD_STATE_ACCEPT = 3,
  GAME_INVITE_REWARD_STATE_OUT_OF_DATE = 4
};
bool GAME_INVITE_REWARD_STATE_IsValid(int value);
const GAME_INVITE_REWARD_STATE GAME_INVITE_REWARD_STATE_MIN = GAME_INVITE_REWARD_STATE_NOT_READY;
const GAME_INVITE_REWARD_STATE GAME_INVITE_REWARD_STATE_MAX = GAME_INVITE_REWARD_STATE_OUT_OF_DATE;
const int GAME_INVITE_REWARD_STATE_ARRAYSIZE = GAME_INVITE_REWARD_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GAME_INVITE_REWARD_STATE_descriptor();
inline const ::std::string& GAME_INVITE_REWARD_STATE_Name(GAME_INVITE_REWARD_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GAME_INVITE_REWARD_STATE_descriptor(), value);
}
inline bool GAME_INVITE_REWARD_STATE_Parse(
    const ::std::string& name, GAME_INVITE_REWARD_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GAME_INVITE_REWARD_STATE>(
    GAME_INVITE_REWARD_STATE_descriptor(), name, value);
}
// ===================================================================

class PersonTeamMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PersonTeamMember) */ {
 public:
  PersonTeamMember();
  virtual ~PersonTeamMember();

  PersonTeamMember(const PersonTeamMember& from);

  inline PersonTeamMember& operator=(const PersonTeamMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PersonTeamMember(PersonTeamMember&& from) noexcept
    : PersonTeamMember() {
    *this = ::std::move(from);
  }

  inline PersonTeamMember& operator=(PersonTeamMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonTeamMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersonTeamMember* internal_default_instance() {
    return reinterpret_cast<const PersonTeamMember*>(
               &_PersonTeamMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(PersonTeamMember* other);
  void Swap(PersonTeamMember* other);
  friend void swap(PersonTeamMember& a, PersonTeamMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PersonTeamMember* New() const final {
    return CreateMaybeMessage<PersonTeamMember>(NULL);
  }

  PersonTeamMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PersonTeamMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PersonTeamMember& from);
  void MergeFrom(const PersonTeamMember& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonTeamMember* other);
  protected:
  explicit PersonTeamMember(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 member_typeid = 2;
  bool has_member_typeid() const;
  void clear_member_typeid();
  static const int kMemberTypeidFieldNumber = 2;
  ::google::protobuf::uint64 member_typeid() const;
  void set_member_typeid(::google::protobuf::uint64 value);

  // required int32 posid = 1;
  bool has_posid() const;
  void clear_posid();
  static const int kPosidFieldNumber = 1;
  ::google::protobuf::int32 posid() const;
  void set_posid(::google::protobuf::int32 value);

  // required int32 member_level = 3;
  bool has_member_level() const;
  void clear_member_level();
  static const int kMemberLevelFieldNumber = 3;
  ::google::protobuf::int32 member_level() const;
  void set_member_level(::google::protobuf::int32 value);

  // required int32 member_star = 4;
  bool has_member_star() const;
  void clear_member_star();
  static const int kMemberStarFieldNumber = 4;
  ::google::protobuf::int32 member_star() const;
  void set_member_star(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PersonTeamMember)
 private:
  void set_has_posid();
  void clear_has_posid();
  void set_has_member_typeid();
  void clear_has_member_typeid();
  void set_has_member_level();
  void clear_has_member_level();
  void set_has_member_star();
  void clear_has_member_star();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 member_typeid_;
  ::google::protobuf::int32 posid_;
  ::google::protobuf::int32 member_level_;
  ::google::protobuf::int32 member_star_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PersonTeamMemberList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PersonTeamMemberList) */ {
 public:
  PersonTeamMemberList();
  virtual ~PersonTeamMemberList();

  PersonTeamMemberList(const PersonTeamMemberList& from);

  inline PersonTeamMemberList& operator=(const PersonTeamMemberList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PersonTeamMemberList(PersonTeamMemberList&& from) noexcept
    : PersonTeamMemberList() {
    *this = ::std::move(from);
  }

  inline PersonTeamMemberList& operator=(PersonTeamMemberList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonTeamMemberList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersonTeamMemberList* internal_default_instance() {
    return reinterpret_cast<const PersonTeamMemberList*>(
               &_PersonTeamMemberList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(PersonTeamMemberList* other);
  void Swap(PersonTeamMemberList* other);
  friend void swap(PersonTeamMemberList& a, PersonTeamMemberList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PersonTeamMemberList* New() const final {
    return CreateMaybeMessage<PersonTeamMemberList>(NULL);
  }

  PersonTeamMemberList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PersonTeamMemberList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PersonTeamMemberList& from);
  void MergeFrom(const PersonTeamMemberList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonTeamMemberList* other);
  protected:
  explicit PersonTeamMemberList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.PersonTeamMember list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::sg::PersonTeamMember* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::PersonTeamMember >*
      mutable_list();
  const ::sg::PersonTeamMember& list(int index) const;
  ::sg::PersonTeamMember* add_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::PersonTeamMember >&
      list() const;

  // @@protoc_insertion_point(class_scope:sg.PersonTeamMemberList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::PersonTeamMember > list_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PersonData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PersonData) */ {
 public:
  PersonData();
  virtual ~PersonData();

  PersonData(const PersonData& from);

  inline PersonData& operator=(const PersonData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PersonData(PersonData&& from) noexcept
    : PersonData() {
    *this = ::std::move(from);
  }

  inline PersonData& operator=(PersonData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersonData* internal_default_instance() {
    return reinterpret_cast<const PersonData*>(
               &_PersonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(PersonData* other);
  void Swap(PersonData* other);
  friend void swap(PersonData& a, PersonData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PersonData* New() const final {
    return CreateMaybeMessage<PersonData>(NULL);
  }

  PersonData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PersonData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PersonData& from);
  void MergeFrom(const PersonData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonData* other);
  protected:
  explicit PersonData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes role_nick = 2;
  bool has_role_nick() const;
  void clear_role_nick();
  static const int kRoleNickFieldNumber = 2;
  const ::std::string& role_nick() const;
  void set_role_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_role_nick(::std::string&& value);
  #endif
  void set_role_nick(const char* value);
  void set_role_nick(const void* value, size_t size);
  ::std::string* mutable_role_nick();
  ::std::string* release_role_nick();
  void set_allocated_role_nick(::std::string* role_nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_role_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_role_nick(
      ::std::string* role_nick);

  // optional bytes signature = 13;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 13;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_signature();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      ::std::string* signature);

  // optional bytes guild_name = 15;
  bool has_guild_name() const;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 15;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_name(::std::string&& value);
  #endif
  void set_guild_name(const char* value);
  void set_guild_name(const void* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_guild_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_guild_name(
      ::std::string* guild_name);

  // optional bytes guild_badge = 16;
  bool has_guild_badge() const;
  void clear_guild_badge();
  static const int kGuildBadgeFieldNumber = 16;
  const ::std::string& guild_badge() const;
  void set_guild_badge(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_badge(::std::string&& value);
  #endif
  void set_guild_badge(const char* value);
  void set_guild_badge(const void* value, size_t size);
  ::std::string* mutable_guild_badge();
  ::std::string* release_guild_badge();
  void set_allocated_guild_badge(::std::string* guild_badge);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_guild_badge();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_guild_badge(
      ::std::string* guild_badge);

  // optional .sg.PersonTeamMemberList team = 51;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 51;
  private:
  const ::sg::PersonTeamMemberList& _internal_team() const;
  public:
  const ::sg::PersonTeamMemberList& team() const;
  ::sg::PersonTeamMemberList* release_team();
  ::sg::PersonTeamMemberList* mutable_team();
  void set_allocated_team(::sg::PersonTeamMemberList* team);
  void unsafe_arena_set_allocated_team(
      ::sg::PersonTeamMemberList* team);
  ::sg::PersonTeamMemberList* unsafe_arena_release_team();

  // required uint64 uuid = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  ::google::protobuf::uint64 uuid() const;
  void set_uuid(::google::protobuf::uint64 value);

  // required int32 role_level = 3;
  bool has_role_level() const;
  void clear_role_level();
  static const int kRoleLevelFieldNumber = 3;
  ::google::protobuf::int32 role_level() const;
  void set_role_level(::google::protobuf::int32 value);

  // required int32 role_exp = 4;
  bool has_role_exp() const;
  void clear_role_exp();
  static const int kRoleExpFieldNumber = 4;
  ::google::protobuf::int32 role_exp() const;
  void set_role_exp(::google::protobuf::int32 value);

  // required int32 role_rank = 5;
  bool has_role_rank() const;
  void clear_role_rank();
  static const int kRoleRankFieldNumber = 5;
  ::google::protobuf::int32 role_rank() const;
  void set_role_rank(::google::protobuf::int32 value);

  // optional int32 portrait = 11;
  bool has_portrait() const;
  void clear_portrait();
  static const int kPortraitFieldNumber = 11;
  ::google::protobuf::int32 portrait() const;
  void set_portrait(::google::protobuf::int32 value);

  // optional int32 portrait_frame = 12;
  bool has_portrait_frame() const;
  void clear_portrait_frame();
  static const int kPortraitFrameFieldNumber = 12;
  ::google::protobuf::int32 portrait_frame() const;
  void set_portrait_frame(::google::protobuf::int32 value);

  // optional int32 guildid = 14;
  bool has_guildid() const;
  void clear_guildid();
  static const int kGuildidFieldNumber = 14;
  ::google::protobuf::int32 guildid() const;
  void set_guildid(::google::protobuf::int32 value);

  // optional int32 guild_title = 17;
  bool has_guild_title() const;
  void clear_guild_title();
  static const int kGuildTitleFieldNumber = 17;
  ::google::protobuf::int32 guild_title() const;
  void set_guild_title(::google::protobuf::int32 value);

  // required int32 force = 18;
  bool has_force() const;
  void clear_force();
  static const int kForceFieldNumber = 18;
  ::google::protobuf::int32 force() const;
  void set_force(::google::protobuf::int32 value);

  // optional sfixed64 logintime = 21;
  bool has_logintime() const;
  void clear_logintime();
  static const int kLogintimeFieldNumber = 21;
  ::google::protobuf::int64 logintime() const;
  void set_logintime(::google::protobuf::int64 value);

  // required bool is_online = 19;
  bool has_is_online() const;
  void clear_is_online();
  static const int kIsOnlineFieldNumber = 19;
  bool is_online() const;
  void set_is_online(bool value);

  // optional bool can_challenge = 31;
  bool has_can_challenge() const;
  void clear_can_challenge();
  static const int kCanChallengeFieldNumber = 31;
  bool can_challenge() const;
  void set_can_challenge(bool value);

  // optional bool can_give_gift = 44;
  bool has_can_give_gift() const;
  void clear_can_give_gift();
  static const int kCanGiveGiftFieldNumber = 44;
  bool can_give_gift() const;
  void set_can_give_gift(bool value);

  // optional int32 challenge_score = 32;
  bool has_challenge_score() const;
  void clear_challenge_score();
  static const int kChallengeScoreFieldNumber = 32;
  ::google::protobuf::int32 challenge_score() const;
  void set_challenge_score(::google::protobuf::int32 value);

  // optional uint64 gift_item_typeid = 42;
  bool has_gift_item_typeid() const;
  void clear_gift_item_typeid();
  static const int kGiftItemTypeidFieldNumber = 42;
  ::google::protobuf::uint64 gift_item_typeid() const;
  void set_gift_item_typeid(::google::protobuf::uint64 value);

  // optional .sg.FRIEND_GIFT_STATE gift_state = 41;
  bool has_gift_state() const;
  void clear_gift_state();
  static const int kGiftStateFieldNumber = 41;
  ::sg::FRIEND_GIFT_STATE gift_state() const;
  void set_gift_state(::sg::FRIEND_GIFT_STATE value);

  // optional int32 gift_item_num = 43;
  bool has_gift_item_num() const;
  void clear_gift_item_num();
  static const int kGiftItemNumFieldNumber = 43;
  ::google::protobuf::int32 gift_item_num() const;
  void set_gift_item_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PersonData)
 private:
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_role_nick();
  void clear_has_role_nick();
  void set_has_role_level();
  void clear_has_role_level();
  void set_has_role_exp();
  void clear_has_role_exp();
  void set_has_role_rank();
  void clear_has_role_rank();
  void set_has_portrait();
  void clear_has_portrait();
  void set_has_portrait_frame();
  void clear_has_portrait_frame();
  void set_has_signature();
  void clear_has_signature();
  void set_has_guildid();
  void clear_has_guildid();
  void set_has_guild_name();
  void clear_has_guild_name();
  void set_has_guild_badge();
  void clear_has_guild_badge();
  void set_has_guild_title();
  void clear_has_guild_title();
  void set_has_force();
  void clear_has_force();
  void set_has_is_online();
  void clear_has_is_online();
  void set_has_logintime();
  void clear_has_logintime();
  void set_has_can_challenge();
  void clear_has_can_challenge();
  void set_has_challenge_score();
  void clear_has_challenge_score();
  void set_has_gift_state();
  void clear_has_gift_state();
  void set_has_gift_item_typeid();
  void clear_has_gift_item_typeid();
  void set_has_gift_item_num();
  void clear_has_gift_item_num();
  void set_has_can_give_gift();
  void clear_has_can_give_gift();
  void set_has_team();
  void clear_has_team();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr role_nick_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  ::google::protobuf::internal::ArenaStringPtr guild_badge_;
  ::sg::PersonTeamMemberList* team_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 role_exp_;
  ::google::protobuf::int32 role_rank_;
  ::google::protobuf::int32 portrait_;
  ::google::protobuf::int32 portrait_frame_;
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 guild_title_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int64 logintime_;
  bool is_online_;
  bool can_challenge_;
  bool can_give_gift_;
  ::google::protobuf::int32 challenge_score_;
  ::google::protobuf::uint64 gift_item_typeid_;
  int gift_state_;
  ::google::protobuf::int32 gift_item_num_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PersonDataList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PersonDataList) */ {
 public:
  PersonDataList();
  virtual ~PersonDataList();

  PersonDataList(const PersonDataList& from);

  inline PersonDataList& operator=(const PersonDataList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PersonDataList(PersonDataList&& from) noexcept
    : PersonDataList() {
    *this = ::std::move(from);
  }

  inline PersonDataList& operator=(PersonDataList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonDataList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersonDataList* internal_default_instance() {
    return reinterpret_cast<const PersonDataList*>(
               &_PersonDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(PersonDataList* other);
  void Swap(PersonDataList* other);
  friend void swap(PersonDataList& a, PersonDataList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PersonDataList* New() const final {
    return CreateMaybeMessage<PersonDataList>(NULL);
  }

  PersonDataList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PersonDataList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PersonDataList& from);
  void MergeFrom(const PersonDataList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonDataList* other);
  protected:
  explicit PersonDataList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.PersonData list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::sg::PersonData* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::PersonData >*
      mutable_list();
  const ::sg::PersonData& list(int index) const;
  ::sg::PersonData* add_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::PersonData >&
      list() const;

  // @@protoc_insertion_point(class_scope:sg.PersonDataList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::PersonData > list_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryPersonResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.QueryPersonResult) */ {
 public:
  QueryPersonResult();
  virtual ~QueryPersonResult();

  QueryPersonResult(const QueryPersonResult& from);

  inline QueryPersonResult& operator=(const QueryPersonResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryPersonResult(QueryPersonResult&& from) noexcept
    : QueryPersonResult() {
    *this = ::std::move(from);
  }

  inline QueryPersonResult& operator=(QueryPersonResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPersonResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPersonResult* internal_default_instance() {
    return reinterpret_cast<const QueryPersonResult*>(
               &_QueryPersonResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(QueryPersonResult* other);
  void Swap(QueryPersonResult* other);
  friend void swap(QueryPersonResult& a, QueryPersonResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryPersonResult* New() const final {
    return CreateMaybeMessage<QueryPersonResult>(NULL);
  }

  QueryPersonResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryPersonResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryPersonResult& from);
  void MergeFrom(const QueryPersonResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPersonResult* other);
  protected:
  explicit QueryPersonResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.PersonData person = 3;
  bool has_person() const;
  void clear_person();
  static const int kPersonFieldNumber = 3;
  private:
  const ::sg::PersonData& _internal_person() const;
  public:
  const ::sg::PersonData& person() const;
  ::sg::PersonData* release_person();
  ::sg::PersonData* mutable_person();
  void set_allocated_person(::sg::PersonData* person);
  void unsafe_arena_set_allocated_person(
      ::sg::PersonData* person);
  ::sg::PersonData* unsafe_arena_release_person();

  // optional uint64 param_uuid = 2;
  bool has_param_uuid() const;
  void clear_param_uuid();
  static const int kParamUuidFieldNumber = 2;
  ::google::protobuf::uint64 param_uuid() const;
  void set_param_uuid(::google::protobuf::uint64 value);

  // required .sg.QUERY_PERSON_STATE state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::sg::QUERY_PERSON_STATE state() const;
  void set_state(::sg::QUERY_PERSON_STATE value);

  // @@protoc_insertion_point(class_scope:sg.QueryPersonResult)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_param_uuid();
  void clear_has_param_uuid();
  void set_has_person();
  void clear_has_person();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::PersonData* person_;
  ::google::protobuf::uint64 param_uuid_;
  int state_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendService_FriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FriendService.FriendRequest) */ {
 public:
  FriendService_FriendRequest();
  virtual ~FriendService_FriendRequest();

  FriendService_FriendRequest(const FriendService_FriendRequest& from);

  inline FriendService_FriendRequest& operator=(const FriendService_FriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendService_FriendRequest(FriendService_FriendRequest&& from) noexcept
    : FriendService_FriendRequest() {
    *this = ::std::move(from);
  }

  inline FriendService_FriendRequest& operator=(FriendService_FriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendService_FriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendService_FriendRequest* internal_default_instance() {
    return reinterpret_cast<const FriendService_FriendRequest*>(
               &_FriendService_FriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(FriendService_FriendRequest* other);
  void Swap(FriendService_FriendRequest* other);
  friend void swap(FriendService_FriendRequest& a, FriendService_FriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendService_FriendRequest* New() const final {
    return CreateMaybeMessage<FriendService_FriendRequest>(NULL);
  }

  FriendService_FriendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendService_FriendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendService_FriendRequest& from);
  void MergeFrom(const FriendService_FriendRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendService_FriendRequest* other);
  protected:
  explicit FriendService_FriendRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 person_uuid = 2;
  bool has_person_uuid() const;
  void clear_person_uuid();
  static const int kPersonUuidFieldNumber = 2;
  ::google::protobuf::uint64 person_uuid() const;
  void set_person_uuid(::google::protobuf::uint64 value);

  // required .sg.FriendService.FRIEND_COMMAND cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::FriendService_FRIEND_COMMAND cmd() const;
  void set_cmd(::sg::FriendService_FRIEND_COMMAND value);

  // @@protoc_insertion_point(class_scope:sg.FriendService.FriendRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_person_uuid();
  void clear_has_person_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 person_uuid_;
  int cmd_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendService_FriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FriendService.FriendResponse) */ {
 public:
  FriendService_FriendResponse();
  virtual ~FriendService_FriendResponse();

  FriendService_FriendResponse(const FriendService_FriendResponse& from);

  inline FriendService_FriendResponse& operator=(const FriendService_FriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendService_FriendResponse(FriendService_FriendResponse&& from) noexcept
    : FriendService_FriendResponse() {
    *this = ::std::move(from);
  }

  inline FriendService_FriendResponse& operator=(FriendService_FriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendService_FriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendService_FriendResponse* internal_default_instance() {
    return reinterpret_cast<const FriendService_FriendResponse*>(
               &_FriendService_FriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(FriendService_FriendResponse* other);
  void Swap(FriendService_FriendResponse* other);
  friend void swap(FriendService_FriendResponse& a, FriendService_FriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendService_FriendResponse* New() const final {
    return CreateMaybeMessage<FriendService_FriendResponse>(NULL);
  }

  FriendService_FriendResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendService_FriendResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendService_FriendResponse& from);
  void MergeFrom(const FriendService_FriendResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendService_FriendResponse* other);
  protected:
  explicit FriendService_FriendResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.PersonDataList friend_list = 2;
  bool has_friend_list() const;
  void clear_friend_list();
  static const int kFriendListFieldNumber = 2;
  private:
  const ::sg::PersonDataList& _internal_friend_list() const;
  public:
  const ::sg::PersonDataList& friend_list() const;
  ::sg::PersonDataList* release_friend_list();
  ::sg::PersonDataList* mutable_friend_list();
  void set_allocated_friend_list(::sg::PersonDataList* friend_list);
  void unsafe_arena_set_allocated_friend_list(
      ::sg::PersonDataList* friend_list);
  ::sg::PersonDataList* unsafe_arena_release_friend_list();

  // optional .sg.PersonDataList candidate_list = 3;
  bool has_candidate_list() const;
  void clear_candidate_list();
  static const int kCandidateListFieldNumber = 3;
  private:
  const ::sg::PersonDataList& _internal_candidate_list() const;
  public:
  const ::sg::PersonDataList& candidate_list() const;
  ::sg::PersonDataList* release_candidate_list();
  ::sg::PersonDataList* mutable_candidate_list();
  void set_allocated_candidate_list(::sg::PersonDataList* candidate_list);
  void unsafe_arena_set_allocated_candidate_list(
      ::sg::PersonDataList* candidate_list);
  ::sg::PersonDataList* unsafe_arena_release_candidate_list();

  // optional .sg.PersonDataList adding_list = 4;
  bool has_adding_list() const;
  void clear_adding_list();
  static const int kAddingListFieldNumber = 4;
  private:
  const ::sg::PersonDataList& _internal_adding_list() const;
  public:
  const ::sg::PersonDataList& adding_list() const;
  ::sg::PersonDataList* release_adding_list();
  ::sg::PersonDataList* mutable_adding_list();
  void set_allocated_adding_list(::sg::PersonDataList* adding_list);
  void unsafe_arena_set_allocated_adding_list(
      ::sg::PersonDataList* adding_list);
  ::sg::PersonDataList* unsafe_arena_release_adding_list();

  // optional .sg.PersonDataList confirming_list = 5;
  bool has_confirming_list() const;
  void clear_confirming_list();
  static const int kConfirmingListFieldNumber = 5;
  private:
  const ::sg::PersonDataList& _internal_confirming_list() const;
  public:
  const ::sg::PersonDataList& confirming_list() const;
  ::sg::PersonDataList* release_confirming_list();
  ::sg::PersonDataList* mutable_confirming_list();
  void set_allocated_confirming_list(::sg::PersonDataList* confirming_list);
  void unsafe_arena_set_allocated_confirming_list(
      ::sg::PersonDataList* confirming_list);
  ::sg::PersonDataList* unsafe_arena_release_confirming_list();

  // optional .sg.PersonDataList ban_list = 8;
  bool has_ban_list() const;
  void clear_ban_list();
  static const int kBanListFieldNumber = 8;
  private:
  const ::sg::PersonDataList& _internal_ban_list() const;
  public:
  const ::sg::PersonDataList& ban_list() const;
  ::sg::PersonDataList* release_ban_list();
  ::sg::PersonDataList* mutable_ban_list();
  void set_allocated_ban_list(::sg::PersonDataList* ban_list);
  void unsafe_arena_set_allocated_ban_list(
      ::sg::PersonDataList* ban_list);
  ::sg::PersonDataList* unsafe_arena_release_ban_list();

  // optional .sg.QueryPersonResult qurey_person_result = 11;
  bool has_qurey_person_result() const;
  void clear_qurey_person_result();
  static const int kQureyPersonResultFieldNumber = 11;
  private:
  const ::sg::QueryPersonResult& _internal_qurey_person_result() const;
  public:
  const ::sg::QueryPersonResult& qurey_person_result() const;
  ::sg::QueryPersonResult* release_qurey_person_result();
  ::sg::QueryPersonResult* mutable_qurey_person_result();
  void set_allocated_qurey_person_result(::sg::QueryPersonResult* qurey_person_result);
  void unsafe_arena_set_allocated_qurey_person_result(
      ::sg::QueryPersonResult* qurey_person_result);
  ::sg::QueryPersonResult* unsafe_arena_release_qurey_person_result();

  // optional .sg.Reward gift_accepted = 21;
  bool has_gift_accepted() const;
  void clear_gift_accepted();
  static const int kGiftAcceptedFieldNumber = 21;
  private:
  const ::sg::Reward& _internal_gift_accepted() const;
  public:
  const ::sg::Reward& gift_accepted() const;
  ::sg::Reward* release_gift_accepted();
  ::sg::Reward* mutable_gift_accepted();
  void set_allocated_gift_accepted(::sg::Reward* gift_accepted);
  void unsafe_arena_set_allocated_gift_accepted(
      ::sg::Reward* gift_accepted);
  ::sg::Reward* unsafe_arena_release_gift_accepted();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 challenge_num = 6;
  bool has_challenge_num() const;
  void clear_challenge_num();
  static const int kChallengeNumFieldNumber = 6;
  ::google::protobuf::int32 challenge_num() const;
  void set_challenge_num(::google::protobuf::int32 value);

  // optional int32 gift_accept_num_max = 23;
  bool has_gift_accept_num_max() const;
  void clear_gift_accept_num_max();
  static const int kGiftAcceptNumMaxFieldNumber = 23;
  ::google::protobuf::int32 gift_accept_num_max() const;
  void set_gift_accept_num_max(::google::protobuf::int32 value);

  // optional int32 challenge_num_max = 7;
  bool has_challenge_num_max() const;
  void clear_challenge_num_max();
  static const int kChallengeNumMaxFieldNumber = 7;
  ::google::protobuf::int32 challenge_num_max() const;
  void set_challenge_num_max(::google::protobuf::int32 value);

  // optional int32 gift_accept_num = 22;
  bool has_gift_accept_num() const;
  void clear_gift_accept_num();
  static const int kGiftAcceptNumFieldNumber = 22;
  ::google::protobuf::int32 gift_accept_num() const;
  void set_gift_accept_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.FriendService.FriendResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_friend_list();
  void clear_has_friend_list();
  void set_has_candidate_list();
  void clear_has_candidate_list();
  void set_has_adding_list();
  void clear_has_adding_list();
  void set_has_confirming_list();
  void clear_has_confirming_list();
  void set_has_challenge_num();
  void clear_has_challenge_num();
  void set_has_challenge_num_max();
  void clear_has_challenge_num_max();
  void set_has_ban_list();
  void clear_has_ban_list();
  void set_has_qurey_person_result();
  void clear_has_qurey_person_result();
  void set_has_gift_accepted();
  void clear_has_gift_accepted();
  void set_has_gift_accept_num();
  void clear_has_gift_accept_num();
  void set_has_gift_accept_num_max();
  void clear_has_gift_accept_num_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::PersonDataList* friend_list_;
  ::sg::PersonDataList* candidate_list_;
  ::sg::PersonDataList* adding_list_;
  ::sg::PersonDataList* confirming_list_;
  ::sg::PersonDataList* ban_list_;
  ::sg::QueryPersonResult* qurey_person_result_;
  ::sg::Reward* gift_accepted_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 challenge_num_;
  ::google::protobuf::int32 gift_accept_num_max_;
  ::google::protobuf::int32 challenge_num_max_;
  ::google::protobuf::int32 gift_accept_num_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FriendService) */ {
 public:
  FriendService();
  virtual ~FriendService();

  FriendService(const FriendService& from);

  inline FriendService& operator=(const FriendService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendService(FriendService&& from) noexcept
    : FriendService() {
    *this = ::std::move(from);
  }

  inline FriendService& operator=(FriendService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendService* internal_default_instance() {
    return reinterpret_cast<const FriendService*>(
               &_FriendService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(FriendService* other);
  void Swap(FriendService* other);
  friend void swap(FriendService& a, FriendService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendService* New() const final {
    return CreateMaybeMessage<FriendService>(NULL);
  }

  FriendService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendService& from);
  void MergeFrom(const FriendService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendService* other);
  protected:
  explicit FriendService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FriendService_FriendRequest FriendRequest;
  typedef FriendService_FriendResponse FriendResponse;

  typedef FriendService_FRIEND_COMMAND FRIEND_COMMAND;
  static const FRIEND_COMMAND QUERY_FRIENDS =
    FriendService_FRIEND_COMMAND_QUERY_FRIENDS;
  static const FRIEND_COMMAND ADD_FRIEND =
    FriendService_FRIEND_COMMAND_ADD_FRIEND;
  static const FRIEND_COMMAND DELETE_FRIEND =
    FriendService_FRIEND_COMMAND_DELETE_FRIEND;
  static const FRIEND_COMMAND VISIT_FRIEND =
    FriendService_FRIEND_COMMAND_VISIT_FRIEND;
  static const FRIEND_COMMAND REFRESH_CANDIDATES =
    FriendService_FRIEND_COMMAND_REFRESH_CANDIDATES;
  static const FRIEND_COMMAND QUERY_PERSON_BY_UUID =
    FriendService_FRIEND_COMMAND_QUERY_PERSON_BY_UUID;
  static const FRIEND_COMMAND REJECT_ALL_ADDING =
    FriendService_FRIEND_COMMAND_REJECT_ALL_ADDING;
  static const FRIEND_COMMAND ACCEPT_ALL_ADDING =
    FriendService_FRIEND_COMMAND_ACCEPT_ALL_ADDING;
  static const FRIEND_COMMAND CANCEL_ALL_CONFIRMING =
    FriendService_FRIEND_COMMAND_CANCEL_ALL_CONFIRMING;
  static const FRIEND_COMMAND BAN_FRIEND =
    FriendService_FRIEND_COMMAND_BAN_FRIEND;
  static const FRIEND_COMMAND UNBAN_FRIEND =
    FriendService_FRIEND_COMMAND_UNBAN_FRIEND;
  static const FRIEND_COMMAND GIVE_GIFT =
    FriendService_FRIEND_COMMAND_GIVE_GIFT;
  static const FRIEND_COMMAND ACCEPT_GIFT =
    FriendService_FRIEND_COMMAND_ACCEPT_GIFT;
  static inline bool FRIEND_COMMAND_IsValid(int value) {
    return FriendService_FRIEND_COMMAND_IsValid(value);
  }
  static const FRIEND_COMMAND FRIEND_COMMAND_MIN =
    FriendService_FRIEND_COMMAND_FRIEND_COMMAND_MIN;
  static const FRIEND_COMMAND FRIEND_COMMAND_MAX =
    FriendService_FRIEND_COMMAND_FRIEND_COMMAND_MAX;
  static const int FRIEND_COMMAND_ARRAYSIZE =
    FriendService_FRIEND_COMMAND_FRIEND_COMMAND_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FRIEND_COMMAND_descriptor() {
    return FriendService_FRIEND_COMMAND_descriptor();
  }
  static inline const ::std::string& FRIEND_COMMAND_Name(FRIEND_COMMAND value) {
    return FriendService_FRIEND_COMMAND_Name(value);
  }
  static inline bool FRIEND_COMMAND_Parse(const ::std::string& name,
      FRIEND_COMMAND* value) {
    return FriendService_FRIEND_COMMAND_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.FriendService.FriendRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::FriendService_FriendRequest& _internal_req() const;
  public:
  const ::sg::FriendService_FriendRequest& req() const;
  ::sg::FriendService_FriendRequest* release_req();
  ::sg::FriendService_FriendRequest* mutable_req();
  void set_allocated_req(::sg::FriendService_FriendRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::FriendService_FriendRequest* req);
  ::sg::FriendService_FriendRequest* unsafe_arena_release_req();

  // optional .sg.FriendService.FriendResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::FriendService_FriendResponse& _internal_resp() const;
  public:
  const ::sg::FriendService_FriendResponse& resp() const;
  ::sg::FriendService_FriendResponse* release_resp();
  ::sg::FriendService_FriendResponse* mutable_resp();
  void set_allocated_resp(::sg::FriendService_FriendResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::FriendService_FriendResponse* resp);
  ::sg::FriendService_FriendResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.FriendService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::FriendService_FriendRequest* req_;
  ::sg::FriendService_FriendResponse* resp_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameInviteReward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameInviteReward) */ {
 public:
  GameInviteReward();
  virtual ~GameInviteReward();

  GameInviteReward(const GameInviteReward& from);

  inline GameInviteReward& operator=(const GameInviteReward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameInviteReward(GameInviteReward&& from) noexcept
    : GameInviteReward() {
    *this = ::std::move(from);
  }

  inline GameInviteReward& operator=(GameInviteReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInviteReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInviteReward* internal_default_instance() {
    return reinterpret_cast<const GameInviteReward*>(
               &_GameInviteReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(GameInviteReward* other);
  void Swap(GameInviteReward* other);
  friend void swap(GameInviteReward& a, GameInviteReward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameInviteReward* New() const final {
    return CreateMaybeMessage<GameInviteReward>(NULL);
  }

  GameInviteReward* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameInviteReward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameInviteReward& from);
  void MergeFrom(const GameInviteReward& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInviteReward* other);
  protected:
  explicit GameInviteReward(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 reward_reason = 3;
  bool has_reward_reason() const;
  void clear_reward_reason();
  static const int kRewardReasonFieldNumber = 3;
  ::google::protobuf::int32 reward_reason() const;
  void set_reward_reason(::google::protobuf::int32 value);

  // required uint64 item_typeid = 12;
  bool has_item_typeid() const;
  void clear_item_typeid();
  static const int kItemTypeidFieldNumber = 12;
  ::google::protobuf::uint64 item_typeid() const;
  void set_item_typeid(::google::protobuf::uint64 value);

  // required int32 item_type = 11;
  bool has_item_type() const;
  void clear_item_type();
  static const int kItemTypeFieldNumber = 11;
  ::google::protobuf::int32 item_type() const;
  void set_item_type(::google::protobuf::int32 value);

  // required int32 item_num = 13;
  bool has_item_num() const;
  void clear_item_num();
  static const int kItemNumFieldNumber = 13;
  ::google::protobuf::int32 item_num() const;
  void set_item_num(::google::protobuf::int32 value);

  // required .sg.GAME_INVITE_REWARD_STATE reward_state = 2;
  bool has_reward_state() const;
  void clear_reward_state();
  static const int kRewardStateFieldNumber = 2;
  ::sg::GAME_INVITE_REWARD_STATE reward_state() const;
  void set_reward_state(::sg::GAME_INVITE_REWARD_STATE value);

  // @@protoc_insertion_point(class_scope:sg.GameInviteReward)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_reward_state();
  void clear_has_reward_state();
  void set_has_reward_reason();
  void clear_has_reward_reason();
  void set_has_item_type();
  void clear_has_item_type();
  void set_has_item_typeid();
  void clear_has_item_typeid();
  void set_has_item_num();
  void clear_has_item_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 reward_reason_;
  ::google::protobuf::uint64 item_typeid_;
  ::google::protobuf::int32 item_type_;
  ::google::protobuf::int32 item_num_;
  int reward_state_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameInviteRewardList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameInviteRewardList) */ {
 public:
  GameInviteRewardList();
  virtual ~GameInviteRewardList();

  GameInviteRewardList(const GameInviteRewardList& from);

  inline GameInviteRewardList& operator=(const GameInviteRewardList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameInviteRewardList(GameInviteRewardList&& from) noexcept
    : GameInviteRewardList() {
    *this = ::std::move(from);
  }

  inline GameInviteRewardList& operator=(GameInviteRewardList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInviteRewardList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInviteRewardList* internal_default_instance() {
    return reinterpret_cast<const GameInviteRewardList*>(
               &_GameInviteRewardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(GameInviteRewardList* other);
  void Swap(GameInviteRewardList* other);
  friend void swap(GameInviteRewardList& a, GameInviteRewardList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameInviteRewardList* New() const final {
    return CreateMaybeMessage<GameInviteRewardList>(NULL);
  }

  GameInviteRewardList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameInviteRewardList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameInviteRewardList& from);
  void MergeFrom(const GameInviteRewardList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInviteRewardList* other);
  protected:
  explicit GameInviteRewardList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.GameInviteReward list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::sg::GameInviteReward* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::GameInviteReward >*
      mutable_list();
  const ::sg::GameInviteReward& list(int index) const;
  ::sg::GameInviteReward* add_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::GameInviteReward >&
      list() const;

  // @@protoc_insertion_point(class_scope:sg.GameInviteRewardList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::GameInviteReward > list_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InputInviteCodeResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.InputInviteCodeResult) */ {
 public:
  InputInviteCodeResult();
  virtual ~InputInviteCodeResult();

  InputInviteCodeResult(const InputInviteCodeResult& from);

  inline InputInviteCodeResult& operator=(const InputInviteCodeResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputInviteCodeResult(InputInviteCodeResult&& from) noexcept
    : InputInviteCodeResult() {
    *this = ::std::move(from);
  }

  inline InputInviteCodeResult& operator=(InputInviteCodeResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const InputInviteCodeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputInviteCodeResult* internal_default_instance() {
    return reinterpret_cast<const InputInviteCodeResult*>(
               &_InputInviteCodeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(InputInviteCodeResult* other);
  void Swap(InputInviteCodeResult* other);
  friend void swap(InputInviteCodeResult& a, InputInviteCodeResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputInviteCodeResult* New() const final {
    return CreateMaybeMessage<InputInviteCodeResult>(NULL);
  }

  InputInviteCodeResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InputInviteCodeResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InputInviteCodeResult& from);
  void MergeFrom(const InputInviteCodeResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputInviteCodeResult* other);
  protected:
  explicit InputInviteCodeResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 param_uuid = 2;
  bool has_param_uuid() const;
  void clear_param_uuid();
  static const int kParamUuidFieldNumber = 2;
  ::google::protobuf::uint64 param_uuid() const;
  void set_param_uuid(::google::protobuf::uint64 value);

  // required .sg.QUERY_PERSON_STATE state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::sg::QUERY_PERSON_STATE state() const;
  void set_state(::sg::QUERY_PERSON_STATE value);

  // @@protoc_insertion_point(class_scope:sg.InputInviteCodeResult)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_param_uuid();
  void clear_has_param_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 param_uuid_;
  int state_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameInviteAcceptReward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameInviteAcceptReward) */ {
 public:
  GameInviteAcceptReward();
  virtual ~GameInviteAcceptReward();

  GameInviteAcceptReward(const GameInviteAcceptReward& from);

  inline GameInviteAcceptReward& operator=(const GameInviteAcceptReward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameInviteAcceptReward(GameInviteAcceptReward&& from) noexcept
    : GameInviteAcceptReward() {
    *this = ::std::move(from);
  }

  inline GameInviteAcceptReward& operator=(GameInviteAcceptReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInviteAcceptReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInviteAcceptReward* internal_default_instance() {
    return reinterpret_cast<const GameInviteAcceptReward*>(
               &_GameInviteAcceptReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(GameInviteAcceptReward* other);
  void Swap(GameInviteAcceptReward* other);
  friend void swap(GameInviteAcceptReward& a, GameInviteAcceptReward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameInviteAcceptReward* New() const final {
    return CreateMaybeMessage<GameInviteAcceptReward>(NULL);
  }

  GameInviteAcceptReward* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameInviteAcceptReward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameInviteAcceptReward& from);
  void MergeFrom(const GameInviteAcceptReward& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInviteAcceptReward* other);
  protected:
  explicit GameInviteAcceptReward(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Item out_accept_list = 2;
  int out_accept_list_size() const;
  void clear_out_accept_list();
  static const int kOutAcceptListFieldNumber = 2;
  ::sg::Item* mutable_out_accept_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Item >*
      mutable_out_accept_list();
  const ::sg::Item& out_accept_list(int index) const;
  ::sg::Item* add_out_accept_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::Item >&
      out_accept_list() const;

  // optional int32 reward_id = 1;
  bool has_reward_id() const;
  void clear_reward_id();
  static const int kRewardIdFieldNumber = 1;
  ::google::protobuf::int32 reward_id() const;
  void set_reward_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.GameInviteAcceptReward)
 private:
  void set_has_reward_id();
  void clear_has_reward_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Item > out_accept_list_;
  ::google::protobuf::int32 reward_id_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameInviteService_GameInviteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameInviteService.GameInviteRequest) */ {
 public:
  GameInviteService_GameInviteRequest();
  virtual ~GameInviteService_GameInviteRequest();

  GameInviteService_GameInviteRequest(const GameInviteService_GameInviteRequest& from);

  inline GameInviteService_GameInviteRequest& operator=(const GameInviteService_GameInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameInviteService_GameInviteRequest(GameInviteService_GameInviteRequest&& from) noexcept
    : GameInviteService_GameInviteRequest() {
    *this = ::std::move(from);
  }

  inline GameInviteService_GameInviteRequest& operator=(GameInviteService_GameInviteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInviteService_GameInviteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInviteService_GameInviteRequest* internal_default_instance() {
    return reinterpret_cast<const GameInviteService_GameInviteRequest*>(
               &_GameInviteService_GameInviteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(GameInviteService_GameInviteRequest* other);
  void Swap(GameInviteService_GameInviteRequest* other);
  friend void swap(GameInviteService_GameInviteRequest& a, GameInviteService_GameInviteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameInviteService_GameInviteRequest* New() const final {
    return CreateMaybeMessage<GameInviteService_GameInviteRequest>(NULL);
  }

  GameInviteService_GameInviteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameInviteService_GameInviteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameInviteService_GameInviteRequest& from);
  void MergeFrom(const GameInviteService_GameInviteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInviteService_GameInviteRequest* other);
  protected:
  explicit GameInviteService_GameInviteRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 invite_code = 2;
  bool has_invite_code() const;
  void clear_invite_code();
  static const int kInviteCodeFieldNumber = 2;
  ::google::protobuf::int64 invite_code() const;
  void set_invite_code(::google::protobuf::int64 value);

  // optional int64 reward_id = 3;
  bool has_reward_id() const;
  void clear_reward_id();
  static const int kRewardIdFieldNumber = 3;
  ::google::protobuf::int64 reward_id() const;
  void set_reward_id(::google::protobuf::int64 value);

  // required .sg.GameInviteService.GAME_INVITE_COMMAND cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::GameInviteService_GAME_INVITE_COMMAND cmd() const;
  void set_cmd(::sg::GameInviteService_GAME_INVITE_COMMAND value);

  // @@protoc_insertion_point(class_scope:sg.GameInviteService.GameInviteRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_invite_code();
  void clear_has_invite_code();
  void set_has_reward_id();
  void clear_has_reward_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 invite_code_;
  ::google::protobuf::int64 reward_id_;
  int cmd_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameInviteService_GameInviteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameInviteService.GameInviteResponse) */ {
 public:
  GameInviteService_GameInviteResponse();
  virtual ~GameInviteService_GameInviteResponse();

  GameInviteService_GameInviteResponse(const GameInviteService_GameInviteResponse& from);

  inline GameInviteService_GameInviteResponse& operator=(const GameInviteService_GameInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameInviteService_GameInviteResponse(GameInviteService_GameInviteResponse&& from) noexcept
    : GameInviteService_GameInviteResponse() {
    *this = ::std::move(from);
  }

  inline GameInviteService_GameInviteResponse& operator=(GameInviteService_GameInviteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInviteService_GameInviteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInviteService_GameInviteResponse* internal_default_instance() {
    return reinterpret_cast<const GameInviteService_GameInviteResponse*>(
               &_GameInviteService_GameInviteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(GameInviteService_GameInviteResponse* other);
  void Swap(GameInviteService_GameInviteResponse* other);
  friend void swap(GameInviteService_GameInviteResponse& a, GameInviteService_GameInviteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameInviteService_GameInviteResponse* New() const final {
    return CreateMaybeMessage<GameInviteService_GameInviteResponse>(NULL);
  }

  GameInviteService_GameInviteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameInviteService_GameInviteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameInviteService_GameInviteResponse& from);
  void MergeFrom(const GameInviteService_GameInviteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInviteService_GameInviteResponse* other);
  protected:
  explicit GameInviteService_GameInviteResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.InputInviteCodeResult input_invite_code_result = 11;
  bool has_input_invite_code_result() const;
  void clear_input_invite_code_result();
  static const int kInputInviteCodeResultFieldNumber = 11;
  private:
  const ::sg::InputInviteCodeResult& _internal_input_invite_code_result() const;
  public:
  const ::sg::InputInviteCodeResult& input_invite_code_result() const;
  ::sg::InputInviteCodeResult* release_input_invite_code_result();
  ::sg::InputInviteCodeResult* mutable_input_invite_code_result();
  void set_allocated_input_invite_code_result(::sg::InputInviteCodeResult* input_invite_code_result);
  void unsafe_arena_set_allocated_input_invite_code_result(
      ::sg::InputInviteCodeResult* input_invite_code_result);
  ::sg::InputInviteCodeResult* unsafe_arena_release_input_invite_code_result();

  // optional .sg.GameInviteReward invitee_reward = 21;
  bool has_invitee_reward() const;
  void clear_invitee_reward();
  static const int kInviteeRewardFieldNumber = 21;
  private:
  const ::sg::GameInviteReward& _internal_invitee_reward() const;
  public:
  const ::sg::GameInviteReward& invitee_reward() const;
  ::sg::GameInviteReward* release_invitee_reward();
  ::sg::GameInviteReward* mutable_invitee_reward();
  void set_allocated_invitee_reward(::sg::GameInviteReward* invitee_reward);
  void unsafe_arena_set_allocated_invitee_reward(
      ::sg::GameInviteReward* invitee_reward);
  ::sg::GameInviteReward* unsafe_arena_release_invitee_reward();

  // optional .sg.GameInviteRewardList inviter_reward_list = 22;
  bool has_inviter_reward_list() const;
  void clear_inviter_reward_list();
  static const int kInviterRewardListFieldNumber = 22;
  private:
  const ::sg::GameInviteRewardList& _internal_inviter_reward_list() const;
  public:
  const ::sg::GameInviteRewardList& inviter_reward_list() const;
  ::sg::GameInviteRewardList* release_inviter_reward_list();
  ::sg::GameInviteRewardList* mutable_inviter_reward_list();
  void set_allocated_inviter_reward_list(::sg::GameInviteRewardList* inviter_reward_list);
  void unsafe_arena_set_allocated_inviter_reward_list(
      ::sg::GameInviteRewardList* inviter_reward_list);
  ::sg::GameInviteRewardList* unsafe_arena_release_inviter_reward_list();

  // optional .sg.GameInviteAcceptReward accept_reward = 31;
  bool has_accept_reward() const;
  void clear_accept_reward();
  static const int kAcceptRewardFieldNumber = 31;
  private:
  const ::sg::GameInviteAcceptReward& _internal_accept_reward() const;
  public:
  const ::sg::GameInviteAcceptReward& accept_reward() const;
  ::sg::GameInviteAcceptReward* release_accept_reward();
  ::sg::GameInviteAcceptReward* mutable_accept_reward();
  void set_allocated_accept_reward(::sg::GameInviteAcceptReward* accept_reward);
  void unsafe_arena_set_allocated_accept_reward(
      ::sg::GameInviteAcceptReward* accept_reward);
  ::sg::GameInviteAcceptReward* unsafe_arena_release_accept_reward();

  // optional uint64 who_invite_me = 2;
  bool has_who_invite_me() const;
  void clear_who_invite_me();
  static const int kWhoInviteMeFieldNumber = 2;
  ::google::protobuf::uint64 who_invite_me() const;
  void set_who_invite_me(::google::protobuf::uint64 value);

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 invite_accept_num = 3;
  bool has_invite_accept_num() const;
  void clear_invite_accept_num();
  static const int kInviteAcceptNumFieldNumber = 3;
  ::google::protobuf::int32 invite_accept_num() const;
  void set_invite_accept_num(::google::protobuf::int32 value);

  // optional int32 invite_ok_num = 4;
  bool has_invite_ok_num() const;
  void clear_invite_ok_num();
  static const int kInviteOkNumFieldNumber = 4;
  ::google::protobuf::int32 invite_ok_num() const;
  void set_invite_ok_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.GameInviteService.GameInviteResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_who_invite_me();
  void clear_has_who_invite_me();
  void set_has_invite_accept_num();
  void clear_has_invite_accept_num();
  void set_has_invite_ok_num();
  void clear_has_invite_ok_num();
  void set_has_input_invite_code_result();
  void clear_has_input_invite_code_result();
  void set_has_invitee_reward();
  void clear_has_invitee_reward();
  void set_has_inviter_reward_list();
  void clear_has_inviter_reward_list();
  void set_has_accept_reward();
  void clear_has_accept_reward();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::InputInviteCodeResult* input_invite_code_result_;
  ::sg::GameInviteReward* invitee_reward_;
  ::sg::GameInviteRewardList* inviter_reward_list_;
  ::sg::GameInviteAcceptReward* accept_reward_;
  ::google::protobuf::uint64 who_invite_me_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 invite_accept_num_;
  ::google::protobuf::int32 invite_ok_num_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameInviteService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.GameInviteService) */ {
 public:
  GameInviteService();
  virtual ~GameInviteService();

  GameInviteService(const GameInviteService& from);

  inline GameInviteService& operator=(const GameInviteService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameInviteService(GameInviteService&& from) noexcept
    : GameInviteService() {
    *this = ::std::move(from);
  }

  inline GameInviteService& operator=(GameInviteService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInviteService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInviteService* internal_default_instance() {
    return reinterpret_cast<const GameInviteService*>(
               &_GameInviteService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(GameInviteService* other);
  void Swap(GameInviteService* other);
  friend void swap(GameInviteService& a, GameInviteService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameInviteService* New() const final {
    return CreateMaybeMessage<GameInviteService>(NULL);
  }

  GameInviteService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameInviteService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameInviteService& from);
  void MergeFrom(const GameInviteService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInviteService* other);
  protected:
  explicit GameInviteService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameInviteService_GameInviteRequest GameInviteRequest;
  typedef GameInviteService_GameInviteResponse GameInviteResponse;

  typedef GameInviteService_GAME_INVITE_COMMAND GAME_INVITE_COMMAND;
  static const GAME_INVITE_COMMAND QUERY =
    GameInviteService_GAME_INVITE_COMMAND_QUERY;
  static const GAME_INVITE_COMMAND INPUT_INVITE_CODE =
    GameInviteService_GAME_INVITE_COMMAND_INPUT_INVITE_CODE;
  static const GAME_INVITE_COMMAND ACCEPT_REWARD =
    GameInviteService_GAME_INVITE_COMMAND_ACCEPT_REWARD;
  static inline bool GAME_INVITE_COMMAND_IsValid(int value) {
    return GameInviteService_GAME_INVITE_COMMAND_IsValid(value);
  }
  static const GAME_INVITE_COMMAND GAME_INVITE_COMMAND_MIN =
    GameInviteService_GAME_INVITE_COMMAND_GAME_INVITE_COMMAND_MIN;
  static const GAME_INVITE_COMMAND GAME_INVITE_COMMAND_MAX =
    GameInviteService_GAME_INVITE_COMMAND_GAME_INVITE_COMMAND_MAX;
  static const int GAME_INVITE_COMMAND_ARRAYSIZE =
    GameInviteService_GAME_INVITE_COMMAND_GAME_INVITE_COMMAND_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GAME_INVITE_COMMAND_descriptor() {
    return GameInviteService_GAME_INVITE_COMMAND_descriptor();
  }
  static inline const ::std::string& GAME_INVITE_COMMAND_Name(GAME_INVITE_COMMAND value) {
    return GameInviteService_GAME_INVITE_COMMAND_Name(value);
  }
  static inline bool GAME_INVITE_COMMAND_Parse(const ::std::string& name,
      GAME_INVITE_COMMAND* value) {
    return GameInviteService_GAME_INVITE_COMMAND_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.GameInviteService.GameInviteRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::GameInviteService_GameInviteRequest& _internal_req() const;
  public:
  const ::sg::GameInviteService_GameInviteRequest& req() const;
  ::sg::GameInviteService_GameInviteRequest* release_req();
  ::sg::GameInviteService_GameInviteRequest* mutable_req();
  void set_allocated_req(::sg::GameInviteService_GameInviteRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::GameInviteService_GameInviteRequest* req);
  ::sg::GameInviteService_GameInviteRequest* unsafe_arena_release_req();

  // optional .sg.GameInviteService.GameInviteResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::GameInviteService_GameInviteResponse& _internal_resp() const;
  public:
  const ::sg::GameInviteService_GameInviteResponse& resp() const;
  ::sg::GameInviteService_GameInviteResponse* release_resp();
  ::sg::GameInviteService_GameInviteResponse* mutable_resp();
  void set_allocated_resp(::sg::GameInviteService_GameInviteResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::GameInviteService_GameInviteResponse* resp);
  ::sg::GameInviteService_GameInviteResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.GameInviteService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::GameInviteService_GameInviteRequest* req_;
  ::sg::GameInviteService_GameInviteResponse* resp_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendGiftNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FriendGiftNotify) */ {
 public:
  FriendGiftNotify();
  virtual ~FriendGiftNotify();

  FriendGiftNotify(const FriendGiftNotify& from);

  inline FriendGiftNotify& operator=(const FriendGiftNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendGiftNotify(FriendGiftNotify&& from) noexcept
    : FriendGiftNotify() {
    *this = ::std::move(from);
  }

  inline FriendGiftNotify& operator=(FriendGiftNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendGiftNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendGiftNotify* internal_default_instance() {
    return reinterpret_cast<const FriendGiftNotify*>(
               &_FriendGiftNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(FriendGiftNotify* other);
  void Swap(FriendGiftNotify* other);
  friend void swap(FriendGiftNotify& a, FriendGiftNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendGiftNotify* New() const final {
    return CreateMaybeMessage<FriendGiftNotify>(NULL);
  }

  FriendGiftNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendGiftNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendGiftNotify& from);
  void MergeFrom(const FriendGiftNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendGiftNotify* other);
  protected:
  explicit FriendGiftNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 friend_uuid = 1;
  bool has_friend_uuid() const;
  void clear_friend_uuid();
  static const int kFriendUuidFieldNumber = 1;
  ::google::protobuf::uint64 friend_uuid() const;
  void set_friend_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sg.FriendGiftNotify)
 private:
  void set_has_friend_uuid();
  void clear_has_friend_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 friend_uuid_;
  friend struct ::protobuf_Friend_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PersonTeamMember

// required int32 posid = 1;
inline bool PersonTeamMember::has_posid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersonTeamMember::set_has_posid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersonTeamMember::clear_has_posid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersonTeamMember::clear_posid() {
  posid_ = 0;
  clear_has_posid();
}
inline ::google::protobuf::int32 PersonTeamMember::posid() const {
  // @@protoc_insertion_point(field_get:sg.PersonTeamMember.posid)
  return posid_;
}
inline void PersonTeamMember::set_posid(::google::protobuf::int32 value) {
  set_has_posid();
  posid_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonTeamMember.posid)
}

// required uint64 member_typeid = 2;
inline bool PersonTeamMember::has_member_typeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersonTeamMember::set_has_member_typeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersonTeamMember::clear_has_member_typeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersonTeamMember::clear_member_typeid() {
  member_typeid_ = GOOGLE_ULONGLONG(0);
  clear_has_member_typeid();
}
inline ::google::protobuf::uint64 PersonTeamMember::member_typeid() const {
  // @@protoc_insertion_point(field_get:sg.PersonTeamMember.member_typeid)
  return member_typeid_;
}
inline void PersonTeamMember::set_member_typeid(::google::protobuf::uint64 value) {
  set_has_member_typeid();
  member_typeid_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonTeamMember.member_typeid)
}

// required int32 member_level = 3;
inline bool PersonTeamMember::has_member_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersonTeamMember::set_has_member_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersonTeamMember::clear_has_member_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersonTeamMember::clear_member_level() {
  member_level_ = 0;
  clear_has_member_level();
}
inline ::google::protobuf::int32 PersonTeamMember::member_level() const {
  // @@protoc_insertion_point(field_get:sg.PersonTeamMember.member_level)
  return member_level_;
}
inline void PersonTeamMember::set_member_level(::google::protobuf::int32 value) {
  set_has_member_level();
  member_level_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonTeamMember.member_level)
}

// required int32 member_star = 4;
inline bool PersonTeamMember::has_member_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PersonTeamMember::set_has_member_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PersonTeamMember::clear_has_member_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PersonTeamMember::clear_member_star() {
  member_star_ = 0;
  clear_has_member_star();
}
inline ::google::protobuf::int32 PersonTeamMember::member_star() const {
  // @@protoc_insertion_point(field_get:sg.PersonTeamMember.member_star)
  return member_star_;
}
inline void PersonTeamMember::set_member_star(::google::protobuf::int32 value) {
  set_has_member_star();
  member_star_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonTeamMember.member_star)
}

// -------------------------------------------------------------------

// PersonTeamMemberList

// repeated .sg.PersonTeamMember list = 1;
inline int PersonTeamMemberList::list_size() const {
  return list_.size();
}
inline void PersonTeamMemberList::clear_list() {
  list_.Clear();
}
inline ::sg::PersonTeamMember* PersonTeamMemberList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.PersonTeamMemberList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::PersonTeamMember >*
PersonTeamMemberList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.PersonTeamMemberList.list)
  return &list_;
}
inline const ::sg::PersonTeamMember& PersonTeamMemberList::list(int index) const {
  // @@protoc_insertion_point(field_get:sg.PersonTeamMemberList.list)
  return list_.Get(index);
}
inline ::sg::PersonTeamMember* PersonTeamMemberList::add_list() {
  // @@protoc_insertion_point(field_add:sg.PersonTeamMemberList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::PersonTeamMember >&
PersonTeamMemberList::list() const {
  // @@protoc_insertion_point(field_list:sg.PersonTeamMemberList.list)
  return list_;
}

// -------------------------------------------------------------------

// PersonData

// required uint64 uuid = 1;
inline bool PersonData::has_uuid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PersonData::set_has_uuid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PersonData::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PersonData::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 PersonData::uuid() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.uuid)
  return uuid_;
}
inline void PersonData::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.uuid)
}

// required bytes role_nick = 2;
inline bool PersonData::has_role_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersonData::set_has_role_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersonData::clear_has_role_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersonData::clear_role_nick() {
  role_nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_role_nick();
}
inline const ::std::string& PersonData::role_nick() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.role_nick)
  return role_nick_.Get();
}
inline void PersonData::set_role_nick(const ::std::string& value) {
  set_has_role_nick();
  role_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.PersonData.role_nick)
}
#if LANG_CXX11
inline void PersonData::set_role_nick(::std::string&& value) {
  set_has_role_nick();
  role_nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.PersonData.role_nick)
}
#endif
inline void PersonData::set_role_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_role_nick();
  role_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.PersonData.role_nick)
}
inline void PersonData::set_role_nick(const void* value,
    size_t size) {
  set_has_role_nick();
  role_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.PersonData.role_nick)
}
inline ::std::string* PersonData::mutable_role_nick() {
  set_has_role_nick();
  // @@protoc_insertion_point(field_mutable:sg.PersonData.role_nick)
  return role_nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PersonData::release_role_nick() {
  // @@protoc_insertion_point(field_release:sg.PersonData.role_nick)
  if (!has_role_nick()) {
    return NULL;
  }
  clear_has_role_nick();
  return role_nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PersonData::set_allocated_role_nick(::std::string* role_nick) {
  if (role_nick != NULL) {
    set_has_role_nick();
  } else {
    clear_has_role_nick();
  }
  role_nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.PersonData.role_nick)
}
inline ::std::string* PersonData::unsafe_arena_release_role_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PersonData.role_nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_role_nick();
  return role_nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PersonData::unsafe_arena_set_allocated_role_nick(
    ::std::string* role_nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (role_nick != NULL) {
    set_has_role_nick();
  } else {
    clear_has_role_nick();
  }
  role_nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      role_nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PersonData.role_nick)
}

// required int32 role_level = 3;
inline bool PersonData::has_role_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PersonData::set_has_role_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PersonData::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PersonData::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 PersonData::role_level() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.role_level)
  return role_level_;
}
inline void PersonData::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.role_level)
}

// required int32 role_exp = 4;
inline bool PersonData::has_role_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PersonData::set_has_role_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PersonData::clear_has_role_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PersonData::clear_role_exp() {
  role_exp_ = 0;
  clear_has_role_exp();
}
inline ::google::protobuf::int32 PersonData::role_exp() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.role_exp)
  return role_exp_;
}
inline void PersonData::set_role_exp(::google::protobuf::int32 value) {
  set_has_role_exp();
  role_exp_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.role_exp)
}

// required int32 role_rank = 5;
inline bool PersonData::has_role_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PersonData::set_has_role_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PersonData::clear_has_role_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PersonData::clear_role_rank() {
  role_rank_ = 0;
  clear_has_role_rank();
}
inline ::google::protobuf::int32 PersonData::role_rank() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.role_rank)
  return role_rank_;
}
inline void PersonData::set_role_rank(::google::protobuf::int32 value) {
  set_has_role_rank();
  role_rank_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.role_rank)
}

// optional int32 portrait = 11;
inline bool PersonData::has_portrait() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PersonData::set_has_portrait() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PersonData::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PersonData::clear_portrait() {
  portrait_ = 0;
  clear_has_portrait();
}
inline ::google::protobuf::int32 PersonData::portrait() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.portrait)
  return portrait_;
}
inline void PersonData::set_portrait(::google::protobuf::int32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.portrait)
}

// optional int32 portrait_frame = 12;
inline bool PersonData::has_portrait_frame() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PersonData::set_has_portrait_frame() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PersonData::clear_has_portrait_frame() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PersonData::clear_portrait_frame() {
  portrait_frame_ = 0;
  clear_has_portrait_frame();
}
inline ::google::protobuf::int32 PersonData::portrait_frame() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.portrait_frame)
  return portrait_frame_;
}
inline void PersonData::set_portrait_frame(::google::protobuf::int32 value) {
  set_has_portrait_frame();
  portrait_frame_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.portrait_frame)
}

// optional bytes signature = 13;
inline bool PersonData::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersonData::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersonData::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersonData::clear_signature() {
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_signature();
}
inline const ::std::string& PersonData::signature() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.signature)
  return signature_.Get();
}
inline void PersonData::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.PersonData.signature)
}
#if LANG_CXX11
inline void PersonData::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.PersonData.signature)
}
#endif
inline void PersonData::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.PersonData.signature)
}
inline void PersonData::set_signature(const void* value,
    size_t size) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.PersonData.signature)
}
inline ::std::string* PersonData::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:sg.PersonData.signature)
  return signature_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PersonData::release_signature() {
  // @@protoc_insertion_point(field_release:sg.PersonData.signature)
  if (!has_signature()) {
    return NULL;
  }
  clear_has_signature();
  return signature_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PersonData::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.PersonData.signature)
}
inline ::std::string* PersonData::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PersonData.signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_signature();
  return signature_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PersonData::unsafe_arena_set_allocated_signature(
    ::std::string* signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PersonData.signature)
}

// optional int32 guildid = 14;
inline bool PersonData::has_guildid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PersonData::set_has_guildid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PersonData::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PersonData::clear_guildid() {
  guildid_ = 0;
  clear_has_guildid();
}
inline ::google::protobuf::int32 PersonData::guildid() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.guildid)
  return guildid_;
}
inline void PersonData::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.guildid)
}

// optional bytes guild_name = 15;
inline bool PersonData::has_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersonData::set_has_guild_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersonData::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersonData::clear_guild_name() {
  guild_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_guild_name();
}
inline const ::std::string& PersonData::guild_name() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.guild_name)
  return guild_name_.Get();
}
inline void PersonData::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.PersonData.guild_name)
}
#if LANG_CXX11
inline void PersonData::set_guild_name(::std::string&& value) {
  set_has_guild_name();
  guild_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.PersonData.guild_name)
}
#endif
inline void PersonData::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_name();
  guild_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.PersonData.guild_name)
}
inline void PersonData::set_guild_name(const void* value,
    size_t size) {
  set_has_guild_name();
  guild_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.PersonData.guild_name)
}
inline ::std::string* PersonData::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:sg.PersonData.guild_name)
  return guild_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PersonData::release_guild_name() {
  // @@protoc_insertion_point(field_release:sg.PersonData.guild_name)
  if (!has_guild_name()) {
    return NULL;
  }
  clear_has_guild_name();
  return guild_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PersonData::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.PersonData.guild_name)
}
inline ::std::string* PersonData::unsafe_arena_release_guild_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PersonData.guild_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_guild_name();
  return guild_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PersonData::unsafe_arena_set_allocated_guild_name(
    ::std::string* guild_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      guild_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PersonData.guild_name)
}

// optional bytes guild_badge = 16;
inline bool PersonData::has_guild_badge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PersonData::set_has_guild_badge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PersonData::clear_has_guild_badge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PersonData::clear_guild_badge() {
  guild_badge_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_guild_badge();
}
inline const ::std::string& PersonData::guild_badge() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.guild_badge)
  return guild_badge_.Get();
}
inline void PersonData::set_guild_badge(const ::std::string& value) {
  set_has_guild_badge();
  guild_badge_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.PersonData.guild_badge)
}
#if LANG_CXX11
inline void PersonData::set_guild_badge(::std::string&& value) {
  set_has_guild_badge();
  guild_badge_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.PersonData.guild_badge)
}
#endif
inline void PersonData::set_guild_badge(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_badge();
  guild_badge_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.PersonData.guild_badge)
}
inline void PersonData::set_guild_badge(const void* value,
    size_t size) {
  set_has_guild_badge();
  guild_badge_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.PersonData.guild_badge)
}
inline ::std::string* PersonData::mutable_guild_badge() {
  set_has_guild_badge();
  // @@protoc_insertion_point(field_mutable:sg.PersonData.guild_badge)
  return guild_badge_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PersonData::release_guild_badge() {
  // @@protoc_insertion_point(field_release:sg.PersonData.guild_badge)
  if (!has_guild_badge()) {
    return NULL;
  }
  clear_has_guild_badge();
  return guild_badge_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PersonData::set_allocated_guild_badge(::std::string* guild_badge) {
  if (guild_badge != NULL) {
    set_has_guild_badge();
  } else {
    clear_has_guild_badge();
  }
  guild_badge_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_badge,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.PersonData.guild_badge)
}
inline ::std::string* PersonData::unsafe_arena_release_guild_badge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PersonData.guild_badge)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_guild_badge();
  return guild_badge_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PersonData::unsafe_arena_set_allocated_guild_badge(
    ::std::string* guild_badge) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (guild_badge != NULL) {
    set_has_guild_badge();
  } else {
    clear_has_guild_badge();
  }
  guild_badge_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      guild_badge, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PersonData.guild_badge)
}

// optional int32 guild_title = 17;
inline bool PersonData::has_guild_title() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PersonData::set_has_guild_title() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PersonData::clear_has_guild_title() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PersonData::clear_guild_title() {
  guild_title_ = 0;
  clear_has_guild_title();
}
inline ::google::protobuf::int32 PersonData::guild_title() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.guild_title)
  return guild_title_;
}
inline void PersonData::set_guild_title(::google::protobuf::int32 value) {
  set_has_guild_title();
  guild_title_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.guild_title)
}

// required int32 force = 18;
inline bool PersonData::has_force() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PersonData::set_has_force() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PersonData::clear_has_force() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PersonData::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 PersonData::force() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.force)
  return force_;
}
inline void PersonData::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.force)
}

// required bool is_online = 19;
inline bool PersonData::has_is_online() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PersonData::set_has_is_online() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PersonData::clear_has_is_online() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PersonData::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool PersonData::is_online() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.is_online)
  return is_online_;
}
inline void PersonData::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.is_online)
}

// optional sfixed64 logintime = 21;
inline bool PersonData::has_logintime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PersonData::set_has_logintime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PersonData::clear_has_logintime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PersonData::clear_logintime() {
  logintime_ = GOOGLE_LONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::int64 PersonData::logintime() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.logintime)
  return logintime_;
}
inline void PersonData::set_logintime(::google::protobuf::int64 value) {
  set_has_logintime();
  logintime_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.logintime)
}

// optional bool can_challenge = 31;
inline bool PersonData::has_can_challenge() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PersonData::set_has_can_challenge() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PersonData::clear_has_can_challenge() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PersonData::clear_can_challenge() {
  can_challenge_ = false;
  clear_has_can_challenge();
}
inline bool PersonData::can_challenge() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.can_challenge)
  return can_challenge_;
}
inline void PersonData::set_can_challenge(bool value) {
  set_has_can_challenge();
  can_challenge_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.can_challenge)
}

// optional int32 challenge_score = 32;
inline bool PersonData::has_challenge_score() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PersonData::set_has_challenge_score() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PersonData::clear_has_challenge_score() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PersonData::clear_challenge_score() {
  challenge_score_ = 0;
  clear_has_challenge_score();
}
inline ::google::protobuf::int32 PersonData::challenge_score() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.challenge_score)
  return challenge_score_;
}
inline void PersonData::set_challenge_score(::google::protobuf::int32 value) {
  set_has_challenge_score();
  challenge_score_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.challenge_score)
}

// optional .sg.FRIEND_GIFT_STATE gift_state = 41;
inline bool PersonData::has_gift_state() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PersonData::set_has_gift_state() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PersonData::clear_has_gift_state() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PersonData::clear_gift_state() {
  gift_state_ = 0;
  clear_has_gift_state();
}
inline ::sg::FRIEND_GIFT_STATE PersonData::gift_state() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.gift_state)
  return static_cast< ::sg::FRIEND_GIFT_STATE >(gift_state_);
}
inline void PersonData::set_gift_state(::sg::FRIEND_GIFT_STATE value) {
  assert(::sg::FRIEND_GIFT_STATE_IsValid(value));
  set_has_gift_state();
  gift_state_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.gift_state)
}

// optional uint64 gift_item_typeid = 42;
inline bool PersonData::has_gift_item_typeid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PersonData::set_has_gift_item_typeid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PersonData::clear_has_gift_item_typeid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PersonData::clear_gift_item_typeid() {
  gift_item_typeid_ = GOOGLE_ULONGLONG(0);
  clear_has_gift_item_typeid();
}
inline ::google::protobuf::uint64 PersonData::gift_item_typeid() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.gift_item_typeid)
  return gift_item_typeid_;
}
inline void PersonData::set_gift_item_typeid(::google::protobuf::uint64 value) {
  set_has_gift_item_typeid();
  gift_item_typeid_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.gift_item_typeid)
}

// optional int32 gift_item_num = 43;
inline bool PersonData::has_gift_item_num() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PersonData::set_has_gift_item_num() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PersonData::clear_has_gift_item_num() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PersonData::clear_gift_item_num() {
  gift_item_num_ = 0;
  clear_has_gift_item_num();
}
inline ::google::protobuf::int32 PersonData::gift_item_num() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.gift_item_num)
  return gift_item_num_;
}
inline void PersonData::set_gift_item_num(::google::protobuf::int32 value) {
  set_has_gift_item_num();
  gift_item_num_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.gift_item_num)
}

// optional bool can_give_gift = 44;
inline bool PersonData::has_can_give_gift() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PersonData::set_has_can_give_gift() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PersonData::clear_has_can_give_gift() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PersonData::clear_can_give_gift() {
  can_give_gift_ = false;
  clear_has_can_give_gift();
}
inline bool PersonData::can_give_gift() const {
  // @@protoc_insertion_point(field_get:sg.PersonData.can_give_gift)
  return can_give_gift_;
}
inline void PersonData::set_can_give_gift(bool value) {
  set_has_can_give_gift();
  can_give_gift_ = value;
  // @@protoc_insertion_point(field_set:sg.PersonData.can_give_gift)
}

// optional .sg.PersonTeamMemberList team = 51;
inline bool PersonData::has_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PersonData::set_has_team() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PersonData::clear_has_team() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PersonData::clear_team() {
  if (team_ != NULL) team_->Clear();
  clear_has_team();
}
inline const ::sg::PersonTeamMemberList& PersonData::_internal_team() const {
  return *team_;
}
inline const ::sg::PersonTeamMemberList& PersonData::team() const {
  const ::sg::PersonTeamMemberList* p = team_;
  // @@protoc_insertion_point(field_get:sg.PersonData.team)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PersonTeamMemberList*>(
      &::sg::_PersonTeamMemberList_default_instance_);
}
inline ::sg::PersonTeamMemberList* PersonData::release_team() {
  // @@protoc_insertion_point(field_release:sg.PersonData.team)
  clear_has_team();
  ::sg::PersonTeamMemberList* temp = team_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  team_ = NULL;
  return temp;
}
inline ::sg::PersonTeamMemberList* PersonData::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PersonData.team)
  clear_has_team();
  ::sg::PersonTeamMemberList* temp = team_;
  team_ = NULL;
  return temp;
}
inline ::sg::PersonTeamMemberList* PersonData::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PersonTeamMemberList>(GetArenaNoVirtual());
    team_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PersonData.team)
  return team_;
}
inline void PersonData::set_allocated_team(::sg::PersonTeamMemberList* team) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete team_;
  }
  if (team) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(team);
    if (message_arena != submessage_arena) {
      team = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    set_has_team();
  } else {
    clear_has_team();
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:sg.PersonData.team)
}

// -------------------------------------------------------------------

// PersonDataList

// repeated .sg.PersonData list = 1;
inline int PersonDataList::list_size() const {
  return list_.size();
}
inline void PersonDataList::clear_list() {
  list_.Clear();
}
inline ::sg::PersonData* PersonDataList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.PersonDataList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::PersonData >*
PersonDataList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.PersonDataList.list)
  return &list_;
}
inline const ::sg::PersonData& PersonDataList::list(int index) const {
  // @@protoc_insertion_point(field_get:sg.PersonDataList.list)
  return list_.Get(index);
}
inline ::sg::PersonData* PersonDataList::add_list() {
  // @@protoc_insertion_point(field_add:sg.PersonDataList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::PersonData >&
PersonDataList::list() const {
  // @@protoc_insertion_point(field_list:sg.PersonDataList.list)
  return list_;
}

// -------------------------------------------------------------------

// QueryPersonResult

// required .sg.QUERY_PERSON_STATE state = 1;
inline bool QueryPersonResult::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryPersonResult::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryPersonResult::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryPersonResult::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::sg::QUERY_PERSON_STATE QueryPersonResult::state() const {
  // @@protoc_insertion_point(field_get:sg.QueryPersonResult.state)
  return static_cast< ::sg::QUERY_PERSON_STATE >(state_);
}
inline void QueryPersonResult::set_state(::sg::QUERY_PERSON_STATE value) {
  assert(::sg::QUERY_PERSON_STATE_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.QueryPersonResult.state)
}

// optional uint64 param_uuid = 2;
inline bool QueryPersonResult::has_param_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryPersonResult::set_has_param_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryPersonResult::clear_has_param_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryPersonResult::clear_param_uuid() {
  param_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_param_uuid();
}
inline ::google::protobuf::uint64 QueryPersonResult::param_uuid() const {
  // @@protoc_insertion_point(field_get:sg.QueryPersonResult.param_uuid)
  return param_uuid_;
}
inline void QueryPersonResult::set_param_uuid(::google::protobuf::uint64 value) {
  set_has_param_uuid();
  param_uuid_ = value;
  // @@protoc_insertion_point(field_set:sg.QueryPersonResult.param_uuid)
}

// optional .sg.PersonData person = 3;
inline bool QueryPersonResult::has_person() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPersonResult::set_has_person() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPersonResult::clear_has_person() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPersonResult::clear_person() {
  if (person_ != NULL) person_->Clear();
  clear_has_person();
}
inline const ::sg::PersonData& QueryPersonResult::_internal_person() const {
  return *person_;
}
inline const ::sg::PersonData& QueryPersonResult::person() const {
  const ::sg::PersonData* p = person_;
  // @@protoc_insertion_point(field_get:sg.QueryPersonResult.person)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PersonData*>(
      &::sg::_PersonData_default_instance_);
}
inline ::sg::PersonData* QueryPersonResult::release_person() {
  // @@protoc_insertion_point(field_release:sg.QueryPersonResult.person)
  clear_has_person();
  ::sg::PersonData* temp = person_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  person_ = NULL;
  return temp;
}
inline ::sg::PersonData* QueryPersonResult::unsafe_arena_release_person() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.QueryPersonResult.person)
  clear_has_person();
  ::sg::PersonData* temp = person_;
  person_ = NULL;
  return temp;
}
inline ::sg::PersonData* QueryPersonResult::mutable_person() {
  set_has_person();
  if (person_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PersonData>(GetArenaNoVirtual());
    person_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.QueryPersonResult.person)
  return person_;
}
inline void QueryPersonResult::set_allocated_person(::sg::PersonData* person) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete person_;
  }
  if (person) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(person);
    if (message_arena != submessage_arena) {
      person = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, person, submessage_arena);
    }
    set_has_person();
  } else {
    clear_has_person();
  }
  person_ = person;
  // @@protoc_insertion_point(field_set_allocated:sg.QueryPersonResult.person)
}

// -------------------------------------------------------------------

// FriendService_FriendRequest

// required .sg.FriendService.FRIEND_COMMAND cmd = 1;
inline bool FriendService_FriendRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendService_FriendRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendService_FriendRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendService_FriendRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::FriendService_FRIEND_COMMAND FriendService_FriendRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendRequest.cmd)
  return static_cast< ::sg::FriendService_FRIEND_COMMAND >(cmd_);
}
inline void FriendService_FriendRequest::set_cmd(::sg::FriendService_FRIEND_COMMAND value) {
  assert(::sg::FriendService_FRIEND_COMMAND_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.FriendService.FriendRequest.cmd)
}

// optional uint64 person_uuid = 2;
inline bool FriendService_FriendRequest::has_person_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendService_FriendRequest::set_has_person_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendService_FriendRequest::clear_has_person_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendService_FriendRequest::clear_person_uuid() {
  person_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_person_uuid();
}
inline ::google::protobuf::uint64 FriendService_FriendRequest::person_uuid() const {
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendRequest.person_uuid)
  return person_uuid_;
}
inline void FriendService_FriendRequest::set_person_uuid(::google::protobuf::uint64 value) {
  set_has_person_uuid();
  person_uuid_ = value;
  // @@protoc_insertion_point(field_set:sg.FriendService.FriendRequest.person_uuid)
}

// -------------------------------------------------------------------

// FriendService_FriendResponse

// required int32 result = 1;
inline bool FriendService_FriendResponse::has_result() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendService_FriendResponse::set_has_result() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendService_FriendResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendService_FriendResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendService_FriendResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.result)
  return result_;
}
inline void FriendService_FriendResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.FriendService.FriendResponse.result)
}

// optional .sg.PersonDataList friend_list = 2;
inline bool FriendService_FriendResponse::has_friend_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendService_FriendResponse::set_has_friend_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendService_FriendResponse::clear_has_friend_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendService_FriendResponse::clear_friend_list() {
  if (friend_list_ != NULL) friend_list_->Clear();
  clear_has_friend_list();
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::_internal_friend_list() const {
  return *friend_list_;
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::friend_list() const {
  const ::sg::PersonDataList* p = friend_list_;
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.friend_list)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PersonDataList*>(
      &::sg::_PersonDataList_default_instance_);
}
inline ::sg::PersonDataList* FriendService_FriendResponse::release_friend_list() {
  // @@protoc_insertion_point(field_release:sg.FriendService.FriendResponse.friend_list)
  clear_has_friend_list();
  ::sg::PersonDataList* temp = friend_list_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  friend_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::unsafe_arena_release_friend_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FriendService.FriendResponse.friend_list)
  clear_has_friend_list();
  ::sg::PersonDataList* temp = friend_list_;
  friend_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::mutable_friend_list() {
  set_has_friend_list();
  if (friend_list_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PersonDataList>(GetArenaNoVirtual());
    friend_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FriendService.FriendResponse.friend_list)
  return friend_list_;
}
inline void FriendService_FriendResponse::set_allocated_friend_list(::sg::PersonDataList* friend_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete friend_list_;
  }
  if (friend_list) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(friend_list);
    if (message_arena != submessage_arena) {
      friend_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, friend_list, submessage_arena);
    }
    set_has_friend_list();
  } else {
    clear_has_friend_list();
  }
  friend_list_ = friend_list;
  // @@protoc_insertion_point(field_set_allocated:sg.FriendService.FriendResponse.friend_list)
}

// optional .sg.PersonDataList candidate_list = 3;
inline bool FriendService_FriendResponse::has_candidate_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendService_FriendResponse::set_has_candidate_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendService_FriendResponse::clear_has_candidate_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendService_FriendResponse::clear_candidate_list() {
  if (candidate_list_ != NULL) candidate_list_->Clear();
  clear_has_candidate_list();
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::_internal_candidate_list() const {
  return *candidate_list_;
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::candidate_list() const {
  const ::sg::PersonDataList* p = candidate_list_;
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.candidate_list)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PersonDataList*>(
      &::sg::_PersonDataList_default_instance_);
}
inline ::sg::PersonDataList* FriendService_FriendResponse::release_candidate_list() {
  // @@protoc_insertion_point(field_release:sg.FriendService.FriendResponse.candidate_list)
  clear_has_candidate_list();
  ::sg::PersonDataList* temp = candidate_list_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  candidate_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::unsafe_arena_release_candidate_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FriendService.FriendResponse.candidate_list)
  clear_has_candidate_list();
  ::sg::PersonDataList* temp = candidate_list_;
  candidate_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::mutable_candidate_list() {
  set_has_candidate_list();
  if (candidate_list_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PersonDataList>(GetArenaNoVirtual());
    candidate_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FriendService.FriendResponse.candidate_list)
  return candidate_list_;
}
inline void FriendService_FriendResponse::set_allocated_candidate_list(::sg::PersonDataList* candidate_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete candidate_list_;
  }
  if (candidate_list) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(candidate_list);
    if (message_arena != submessage_arena) {
      candidate_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, candidate_list, submessage_arena);
    }
    set_has_candidate_list();
  } else {
    clear_has_candidate_list();
  }
  candidate_list_ = candidate_list;
  // @@protoc_insertion_point(field_set_allocated:sg.FriendService.FriendResponse.candidate_list)
}

// optional .sg.PersonDataList adding_list = 4;
inline bool FriendService_FriendResponse::has_adding_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendService_FriendResponse::set_has_adding_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendService_FriendResponse::clear_has_adding_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendService_FriendResponse::clear_adding_list() {
  if (adding_list_ != NULL) adding_list_->Clear();
  clear_has_adding_list();
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::_internal_adding_list() const {
  return *adding_list_;
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::adding_list() const {
  const ::sg::PersonDataList* p = adding_list_;
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.adding_list)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PersonDataList*>(
      &::sg::_PersonDataList_default_instance_);
}
inline ::sg::PersonDataList* FriendService_FriendResponse::release_adding_list() {
  // @@protoc_insertion_point(field_release:sg.FriendService.FriendResponse.adding_list)
  clear_has_adding_list();
  ::sg::PersonDataList* temp = adding_list_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  adding_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::unsafe_arena_release_adding_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FriendService.FriendResponse.adding_list)
  clear_has_adding_list();
  ::sg::PersonDataList* temp = adding_list_;
  adding_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::mutable_adding_list() {
  set_has_adding_list();
  if (adding_list_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PersonDataList>(GetArenaNoVirtual());
    adding_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FriendService.FriendResponse.adding_list)
  return adding_list_;
}
inline void FriendService_FriendResponse::set_allocated_adding_list(::sg::PersonDataList* adding_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete adding_list_;
  }
  if (adding_list) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(adding_list);
    if (message_arena != submessage_arena) {
      adding_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, adding_list, submessage_arena);
    }
    set_has_adding_list();
  } else {
    clear_has_adding_list();
  }
  adding_list_ = adding_list;
  // @@protoc_insertion_point(field_set_allocated:sg.FriendService.FriendResponse.adding_list)
}

// optional .sg.PersonDataList confirming_list = 5;
inline bool FriendService_FriendResponse::has_confirming_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendService_FriendResponse::set_has_confirming_list() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendService_FriendResponse::clear_has_confirming_list() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendService_FriendResponse::clear_confirming_list() {
  if (confirming_list_ != NULL) confirming_list_->Clear();
  clear_has_confirming_list();
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::_internal_confirming_list() const {
  return *confirming_list_;
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::confirming_list() const {
  const ::sg::PersonDataList* p = confirming_list_;
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.confirming_list)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PersonDataList*>(
      &::sg::_PersonDataList_default_instance_);
}
inline ::sg::PersonDataList* FriendService_FriendResponse::release_confirming_list() {
  // @@protoc_insertion_point(field_release:sg.FriendService.FriendResponse.confirming_list)
  clear_has_confirming_list();
  ::sg::PersonDataList* temp = confirming_list_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confirming_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::unsafe_arena_release_confirming_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FriendService.FriendResponse.confirming_list)
  clear_has_confirming_list();
  ::sg::PersonDataList* temp = confirming_list_;
  confirming_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::mutable_confirming_list() {
  set_has_confirming_list();
  if (confirming_list_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PersonDataList>(GetArenaNoVirtual());
    confirming_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FriendService.FriendResponse.confirming_list)
  return confirming_list_;
}
inline void FriendService_FriendResponse::set_allocated_confirming_list(::sg::PersonDataList* confirming_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete confirming_list_;
  }
  if (confirming_list) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(confirming_list);
    if (message_arena != submessage_arena) {
      confirming_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confirming_list, submessage_arena);
    }
    set_has_confirming_list();
  } else {
    clear_has_confirming_list();
  }
  confirming_list_ = confirming_list;
  // @@protoc_insertion_point(field_set_allocated:sg.FriendService.FriendResponse.confirming_list)
}

// optional int32 challenge_num = 6;
inline bool FriendService_FriendResponse::has_challenge_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendService_FriendResponse::set_has_challenge_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendService_FriendResponse::clear_has_challenge_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendService_FriendResponse::clear_challenge_num() {
  challenge_num_ = 0;
  clear_has_challenge_num();
}
inline ::google::protobuf::int32 FriendService_FriendResponse::challenge_num() const {
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.challenge_num)
  return challenge_num_;
}
inline void FriendService_FriendResponse::set_challenge_num(::google::protobuf::int32 value) {
  set_has_challenge_num();
  challenge_num_ = value;
  // @@protoc_insertion_point(field_set:sg.FriendService.FriendResponse.challenge_num)
}

// optional int32 challenge_num_max = 7;
inline bool FriendService_FriendResponse::has_challenge_num_max() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FriendService_FriendResponse::set_has_challenge_num_max() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FriendService_FriendResponse::clear_has_challenge_num_max() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FriendService_FriendResponse::clear_challenge_num_max() {
  challenge_num_max_ = 0;
  clear_has_challenge_num_max();
}
inline ::google::protobuf::int32 FriendService_FriendResponse::challenge_num_max() const {
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.challenge_num_max)
  return challenge_num_max_;
}
inline void FriendService_FriendResponse::set_challenge_num_max(::google::protobuf::int32 value) {
  set_has_challenge_num_max();
  challenge_num_max_ = value;
  // @@protoc_insertion_point(field_set:sg.FriendService.FriendResponse.challenge_num_max)
}

// optional .sg.PersonDataList ban_list = 8;
inline bool FriendService_FriendResponse::has_ban_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendService_FriendResponse::set_has_ban_list() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendService_FriendResponse::clear_has_ban_list() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendService_FriendResponse::clear_ban_list() {
  if (ban_list_ != NULL) ban_list_->Clear();
  clear_has_ban_list();
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::_internal_ban_list() const {
  return *ban_list_;
}
inline const ::sg::PersonDataList& FriendService_FriendResponse::ban_list() const {
  const ::sg::PersonDataList* p = ban_list_;
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.ban_list)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PersonDataList*>(
      &::sg::_PersonDataList_default_instance_);
}
inline ::sg::PersonDataList* FriendService_FriendResponse::release_ban_list() {
  // @@protoc_insertion_point(field_release:sg.FriendService.FriendResponse.ban_list)
  clear_has_ban_list();
  ::sg::PersonDataList* temp = ban_list_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  ban_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::unsafe_arena_release_ban_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FriendService.FriendResponse.ban_list)
  clear_has_ban_list();
  ::sg::PersonDataList* temp = ban_list_;
  ban_list_ = NULL;
  return temp;
}
inline ::sg::PersonDataList* FriendService_FriendResponse::mutable_ban_list() {
  set_has_ban_list();
  if (ban_list_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PersonDataList>(GetArenaNoVirtual());
    ban_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FriendService.FriendResponse.ban_list)
  return ban_list_;
}
inline void FriendService_FriendResponse::set_allocated_ban_list(::sg::PersonDataList* ban_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ban_list_;
  }
  if (ban_list) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(ban_list);
    if (message_arena != submessage_arena) {
      ban_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ban_list, submessage_arena);
    }
    set_has_ban_list();
  } else {
    clear_has_ban_list();
  }
  ban_list_ = ban_list;
  // @@protoc_insertion_point(field_set_allocated:sg.FriendService.FriendResponse.ban_list)
}

// optional .sg.QueryPersonResult qurey_person_result = 11;
inline bool FriendService_FriendResponse::has_qurey_person_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendService_FriendResponse::set_has_qurey_person_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendService_FriendResponse::clear_has_qurey_person_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendService_FriendResponse::clear_qurey_person_result() {
  if (qurey_person_result_ != NULL) qurey_person_result_->Clear();
  clear_has_qurey_person_result();
}
inline const ::sg::QueryPersonResult& FriendService_FriendResponse::_internal_qurey_person_result() const {
  return *qurey_person_result_;
}
inline const ::sg::QueryPersonResult& FriendService_FriendResponse::qurey_person_result() const {
  const ::sg::QueryPersonResult* p = qurey_person_result_;
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.qurey_person_result)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::QueryPersonResult*>(
      &::sg::_QueryPersonResult_default_instance_);
}
inline ::sg::QueryPersonResult* FriendService_FriendResponse::release_qurey_person_result() {
  // @@protoc_insertion_point(field_release:sg.FriendService.FriendResponse.qurey_person_result)
  clear_has_qurey_person_result();
  ::sg::QueryPersonResult* temp = qurey_person_result_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  qurey_person_result_ = NULL;
  return temp;
}
inline ::sg::QueryPersonResult* FriendService_FriendResponse::unsafe_arena_release_qurey_person_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FriendService.FriendResponse.qurey_person_result)
  clear_has_qurey_person_result();
  ::sg::QueryPersonResult* temp = qurey_person_result_;
  qurey_person_result_ = NULL;
  return temp;
}
inline ::sg::QueryPersonResult* FriendService_FriendResponse::mutable_qurey_person_result() {
  set_has_qurey_person_result();
  if (qurey_person_result_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::QueryPersonResult>(GetArenaNoVirtual());
    qurey_person_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FriendService.FriendResponse.qurey_person_result)
  return qurey_person_result_;
}
inline void FriendService_FriendResponse::set_allocated_qurey_person_result(::sg::QueryPersonResult* qurey_person_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete qurey_person_result_;
  }
  if (qurey_person_result) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(qurey_person_result);
    if (message_arena != submessage_arena) {
      qurey_person_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, qurey_person_result, submessage_arena);
    }
    set_has_qurey_person_result();
  } else {
    clear_has_qurey_person_result();
  }
  qurey_person_result_ = qurey_person_result;
  // @@protoc_insertion_point(field_set_allocated:sg.FriendService.FriendResponse.qurey_person_result)
}

// optional .sg.Reward gift_accepted = 21;
inline bool FriendService_FriendResponse::has_gift_accepted() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendService_FriendResponse::set_has_gift_accepted() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendService_FriendResponse::clear_has_gift_accepted() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::sg::Reward& FriendService_FriendResponse::_internal_gift_accepted() const {
  return *gift_accepted_;
}
inline const ::sg::Reward& FriendService_FriendResponse::gift_accepted() const {
  const ::sg::Reward* p = gift_accepted_;
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.gift_accepted)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* FriendService_FriendResponse::release_gift_accepted() {
  // @@protoc_insertion_point(field_release:sg.FriendService.FriendResponse.gift_accepted)
  clear_has_gift_accepted();
  ::sg::Reward* temp = gift_accepted_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  gift_accepted_ = NULL;
  return temp;
}
inline ::sg::Reward* FriendService_FriendResponse::unsafe_arena_release_gift_accepted() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FriendService.FriendResponse.gift_accepted)
  clear_has_gift_accepted();
  ::sg::Reward* temp = gift_accepted_;
  gift_accepted_ = NULL;
  return temp;
}
inline ::sg::Reward* FriendService_FriendResponse::mutable_gift_accepted() {
  set_has_gift_accepted();
  if (gift_accepted_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    gift_accepted_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FriendService.FriendResponse.gift_accepted)
  return gift_accepted_;
}
inline void FriendService_FriendResponse::set_allocated_gift_accepted(::sg::Reward* gift_accepted) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gift_accepted_);
  }
  if (gift_accepted) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(gift_accepted)->GetArena();
    if (message_arena != submessage_arena) {
      gift_accepted = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gift_accepted, submessage_arena);
    }
    set_has_gift_accepted();
  } else {
    clear_has_gift_accepted();
  }
  gift_accepted_ = gift_accepted;
  // @@protoc_insertion_point(field_set_allocated:sg.FriendService.FriendResponse.gift_accepted)
}

// optional int32 gift_accept_num = 22;
inline bool FriendService_FriendResponse::has_gift_accept_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FriendService_FriendResponse::set_has_gift_accept_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FriendService_FriendResponse::clear_has_gift_accept_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FriendService_FriendResponse::clear_gift_accept_num() {
  gift_accept_num_ = 0;
  clear_has_gift_accept_num();
}
inline ::google::protobuf::int32 FriendService_FriendResponse::gift_accept_num() const {
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.gift_accept_num)
  return gift_accept_num_;
}
inline void FriendService_FriendResponse::set_gift_accept_num(::google::protobuf::int32 value) {
  set_has_gift_accept_num();
  gift_accept_num_ = value;
  // @@protoc_insertion_point(field_set:sg.FriendService.FriendResponse.gift_accept_num)
}

// optional int32 gift_accept_num_max = 23;
inline bool FriendService_FriendResponse::has_gift_accept_num_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendService_FriendResponse::set_has_gift_accept_num_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendService_FriendResponse::clear_has_gift_accept_num_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendService_FriendResponse::clear_gift_accept_num_max() {
  gift_accept_num_max_ = 0;
  clear_has_gift_accept_num_max();
}
inline ::google::protobuf::int32 FriendService_FriendResponse::gift_accept_num_max() const {
  // @@protoc_insertion_point(field_get:sg.FriendService.FriendResponse.gift_accept_num_max)
  return gift_accept_num_max_;
}
inline void FriendService_FriendResponse::set_gift_accept_num_max(::google::protobuf::int32 value) {
  set_has_gift_accept_num_max();
  gift_accept_num_max_ = value;
  // @@protoc_insertion_point(field_set:sg.FriendService.FriendResponse.gift_accept_num_max)
}

// -------------------------------------------------------------------

// FriendService

// optional .sg.FriendService.FriendRequest req = 1;
inline bool FriendService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::FriendService_FriendRequest& FriendService::_internal_req() const {
  return *req_;
}
inline const ::sg::FriendService_FriendRequest& FriendService::req() const {
  const ::sg::FriendService_FriendRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.FriendService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::FriendService_FriendRequest*>(
      &::sg::_FriendService_FriendRequest_default_instance_);
}
inline ::sg::FriendService_FriendRequest* FriendService::release_req() {
  // @@protoc_insertion_point(field_release:sg.FriendService.req)
  clear_has_req();
  ::sg::FriendService_FriendRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::FriendService_FriendRequest* FriendService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FriendService.req)
  clear_has_req();
  ::sg::FriendService_FriendRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::FriendService_FriendRequest* FriendService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::FriendService_FriendRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FriendService.req)
  return req_;
}
inline void FriendService::set_allocated_req(::sg::FriendService_FriendRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.FriendService.req)
}

// optional .sg.FriendService.FriendResponse resp = 2;
inline bool FriendService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::FriendService_FriendResponse& FriendService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::FriendService_FriendResponse& FriendService::resp() const {
  const ::sg::FriendService_FriendResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.FriendService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::FriendService_FriendResponse*>(
      &::sg::_FriendService_FriendResponse_default_instance_);
}
inline ::sg::FriendService_FriendResponse* FriendService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.FriendService.resp)
  clear_has_resp();
  ::sg::FriendService_FriendResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::FriendService_FriendResponse* FriendService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FriendService.resp)
  clear_has_resp();
  ::sg::FriendService_FriendResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::FriendService_FriendResponse* FriendService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::FriendService_FriendResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FriendService.resp)
  return resp_;
}
inline void FriendService::set_allocated_resp(::sg::FriendService_FriendResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.FriendService.resp)
}

// -------------------------------------------------------------------

// GameInviteReward

// required int32 id = 1;
inline bool GameInviteReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInviteReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInviteReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInviteReward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GameInviteReward::id() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteReward.id)
  return id_;
}
inline void GameInviteReward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteReward.id)
}

// required .sg.GAME_INVITE_REWARD_STATE reward_state = 2;
inline bool GameInviteReward::has_reward_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameInviteReward::set_has_reward_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameInviteReward::clear_has_reward_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameInviteReward::clear_reward_state() {
  reward_state_ = 1;
  clear_has_reward_state();
}
inline ::sg::GAME_INVITE_REWARD_STATE GameInviteReward::reward_state() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteReward.reward_state)
  return static_cast< ::sg::GAME_INVITE_REWARD_STATE >(reward_state_);
}
inline void GameInviteReward::set_reward_state(::sg::GAME_INVITE_REWARD_STATE value) {
  assert(::sg::GAME_INVITE_REWARD_STATE_IsValid(value));
  set_has_reward_state();
  reward_state_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteReward.reward_state)
}

// required int32 reward_reason = 3;
inline bool GameInviteReward::has_reward_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInviteReward::set_has_reward_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInviteReward::clear_has_reward_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInviteReward::clear_reward_reason() {
  reward_reason_ = 0;
  clear_has_reward_reason();
}
inline ::google::protobuf::int32 GameInviteReward::reward_reason() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteReward.reward_reason)
  return reward_reason_;
}
inline void GameInviteReward::set_reward_reason(::google::protobuf::int32 value) {
  set_has_reward_reason();
  reward_reason_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteReward.reward_reason)
}

// required int32 item_type = 11;
inline bool GameInviteReward::has_item_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameInviteReward::set_has_item_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameInviteReward::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameInviteReward::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
inline ::google::protobuf::int32 GameInviteReward::item_type() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteReward.item_type)
  return item_type_;
}
inline void GameInviteReward::set_item_type(::google::protobuf::int32 value) {
  set_has_item_type();
  item_type_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteReward.item_type)
}

// required uint64 item_typeid = 12;
inline bool GameInviteReward::has_item_typeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInviteReward::set_has_item_typeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInviteReward::clear_has_item_typeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInviteReward::clear_item_typeid() {
  item_typeid_ = GOOGLE_ULONGLONG(0);
  clear_has_item_typeid();
}
inline ::google::protobuf::uint64 GameInviteReward::item_typeid() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteReward.item_typeid)
  return item_typeid_;
}
inline void GameInviteReward::set_item_typeid(::google::protobuf::uint64 value) {
  set_has_item_typeid();
  item_typeid_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteReward.item_typeid)
}

// required int32 item_num = 13;
inline bool GameInviteReward::has_item_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameInviteReward::set_has_item_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameInviteReward::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameInviteReward::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 GameInviteReward::item_num() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteReward.item_num)
  return item_num_;
}
inline void GameInviteReward::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteReward.item_num)
}

// -------------------------------------------------------------------

// GameInviteRewardList

// repeated .sg.GameInviteReward list = 1;
inline int GameInviteRewardList::list_size() const {
  return list_.size();
}
inline void GameInviteRewardList::clear_list() {
  list_.Clear();
}
inline ::sg::GameInviteReward* GameInviteRewardList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.GameInviteRewardList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::GameInviteReward >*
GameInviteRewardList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.GameInviteRewardList.list)
  return &list_;
}
inline const ::sg::GameInviteReward& GameInviteRewardList::list(int index) const {
  // @@protoc_insertion_point(field_get:sg.GameInviteRewardList.list)
  return list_.Get(index);
}
inline ::sg::GameInviteReward* GameInviteRewardList::add_list() {
  // @@protoc_insertion_point(field_add:sg.GameInviteRewardList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::GameInviteReward >&
GameInviteRewardList::list() const {
  // @@protoc_insertion_point(field_list:sg.GameInviteRewardList.list)
  return list_;
}

// -------------------------------------------------------------------

// InputInviteCodeResult

// required .sg.QUERY_PERSON_STATE state = 1;
inline bool InputInviteCodeResult::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InputInviteCodeResult::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InputInviteCodeResult::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InputInviteCodeResult::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::sg::QUERY_PERSON_STATE InputInviteCodeResult::state() const {
  // @@protoc_insertion_point(field_get:sg.InputInviteCodeResult.state)
  return static_cast< ::sg::QUERY_PERSON_STATE >(state_);
}
inline void InputInviteCodeResult::set_state(::sg::QUERY_PERSON_STATE value) {
  assert(::sg::QUERY_PERSON_STATE_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.InputInviteCodeResult.state)
}

// optional uint64 param_uuid = 2;
inline bool InputInviteCodeResult::has_param_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InputInviteCodeResult::set_has_param_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InputInviteCodeResult::clear_has_param_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InputInviteCodeResult::clear_param_uuid() {
  param_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_param_uuid();
}
inline ::google::protobuf::uint64 InputInviteCodeResult::param_uuid() const {
  // @@protoc_insertion_point(field_get:sg.InputInviteCodeResult.param_uuid)
  return param_uuid_;
}
inline void InputInviteCodeResult::set_param_uuid(::google::protobuf::uint64 value) {
  set_has_param_uuid();
  param_uuid_ = value;
  // @@protoc_insertion_point(field_set:sg.InputInviteCodeResult.param_uuid)
}

// -------------------------------------------------------------------

// GameInviteAcceptReward

// optional int32 reward_id = 1;
inline bool GameInviteAcceptReward::has_reward_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInviteAcceptReward::set_has_reward_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInviteAcceptReward::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInviteAcceptReward::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 GameInviteAcceptReward::reward_id() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteAcceptReward.reward_id)
  return reward_id_;
}
inline void GameInviteAcceptReward::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteAcceptReward.reward_id)
}

// repeated .sg.Item out_accept_list = 2;
inline int GameInviteAcceptReward::out_accept_list_size() const {
  return out_accept_list_.size();
}
inline ::sg::Item* GameInviteAcceptReward::mutable_out_accept_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.GameInviteAcceptReward.out_accept_list)
  return out_accept_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Item >*
GameInviteAcceptReward::mutable_out_accept_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.GameInviteAcceptReward.out_accept_list)
  return &out_accept_list_;
}
inline const ::sg::Item& GameInviteAcceptReward::out_accept_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.GameInviteAcceptReward.out_accept_list)
  return out_accept_list_.Get(index);
}
inline ::sg::Item* GameInviteAcceptReward::add_out_accept_list() {
  // @@protoc_insertion_point(field_add:sg.GameInviteAcceptReward.out_accept_list)
  return out_accept_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Item >&
GameInviteAcceptReward::out_accept_list() const {
  // @@protoc_insertion_point(field_list:sg.GameInviteAcceptReward.out_accept_list)
  return out_accept_list_;
}

// -------------------------------------------------------------------

// GameInviteService_GameInviteRequest

// required .sg.GameInviteService.GAME_INVITE_COMMAND cmd = 1;
inline bool GameInviteService_GameInviteRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInviteService_GameInviteRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInviteService_GameInviteRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInviteService_GameInviteRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::GameInviteService_GAME_INVITE_COMMAND GameInviteService_GameInviteRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteRequest.cmd)
  return static_cast< ::sg::GameInviteService_GAME_INVITE_COMMAND >(cmd_);
}
inline void GameInviteService_GameInviteRequest::set_cmd(::sg::GameInviteService_GAME_INVITE_COMMAND value) {
  assert(::sg::GameInviteService_GAME_INVITE_COMMAND_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteService.GameInviteRequest.cmd)
}

// optional int64 invite_code = 2;
inline bool GameInviteService_GameInviteRequest::has_invite_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInviteService_GameInviteRequest::set_has_invite_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInviteService_GameInviteRequest::clear_has_invite_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInviteService_GameInviteRequest::clear_invite_code() {
  invite_code_ = GOOGLE_LONGLONG(0);
  clear_has_invite_code();
}
inline ::google::protobuf::int64 GameInviteService_GameInviteRequest::invite_code() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteRequest.invite_code)
  return invite_code_;
}
inline void GameInviteService_GameInviteRequest::set_invite_code(::google::protobuf::int64 value) {
  set_has_invite_code();
  invite_code_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteService.GameInviteRequest.invite_code)
}

// optional int64 reward_id = 3;
inline bool GameInviteService_GameInviteRequest::has_reward_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInviteService_GameInviteRequest::set_has_reward_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInviteService_GameInviteRequest::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInviteService_GameInviteRequest::clear_reward_id() {
  reward_id_ = GOOGLE_LONGLONG(0);
  clear_has_reward_id();
}
inline ::google::protobuf::int64 GameInviteService_GameInviteRequest::reward_id() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteRequest.reward_id)
  return reward_id_;
}
inline void GameInviteService_GameInviteRequest::set_reward_id(::google::protobuf::int64 value) {
  set_has_reward_id();
  reward_id_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteService.GameInviteRequest.reward_id)
}

// -------------------------------------------------------------------

// GameInviteService_GameInviteResponse

// required int32 result = 1;
inline bool GameInviteService_GameInviteResponse::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameInviteService_GameInviteResponse::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameInviteService_GameInviteResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameInviteService_GameInviteResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GameInviteService_GameInviteResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteResponse.result)
  return result_;
}
inline void GameInviteService_GameInviteResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteService.GameInviteResponse.result)
}

// optional uint64 who_invite_me = 2;
inline bool GameInviteService_GameInviteResponse::has_who_invite_me() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameInviteService_GameInviteResponse::set_has_who_invite_me() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameInviteService_GameInviteResponse::clear_has_who_invite_me() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameInviteService_GameInviteResponse::clear_who_invite_me() {
  who_invite_me_ = GOOGLE_ULONGLONG(0);
  clear_has_who_invite_me();
}
inline ::google::protobuf::uint64 GameInviteService_GameInviteResponse::who_invite_me() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteResponse.who_invite_me)
  return who_invite_me_;
}
inline void GameInviteService_GameInviteResponse::set_who_invite_me(::google::protobuf::uint64 value) {
  set_has_who_invite_me();
  who_invite_me_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteService.GameInviteResponse.who_invite_me)
}

// optional int32 invite_accept_num = 3;
inline bool GameInviteService_GameInviteResponse::has_invite_accept_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameInviteService_GameInviteResponse::set_has_invite_accept_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameInviteService_GameInviteResponse::clear_has_invite_accept_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameInviteService_GameInviteResponse::clear_invite_accept_num() {
  invite_accept_num_ = 0;
  clear_has_invite_accept_num();
}
inline ::google::protobuf::int32 GameInviteService_GameInviteResponse::invite_accept_num() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteResponse.invite_accept_num)
  return invite_accept_num_;
}
inline void GameInviteService_GameInviteResponse::set_invite_accept_num(::google::protobuf::int32 value) {
  set_has_invite_accept_num();
  invite_accept_num_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteService.GameInviteResponse.invite_accept_num)
}

// optional int32 invite_ok_num = 4;
inline bool GameInviteService_GameInviteResponse::has_invite_ok_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameInviteService_GameInviteResponse::set_has_invite_ok_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameInviteService_GameInviteResponse::clear_has_invite_ok_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameInviteService_GameInviteResponse::clear_invite_ok_num() {
  invite_ok_num_ = 0;
  clear_has_invite_ok_num();
}
inline ::google::protobuf::int32 GameInviteService_GameInviteResponse::invite_ok_num() const {
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteResponse.invite_ok_num)
  return invite_ok_num_;
}
inline void GameInviteService_GameInviteResponse::set_invite_ok_num(::google::protobuf::int32 value) {
  set_has_invite_ok_num();
  invite_ok_num_ = value;
  // @@protoc_insertion_point(field_set:sg.GameInviteService.GameInviteResponse.invite_ok_num)
}

// optional .sg.InputInviteCodeResult input_invite_code_result = 11;
inline bool GameInviteService_GameInviteResponse::has_input_invite_code_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInviteService_GameInviteResponse::set_has_input_invite_code_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInviteService_GameInviteResponse::clear_has_input_invite_code_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInviteService_GameInviteResponse::clear_input_invite_code_result() {
  if (input_invite_code_result_ != NULL) input_invite_code_result_->Clear();
  clear_has_input_invite_code_result();
}
inline const ::sg::InputInviteCodeResult& GameInviteService_GameInviteResponse::_internal_input_invite_code_result() const {
  return *input_invite_code_result_;
}
inline const ::sg::InputInviteCodeResult& GameInviteService_GameInviteResponse::input_invite_code_result() const {
  const ::sg::InputInviteCodeResult* p = input_invite_code_result_;
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteResponse.input_invite_code_result)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::InputInviteCodeResult*>(
      &::sg::_InputInviteCodeResult_default_instance_);
}
inline ::sg::InputInviteCodeResult* GameInviteService_GameInviteResponse::release_input_invite_code_result() {
  // @@protoc_insertion_point(field_release:sg.GameInviteService.GameInviteResponse.input_invite_code_result)
  clear_has_input_invite_code_result();
  ::sg::InputInviteCodeResult* temp = input_invite_code_result_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  input_invite_code_result_ = NULL;
  return temp;
}
inline ::sg::InputInviteCodeResult* GameInviteService_GameInviteResponse::unsafe_arena_release_input_invite_code_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.GameInviteService.GameInviteResponse.input_invite_code_result)
  clear_has_input_invite_code_result();
  ::sg::InputInviteCodeResult* temp = input_invite_code_result_;
  input_invite_code_result_ = NULL;
  return temp;
}
inline ::sg::InputInviteCodeResult* GameInviteService_GameInviteResponse::mutable_input_invite_code_result() {
  set_has_input_invite_code_result();
  if (input_invite_code_result_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::InputInviteCodeResult>(GetArenaNoVirtual());
    input_invite_code_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.GameInviteService.GameInviteResponse.input_invite_code_result)
  return input_invite_code_result_;
}
inline void GameInviteService_GameInviteResponse::set_allocated_input_invite_code_result(::sg::InputInviteCodeResult* input_invite_code_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_invite_code_result_;
  }
  if (input_invite_code_result) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(input_invite_code_result);
    if (message_arena != submessage_arena) {
      input_invite_code_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_invite_code_result, submessage_arena);
    }
    set_has_input_invite_code_result();
  } else {
    clear_has_input_invite_code_result();
  }
  input_invite_code_result_ = input_invite_code_result;
  // @@protoc_insertion_point(field_set_allocated:sg.GameInviteService.GameInviteResponse.input_invite_code_result)
}

// optional .sg.GameInviteReward invitee_reward = 21;
inline bool GameInviteService_GameInviteResponse::has_invitee_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInviteService_GameInviteResponse::set_has_invitee_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInviteService_GameInviteResponse::clear_has_invitee_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInviteService_GameInviteResponse::clear_invitee_reward() {
  if (invitee_reward_ != NULL) invitee_reward_->Clear();
  clear_has_invitee_reward();
}
inline const ::sg::GameInviteReward& GameInviteService_GameInviteResponse::_internal_invitee_reward() const {
  return *invitee_reward_;
}
inline const ::sg::GameInviteReward& GameInviteService_GameInviteResponse::invitee_reward() const {
  const ::sg::GameInviteReward* p = invitee_reward_;
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteResponse.invitee_reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::GameInviteReward*>(
      &::sg::_GameInviteReward_default_instance_);
}
inline ::sg::GameInviteReward* GameInviteService_GameInviteResponse::release_invitee_reward() {
  // @@protoc_insertion_point(field_release:sg.GameInviteService.GameInviteResponse.invitee_reward)
  clear_has_invitee_reward();
  ::sg::GameInviteReward* temp = invitee_reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  invitee_reward_ = NULL;
  return temp;
}
inline ::sg::GameInviteReward* GameInviteService_GameInviteResponse::unsafe_arena_release_invitee_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.GameInviteService.GameInviteResponse.invitee_reward)
  clear_has_invitee_reward();
  ::sg::GameInviteReward* temp = invitee_reward_;
  invitee_reward_ = NULL;
  return temp;
}
inline ::sg::GameInviteReward* GameInviteService_GameInviteResponse::mutable_invitee_reward() {
  set_has_invitee_reward();
  if (invitee_reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::GameInviteReward>(GetArenaNoVirtual());
    invitee_reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.GameInviteService.GameInviteResponse.invitee_reward)
  return invitee_reward_;
}
inline void GameInviteService_GameInviteResponse::set_allocated_invitee_reward(::sg::GameInviteReward* invitee_reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete invitee_reward_;
  }
  if (invitee_reward) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(invitee_reward);
    if (message_arena != submessage_arena) {
      invitee_reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invitee_reward, submessage_arena);
    }
    set_has_invitee_reward();
  } else {
    clear_has_invitee_reward();
  }
  invitee_reward_ = invitee_reward;
  // @@protoc_insertion_point(field_set_allocated:sg.GameInviteService.GameInviteResponse.invitee_reward)
}

// optional .sg.GameInviteRewardList inviter_reward_list = 22;
inline bool GameInviteService_GameInviteResponse::has_inviter_reward_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInviteService_GameInviteResponse::set_has_inviter_reward_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInviteService_GameInviteResponse::clear_has_inviter_reward_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInviteService_GameInviteResponse::clear_inviter_reward_list() {
  if (inviter_reward_list_ != NULL) inviter_reward_list_->Clear();
  clear_has_inviter_reward_list();
}
inline const ::sg::GameInviteRewardList& GameInviteService_GameInviteResponse::_internal_inviter_reward_list() const {
  return *inviter_reward_list_;
}
inline const ::sg::GameInviteRewardList& GameInviteService_GameInviteResponse::inviter_reward_list() const {
  const ::sg::GameInviteRewardList* p = inviter_reward_list_;
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteResponse.inviter_reward_list)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::GameInviteRewardList*>(
      &::sg::_GameInviteRewardList_default_instance_);
}
inline ::sg::GameInviteRewardList* GameInviteService_GameInviteResponse::release_inviter_reward_list() {
  // @@protoc_insertion_point(field_release:sg.GameInviteService.GameInviteResponse.inviter_reward_list)
  clear_has_inviter_reward_list();
  ::sg::GameInviteRewardList* temp = inviter_reward_list_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  inviter_reward_list_ = NULL;
  return temp;
}
inline ::sg::GameInviteRewardList* GameInviteService_GameInviteResponse::unsafe_arena_release_inviter_reward_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.GameInviteService.GameInviteResponse.inviter_reward_list)
  clear_has_inviter_reward_list();
  ::sg::GameInviteRewardList* temp = inviter_reward_list_;
  inviter_reward_list_ = NULL;
  return temp;
}
inline ::sg::GameInviteRewardList* GameInviteService_GameInviteResponse::mutable_inviter_reward_list() {
  set_has_inviter_reward_list();
  if (inviter_reward_list_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::GameInviteRewardList>(GetArenaNoVirtual());
    inviter_reward_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.GameInviteService.GameInviteResponse.inviter_reward_list)
  return inviter_reward_list_;
}
inline void GameInviteService_GameInviteResponse::set_allocated_inviter_reward_list(::sg::GameInviteRewardList* inviter_reward_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inviter_reward_list_;
  }
  if (inviter_reward_list) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(inviter_reward_list);
    if (message_arena != submessage_arena) {
      inviter_reward_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inviter_reward_list, submessage_arena);
    }
    set_has_inviter_reward_list();
  } else {
    clear_has_inviter_reward_list();
  }
  inviter_reward_list_ = inviter_reward_list;
  // @@protoc_insertion_point(field_set_allocated:sg.GameInviteService.GameInviteResponse.inviter_reward_list)
}

// optional .sg.GameInviteAcceptReward accept_reward = 31;
inline bool GameInviteService_GameInviteResponse::has_accept_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameInviteService_GameInviteResponse::set_has_accept_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameInviteService_GameInviteResponse::clear_has_accept_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameInviteService_GameInviteResponse::clear_accept_reward() {
  if (accept_reward_ != NULL) accept_reward_->Clear();
  clear_has_accept_reward();
}
inline const ::sg::GameInviteAcceptReward& GameInviteService_GameInviteResponse::_internal_accept_reward() const {
  return *accept_reward_;
}
inline const ::sg::GameInviteAcceptReward& GameInviteService_GameInviteResponse::accept_reward() const {
  const ::sg::GameInviteAcceptReward* p = accept_reward_;
  // @@protoc_insertion_point(field_get:sg.GameInviteService.GameInviteResponse.accept_reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::GameInviteAcceptReward*>(
      &::sg::_GameInviteAcceptReward_default_instance_);
}
inline ::sg::GameInviteAcceptReward* GameInviteService_GameInviteResponse::release_accept_reward() {
  // @@protoc_insertion_point(field_release:sg.GameInviteService.GameInviteResponse.accept_reward)
  clear_has_accept_reward();
  ::sg::GameInviteAcceptReward* temp = accept_reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  accept_reward_ = NULL;
  return temp;
}
inline ::sg::GameInviteAcceptReward* GameInviteService_GameInviteResponse::unsafe_arena_release_accept_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.GameInviteService.GameInviteResponse.accept_reward)
  clear_has_accept_reward();
  ::sg::GameInviteAcceptReward* temp = accept_reward_;
  accept_reward_ = NULL;
  return temp;
}
inline ::sg::GameInviteAcceptReward* GameInviteService_GameInviteResponse::mutable_accept_reward() {
  set_has_accept_reward();
  if (accept_reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::GameInviteAcceptReward>(GetArenaNoVirtual());
    accept_reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.GameInviteService.GameInviteResponse.accept_reward)
  return accept_reward_;
}
inline void GameInviteService_GameInviteResponse::set_allocated_accept_reward(::sg::GameInviteAcceptReward* accept_reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accept_reward_;
  }
  if (accept_reward) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(accept_reward);
    if (message_arena != submessage_arena) {
      accept_reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accept_reward, submessage_arena);
    }
    set_has_accept_reward();
  } else {
    clear_has_accept_reward();
  }
  accept_reward_ = accept_reward;
  // @@protoc_insertion_point(field_set_allocated:sg.GameInviteService.GameInviteResponse.accept_reward)
}

// -------------------------------------------------------------------

// GameInviteService

// optional .sg.GameInviteService.GameInviteRequest req = 1;
inline bool GameInviteService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInviteService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInviteService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInviteService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::GameInviteService_GameInviteRequest& GameInviteService::_internal_req() const {
  return *req_;
}
inline const ::sg::GameInviteService_GameInviteRequest& GameInviteService::req() const {
  const ::sg::GameInviteService_GameInviteRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.GameInviteService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::GameInviteService_GameInviteRequest*>(
      &::sg::_GameInviteService_GameInviteRequest_default_instance_);
}
inline ::sg::GameInviteService_GameInviteRequest* GameInviteService::release_req() {
  // @@protoc_insertion_point(field_release:sg.GameInviteService.req)
  clear_has_req();
  ::sg::GameInviteService_GameInviteRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::GameInviteService_GameInviteRequest* GameInviteService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.GameInviteService.req)
  clear_has_req();
  ::sg::GameInviteService_GameInviteRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::GameInviteService_GameInviteRequest* GameInviteService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::GameInviteService_GameInviteRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.GameInviteService.req)
  return req_;
}
inline void GameInviteService::set_allocated_req(::sg::GameInviteService_GameInviteRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.GameInviteService.req)
}

// optional .sg.GameInviteService.GameInviteResponse resp = 2;
inline bool GameInviteService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInviteService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInviteService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInviteService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::GameInviteService_GameInviteResponse& GameInviteService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::GameInviteService_GameInviteResponse& GameInviteService::resp() const {
  const ::sg::GameInviteService_GameInviteResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.GameInviteService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::GameInviteService_GameInviteResponse*>(
      &::sg::_GameInviteService_GameInviteResponse_default_instance_);
}
inline ::sg::GameInviteService_GameInviteResponse* GameInviteService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.GameInviteService.resp)
  clear_has_resp();
  ::sg::GameInviteService_GameInviteResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::GameInviteService_GameInviteResponse* GameInviteService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.GameInviteService.resp)
  clear_has_resp();
  ::sg::GameInviteService_GameInviteResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::GameInviteService_GameInviteResponse* GameInviteService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::GameInviteService_GameInviteResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.GameInviteService.resp)
  return resp_;
}
inline void GameInviteService::set_allocated_resp(::sg::GameInviteService_GameInviteResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.GameInviteService.resp)
}

// -------------------------------------------------------------------

// FriendGiftNotify

// required uint64 friend_uuid = 1;
inline bool FriendGiftNotify::has_friend_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendGiftNotify::set_has_friend_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendGiftNotify::clear_has_friend_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendGiftNotify::clear_friend_uuid() {
  friend_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_uuid();
}
inline ::google::protobuf::uint64 FriendGiftNotify::friend_uuid() const {
  // @@protoc_insertion_point(field_get:sg.FriendGiftNotify.friend_uuid)
  return friend_uuid_;
}
inline void FriendGiftNotify::set_friend_uuid(::google::protobuf::uint64 value) {
  set_has_friend_uuid();
  friend_uuid_ = value;
  // @@protoc_insertion_point(field_set:sg.FriendGiftNotify.friend_uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::FriendService_FRIEND_COMMAND> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::FriendService_FRIEND_COMMAND>() {
  return ::sg::FriendService_FRIEND_COMMAND_descriptor();
}
template <> struct is_proto_enum< ::sg::GameInviteService_GAME_INVITE_COMMAND> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::GameInviteService_GAME_INVITE_COMMAND>() {
  return ::sg::GameInviteService_GAME_INVITE_COMMAND_descriptor();
}
template <> struct is_proto_enum< ::sg::RANK_TITLE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::RANK_TITLE>() {
  return ::sg::RANK_TITLE_descriptor();
}
template <> struct is_proto_enum< ::sg::FRIEND_GIFT_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::FRIEND_GIFT_STATE>() {
  return ::sg::FRIEND_GIFT_STATE_descriptor();
}
template <> struct is_proto_enum< ::sg::FRIEND_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::FRIEND_STATE>() {
  return ::sg::FRIEND_STATE_descriptor();
}
template <> struct is_proto_enum< ::sg::QUERY_PERSON_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::QUERY_PERSON_STATE>() {
  return ::sg::QUERY_PERSON_STATE_descriptor();
}
template <> struct is_proto_enum< ::sg::GAME_INVITE_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::GAME_INVITE_STATE>() {
  return ::sg::GAME_INVITE_STATE_descriptor();
}
template <> struct is_proto_enum< ::sg::GAME_INVITE_REWARD_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::GAME_INVITE_REWARD_STATE>() {
  return ::sg::GAME_INVITE_REWARD_STATE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Friend_2eproto
