// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShipEvent.proto

#ifndef PROTOBUF_INCLUDED_ShipEvent_2eproto
#define PROTOBUF_INCLUDED_ShipEvent_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ShipEvent_2eproto 

namespace protobuf_ShipEvent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ShipEvent_2eproto
namespace sg {
class ShipEvent;
class ShipEventDefaultTypeInternal;
extern ShipEventDefaultTypeInternal _ShipEvent_default_instance_;
class ShipEventDisappearNotify;
class ShipEventDisappearNotifyDefaultTypeInternal;
extern ShipEventDisappearNotifyDefaultTypeInternal _ShipEventDisappearNotify_default_instance_;
class ShipEventNotify;
class ShipEventNotifyDefaultTypeInternal;
extern ShipEventNotifyDefaultTypeInternal _ShipEventNotify_default_instance_;
class ShipEventService;
class ShipEventServiceDefaultTypeInternal;
extern ShipEventServiceDefaultTypeInternal _ShipEventService_default_instance_;
class ShipEventService_ShipEventRequest;
class ShipEventService_ShipEventRequestDefaultTypeInternal;
extern ShipEventService_ShipEventRequestDefaultTypeInternal _ShipEventService_ShipEventRequest_default_instance_;
class ShipEventService_ShipEventResponse;
class ShipEventService_ShipEventResponseDefaultTypeInternal;
extern ShipEventService_ShipEventResponseDefaultTypeInternal _ShipEventService_ShipEventResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::ShipEvent* Arena::CreateMaybeMessage<::sg::ShipEvent>(Arena*);
template<> ::sg::ShipEventDisappearNotify* Arena::CreateMaybeMessage<::sg::ShipEventDisappearNotify>(Arena*);
template<> ::sg::ShipEventNotify* Arena::CreateMaybeMessage<::sg::ShipEventNotify>(Arena*);
template<> ::sg::ShipEventService* Arena::CreateMaybeMessage<::sg::ShipEventService>(Arena*);
template<> ::sg::ShipEventService_ShipEventRequest* Arena::CreateMaybeMessage<::sg::ShipEventService_ShipEventRequest>(Arena*);
template<> ::sg::ShipEventService_ShipEventResponse* Arena::CreateMaybeMessage<::sg::ShipEventService_ShipEventResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum ShipEventService_CMD {
  ShipEventService_CMD_QUERY = 1,
  ShipEventService_CMD_DEAL = 2
};
bool ShipEventService_CMD_IsValid(int value);
const ShipEventService_CMD ShipEventService_CMD_CMD_MIN = ShipEventService_CMD_QUERY;
const ShipEventService_CMD ShipEventService_CMD_CMD_MAX = ShipEventService_CMD_DEAL;
const int ShipEventService_CMD_CMD_ARRAYSIZE = ShipEventService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShipEventService_CMD_descriptor();
inline const ::std::string& ShipEventService_CMD_Name(ShipEventService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShipEventService_CMD_descriptor(), value);
}
inline bool ShipEventService_CMD_Parse(
    const ::std::string& name, ShipEventService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShipEventService_CMD>(
    ShipEventService_CMD_descriptor(), name, value);
}
// ===================================================================

class ShipEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ShipEvent) */ {
 public:
  ShipEvent();
  virtual ~ShipEvent();

  ShipEvent(const ShipEvent& from);

  inline ShipEvent& operator=(const ShipEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShipEvent(ShipEvent&& from) noexcept
    : ShipEvent() {
    *this = ::std::move(from);
  }

  inline ShipEvent& operator=(ShipEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShipEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipEvent* internal_default_instance() {
    return reinterpret_cast<const ShipEvent*>(
               &_ShipEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ShipEvent* other);
  void Swap(ShipEvent* other);
  friend void swap(ShipEvent& a, ShipEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipEvent* New() const final {
    return CreateMaybeMessage<ShipEvent>(NULL);
  }

  ShipEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShipEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShipEvent& from);
  void MergeFrom(const ShipEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipEvent* other);
  protected:
  explicit ShipEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 typeid = 2;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 2;
  ::google::protobuf::int64 typeid_() const;
  void set_typeid_(::google::protobuf::int64 value);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 seat = 4;
  bool has_seat() const;
  void clear_seat();
  static const int kSeatFieldNumber = 4;
  ::google::protobuf::int32 seat() const;
  void set_seat(::google::protobuf::int32 value);

  // optional int32 region = 7;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 7;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // required int64 duration = 6;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sg.ShipEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_state();
  void clear_has_state();
  void set_has_seat();
  void clear_has_seat();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_duration();
  void clear_has_duration();
  void set_has_region();
  void clear_has_region();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 typeid__;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int64 duration_;
  friend struct ::protobuf_ShipEvent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShipEventService_ShipEventRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ShipEventService.ShipEventRequest) */ {
 public:
  ShipEventService_ShipEventRequest();
  virtual ~ShipEventService_ShipEventRequest();

  ShipEventService_ShipEventRequest(const ShipEventService_ShipEventRequest& from);

  inline ShipEventService_ShipEventRequest& operator=(const ShipEventService_ShipEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShipEventService_ShipEventRequest(ShipEventService_ShipEventRequest&& from) noexcept
    : ShipEventService_ShipEventRequest() {
    *this = ::std::move(from);
  }

  inline ShipEventService_ShipEventRequest& operator=(ShipEventService_ShipEventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShipEventService_ShipEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipEventService_ShipEventRequest* internal_default_instance() {
    return reinterpret_cast<const ShipEventService_ShipEventRequest*>(
               &_ShipEventService_ShipEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ShipEventService_ShipEventRequest* other);
  void Swap(ShipEventService_ShipEventRequest* other);
  friend void swap(ShipEventService_ShipEventRequest& a, ShipEventService_ShipEventRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipEventService_ShipEventRequest* New() const final {
    return CreateMaybeMessage<ShipEventService_ShipEventRequest>(NULL);
  }

  ShipEventService_ShipEventRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShipEventService_ShipEventRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShipEventService_ShipEventRequest& from);
  void MergeFrom(const ShipEventService_ShipEventRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipEventService_ShipEventRequest* other);
  protected:
  explicit ShipEventService_ShipEventRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 target = 2;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // optional int32 choice = 3;
  bool has_choice() const;
  void clear_choice();
  static const int kChoiceFieldNumber = 3;
  ::google::protobuf::int32 choice() const;
  void set_choice(::google::protobuf::int32 value);

  // required .sg.ShipEventService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::ShipEventService_CMD cmd() const;
  void set_cmd(::sg::ShipEventService_CMD value);

  // @@protoc_insertion_point(class_scope:sg.ShipEventService.ShipEventRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_target();
  void clear_has_target();
  void set_has_choice();
  void clear_has_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 choice_;
  int cmd_;
  friend struct ::protobuf_ShipEvent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShipEventService_ShipEventResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ShipEventService.ShipEventResponse) */ {
 public:
  ShipEventService_ShipEventResponse();
  virtual ~ShipEventService_ShipEventResponse();

  ShipEventService_ShipEventResponse(const ShipEventService_ShipEventResponse& from);

  inline ShipEventService_ShipEventResponse& operator=(const ShipEventService_ShipEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShipEventService_ShipEventResponse(ShipEventService_ShipEventResponse&& from) noexcept
    : ShipEventService_ShipEventResponse() {
    *this = ::std::move(from);
  }

  inline ShipEventService_ShipEventResponse& operator=(ShipEventService_ShipEventResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShipEventService_ShipEventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipEventService_ShipEventResponse* internal_default_instance() {
    return reinterpret_cast<const ShipEventService_ShipEventResponse*>(
               &_ShipEventService_ShipEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ShipEventService_ShipEventResponse* other);
  void Swap(ShipEventService_ShipEventResponse* other);
  friend void swap(ShipEventService_ShipEventResponse& a, ShipEventService_ShipEventResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipEventService_ShipEventResponse* New() const final {
    return CreateMaybeMessage<ShipEventService_ShipEventResponse>(NULL);
  }

  ShipEventService_ShipEventResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShipEventService_ShipEventResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShipEventService_ShipEventResponse& from);
  void MergeFrom(const ShipEventService_ShipEventResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipEventService_ShipEventResponse* other);
  protected:
  explicit ShipEventService_ShipEventResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.ShipEvent events = 2;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 2;
  ::sg::ShipEvent* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::ShipEvent >*
      mutable_events();
  const ::sg::ShipEvent& events(int index) const;
  ::sg::ShipEvent* add_events();
  const ::google::protobuf::RepeatedPtrField< ::sg::ShipEvent >&
      events() const;

  // optional .sg.Reward reward = 3;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 3;
  private:
  const ::sg::Reward& _internal_reward() const;
  public:
  const ::sg::Reward& reward() const;
  ::sg::Reward* release_reward();
  ::sg::Reward* mutable_reward();
  void set_allocated_reward(::sg::Reward* reward);
  void unsafe_arena_set_allocated_reward(
      ::sg::Reward* reward);
  ::sg::Reward* unsafe_arena_release_reward();

  // optional .sg.Reward lose = 4;
  bool has_lose() const;
  void clear_lose();
  static const int kLoseFieldNumber = 4;
  private:
  const ::sg::Reward& _internal_lose() const;
  public:
  const ::sg::Reward& lose() const;
  ::sg::Reward* release_lose();
  ::sg::Reward* mutable_lose();
  void set_allocated_lose(::sg::Reward* lose);
  void unsafe_arena_set_allocated_lose(
      ::sg::Reward* lose);
  ::sg::Reward* unsafe_arena_release_lose();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.ShipEventService.ShipEventResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_reward();
  void clear_has_reward();
  void set_has_lose();
  void clear_has_lose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::ShipEvent > events_;
  ::sg::Reward* reward_;
  ::sg::Reward* lose_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_ShipEvent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShipEventService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ShipEventService) */ {
 public:
  ShipEventService();
  virtual ~ShipEventService();

  ShipEventService(const ShipEventService& from);

  inline ShipEventService& operator=(const ShipEventService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShipEventService(ShipEventService&& from) noexcept
    : ShipEventService() {
    *this = ::std::move(from);
  }

  inline ShipEventService& operator=(ShipEventService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShipEventService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipEventService* internal_default_instance() {
    return reinterpret_cast<const ShipEventService*>(
               &_ShipEventService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(ShipEventService* other);
  void Swap(ShipEventService* other);
  friend void swap(ShipEventService& a, ShipEventService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipEventService* New() const final {
    return CreateMaybeMessage<ShipEventService>(NULL);
  }

  ShipEventService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShipEventService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShipEventService& from);
  void MergeFrom(const ShipEventService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipEventService* other);
  protected:
  explicit ShipEventService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ShipEventService_ShipEventRequest ShipEventRequest;
  typedef ShipEventService_ShipEventResponse ShipEventResponse;

  typedef ShipEventService_CMD CMD;
  static const CMD QUERY =
    ShipEventService_CMD_QUERY;
  static const CMD DEAL =
    ShipEventService_CMD_DEAL;
  static inline bool CMD_IsValid(int value) {
    return ShipEventService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    ShipEventService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    ShipEventService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    ShipEventService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return ShipEventService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return ShipEventService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return ShipEventService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.ShipEventService.ShipEventRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::ShipEventService_ShipEventRequest& _internal_req() const;
  public:
  const ::sg::ShipEventService_ShipEventRequest& req() const;
  ::sg::ShipEventService_ShipEventRequest* release_req();
  ::sg::ShipEventService_ShipEventRequest* mutable_req();
  void set_allocated_req(::sg::ShipEventService_ShipEventRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::ShipEventService_ShipEventRequest* req);
  ::sg::ShipEventService_ShipEventRequest* unsafe_arena_release_req();

  // optional .sg.ShipEventService.ShipEventResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::ShipEventService_ShipEventResponse& _internal_resp() const;
  public:
  const ::sg::ShipEventService_ShipEventResponse& resp() const;
  ::sg::ShipEventService_ShipEventResponse* release_resp();
  ::sg::ShipEventService_ShipEventResponse* mutable_resp();
  void set_allocated_resp(::sg::ShipEventService_ShipEventResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::ShipEventService_ShipEventResponse* resp);
  ::sg::ShipEventService_ShipEventResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.ShipEventService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::ShipEventService_ShipEventRequest* req_;
  ::sg::ShipEventService_ShipEventResponse* resp_;
  friend struct ::protobuf_ShipEvent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShipEventNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ShipEventNotify) */ {
 public:
  ShipEventNotify();
  virtual ~ShipEventNotify();

  ShipEventNotify(const ShipEventNotify& from);

  inline ShipEventNotify& operator=(const ShipEventNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShipEventNotify(ShipEventNotify&& from) noexcept
    : ShipEventNotify() {
    *this = ::std::move(from);
  }

  inline ShipEventNotify& operator=(ShipEventNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShipEventNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipEventNotify* internal_default_instance() {
    return reinterpret_cast<const ShipEventNotify*>(
               &_ShipEventNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(ShipEventNotify* other);
  void Swap(ShipEventNotify* other);
  friend void swap(ShipEventNotify& a, ShipEventNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipEventNotify* New() const final {
    return CreateMaybeMessage<ShipEventNotify>(NULL);
  }

  ShipEventNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShipEventNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShipEventNotify& from);
  void MergeFrom(const ShipEventNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipEventNotify* other);
  protected:
  explicit ShipEventNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.ShipEvent event = 1;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  private:
  const ::sg::ShipEvent& _internal_event() const;
  public:
  const ::sg::ShipEvent& event() const;
  ::sg::ShipEvent* release_event();
  ::sg::ShipEvent* mutable_event();
  void set_allocated_event(::sg::ShipEvent* event);
  void unsafe_arena_set_allocated_event(
      ::sg::ShipEvent* event);
  ::sg::ShipEvent* unsafe_arena_release_event();

  // @@protoc_insertion_point(class_scope:sg.ShipEventNotify)
 private:
  void set_has_event();
  void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::ShipEvent* event_;
  friend struct ::protobuf_ShipEvent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShipEventDisappearNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ShipEventDisappearNotify) */ {
 public:
  ShipEventDisappearNotify();
  virtual ~ShipEventDisappearNotify();

  ShipEventDisappearNotify(const ShipEventDisappearNotify& from);

  inline ShipEventDisappearNotify& operator=(const ShipEventDisappearNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShipEventDisappearNotify(ShipEventDisappearNotify&& from) noexcept
    : ShipEventDisappearNotify() {
    *this = ::std::move(from);
  }

  inline ShipEventDisappearNotify& operator=(ShipEventDisappearNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShipEventDisappearNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipEventDisappearNotify* internal_default_instance() {
    return reinterpret_cast<const ShipEventDisappearNotify*>(
               &_ShipEventDisappearNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(ShipEventDisappearNotify* other);
  void Swap(ShipEventDisappearNotify* other);
  friend void swap(ShipEventDisappearNotify& a, ShipEventDisappearNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipEventDisappearNotify* New() const final {
    return CreateMaybeMessage<ShipEventDisappearNotify>(NULL);
  }

  ShipEventDisappearNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShipEventDisappearNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShipEventDisappearNotify& from);
  void MergeFrom(const ShipEventDisappearNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipEventDisappearNotify* other);
  protected:
  explicit ShipEventDisappearNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Item lose = 2;
  int lose_size() const;
  void clear_lose();
  static const int kLoseFieldNumber = 2;
  ::sg::Item* mutable_lose(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Item >*
      mutable_lose();
  const ::sg::Item& lose(int index) const;
  ::sg::Item* add_lose();
  const ::google::protobuf::RepeatedPtrField< ::sg::Item >&
      lose() const;

  // required .sg.ShipEvent event = 1;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  private:
  const ::sg::ShipEvent& _internal_event() const;
  public:
  const ::sg::ShipEvent& event() const;
  ::sg::ShipEvent* release_event();
  ::sg::ShipEvent* mutable_event();
  void set_allocated_event(::sg::ShipEvent* event);
  void unsafe_arena_set_allocated_event(
      ::sg::ShipEvent* event);
  ::sg::ShipEvent* unsafe_arena_release_event();

  // @@protoc_insertion_point(class_scope:sg.ShipEventDisappearNotify)
 private:
  void set_has_event();
  void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Item > lose_;
  ::sg::ShipEvent* event_;
  friend struct ::protobuf_ShipEvent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShipEvent

// required int32 id = 1;
inline bool ShipEvent::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShipEvent::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShipEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShipEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ShipEvent::id() const {
  // @@protoc_insertion_point(field_get:sg.ShipEvent.id)
  return id_;
}
inline void ShipEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEvent.id)
}

// required int64 typeid = 2;
inline bool ShipEvent::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShipEvent::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShipEvent::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShipEvent::clear_typeid_() {
  typeid__ = GOOGLE_LONGLONG(0);
  clear_has_typeid_();
}
inline ::google::protobuf::int64 ShipEvent::typeid_() const {
  // @@protoc_insertion_point(field_get:sg.ShipEvent.typeid)
  return typeid__;
}
inline void ShipEvent::set_typeid_(::google::protobuf::int64 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEvent.typeid)
}

// required int32 state = 3;
inline bool ShipEvent::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShipEvent::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShipEvent::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShipEvent::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ShipEvent::state() const {
  // @@protoc_insertion_point(field_get:sg.ShipEvent.state)
  return state_;
}
inline void ShipEvent::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEvent.state)
}

// required int32 seat = 4;
inline bool ShipEvent::has_seat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShipEvent::set_has_seat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShipEvent::clear_has_seat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShipEvent::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ShipEvent::seat() const {
  // @@protoc_insertion_point(field_get:sg.ShipEvent.seat)
  return seat_;
}
inline void ShipEvent::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEvent.seat)
}

// required sfixed64 timestamp = 5;
inline bool ShipEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShipEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShipEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShipEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ShipEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:sg.ShipEvent.timestamp)
  return timestamp_;
}
inline void ShipEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEvent.timestamp)
}

// required int64 duration = 6;
inline bool ShipEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShipEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShipEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShipEvent::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::int64 ShipEvent::duration() const {
  // @@protoc_insertion_point(field_get:sg.ShipEvent.duration)
  return duration_;
}
inline void ShipEvent::set_duration(::google::protobuf::int64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEvent.duration)
}

// optional int32 region = 7;
inline bool ShipEvent::has_region() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShipEvent::set_has_region() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShipEvent::clear_has_region() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShipEvent::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 ShipEvent::region() const {
  // @@protoc_insertion_point(field_get:sg.ShipEvent.region)
  return region_;
}
inline void ShipEvent::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEvent.region)
}

// -------------------------------------------------------------------

// ShipEventService_ShipEventRequest

// required .sg.ShipEventService.CMD cmd = 1;
inline bool ShipEventService_ShipEventRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShipEventService_ShipEventRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShipEventService_ShipEventRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShipEventService_ShipEventRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::ShipEventService_CMD ShipEventService_ShipEventRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.ShipEventService.ShipEventRequest.cmd)
  return static_cast< ::sg::ShipEventService_CMD >(cmd_);
}
inline void ShipEventService_ShipEventRequest::set_cmd(::sg::ShipEventService_CMD value) {
  assert(::sg::ShipEventService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEventService.ShipEventRequest.cmd)
}

// optional int32 target = 2;
inline bool ShipEventService_ShipEventRequest::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShipEventService_ShipEventRequest::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShipEventService_ShipEventRequest::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShipEventService_ShipEventRequest::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 ShipEventService_ShipEventRequest::target() const {
  // @@protoc_insertion_point(field_get:sg.ShipEventService.ShipEventRequest.target)
  return target_;
}
inline void ShipEventService_ShipEventRequest::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEventService.ShipEventRequest.target)
}

// optional int32 choice = 3;
inline bool ShipEventService_ShipEventRequest::has_choice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShipEventService_ShipEventRequest::set_has_choice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShipEventService_ShipEventRequest::clear_has_choice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShipEventService_ShipEventRequest::clear_choice() {
  choice_ = 0;
  clear_has_choice();
}
inline ::google::protobuf::int32 ShipEventService_ShipEventRequest::choice() const {
  // @@protoc_insertion_point(field_get:sg.ShipEventService.ShipEventRequest.choice)
  return choice_;
}
inline void ShipEventService_ShipEventRequest::set_choice(::google::protobuf::int32 value) {
  set_has_choice();
  choice_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEventService.ShipEventRequest.choice)
}

// -------------------------------------------------------------------

// ShipEventService_ShipEventResponse

// required int32 result = 1;
inline bool ShipEventService_ShipEventResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShipEventService_ShipEventResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShipEventService_ShipEventResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShipEventService_ShipEventResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ShipEventService_ShipEventResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.ShipEventService.ShipEventResponse.result)
  return result_;
}
inline void ShipEventService_ShipEventResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipEventService.ShipEventResponse.result)
}

// repeated .sg.ShipEvent events = 2;
inline int ShipEventService_ShipEventResponse::events_size() const {
  return events_.size();
}
inline void ShipEventService_ShipEventResponse::clear_events() {
  events_.Clear();
}
inline ::sg::ShipEvent* ShipEventService_ShipEventResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:sg.ShipEventService.ShipEventResponse.events)
  return events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::ShipEvent >*
ShipEventService_ShipEventResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:sg.ShipEventService.ShipEventResponse.events)
  return &events_;
}
inline const ::sg::ShipEvent& ShipEventService_ShipEventResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:sg.ShipEventService.ShipEventResponse.events)
  return events_.Get(index);
}
inline ::sg::ShipEvent* ShipEventService_ShipEventResponse::add_events() {
  // @@protoc_insertion_point(field_add:sg.ShipEventService.ShipEventResponse.events)
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::ShipEvent >&
ShipEventService_ShipEventResponse::events() const {
  // @@protoc_insertion_point(field_list:sg.ShipEventService.ShipEventResponse.events)
  return events_;
}

// optional .sg.Reward reward = 3;
inline bool ShipEventService_ShipEventResponse::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShipEventService_ShipEventResponse::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShipEventService_ShipEventResponse::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Reward& ShipEventService_ShipEventResponse::_internal_reward() const {
  return *reward_;
}
inline const ::sg::Reward& ShipEventService_ShipEventResponse::reward() const {
  const ::sg::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:sg.ShipEventService.ShipEventResponse.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* ShipEventService_ShipEventResponse::release_reward() {
  // @@protoc_insertion_point(field_release:sg.ShipEventService.ShipEventResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* ShipEventService_ShipEventResponse::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.ShipEventService.ShipEventResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* ShipEventService_ShipEventResponse::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.ShipEventService.ShipEventResponse.reward)
  return reward_;
}
inline void ShipEventService_ShipEventResponse::set_allocated_reward(::sg::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reward_);
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reward)->GetArena();
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:sg.ShipEventService.ShipEventResponse.reward)
}

// optional .sg.Reward lose = 4;
inline bool ShipEventService_ShipEventResponse::has_lose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShipEventService_ShipEventResponse::set_has_lose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShipEventService_ShipEventResponse::clear_has_lose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::Reward& ShipEventService_ShipEventResponse::_internal_lose() const {
  return *lose_;
}
inline const ::sg::Reward& ShipEventService_ShipEventResponse::lose() const {
  const ::sg::Reward* p = lose_;
  // @@protoc_insertion_point(field_get:sg.ShipEventService.ShipEventResponse.lose)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* ShipEventService_ShipEventResponse::release_lose() {
  // @@protoc_insertion_point(field_release:sg.ShipEventService.ShipEventResponse.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* ShipEventService_ShipEventResponse::unsafe_arena_release_lose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.ShipEventService.ShipEventResponse.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* ShipEventService_ShipEventResponse::mutable_lose() {
  set_has_lose();
  if (lose_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    lose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.ShipEventService.ShipEventResponse.lose)
  return lose_;
}
inline void ShipEventService_ShipEventResponse::set_allocated_lose(::sg::Reward* lose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lose_);
  }
  if (lose) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lose)->GetArena();
    if (message_arena != submessage_arena) {
      lose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lose, submessage_arena);
    }
    set_has_lose();
  } else {
    clear_has_lose();
  }
  lose_ = lose;
  // @@protoc_insertion_point(field_set_allocated:sg.ShipEventService.ShipEventResponse.lose)
}

// -------------------------------------------------------------------

// ShipEventService

// optional .sg.ShipEventService.ShipEventRequest req = 1;
inline bool ShipEventService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShipEventService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShipEventService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShipEventService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::ShipEventService_ShipEventRequest& ShipEventService::_internal_req() const {
  return *req_;
}
inline const ::sg::ShipEventService_ShipEventRequest& ShipEventService::req() const {
  const ::sg::ShipEventService_ShipEventRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.ShipEventService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::ShipEventService_ShipEventRequest*>(
      &::sg::_ShipEventService_ShipEventRequest_default_instance_);
}
inline ::sg::ShipEventService_ShipEventRequest* ShipEventService::release_req() {
  // @@protoc_insertion_point(field_release:sg.ShipEventService.req)
  clear_has_req();
  ::sg::ShipEventService_ShipEventRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::ShipEventService_ShipEventRequest* ShipEventService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.ShipEventService.req)
  clear_has_req();
  ::sg::ShipEventService_ShipEventRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::ShipEventService_ShipEventRequest* ShipEventService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::ShipEventService_ShipEventRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.ShipEventService.req)
  return req_;
}
inline void ShipEventService::set_allocated_req(::sg::ShipEventService_ShipEventRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.ShipEventService.req)
}

// optional .sg.ShipEventService.ShipEventResponse resp = 2;
inline bool ShipEventService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShipEventService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShipEventService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShipEventService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::ShipEventService_ShipEventResponse& ShipEventService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::ShipEventService_ShipEventResponse& ShipEventService::resp() const {
  const ::sg::ShipEventService_ShipEventResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.ShipEventService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::ShipEventService_ShipEventResponse*>(
      &::sg::_ShipEventService_ShipEventResponse_default_instance_);
}
inline ::sg::ShipEventService_ShipEventResponse* ShipEventService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.ShipEventService.resp)
  clear_has_resp();
  ::sg::ShipEventService_ShipEventResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::ShipEventService_ShipEventResponse* ShipEventService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.ShipEventService.resp)
  clear_has_resp();
  ::sg::ShipEventService_ShipEventResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::ShipEventService_ShipEventResponse* ShipEventService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::ShipEventService_ShipEventResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.ShipEventService.resp)
  return resp_;
}
inline void ShipEventService::set_allocated_resp(::sg::ShipEventService_ShipEventResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.ShipEventService.resp)
}

// -------------------------------------------------------------------

// ShipEventNotify

// required .sg.ShipEvent event = 1;
inline bool ShipEventNotify::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShipEventNotify::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShipEventNotify::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShipEventNotify::clear_event() {
  if (event_ != NULL) event_->Clear();
  clear_has_event();
}
inline const ::sg::ShipEvent& ShipEventNotify::_internal_event() const {
  return *event_;
}
inline const ::sg::ShipEvent& ShipEventNotify::event() const {
  const ::sg::ShipEvent* p = event_;
  // @@protoc_insertion_point(field_get:sg.ShipEventNotify.event)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::ShipEvent*>(
      &::sg::_ShipEvent_default_instance_);
}
inline ::sg::ShipEvent* ShipEventNotify::release_event() {
  // @@protoc_insertion_point(field_release:sg.ShipEventNotify.event)
  clear_has_event();
  ::sg::ShipEvent* temp = event_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  event_ = NULL;
  return temp;
}
inline ::sg::ShipEvent* ShipEventNotify::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.ShipEventNotify.event)
  clear_has_event();
  ::sg::ShipEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::sg::ShipEvent* ShipEventNotify::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::ShipEvent>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.ShipEventNotify.event)
  return event_;
}
inline void ShipEventNotify::set_allocated_event(::sg::ShipEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_;
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
  } else {
    clear_has_event();
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:sg.ShipEventNotify.event)
}

// -------------------------------------------------------------------

// ShipEventDisappearNotify

// required .sg.ShipEvent event = 1;
inline bool ShipEventDisappearNotify::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShipEventDisappearNotify::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShipEventDisappearNotify::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShipEventDisappearNotify::clear_event() {
  if (event_ != NULL) event_->Clear();
  clear_has_event();
}
inline const ::sg::ShipEvent& ShipEventDisappearNotify::_internal_event() const {
  return *event_;
}
inline const ::sg::ShipEvent& ShipEventDisappearNotify::event() const {
  const ::sg::ShipEvent* p = event_;
  // @@protoc_insertion_point(field_get:sg.ShipEventDisappearNotify.event)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::ShipEvent*>(
      &::sg::_ShipEvent_default_instance_);
}
inline ::sg::ShipEvent* ShipEventDisappearNotify::release_event() {
  // @@protoc_insertion_point(field_release:sg.ShipEventDisappearNotify.event)
  clear_has_event();
  ::sg::ShipEvent* temp = event_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  event_ = NULL;
  return temp;
}
inline ::sg::ShipEvent* ShipEventDisappearNotify::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.ShipEventDisappearNotify.event)
  clear_has_event();
  ::sg::ShipEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::sg::ShipEvent* ShipEventDisappearNotify::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::ShipEvent>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.ShipEventDisappearNotify.event)
  return event_;
}
inline void ShipEventDisappearNotify::set_allocated_event(::sg::ShipEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_;
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
  } else {
    clear_has_event();
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:sg.ShipEventDisappearNotify.event)
}

// repeated .sg.Item lose = 2;
inline int ShipEventDisappearNotify::lose_size() const {
  return lose_.size();
}
inline ::sg::Item* ShipEventDisappearNotify::mutable_lose(int index) {
  // @@protoc_insertion_point(field_mutable:sg.ShipEventDisappearNotify.lose)
  return lose_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Item >*
ShipEventDisappearNotify::mutable_lose() {
  // @@protoc_insertion_point(field_mutable_list:sg.ShipEventDisappearNotify.lose)
  return &lose_;
}
inline const ::sg::Item& ShipEventDisappearNotify::lose(int index) const {
  // @@protoc_insertion_point(field_get:sg.ShipEventDisappearNotify.lose)
  return lose_.Get(index);
}
inline ::sg::Item* ShipEventDisappearNotify::add_lose() {
  // @@protoc_insertion_point(field_add:sg.ShipEventDisappearNotify.lose)
  return lose_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Item >&
ShipEventDisappearNotify::lose() const {
  // @@protoc_insertion_point(field_list:sg.ShipEventDisappearNotify.lose)
  return lose_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::ShipEventService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::ShipEventService_CMD>() {
  return ::sg::ShipEventService_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ShipEvent_2eproto
