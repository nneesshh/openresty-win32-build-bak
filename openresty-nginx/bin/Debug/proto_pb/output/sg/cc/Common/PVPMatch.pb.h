// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PVPMatch.proto

#ifndef PROTOBUF_INCLUDED_PVPMatch_2eproto
#define PROTOBUF_INCLUDED_PVPMatch_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
#include "PVE.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PVPMatch_2eproto 

namespace protobuf_PVPMatch_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_PVPMatch_2eproto
namespace sg {
class ControllerInformation;
class ControllerInformationDefaultTypeInternal;
extern ControllerInformationDefaultTypeInternal _ControllerInformation_default_instance_;
class NewTicketNotify;
class NewTicketNotifyDefaultTypeInternal;
extern NewTicketNotifyDefaultTypeInternal _NewTicketNotify_default_instance_;
class PVPMatchService;
class PVPMatchServiceDefaultTypeInternal;
extern PVPMatchServiceDefaultTypeInternal _PVPMatchService_default_instance_;
class PVPMatchService_PVPMatchRequest;
class PVPMatchService_PVPMatchRequestDefaultTypeInternal;
extern PVPMatchService_PVPMatchRequestDefaultTypeInternal _PVPMatchService_PVPMatchRequest_default_instance_;
class PVPMatchService_PVPMatchResponse;
class PVPMatchService_PVPMatchResponseDefaultTypeInternal;
extern PVPMatchService_PVPMatchResponseDefaultTypeInternal _PVPMatchService_PVPMatchResponse_default_instance_;
class RoundOverNotify;
class RoundOverNotifyDefaultTypeInternal;
extern RoundOverNotifyDefaultTypeInternal _RoundOverNotify_default_instance_;
class SingleMatchedNotify;
class SingleMatchedNotifyDefaultTypeInternal;
extern SingleMatchedNotifyDefaultTypeInternal _SingleMatchedNotify_default_instance_;
class UserPVPState;
class UserPVPStateDefaultTypeInternal;
extern UserPVPStateDefaultTypeInternal _UserPVPState_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::ControllerInformation* Arena::CreateMaybeMessage<::sg::ControllerInformation>(Arena*);
template<> ::sg::NewTicketNotify* Arena::CreateMaybeMessage<::sg::NewTicketNotify>(Arena*);
template<> ::sg::PVPMatchService* Arena::CreateMaybeMessage<::sg::PVPMatchService>(Arena*);
template<> ::sg::PVPMatchService_PVPMatchRequest* Arena::CreateMaybeMessage<::sg::PVPMatchService_PVPMatchRequest>(Arena*);
template<> ::sg::PVPMatchService_PVPMatchResponse* Arena::CreateMaybeMessage<::sg::PVPMatchService_PVPMatchResponse>(Arena*);
template<> ::sg::RoundOverNotify* Arena::CreateMaybeMessage<::sg::RoundOverNotify>(Arena*);
template<> ::sg::SingleMatchedNotify* Arena::CreateMaybeMessage<::sg::SingleMatchedNotify>(Arena*);
template<> ::sg::UserPVPState* Arena::CreateMaybeMessage<::sg::UserPVPState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum PVPMatchService_MATCH_CMD {
  PVPMatchService_MATCH_CMD_QUERY = 1,
  PVPMatchService_MATCH_CMD_NEW_ROUND = 2,
  PVPMatchService_MATCH_CMD_SINGLE_MATCH = 3,
  PVPMatchService_MATCH_CMD_MULTIPLE_MATCH = 4,
  PVPMatchService_MATCH_CMD_CANCEL = 5
};
bool PVPMatchService_MATCH_CMD_IsValid(int value);
const PVPMatchService_MATCH_CMD PVPMatchService_MATCH_CMD_MATCH_CMD_MIN = PVPMatchService_MATCH_CMD_QUERY;
const PVPMatchService_MATCH_CMD PVPMatchService_MATCH_CMD_MATCH_CMD_MAX = PVPMatchService_MATCH_CMD_CANCEL;
const int PVPMatchService_MATCH_CMD_MATCH_CMD_ARRAYSIZE = PVPMatchService_MATCH_CMD_MATCH_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* PVPMatchService_MATCH_CMD_descriptor();
inline const ::std::string& PVPMatchService_MATCH_CMD_Name(PVPMatchService_MATCH_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    PVPMatchService_MATCH_CMD_descriptor(), value);
}
inline bool PVPMatchService_MATCH_CMD_Parse(
    const ::std::string& name, PVPMatchService_MATCH_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PVPMatchService_MATCH_CMD>(
    PVPMatchService_MATCH_CMD_descriptor(), name, value);
}
// ===================================================================

class ControllerInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ControllerInformation) */ {
 public:
  ControllerInformation();
  virtual ~ControllerInformation();

  ControllerInformation(const ControllerInformation& from);

  inline ControllerInformation& operator=(const ControllerInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerInformation(ControllerInformation&& from) noexcept
    : ControllerInformation() {
    *this = ::std::move(from);
  }

  inline ControllerInformation& operator=(ControllerInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerInformation* internal_default_instance() {
    return reinterpret_cast<const ControllerInformation*>(
               &_ControllerInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ControllerInformation* other);
  void Swap(ControllerInformation* other);
  friend void swap(ControllerInformation& a, ControllerInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerInformation* New() const final {
    return CreateMaybeMessage<ControllerInformation>(NULL);
  }

  ControllerInformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerInformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerInformation& from);
  void MergeFrom(const ControllerInformation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerInformation* other);
  protected:
  explicit ControllerInformation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Sailor sailors = 2;
  int sailors_size() const;
  void clear_sailors();
  static const int kSailorsFieldNumber = 2;
  ::sg::Sailor* mutable_sailors(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Sailor >*
      mutable_sailors();
  const ::sg::Sailor& sailors(int index) const;
  ::sg::Sailor* add_sailors();
  const ::google::protobuf::RepeatedPtrField< ::sg::Sailor >&
      sailors() const;

  // required int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.ControllerInformation)
 private:
  void set_has_index();
  void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Sailor > sailors_;
  ::google::protobuf::int32 index_;
  friend struct ::protobuf_PVPMatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserPVPState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserPVPState) */ {
 public:
  UserPVPState();
  virtual ~UserPVPState();

  UserPVPState(const UserPVPState& from);

  inline UserPVPState& operator=(const UserPVPState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserPVPState(UserPVPState&& from) noexcept
    : UserPVPState() {
    *this = ::std::move(from);
  }

  inline UserPVPState& operator=(UserPVPState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPVPState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPVPState* internal_default_instance() {
    return reinterpret_cast<const UserPVPState*>(
               &_UserPVPState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(UserPVPState* other);
  void Swap(UserPVPState* other);
  friend void swap(UserPVPState& a, UserPVPState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserPVPState* New() const final {
    return CreateMaybeMessage<UserPVPState>(NULL);
  }

  UserPVPState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserPVPState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserPVPState& from);
  void MergeFrom(const UserPVPState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPVPState* other);
  protected:
  explicit UserPVPState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 remain_times = 1;
  bool has_remain_times() const;
  void clear_remain_times();
  static const int kRemainTimesFieldNumber = 1;
  ::google::protobuf::int32 remain_times() const;
  void set_remain_times(::google::protobuf::int32 value);

  // optional int32 combo = 2;
  bool has_combo() const;
  void clear_combo();
  static const int kComboFieldNumber = 2;
  ::google::protobuf::int32 combo() const;
  void set_combo(::google::protobuf::int32 value);

  // optional sfixed64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional sfixed64 round_start = 4;
  bool has_round_start() const;
  void clear_round_start();
  static const int kRoundStartFieldNumber = 4;
  ::google::protobuf::int64 round_start() const;
  void set_round_start(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sg.UserPVPState)
 private:
  void set_has_remain_times();
  void clear_has_remain_times();
  void set_has_combo();
  void clear_has_combo();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_round_start();
  void clear_has_round_start();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 remain_times_;
  ::google::protobuf::int32 combo_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 round_start_;
  friend struct ::protobuf_PVPMatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPMatchService_PVPMatchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPMatchService.PVPMatchRequest) */ {
 public:
  PVPMatchService_PVPMatchRequest();
  virtual ~PVPMatchService_PVPMatchRequest();

  PVPMatchService_PVPMatchRequest(const PVPMatchService_PVPMatchRequest& from);

  inline PVPMatchService_PVPMatchRequest& operator=(const PVPMatchService_PVPMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPMatchService_PVPMatchRequest(PVPMatchService_PVPMatchRequest&& from) noexcept
    : PVPMatchService_PVPMatchRequest() {
    *this = ::std::move(from);
  }

  inline PVPMatchService_PVPMatchRequest& operator=(PVPMatchService_PVPMatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPMatchService_PVPMatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPMatchService_PVPMatchRequest* internal_default_instance() {
    return reinterpret_cast<const PVPMatchService_PVPMatchRequest*>(
               &_PVPMatchService_PVPMatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(PVPMatchService_PVPMatchRequest* other);
  void Swap(PVPMatchService_PVPMatchRequest* other);
  friend void swap(PVPMatchService_PVPMatchRequest& a, PVPMatchService_PVPMatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPMatchService_PVPMatchRequest* New() const final {
    return CreateMaybeMessage<PVPMatchService_PVPMatchRequest>(NULL);
  }

  PVPMatchService_PVPMatchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPMatchService_PVPMatchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPMatchService_PVPMatchRequest& from);
  void MergeFrom(const PVPMatchService_PVPMatchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPMatchService_PVPMatchRequest* other);
  protected:
  explicit PVPMatchService_PVPMatchRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 team = 2;
  int team_size() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  ::google::protobuf::int32 team(int index) const;
  void set_team(int index, ::google::protobuf::int32 value);
  void add_team(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      team() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_team();

  // required .sg.PVPMatchService.MATCH_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::PVPMatchService_MATCH_CMD cmd() const;
  void set_cmd(::sg::PVPMatchService_MATCH_CMD value);

  // @@protoc_insertion_point(class_scope:sg.PVPMatchService.PVPMatchRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > team_;
  int cmd_;
  friend struct ::protobuf_PVPMatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPMatchService_PVPMatchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPMatchService.PVPMatchResponse) */ {
 public:
  PVPMatchService_PVPMatchResponse();
  virtual ~PVPMatchService_PVPMatchResponse();

  PVPMatchService_PVPMatchResponse(const PVPMatchService_PVPMatchResponse& from);

  inline PVPMatchService_PVPMatchResponse& operator=(const PVPMatchService_PVPMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPMatchService_PVPMatchResponse(PVPMatchService_PVPMatchResponse&& from) noexcept
    : PVPMatchService_PVPMatchResponse() {
    *this = ::std::move(from);
  }

  inline PVPMatchService_PVPMatchResponse& operator=(PVPMatchService_PVPMatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPMatchService_PVPMatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPMatchService_PVPMatchResponse* internal_default_instance() {
    return reinterpret_cast<const PVPMatchService_PVPMatchResponse*>(
               &_PVPMatchService_PVPMatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(PVPMatchService_PVPMatchResponse* other);
  void Swap(PVPMatchService_PVPMatchResponse* other);
  friend void swap(PVPMatchService_PVPMatchResponse& a, PVPMatchService_PVPMatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPMatchService_PVPMatchResponse* New() const final {
    return CreateMaybeMessage<PVPMatchService_PVPMatchResponse>(NULL);
  }

  PVPMatchService_PVPMatchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPMatchService_PVPMatchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPMatchService_PVPMatchResponse& from);
  void MergeFrom(const PVPMatchService_PVPMatchResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPMatchService_PVPMatchResponse* other);
  protected:
  explicit PVPMatchService_PVPMatchResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.SailorInDungeon self_team = 2;
  int self_team_size() const;
  void clear_self_team();
  static const int kSelfTeamFieldNumber = 2;
  ::sg::SailorInDungeon* mutable_self_team(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon >*
      mutable_self_team();
  const ::sg::SailorInDungeon& self_team(int index) const;
  ::sg::SailorInDungeon* add_self_team();
  const ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon >&
      self_team() const;

  // optional .sg.UserPVPState state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  private:
  const ::sg::UserPVPState& _internal_state() const;
  public:
  const ::sg::UserPVPState& state() const;
  ::sg::UserPVPState* release_state();
  ::sg::UserPVPState* mutable_state();
  void set_allocated_state(::sg::UserPVPState* state);
  void unsafe_arena_set_allocated_state(
      ::sg::UserPVPState* state);
  ::sg::UserPVPState* unsafe_arena_release_state();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PVPMatchService.PVPMatchResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon > self_team_;
  ::sg::UserPVPState* state_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_PVPMatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPMatchService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPMatchService) */ {
 public:
  PVPMatchService();
  virtual ~PVPMatchService();

  PVPMatchService(const PVPMatchService& from);

  inline PVPMatchService& operator=(const PVPMatchService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPMatchService(PVPMatchService&& from) noexcept
    : PVPMatchService() {
    *this = ::std::move(from);
  }

  inline PVPMatchService& operator=(PVPMatchService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPMatchService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPMatchService* internal_default_instance() {
    return reinterpret_cast<const PVPMatchService*>(
               &_PVPMatchService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(PVPMatchService* other);
  void Swap(PVPMatchService* other);
  friend void swap(PVPMatchService& a, PVPMatchService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPMatchService* New() const final {
    return CreateMaybeMessage<PVPMatchService>(NULL);
  }

  PVPMatchService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPMatchService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPMatchService& from);
  void MergeFrom(const PVPMatchService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPMatchService* other);
  protected:
  explicit PVPMatchService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PVPMatchService_PVPMatchRequest PVPMatchRequest;
  typedef PVPMatchService_PVPMatchResponse PVPMatchResponse;

  typedef PVPMatchService_MATCH_CMD MATCH_CMD;
  static const MATCH_CMD QUERY =
    PVPMatchService_MATCH_CMD_QUERY;
  static const MATCH_CMD NEW_ROUND =
    PVPMatchService_MATCH_CMD_NEW_ROUND;
  static const MATCH_CMD SINGLE_MATCH =
    PVPMatchService_MATCH_CMD_SINGLE_MATCH;
  static const MATCH_CMD MULTIPLE_MATCH =
    PVPMatchService_MATCH_CMD_MULTIPLE_MATCH;
  static const MATCH_CMD CANCEL =
    PVPMatchService_MATCH_CMD_CANCEL;
  static inline bool MATCH_CMD_IsValid(int value) {
    return PVPMatchService_MATCH_CMD_IsValid(value);
  }
  static const MATCH_CMD MATCH_CMD_MIN =
    PVPMatchService_MATCH_CMD_MATCH_CMD_MIN;
  static const MATCH_CMD MATCH_CMD_MAX =
    PVPMatchService_MATCH_CMD_MATCH_CMD_MAX;
  static const int MATCH_CMD_ARRAYSIZE =
    PVPMatchService_MATCH_CMD_MATCH_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MATCH_CMD_descriptor() {
    return PVPMatchService_MATCH_CMD_descriptor();
  }
  static inline const ::std::string& MATCH_CMD_Name(MATCH_CMD value) {
    return PVPMatchService_MATCH_CMD_Name(value);
  }
  static inline bool MATCH_CMD_Parse(const ::std::string& name,
      MATCH_CMD* value) {
    return PVPMatchService_MATCH_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.PVPMatchService.PVPMatchRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::PVPMatchService_PVPMatchRequest& _internal_req() const;
  public:
  const ::sg::PVPMatchService_PVPMatchRequest& req() const;
  ::sg::PVPMatchService_PVPMatchRequest* release_req();
  ::sg::PVPMatchService_PVPMatchRequest* mutable_req();
  void set_allocated_req(::sg::PVPMatchService_PVPMatchRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::PVPMatchService_PVPMatchRequest* req);
  ::sg::PVPMatchService_PVPMatchRequest* unsafe_arena_release_req();

  // optional .sg.PVPMatchService.PVPMatchResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::PVPMatchService_PVPMatchResponse& _internal_resp() const;
  public:
  const ::sg::PVPMatchService_PVPMatchResponse& resp() const;
  ::sg::PVPMatchService_PVPMatchResponse* release_resp();
  ::sg::PVPMatchService_PVPMatchResponse* mutable_resp();
  void set_allocated_resp(::sg::PVPMatchService_PVPMatchResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::PVPMatchService_PVPMatchResponse* resp);
  ::sg::PVPMatchService_PVPMatchResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.PVPMatchService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::PVPMatchService_PVPMatchRequest* req_;
  ::sg::PVPMatchService_PVPMatchResponse* resp_;
  friend struct ::protobuf_PVPMatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewTicketNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.NewTicketNotify) */ {
 public:
  NewTicketNotify();
  virtual ~NewTicketNotify();

  NewTicketNotify(const NewTicketNotify& from);

  inline NewTicketNotify& operator=(const NewTicketNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewTicketNotify(NewTicketNotify&& from) noexcept
    : NewTicketNotify() {
    *this = ::std::move(from);
  }

  inline NewTicketNotify& operator=(NewTicketNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewTicketNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewTicketNotify* internal_default_instance() {
    return reinterpret_cast<const NewTicketNotify*>(
               &_NewTicketNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(NewTicketNotify* other);
  void Swap(NewTicketNotify* other);
  friend void swap(NewTicketNotify& a, NewTicketNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewTicketNotify* New() const final {
    return CreateMaybeMessage<NewTicketNotify>(NULL);
  }

  NewTicketNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewTicketNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewTicketNotify& from);
  void MergeFrom(const NewTicketNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewTicketNotify* other);
  protected:
  explicit NewTicketNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.Item ticket = 1;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  private:
  const ::sg::Item& _internal_ticket() const;
  public:
  const ::sg::Item& ticket() const;
  ::sg::Item* release_ticket();
  ::sg::Item* mutable_ticket();
  void set_allocated_ticket(::sg::Item* ticket);
  void unsafe_arena_set_allocated_ticket(
      ::sg::Item* ticket);
  ::sg::Item* unsafe_arena_release_ticket();

  // @@protoc_insertion_point(class_scope:sg.NewTicketNotify)
 private:
  void set_has_ticket();
  void clear_has_ticket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::Item* ticket_;
  friend struct ::protobuf_PVPMatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoundOverNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.RoundOverNotify) */ {
 public:
  RoundOverNotify();
  virtual ~RoundOverNotify();

  RoundOverNotify(const RoundOverNotify& from);

  inline RoundOverNotify& operator=(const RoundOverNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoundOverNotify(RoundOverNotify&& from) noexcept
    : RoundOverNotify() {
    *this = ::std::move(from);
  }

  inline RoundOverNotify& operator=(RoundOverNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoundOverNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundOverNotify* internal_default_instance() {
    return reinterpret_cast<const RoundOverNotify*>(
               &_RoundOverNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(RoundOverNotify* other);
  void Swap(RoundOverNotify* other);
  friend void swap(RoundOverNotify& a, RoundOverNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundOverNotify* New() const final {
    return CreateMaybeMessage<RoundOverNotify>(NULL);
  }

  RoundOverNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoundOverNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoundOverNotify& from);
  void MergeFrom(const RoundOverNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundOverNotify* other);
  protected:
  explicit RoundOverNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sign = 1;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 1;
  ::google::protobuf::int32 sign() const;
  void set_sign(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.RoundOverNotify)
 private:
  void set_has_sign();
  void clear_has_sign();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 sign_;
  friend struct ::protobuf_PVPMatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleMatchedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.SingleMatchedNotify) */ {
 public:
  SingleMatchedNotify();
  virtual ~SingleMatchedNotify();

  SingleMatchedNotify(const SingleMatchedNotify& from);

  inline SingleMatchedNotify& operator=(const SingleMatchedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleMatchedNotify(SingleMatchedNotify&& from) noexcept
    : SingleMatchedNotify() {
    *this = ::std::move(from);
  }

  inline SingleMatchedNotify& operator=(SingleMatchedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleMatchedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleMatchedNotify* internal_default_instance() {
    return reinterpret_cast<const SingleMatchedNotify*>(
               &_SingleMatchedNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(SingleMatchedNotify* other);
  void Swap(SingleMatchedNotify* other);
  friend void swap(SingleMatchedNotify& a, SingleMatchedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleMatchedNotify* New() const final {
    return CreateMaybeMessage<SingleMatchedNotify>(NULL);
  }

  SingleMatchedNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleMatchedNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleMatchedNotify& from);
  void MergeFrom(const SingleMatchedNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleMatchedNotify* other);
  protected:
  explicit SingleMatchedNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.SailorInDungeon team = 7;
  int team_size() const;
  void clear_team();
  static const int kTeamFieldNumber = 7;
  ::sg::SailorInDungeon* mutable_team(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon >*
      mutable_team();
  const ::sg::SailorInDungeon& team(int index) const;
  ::sg::SailorInDungeon* add_team();
  const ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon >&
      team() const;

  // required bytes nick = 3;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required bytes signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_signature();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      ::std::string* signature);

  // required uint64 field_id = 1;
  bool has_field_id() const;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 1;
  ::google::protobuf::uint64 field_id() const;
  void set_field_id(::google::protobuf::uint64 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 portrait = 4;
  bool has_portrait() const;
  void clear_portrait();
  static const int kPortraitFieldNumber = 4;
  ::google::protobuf::int32 portrait() const;
  void set_portrait(::google::protobuf::int32 value);

  // optional int32 ranking_score = 6;
  bool has_ranking_score() const;
  void clear_ranking_score();
  static const int kRankingScoreFieldNumber = 6;
  ::google::protobuf::int32 ranking_score() const;
  void set_ranking_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.SingleMatchedNotify)
 private:
  void set_has_field_id();
  void clear_has_field_id();
  void set_has_level();
  void clear_has_level();
  void set_has_nick();
  void clear_has_nick();
  void set_has_portrait();
  void clear_has_portrait();
  void set_has_signature();
  void clear_has_signature();
  void set_has_ranking_score();
  void clear_has_ranking_score();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon > team_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::uint64 field_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 portrait_;
  ::google::protobuf::int32 ranking_score_;
  friend struct ::protobuf_PVPMatch_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControllerInformation

// required int32 index = 1;
inline bool ControllerInformation::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllerInformation::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControllerInformation::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControllerInformation::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ControllerInformation::index() const {
  // @@protoc_insertion_point(field_get:sg.ControllerInformation.index)
  return index_;
}
inline void ControllerInformation::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:sg.ControllerInformation.index)
}

// repeated .sg.Sailor sailors = 2;
inline int ControllerInformation::sailors_size() const {
  return sailors_.size();
}
inline ::sg::Sailor* ControllerInformation::mutable_sailors(int index) {
  // @@protoc_insertion_point(field_mutable:sg.ControllerInformation.sailors)
  return sailors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Sailor >*
ControllerInformation::mutable_sailors() {
  // @@protoc_insertion_point(field_mutable_list:sg.ControllerInformation.sailors)
  return &sailors_;
}
inline const ::sg::Sailor& ControllerInformation::sailors(int index) const {
  // @@protoc_insertion_point(field_get:sg.ControllerInformation.sailors)
  return sailors_.Get(index);
}
inline ::sg::Sailor* ControllerInformation::add_sailors() {
  // @@protoc_insertion_point(field_add:sg.ControllerInformation.sailors)
  return sailors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Sailor >&
ControllerInformation::sailors() const {
  // @@protoc_insertion_point(field_list:sg.ControllerInformation.sailors)
  return sailors_;
}

// -------------------------------------------------------------------

// UserPVPState

// optional int32 remain_times = 1;
inline bool UserPVPState::has_remain_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPVPState::set_has_remain_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPVPState::clear_has_remain_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPVPState::clear_remain_times() {
  remain_times_ = 0;
  clear_has_remain_times();
}
inline ::google::protobuf::int32 UserPVPState::remain_times() const {
  // @@protoc_insertion_point(field_get:sg.UserPVPState.remain_times)
  return remain_times_;
}
inline void UserPVPState::set_remain_times(::google::protobuf::int32 value) {
  set_has_remain_times();
  remain_times_ = value;
  // @@protoc_insertion_point(field_set:sg.UserPVPState.remain_times)
}

// optional int32 combo = 2;
inline bool UserPVPState::has_combo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPVPState::set_has_combo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPVPState::clear_has_combo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPVPState::clear_combo() {
  combo_ = 0;
  clear_has_combo();
}
inline ::google::protobuf::int32 UserPVPState::combo() const {
  // @@protoc_insertion_point(field_get:sg.UserPVPState.combo)
  return combo_;
}
inline void UserPVPState::set_combo(::google::protobuf::int32 value) {
  set_has_combo();
  combo_ = value;
  // @@protoc_insertion_point(field_set:sg.UserPVPState.combo)
}

// optional sfixed64 timestamp = 3;
inline bool UserPVPState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPVPState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPVPState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPVPState::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserPVPState::timestamp() const {
  // @@protoc_insertion_point(field_get:sg.UserPVPState.timestamp)
  return timestamp_;
}
inline void UserPVPState::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.UserPVPState.timestamp)
}

// optional sfixed64 round_start = 4;
inline bool UserPVPState::has_round_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserPVPState::set_has_round_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserPVPState::clear_has_round_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserPVPState::clear_round_start() {
  round_start_ = GOOGLE_LONGLONG(0);
  clear_has_round_start();
}
inline ::google::protobuf::int64 UserPVPState::round_start() const {
  // @@protoc_insertion_point(field_get:sg.UserPVPState.round_start)
  return round_start_;
}
inline void UserPVPState::set_round_start(::google::protobuf::int64 value) {
  set_has_round_start();
  round_start_ = value;
  // @@protoc_insertion_point(field_set:sg.UserPVPState.round_start)
}

// -------------------------------------------------------------------

// PVPMatchService_PVPMatchRequest

// required .sg.PVPMatchService.MATCH_CMD cmd = 1;
inline bool PVPMatchService_PVPMatchRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPMatchService_PVPMatchRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPMatchService_PVPMatchRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPMatchService_PVPMatchRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::PVPMatchService_MATCH_CMD PVPMatchService_PVPMatchRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.PVPMatchService.PVPMatchRequest.cmd)
  return static_cast< ::sg::PVPMatchService_MATCH_CMD >(cmd_);
}
inline void PVPMatchService_PVPMatchRequest::set_cmd(::sg::PVPMatchService_MATCH_CMD value) {
  assert(::sg::PVPMatchService_MATCH_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPMatchService.PVPMatchRequest.cmd)
}

// repeated int32 team = 2;
inline int PVPMatchService_PVPMatchRequest::team_size() const {
  return team_.size();
}
inline void PVPMatchService_PVPMatchRequest::clear_team() {
  team_.Clear();
}
inline ::google::protobuf::int32 PVPMatchService_PVPMatchRequest::team(int index) const {
  // @@protoc_insertion_point(field_get:sg.PVPMatchService.PVPMatchRequest.team)
  return team_.Get(index);
}
inline void PVPMatchService_PVPMatchRequest::set_team(int index, ::google::protobuf::int32 value) {
  team_.Set(index, value);
  // @@protoc_insertion_point(field_set:sg.PVPMatchService.PVPMatchRequest.team)
}
inline void PVPMatchService_PVPMatchRequest::add_team(::google::protobuf::int32 value) {
  team_.Add(value);
  // @@protoc_insertion_point(field_add:sg.PVPMatchService.PVPMatchRequest.team)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PVPMatchService_PVPMatchRequest::team() const {
  // @@protoc_insertion_point(field_list:sg.PVPMatchService.PVPMatchRequest.team)
  return team_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PVPMatchService_PVPMatchRequest::mutable_team() {
  // @@protoc_insertion_point(field_mutable_list:sg.PVPMatchService.PVPMatchRequest.team)
  return &team_;
}

// -------------------------------------------------------------------

// PVPMatchService_PVPMatchResponse

// required int32 result = 1;
inline bool PVPMatchService_PVPMatchResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPMatchService_PVPMatchResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPMatchService_PVPMatchResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPMatchService_PVPMatchResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PVPMatchService_PVPMatchResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.PVPMatchService.PVPMatchResponse.result)
  return result_;
}
inline void PVPMatchService_PVPMatchResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPMatchService.PVPMatchResponse.result)
}

// repeated .sg.SailorInDungeon self_team = 2;
inline int PVPMatchService_PVPMatchResponse::self_team_size() const {
  return self_team_.size();
}
inline ::sg::SailorInDungeon* PVPMatchService_PVPMatchResponse::mutable_self_team(int index) {
  // @@protoc_insertion_point(field_mutable:sg.PVPMatchService.PVPMatchResponse.self_team)
  return self_team_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon >*
PVPMatchService_PVPMatchResponse::mutable_self_team() {
  // @@protoc_insertion_point(field_mutable_list:sg.PVPMatchService.PVPMatchResponse.self_team)
  return &self_team_;
}
inline const ::sg::SailorInDungeon& PVPMatchService_PVPMatchResponse::self_team(int index) const {
  // @@protoc_insertion_point(field_get:sg.PVPMatchService.PVPMatchResponse.self_team)
  return self_team_.Get(index);
}
inline ::sg::SailorInDungeon* PVPMatchService_PVPMatchResponse::add_self_team() {
  // @@protoc_insertion_point(field_add:sg.PVPMatchService.PVPMatchResponse.self_team)
  return self_team_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon >&
PVPMatchService_PVPMatchResponse::self_team() const {
  // @@protoc_insertion_point(field_list:sg.PVPMatchService.PVPMatchResponse.self_team)
  return self_team_;
}

// optional .sg.UserPVPState state = 3;
inline bool PVPMatchService_PVPMatchResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPMatchService_PVPMatchResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPMatchService_PVPMatchResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPMatchService_PVPMatchResponse::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
inline const ::sg::UserPVPState& PVPMatchService_PVPMatchResponse::_internal_state() const {
  return *state_;
}
inline const ::sg::UserPVPState& PVPMatchService_PVPMatchResponse::state() const {
  const ::sg::UserPVPState* p = state_;
  // @@protoc_insertion_point(field_get:sg.PVPMatchService.PVPMatchResponse.state)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserPVPState*>(
      &::sg::_UserPVPState_default_instance_);
}
inline ::sg::UserPVPState* PVPMatchService_PVPMatchResponse::release_state() {
  // @@protoc_insertion_point(field_release:sg.PVPMatchService.PVPMatchResponse.state)
  clear_has_state();
  ::sg::UserPVPState* temp = state_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  state_ = NULL;
  return temp;
}
inline ::sg::UserPVPState* PVPMatchService_PVPMatchResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PVPMatchService.PVPMatchResponse.state)
  clear_has_state();
  ::sg::UserPVPState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::sg::UserPVPState* PVPMatchService_PVPMatchResponse::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserPVPState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PVPMatchService.PVPMatchResponse.state)
  return state_;
}
inline void PVPMatchService_PVPMatchResponse::set_allocated_state(::sg::UserPVPState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:sg.PVPMatchService.PVPMatchResponse.state)
}

// -------------------------------------------------------------------

// PVPMatchService

// optional .sg.PVPMatchService.PVPMatchRequest req = 1;
inline bool PVPMatchService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPMatchService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPMatchService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPMatchService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::PVPMatchService_PVPMatchRequest& PVPMatchService::_internal_req() const {
  return *req_;
}
inline const ::sg::PVPMatchService_PVPMatchRequest& PVPMatchService::req() const {
  const ::sg::PVPMatchService_PVPMatchRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.PVPMatchService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PVPMatchService_PVPMatchRequest*>(
      &::sg::_PVPMatchService_PVPMatchRequest_default_instance_);
}
inline ::sg::PVPMatchService_PVPMatchRequest* PVPMatchService::release_req() {
  // @@protoc_insertion_point(field_release:sg.PVPMatchService.req)
  clear_has_req();
  ::sg::PVPMatchService_PVPMatchRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::PVPMatchService_PVPMatchRequest* PVPMatchService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PVPMatchService.req)
  clear_has_req();
  ::sg::PVPMatchService_PVPMatchRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::PVPMatchService_PVPMatchRequest* PVPMatchService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PVPMatchService_PVPMatchRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PVPMatchService.req)
  return req_;
}
inline void PVPMatchService::set_allocated_req(::sg::PVPMatchService_PVPMatchRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.PVPMatchService.req)
}

// optional .sg.PVPMatchService.PVPMatchResponse resp = 2;
inline bool PVPMatchService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPMatchService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPMatchService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPMatchService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::PVPMatchService_PVPMatchResponse& PVPMatchService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::PVPMatchService_PVPMatchResponse& PVPMatchService::resp() const {
  const ::sg::PVPMatchService_PVPMatchResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.PVPMatchService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PVPMatchService_PVPMatchResponse*>(
      &::sg::_PVPMatchService_PVPMatchResponse_default_instance_);
}
inline ::sg::PVPMatchService_PVPMatchResponse* PVPMatchService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.PVPMatchService.resp)
  clear_has_resp();
  ::sg::PVPMatchService_PVPMatchResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::PVPMatchService_PVPMatchResponse* PVPMatchService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PVPMatchService.resp)
  clear_has_resp();
  ::sg::PVPMatchService_PVPMatchResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::PVPMatchService_PVPMatchResponse* PVPMatchService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PVPMatchService_PVPMatchResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PVPMatchService.resp)
  return resp_;
}
inline void PVPMatchService::set_allocated_resp(::sg::PVPMatchService_PVPMatchResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.PVPMatchService.resp)
}

// -------------------------------------------------------------------

// NewTicketNotify

// optional .sg.Item ticket = 1;
inline bool NewTicketNotify::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewTicketNotify::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewTicketNotify::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Item& NewTicketNotify::_internal_ticket() const {
  return *ticket_;
}
inline const ::sg::Item& NewTicketNotify::ticket() const {
  const ::sg::Item* p = ticket_;
  // @@protoc_insertion_point(field_get:sg.NewTicketNotify.ticket)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Item*>(
      &::sg::_Item_default_instance_);
}
inline ::sg::Item* NewTicketNotify::release_ticket() {
  // @@protoc_insertion_point(field_release:sg.NewTicketNotify.ticket)
  clear_has_ticket();
  ::sg::Item* temp = ticket_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  ticket_ = NULL;
  return temp;
}
inline ::sg::Item* NewTicketNotify::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.NewTicketNotify.ticket)
  clear_has_ticket();
  ::sg::Item* temp = ticket_;
  ticket_ = NULL;
  return temp;
}
inline ::sg::Item* NewTicketNotify::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Item>(GetArenaNoVirtual());
    ticket_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.NewTicketNotify.ticket)
  return ticket_;
}
inline void NewTicketNotify::set_allocated_ticket(::sg::Item* ticket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ticket_);
  }
  if (ticket) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ticket)->GetArena();
    if (message_arena != submessage_arena) {
      ticket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:sg.NewTicketNotify.ticket)
}

// -------------------------------------------------------------------

// RoundOverNotify

// optional int32 sign = 1;
inline bool RoundOverNotify::has_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundOverNotify::set_has_sign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoundOverNotify::clear_has_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoundOverNotify::clear_sign() {
  sign_ = 0;
  clear_has_sign();
}
inline ::google::protobuf::int32 RoundOverNotify::sign() const {
  // @@protoc_insertion_point(field_get:sg.RoundOverNotify.sign)
  return sign_;
}
inline void RoundOverNotify::set_sign(::google::protobuf::int32 value) {
  set_has_sign();
  sign_ = value;
  // @@protoc_insertion_point(field_set:sg.RoundOverNotify.sign)
}

// -------------------------------------------------------------------

// SingleMatchedNotify

// required uint64 field_id = 1;
inline bool SingleMatchedNotify::has_field_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleMatchedNotify::set_has_field_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleMatchedNotify::clear_has_field_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleMatchedNotify::clear_field_id() {
  field_id_ = GOOGLE_ULONGLONG(0);
  clear_has_field_id();
}
inline ::google::protobuf::uint64 SingleMatchedNotify::field_id() const {
  // @@protoc_insertion_point(field_get:sg.SingleMatchedNotify.field_id)
  return field_id_;
}
inline void SingleMatchedNotify::set_field_id(::google::protobuf::uint64 value) {
  set_has_field_id();
  field_id_ = value;
  // @@protoc_insertion_point(field_set:sg.SingleMatchedNotify.field_id)
}

// required int32 level = 2;
inline bool SingleMatchedNotify::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleMatchedNotify::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleMatchedNotify::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleMatchedNotify::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SingleMatchedNotify::level() const {
  // @@protoc_insertion_point(field_get:sg.SingleMatchedNotify.level)
  return level_;
}
inline void SingleMatchedNotify::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:sg.SingleMatchedNotify.level)
}

// required bytes nick = 3;
inline bool SingleMatchedNotify::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleMatchedNotify::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleMatchedNotify::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleMatchedNotify::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& SingleMatchedNotify::nick() const {
  // @@protoc_insertion_point(field_get:sg.SingleMatchedNotify.nick)
  return nick_.Get();
}
inline void SingleMatchedNotify::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.SingleMatchedNotify.nick)
}
#if LANG_CXX11
inline void SingleMatchedNotify::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.SingleMatchedNotify.nick)
}
#endif
inline void SingleMatchedNotify::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.SingleMatchedNotify.nick)
}
inline void SingleMatchedNotify::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.SingleMatchedNotify.nick)
}
inline ::std::string* SingleMatchedNotify::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:sg.SingleMatchedNotify.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SingleMatchedNotify::release_nick() {
  // @@protoc_insertion_point(field_release:sg.SingleMatchedNotify.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SingleMatchedNotify::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.SingleMatchedNotify.nick)
}
inline ::std::string* SingleMatchedNotify::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.SingleMatchedNotify.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SingleMatchedNotify::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.SingleMatchedNotify.nick)
}

// required int32 portrait = 4;
inline bool SingleMatchedNotify::has_portrait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleMatchedNotify::set_has_portrait() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SingleMatchedNotify::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SingleMatchedNotify::clear_portrait() {
  portrait_ = 0;
  clear_has_portrait();
}
inline ::google::protobuf::int32 SingleMatchedNotify::portrait() const {
  // @@protoc_insertion_point(field_get:sg.SingleMatchedNotify.portrait)
  return portrait_;
}
inline void SingleMatchedNotify::set_portrait(::google::protobuf::int32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:sg.SingleMatchedNotify.portrait)
}

// required bytes signature = 5;
inline bool SingleMatchedNotify::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleMatchedNotify::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleMatchedNotify::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleMatchedNotify::clear_signature() {
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_signature();
}
inline const ::std::string& SingleMatchedNotify::signature() const {
  // @@protoc_insertion_point(field_get:sg.SingleMatchedNotify.signature)
  return signature_.Get();
}
inline void SingleMatchedNotify::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.SingleMatchedNotify.signature)
}
#if LANG_CXX11
inline void SingleMatchedNotify::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.SingleMatchedNotify.signature)
}
#endif
inline void SingleMatchedNotify::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.SingleMatchedNotify.signature)
}
inline void SingleMatchedNotify::set_signature(const void* value,
    size_t size) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.SingleMatchedNotify.signature)
}
inline ::std::string* SingleMatchedNotify::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:sg.SingleMatchedNotify.signature)
  return signature_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SingleMatchedNotify::release_signature() {
  // @@protoc_insertion_point(field_release:sg.SingleMatchedNotify.signature)
  if (!has_signature()) {
    return NULL;
  }
  clear_has_signature();
  return signature_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SingleMatchedNotify::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.SingleMatchedNotify.signature)
}
inline ::std::string* SingleMatchedNotify::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.SingleMatchedNotify.signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_signature();
  return signature_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SingleMatchedNotify::unsafe_arena_set_allocated_signature(
    ::std::string* signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.SingleMatchedNotify.signature)
}

// optional int32 ranking_score = 6;
inline bool SingleMatchedNotify::has_ranking_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SingleMatchedNotify::set_has_ranking_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SingleMatchedNotify::clear_has_ranking_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SingleMatchedNotify::clear_ranking_score() {
  ranking_score_ = 0;
  clear_has_ranking_score();
}
inline ::google::protobuf::int32 SingleMatchedNotify::ranking_score() const {
  // @@protoc_insertion_point(field_get:sg.SingleMatchedNotify.ranking_score)
  return ranking_score_;
}
inline void SingleMatchedNotify::set_ranking_score(::google::protobuf::int32 value) {
  set_has_ranking_score();
  ranking_score_ = value;
  // @@protoc_insertion_point(field_set:sg.SingleMatchedNotify.ranking_score)
}

// repeated .sg.SailorInDungeon team = 7;
inline int SingleMatchedNotify::team_size() const {
  return team_.size();
}
inline ::sg::SailorInDungeon* SingleMatchedNotify::mutable_team(int index) {
  // @@protoc_insertion_point(field_mutable:sg.SingleMatchedNotify.team)
  return team_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon >*
SingleMatchedNotify::mutable_team() {
  // @@protoc_insertion_point(field_mutable_list:sg.SingleMatchedNotify.team)
  return &team_;
}
inline const ::sg::SailorInDungeon& SingleMatchedNotify::team(int index) const {
  // @@protoc_insertion_point(field_get:sg.SingleMatchedNotify.team)
  return team_.Get(index);
}
inline ::sg::SailorInDungeon* SingleMatchedNotify::add_team() {
  // @@protoc_insertion_point(field_add:sg.SingleMatchedNotify.team)
  return team_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::SailorInDungeon >&
SingleMatchedNotify::team() const {
  // @@protoc_insertion_point(field_list:sg.SingleMatchedNotify.team)
  return team_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::PVPMatchService_MATCH_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::PVPMatchService_MATCH_CMD>() {
  return ::sg::PVPMatchService_MATCH_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PVPMatch_2eproto
