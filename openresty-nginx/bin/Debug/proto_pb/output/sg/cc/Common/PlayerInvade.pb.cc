// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerInvade.proto

#include "PlayerInvade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_int;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_PlayerInvade_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PlayerInvade_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInvadeService_PlayerInvadeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PlayerInvade_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInvadeRecord;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PlayerInvade_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInvadeService_PlayerInvadeResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PlayerInvade_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInvadeState;
}  // namespace protobuf_PlayerInvade_2eproto
namespace sg {
class PlayerInvadeRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInvadeRecord>
      _instance;
} _PlayerInvadeRecord_default_instance_;
class PlayerInvadeStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInvadeState>
      _instance;
} _PlayerInvadeState_default_instance_;
class PlayerInvadeService_PlayerInvadeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInvadeService_PlayerInvadeRequest>
      _instance;
} _PlayerInvadeService_PlayerInvadeRequest_default_instance_;
class PlayerInvadeService_PlayerInvadeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInvadeService_PlayerInvadeResponse>
      _instance;
} _PlayerInvadeService_PlayerInvadeResponse_default_instance_;
class PlayerInvadeServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInvadeService>
      _instance;
} _PlayerInvadeService_default_instance_;
class PlayerInvadeNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInvadeNotify>
      _instance;
} _PlayerInvadeNotify_default_instance_;
}  // namespace sg
namespace protobuf_PlayerInvade_2eproto {
static void InitDefaultsPlayerInvadeRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PlayerInvadeRecord_default_instance_;
    new (ptr) ::sg::PlayerInvadeRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PlayerInvadeRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInvadeRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerInvadeRecord}, {
      &protobuf_BaseStruct_2eproto::scc_info_UserInfo.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsPlayerInvadeState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PlayerInvadeState_default_instance_;
    new (ptr) ::sg::PlayerInvadeState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PlayerInvadeState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInvadeState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerInvadeState}, {
      &protobuf_BaseStruct_2eproto::scc_info_UserInfo.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,}};

static void InitDefaultsPlayerInvadeService_PlayerInvadeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PlayerInvadeService_PlayerInvadeRequest_default_instance_;
    new (ptr) ::sg::PlayerInvadeService_PlayerInvadeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PlayerInvadeService_PlayerInvadeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInvadeService_PlayerInvadeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerInvadeService_PlayerInvadeRequest}, {}};

static void InitDefaultsPlayerInvadeService_PlayerInvadeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PlayerInvadeService_PlayerInvadeResponse_default_instance_;
    new (ptr) ::sg::PlayerInvadeService_PlayerInvadeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PlayerInvadeService_PlayerInvadeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInvadeService_PlayerInvadeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerInvadeService_PlayerInvadeResponse}, {
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeState.base,
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeRecord.base,}};

static void InitDefaultsPlayerInvadeService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PlayerInvadeService_default_instance_;
    new (ptr) ::sg::PlayerInvadeService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PlayerInvadeService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInvadeService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerInvadeService}, {
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService_PlayerInvadeRequest.base,
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService_PlayerInvadeResponse.base,}};

static void InitDefaultsPlayerInvadeNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PlayerInvadeNotify_default_instance_;
    new (ptr) ::sg::PlayerInvadeNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PlayerInvadeNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInvadeNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerInvadeNotify}, {
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeRecord.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInvadeRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInvadeState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInvadeService_PlayerInvadeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInvadeService_PlayerInvadeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInvadeService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInvadeNotify.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, happen_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, revenge_deadline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, revenge_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeRecord, score_change_),
  2,
  3,
  0,
  4,
  5,
  6,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeState, match_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeState, defend_deadline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeState, deadline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeState, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeState, drop_get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeState, score_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService_PlayerInvadeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService_PlayerInvadeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService_PlayerInvadeRequest, cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService_PlayerInvadeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService_PlayerInvadeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService_PlayerInvadeResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService_PlayerInvadeResponse, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService_PlayerInvadeResponse, record_list_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeNotify, record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerInvadeNotify, lose_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::sg::PlayerInvadeRecord)},
  { 21, 32, sizeof(::sg::PlayerInvadeState)},
  { 38, 44, sizeof(::sg::PlayerInvadeService_PlayerInvadeRequest)},
  { 45, 53, sizeof(::sg::PlayerInvadeService_PlayerInvadeResponse)},
  { 56, 63, sizeof(::sg::PlayerInvadeService)},
  { 65, 72, sizeof(::sg::PlayerInvadeNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PlayerInvadeRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PlayerInvadeState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PlayerInvadeService_PlayerInvadeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PlayerInvadeService_PlayerInvadeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PlayerInvadeService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PlayerInvadeNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "PlayerInvade.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022PlayerInvade.proto\022\002sg\032\020BaseStruct.pro"
      "to\"\306\001\n\022PlayerInvadeRecord\022\n\n\002id\030\001 \002(\005\022\r\n"
      "\005state\030\002 \002(\005\022\034\n\006player\030\003 \001(\0132\014.sg.UserIn"
      "fo\022\023\n\013happen_time\030\004 \001(\020\022\030\n\020revenge_deadl"
      "ine\030\005 \001(\020\022\016\n\006result\030\006 \001(\005\022\"\n\016revenge_rew"
      "ard\030\007 \001(\0132\n.sg.Reward\022\024\n\014score_change\030\010 "
      "\001(\005\"\245\001\n\021PlayerInvadeState\022\"\n\014match_playe"
      "r\030\001 \001(\0132\014.sg.UserInfo\022\027\n\017defend_deadline"
      "\030\002 \001(\020\022\020\n\010deadline\030\003 \001(\020\022\013\n\003win\030\004 \001(\005\022%\n"
      "\010drop_get\030\005 \003(\0132\023.sg.pb_pair_int_int\022\r\n\005"
      "score\030\006 \001(\005\"\352\002\n\023PlayerInvadeService\0228\n\003r"
      "eq\030\001 \001(\0132+.sg.PlayerInvadeService.Player"
      "InvadeRequest\022:\n\004resp\030\002 \001(\0132,.sg.PlayerI"
      "nvadeService.PlayerInvadeResponse\032\?\n\023Pla"
      "yerInvadeRequest\022(\n\003cmd\030\001 \002(\0162\033.sg.Playe"
      "rInvadeService.CMD\032y\n\024PlayerInvadeRespon"
      "se\022\016\n\006result\030\001 \002(\005\022$\n\005state\030\002 \001(\0132\025.sg.P"
      "layerInvadeState\022+\n\013record_list\030\003 \003(\0132\026."
      "sg.PlayerInvadeRecord\"!\n\003CMD\022\t\n\005QUERY\020\001\022"
      "\017\n\013QUERY_STATE\020\002\"V\n\022PlayerInvadeNotify\022&"
      "\n\006record\030\001 \002(\0132\026.sg.PlayerInvadeRecord\022\030"
      "\n\004lose\030\002 \001(\0132\n.sg.RewardB\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 869);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlayerInvade.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_PlayerInvade_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* PlayerInvadeService_CMD_descriptor() {
  protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PlayerInvade_2eproto::file_level_enum_descriptors[0];
}
bool PlayerInvadeService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerInvadeService_CMD PlayerInvadeService::QUERY;
const PlayerInvadeService_CMD PlayerInvadeService::QUERY_STATE;
const PlayerInvadeService_CMD PlayerInvadeService::CMD_MIN;
const PlayerInvadeService_CMD PlayerInvadeService::CMD_MAX;
const int PlayerInvadeService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PlayerInvadeRecord::InitAsDefaultInstance() {
  ::sg::_PlayerInvadeRecord_default_instance_._instance.get_mutable()->player_ = const_cast< ::sg::UserInfo*>(
      ::sg::UserInfo::internal_default_instance());
  ::sg::_PlayerInvadeRecord_default_instance_._instance.get_mutable()->revenge_reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void PlayerInvadeRecord::unsafe_arena_set_allocated_player(
    ::sg::UserInfo* player) {
  if (GetArenaNoVirtual() == NULL) {
    delete player_;
  }
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerInvadeRecord.player)
}
void PlayerInvadeRecord::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
void PlayerInvadeRecord::unsafe_arena_set_allocated_revenge_reward(
    ::sg::Reward* revenge_reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete revenge_reward_;
  }
  revenge_reward_ = revenge_reward;
  if (revenge_reward) {
    set_has_revenge_reward();
  } else {
    clear_has_revenge_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerInvadeRecord.revenge_reward)
}
void PlayerInvadeRecord::clear_revenge_reward() {
  if (revenge_reward_ != NULL) revenge_reward_->Clear();
  clear_has_revenge_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInvadeRecord::kIdFieldNumber;
const int PlayerInvadeRecord::kStateFieldNumber;
const int PlayerInvadeRecord::kPlayerFieldNumber;
const int PlayerInvadeRecord::kHappenTimeFieldNumber;
const int PlayerInvadeRecord::kRevengeDeadlineFieldNumber;
const int PlayerInvadeRecord::kResultFieldNumber;
const int PlayerInvadeRecord::kRevengeRewardFieldNumber;
const int PlayerInvadeRecord::kScoreChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInvadeRecord::PlayerInvadeRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PlayerInvadeRecord)
}
PlayerInvadeRecord::PlayerInvadeRecord(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeRecord.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PlayerInvadeRecord)
}
PlayerInvadeRecord::PlayerInvadeRecord(const PlayerInvadeRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::sg::UserInfo(*from.player_);
  } else {
    player_ = NULL;
  }
  if (from.has_revenge_reward()) {
    revenge_reward_ = new ::sg::Reward(*from.revenge_reward_);
  } else {
    revenge_reward_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_change_) -
    reinterpret_cast<char*>(&id_)) + sizeof(score_change_));
  // @@protoc_insertion_point(copy_constructor:sg.PlayerInvadeRecord)
}

void PlayerInvadeRecord::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_change_) -
      reinterpret_cast<char*>(&player_)) + sizeof(score_change_));
}

PlayerInvadeRecord::~PlayerInvadeRecord() {
  // @@protoc_insertion_point(destructor:sg.PlayerInvadeRecord)
  SharedDtor();
}

void PlayerInvadeRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete revenge_reward_;
}

void PlayerInvadeRecord::ArenaDtor(void* object) {
  PlayerInvadeRecord* _this = reinterpret_cast< PlayerInvadeRecord* >(object);
  (void)_this;
}
void PlayerInvadeRecord::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PlayerInvadeRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerInvadeRecord::descriptor() {
  ::protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInvadeRecord& PlayerInvadeRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeRecord.base);
  return *internal_default_instance();
}


void PlayerInvadeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PlayerInvadeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_ != NULL);
      player_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(revenge_reward_ != NULL);
      revenge_reward_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_change_) -
        reinterpret_cast<char*>(&id_)) + sizeof(score_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerInvadeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PlayerInvadeRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserInfo player = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 happen_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_happen_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &happen_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 revenge_deadline = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_revenge_deadline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &revenge_deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward revenge_reward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_revenge_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score_change = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_score_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PlayerInvadeRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PlayerInvadeRecord)
  return false;
#undef DO_
}

void PlayerInvadeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PlayerInvadeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional .sg.UserInfo player = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_player(), output);
  }

  // optional sfixed64 happen_time = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->happen_time(), output);
  }

  // optional sfixed64 revenge_deadline = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->revenge_deadline(), output);
  }

  // optional int32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->result(), output);
  }

  // optional .sg.Reward revenge_reward = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_revenge_reward(), output);
  }

  // optional int32 score_change = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->score_change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PlayerInvadeRecord)
}

::google::protobuf::uint8* PlayerInvadeRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PlayerInvadeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional .sg.UserInfo player = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_player(), deterministic, target);
  }

  // optional sfixed64 happen_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->happen_time(), target);
  }

  // optional sfixed64 revenge_deadline = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->revenge_deadline(), target);
  }

  // optional int32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->result(), target);
  }

  // optional .sg.Reward revenge_reward = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_revenge_reward(), deterministic, target);
  }

  // optional int32 score_change = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->score_change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PlayerInvadeRecord)
  return target;
}

size_t PlayerInvadeRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.PlayerInvadeRecord)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t PlayerInvadeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PlayerInvadeRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserInfo player = 3;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_);
    }

    // optional .sg.Reward revenge_reward = 7;
    if (has_revenge_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *revenge_reward_);
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional sfixed64 happen_time = 4;
    if (has_happen_time()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 revenge_deadline = 5;
    if (has_revenge_deadline()) {
      total_size += 1 + 8;
    }

    // optional int32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 score_change = 8;
    if (has_score_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_change());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInvadeRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PlayerInvadeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInvadeRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInvadeRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PlayerInvadeRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PlayerInvadeRecord)
    MergeFrom(*source);
  }
}

void PlayerInvadeRecord::MergeFrom(const PlayerInvadeRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PlayerInvadeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player()->::sg::UserInfo::MergeFrom(from.player());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_revenge_reward()->::sg::Reward::MergeFrom(from.revenge_reward());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      happen_time_ = from.happen_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      revenge_deadline_ = from.revenge_deadline_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      score_change_ = from.score_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInvadeRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PlayerInvadeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInvadeRecord::CopyFrom(const PlayerInvadeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PlayerInvadeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInvadeRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  if (has_revenge_reward()) {
    if (!this->revenge_reward_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInvadeRecord::Swap(PlayerInvadeRecord* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PlayerInvadeRecord* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PlayerInvadeRecord::UnsafeArenaSwap(PlayerInvadeRecord* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PlayerInvadeRecord::InternalSwap(PlayerInvadeRecord* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(revenge_reward_, other->revenge_reward_);
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(happen_time_, other->happen_time_);
  swap(revenge_deadline_, other->revenge_deadline_);
  swap(result_, other->result_);
  swap(score_change_, other->score_change_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerInvadeRecord::GetMetadata() const {
  protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerInvadeState::InitAsDefaultInstance() {
  ::sg::_PlayerInvadeState_default_instance_._instance.get_mutable()->match_player_ = const_cast< ::sg::UserInfo*>(
      ::sg::UserInfo::internal_default_instance());
}
void PlayerInvadeState::unsafe_arena_set_allocated_match_player(
    ::sg::UserInfo* match_player) {
  if (GetArenaNoVirtual() == NULL) {
    delete match_player_;
  }
  match_player_ = match_player;
  if (match_player) {
    set_has_match_player();
  } else {
    clear_has_match_player();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerInvadeState.match_player)
}
void PlayerInvadeState::clear_match_player() {
  if (match_player_ != NULL) match_player_->Clear();
  clear_has_match_player();
}
void PlayerInvadeState::clear_drop_get() {
  drop_get_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInvadeState::kMatchPlayerFieldNumber;
const int PlayerInvadeState::kDefendDeadlineFieldNumber;
const int PlayerInvadeState::kDeadlineFieldNumber;
const int PlayerInvadeState::kWinFieldNumber;
const int PlayerInvadeState::kDropGetFieldNumber;
const int PlayerInvadeState::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInvadeState::PlayerInvadeState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PlayerInvadeState)
}
PlayerInvadeState::PlayerInvadeState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  drop_get_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeState.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PlayerInvadeState)
}
PlayerInvadeState::PlayerInvadeState(const PlayerInvadeState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      drop_get_(from.drop_get_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match_player()) {
    match_player_ = new ::sg::UserInfo(*from.match_player_);
  } else {
    match_player_ = NULL;
  }
  ::memcpy(&defend_deadline_, &from.defend_deadline_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&defend_deadline_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:sg.PlayerInvadeState)
}

void PlayerInvadeState::SharedCtor() {
  ::memset(&match_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&match_player_)) + sizeof(score_));
}

PlayerInvadeState::~PlayerInvadeState() {
  // @@protoc_insertion_point(destructor:sg.PlayerInvadeState)
  SharedDtor();
}

void PlayerInvadeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete match_player_;
}

void PlayerInvadeState::ArenaDtor(void* object) {
  PlayerInvadeState* _this = reinterpret_cast< PlayerInvadeState* >(object);
  (void)_this;
}
void PlayerInvadeState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PlayerInvadeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerInvadeState::descriptor() {
  ::protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInvadeState& PlayerInvadeState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeState.base);
  return *internal_default_instance();
}


void PlayerInvadeState::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PlayerInvadeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drop_get_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(match_player_ != NULL);
    match_player_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&defend_deadline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&defend_deadline_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerInvadeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PlayerInvadeState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserInfo match_player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 defend_deadline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_defend_deadline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &defend_deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 deadline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_deadline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 win = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_win();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int drop_get = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_drop_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PlayerInvadeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PlayerInvadeState)
  return false;
#undef DO_
}

void PlayerInvadeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PlayerInvadeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserInfo match_player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_match_player(), output);
  }

  // optional sfixed64 defend_deadline = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->defend_deadline(), output);
  }

  // optional sfixed64 deadline = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->deadline(), output);
  }

  // optional int32 win = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->win(), output);
  }

  // repeated .sg.pb_pair_int_int drop_get = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drop_get_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->drop_get(static_cast<int>(i)),
      output);
  }

  // optional int32 score = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PlayerInvadeState)
}

::google::protobuf::uint8* PlayerInvadeState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PlayerInvadeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserInfo match_player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_match_player(), deterministic, target);
  }

  // optional sfixed64 defend_deadline = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->defend_deadline(), target);
  }

  // optional sfixed64 deadline = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->deadline(), target);
  }

  // optional int32 win = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->win(), target);
  }

  // repeated .sg.pb_pair_int_int drop_get = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drop_get_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->drop_get(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 score = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PlayerInvadeState)
  return target;
}

size_t PlayerInvadeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PlayerInvadeState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.pb_pair_int_int drop_get = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->drop_get_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->drop_get(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .sg.UserInfo match_player = 1;
    if (has_match_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_player_);
    }

    // optional sfixed64 defend_deadline = 2;
    if (has_defend_deadline()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 deadline = 3;
    if (has_deadline()) {
      total_size += 1 + 8;
    }

    // optional int32 win = 4;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

    // optional int32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInvadeState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PlayerInvadeState)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInvadeState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInvadeState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PlayerInvadeState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PlayerInvadeState)
    MergeFrom(*source);
  }
}

void PlayerInvadeState::MergeFrom(const PlayerInvadeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PlayerInvadeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drop_get_.MergeFrom(from.drop_get_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_match_player()->::sg::UserInfo::MergeFrom(from.match_player());
    }
    if (cached_has_bits & 0x00000002u) {
      defend_deadline_ = from.defend_deadline_;
    }
    if (cached_has_bits & 0x00000004u) {
      deadline_ = from.deadline_;
    }
    if (cached_has_bits & 0x00000008u) {
      win_ = from.win_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInvadeState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PlayerInvadeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInvadeState::CopyFrom(const PlayerInvadeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PlayerInvadeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInvadeState::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->drop_get())) return false;
  if (has_match_player()) {
    if (!this->match_player_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInvadeState::Swap(PlayerInvadeState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PlayerInvadeState* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PlayerInvadeState::UnsafeArenaSwap(PlayerInvadeState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PlayerInvadeState::InternalSwap(PlayerInvadeState* other) {
  using std::swap;
  CastToBase(&drop_get_)->InternalSwap(CastToBase(&other->drop_get_));
  swap(match_player_, other->match_player_);
  swap(defend_deadline_, other->defend_deadline_);
  swap(deadline_, other->deadline_);
  swap(win_, other->win_);
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerInvadeState::GetMetadata() const {
  protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerInvadeService_PlayerInvadeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInvadeService_PlayerInvadeRequest::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInvadeService_PlayerInvadeRequest::PlayerInvadeService_PlayerInvadeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService_PlayerInvadeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PlayerInvadeService.PlayerInvadeRequest)
}
PlayerInvadeService_PlayerInvadeRequest::PlayerInvadeService_PlayerInvadeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService_PlayerInvadeRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PlayerInvadeService.PlayerInvadeRequest)
}
PlayerInvadeService_PlayerInvadeRequest::PlayerInvadeService_PlayerInvadeRequest(const PlayerInvadeService_PlayerInvadeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:sg.PlayerInvadeService.PlayerInvadeRequest)
}

void PlayerInvadeService_PlayerInvadeRequest::SharedCtor() {
  cmd_ = 1;
}

PlayerInvadeService_PlayerInvadeRequest::~PlayerInvadeService_PlayerInvadeRequest() {
  // @@protoc_insertion_point(destructor:sg.PlayerInvadeService.PlayerInvadeRequest)
  SharedDtor();
}

void PlayerInvadeService_PlayerInvadeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PlayerInvadeService_PlayerInvadeRequest::ArenaDtor(void* object) {
  PlayerInvadeService_PlayerInvadeRequest* _this = reinterpret_cast< PlayerInvadeService_PlayerInvadeRequest* >(object);
  (void)_this;
}
void PlayerInvadeService_PlayerInvadeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PlayerInvadeService_PlayerInvadeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerInvadeService_PlayerInvadeRequest::descriptor() {
  ::protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInvadeService_PlayerInvadeRequest& PlayerInvadeService_PlayerInvadeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService_PlayerInvadeRequest.base);
  return *internal_default_instance();
}


void PlayerInvadeService_PlayerInvadeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PlayerInvadeService.PlayerInvadeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerInvadeService_PlayerInvadeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PlayerInvadeService.PlayerInvadeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.PlayerInvadeService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::PlayerInvadeService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::PlayerInvadeService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PlayerInvadeService.PlayerInvadeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PlayerInvadeService.PlayerInvadeRequest)
  return false;
#undef DO_
}

void PlayerInvadeService_PlayerInvadeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PlayerInvadeService.PlayerInvadeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PlayerInvadeService.CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PlayerInvadeService.PlayerInvadeRequest)
}

::google::protobuf::uint8* PlayerInvadeService_PlayerInvadeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PlayerInvadeService.PlayerInvadeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PlayerInvadeService.CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PlayerInvadeService.PlayerInvadeRequest)
  return target;
}

size_t PlayerInvadeService_PlayerInvadeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PlayerInvadeService.PlayerInvadeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.PlayerInvadeService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInvadeService_PlayerInvadeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PlayerInvadeService.PlayerInvadeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInvadeService_PlayerInvadeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInvadeService_PlayerInvadeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PlayerInvadeService.PlayerInvadeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PlayerInvadeService.PlayerInvadeRequest)
    MergeFrom(*source);
  }
}

void PlayerInvadeService_PlayerInvadeRequest::MergeFrom(const PlayerInvadeService_PlayerInvadeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PlayerInvadeService.PlayerInvadeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmd()) {
    set_cmd(from.cmd());
  }
}

void PlayerInvadeService_PlayerInvadeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PlayerInvadeService.PlayerInvadeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInvadeService_PlayerInvadeRequest::CopyFrom(const PlayerInvadeService_PlayerInvadeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PlayerInvadeService.PlayerInvadeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInvadeService_PlayerInvadeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PlayerInvadeService_PlayerInvadeRequest::Swap(PlayerInvadeService_PlayerInvadeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PlayerInvadeService_PlayerInvadeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PlayerInvadeService_PlayerInvadeRequest::UnsafeArenaSwap(PlayerInvadeService_PlayerInvadeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PlayerInvadeService_PlayerInvadeRequest::InternalSwap(PlayerInvadeService_PlayerInvadeRequest* other) {
  using std::swap;
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerInvadeService_PlayerInvadeRequest::GetMetadata() const {
  protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerInvadeService_PlayerInvadeResponse::InitAsDefaultInstance() {
  ::sg::_PlayerInvadeService_PlayerInvadeResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::sg::PlayerInvadeState*>(
      ::sg::PlayerInvadeState::internal_default_instance());
}
void PlayerInvadeService_PlayerInvadeResponse::unsafe_arena_set_allocated_state(
    ::sg::PlayerInvadeState* state) {
  if (GetArenaNoVirtual() == NULL) {
    delete state_;
  }
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerInvadeService.PlayerInvadeResponse.state)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInvadeService_PlayerInvadeResponse::kResultFieldNumber;
const int PlayerInvadeService_PlayerInvadeResponse::kStateFieldNumber;
const int PlayerInvadeService_PlayerInvadeResponse::kRecordListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInvadeService_PlayerInvadeResponse::PlayerInvadeService_PlayerInvadeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService_PlayerInvadeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PlayerInvadeService.PlayerInvadeResponse)
}
PlayerInvadeService_PlayerInvadeResponse::PlayerInvadeService_PlayerInvadeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  record_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService_PlayerInvadeResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PlayerInvadeService.PlayerInvadeResponse)
}
PlayerInvadeService_PlayerInvadeResponse::PlayerInvadeService_PlayerInvadeResponse(const PlayerInvadeService_PlayerInvadeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      record_list_(from.record_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::sg::PlayerInvadeState(*from.state_);
  } else {
    state_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.PlayerInvadeService.PlayerInvadeResponse)
}

void PlayerInvadeService_PlayerInvadeResponse::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&state_)) + sizeof(result_));
}

PlayerInvadeService_PlayerInvadeResponse::~PlayerInvadeService_PlayerInvadeResponse() {
  // @@protoc_insertion_point(destructor:sg.PlayerInvadeService.PlayerInvadeResponse)
  SharedDtor();
}

void PlayerInvadeService_PlayerInvadeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete state_;
}

void PlayerInvadeService_PlayerInvadeResponse::ArenaDtor(void* object) {
  PlayerInvadeService_PlayerInvadeResponse* _this = reinterpret_cast< PlayerInvadeService_PlayerInvadeResponse* >(object);
  (void)_this;
}
void PlayerInvadeService_PlayerInvadeResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PlayerInvadeService_PlayerInvadeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerInvadeService_PlayerInvadeResponse::descriptor() {
  ::protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInvadeService_PlayerInvadeResponse& PlayerInvadeService_PlayerInvadeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService_PlayerInvadeResponse.base);
  return *internal_default_instance();
}


void PlayerInvadeService_PlayerInvadeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PlayerInvadeService.PlayerInvadeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerInvadeService_PlayerInvadeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PlayerInvadeService.PlayerInvadeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PlayerInvadeState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.PlayerInvadeRecord record_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PlayerInvadeService.PlayerInvadeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PlayerInvadeService.PlayerInvadeResponse)
  return false;
#undef DO_
}

void PlayerInvadeService_PlayerInvadeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PlayerInvadeService.PlayerInvadeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.PlayerInvadeState state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  // repeated .sg.PlayerInvadeRecord record_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->record_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PlayerInvadeService.PlayerInvadeResponse)
}

::google::protobuf::uint8* PlayerInvadeService_PlayerInvadeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PlayerInvadeService.PlayerInvadeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.PlayerInvadeState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  // repeated .sg.PlayerInvadeRecord record_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->record_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PlayerInvadeService.PlayerInvadeResponse)
  return target;
}

size_t PlayerInvadeService_PlayerInvadeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PlayerInvadeService.PlayerInvadeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.PlayerInvadeRecord record_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->record_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->record_list(static_cast<int>(i)));
    }
  }

  // optional .sg.PlayerInvadeState state = 2;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInvadeService_PlayerInvadeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PlayerInvadeService.PlayerInvadeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInvadeService_PlayerInvadeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInvadeService_PlayerInvadeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PlayerInvadeService.PlayerInvadeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PlayerInvadeService.PlayerInvadeResponse)
    MergeFrom(*source);
  }
}

void PlayerInvadeService_PlayerInvadeResponse::MergeFrom(const PlayerInvadeService_PlayerInvadeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PlayerInvadeService.PlayerInvadeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_list_.MergeFrom(from.record_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::sg::PlayerInvadeState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInvadeService_PlayerInvadeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PlayerInvadeService.PlayerInvadeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInvadeService_PlayerInvadeResponse::CopyFrom(const PlayerInvadeService_PlayerInvadeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PlayerInvadeService.PlayerInvadeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInvadeService_PlayerInvadeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record_list())) return false;
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInvadeService_PlayerInvadeResponse::Swap(PlayerInvadeService_PlayerInvadeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PlayerInvadeService_PlayerInvadeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PlayerInvadeService_PlayerInvadeResponse::UnsafeArenaSwap(PlayerInvadeService_PlayerInvadeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PlayerInvadeService_PlayerInvadeResponse::InternalSwap(PlayerInvadeService_PlayerInvadeResponse* other) {
  using std::swap;
  CastToBase(&record_list_)->InternalSwap(CastToBase(&other->record_list_));
  swap(state_, other->state_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerInvadeService_PlayerInvadeResponse::GetMetadata() const {
  protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerInvadeService::InitAsDefaultInstance() {
  ::sg::_PlayerInvadeService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::PlayerInvadeService_PlayerInvadeRequest*>(
      ::sg::PlayerInvadeService_PlayerInvadeRequest::internal_default_instance());
  ::sg::_PlayerInvadeService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::PlayerInvadeService_PlayerInvadeResponse*>(
      ::sg::PlayerInvadeService_PlayerInvadeResponse::internal_default_instance());
}
void PlayerInvadeService::unsafe_arena_set_allocated_req(
    ::sg::PlayerInvadeService_PlayerInvadeRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerInvadeService.req)
}
void PlayerInvadeService::unsafe_arena_set_allocated_resp(
    ::sg::PlayerInvadeService_PlayerInvadeResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerInvadeService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInvadeService::kReqFieldNumber;
const int PlayerInvadeService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInvadeService::PlayerInvadeService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PlayerInvadeService)
}
PlayerInvadeService::PlayerInvadeService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PlayerInvadeService)
}
PlayerInvadeService::PlayerInvadeService(const PlayerInvadeService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::PlayerInvadeService_PlayerInvadeRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::PlayerInvadeService_PlayerInvadeResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.PlayerInvadeService)
}

void PlayerInvadeService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

PlayerInvadeService::~PlayerInvadeService() {
  // @@protoc_insertion_point(destructor:sg.PlayerInvadeService)
  SharedDtor();
}

void PlayerInvadeService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void PlayerInvadeService::ArenaDtor(void* object) {
  PlayerInvadeService* _this = reinterpret_cast< PlayerInvadeService* >(object);
  (void)_this;
}
void PlayerInvadeService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PlayerInvadeService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerInvadeService::descriptor() {
  ::protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInvadeService& PlayerInvadeService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeService.base);
  return *internal_default_instance();
}


void PlayerInvadeService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PlayerInvadeService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerInvadeService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PlayerInvadeService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.PlayerInvadeService.PlayerInvadeRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PlayerInvadeService.PlayerInvadeResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PlayerInvadeService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PlayerInvadeService)
  return false;
#undef DO_
}

void PlayerInvadeService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PlayerInvadeService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.PlayerInvadeService.PlayerInvadeRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.PlayerInvadeService.PlayerInvadeResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PlayerInvadeService)
}

::google::protobuf::uint8* PlayerInvadeService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PlayerInvadeService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.PlayerInvadeService.PlayerInvadeRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.PlayerInvadeService.PlayerInvadeResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PlayerInvadeService)
  return target;
}

size_t PlayerInvadeService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PlayerInvadeService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.PlayerInvadeService.PlayerInvadeRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.PlayerInvadeService.PlayerInvadeResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInvadeService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PlayerInvadeService)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInvadeService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInvadeService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PlayerInvadeService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PlayerInvadeService)
    MergeFrom(*source);
  }
}

void PlayerInvadeService::MergeFrom(const PlayerInvadeService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PlayerInvadeService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::PlayerInvadeService_PlayerInvadeRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::PlayerInvadeService_PlayerInvadeResponse::MergeFrom(from.resp());
    }
  }
}

void PlayerInvadeService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PlayerInvadeService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInvadeService::CopyFrom(const PlayerInvadeService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PlayerInvadeService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInvadeService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInvadeService::Swap(PlayerInvadeService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PlayerInvadeService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PlayerInvadeService::UnsafeArenaSwap(PlayerInvadeService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PlayerInvadeService::InternalSwap(PlayerInvadeService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerInvadeService::GetMetadata() const {
  protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerInvadeNotify::InitAsDefaultInstance() {
  ::sg::_PlayerInvadeNotify_default_instance_._instance.get_mutable()->record_ = const_cast< ::sg::PlayerInvadeRecord*>(
      ::sg::PlayerInvadeRecord::internal_default_instance());
  ::sg::_PlayerInvadeNotify_default_instance_._instance.get_mutable()->lose_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void PlayerInvadeNotify::unsafe_arena_set_allocated_record(
    ::sg::PlayerInvadeRecord* record) {
  if (GetArenaNoVirtual() == NULL) {
    delete record_;
  }
  record_ = record;
  if (record) {
    set_has_record();
  } else {
    clear_has_record();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerInvadeNotify.record)
}
void PlayerInvadeNotify::unsafe_arena_set_allocated_lose(
    ::sg::Reward* lose) {
  if (GetArenaNoVirtual() == NULL) {
    delete lose_;
  }
  lose_ = lose;
  if (lose) {
    set_has_lose();
  } else {
    clear_has_lose();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerInvadeNotify.lose)
}
void PlayerInvadeNotify::clear_lose() {
  if (lose_ != NULL) lose_->Clear();
  clear_has_lose();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInvadeNotify::kRecordFieldNumber;
const int PlayerInvadeNotify::kLoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInvadeNotify::PlayerInvadeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PlayerInvadeNotify)
}
PlayerInvadeNotify::PlayerInvadeNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PlayerInvadeNotify)
}
PlayerInvadeNotify::PlayerInvadeNotify(const PlayerInvadeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_record()) {
    record_ = new ::sg::PlayerInvadeRecord(*from.record_);
  } else {
    record_ = NULL;
  }
  if (from.has_lose()) {
    lose_ = new ::sg::Reward(*from.lose_);
  } else {
    lose_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.PlayerInvadeNotify)
}

void PlayerInvadeNotify::SharedCtor() {
  ::memset(&record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lose_) -
      reinterpret_cast<char*>(&record_)) + sizeof(lose_));
}

PlayerInvadeNotify::~PlayerInvadeNotify() {
  // @@protoc_insertion_point(destructor:sg.PlayerInvadeNotify)
  SharedDtor();
}

void PlayerInvadeNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete record_;
  if (this != internal_default_instance()) delete lose_;
}

void PlayerInvadeNotify::ArenaDtor(void* object) {
  PlayerInvadeNotify* _this = reinterpret_cast< PlayerInvadeNotify* >(object);
  (void)_this;
}
void PlayerInvadeNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PlayerInvadeNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerInvadeNotify::descriptor() {
  ::protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInvadeNotify& PlayerInvadeNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PlayerInvade_2eproto::scc_info_PlayerInvadeNotify.base);
  return *internal_default_instance();
}


void PlayerInvadeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PlayerInvadeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(record_ != NULL);
      record_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lose_ != NULL);
      lose_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerInvadeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PlayerInvadeNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.PlayerInvadeRecord record = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward lose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PlayerInvadeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PlayerInvadeNotify)
  return false;
#undef DO_
}

void PlayerInvadeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PlayerInvadeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PlayerInvadeRecord record = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_record(), output);
  }

  // optional .sg.Reward lose = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_lose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PlayerInvadeNotify)
}

::google::protobuf::uint8* PlayerInvadeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PlayerInvadeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PlayerInvadeRecord record = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_record(), deterministic, target);
  }

  // optional .sg.Reward lose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_lose(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PlayerInvadeNotify)
  return target;
}

size_t PlayerInvadeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PlayerInvadeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.PlayerInvadeRecord record = 1;
  if (has_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *record_);
  }
  // optional .sg.Reward lose = 2;
  if (has_lose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lose_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInvadeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PlayerInvadeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInvadeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInvadeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PlayerInvadeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PlayerInvadeNotify)
    MergeFrom(*source);
  }
}

void PlayerInvadeNotify::MergeFrom(const PlayerInvadeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PlayerInvadeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_record()->::sg::PlayerInvadeRecord::MergeFrom(from.record());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lose()->::sg::Reward::MergeFrom(from.lose());
    }
  }
}

void PlayerInvadeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PlayerInvadeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInvadeNotify::CopyFrom(const PlayerInvadeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PlayerInvadeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInvadeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_record()) {
    if (!this->record_->IsInitialized()) return false;
  }
  if (has_lose()) {
    if (!this->lose_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInvadeNotify::Swap(PlayerInvadeNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PlayerInvadeNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PlayerInvadeNotify::UnsafeArenaSwap(PlayerInvadeNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PlayerInvadeNotify::InternalSwap(PlayerInvadeNotify* other) {
  using std::swap;
  swap(record_, other->record_);
  swap(lose_, other->lose_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerInvadeNotify::GetMetadata() const {
  protobuf_PlayerInvade_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlayerInvade_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PlayerInvadeRecord* Arena::CreateMaybeMessage< ::sg::PlayerInvadeRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PlayerInvadeRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PlayerInvadeState* Arena::CreateMaybeMessage< ::sg::PlayerInvadeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PlayerInvadeState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PlayerInvadeService_PlayerInvadeRequest* Arena::CreateMaybeMessage< ::sg::PlayerInvadeService_PlayerInvadeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PlayerInvadeService_PlayerInvadeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PlayerInvadeService_PlayerInvadeResponse* Arena::CreateMaybeMessage< ::sg::PlayerInvadeService_PlayerInvadeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PlayerInvadeService_PlayerInvadeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PlayerInvadeService* Arena::CreateMaybeMessage< ::sg::PlayerInvadeService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PlayerInvadeService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PlayerInvadeNotify* Arena::CreateMaybeMessage< ::sg::PlayerInvadeNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PlayerInvadeNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
