// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserHarbour.proto

#include "UserHarbour.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_UserHarbour_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FoodStyle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HarborInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HarborNpc_resident_task;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HarborPopulation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SeatFoodOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SeatMenuFood;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserHarborNpcService_HarborNpcRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HarborNpc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HarborNpcInfoList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HarborNpcList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HarborPopulationList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SeatFoodOrderList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SeatMenu;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserFoodOrderService_FoodOrderRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_HarborNpcInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserFoodOrderService_FoodOrderResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHarbour_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_UserHarborNpcService_HarborNpcResponse;
}  // namespace protobuf_UserHarbour_2eproto
namespace sg {
class HarborInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborInfo>
      _instance;
} _HarborInfo_default_instance_;
class HarborNpc_resident_taskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborNpc_resident_task>
      _instance;
} _HarborNpc_resident_task_default_instance_;
class HarborNpcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborNpc>
      _instance;
} _HarborNpc_default_instance_;
class HarborNpcListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborNpcList>
      _instance;
} _HarborNpcList_default_instance_;
class HarborPopulationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborPopulation>
      _instance;
} _HarborPopulation_default_instance_;
class HarborPopulationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborPopulationList>
      _instance;
} _HarborPopulationList_default_instance_;
class HarborNpcInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborNpcInfo>
      _instance;
} _HarborNpcInfo_default_instance_;
class HarborNpcInfoListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborNpcInfoList>
      _instance;
} _HarborNpcInfoList_default_instance_;
class UserHarborNpcService_HarborNpcRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHarborNpcService_HarborNpcRequest>
      _instance;
} _UserHarborNpcService_HarborNpcRequest_default_instance_;
class UserHarborNpcService_HarborNpcResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHarborNpcService_HarborNpcResponse>
      _instance;
} _UserHarborNpcService_HarborNpcResponse_default_instance_;
class UserHarborNpcServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHarborNpcService>
      _instance;
} _UserHarborNpcService_default_instance_;
class HarborStateNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborStateNotify>
      _instance;
} _HarborStateNotify_default_instance_;
class HarborNpcStateNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarborNpcStateNotify>
      _instance;
} _HarborNpcStateNotify_default_instance_;
class FoodStyleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FoodStyle>
      _instance;
} _FoodStyle_default_instance_;
class FoodStyleListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FoodStyleList>
      _instance;
} _FoodStyleList_default_instance_;
class SeatFoodOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeatFoodOrder>
      _instance;
} _SeatFoodOrder_default_instance_;
class SeatFoodOrderListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeatFoodOrderList>
      _instance;
} _SeatFoodOrderList_default_instance_;
class SeatMenuFoodDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeatMenuFood>
      _instance;
} _SeatMenuFood_default_instance_;
class SeatMenuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeatMenu>
      _instance;
} _SeatMenu_default_instance_;
class UserFoodOrderService_FoodOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserFoodOrderService_FoodOrderRequest>
      _instance;
} _UserFoodOrderService_FoodOrderRequest_default_instance_;
class UserFoodOrderService_FoodOrderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserFoodOrderService_FoodOrderResponse>
      _instance;
} _UserFoodOrderService_FoodOrderResponse_default_instance_;
class UserFoodOrderServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserFoodOrderService>
      _instance;
} _UserFoodOrderService_default_instance_;
class SeatFoodOrderStateNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeatFoodOrderStateNotify>
      _instance;
} _SeatFoodOrderStateNotify_default_instance_;
}  // namespace sg
namespace protobuf_UserHarbour_2eproto {
static void InitDefaultsHarborInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborInfo_default_instance_;
    new (ptr) ::sg::HarborInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HarborInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHarborInfo}, {}};

static void InitDefaultsHarborNpc_resident_task() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborNpc_resident_task_default_instance_;
    new (ptr) ::sg::HarborNpc_resident_task();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborNpc_resident_task::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HarborNpc_resident_task =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHarborNpc_resident_task}, {}};

static void InitDefaultsHarborNpc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborNpc_default_instance_;
    new (ptr) ::sg::HarborNpc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborNpc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HarborNpc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHarborNpc}, {
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpc_resident_task.base,}};

static void InitDefaultsHarborNpcList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborNpcList_default_instance_;
    new (ptr) ::sg::HarborNpcList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborNpcList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HarborNpcList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHarborNpcList}, {
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpc.base,}};

static void InitDefaultsHarborPopulation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborPopulation_default_instance_;
    new (ptr) ::sg::HarborPopulation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborPopulation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HarborPopulation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHarborPopulation}, {}};

static void InitDefaultsHarborPopulationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborPopulationList_default_instance_;
    new (ptr) ::sg::HarborPopulationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborPopulationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HarborPopulationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHarborPopulationList}, {
      &protobuf_UserHarbour_2eproto::scc_info_HarborPopulation.base,}};

static void InitDefaultsHarborNpcInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborNpcInfo_default_instance_;
    new (ptr) ::sg::HarborNpcInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborNpcInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HarborNpcInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHarborNpcInfo}, {
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpcList.base,
      &protobuf_UserHarbour_2eproto::scc_info_HarborInfo.base,}};

static void InitDefaultsHarborNpcInfoList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborNpcInfoList_default_instance_;
    new (ptr) ::sg::HarborNpcInfoList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborNpcInfoList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HarborNpcInfoList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHarborNpcInfoList}, {
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpcInfo.base,}};

static void InitDefaultsUserHarborNpcService_HarborNpcRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserHarborNpcService_HarborNpcRequest_default_instance_;
    new (ptr) ::sg::UserHarborNpcService_HarborNpcRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserHarborNpcService_HarborNpcRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserHarborNpcService_HarborNpcRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserHarborNpcService_HarborNpcRequest}, {}};

static void InitDefaultsUserHarborNpcService_HarborNpcResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserHarborNpcService_HarborNpcResponse_default_instance_;
    new (ptr) ::sg::UserHarborNpcService_HarborNpcResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserHarborNpcService_HarborNpcResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_UserHarborNpcService_HarborNpcResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsUserHarborNpcService_HarborNpcResponse}, {
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpcList.base,
      &protobuf_UserHarbour_2eproto::scc_info_HarborInfo.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,
      &protobuf_UserHarbour_2eproto::scc_info_HarborPopulationList.base,
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpcInfoList.base,}};

static void InitDefaultsUserHarborNpcService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserHarborNpcService_default_instance_;
    new (ptr) ::sg::UserHarborNpcService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserHarborNpcService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserHarborNpcService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserHarborNpcService}, {
      &protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService_HarborNpcRequest.base,
      &protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService_HarborNpcResponse.base,}};

static void InitDefaultsHarborStateNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborStateNotify_default_instance_;
    new (ptr) ::sg::HarborStateNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborStateNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HarborStateNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHarborStateNotify}, {
      &protobuf_UserHarbour_2eproto::scc_info_HarborInfo.base,}};

static void InitDefaultsHarborNpcStateNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarborNpcStateNotify_default_instance_;
    new (ptr) ::sg::HarborNpcStateNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarborNpcStateNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HarborNpcStateNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHarborNpcStateNotify}, {
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpcList.base,}};

static void InitDefaultsFoodStyle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FoodStyle_default_instance_;
    new (ptr) ::sg::FoodStyle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FoodStyle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FoodStyle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFoodStyle}, {}};

static void InitDefaultsFoodStyleList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FoodStyleList_default_instance_;
    new (ptr) ::sg::FoodStyleList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FoodStyleList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FoodStyleList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFoodStyleList}, {
      &protobuf_UserHarbour_2eproto::scc_info_FoodStyle.base,}};

static void InitDefaultsSeatFoodOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SeatFoodOrder_default_instance_;
    new (ptr) ::sg::SeatFoodOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SeatFoodOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SeatFoodOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSeatFoodOrder}, {}};

static void InitDefaultsSeatFoodOrderList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SeatFoodOrderList_default_instance_;
    new (ptr) ::sg::SeatFoodOrderList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SeatFoodOrderList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SeatFoodOrderList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSeatFoodOrderList}, {
      &protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrder.base,}};

static void InitDefaultsSeatMenuFood() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SeatMenuFood_default_instance_;
    new (ptr) ::sg::SeatMenuFood();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SeatMenuFood::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SeatMenuFood =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSeatMenuFood}, {}};

static void InitDefaultsSeatMenu() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SeatMenu_default_instance_;
    new (ptr) ::sg::SeatMenu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SeatMenu::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SeatMenu =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSeatMenu}, {
      &protobuf_UserHarbour_2eproto::scc_info_SeatMenuFood.base,}};

static void InitDefaultsUserFoodOrderService_FoodOrderRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserFoodOrderService_FoodOrderRequest_default_instance_;
    new (ptr) ::sg::UserFoodOrderService_FoodOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserFoodOrderService_FoodOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserFoodOrderService_FoodOrderRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserFoodOrderService_FoodOrderRequest}, {
      &protobuf_UserHarbour_2eproto::scc_info_SeatMenu.base,}};

static void InitDefaultsUserFoodOrderService_FoodOrderResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserFoodOrderService_FoodOrderResponse_default_instance_;
    new (ptr) ::sg::UserFoodOrderService_FoodOrderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserFoodOrderService_FoodOrderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserFoodOrderService_FoodOrderResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserFoodOrderService_FoodOrderResponse}, {
      &protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrderList.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsUserFoodOrderService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserFoodOrderService_default_instance_;
    new (ptr) ::sg::UserFoodOrderService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserFoodOrderService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserFoodOrderService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserFoodOrderService}, {
      &protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService_FoodOrderRequest.base,
      &protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService_FoodOrderResponse.base,}};

static void InitDefaultsSeatFoodOrderStateNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SeatFoodOrderStateNotify_default_instance_;
    new (ptr) ::sg::SeatFoodOrderStateNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SeatFoodOrderStateNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SeatFoodOrderStateNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSeatFoodOrderStateNotify}, {
      &protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrderList.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HarborInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarborNpc_resident_task.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarborNpc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarborNpcList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarborPopulation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarborPopulationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarborNpcInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarborNpcInfoList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHarborNpcService_HarborNpcRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHarborNpcService_HarborNpcResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHarborNpcService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarborStateNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarborNpcStateNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FoodStyle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FoodStyleList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SeatFoodOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SeatFoodOrderList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SeatMenuFood.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SeatMenu.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserFoodOrderService_FoodOrderRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserFoodOrderService_FoodOrderResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserFoodOrderService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SeatFoodOrderStateNotify.base);
}

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborInfo, boom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborInfo, growtime_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc_resident_task, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc_resident_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc_resident_task, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc_resident_task, need_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc_resident_task, reward_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc_resident_task, reward_accept_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, npcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, npc_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, cfgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, wealth_grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, satisfaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, occupation_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, occupation_event_starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, question_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, special_cond_bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, satisfaction_accepted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, task_menu1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, task_menu2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, task_menu3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpc, optime_),
  3,
  4,
  5,
  17,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  14,
  15,
  12,
  0,
  1,
  2,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborPopulation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborPopulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborPopulation, harborid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborPopulation, population_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborPopulation, population_num_max_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborPopulationList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborPopulationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborPopulationList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcInfo, harborid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcInfo, npc_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcInfo, harbor_info_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcInfoList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcInfoList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcRequest, start_queueing_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcRequest, residentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcRequest, select_task_menuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcRequest, harborid_),
  3,
  ~0u,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcResponse, npc_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcResponse, harbor_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcResponse, resident_drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcResponse, population_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService_HarborNpcResponse, npc_info_list_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHarborNpcService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborStateNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborStateNotify, harbor_info_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcStateNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcStateNotify, npc_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarborNpcStateNotify, harborid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FoodStyle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FoodStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FoodStyle, attrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FoodStyle, minval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FoodStyle, maxval_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FoodStyleList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FoodStyleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FoodStyleList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, posid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, orderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, order_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, npcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, foodfilterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, recipeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, gather_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, gather_satisfaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, tip_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrder, tip_diamond_),
  0,
  1,
  2,
  3,
  13,
  4,
  5,
  6,
  7,
  9,
  10,
  11,
  12,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrderList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrderList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatMenuFood, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatMenuFood, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatMenuFood, posid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatMenuFood, itemid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatMenu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatMenu, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatMenu, menu_food_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderRequest, menu_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderResponse, order_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderResponse, out_drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderResponse, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService_FoodOrderResponse, diy_recipeid_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFoodOrderService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrderStateNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrderStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SeatFoodOrderStateNotify, order_list_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::sg::HarborInfo)},
  { 11, 20, sizeof(::sg::HarborNpc_resident_task)},
  { 24, 47, sizeof(::sg::HarborNpc)},
  { 65, 71, sizeof(::sg::HarborNpcList)},
  { 72, 80, sizeof(::sg::HarborPopulation)},
  { 83, 89, sizeof(::sg::HarborPopulationList)},
  { 90, 98, sizeof(::sg::HarborNpcInfo)},
  { 101, 107, sizeof(::sg::HarborNpcInfoList)},
  { 108, 118, sizeof(::sg::UserHarborNpcService_HarborNpcRequest)},
  { 123, 134, sizeof(::sg::UserHarborNpcService_HarborNpcResponse)},
  { 140, 147, sizeof(::sg::UserHarborNpcService)},
  { 149, 155, sizeof(::sg::HarborStateNotify)},
  { 156, 163, sizeof(::sg::HarborNpcStateNotify)},
  { 165, 173, sizeof(::sg::FoodStyle)},
  { 176, 182, sizeof(::sg::FoodStyleList)},
  { 183, 202, sizeof(::sg::SeatFoodOrder)},
  { 216, 222, sizeof(::sg::SeatFoodOrderList)},
  { 223, 230, sizeof(::sg::SeatMenuFood)},
  { 232, 239, sizeof(::sg::SeatMenu)},
  { 241, 248, sizeof(::sg::UserFoodOrderService_FoodOrderRequest)},
  { 250, 260, sizeof(::sg::UserFoodOrderService_FoodOrderResponse)},
  { 265, 272, sizeof(::sg::UserFoodOrderService)},
  { 274, 280, sizeof(::sg::SeatFoodOrderStateNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborNpc_resident_task_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborNpc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborNpcList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborPopulation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborPopulationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborNpcInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborNpcInfoList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserHarborNpcService_HarborNpcRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserHarborNpcService_HarborNpcResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserHarborNpcService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborStateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarborNpcStateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FoodStyle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FoodStyleList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SeatFoodOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SeatFoodOrderList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SeatMenuFood_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SeatMenu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserFoodOrderService_FoodOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserFoodOrderService_FoodOrderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserFoodOrderService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SeatFoodOrderStateNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "UserHarbour.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021UserHarbour.proto\022\002sg\032\020BaseStruct.prot"
      "o\"M\n\nHarborInfo\022\037\n\005state\030\001 \001(\0162\020.sg.HARB"
      "OR_STATE\022\014\n\004boom\030\002 \001(\005\022\020\n\010growtime\030\003 \001(\020"
      "\"\375\005\n\tHarborNpc\022\r\n\005npcid\030\001 \002(\005\022%\n\010npc_typ"
      "e\030\002 \001(\0162\023.sg.HARBOR_NPC_TYPE\022\r\n\005cfgid\030\003 "
      "\001(\004\022&\n\005state\030\004 \001(\0162\027.sg.HarborNpc.NPC_ST"
      "ATE\022\017\n\007seconds\030\005 \001(\005\022\024\n\014wealth_grade\030\013 \001"
      "(\005\022\014\n\004gold\030\014 \001(\005\022\024\n\014satisfaction\030\r \001(\005\022\016"
      "\n\006seatid\030\016 \001(\005\022\026\n\016occupation_val\030\025 \001(\005\022\""
      "\n\032occupation_event_starttime\030\026 \001(\020\022\027\n\017qu"
      "estion_status\030\027 \001(\005\022\032\n\022special_cond_bonu"
      "s\030\030 \001(\005\022\035\n\025satisfaction_accepted\030\031 \001(\005\022/"
      "\n\ntask_menu1\030\037 \001(\0132\033.sg.HarborNpc.reside"
      "nt_task\022/\n\ntask_menu2\030  \001(\0132\033.sg.HarborN"
      "pc.resident_task\022/\n\ntask_menu3\030! \001(\0132\033.s"
      "g.HarborNpc.resident_task\022\016\n\006optime\030) \001("
      "\020\032X\n\rresident_task\022\n\n\002id\030\001 \002(\005\022\020\n\010need_i"
      "dx\030\002 \001(\005\022\022\n\nreward_idx\030\003 \001(\005\022\025\n\rreward_a"
      "ccept\030\004 \001(\010\"\232\001\n\tNPC_STATE\022\026\n\tTO_DELETE\020\377"
      "\377\377\377\377\377\377\377\377\001\022\010\n\004IDLE\020\000\022\r\n\tGO_ABOARD\020\001\022\017\n\013IN"
      "_QUEUEING\020\002\022\r\n\tTAKE_SEAT\020\003\022\021\n\rORDER_SUCC"
      "ESS\020\004\022\017\n\013EATING_FOOD\020\005\022\013\n\007DISMISS\020\006\022\013\n\007W"
      "ORKING\020\007\",\n\rHarborNpcList\022\033\n\004list\030\001 \003(\0132"
      "\r.sg.HarborNpc\"X\n\020HarborPopulation\022\020\n\010ha"
      "rborid\030\001 \002(\005\022\026\n\016population_num\030\002 \002(\005\022\032\n\022"
      "population_num_max\030\003 \002(\005\":\n\024HarborPopula"
      "tionList\022\"\n\004list\030\001 \003(\0132\024.sg.HarborPopula"
      "tion\"k\n\rHarborNpcInfo\022\020\n\010harborid\030\001 \002(\005\022"
      "#\n\010npc_list\030\002 \001(\0132\021.sg.HarborNpcList\022#\n\013"
      "harbor_info\030\003 \001(\0132\016.sg.HarborInfo\"4\n\021Har"
      "borNpcInfoList\022\037\n\004list\030\001 \003(\0132\021.sg.Harbor"
      "NpcInfo\"\253\005\n\024UserHarborNpcService\0226\n\003req\030"
      "\001 \001(\0132).sg.UserHarborNpcService.HarborNp"
      "cRequest\0228\n\004resp\030\002 \001(\0132*.sg.UserHarborNp"
      "cService.HarborNpcResponse\032\244\001\n\020HarborNpc"
      "Request\0221\n\003cmd\030\001 \002(\0162$.sg.UserHarborNpcS"
      "ervice.NPC_COMMAND\022\033\n\023start_queueing_lis"
      "t\030\002 \003(\005\022\022\n\nresidentid\030\003 \001(\005\022\032\n\022select_ta"
      "sk_menuid\030\004 \001(\005\022\020\n\010harborid\030\005 \001(\005\032\361\001\n\021Ha"
      "rborNpcResponse\022\016\n\006result\030\001 \002(\005\022#\n\010npc_l"
      "ist\030\002 \001(\0132\021.sg.HarborNpcList\022#\n\013harbor_i"
      "nfo\030\003 \001(\0132\016.sg.HarborInfo\022!\n\rresident_dr"
      "op\030\004 \001(\0132\n.sg.Reward\0221\n\017population_list\030"
      "\013 \001(\0132\030.sg.HarborPopulationList\022,\n\rnpc_i"
      "nfo_list\030\014 \001(\0132\025.sg.HarborNpcInfoList\"\205\001"
      "\n\013NPC_COMMAND\022\t\n\005QUERY\020\001\022\010\n\004OPEN\020\002\022\t\n\005CL"
      "OSE\020\003\022\022\n\016START_QUEUEING\020\004\022\021\n\rCOMPLETE_TA"
      "SK\020\005\022\024\n\020QUERY_POPULATION\020\013\022\031\n\025QUERY_HARB"
      "OR_NPC_INFO\020\014\"8\n\021HarborStateNotify\022#\n\013ha"
      "rbor_info\030\001 \002(\0132\016.sg.HarborInfo\"M\n\024Harbo"
      "rNpcStateNotify\022#\n\010npc_list\030\001 \002(\0132\021.sg.H"
      "arborNpcList\022\020\n\010harborid\030\002 \002(\005\"\233\002\n\tFoodS"
      "tyle\022*\n\006attrid\030\001 \002(\0162\032.sg.FoodStyle.FOOD"
      "_ATTR_ID\022\016\n\006minval\030\002 \002(\005\022\016\n\006maxval\030\003 \002(\005"
      "\"\301\001\n\014FOOD_ATTR_ID\022\t\n\005COLOR\020\001\022\t\n\005SMELL\020\002\022"
      "\t\n\005TASTE\020\003\022\014\n\010BELLYFUL\020\004\022\021\n\rDETOXIFCATIO"
      "N\020\005\022\t\n\005SOBER\020\006\022\014\n\010EXORCISM\020\007\022\n\n\006POISON\020\010"
      "\022\013\n\007ALCOHOL\020\t\022\010\n\004EVIL\020\n\022\010\n\004SOUR\020\013\022\t\n\005SWE"
      "ET\020\014\022\n\n\006BITTER\020\r\022\007\n\003HOT\020\016\022\t\n\005SALTY\020\017\",\n\r"
      "FoodStyleList\022\033\n\004list\030\001 \003(\0132\r.sg.FoodSty"
      "le\"\301\002\n\rSeatFoodOrder\022\016\n\006seatid\030\001 \002(\005\022\r\n\005"
      "posid\030\002 \002(\005\022\017\n\007orderid\030\003 \002(\005\022\'\n\norder_ty"
      "pe\030\004 \002(\0162\023.sg.FOOD_ORDER_TYPE\022)\n\013order_s"
      "tate\030\005 \002(\0162\024.sg.FOOD_ORDER_STATE\022\r\n\005npci"
      "d\030\006 \002(\005\022\024\n\014foodfilterid\030\013 \001(\005\022\020\n\010recipei"
      "d\030\014 \001(\005\022\016\n\006itemid\030\r \001(\005\022\014\n\004star\030\025 \001(\005\022\023\n"
      "\013gather_gold\030\026 \001(\005\022\033\n\023gather_satisfactio"
      "n\030\027 \001(\005\022\020\n\010tip_gold\030\030 \001(\005\022\023\n\013tip_diamond"
      "\030\031 \001(\005\"4\n\021SeatFoodOrderList\022\037\n\004list\030\001 \003("
      "\0132\021.sg.SeatFoodOrder\"-\n\014SeatMenuFood\022\r\n\005"
      "posid\030\001 \002(\005\022\016\n\006itemid\030\002 \001(\005\"D\n\010SeatMenu\022"
      "\016\n\006seatid\030\001 \002(\005\022(\n\016menu_food_list\030\002 \003(\0132"
      "\020.sg.SeatMenuFood\"\307\003\n\024UserFoodOrderServi"
      "ce\0226\n\003req\030\001 \001(\0132).sg.UserFoodOrderServic"
      "e.FoodOrderRequest\0228\n\004resp\030\002 \001(\0132*.sg.Us"
      "erFoodOrderService.FoodOrderResponse\032c\n\020"
      "FoodOrderRequest\0223\n\003cmd\030\001 \002(\0162&.sg.UserF"
      "oodOrderService.ORDER_COMMAND\022\032\n\004menu\030\002 "
      "\001(\0132\014.sg.SeatMenu\032\220\001\n\021FoodOrderResponse\022"
      "\016\n\006result\030\001 \002(\005\022)\n\norder_list\030\002 \001(\0132\025.sg"
      ".SeatFoodOrderList\022\034\n\010out_drop\030\003 \001(\0132\n.s"
      "g.Reward\022\014\n\004star\030\004 \001(\005\022\024\n\014diy_recipeid\030\013"
      " \001(\005\"E\n\rORDER_COMMAND\022\t\n\005QUERY\020\001\022\n\n\006ACCE"
      "PT\020\002\022\n\n\006REJECT\020\003\022\021\n\rACCEPT_REWARD\020\004\"E\n\030S"
      "eatFoodOrderStateNotify\022)\n\norder_list\030\001 "
      "\002(\0132\025.sg.SeatFoodOrderList*T\n\014HARBOR_STA"
      "TE\022\025\n\021HARBOR_STATE_IDLE\020\000\022\025\n\021HARBOR_STAT"
      "E_OPEN\020\001\022\026\n\022HARBOR_STATE_CLOSE\020\002*k\n\017HARB"
      "OR_NPC_TYPE\022\033\n\027HARBOR_NPC_TYPE_UNKNOWN\020\000"
      "\022\034\n\030HARBOR_NPC_TYPE_RESIDENT\020\001\022\035\n\031HARBOR"
      "_NPC_TYPE_PASSENGER\020\002*A\n\rRESIDENT_TYPE\022\030"
      "\n\024RESIDENT_TYPE_BEGGAR\020\001\022\026\n\022RESIDENT_TYP"
      "E_SHOP\020\002*\225\001\n\023CUSTOMER_OCCUPATION\022\036\n\032CUST"
      "OMER_OCCUPATION_COMMON\020\000\022\035\n\031CUSTOMER_OCC"
      "UPATION_EATER\020\001\022\036\n\032CUSTOMER_OCCUPATION_V"
      "ENDOR\020\002\022\037\n\033CUSTOMER_OCCUPATION_DRINKER\020\003"
      "*J\n\020FOOD_RECIPE_TYPE\022\033\n\027FOOD_RECIPE_TYPE"
      "_STAPLE\020\001\022\031\n\025FOOD_RECIPE_TYPE_WINE\020\002*c\n\017"
      "FOOD_ORDER_TYPE\022\033\n\027FOOD_ORDER_TYPE_DISAB"
      "LE\020\000\022\032\n\026FOOD_ORDER_TYPE_RECIPE\020\001\022\027\n\023FOOD"
      "_ORDER_TYPE_DIY\020\002*\247\002\n\020FOOD_ORDER_STATE\022\'"
      "\n\032FOOD_ORDER_STATE_TO_DELETE\020\377\377\377\377\377\377\377\377\377\001\022"
      "\031\n\025FOOD_ORDER_STATE_IDLE\020\000\022\035\n\031FOOD_ORDER"
      "_STATE_ORDERING\020\001\022\034\n\030FOOD_ORDER_STATE_CO"
      "OKING\020\002\022\033\n\027FOOD_ORDER_STATE_EATING\020\003\022 \n\034"
      "FOOD_ORDER_STATE_EATING_OVER\020\004\022\030\n\024FOOD_O"
      "RDER_STATE_PAY\020\005\022\033\n\027FOOD_ORDER_STATE_REJ"
      "ECT\020\006\022\034\n\030FOOD_ORDER_STATE_SUSPEND\020\007B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserHarbour.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_UserHarbour_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* HarborNpc_NPC_STATE_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[0];
}
bool HarborNpc_NPC_STATE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HarborNpc_NPC_STATE HarborNpc::TO_DELETE;
const HarborNpc_NPC_STATE HarborNpc::IDLE;
const HarborNpc_NPC_STATE HarborNpc::GO_ABOARD;
const HarborNpc_NPC_STATE HarborNpc::IN_QUEUEING;
const HarborNpc_NPC_STATE HarborNpc::TAKE_SEAT;
const HarborNpc_NPC_STATE HarborNpc::ORDER_SUCCESS;
const HarborNpc_NPC_STATE HarborNpc::EATING_FOOD;
const HarborNpc_NPC_STATE HarborNpc::DISMISS;
const HarborNpc_NPC_STATE HarborNpc::WORKING;
const HarborNpc_NPC_STATE HarborNpc::NPC_STATE_MIN;
const HarborNpc_NPC_STATE HarborNpc::NPC_STATE_MAX;
const int HarborNpc::NPC_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserHarborNpcService_NPC_COMMAND_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[1];
}
bool UserHarborNpcService_NPC_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserHarborNpcService_NPC_COMMAND UserHarborNpcService::QUERY;
const UserHarborNpcService_NPC_COMMAND UserHarborNpcService::OPEN;
const UserHarborNpcService_NPC_COMMAND UserHarborNpcService::CLOSE;
const UserHarborNpcService_NPC_COMMAND UserHarborNpcService::START_QUEUEING;
const UserHarborNpcService_NPC_COMMAND UserHarborNpcService::COMPLETE_TASK;
const UserHarborNpcService_NPC_COMMAND UserHarborNpcService::QUERY_POPULATION;
const UserHarborNpcService_NPC_COMMAND UserHarborNpcService::QUERY_HARBOR_NPC_INFO;
const UserHarborNpcService_NPC_COMMAND UserHarborNpcService::NPC_COMMAND_MIN;
const UserHarborNpcService_NPC_COMMAND UserHarborNpcService::NPC_COMMAND_MAX;
const int UserHarborNpcService::NPC_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FoodStyle_FOOD_ATTR_ID_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[2];
}
bool FoodStyle_FOOD_ATTR_ID_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FoodStyle_FOOD_ATTR_ID FoodStyle::COLOR;
const FoodStyle_FOOD_ATTR_ID FoodStyle::SMELL;
const FoodStyle_FOOD_ATTR_ID FoodStyle::TASTE;
const FoodStyle_FOOD_ATTR_ID FoodStyle::BELLYFUL;
const FoodStyle_FOOD_ATTR_ID FoodStyle::DETOXIFCATION;
const FoodStyle_FOOD_ATTR_ID FoodStyle::SOBER;
const FoodStyle_FOOD_ATTR_ID FoodStyle::EXORCISM;
const FoodStyle_FOOD_ATTR_ID FoodStyle::POISON;
const FoodStyle_FOOD_ATTR_ID FoodStyle::ALCOHOL;
const FoodStyle_FOOD_ATTR_ID FoodStyle::EVIL;
const FoodStyle_FOOD_ATTR_ID FoodStyle::SOUR;
const FoodStyle_FOOD_ATTR_ID FoodStyle::SWEET;
const FoodStyle_FOOD_ATTR_ID FoodStyle::BITTER;
const FoodStyle_FOOD_ATTR_ID FoodStyle::HOT;
const FoodStyle_FOOD_ATTR_ID FoodStyle::SALTY;
const FoodStyle_FOOD_ATTR_ID FoodStyle::FOOD_ATTR_ID_MIN;
const FoodStyle_FOOD_ATTR_ID FoodStyle::FOOD_ATTR_ID_MAX;
const int FoodStyle::FOOD_ATTR_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserFoodOrderService_ORDER_COMMAND_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[3];
}
bool UserFoodOrderService_ORDER_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserFoodOrderService_ORDER_COMMAND UserFoodOrderService::QUERY;
const UserFoodOrderService_ORDER_COMMAND UserFoodOrderService::ACCEPT;
const UserFoodOrderService_ORDER_COMMAND UserFoodOrderService::REJECT;
const UserFoodOrderService_ORDER_COMMAND UserFoodOrderService::ACCEPT_REWARD;
const UserFoodOrderService_ORDER_COMMAND UserFoodOrderService::ORDER_COMMAND_MIN;
const UserFoodOrderService_ORDER_COMMAND UserFoodOrderService::ORDER_COMMAND_MAX;
const int UserFoodOrderService::ORDER_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HARBOR_STATE_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[4];
}
bool HARBOR_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HARBOR_NPC_TYPE_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[5];
}
bool HARBOR_NPC_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESIDENT_TYPE_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[6];
}
bool RESIDENT_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CUSTOMER_OCCUPATION_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[7];
}
bool CUSTOMER_OCCUPATION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FOOD_RECIPE_TYPE_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[8];
}
bool FOOD_RECIPE_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FOOD_ORDER_TYPE_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[9];
}
bool FOOD_ORDER_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FOOD_ORDER_STATE_descriptor() {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHarbour_2eproto::file_level_enum_descriptors[10];
}
bool FOOD_ORDER_STATE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void HarborInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborInfo::kStateFieldNumber;
const int HarborInfo::kBoomFieldNumber;
const int HarborInfo::kGrowtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborInfo::HarborInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborInfo)
}
HarborInfo::HarborInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborInfo.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborInfo)
}
HarborInfo::HarborInfo(const HarborInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&growtime_) -
    reinterpret_cast<char*>(&state_)) + sizeof(growtime_));
  // @@protoc_insertion_point(copy_constructor:sg.HarborInfo)
}

void HarborInfo::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&growtime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(growtime_));
}

HarborInfo::~HarborInfo() {
  // @@protoc_insertion_point(destructor:sg.HarborInfo)
  SharedDtor();
}

void HarborInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HarborInfo::ArenaDtor(void* object) {
  HarborInfo* _this = reinterpret_cast< HarborInfo* >(object);
  (void)_this;
}
void HarborInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborInfo::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborInfo& HarborInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborInfo.base);
  return *internal_default_instance();
}


void HarborInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&growtime_) -
        reinterpret_cast<char*>(&state_)) + sizeof(growtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.HARBOR_STATE state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::HARBOR_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::HARBOR_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 boom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_boom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 growtime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_growtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &growtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborInfo)
  return false;
#undef DO_
}

void HarborInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.HARBOR_STATE state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional int32 boom = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->boom(), output);
  }

  // optional sfixed64 growtime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->growtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborInfo)
}

::google::protobuf::uint8* HarborInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.HARBOR_STATE state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional int32 boom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->boom(), target);
  }

  // optional sfixed64 growtime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->growtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborInfo)
  return target;
}

size_t HarborInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .sg.HARBOR_STATE state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 boom = 2;
    if (has_boom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boom());
    }

    // optional sfixed64 growtime = 3;
    if (has_growtime()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborInfo)
    MergeFrom(*source);
  }
}

void HarborInfo::MergeFrom(const HarborInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000002u) {
      boom_ = from.boom_;
    }
    if (cached_has_bits & 0x00000004u) {
      growtime_ = from.growtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarborInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborInfo::CopyFrom(const HarborInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborInfo::IsInitialized() const {
  return true;
}

void HarborInfo::Swap(HarborInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborInfo::UnsafeArenaSwap(HarborInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborInfo::InternalSwap(HarborInfo* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(boom_, other->boom_);
  swap(growtime_, other->growtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborInfo::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarborNpc_resident_task::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborNpc_resident_task::kIdFieldNumber;
const int HarborNpc_resident_task::kNeedIdxFieldNumber;
const int HarborNpc_resident_task::kRewardIdxFieldNumber;
const int HarborNpc_resident_task::kRewardAcceptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborNpc_resident_task::HarborNpc_resident_task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpc_resident_task.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborNpc.resident_task)
}
HarborNpc_resident_task::HarborNpc_resident_task(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpc_resident_task.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborNpc.resident_task)
}
HarborNpc_resident_task::HarborNpc_resident_task(const HarborNpc_resident_task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_accept_) -
    reinterpret_cast<char*>(&id_)) + sizeof(reward_accept_));
  // @@protoc_insertion_point(copy_constructor:sg.HarborNpc.resident_task)
}

void HarborNpc_resident_task::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_accept_) -
      reinterpret_cast<char*>(&id_)) + sizeof(reward_accept_));
}

HarborNpc_resident_task::~HarborNpc_resident_task() {
  // @@protoc_insertion_point(destructor:sg.HarborNpc.resident_task)
  SharedDtor();
}

void HarborNpc_resident_task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HarborNpc_resident_task::ArenaDtor(void* object) {
  HarborNpc_resident_task* _this = reinterpret_cast< HarborNpc_resident_task* >(object);
  (void)_this;
}
void HarborNpc_resident_task::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborNpc_resident_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborNpc_resident_task::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborNpc_resident_task& HarborNpc_resident_task::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpc_resident_task.base);
  return *internal_default_instance();
}


void HarborNpc_resident_task::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborNpc.resident_task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_accept_) -
        reinterpret_cast<char*>(&id_)) + sizeof(reward_accept_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborNpc_resident_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborNpc.resident_task)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 need_idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_need_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reward_idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_reward_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reward_accept = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reward_accept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborNpc.resident_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborNpc.resident_task)
  return false;
#undef DO_
}

void HarborNpc_resident_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborNpc.resident_task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 need_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_idx(), output);
  }

  // optional int32 reward_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_idx(), output);
  }

  // optional bool reward_accept = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reward_accept(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborNpc.resident_task)
}

::google::protobuf::uint8* HarborNpc_resident_task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborNpc.resident_task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 need_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_idx(), target);
  }

  // optional int32 reward_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_idx(), target);
  }

  // optional bool reward_accept = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reward_accept(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborNpc.resident_task)
  return target;
}

size_t HarborNpc_resident_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborNpc.resident_task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional int32 need_idx = 2;
    if (has_need_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_idx());
    }

    // optional int32 reward_idx = 3;
    if (has_reward_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_idx());
    }

    // optional bool reward_accept = 4;
    if (has_reward_accept()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborNpc_resident_task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborNpc.resident_task)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborNpc_resident_task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborNpc_resident_task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborNpc.resident_task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborNpc.resident_task)
    MergeFrom(*source);
  }
}

void HarborNpc_resident_task::MergeFrom(const HarborNpc_resident_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborNpc.resident_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      need_idx_ = from.need_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      reward_idx_ = from.reward_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      reward_accept_ = from.reward_accept_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarborNpc_resident_task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborNpc.resident_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborNpc_resident_task::CopyFrom(const HarborNpc_resident_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborNpc.resident_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborNpc_resident_task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HarborNpc_resident_task::Swap(HarborNpc_resident_task* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborNpc_resident_task* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborNpc_resident_task::UnsafeArenaSwap(HarborNpc_resident_task* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborNpc_resident_task::InternalSwap(HarborNpc_resident_task* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(need_idx_, other->need_idx_);
  swap(reward_idx_, other->reward_idx_);
  swap(reward_accept_, other->reward_accept_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborNpc_resident_task::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarborNpc::InitAsDefaultInstance() {
  ::sg::_HarborNpc_default_instance_._instance.get_mutable()->task_menu1_ = const_cast< ::sg::HarborNpc_resident_task*>(
      ::sg::HarborNpc_resident_task::internal_default_instance());
  ::sg::_HarborNpc_default_instance_._instance.get_mutable()->task_menu2_ = const_cast< ::sg::HarborNpc_resident_task*>(
      ::sg::HarborNpc_resident_task::internal_default_instance());
  ::sg::_HarborNpc_default_instance_._instance.get_mutable()->task_menu3_ = const_cast< ::sg::HarborNpc_resident_task*>(
      ::sg::HarborNpc_resident_task::internal_default_instance());
}
void HarborNpc::unsafe_arena_set_allocated_task_menu1(
    ::sg::HarborNpc_resident_task* task_menu1) {
  if (GetArenaNoVirtual() == NULL) {
    delete task_menu1_;
  }
  task_menu1_ = task_menu1;
  if (task_menu1) {
    set_has_task_menu1();
  } else {
    clear_has_task_menu1();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HarborNpc.task_menu1)
}
void HarborNpc::unsafe_arena_set_allocated_task_menu2(
    ::sg::HarborNpc_resident_task* task_menu2) {
  if (GetArenaNoVirtual() == NULL) {
    delete task_menu2_;
  }
  task_menu2_ = task_menu2;
  if (task_menu2) {
    set_has_task_menu2();
  } else {
    clear_has_task_menu2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HarborNpc.task_menu2)
}
void HarborNpc::unsafe_arena_set_allocated_task_menu3(
    ::sg::HarborNpc_resident_task* task_menu3) {
  if (GetArenaNoVirtual() == NULL) {
    delete task_menu3_;
  }
  task_menu3_ = task_menu3;
  if (task_menu3) {
    set_has_task_menu3();
  } else {
    clear_has_task_menu3();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HarborNpc.task_menu3)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborNpc::kNpcidFieldNumber;
const int HarborNpc::kNpcTypeFieldNumber;
const int HarborNpc::kCfgidFieldNumber;
const int HarborNpc::kStateFieldNumber;
const int HarborNpc::kSecondsFieldNumber;
const int HarborNpc::kWealthGradeFieldNumber;
const int HarborNpc::kGoldFieldNumber;
const int HarborNpc::kSatisfactionFieldNumber;
const int HarborNpc::kSeatidFieldNumber;
const int HarborNpc::kOccupationValFieldNumber;
const int HarborNpc::kOccupationEventStarttimeFieldNumber;
const int HarborNpc::kQuestionStatusFieldNumber;
const int HarborNpc::kSpecialCondBonusFieldNumber;
const int HarborNpc::kSatisfactionAcceptedFieldNumber;
const int HarborNpc::kTaskMenu1FieldNumber;
const int HarborNpc::kTaskMenu2FieldNumber;
const int HarborNpc::kTaskMenu3FieldNumber;
const int HarborNpc::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborNpc::HarborNpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborNpc)
}
HarborNpc::HarborNpc(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpc.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborNpc)
}
HarborNpc::HarborNpc(const HarborNpc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task_menu1()) {
    task_menu1_ = new ::sg::HarborNpc_resident_task(*from.task_menu1_);
  } else {
    task_menu1_ = NULL;
  }
  if (from.has_task_menu2()) {
    task_menu2_ = new ::sg::HarborNpc_resident_task(*from.task_menu2_);
  } else {
    task_menu2_ = NULL;
  }
  if (from.has_task_menu3()) {
    task_menu3_ = new ::sg::HarborNpc_resident_task(*from.task_menu3_);
  } else {
    task_menu3_ = NULL;
  }
  ::memcpy(&npcid_, &from.npcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&npcid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.HarborNpc)
}

void HarborNpc::SharedCtor() {
  ::memset(&task_menu1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&task_menu1_)) + sizeof(optime_));
  state_ = -1;
}

HarborNpc::~HarborNpc() {
  // @@protoc_insertion_point(destructor:sg.HarborNpc)
  SharedDtor();
}

void HarborNpc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete task_menu1_;
  if (this != internal_default_instance()) delete task_menu2_;
  if (this != internal_default_instance()) delete task_menu3_;
}

void HarborNpc::ArenaDtor(void* object) {
  HarborNpc* _this = reinterpret_cast< HarborNpc* >(object);
  (void)_this;
}
void HarborNpc::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborNpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborNpc::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborNpc& HarborNpc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpc.base);
  return *internal_default_instance();
}


void HarborNpc::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborNpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(task_menu1_ != NULL);
      task_menu1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(task_menu2_ != NULL);
      task_menu2_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(task_menu3_ != NULL);
      task_menu3_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&npcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wealth_grade_) -
        reinterpret_cast<char*>(&npcid_)) + sizeof(wealth_grade_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&special_cond_bonus_) -
        reinterpret_cast<char*>(&gold_)) + sizeof(special_cond_bonus_));
  }
  if (cached_has_bits & 196608u) {
    optime_ = GOOGLE_LONGLONG(0);
    state_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborNpc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npcid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_npcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HARBOR_NPC_TYPE npc_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::HARBOR_NPC_TYPE_IsValid(value)) {
            set_npc_type(static_cast< ::sg::HARBOR_NPC_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cfgid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cfgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborNpc.NPC_STATE state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::HarborNpc_NPC_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::HarborNpc_NPC_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wealth_grade = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_wealth_grade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wealth_grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gold = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 satisfaction = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_satisfaction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satisfaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seatid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_seatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupation_val = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_occupation_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 occupation_event_starttime = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_occupation_event_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &occupation_event_starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 question_status = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_question_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &question_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 special_cond_bonus = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_special_cond_bonus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &special_cond_bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 satisfaction_accepted = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_satisfaction_accepted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satisfaction_accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborNpc.resident_task task_menu1 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_menu1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborNpc.resident_task task_menu2 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_menu2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborNpc.resident_task task_menu3 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_menu3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 optime = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborNpc)
  return false;
#undef DO_
}

void HarborNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborNpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 npcid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npcid(), output);
  }

  // optional .sg.HARBOR_NPC_TYPE npc_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->npc_type(), output);
  }

  // optional uint64 cfgid = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cfgid(), output);
  }

  // optional .sg.HarborNpc.NPC_STATE state = 4;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional int32 seconds = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seconds(), output);
  }

  // optional int32 wealth_grade = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wealth_grade(), output);
  }

  // optional int32 gold = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gold(), output);
  }

  // optional int32 satisfaction = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->satisfaction(), output);
  }

  // optional int32 seatid = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->seatid(), output);
  }

  // optional int32 occupation_val = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->occupation_val(), output);
  }

  // optional sfixed64 occupation_event_starttime = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(22, this->occupation_event_starttime(), output);
  }

  // optional int32 question_status = 23;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->question_status(), output);
  }

  // optional int32 special_cond_bonus = 24;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->special_cond_bonus(), output);
  }

  // optional int32 satisfaction_accepted = 25;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->satisfaction_accepted(), output);
  }

  // optional .sg.HarborNpc.resident_task task_menu1 = 31;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_task_menu1(), output);
  }

  // optional .sg.HarborNpc.resident_task task_menu2 = 32;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_internal_task_menu2(), output);
  }

  // optional .sg.HarborNpc.resident_task task_menu3 = 33;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->_internal_task_menu3(), output);
  }

  // optional sfixed64 optime = 41;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(41, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborNpc)
}

::google::protobuf::uint8* HarborNpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborNpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 npcid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npcid(), target);
  }

  // optional .sg.HARBOR_NPC_TYPE npc_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->npc_type(), target);
  }

  // optional uint64 cfgid = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cfgid(), target);
  }

  // optional .sg.HarborNpc.NPC_STATE state = 4;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional int32 seconds = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seconds(), target);
  }

  // optional int32 wealth_grade = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wealth_grade(), target);
  }

  // optional int32 gold = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gold(), target);
  }

  // optional int32 satisfaction = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->satisfaction(), target);
  }

  // optional int32 seatid = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->seatid(), target);
  }

  // optional int32 occupation_val = 21;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->occupation_val(), target);
  }

  // optional sfixed64 occupation_event_starttime = 22;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(22, this->occupation_event_starttime(), target);
  }

  // optional int32 question_status = 23;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->question_status(), target);
  }

  // optional int32 special_cond_bonus = 24;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->special_cond_bonus(), target);
  }

  // optional int32 satisfaction_accepted = 25;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->satisfaction_accepted(), target);
  }

  // optional .sg.HarborNpc.resident_task task_menu1 = 31;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_task_menu1(), deterministic, target);
  }

  // optional .sg.HarborNpc.resident_task task_menu2 = 32;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->_internal_task_menu2(), deterministic, target);
  }

  // optional .sg.HarborNpc.resident_task task_menu3 = 33;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->_internal_task_menu3(), deterministic, target);
  }

  // optional sfixed64 optime = 41;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(41, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborNpc)
  return target;
}

size_t HarborNpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborNpc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 npcid = 1;
  if (has_npcid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npcid());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .sg.HarborNpc.resident_task task_menu1 = 31;
    if (has_task_menu1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_menu1_);
    }

    // optional .sg.HarborNpc.resident_task task_menu2 = 32;
    if (has_task_menu2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_menu2_);
    }

    // optional .sg.HarborNpc.resident_task task_menu3 = 33;
    if (has_task_menu3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_menu3_);
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional .sg.HARBOR_NPC_TYPE npc_type = 2;
    if (has_npc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->npc_type());
    }

    // optional uint64 cfgid = 3;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cfgid());
    }

    // optional int32 seconds = 5;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // optional int32 wealth_grade = 11;
    if (has_wealth_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wealth_grade());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 gold = 12;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 satisfaction = 13;
    if (has_satisfaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->satisfaction());
    }

    // optional int32 seatid = 14;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 occupation_val = 21;
    if (has_occupation_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation_val());
    }

    // optional int32 satisfaction_accepted = 25;
    if (has_satisfaction_accepted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->satisfaction_accepted());
    }

    // optional sfixed64 occupation_event_starttime = 22;
    if (has_occupation_event_starttime()) {
      total_size += 2 + 8;
    }

    // optional int32 question_status = 23;
    if (has_question_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->question_status());
    }

    // optional int32 special_cond_bonus = 24;
    if (has_special_cond_bonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->special_cond_bonus());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional sfixed64 optime = 41;
    if (has_optime()) {
      total_size += 2 + 8;
    }

    // optional .sg.HarborNpc.NPC_STATE state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborNpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborNpc)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborNpc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborNpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborNpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborNpc)
    MergeFrom(*source);
  }
}

void HarborNpc::MergeFrom(const HarborNpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborNpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_task_menu1()->::sg::HarborNpc_resident_task::MergeFrom(from.task_menu1());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_task_menu2()->::sg::HarborNpc_resident_task::MergeFrom(from.task_menu2());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_task_menu3()->::sg::HarborNpc_resident_task::MergeFrom(from.task_menu3());
    }
    if (cached_has_bits & 0x00000008u) {
      npcid_ = from.npcid_;
    }
    if (cached_has_bits & 0x00000010u) {
      npc_type_ = from.npc_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      cfgid_ = from.cfgid_;
    }
    if (cached_has_bits & 0x00000040u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000080u) {
      wealth_grade_ = from.wealth_grade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000200u) {
      satisfaction_ = from.satisfaction_;
    }
    if (cached_has_bits & 0x00000400u) {
      seatid_ = from.seatid_;
    }
    if (cached_has_bits & 0x00000800u) {
      occupation_val_ = from.occupation_val_;
    }
    if (cached_has_bits & 0x00001000u) {
      satisfaction_accepted_ = from.satisfaction_accepted_;
    }
    if (cached_has_bits & 0x00002000u) {
      occupation_event_starttime_ = from.occupation_event_starttime_;
    }
    if (cached_has_bits & 0x00004000u) {
      question_status_ = from.question_status_;
    }
    if (cached_has_bits & 0x00008000u) {
      special_cond_bonus_ = from.special_cond_bonus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      optime_ = from.optime_;
    }
    if (cached_has_bits & 0x00020000u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarborNpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborNpc::CopyFrom(const HarborNpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborNpc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_task_menu1()) {
    if (!this->task_menu1_->IsInitialized()) return false;
  }
  if (has_task_menu2()) {
    if (!this->task_menu2_->IsInitialized()) return false;
  }
  if (has_task_menu3()) {
    if (!this->task_menu3_->IsInitialized()) return false;
  }
  return true;
}

void HarborNpc::Swap(HarborNpc* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborNpc* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborNpc::UnsafeArenaSwap(HarborNpc* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborNpc::InternalSwap(HarborNpc* other) {
  using std::swap;
  swap(task_menu1_, other->task_menu1_);
  swap(task_menu2_, other->task_menu2_);
  swap(task_menu3_, other->task_menu3_);
  swap(npcid_, other->npcid_);
  swap(npc_type_, other->npc_type_);
  swap(cfgid_, other->cfgid_);
  swap(seconds_, other->seconds_);
  swap(wealth_grade_, other->wealth_grade_);
  swap(gold_, other->gold_);
  swap(satisfaction_, other->satisfaction_);
  swap(seatid_, other->seatid_);
  swap(occupation_val_, other->occupation_val_);
  swap(satisfaction_accepted_, other->satisfaction_accepted_);
  swap(occupation_event_starttime_, other->occupation_event_starttime_);
  swap(question_status_, other->question_status_);
  swap(special_cond_bonus_, other->special_cond_bonus_);
  swap(optime_, other->optime_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborNpc::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarborNpcList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborNpcList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborNpcList::HarborNpcList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpcList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborNpcList)
}
HarborNpcList::HarborNpcList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpcList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborNpcList)
}
HarborNpcList::HarborNpcList(const HarborNpcList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.HarborNpcList)
}

void HarborNpcList::SharedCtor() {
}

HarborNpcList::~HarborNpcList() {
  // @@protoc_insertion_point(destructor:sg.HarborNpcList)
  SharedDtor();
}

void HarborNpcList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HarborNpcList::ArenaDtor(void* object) {
  HarborNpcList* _this = reinterpret_cast< HarborNpcList* >(object);
  (void)_this;
}
void HarborNpcList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborNpcList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborNpcList::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborNpcList& HarborNpcList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpcList.base);
  return *internal_default_instance();
}


void HarborNpcList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborNpcList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborNpcList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborNpcList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.HarborNpc list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborNpcList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborNpcList)
  return false;
#undef DO_
}

void HarborNpcList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborNpcList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HarborNpc list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborNpcList)
}

::google::protobuf::uint8* HarborNpcList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborNpcList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HarborNpc list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborNpcList)
  return target;
}

size_t HarborNpcList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborNpcList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.HarborNpc list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborNpcList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborNpcList)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborNpcList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborNpcList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborNpcList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborNpcList)
    MergeFrom(*source);
  }
}

void HarborNpcList::MergeFrom(const HarborNpcList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborNpcList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void HarborNpcList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborNpcList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborNpcList::CopyFrom(const HarborNpcList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborNpcList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborNpcList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void HarborNpcList::Swap(HarborNpcList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborNpcList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborNpcList::UnsafeArenaSwap(HarborNpcList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborNpcList::InternalSwap(HarborNpcList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborNpcList::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarborPopulation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborPopulation::kHarboridFieldNumber;
const int HarborPopulation::kPopulationNumFieldNumber;
const int HarborPopulation::kPopulationNumMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborPopulation::HarborPopulation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborPopulation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborPopulation)
}
HarborPopulation::HarborPopulation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborPopulation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborPopulation)
}
HarborPopulation::HarborPopulation(const HarborPopulation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&harborid_, &from.harborid_,
    static_cast<size_t>(reinterpret_cast<char*>(&population_num_max_) -
    reinterpret_cast<char*>(&harborid_)) + sizeof(population_num_max_));
  // @@protoc_insertion_point(copy_constructor:sg.HarborPopulation)
}

void HarborPopulation::SharedCtor() {
  ::memset(&harborid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&population_num_max_) -
      reinterpret_cast<char*>(&harborid_)) + sizeof(population_num_max_));
}

HarborPopulation::~HarborPopulation() {
  // @@protoc_insertion_point(destructor:sg.HarborPopulation)
  SharedDtor();
}

void HarborPopulation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HarborPopulation::ArenaDtor(void* object) {
  HarborPopulation* _this = reinterpret_cast< HarborPopulation* >(object);
  (void)_this;
}
void HarborPopulation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborPopulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborPopulation::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborPopulation& HarborPopulation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborPopulation.base);
  return *internal_default_instance();
}


void HarborPopulation::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborPopulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&harborid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&population_num_max_) -
        reinterpret_cast<char*>(&harborid_)) + sizeof(population_num_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborPopulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborPopulation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 harborid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_harborid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harborid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 population_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_population_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &population_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 population_num_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_population_num_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &population_num_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborPopulation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborPopulation)
  return false;
#undef DO_
}

void HarborPopulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborPopulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 harborid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->harborid(), output);
  }

  // required int32 population_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->population_num(), output);
  }

  // required int32 population_num_max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->population_num_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborPopulation)
}

::google::protobuf::uint8* HarborPopulation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborPopulation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 harborid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->harborid(), target);
  }

  // required int32 population_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->population_num(), target);
  }

  // required int32 population_num_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->population_num_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborPopulation)
  return target;
}

size_t HarborPopulation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.HarborPopulation)
  size_t total_size = 0;

  if (has_harborid()) {
    // required int32 harborid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harborid());
  }

  if (has_population_num()) {
    // required int32 population_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->population_num());
  }

  if (has_population_num_max()) {
    // required int32 population_num_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->population_num_max());
  }

  return total_size;
}
size_t HarborPopulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborPopulation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 harborid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harborid());

    // required int32 population_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->population_num());

    // required int32 population_num_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->population_num_max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborPopulation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborPopulation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborPopulation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborPopulation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborPopulation)
    MergeFrom(*source);
  }
}

void HarborPopulation::MergeFrom(const HarborPopulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      harborid_ = from.harborid_;
    }
    if (cached_has_bits & 0x00000002u) {
      population_num_ = from.population_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      population_num_max_ = from.population_num_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarborPopulation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborPopulation::CopyFrom(const HarborPopulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborPopulation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void HarborPopulation::Swap(HarborPopulation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborPopulation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborPopulation::UnsafeArenaSwap(HarborPopulation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborPopulation::InternalSwap(HarborPopulation* other) {
  using std::swap;
  swap(harborid_, other->harborid_);
  swap(population_num_, other->population_num_);
  swap(population_num_max_, other->population_num_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborPopulation::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarborPopulationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborPopulationList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborPopulationList::HarborPopulationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborPopulationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborPopulationList)
}
HarborPopulationList::HarborPopulationList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborPopulationList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborPopulationList)
}
HarborPopulationList::HarborPopulationList(const HarborPopulationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.HarborPopulationList)
}

void HarborPopulationList::SharedCtor() {
}

HarborPopulationList::~HarborPopulationList() {
  // @@protoc_insertion_point(destructor:sg.HarborPopulationList)
  SharedDtor();
}

void HarborPopulationList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HarborPopulationList::ArenaDtor(void* object) {
  HarborPopulationList* _this = reinterpret_cast< HarborPopulationList* >(object);
  (void)_this;
}
void HarborPopulationList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborPopulationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborPopulationList::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborPopulationList& HarborPopulationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborPopulationList.base);
  return *internal_default_instance();
}


void HarborPopulationList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborPopulationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborPopulationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborPopulationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.HarborPopulation list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborPopulationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborPopulationList)
  return false;
#undef DO_
}

void HarborPopulationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborPopulationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HarborPopulation list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborPopulationList)
}

::google::protobuf::uint8* HarborPopulationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborPopulationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HarborPopulation list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborPopulationList)
  return target;
}

size_t HarborPopulationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborPopulationList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.HarborPopulation list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborPopulationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborPopulationList)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborPopulationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborPopulationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborPopulationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborPopulationList)
    MergeFrom(*source);
  }
}

void HarborPopulationList::MergeFrom(const HarborPopulationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborPopulationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void HarborPopulationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborPopulationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborPopulationList::CopyFrom(const HarborPopulationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborPopulationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborPopulationList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void HarborPopulationList::Swap(HarborPopulationList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborPopulationList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborPopulationList::UnsafeArenaSwap(HarborPopulationList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborPopulationList::InternalSwap(HarborPopulationList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborPopulationList::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarborNpcInfo::InitAsDefaultInstance() {
  ::sg::_HarborNpcInfo_default_instance_._instance.get_mutable()->npc_list_ = const_cast< ::sg::HarborNpcList*>(
      ::sg::HarborNpcList::internal_default_instance());
  ::sg::_HarborNpcInfo_default_instance_._instance.get_mutable()->harbor_info_ = const_cast< ::sg::HarborInfo*>(
      ::sg::HarborInfo::internal_default_instance());
}
void HarborNpcInfo::unsafe_arena_set_allocated_npc_list(
    ::sg::HarborNpcList* npc_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete npc_list_;
  }
  npc_list_ = npc_list;
  if (npc_list) {
    set_has_npc_list();
  } else {
    clear_has_npc_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HarborNpcInfo.npc_list)
}
void HarborNpcInfo::unsafe_arena_set_allocated_harbor_info(
    ::sg::HarborInfo* harbor_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete harbor_info_;
  }
  harbor_info_ = harbor_info;
  if (harbor_info) {
    set_has_harbor_info();
  } else {
    clear_has_harbor_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HarborNpcInfo.harbor_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborNpcInfo::kHarboridFieldNumber;
const int HarborNpcInfo::kNpcListFieldNumber;
const int HarborNpcInfo::kHarborInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborNpcInfo::HarborNpcInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpcInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborNpcInfo)
}
HarborNpcInfo::HarborNpcInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpcInfo.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborNpcInfo)
}
HarborNpcInfo::HarborNpcInfo(const HarborNpcInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_npc_list()) {
    npc_list_ = new ::sg::HarborNpcList(*from.npc_list_);
  } else {
    npc_list_ = NULL;
  }
  if (from.has_harbor_info()) {
    harbor_info_ = new ::sg::HarborInfo(*from.harbor_info_);
  } else {
    harbor_info_ = NULL;
  }
  harborid_ = from.harborid_;
  // @@protoc_insertion_point(copy_constructor:sg.HarborNpcInfo)
}

void HarborNpcInfo::SharedCtor() {
  ::memset(&npc_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&harborid_) -
      reinterpret_cast<char*>(&npc_list_)) + sizeof(harborid_));
}

HarborNpcInfo::~HarborNpcInfo() {
  // @@protoc_insertion_point(destructor:sg.HarborNpcInfo)
  SharedDtor();
}

void HarborNpcInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete npc_list_;
  if (this != internal_default_instance()) delete harbor_info_;
}

void HarborNpcInfo::ArenaDtor(void* object) {
  HarborNpcInfo* _this = reinterpret_cast< HarborNpcInfo* >(object);
  (void)_this;
}
void HarborNpcInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborNpcInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborNpcInfo::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborNpcInfo& HarborNpcInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpcInfo.base);
  return *internal_default_instance();
}


void HarborNpcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborNpcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(npc_list_ != NULL);
      npc_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(harbor_info_ != NULL);
      harbor_info_->Clear();
    }
  }
  harborid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborNpcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborNpcInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 harborid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_harborid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harborid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborNpcList npc_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_npc_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborInfo harbor_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_harbor_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborNpcInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborNpcInfo)
  return false;
#undef DO_
}

void HarborNpcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborNpcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 harborid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->harborid(), output);
  }

  // optional .sg.HarborNpcList npc_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_npc_list(), output);
  }

  // optional .sg.HarborInfo harbor_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_harbor_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborNpcInfo)
}

::google::protobuf::uint8* HarborNpcInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborNpcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 harborid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->harborid(), target);
  }

  // optional .sg.HarborNpcList npc_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_npc_list(), deterministic, target);
  }

  // optional .sg.HarborInfo harbor_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_harbor_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborNpcInfo)
  return target;
}

size_t HarborNpcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborNpcInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 harborid = 1;
  if (has_harborid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harborid());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.HarborNpcList npc_list = 2;
    if (has_npc_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *npc_list_);
    }

    // optional .sg.HarborInfo harbor_info = 3;
    if (has_harbor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *harbor_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborNpcInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborNpcInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborNpcInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborNpcInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborNpcInfo)
    MergeFrom(*source);
  }
}

void HarborNpcInfo::MergeFrom(const HarborNpcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_npc_list()->::sg::HarborNpcList::MergeFrom(from.npc_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_harbor_info()->::sg::HarborInfo::MergeFrom(from.harbor_info());
    }
    if (cached_has_bits & 0x00000004u) {
      harborid_ = from.harborid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarborNpcInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborNpcInfo::CopyFrom(const HarborNpcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborNpcInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_npc_list()) {
    if (!this->npc_list_->IsInitialized()) return false;
  }
  return true;
}

void HarborNpcInfo::Swap(HarborNpcInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborNpcInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborNpcInfo::UnsafeArenaSwap(HarborNpcInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborNpcInfo::InternalSwap(HarborNpcInfo* other) {
  using std::swap;
  swap(npc_list_, other->npc_list_);
  swap(harbor_info_, other->harbor_info_);
  swap(harborid_, other->harborid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborNpcInfo::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarborNpcInfoList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborNpcInfoList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborNpcInfoList::HarborNpcInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpcInfoList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborNpcInfoList)
}
HarborNpcInfoList::HarborNpcInfoList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpcInfoList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborNpcInfoList)
}
HarborNpcInfoList::HarborNpcInfoList(const HarborNpcInfoList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.HarborNpcInfoList)
}

void HarborNpcInfoList::SharedCtor() {
}

HarborNpcInfoList::~HarborNpcInfoList() {
  // @@protoc_insertion_point(destructor:sg.HarborNpcInfoList)
  SharedDtor();
}

void HarborNpcInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HarborNpcInfoList::ArenaDtor(void* object) {
  HarborNpcInfoList* _this = reinterpret_cast< HarborNpcInfoList* >(object);
  (void)_this;
}
void HarborNpcInfoList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborNpcInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborNpcInfoList::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborNpcInfoList& HarborNpcInfoList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpcInfoList.base);
  return *internal_default_instance();
}


void HarborNpcInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborNpcInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborNpcInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborNpcInfoList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.HarborNpcInfo list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborNpcInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborNpcInfoList)
  return false;
#undef DO_
}

void HarborNpcInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborNpcInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HarborNpcInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborNpcInfoList)
}

::google::protobuf::uint8* HarborNpcInfoList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborNpcInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HarborNpcInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborNpcInfoList)
  return target;
}

size_t HarborNpcInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborNpcInfoList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.HarborNpcInfo list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborNpcInfoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborNpcInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborNpcInfoList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborNpcInfoList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborNpcInfoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborNpcInfoList)
    MergeFrom(*source);
  }
}

void HarborNpcInfoList::MergeFrom(const HarborNpcInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborNpcInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void HarborNpcInfoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborNpcInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborNpcInfoList::CopyFrom(const HarborNpcInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborNpcInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborNpcInfoList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void HarborNpcInfoList::Swap(HarborNpcInfoList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborNpcInfoList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborNpcInfoList::UnsafeArenaSwap(HarborNpcInfoList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborNpcInfoList::InternalSwap(HarborNpcInfoList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborNpcInfoList::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHarborNpcService_HarborNpcRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHarborNpcService_HarborNpcRequest::kCmdFieldNumber;
const int UserHarborNpcService_HarborNpcRequest::kStartQueueingListFieldNumber;
const int UserHarborNpcService_HarborNpcRequest::kResidentidFieldNumber;
const int UserHarborNpcService_HarborNpcRequest::kSelectTaskMenuidFieldNumber;
const int UserHarborNpcService_HarborNpcRequest::kHarboridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHarborNpcService_HarborNpcRequest::UserHarborNpcService_HarborNpcRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService_HarborNpcRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserHarborNpcService.HarborNpcRequest)
}
UserHarborNpcService_HarborNpcRequest::UserHarborNpcService_HarborNpcRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  start_queueing_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService_HarborNpcRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserHarborNpcService.HarborNpcRequest)
}
UserHarborNpcService_HarborNpcRequest::UserHarborNpcService_HarborNpcRequest(const UserHarborNpcService_HarborNpcRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      start_queueing_list_(from.start_queueing_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&residentid_, &from.residentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&residentid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserHarborNpcService.HarborNpcRequest)
}

void UserHarborNpcService_HarborNpcRequest::SharedCtor() {
  ::memset(&residentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&harborid_) -
      reinterpret_cast<char*>(&residentid_)) + sizeof(harborid_));
  cmd_ = 1;
}

UserHarborNpcService_HarborNpcRequest::~UserHarborNpcService_HarborNpcRequest() {
  // @@protoc_insertion_point(destructor:sg.UserHarborNpcService.HarborNpcRequest)
  SharedDtor();
}

void UserHarborNpcService_HarborNpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserHarborNpcService_HarborNpcRequest::ArenaDtor(void* object) {
  UserHarborNpcService_HarborNpcRequest* _this = reinterpret_cast< UserHarborNpcService_HarborNpcRequest* >(object);
  (void)_this;
}
void UserHarborNpcService_HarborNpcRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHarborNpcService_HarborNpcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHarborNpcService_HarborNpcRequest::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHarborNpcService_HarborNpcRequest& UserHarborNpcService_HarborNpcRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService_HarborNpcRequest.base);
  return *internal_default_instance();
}


void UserHarborNpcService_HarborNpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserHarborNpcService.HarborNpcRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_queueing_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&residentid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&harborid_) -
        reinterpret_cast<char*>(&residentid_)) + sizeof(harborid_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHarborNpcService_HarborNpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserHarborNpcService.HarborNpcRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserHarborNpcService.NPC_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserHarborNpcService_NPC_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserHarborNpcService_NPC_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 start_queueing_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_start_queueing_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_start_queueing_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 residentid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_residentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &residentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 select_task_menuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_select_task_menuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &select_task_menuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 harborid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_harborid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harborid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserHarborNpcService.HarborNpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserHarborNpcService.HarborNpcRequest)
  return false;
#undef DO_
}

void UserHarborNpcService_HarborNpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserHarborNpcService.HarborNpcRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserHarborNpcService.NPC_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // repeated int32 start_queueing_list = 2;
  for (int i = 0, n = this->start_queueing_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->start_queueing_list(i), output);
  }

  // optional int32 residentid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->residentid(), output);
  }

  // optional int32 select_task_menuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->select_task_menuid(), output);
  }

  // optional int32 harborid = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->harborid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserHarborNpcService.HarborNpcRequest)
}

::google::protobuf::uint8* UserHarborNpcService_HarborNpcRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserHarborNpcService.HarborNpcRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserHarborNpcService.NPC_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // repeated int32 start_queueing_list = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->start_queueing_list_, target);

  // optional int32 residentid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->residentid(), target);
  }

  // optional int32 select_task_menuid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->select_task_menuid(), target);
  }

  // optional int32 harborid = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->harborid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserHarborNpcService.HarborNpcRequest)
  return target;
}

size_t UserHarborNpcService_HarborNpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserHarborNpcService.HarborNpcRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserHarborNpcService.NPC_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated int32 start_queueing_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->start_queueing_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->start_queueing_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 residentid = 3;
    if (has_residentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->residentid());
    }

    // optional int32 select_task_menuid = 4;
    if (has_select_task_menuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->select_task_menuid());
    }

    // optional int32 harborid = 5;
    if (has_harborid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->harborid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHarborNpcService_HarborNpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserHarborNpcService.HarborNpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHarborNpcService_HarborNpcRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHarborNpcService_HarborNpcRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserHarborNpcService.HarborNpcRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserHarborNpcService.HarborNpcRequest)
    MergeFrom(*source);
  }
}

void UserHarborNpcService_HarborNpcRequest::MergeFrom(const UserHarborNpcService_HarborNpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserHarborNpcService.HarborNpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_queueing_list_.MergeFrom(from.start_queueing_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      residentid_ = from.residentid_;
    }
    if (cached_has_bits & 0x00000002u) {
      select_task_menuid_ = from.select_task_menuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      harborid_ = from.harborid_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHarborNpcService_HarborNpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserHarborNpcService.HarborNpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHarborNpcService_HarborNpcRequest::CopyFrom(const UserHarborNpcService_HarborNpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserHarborNpcService.HarborNpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHarborNpcService_HarborNpcRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void UserHarborNpcService_HarborNpcRequest::Swap(UserHarborNpcService_HarborNpcRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHarborNpcService_HarborNpcRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHarborNpcService_HarborNpcRequest::UnsafeArenaSwap(UserHarborNpcService_HarborNpcRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHarborNpcService_HarborNpcRequest::InternalSwap(UserHarborNpcService_HarborNpcRequest* other) {
  using std::swap;
  start_queueing_list_.InternalSwap(&other->start_queueing_list_);
  swap(residentid_, other->residentid_);
  swap(select_task_menuid_, other->select_task_menuid_);
  swap(harborid_, other->harborid_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHarborNpcService_HarborNpcRequest::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHarborNpcService_HarborNpcResponse::InitAsDefaultInstance() {
  ::sg::_UserHarborNpcService_HarborNpcResponse_default_instance_._instance.get_mutable()->npc_list_ = const_cast< ::sg::HarborNpcList*>(
      ::sg::HarborNpcList::internal_default_instance());
  ::sg::_UserHarborNpcService_HarborNpcResponse_default_instance_._instance.get_mutable()->harbor_info_ = const_cast< ::sg::HarborInfo*>(
      ::sg::HarborInfo::internal_default_instance());
  ::sg::_UserHarborNpcService_HarborNpcResponse_default_instance_._instance.get_mutable()->resident_drop_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
  ::sg::_UserHarborNpcService_HarborNpcResponse_default_instance_._instance.get_mutable()->population_list_ = const_cast< ::sg::HarborPopulationList*>(
      ::sg::HarborPopulationList::internal_default_instance());
  ::sg::_UserHarborNpcService_HarborNpcResponse_default_instance_._instance.get_mutable()->npc_info_list_ = const_cast< ::sg::HarborNpcInfoList*>(
      ::sg::HarborNpcInfoList::internal_default_instance());
}
void UserHarborNpcService_HarborNpcResponse::unsafe_arena_set_allocated_npc_list(
    ::sg::HarborNpcList* npc_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete npc_list_;
  }
  npc_list_ = npc_list;
  if (npc_list) {
    set_has_npc_list();
  } else {
    clear_has_npc_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHarborNpcService.HarborNpcResponse.npc_list)
}
void UserHarborNpcService_HarborNpcResponse::unsafe_arena_set_allocated_harbor_info(
    ::sg::HarborInfo* harbor_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete harbor_info_;
  }
  harbor_info_ = harbor_info;
  if (harbor_info) {
    set_has_harbor_info();
  } else {
    clear_has_harbor_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHarborNpcService.HarborNpcResponse.harbor_info)
}
void UserHarborNpcService_HarborNpcResponse::unsafe_arena_set_allocated_resident_drop(
    ::sg::Reward* resident_drop) {
  if (GetArenaNoVirtual() == NULL) {
    delete resident_drop_;
  }
  resident_drop_ = resident_drop;
  if (resident_drop) {
    set_has_resident_drop();
  } else {
    clear_has_resident_drop();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHarborNpcService.HarborNpcResponse.resident_drop)
}
void UserHarborNpcService_HarborNpcResponse::clear_resident_drop() {
  if (resident_drop_ != NULL) resident_drop_->Clear();
  clear_has_resident_drop();
}
void UserHarborNpcService_HarborNpcResponse::unsafe_arena_set_allocated_population_list(
    ::sg::HarborPopulationList* population_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete population_list_;
  }
  population_list_ = population_list;
  if (population_list) {
    set_has_population_list();
  } else {
    clear_has_population_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHarborNpcService.HarborNpcResponse.population_list)
}
void UserHarborNpcService_HarborNpcResponse::unsafe_arena_set_allocated_npc_info_list(
    ::sg::HarborNpcInfoList* npc_info_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete npc_info_list_;
  }
  npc_info_list_ = npc_info_list;
  if (npc_info_list) {
    set_has_npc_info_list();
  } else {
    clear_has_npc_info_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHarborNpcService.HarborNpcResponse.npc_info_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHarborNpcService_HarborNpcResponse::kResultFieldNumber;
const int UserHarborNpcService_HarborNpcResponse::kNpcListFieldNumber;
const int UserHarborNpcService_HarborNpcResponse::kHarborInfoFieldNumber;
const int UserHarborNpcService_HarborNpcResponse::kResidentDropFieldNumber;
const int UserHarborNpcService_HarborNpcResponse::kPopulationListFieldNumber;
const int UserHarborNpcService_HarborNpcResponse::kNpcInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHarborNpcService_HarborNpcResponse::UserHarborNpcService_HarborNpcResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService_HarborNpcResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserHarborNpcService.HarborNpcResponse)
}
UserHarborNpcService_HarborNpcResponse::UserHarborNpcService_HarborNpcResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService_HarborNpcResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserHarborNpcService.HarborNpcResponse)
}
UserHarborNpcService_HarborNpcResponse::UserHarborNpcService_HarborNpcResponse(const UserHarborNpcService_HarborNpcResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_npc_list()) {
    npc_list_ = new ::sg::HarborNpcList(*from.npc_list_);
  } else {
    npc_list_ = NULL;
  }
  if (from.has_harbor_info()) {
    harbor_info_ = new ::sg::HarborInfo(*from.harbor_info_);
  } else {
    harbor_info_ = NULL;
  }
  if (from.has_resident_drop()) {
    resident_drop_ = new ::sg::Reward(*from.resident_drop_);
  } else {
    resident_drop_ = NULL;
  }
  if (from.has_population_list()) {
    population_list_ = new ::sg::HarborPopulationList(*from.population_list_);
  } else {
    population_list_ = NULL;
  }
  if (from.has_npc_info_list()) {
    npc_info_list_ = new ::sg::HarborNpcInfoList(*from.npc_info_list_);
  } else {
    npc_info_list_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.UserHarborNpcService.HarborNpcResponse)
}

void UserHarborNpcService_HarborNpcResponse::SharedCtor() {
  ::memset(&npc_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&npc_list_)) + sizeof(result_));
}

UserHarborNpcService_HarborNpcResponse::~UserHarborNpcService_HarborNpcResponse() {
  // @@protoc_insertion_point(destructor:sg.UserHarborNpcService.HarborNpcResponse)
  SharedDtor();
}

void UserHarborNpcService_HarborNpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete npc_list_;
  if (this != internal_default_instance()) delete harbor_info_;
  if (this != internal_default_instance()) delete resident_drop_;
  if (this != internal_default_instance()) delete population_list_;
  if (this != internal_default_instance()) delete npc_info_list_;
}

void UserHarborNpcService_HarborNpcResponse::ArenaDtor(void* object) {
  UserHarborNpcService_HarborNpcResponse* _this = reinterpret_cast< UserHarborNpcService_HarborNpcResponse* >(object);
  (void)_this;
}
void UserHarborNpcService_HarborNpcResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHarborNpcService_HarborNpcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHarborNpcService_HarborNpcResponse::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHarborNpcService_HarborNpcResponse& UserHarborNpcService_HarborNpcResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService_HarborNpcResponse.base);
  return *internal_default_instance();
}


void UserHarborNpcService_HarborNpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserHarborNpcService.HarborNpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(npc_list_ != NULL);
      npc_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(harbor_info_ != NULL);
      harbor_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resident_drop_ != NULL);
      resident_drop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(population_list_ != NULL);
      population_list_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(npc_info_list_ != NULL);
      npc_info_list_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHarborNpcService_HarborNpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserHarborNpcService.HarborNpcResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborNpcList npc_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_npc_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborInfo harbor_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_harbor_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward resident_drop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resident_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborPopulationList population_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_population_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HarborNpcInfoList npc_info_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_npc_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserHarborNpcService.HarborNpcResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserHarborNpcService.HarborNpcResponse)
  return false;
#undef DO_
}

void UserHarborNpcService_HarborNpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserHarborNpcService.HarborNpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.HarborNpcList npc_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_npc_list(), output);
  }

  // optional .sg.HarborInfo harbor_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_harbor_info(), output);
  }

  // optional .sg.Reward resident_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_resident_drop(), output);
  }

  // optional .sg.HarborPopulationList population_list = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_population_list(), output);
  }

  // optional .sg.HarborNpcInfoList npc_info_list = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_npc_info_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserHarborNpcService.HarborNpcResponse)
}

::google::protobuf::uint8* UserHarborNpcService_HarborNpcResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserHarborNpcService.HarborNpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.HarborNpcList npc_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_npc_list(), deterministic, target);
  }

  // optional .sg.HarborInfo harbor_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_harbor_info(), deterministic, target);
  }

  // optional .sg.Reward resident_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_resident_drop(), deterministic, target);
  }

  // optional .sg.HarborPopulationList population_list = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_population_list(), deterministic, target);
  }

  // optional .sg.HarborNpcInfoList npc_info_list = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_npc_info_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserHarborNpcService.HarborNpcResponse)
  return target;
}

size_t UserHarborNpcService_HarborNpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserHarborNpcService.HarborNpcResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .sg.HarborNpcList npc_list = 2;
    if (has_npc_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *npc_list_);
    }

    // optional .sg.HarborInfo harbor_info = 3;
    if (has_harbor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *harbor_info_);
    }

    // optional .sg.Reward resident_drop = 4;
    if (has_resident_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resident_drop_);
    }

    // optional .sg.HarborPopulationList population_list = 11;
    if (has_population_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *population_list_);
    }

    // optional .sg.HarborNpcInfoList npc_info_list = 12;
    if (has_npc_info_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *npc_info_list_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHarborNpcService_HarborNpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserHarborNpcService.HarborNpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHarborNpcService_HarborNpcResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHarborNpcService_HarborNpcResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserHarborNpcService.HarborNpcResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserHarborNpcService.HarborNpcResponse)
    MergeFrom(*source);
  }
}

void UserHarborNpcService_HarborNpcResponse::MergeFrom(const UserHarborNpcService_HarborNpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserHarborNpcService.HarborNpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_npc_list()->::sg::HarborNpcList::MergeFrom(from.npc_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_harbor_info()->::sg::HarborInfo::MergeFrom(from.harbor_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_resident_drop()->::sg::Reward::MergeFrom(from.resident_drop());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_population_list()->::sg::HarborPopulationList::MergeFrom(from.population_list());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_npc_info_list()->::sg::HarborNpcInfoList::MergeFrom(from.npc_info_list());
    }
    if (cached_has_bits & 0x00000020u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHarborNpcService_HarborNpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserHarborNpcService.HarborNpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHarborNpcService_HarborNpcResponse::CopyFrom(const UserHarborNpcService_HarborNpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserHarborNpcService.HarborNpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHarborNpcService_HarborNpcResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (has_npc_list()) {
    if (!this->npc_list_->IsInitialized()) return false;
  }
  if (has_resident_drop()) {
    if (!this->resident_drop_->IsInitialized()) return false;
  }
  if (has_population_list()) {
    if (!this->population_list_->IsInitialized()) return false;
  }
  if (has_npc_info_list()) {
    if (!this->npc_info_list_->IsInitialized()) return false;
  }
  return true;
}

void UserHarborNpcService_HarborNpcResponse::Swap(UserHarborNpcService_HarborNpcResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHarborNpcService_HarborNpcResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHarborNpcService_HarborNpcResponse::UnsafeArenaSwap(UserHarborNpcService_HarborNpcResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHarborNpcService_HarborNpcResponse::InternalSwap(UserHarborNpcService_HarborNpcResponse* other) {
  using std::swap;
  swap(npc_list_, other->npc_list_);
  swap(harbor_info_, other->harbor_info_);
  swap(resident_drop_, other->resident_drop_);
  swap(population_list_, other->population_list_);
  swap(npc_info_list_, other->npc_info_list_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHarborNpcService_HarborNpcResponse::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHarborNpcService::InitAsDefaultInstance() {
  ::sg::_UserHarborNpcService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserHarborNpcService_HarborNpcRequest*>(
      ::sg::UserHarborNpcService_HarborNpcRequest::internal_default_instance());
  ::sg::_UserHarborNpcService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserHarborNpcService_HarborNpcResponse*>(
      ::sg::UserHarborNpcService_HarborNpcResponse::internal_default_instance());
}
void UserHarborNpcService::unsafe_arena_set_allocated_req(
    ::sg::UserHarborNpcService_HarborNpcRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHarborNpcService.req)
}
void UserHarborNpcService::unsafe_arena_set_allocated_resp(
    ::sg::UserHarborNpcService_HarborNpcResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHarborNpcService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHarborNpcService::kReqFieldNumber;
const int UserHarborNpcService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHarborNpcService::UserHarborNpcService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserHarborNpcService)
}
UserHarborNpcService::UserHarborNpcService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserHarborNpcService)
}
UserHarborNpcService::UserHarborNpcService(const UserHarborNpcService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserHarborNpcService_HarborNpcRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserHarborNpcService_HarborNpcResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserHarborNpcService)
}

void UserHarborNpcService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserHarborNpcService::~UserHarborNpcService() {
  // @@protoc_insertion_point(destructor:sg.UserHarborNpcService)
  SharedDtor();
}

void UserHarborNpcService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserHarborNpcService::ArenaDtor(void* object) {
  UserHarborNpcService* _this = reinterpret_cast< UserHarborNpcService* >(object);
  (void)_this;
}
void UserHarborNpcService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHarborNpcService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHarborNpcService::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHarborNpcService& UserHarborNpcService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserHarborNpcService.base);
  return *internal_default_instance();
}


void UserHarborNpcService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserHarborNpcService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHarborNpcService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserHarborNpcService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserHarborNpcService.HarborNpcRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserHarborNpcService.HarborNpcResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserHarborNpcService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserHarborNpcService)
  return false;
#undef DO_
}

void UserHarborNpcService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserHarborNpcService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserHarborNpcService.HarborNpcRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserHarborNpcService.HarborNpcResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserHarborNpcService)
}

::google::protobuf::uint8* UserHarborNpcService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserHarborNpcService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserHarborNpcService.HarborNpcRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserHarborNpcService.HarborNpcResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserHarborNpcService)
  return target;
}

size_t UserHarborNpcService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserHarborNpcService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserHarborNpcService.HarborNpcRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserHarborNpcService.HarborNpcResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHarborNpcService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserHarborNpcService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHarborNpcService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHarborNpcService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserHarborNpcService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserHarborNpcService)
    MergeFrom(*source);
  }
}

void UserHarborNpcService::MergeFrom(const UserHarborNpcService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserHarborNpcService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserHarborNpcService_HarborNpcRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserHarborNpcService_HarborNpcResponse::MergeFrom(from.resp());
    }
  }
}

void UserHarborNpcService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserHarborNpcService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHarborNpcService::CopyFrom(const UserHarborNpcService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserHarborNpcService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHarborNpcService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserHarborNpcService::Swap(UserHarborNpcService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHarborNpcService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHarborNpcService::UnsafeArenaSwap(UserHarborNpcService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHarborNpcService::InternalSwap(UserHarborNpcService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHarborNpcService::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarborStateNotify::InitAsDefaultInstance() {
  ::sg::_HarborStateNotify_default_instance_._instance.get_mutable()->harbor_info_ = const_cast< ::sg::HarborInfo*>(
      ::sg::HarborInfo::internal_default_instance());
}
void HarborStateNotify::unsafe_arena_set_allocated_harbor_info(
    ::sg::HarborInfo* harbor_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete harbor_info_;
  }
  harbor_info_ = harbor_info;
  if (harbor_info) {
    set_has_harbor_info();
  } else {
    clear_has_harbor_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HarborStateNotify.harbor_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborStateNotify::kHarborInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborStateNotify::HarborStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborStateNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborStateNotify)
}
HarborStateNotify::HarborStateNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborStateNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborStateNotify)
}
HarborStateNotify::HarborStateNotify(const HarborStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_harbor_info()) {
    harbor_info_ = new ::sg::HarborInfo(*from.harbor_info_);
  } else {
    harbor_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.HarborStateNotify)
}

void HarborStateNotify::SharedCtor() {
  harbor_info_ = NULL;
}

HarborStateNotify::~HarborStateNotify() {
  // @@protoc_insertion_point(destructor:sg.HarborStateNotify)
  SharedDtor();
}

void HarborStateNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete harbor_info_;
}

void HarborStateNotify::ArenaDtor(void* object) {
  HarborStateNotify* _this = reinterpret_cast< HarborStateNotify* >(object);
  (void)_this;
}
void HarborStateNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborStateNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborStateNotify::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborStateNotify& HarborStateNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborStateNotify.base);
  return *internal_default_instance();
}


void HarborStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(harbor_info_ != NULL);
    harbor_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborStateNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.HarborInfo harbor_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_harbor_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborStateNotify)
  return false;
#undef DO_
}

void HarborStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.HarborInfo harbor_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_harbor_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborStateNotify)
}

::google::protobuf::uint8* HarborStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.HarborInfo harbor_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_harbor_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborStateNotify)
  return target;
}

size_t HarborStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborStateNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.HarborInfo harbor_info = 1;
  if (has_harbor_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harbor_info_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborStateNotify)
    MergeFrom(*source);
  }
}

void HarborStateNotify::MergeFrom(const HarborStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_harbor_info()) {
    mutable_harbor_info()->::sg::HarborInfo::MergeFrom(from.harbor_info());
  }
}

void HarborStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborStateNotify::CopyFrom(const HarborStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HarborStateNotify::Swap(HarborStateNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborStateNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborStateNotify::UnsafeArenaSwap(HarborStateNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborStateNotify::InternalSwap(HarborStateNotify* other) {
  using std::swap;
  swap(harbor_info_, other->harbor_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborStateNotify::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarborNpcStateNotify::InitAsDefaultInstance() {
  ::sg::_HarborNpcStateNotify_default_instance_._instance.get_mutable()->npc_list_ = const_cast< ::sg::HarborNpcList*>(
      ::sg::HarborNpcList::internal_default_instance());
}
void HarborNpcStateNotify::unsafe_arena_set_allocated_npc_list(
    ::sg::HarborNpcList* npc_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete npc_list_;
  }
  npc_list_ = npc_list;
  if (npc_list) {
    set_has_npc_list();
  } else {
    clear_has_npc_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HarborNpcStateNotify.npc_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarborNpcStateNotify::kNpcListFieldNumber;
const int HarborNpcStateNotify::kHarboridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarborNpcStateNotify::HarborNpcStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_HarborNpcStateNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarborNpcStateNotify)
}
HarborNpcStateNotify::HarborNpcStateNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpcStateNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarborNpcStateNotify)
}
HarborNpcStateNotify::HarborNpcStateNotify(const HarborNpcStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_npc_list()) {
    npc_list_ = new ::sg::HarborNpcList(*from.npc_list_);
  } else {
    npc_list_ = NULL;
  }
  harborid_ = from.harborid_;
  // @@protoc_insertion_point(copy_constructor:sg.HarborNpcStateNotify)
}

void HarborNpcStateNotify::SharedCtor() {
  ::memset(&npc_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&harborid_) -
      reinterpret_cast<char*>(&npc_list_)) + sizeof(harborid_));
}

HarborNpcStateNotify::~HarborNpcStateNotify() {
  // @@protoc_insertion_point(destructor:sg.HarborNpcStateNotify)
  SharedDtor();
}

void HarborNpcStateNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete npc_list_;
}

void HarborNpcStateNotify::ArenaDtor(void* object) {
  HarborNpcStateNotify* _this = reinterpret_cast< HarborNpcStateNotify* >(object);
  (void)_this;
}
void HarborNpcStateNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarborNpcStateNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarborNpcStateNotify::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarborNpcStateNotify& HarborNpcStateNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_HarborNpcStateNotify.base);
  return *internal_default_instance();
}


void HarborNpcStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarborNpcStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(npc_list_ != NULL);
    npc_list_->Clear();
  }
  harborid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarborNpcStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarborNpcStateNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.HarborNpcList npc_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_npc_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 harborid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_harborid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harborid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarborNpcStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarborNpcStateNotify)
  return false;
#undef DO_
}

void HarborNpcStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarborNpcStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.HarborNpcList npc_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_npc_list(), output);
  }

  // required int32 harborid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->harborid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarborNpcStateNotify)
}

::google::protobuf::uint8* HarborNpcStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarborNpcStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.HarborNpcList npc_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_npc_list(), deterministic, target);
  }

  // required int32 harborid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->harborid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarborNpcStateNotify)
  return target;
}

size_t HarborNpcStateNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.HarborNpcStateNotify)
  size_t total_size = 0;

  if (has_npc_list()) {
    // required .sg.HarborNpcList npc_list = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *npc_list_);
  }

  if (has_harborid()) {
    // required int32 harborid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harborid());
  }

  return total_size;
}
size_t HarborNpcStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarborNpcStateNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .sg.HarborNpcList npc_list = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *npc_list_);

    // required int32 harborid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harborid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarborNpcStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarborNpcStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HarborNpcStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarborNpcStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarborNpcStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarborNpcStateNotify)
    MergeFrom(*source);
  }
}

void HarborNpcStateNotify::MergeFrom(const HarborNpcStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarborNpcStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_npc_list()->::sg::HarborNpcList::MergeFrom(from.npc_list());
    }
    if (cached_has_bits & 0x00000002u) {
      harborid_ = from.harborid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarborNpcStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarborNpcStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarborNpcStateNotify::CopyFrom(const HarborNpcStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarborNpcStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborNpcStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_npc_list()) {
    if (!this->npc_list_->IsInitialized()) return false;
  }
  return true;
}

void HarborNpcStateNotify::Swap(HarborNpcStateNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarborNpcStateNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarborNpcStateNotify::UnsafeArenaSwap(HarborNpcStateNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarborNpcStateNotify::InternalSwap(HarborNpcStateNotify* other) {
  using std::swap;
  swap(npc_list_, other->npc_list_);
  swap(harborid_, other->harborid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarborNpcStateNotify::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FoodStyle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FoodStyle::kAttridFieldNumber;
const int FoodStyle::kMinvalFieldNumber;
const int FoodStyle::kMaxvalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FoodStyle::FoodStyle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_FoodStyle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FoodStyle)
}
FoodStyle::FoodStyle(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_FoodStyle.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FoodStyle)
}
FoodStyle::FoodStyle(const FoodStyle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minval_, &from.minval_,
    static_cast<size_t>(reinterpret_cast<char*>(&attrid_) -
    reinterpret_cast<char*>(&minval_)) + sizeof(attrid_));
  // @@protoc_insertion_point(copy_constructor:sg.FoodStyle)
}

void FoodStyle::SharedCtor() {
  ::memset(&minval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxval_) -
      reinterpret_cast<char*>(&minval_)) + sizeof(maxval_));
  attrid_ = 1;
}

FoodStyle::~FoodStyle() {
  // @@protoc_insertion_point(destructor:sg.FoodStyle)
  SharedDtor();
}

void FoodStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FoodStyle::ArenaDtor(void* object) {
  FoodStyle* _this = reinterpret_cast< FoodStyle* >(object);
  (void)_this;
}
void FoodStyle::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FoodStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FoodStyle::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FoodStyle& FoodStyle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_FoodStyle.base);
  return *internal_default_instance();
}


void FoodStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FoodStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&minval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxval_) -
        reinterpret_cast<char*>(&minval_)) + sizeof(maxval_));
    attrid_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FoodStyle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FoodStyle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.FoodStyle.FOOD_ATTR_ID attrid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::FoodStyle_FOOD_ATTR_ID_IsValid(value)) {
            set_attrid(static_cast< ::sg::FoodStyle_FOOD_ATTR_ID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 minval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_minval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 maxval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_maxval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FoodStyle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FoodStyle)
  return false;
#undef DO_
}

void FoodStyle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FoodStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.FoodStyle.FOOD_ATTR_ID attrid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->attrid(), output);
  }

  // required int32 minval = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minval(), output);
  }

  // required int32 maxval = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FoodStyle)
}

::google::protobuf::uint8* FoodStyle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FoodStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.FoodStyle.FOOD_ATTR_ID attrid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->attrid(), target);
  }

  // required int32 minval = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minval(), target);
  }

  // required int32 maxval = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FoodStyle)
  return target;
}

size_t FoodStyle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.FoodStyle)
  size_t total_size = 0;

  if (has_minval()) {
    // required int32 minval = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minval());
  }

  if (has_maxval()) {
    // required int32 maxval = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxval());
  }

  if (has_attrid()) {
    // required .sg.FoodStyle.FOOD_ATTR_ID attrid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->attrid());
  }

  return total_size;
}
size_t FoodStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FoodStyle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 minval = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minval());

    // required int32 maxval = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxval());

    // required .sg.FoodStyle.FOOD_ATTR_ID attrid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->attrid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FoodStyle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FoodStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const FoodStyle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FoodStyle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FoodStyle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FoodStyle)
    MergeFrom(*source);
  }
}

void FoodStyle::MergeFrom(const FoodStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FoodStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      minval_ = from.minval_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxval_ = from.maxval_;
    }
    if (cached_has_bits & 0x00000004u) {
      attrid_ = from.attrid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FoodStyle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FoodStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodStyle::CopyFrom(const FoodStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FoodStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodStyle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void FoodStyle::Swap(FoodStyle* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FoodStyle* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FoodStyle::UnsafeArenaSwap(FoodStyle* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FoodStyle::InternalSwap(FoodStyle* other) {
  using std::swap;
  swap(minval_, other->minval_);
  swap(maxval_, other->maxval_);
  swap(attrid_, other->attrid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FoodStyle::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FoodStyleList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FoodStyleList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FoodStyleList::FoodStyleList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_FoodStyleList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FoodStyleList)
}
FoodStyleList::FoodStyleList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_FoodStyleList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FoodStyleList)
}
FoodStyleList::FoodStyleList(const FoodStyleList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.FoodStyleList)
}

void FoodStyleList::SharedCtor() {
}

FoodStyleList::~FoodStyleList() {
  // @@protoc_insertion_point(destructor:sg.FoodStyleList)
  SharedDtor();
}

void FoodStyleList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FoodStyleList::ArenaDtor(void* object) {
  FoodStyleList* _this = reinterpret_cast< FoodStyleList* >(object);
  (void)_this;
}
void FoodStyleList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FoodStyleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FoodStyleList::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FoodStyleList& FoodStyleList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_FoodStyleList.base);
  return *internal_default_instance();
}


void FoodStyleList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FoodStyleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FoodStyleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FoodStyleList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.FoodStyle list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FoodStyleList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FoodStyleList)
  return false;
#undef DO_
}

void FoodStyleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FoodStyleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.FoodStyle list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FoodStyleList)
}

::google::protobuf::uint8* FoodStyleList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FoodStyleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.FoodStyle list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FoodStyleList)
  return target;
}

size_t FoodStyleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FoodStyleList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.FoodStyle list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FoodStyleList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FoodStyleList)
  GOOGLE_DCHECK_NE(&from, this);
  const FoodStyleList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FoodStyleList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FoodStyleList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FoodStyleList)
    MergeFrom(*source);
  }
}

void FoodStyleList::MergeFrom(const FoodStyleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FoodStyleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void FoodStyleList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FoodStyleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodStyleList::CopyFrom(const FoodStyleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FoodStyleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodStyleList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void FoodStyleList::Swap(FoodStyleList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FoodStyleList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FoodStyleList::UnsafeArenaSwap(FoodStyleList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FoodStyleList::InternalSwap(FoodStyleList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FoodStyleList::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SeatFoodOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatFoodOrder::kSeatidFieldNumber;
const int SeatFoodOrder::kPosidFieldNumber;
const int SeatFoodOrder::kOrderidFieldNumber;
const int SeatFoodOrder::kOrderTypeFieldNumber;
const int SeatFoodOrder::kOrderStateFieldNumber;
const int SeatFoodOrder::kNpcidFieldNumber;
const int SeatFoodOrder::kFoodfilteridFieldNumber;
const int SeatFoodOrder::kRecipeidFieldNumber;
const int SeatFoodOrder::kItemidFieldNumber;
const int SeatFoodOrder::kStarFieldNumber;
const int SeatFoodOrder::kGatherGoldFieldNumber;
const int SeatFoodOrder::kGatherSatisfactionFieldNumber;
const int SeatFoodOrder::kTipGoldFieldNumber;
const int SeatFoodOrder::kTipDiamondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatFoodOrder::SeatFoodOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SeatFoodOrder)
}
SeatFoodOrder::SeatFoodOrder(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrder.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SeatFoodOrder)
}
SeatFoodOrder::SeatFoodOrder(const SeatFoodOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seatid_, &from.seatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_state_) -
    reinterpret_cast<char*>(&seatid_)) + sizeof(order_state_));
  // @@protoc_insertion_point(copy_constructor:sg.SeatFoodOrder)
}

void SeatFoodOrder::SharedCtor() {
  ::memset(&seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tip_gold_) -
      reinterpret_cast<char*>(&seatid_)) + sizeof(tip_gold_));
  order_state_ = -1;
}

SeatFoodOrder::~SeatFoodOrder() {
  // @@protoc_insertion_point(destructor:sg.SeatFoodOrder)
  SharedDtor();
}

void SeatFoodOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SeatFoodOrder::ArenaDtor(void* object) {
  SeatFoodOrder* _this = reinterpret_cast< SeatFoodOrder* >(object);
  (void)_this;
}
void SeatFoodOrder::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SeatFoodOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SeatFoodOrder::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeatFoodOrder& SeatFoodOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrder.base);
  return *internal_default_instance();
}


void SeatFoodOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SeatFoodOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&seatid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&seatid_)) + sizeof(itemid_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&tip_diamond_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tip_gold_) -
        reinterpret_cast<char*>(&tip_diamond_)) + sizeof(tip_gold_));
    order_state_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SeatFoodOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SeatFoodOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_seatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 posid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_posid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 orderid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_orderid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.FOOD_ORDER_TYPE order_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::FOOD_ORDER_TYPE_IsValid(value)) {
            set_order_type(static_cast< ::sg::FOOD_ORDER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.FOOD_ORDER_STATE order_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::FOOD_ORDER_STATE_IsValid(value)) {
            set_order_state(static_cast< ::sg::FOOD_ORDER_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 npcid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_npcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 foodfilterid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_foodfilterid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foodfilterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 recipeid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_recipeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recipeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 star = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gather_gold = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_gather_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gather_satisfaction = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_gather_satisfaction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_satisfaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tip_gold = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_tip_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tip_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tip_diamond = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_tip_diamond();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tip_diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SeatFoodOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SeatFoodOrder)
  return false;
#undef DO_
}

void SeatFoodOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SeatFoodOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 seatid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // required int32 posid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posid(), output);
  }

  // required int32 orderid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderid(), output);
  }

  // required .sg.FOOD_ORDER_TYPE order_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->order_type(), output);
  }

  // required .sg.FOOD_ORDER_STATE order_state = 5;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->order_state(), output);
  }

  // required int32 npcid = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->npcid(), output);
  }

  // optional int32 foodfilterid = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->foodfilterid(), output);
  }

  // optional int32 recipeid = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->recipeid(), output);
  }

  // optional int32 itemid = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->itemid(), output);
  }

  // optional int32 star = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->star(), output);
  }

  // optional int32 gather_gold = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->gather_gold(), output);
  }

  // optional int32 gather_satisfaction = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->gather_satisfaction(), output);
  }

  // optional int32 tip_gold = 24;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tip_gold(), output);
  }

  // optional int32 tip_diamond = 25;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tip_diamond(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SeatFoodOrder)
}

::google::protobuf::uint8* SeatFoodOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SeatFoodOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 seatid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // required int32 posid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posid(), target);
  }

  // required int32 orderid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderid(), target);
  }

  // required .sg.FOOD_ORDER_TYPE order_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->order_type(), target);
  }

  // required .sg.FOOD_ORDER_STATE order_state = 5;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->order_state(), target);
  }

  // required int32 npcid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->npcid(), target);
  }

  // optional int32 foodfilterid = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->foodfilterid(), target);
  }

  // optional int32 recipeid = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->recipeid(), target);
  }

  // optional int32 itemid = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->itemid(), target);
  }

  // optional int32 star = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->star(), target);
  }

  // optional int32 gather_gold = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->gather_gold(), target);
  }

  // optional int32 gather_satisfaction = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->gather_satisfaction(), target);
  }

  // optional int32 tip_gold = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tip_gold(), target);
  }

  // optional int32 tip_diamond = 25;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tip_diamond(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SeatFoodOrder)
  return target;
}

size_t SeatFoodOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.SeatFoodOrder)
  size_t total_size = 0;

  if (has_seatid()) {
    // required int32 seatid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  if (has_posid()) {
    // required int32 posid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posid());
  }

  if (has_orderid()) {
    // required int32 orderid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orderid());
  }

  if (has_order_type()) {
    // required .sg.FOOD_ORDER_TYPE order_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_type());
  }

  if (has_npcid()) {
    // required int32 npcid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npcid());
  }

  if (has_order_state()) {
    // required .sg.FOOD_ORDER_STATE order_state = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_state());
  }

  return total_size;
}
size_t SeatFoodOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SeatFoodOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000201f) ^ 0x0000201f) == 0) {  // All required fields are present.
    // required int32 seatid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());

    // required int32 posid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posid());

    // required int32 orderid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orderid());

    // required .sg.FOOD_ORDER_TYPE order_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_type());

    // required int32 npcid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npcid());

    // required .sg.FOOD_ORDER_STATE order_state = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 foodfilterid = 11;
    if (has_foodfilterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->foodfilterid());
    }

    // optional int32 recipeid = 12;
    if (has_recipeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recipeid());
    }

    // optional int32 itemid = 13;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 tip_diamond = 25;
    if (has_tip_diamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tip_diamond());
    }

    // optional int32 star = 21;
    if (has_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 gather_gold = 22;
    if (has_gather_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gather_gold());
    }

    // optional int32 gather_satisfaction = 23;
    if (has_gather_satisfaction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gather_satisfaction());
    }

    // optional int32 tip_gold = 24;
    if (has_tip_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tip_gold());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeatFoodOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SeatFoodOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SeatFoodOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatFoodOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SeatFoodOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SeatFoodOrder)
    MergeFrom(*source);
  }
}

void SeatFoodOrder::MergeFrom(const SeatFoodOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SeatFoodOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      seatid_ = from.seatid_;
    }
    if (cached_has_bits & 0x00000002u) {
      posid_ = from.posid_;
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000008u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      npcid_ = from.npcid_;
    }
    if (cached_has_bits & 0x00000020u) {
      foodfilterid_ = from.foodfilterid_;
    }
    if (cached_has_bits & 0x00000040u) {
      recipeid_ = from.recipeid_;
    }
    if (cached_has_bits & 0x00000080u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      tip_diamond_ = from.tip_diamond_;
    }
    if (cached_has_bits & 0x00000200u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000400u) {
      gather_gold_ = from.gather_gold_;
    }
    if (cached_has_bits & 0x00000800u) {
      gather_satisfaction_ = from.gather_satisfaction_;
    }
    if (cached_has_bits & 0x00001000u) {
      tip_gold_ = from.tip_gold_;
    }
    if (cached_has_bits & 0x00002000u) {
      order_state_ = from.order_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SeatFoodOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SeatFoodOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatFoodOrder::CopyFrom(const SeatFoodOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SeatFoodOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatFoodOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000201f) != 0x0000201f) return false;
  return true;
}

void SeatFoodOrder::Swap(SeatFoodOrder* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeatFoodOrder* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SeatFoodOrder::UnsafeArenaSwap(SeatFoodOrder* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeatFoodOrder::InternalSwap(SeatFoodOrder* other) {
  using std::swap;
  swap(seatid_, other->seatid_);
  swap(posid_, other->posid_);
  swap(orderid_, other->orderid_);
  swap(order_type_, other->order_type_);
  swap(npcid_, other->npcid_);
  swap(foodfilterid_, other->foodfilterid_);
  swap(recipeid_, other->recipeid_);
  swap(itemid_, other->itemid_);
  swap(tip_diamond_, other->tip_diamond_);
  swap(star_, other->star_);
  swap(gather_gold_, other->gather_gold_);
  swap(gather_satisfaction_, other->gather_satisfaction_);
  swap(tip_gold_, other->tip_gold_);
  swap(order_state_, other->order_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SeatFoodOrder::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SeatFoodOrderList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatFoodOrderList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatFoodOrderList::SeatFoodOrderList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrderList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SeatFoodOrderList)
}
SeatFoodOrderList::SeatFoodOrderList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrderList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SeatFoodOrderList)
}
SeatFoodOrderList::SeatFoodOrderList(const SeatFoodOrderList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.SeatFoodOrderList)
}

void SeatFoodOrderList::SharedCtor() {
}

SeatFoodOrderList::~SeatFoodOrderList() {
  // @@protoc_insertion_point(destructor:sg.SeatFoodOrderList)
  SharedDtor();
}

void SeatFoodOrderList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SeatFoodOrderList::ArenaDtor(void* object) {
  SeatFoodOrderList* _this = reinterpret_cast< SeatFoodOrderList* >(object);
  (void)_this;
}
void SeatFoodOrderList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SeatFoodOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SeatFoodOrderList::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeatFoodOrderList& SeatFoodOrderList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrderList.base);
  return *internal_default_instance();
}


void SeatFoodOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SeatFoodOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SeatFoodOrderList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SeatFoodOrderList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.SeatFoodOrder list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SeatFoodOrderList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SeatFoodOrderList)
  return false;
#undef DO_
}

void SeatFoodOrderList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SeatFoodOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.SeatFoodOrder list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SeatFoodOrderList)
}

::google::protobuf::uint8* SeatFoodOrderList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SeatFoodOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.SeatFoodOrder list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SeatFoodOrderList)
  return target;
}

size_t SeatFoodOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SeatFoodOrderList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.SeatFoodOrder list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeatFoodOrderList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SeatFoodOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const SeatFoodOrderList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatFoodOrderList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SeatFoodOrderList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SeatFoodOrderList)
    MergeFrom(*source);
  }
}

void SeatFoodOrderList::MergeFrom(const SeatFoodOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SeatFoodOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SeatFoodOrderList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SeatFoodOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatFoodOrderList::CopyFrom(const SeatFoodOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SeatFoodOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatFoodOrderList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void SeatFoodOrderList::Swap(SeatFoodOrderList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeatFoodOrderList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SeatFoodOrderList::UnsafeArenaSwap(SeatFoodOrderList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeatFoodOrderList::InternalSwap(SeatFoodOrderList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SeatFoodOrderList::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SeatMenuFood::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatMenuFood::kPosidFieldNumber;
const int SeatMenuFood::kItemidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatMenuFood::SeatMenuFood()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_SeatMenuFood.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SeatMenuFood)
}
SeatMenuFood::SeatMenuFood(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatMenuFood.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SeatMenuFood)
}
SeatMenuFood::SeatMenuFood(const SeatMenuFood& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posid_, &from.posid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&posid_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:sg.SeatMenuFood)
}

void SeatMenuFood::SharedCtor() {
  ::memset(&posid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&posid_)) + sizeof(itemid_));
}

SeatMenuFood::~SeatMenuFood() {
  // @@protoc_insertion_point(destructor:sg.SeatMenuFood)
  SharedDtor();
}

void SeatMenuFood::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SeatMenuFood::ArenaDtor(void* object) {
  SeatMenuFood* _this = reinterpret_cast< SeatMenuFood* >(object);
  (void)_this;
}
void SeatMenuFood::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SeatMenuFood::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SeatMenuFood::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeatMenuFood& SeatMenuFood::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatMenuFood.base);
  return *internal_default_instance();
}


void SeatMenuFood::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SeatMenuFood)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&posid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&posid_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SeatMenuFood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SeatMenuFood)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 posid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_posid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SeatMenuFood)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SeatMenuFood)
  return false;
#undef DO_
}

void SeatMenuFood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SeatMenuFood)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 posid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posid(), output);
  }

  // optional int32 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SeatMenuFood)
}

::google::protobuf::uint8* SeatMenuFood::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SeatMenuFood)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 posid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posid(), target);
  }

  // optional int32 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SeatMenuFood)
  return target;
}

size_t SeatMenuFood::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SeatMenuFood)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 posid = 1;
  if (has_posid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posid());
  }
  // optional int32 itemid = 2;
  if (has_itemid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeatMenuFood::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SeatMenuFood)
  GOOGLE_DCHECK_NE(&from, this);
  const SeatMenuFood* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatMenuFood>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SeatMenuFood)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SeatMenuFood)
    MergeFrom(*source);
  }
}

void SeatMenuFood::MergeFrom(const SeatMenuFood& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SeatMenuFood)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      posid_ = from.posid_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SeatMenuFood::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SeatMenuFood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatMenuFood::CopyFrom(const SeatMenuFood& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SeatMenuFood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatMenuFood::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SeatMenuFood::Swap(SeatMenuFood* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeatMenuFood* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SeatMenuFood::UnsafeArenaSwap(SeatMenuFood* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeatMenuFood::InternalSwap(SeatMenuFood* other) {
  using std::swap;
  swap(posid_, other->posid_);
  swap(itemid_, other->itemid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SeatMenuFood::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SeatMenu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatMenu::kSeatidFieldNumber;
const int SeatMenu::kMenuFoodListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatMenu::SeatMenu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_SeatMenu.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SeatMenu)
}
SeatMenu::SeatMenu(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  menu_food_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatMenu.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SeatMenu)
}
SeatMenu::SeatMenu(const SeatMenu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      menu_food_list_(from.menu_food_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seatid_ = from.seatid_;
  // @@protoc_insertion_point(copy_constructor:sg.SeatMenu)
}

void SeatMenu::SharedCtor() {
  seatid_ = 0;
}

SeatMenu::~SeatMenu() {
  // @@protoc_insertion_point(destructor:sg.SeatMenu)
  SharedDtor();
}

void SeatMenu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SeatMenu::ArenaDtor(void* object) {
  SeatMenu* _this = reinterpret_cast< SeatMenu* >(object);
  (void)_this;
}
void SeatMenu::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SeatMenu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SeatMenu::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeatMenu& SeatMenu::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatMenu.base);
  return *internal_default_instance();
}


void SeatMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SeatMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  menu_food_list_.Clear();
  seatid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SeatMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SeatMenu)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_seatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SeatMenuFood menu_food_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_menu_food_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SeatMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SeatMenu)
  return false;
#undef DO_
}

void SeatMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SeatMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 seatid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // repeated .sg.SeatMenuFood menu_food_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->menu_food_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->menu_food_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SeatMenu)
}

::google::protobuf::uint8* SeatMenu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SeatMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 seatid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // repeated .sg.SeatMenuFood menu_food_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->menu_food_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->menu_food_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SeatMenu)
  return target;
}

size_t SeatMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SeatMenu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 seatid = 1;
  if (has_seatid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }
  // repeated .sg.SeatMenuFood menu_food_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->menu_food_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->menu_food_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeatMenu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SeatMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const SeatMenu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatMenu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SeatMenu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SeatMenu)
    MergeFrom(*source);
  }
}

void SeatMenu::MergeFrom(const SeatMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SeatMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  menu_food_list_.MergeFrom(from.menu_food_list_);
  if (from.has_seatid()) {
    set_seatid(from.seatid());
  }
}

void SeatMenu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SeatMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatMenu::CopyFrom(const SeatMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SeatMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatMenu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->menu_food_list())) return false;
  return true;
}

void SeatMenu::Swap(SeatMenu* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeatMenu* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SeatMenu::UnsafeArenaSwap(SeatMenu* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeatMenu::InternalSwap(SeatMenu* other) {
  using std::swap;
  CastToBase(&menu_food_list_)->InternalSwap(CastToBase(&other->menu_food_list_));
  swap(seatid_, other->seatid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SeatMenu::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserFoodOrderService_FoodOrderRequest::InitAsDefaultInstance() {
  ::sg::_UserFoodOrderService_FoodOrderRequest_default_instance_._instance.get_mutable()->menu_ = const_cast< ::sg::SeatMenu*>(
      ::sg::SeatMenu::internal_default_instance());
}
void UserFoodOrderService_FoodOrderRequest::unsafe_arena_set_allocated_menu(
    ::sg::SeatMenu* menu) {
  if (GetArenaNoVirtual() == NULL) {
    delete menu_;
  }
  menu_ = menu;
  if (menu) {
    set_has_menu();
  } else {
    clear_has_menu();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserFoodOrderService.FoodOrderRequest.menu)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserFoodOrderService_FoodOrderRequest::kCmdFieldNumber;
const int UserFoodOrderService_FoodOrderRequest::kMenuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserFoodOrderService_FoodOrderRequest::UserFoodOrderService_FoodOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService_FoodOrderRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserFoodOrderService.FoodOrderRequest)
}
UserFoodOrderService_FoodOrderRequest::UserFoodOrderService_FoodOrderRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService_FoodOrderRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserFoodOrderService.FoodOrderRequest)
}
UserFoodOrderService_FoodOrderRequest::UserFoodOrderService_FoodOrderRequest(const UserFoodOrderService_FoodOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_menu()) {
    menu_ = new ::sg::SeatMenu(*from.menu_);
  } else {
    menu_ = NULL;
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:sg.UserFoodOrderService.FoodOrderRequest)
}

void UserFoodOrderService_FoodOrderRequest::SharedCtor() {
  menu_ = NULL;
  cmd_ = 1;
}

UserFoodOrderService_FoodOrderRequest::~UserFoodOrderService_FoodOrderRequest() {
  // @@protoc_insertion_point(destructor:sg.UserFoodOrderService.FoodOrderRequest)
  SharedDtor();
}

void UserFoodOrderService_FoodOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete menu_;
}

void UserFoodOrderService_FoodOrderRequest::ArenaDtor(void* object) {
  UserFoodOrderService_FoodOrderRequest* _this = reinterpret_cast< UserFoodOrderService_FoodOrderRequest* >(object);
  (void)_this;
}
void UserFoodOrderService_FoodOrderRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserFoodOrderService_FoodOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserFoodOrderService_FoodOrderRequest::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserFoodOrderService_FoodOrderRequest& UserFoodOrderService_FoodOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService_FoodOrderRequest.base);
  return *internal_default_instance();
}


void UserFoodOrderService_FoodOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserFoodOrderService.FoodOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(menu_ != NULL);
      menu_->Clear();
    }
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserFoodOrderService_FoodOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserFoodOrderService.FoodOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserFoodOrderService.ORDER_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserFoodOrderService_ORDER_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserFoodOrderService_ORDER_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.SeatMenu menu = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_menu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserFoodOrderService.FoodOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserFoodOrderService.FoodOrderRequest)
  return false;
#undef DO_
}

void UserFoodOrderService_FoodOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserFoodOrderService.FoodOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserFoodOrderService.ORDER_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .sg.SeatMenu menu = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_menu(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserFoodOrderService.FoodOrderRequest)
}

::google::protobuf::uint8* UserFoodOrderService_FoodOrderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserFoodOrderService.FoodOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserFoodOrderService.ORDER_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .sg.SeatMenu menu = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_menu(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserFoodOrderService.FoodOrderRequest)
  return target;
}

size_t UserFoodOrderService_FoodOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserFoodOrderService.FoodOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserFoodOrderService.ORDER_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // optional .sg.SeatMenu menu = 2;
  if (has_menu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *menu_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFoodOrderService_FoodOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserFoodOrderService.FoodOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFoodOrderService_FoodOrderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserFoodOrderService_FoodOrderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserFoodOrderService.FoodOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserFoodOrderService.FoodOrderRequest)
    MergeFrom(*source);
  }
}

void UserFoodOrderService_FoodOrderRequest::MergeFrom(const UserFoodOrderService_FoodOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserFoodOrderService.FoodOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_menu()->::sg::SeatMenu::MergeFrom(from.menu());
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserFoodOrderService_FoodOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserFoodOrderService.FoodOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFoodOrderService_FoodOrderRequest::CopyFrom(const UserFoodOrderService_FoodOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserFoodOrderService.FoodOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFoodOrderService_FoodOrderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_menu()) {
    if (!this->menu_->IsInitialized()) return false;
  }
  return true;
}

void UserFoodOrderService_FoodOrderRequest::Swap(UserFoodOrderService_FoodOrderRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserFoodOrderService_FoodOrderRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserFoodOrderService_FoodOrderRequest::UnsafeArenaSwap(UserFoodOrderService_FoodOrderRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserFoodOrderService_FoodOrderRequest::InternalSwap(UserFoodOrderService_FoodOrderRequest* other) {
  using std::swap;
  swap(menu_, other->menu_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserFoodOrderService_FoodOrderRequest::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserFoodOrderService_FoodOrderResponse::InitAsDefaultInstance() {
  ::sg::_UserFoodOrderService_FoodOrderResponse_default_instance_._instance.get_mutable()->order_list_ = const_cast< ::sg::SeatFoodOrderList*>(
      ::sg::SeatFoodOrderList::internal_default_instance());
  ::sg::_UserFoodOrderService_FoodOrderResponse_default_instance_._instance.get_mutable()->out_drop_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void UserFoodOrderService_FoodOrderResponse::unsafe_arena_set_allocated_order_list(
    ::sg::SeatFoodOrderList* order_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete order_list_;
  }
  order_list_ = order_list;
  if (order_list) {
    set_has_order_list();
  } else {
    clear_has_order_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserFoodOrderService.FoodOrderResponse.order_list)
}
void UserFoodOrderService_FoodOrderResponse::unsafe_arena_set_allocated_out_drop(
    ::sg::Reward* out_drop) {
  if (GetArenaNoVirtual() == NULL) {
    delete out_drop_;
  }
  out_drop_ = out_drop;
  if (out_drop) {
    set_has_out_drop();
  } else {
    clear_has_out_drop();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserFoodOrderService.FoodOrderResponse.out_drop)
}
void UserFoodOrderService_FoodOrderResponse::clear_out_drop() {
  if (out_drop_ != NULL) out_drop_->Clear();
  clear_has_out_drop();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserFoodOrderService_FoodOrderResponse::kResultFieldNumber;
const int UserFoodOrderService_FoodOrderResponse::kOrderListFieldNumber;
const int UserFoodOrderService_FoodOrderResponse::kOutDropFieldNumber;
const int UserFoodOrderService_FoodOrderResponse::kStarFieldNumber;
const int UserFoodOrderService_FoodOrderResponse::kDiyRecipeidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserFoodOrderService_FoodOrderResponse::UserFoodOrderService_FoodOrderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService_FoodOrderResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserFoodOrderService.FoodOrderResponse)
}
UserFoodOrderService_FoodOrderResponse::UserFoodOrderService_FoodOrderResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService_FoodOrderResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserFoodOrderService.FoodOrderResponse)
}
UserFoodOrderService_FoodOrderResponse::UserFoodOrderService_FoodOrderResponse(const UserFoodOrderService_FoodOrderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_order_list()) {
    order_list_ = new ::sg::SeatFoodOrderList(*from.order_list_);
  } else {
    order_list_ = NULL;
  }
  if (from.has_out_drop()) {
    out_drop_ = new ::sg::Reward(*from.out_drop_);
  } else {
    out_drop_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&diy_recipeid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(diy_recipeid_));
  // @@protoc_insertion_point(copy_constructor:sg.UserFoodOrderService.FoodOrderResponse)
}

void UserFoodOrderService_FoodOrderResponse::SharedCtor() {
  ::memset(&order_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diy_recipeid_) -
      reinterpret_cast<char*>(&order_list_)) + sizeof(diy_recipeid_));
}

UserFoodOrderService_FoodOrderResponse::~UserFoodOrderService_FoodOrderResponse() {
  // @@protoc_insertion_point(destructor:sg.UserFoodOrderService.FoodOrderResponse)
  SharedDtor();
}

void UserFoodOrderService_FoodOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete order_list_;
  if (this != internal_default_instance()) delete out_drop_;
}

void UserFoodOrderService_FoodOrderResponse::ArenaDtor(void* object) {
  UserFoodOrderService_FoodOrderResponse* _this = reinterpret_cast< UserFoodOrderService_FoodOrderResponse* >(object);
  (void)_this;
}
void UserFoodOrderService_FoodOrderResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserFoodOrderService_FoodOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserFoodOrderService_FoodOrderResponse::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserFoodOrderService_FoodOrderResponse& UserFoodOrderService_FoodOrderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService_FoodOrderResponse.base);
  return *internal_default_instance();
}


void UserFoodOrderService_FoodOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserFoodOrderService.FoodOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(order_list_ != NULL);
      order_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(out_drop_ != NULL);
      out_drop_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&diy_recipeid_) -
        reinterpret_cast<char*>(&result_)) + sizeof(diy_recipeid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserFoodOrderService_FoodOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserFoodOrderService.FoodOrderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.SeatFoodOrderList order_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward out_drop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_out_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 diy_recipeid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_diy_recipeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diy_recipeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserFoodOrderService.FoodOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserFoodOrderService.FoodOrderResponse)
  return false;
#undef DO_
}

void UserFoodOrderService_FoodOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserFoodOrderService.FoodOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.SeatFoodOrderList order_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_order_list(), output);
  }

  // optional .sg.Reward out_drop = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_out_drop(), output);
  }

  // optional int32 star = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // optional int32 diy_recipeid = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->diy_recipeid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserFoodOrderService.FoodOrderResponse)
}

::google::protobuf::uint8* UserFoodOrderService_FoodOrderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserFoodOrderService.FoodOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.SeatFoodOrderList order_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_order_list(), deterministic, target);
  }

  // optional .sg.Reward out_drop = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_out_drop(), deterministic, target);
  }

  // optional int32 star = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // optional int32 diy_recipeid = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->diy_recipeid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserFoodOrderService.FoodOrderResponse)
  return target;
}

size_t UserFoodOrderService_FoodOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserFoodOrderService.FoodOrderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.SeatFoodOrderList order_list = 2;
    if (has_order_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *order_list_);
    }

    // optional .sg.Reward out_drop = 3;
    if (has_out_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *out_drop_);
    }

  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 diy_recipeid = 11;
    if (has_diy_recipeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diy_recipeid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFoodOrderService_FoodOrderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserFoodOrderService.FoodOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFoodOrderService_FoodOrderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserFoodOrderService_FoodOrderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserFoodOrderService.FoodOrderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserFoodOrderService.FoodOrderResponse)
    MergeFrom(*source);
  }
}

void UserFoodOrderService_FoodOrderResponse::MergeFrom(const UserFoodOrderService_FoodOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserFoodOrderService.FoodOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_order_list()->::sg::SeatFoodOrderList::MergeFrom(from.order_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_out_drop()->::sg::Reward::MergeFrom(from.out_drop());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000010u) {
      diy_recipeid_ = from.diy_recipeid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserFoodOrderService_FoodOrderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserFoodOrderService.FoodOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFoodOrderService_FoodOrderResponse::CopyFrom(const UserFoodOrderService_FoodOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserFoodOrderService.FoodOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFoodOrderService_FoodOrderResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_order_list()) {
    if (!this->order_list_->IsInitialized()) return false;
  }
  if (has_out_drop()) {
    if (!this->out_drop_->IsInitialized()) return false;
  }
  return true;
}

void UserFoodOrderService_FoodOrderResponse::Swap(UserFoodOrderService_FoodOrderResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserFoodOrderService_FoodOrderResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserFoodOrderService_FoodOrderResponse::UnsafeArenaSwap(UserFoodOrderService_FoodOrderResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserFoodOrderService_FoodOrderResponse::InternalSwap(UserFoodOrderService_FoodOrderResponse* other) {
  using std::swap;
  swap(order_list_, other->order_list_);
  swap(out_drop_, other->out_drop_);
  swap(result_, other->result_);
  swap(star_, other->star_);
  swap(diy_recipeid_, other->diy_recipeid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserFoodOrderService_FoodOrderResponse::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserFoodOrderService::InitAsDefaultInstance() {
  ::sg::_UserFoodOrderService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserFoodOrderService_FoodOrderRequest*>(
      ::sg::UserFoodOrderService_FoodOrderRequest::internal_default_instance());
  ::sg::_UserFoodOrderService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserFoodOrderService_FoodOrderResponse*>(
      ::sg::UserFoodOrderService_FoodOrderResponse::internal_default_instance());
}
void UserFoodOrderService::unsafe_arena_set_allocated_req(
    ::sg::UserFoodOrderService_FoodOrderRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserFoodOrderService.req)
}
void UserFoodOrderService::unsafe_arena_set_allocated_resp(
    ::sg::UserFoodOrderService_FoodOrderResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserFoodOrderService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserFoodOrderService::kReqFieldNumber;
const int UserFoodOrderService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserFoodOrderService::UserFoodOrderService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserFoodOrderService)
}
UserFoodOrderService::UserFoodOrderService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserFoodOrderService)
}
UserFoodOrderService::UserFoodOrderService(const UserFoodOrderService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserFoodOrderService_FoodOrderRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserFoodOrderService_FoodOrderResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserFoodOrderService)
}

void UserFoodOrderService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserFoodOrderService::~UserFoodOrderService() {
  // @@protoc_insertion_point(destructor:sg.UserFoodOrderService)
  SharedDtor();
}

void UserFoodOrderService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserFoodOrderService::ArenaDtor(void* object) {
  UserFoodOrderService* _this = reinterpret_cast< UserFoodOrderService* >(object);
  (void)_this;
}
void UserFoodOrderService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserFoodOrderService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserFoodOrderService::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserFoodOrderService& UserFoodOrderService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_UserFoodOrderService.base);
  return *internal_default_instance();
}


void UserFoodOrderService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserFoodOrderService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserFoodOrderService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserFoodOrderService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserFoodOrderService.FoodOrderRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserFoodOrderService.FoodOrderResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserFoodOrderService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserFoodOrderService)
  return false;
#undef DO_
}

void UserFoodOrderService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserFoodOrderService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserFoodOrderService.FoodOrderRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserFoodOrderService.FoodOrderResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserFoodOrderService)
}

::google::protobuf::uint8* UserFoodOrderService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserFoodOrderService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserFoodOrderService.FoodOrderRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserFoodOrderService.FoodOrderResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserFoodOrderService)
  return target;
}

size_t UserFoodOrderService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserFoodOrderService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserFoodOrderService.FoodOrderRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserFoodOrderService.FoodOrderResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFoodOrderService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserFoodOrderService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFoodOrderService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserFoodOrderService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserFoodOrderService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserFoodOrderService)
    MergeFrom(*source);
  }
}

void UserFoodOrderService::MergeFrom(const UserFoodOrderService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserFoodOrderService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserFoodOrderService_FoodOrderRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserFoodOrderService_FoodOrderResponse::MergeFrom(from.resp());
    }
  }
}

void UserFoodOrderService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserFoodOrderService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFoodOrderService::CopyFrom(const UserFoodOrderService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserFoodOrderService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFoodOrderService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserFoodOrderService::Swap(UserFoodOrderService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserFoodOrderService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserFoodOrderService::UnsafeArenaSwap(UserFoodOrderService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserFoodOrderService::InternalSwap(UserFoodOrderService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserFoodOrderService::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SeatFoodOrderStateNotify::InitAsDefaultInstance() {
  ::sg::_SeatFoodOrderStateNotify_default_instance_._instance.get_mutable()->order_list_ = const_cast< ::sg::SeatFoodOrderList*>(
      ::sg::SeatFoodOrderList::internal_default_instance());
}
void SeatFoodOrderStateNotify::unsafe_arena_set_allocated_order_list(
    ::sg::SeatFoodOrderList* order_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete order_list_;
  }
  order_list_ = order_list;
  if (order_list) {
    set_has_order_list();
  } else {
    clear_has_order_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.SeatFoodOrderStateNotify.order_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatFoodOrderStateNotify::kOrderListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatFoodOrderStateNotify::SeatFoodOrderStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrderStateNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SeatFoodOrderStateNotify)
}
SeatFoodOrderStateNotify::SeatFoodOrderStateNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrderStateNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SeatFoodOrderStateNotify)
}
SeatFoodOrderStateNotify::SeatFoodOrderStateNotify(const SeatFoodOrderStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_order_list()) {
    order_list_ = new ::sg::SeatFoodOrderList(*from.order_list_);
  } else {
    order_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.SeatFoodOrderStateNotify)
}

void SeatFoodOrderStateNotify::SharedCtor() {
  order_list_ = NULL;
}

SeatFoodOrderStateNotify::~SeatFoodOrderStateNotify() {
  // @@protoc_insertion_point(destructor:sg.SeatFoodOrderStateNotify)
  SharedDtor();
}

void SeatFoodOrderStateNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete order_list_;
}

void SeatFoodOrderStateNotify::ArenaDtor(void* object) {
  SeatFoodOrderStateNotify* _this = reinterpret_cast< SeatFoodOrderStateNotify* >(object);
  (void)_this;
}
void SeatFoodOrderStateNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SeatFoodOrderStateNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SeatFoodOrderStateNotify::descriptor() {
  ::protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeatFoodOrderStateNotify& SeatFoodOrderStateNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHarbour_2eproto::scc_info_SeatFoodOrderStateNotify.base);
  return *internal_default_instance();
}


void SeatFoodOrderStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SeatFoodOrderStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(order_list_ != NULL);
    order_list_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SeatFoodOrderStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SeatFoodOrderStateNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.SeatFoodOrderList order_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SeatFoodOrderStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SeatFoodOrderStateNotify)
  return false;
#undef DO_
}

void SeatFoodOrderStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SeatFoodOrderStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.SeatFoodOrderList order_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_order_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SeatFoodOrderStateNotify)
}

::google::protobuf::uint8* SeatFoodOrderStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SeatFoodOrderStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.SeatFoodOrderList order_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_order_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SeatFoodOrderStateNotify)
  return target;
}

size_t SeatFoodOrderStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SeatFoodOrderStateNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.SeatFoodOrderList order_list = 1;
  if (has_order_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_list_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeatFoodOrderStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SeatFoodOrderStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SeatFoodOrderStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatFoodOrderStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SeatFoodOrderStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SeatFoodOrderStateNotify)
    MergeFrom(*source);
  }
}

void SeatFoodOrderStateNotify::MergeFrom(const SeatFoodOrderStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SeatFoodOrderStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order_list()) {
    mutable_order_list()->::sg::SeatFoodOrderList::MergeFrom(from.order_list());
  }
}

void SeatFoodOrderStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SeatFoodOrderStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatFoodOrderStateNotify::CopyFrom(const SeatFoodOrderStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SeatFoodOrderStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatFoodOrderStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_order_list()) {
    if (!this->order_list_->IsInitialized()) return false;
  }
  return true;
}

void SeatFoodOrderStateNotify::Swap(SeatFoodOrderStateNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeatFoodOrderStateNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SeatFoodOrderStateNotify::UnsafeArenaSwap(SeatFoodOrderStateNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeatFoodOrderStateNotify::InternalSwap(SeatFoodOrderStateNotify* other) {
  using std::swap;
  swap(order_list_, other->order_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SeatFoodOrderStateNotify::GetMetadata() const {
  protobuf_UserHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborInfo* Arena::CreateMaybeMessage< ::sg::HarborInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborNpc_resident_task* Arena::CreateMaybeMessage< ::sg::HarborNpc_resident_task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborNpc_resident_task >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborNpc* Arena::CreateMaybeMessage< ::sg::HarborNpc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborNpc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborNpcList* Arena::CreateMaybeMessage< ::sg::HarborNpcList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborNpcList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborPopulation* Arena::CreateMaybeMessage< ::sg::HarborPopulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborPopulation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborPopulationList* Arena::CreateMaybeMessage< ::sg::HarborPopulationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborPopulationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborNpcInfo* Arena::CreateMaybeMessage< ::sg::HarborNpcInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborNpcInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborNpcInfoList* Arena::CreateMaybeMessage< ::sg::HarborNpcInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborNpcInfoList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserHarborNpcService_HarborNpcRequest* Arena::CreateMaybeMessage< ::sg::UserHarborNpcService_HarborNpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserHarborNpcService_HarborNpcRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserHarborNpcService_HarborNpcResponse* Arena::CreateMaybeMessage< ::sg::UserHarborNpcService_HarborNpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserHarborNpcService_HarborNpcResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserHarborNpcService* Arena::CreateMaybeMessage< ::sg::UserHarborNpcService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserHarborNpcService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborStateNotify* Arena::CreateMaybeMessage< ::sg::HarborStateNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborStateNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarborNpcStateNotify* Arena::CreateMaybeMessage< ::sg::HarborNpcStateNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarborNpcStateNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FoodStyle* Arena::CreateMaybeMessage< ::sg::FoodStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FoodStyle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FoodStyleList* Arena::CreateMaybeMessage< ::sg::FoodStyleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FoodStyleList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SeatFoodOrder* Arena::CreateMaybeMessage< ::sg::SeatFoodOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SeatFoodOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SeatFoodOrderList* Arena::CreateMaybeMessage< ::sg::SeatFoodOrderList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SeatFoodOrderList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SeatMenuFood* Arena::CreateMaybeMessage< ::sg::SeatMenuFood >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SeatMenuFood >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SeatMenu* Arena::CreateMaybeMessage< ::sg::SeatMenu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SeatMenu >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserFoodOrderService_FoodOrderRequest* Arena::CreateMaybeMessage< ::sg::UserFoodOrderService_FoodOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserFoodOrderService_FoodOrderRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserFoodOrderService_FoodOrderResponse* Arena::CreateMaybeMessage< ::sg::UserFoodOrderService_FoodOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserFoodOrderService_FoodOrderResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserFoodOrderService* Arena::CreateMaybeMessage< ::sg::UserFoodOrderService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserFoodOrderService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SeatFoodOrderStateNotify* Arena::CreateMaybeMessage< ::sg::SeatFoodOrderStateNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SeatFoodOrderStateNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
