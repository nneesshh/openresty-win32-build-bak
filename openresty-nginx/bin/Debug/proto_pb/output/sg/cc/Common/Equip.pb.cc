// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Equip.proto

#include "Equip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Equip;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Equip_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Equip_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EquipService_EquipRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Equip_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_EquipService_EquipResponse;
}  // namespace protobuf_Equip_2eproto
namespace sg {
class EquipService_EquipRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EquipService_EquipRequest>
      _instance;
} _EquipService_EquipRequest_default_instance_;
class EquipService_EquipResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EquipService_EquipResponse>
      _instance;
} _EquipService_EquipResponse_default_instance_;
class EquipServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EquipService>
      _instance;
} _EquipService_default_instance_;
}  // namespace sg
namespace protobuf_Equip_2eproto {
static void InitDefaultsEquipService_EquipRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_EquipService_EquipRequest_default_instance_;
    new (ptr) ::sg::EquipService_EquipRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::EquipService_EquipRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EquipService_EquipRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEquipService_EquipRequest}, {}};

static void InitDefaultsEquipService_EquipResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_EquipService_EquipResponse_default_instance_;
    new (ptr) ::sg::EquipService_EquipResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::EquipService_EquipResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EquipService_EquipResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEquipService_EquipResponse}, {
      &protobuf_BaseStruct_2eproto::scc_info_Equip.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsEquipService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_EquipService_default_instance_;
    new (ptr) ::sg::EquipService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::EquipService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EquipService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEquipService}, {
      &protobuf_Equip_2eproto::scc_info_EquipService_EquipRequest.base,
      &protobuf_Equip_2eproto::scc_info_EquipService_EquipResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EquipService_EquipRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EquipService_EquipResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EquipService.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipRequest, equip_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipRequest, slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipRequest, refine_way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipRequest, decompose_way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipRequest, decompose_list_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipResponse, big_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipResponse, equip_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService_EquipResponse, get_),
  1,
  2,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EquipService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::sg::EquipService_EquipRequest)},
  { 17, 26, sizeof(::sg::EquipService_EquipResponse)},
  { 30, 37, sizeof(::sg::EquipService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_EquipService_EquipRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_EquipService_EquipResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_EquipService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Equip.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013Equip.proto\022\002sg\032\020BaseStruct.proto\"\343\003\n\014"
      "EquipService\022*\n\003req\030\001 \001(\0132\035.sg.EquipServ"
      "ice.EquipRequest\022,\n\004resp\030\002 \001(\0132\036.sg.Equi"
      "pService.EquipResponse\032\235\001\n\014EquipRequest\022"
      "\'\n\003cmd\030\001 \002(\0162\032.sg.EquipService.EQUIP_CMD"
      "\022\020\n\010equip_id\030\002 \001(\005\022\017\n\007slot_id\030\003 \001(\005\022\022\n\nr"
      "efine_way\030\004 \001(\005\022\025\n\rdecompose_way\030\005 \001(\005\022\026"
      "\n\016decompose_list\030\006 \003(\005\032l\n\rEquipResponse\022"
      "\016\n\006result\030\001 \002(\005\022\023\n\013big_success\030\002 \001(\010\022\035\n\n"
      "equip_list\030\003 \003(\0132\t.sg.Equip\022\027\n\003get\030\004 \001(\013"
      "2\n.sg.Reward\"k\n\tEQUIP_CMD\022\t\n\005QUERY\020\001\022\n\n\006"
      "REFINE\020\002\022\r\n\tDECOMPOSE\020\003\022\010\n\004LOCK\020\004\022\020\n\014RES"
      "ET_REFINE\020\005\022\010\n\004SALE\020\006\022\022\n\016QUALITY_REFINE\020"
      "\007B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 526);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Equip.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Equip_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* EquipService_EQUIP_CMD_descriptor() {
  protobuf_Equip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Equip_2eproto::file_level_enum_descriptors[0];
}
bool EquipService_EQUIP_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EquipService_EQUIP_CMD EquipService::QUERY;
const EquipService_EQUIP_CMD EquipService::REFINE;
const EquipService_EQUIP_CMD EquipService::DECOMPOSE;
const EquipService_EQUIP_CMD EquipService::LOCK;
const EquipService_EQUIP_CMD EquipService::RESET_REFINE;
const EquipService_EQUIP_CMD EquipService::SALE;
const EquipService_EQUIP_CMD EquipService::QUALITY_REFINE;
const EquipService_EQUIP_CMD EquipService::EQUIP_CMD_MIN;
const EquipService_EQUIP_CMD EquipService::EQUIP_CMD_MAX;
const int EquipService::EQUIP_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EquipService_EquipRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipService_EquipRequest::kCmdFieldNumber;
const int EquipService_EquipRequest::kEquipIdFieldNumber;
const int EquipService_EquipRequest::kSlotIdFieldNumber;
const int EquipService_EquipRequest::kRefineWayFieldNumber;
const int EquipService_EquipRequest::kDecomposeWayFieldNumber;
const int EquipService_EquipRequest::kDecomposeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipService_EquipRequest::EquipService_EquipRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Equip_2eproto::scc_info_EquipService_EquipRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.EquipService.EquipRequest)
}
EquipService_EquipRequest::EquipService_EquipRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  decompose_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Equip_2eproto::scc_info_EquipService_EquipRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.EquipService.EquipRequest)
}
EquipService_EquipRequest::EquipService_EquipRequest(const EquipService_EquipRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      decompose_list_(from.decompose_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&equip_id_, &from.equip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&equip_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.EquipService.EquipRequest)
}

void EquipService_EquipRequest::SharedCtor() {
  ::memset(&equip_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decompose_way_) -
      reinterpret_cast<char*>(&equip_id_)) + sizeof(decompose_way_));
  cmd_ = 1;
}

EquipService_EquipRequest::~EquipService_EquipRequest() {
  // @@protoc_insertion_point(destructor:sg.EquipService.EquipRequest)
  SharedDtor();
}

void EquipService_EquipRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void EquipService_EquipRequest::ArenaDtor(void* object) {
  EquipService_EquipRequest* _this = reinterpret_cast< EquipService_EquipRequest* >(object);
  (void)_this;
}
void EquipService_EquipRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EquipService_EquipRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EquipService_EquipRequest::descriptor() {
  ::protobuf_Equip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Equip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EquipService_EquipRequest& EquipService_EquipRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Equip_2eproto::scc_info_EquipService_EquipRequest.base);
  return *internal_default_instance();
}


void EquipService_EquipRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.EquipService.EquipRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decompose_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&equip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&decompose_way_) -
        reinterpret_cast<char*>(&equip_id_)) + sizeof(decompose_way_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EquipService_EquipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.EquipService.EquipRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.EquipService.EQUIP_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::EquipService_EQUIP_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::EquipService_EQUIP_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 equip_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_equip_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 slot_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_slot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 refine_way = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_refine_way();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_way_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 decompose_way = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_decompose_way();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decompose_way_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 decompose_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_decompose_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_decompose_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.EquipService.EquipRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.EquipService.EquipRequest)
  return false;
#undef DO_
}

void EquipService_EquipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.EquipService.EquipRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.EquipService.EQUIP_CMD cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 equip_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_id(), output);
  }

  // optional int32 slot_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_id(), output);
  }

  // optional int32 refine_way = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refine_way(), output);
  }

  // optional int32 decompose_way = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decompose_way(), output);
  }

  // repeated int32 decompose_list = 6;
  for (int i = 0, n = this->decompose_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->decompose_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.EquipService.EquipRequest)
}

::google::protobuf::uint8* EquipService_EquipRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.EquipService.EquipRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.EquipService.EQUIP_CMD cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 equip_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_id(), target);
  }

  // optional int32 slot_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_id(), target);
  }

  // optional int32 refine_way = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refine_way(), target);
  }

  // optional int32 decompose_way = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decompose_way(), target);
  }

  // repeated int32 decompose_list = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->decompose_list_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.EquipService.EquipRequest)
  return target;
}

size_t EquipService_EquipRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.EquipService.EquipRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.EquipService.EQUIP_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated int32 decompose_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->decompose_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->decompose_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 equip_id = 2;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_id());
    }

    // optional int32 slot_id = 3;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_id());
    }

    // optional int32 refine_way = 4;
    if (has_refine_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_way());
    }

    // optional int32 decompose_way = 5;
    if (has_decompose_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decompose_way());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipService_EquipRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.EquipService.EquipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipService_EquipRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipService_EquipRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.EquipService.EquipRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.EquipService.EquipRequest)
    MergeFrom(*source);
  }
}

void EquipService_EquipRequest::MergeFrom(const EquipService_EquipRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.EquipService.EquipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decompose_list_.MergeFrom(from.decompose_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      equip_id_ = from.equip_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      refine_way_ = from.refine_way_;
    }
    if (cached_has_bits & 0x00000008u) {
      decompose_way_ = from.decompose_way_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EquipService_EquipRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.EquipService.EquipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipService_EquipRequest::CopyFrom(const EquipService_EquipRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.EquipService.EquipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipService_EquipRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void EquipService_EquipRequest::Swap(EquipService_EquipRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EquipService_EquipRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EquipService_EquipRequest::UnsafeArenaSwap(EquipService_EquipRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EquipService_EquipRequest::InternalSwap(EquipService_EquipRequest* other) {
  using std::swap;
  decompose_list_.InternalSwap(&other->decompose_list_);
  swap(equip_id_, other->equip_id_);
  swap(slot_id_, other->slot_id_);
  swap(refine_way_, other->refine_way_);
  swap(decompose_way_, other->decompose_way_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EquipService_EquipRequest::GetMetadata() const {
  protobuf_Equip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Equip_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EquipService_EquipResponse::InitAsDefaultInstance() {
  ::sg::_EquipService_EquipResponse_default_instance_._instance.get_mutable()->get_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void EquipService_EquipResponse::clear_equip_list() {
  equip_list_.Clear();
}
void EquipService_EquipResponse::unsafe_arena_set_allocated_get(
    ::sg::Reward* get) {
  if (GetArenaNoVirtual() == NULL) {
    delete get_;
  }
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.EquipService.EquipResponse.get)
}
void EquipService_EquipResponse::clear_get() {
  if (get_ != NULL) get_->Clear();
  clear_has_get();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipService_EquipResponse::kResultFieldNumber;
const int EquipService_EquipResponse::kBigSuccessFieldNumber;
const int EquipService_EquipResponse::kEquipListFieldNumber;
const int EquipService_EquipResponse::kGetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipService_EquipResponse::EquipService_EquipResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Equip_2eproto::scc_info_EquipService_EquipResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.EquipService.EquipResponse)
}
EquipService_EquipResponse::EquipService_EquipResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  equip_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Equip_2eproto::scc_info_EquipService_EquipResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.EquipService.EquipResponse)
}
EquipService_EquipResponse::EquipService_EquipResponse(const EquipService_EquipResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      equip_list_(from.equip_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_get()) {
    get_ = new ::sg::Reward(*from.get_);
  } else {
    get_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&big_success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(big_success_));
  // @@protoc_insertion_point(copy_constructor:sg.EquipService.EquipResponse)
}

void EquipService_EquipResponse::SharedCtor() {
  ::memset(&get_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_success_) -
      reinterpret_cast<char*>(&get_)) + sizeof(big_success_));
}

EquipService_EquipResponse::~EquipService_EquipResponse() {
  // @@protoc_insertion_point(destructor:sg.EquipService.EquipResponse)
  SharedDtor();
}

void EquipService_EquipResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete get_;
}

void EquipService_EquipResponse::ArenaDtor(void* object) {
  EquipService_EquipResponse* _this = reinterpret_cast< EquipService_EquipResponse* >(object);
  (void)_this;
}
void EquipService_EquipResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EquipService_EquipResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EquipService_EquipResponse::descriptor() {
  ::protobuf_Equip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Equip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EquipService_EquipResponse& EquipService_EquipResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Equip_2eproto::scc_info_EquipService_EquipResponse.base);
  return *internal_default_instance();
}


void EquipService_EquipResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.EquipService.EquipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equip_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(get_ != NULL);
    get_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&big_success_) -
        reinterpret_cast<char*>(&result_)) + sizeof(big_success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EquipService_EquipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.EquipService.EquipResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool big_success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_big_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &big_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Equip equip_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equip_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward get = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.EquipService.EquipResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.EquipService.EquipResponse)
  return false;
#undef DO_
}

void EquipService_EquipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.EquipService.EquipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional bool big_success = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->big_success(), output);
  }

  // repeated .sg.Equip equip_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equip_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->equip_list(static_cast<int>(i)),
      output);
  }

  // optional .sg.Reward get = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_get(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.EquipService.EquipResponse)
}

::google::protobuf::uint8* EquipService_EquipResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.EquipService.EquipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional bool big_success = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->big_success(), target);
  }

  // repeated .sg.Equip equip_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equip_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->equip_list(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.Reward get = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_get(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.EquipService.EquipResponse)
  return target;
}

size_t EquipService_EquipResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.EquipService.EquipResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.Equip equip_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->equip_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equip_list(static_cast<int>(i)));
    }
  }

  // optional .sg.Reward get = 4;
  if (has_get()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *get_);
  }

  // optional bool big_success = 2;
  if (has_big_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipService_EquipResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.EquipService.EquipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipService_EquipResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipService_EquipResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.EquipService.EquipResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.EquipService.EquipResponse)
    MergeFrom(*source);
  }
}

void EquipService_EquipResponse::MergeFrom(const EquipService_EquipResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.EquipService.EquipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equip_list_.MergeFrom(from.equip_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_get()->::sg::Reward::MergeFrom(from.get());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      big_success_ = from.big_success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EquipService_EquipResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.EquipService.EquipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipService_EquipResponse::CopyFrom(const EquipService_EquipResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.EquipService.EquipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipService_EquipResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equip_list())) return false;
  if (has_get()) {
    if (!this->get_->IsInitialized()) return false;
  }
  return true;
}

void EquipService_EquipResponse::Swap(EquipService_EquipResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EquipService_EquipResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EquipService_EquipResponse::UnsafeArenaSwap(EquipService_EquipResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EquipService_EquipResponse::InternalSwap(EquipService_EquipResponse* other) {
  using std::swap;
  CastToBase(&equip_list_)->InternalSwap(CastToBase(&other->equip_list_));
  swap(get_, other->get_);
  swap(result_, other->result_);
  swap(big_success_, other->big_success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EquipService_EquipResponse::GetMetadata() const {
  protobuf_Equip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Equip_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EquipService::InitAsDefaultInstance() {
  ::sg::_EquipService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::EquipService_EquipRequest*>(
      ::sg::EquipService_EquipRequest::internal_default_instance());
  ::sg::_EquipService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::EquipService_EquipResponse*>(
      ::sg::EquipService_EquipResponse::internal_default_instance());
}
void EquipService::unsafe_arena_set_allocated_req(
    ::sg::EquipService_EquipRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.EquipService.req)
}
void EquipService::unsafe_arena_set_allocated_resp(
    ::sg::EquipService_EquipResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.EquipService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipService::kReqFieldNumber;
const int EquipService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipService::EquipService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Equip_2eproto::scc_info_EquipService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.EquipService)
}
EquipService::EquipService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Equip_2eproto::scc_info_EquipService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.EquipService)
}
EquipService::EquipService(const EquipService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::EquipService_EquipRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::EquipService_EquipResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.EquipService)
}

void EquipService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

EquipService::~EquipService() {
  // @@protoc_insertion_point(destructor:sg.EquipService)
  SharedDtor();
}

void EquipService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void EquipService::ArenaDtor(void* object) {
  EquipService* _this = reinterpret_cast< EquipService* >(object);
  (void)_this;
}
void EquipService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EquipService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EquipService::descriptor() {
  ::protobuf_Equip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Equip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EquipService& EquipService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Equip_2eproto::scc_info_EquipService.base);
  return *internal_default_instance();
}


void EquipService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.EquipService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EquipService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.EquipService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.EquipService.EquipRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.EquipService.EquipResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.EquipService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.EquipService)
  return false;
#undef DO_
}

void EquipService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.EquipService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.EquipService.EquipRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.EquipService.EquipResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.EquipService)
}

::google::protobuf::uint8* EquipService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.EquipService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.EquipService.EquipRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.EquipService.EquipResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.EquipService)
  return target;
}

size_t EquipService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.EquipService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.EquipService.EquipRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.EquipService.EquipResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.EquipService)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.EquipService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.EquipService)
    MergeFrom(*source);
  }
}

void EquipService::MergeFrom(const EquipService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.EquipService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::EquipService_EquipRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::EquipService_EquipResponse::MergeFrom(from.resp());
    }
  }
}

void EquipService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.EquipService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipService::CopyFrom(const EquipService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.EquipService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void EquipService::Swap(EquipService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EquipService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EquipService::UnsafeArenaSwap(EquipService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EquipService::InternalSwap(EquipService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EquipService::GetMetadata() const {
  protobuf_Equip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Equip_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::EquipService_EquipRequest* Arena::CreateMaybeMessage< ::sg::EquipService_EquipRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::EquipService_EquipRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::EquipService_EquipResponse* Arena::CreateMaybeMessage< ::sg::EquipService_EquipResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::EquipService_EquipResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::EquipService* Arena::CreateMaybeMessage< ::sg::EquipService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::EquipService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
