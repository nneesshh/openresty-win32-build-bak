// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Achievement.proto

#include "Achievement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Achievement_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Achievement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Achievement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Achievement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserAchievementService_UserAchievementRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Achievement_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserAchievementService_UserAchievementResponse;
}  // namespace protobuf_Achievement_2eproto
namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace sg {
class AchievementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Achievement>
      _instance;
} _Achievement_default_instance_;
class UserAchievementService_UserAchievementRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserAchievementService_UserAchievementRequest>
      _instance;
} _UserAchievementService_UserAchievementRequest_default_instance_;
class UserAchievementService_UserAchievementResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserAchievementService_UserAchievementResponse>
      _instance;
} _UserAchievementService_UserAchievementResponse_default_instance_;
class UserAchievementServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserAchievementService>
      _instance;
} _UserAchievementService_default_instance_;
class AchievementNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AchievementNotify>
      _instance;
} _AchievementNotify_default_instance_;
}  // namespace sg
namespace protobuf_Achievement_2eproto {
static void InitDefaultsAchievement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Achievement_default_instance_;
    new (ptr) ::sg::Achievement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Achievement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Achievement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAchievement}, {}};

static void InitDefaultsUserAchievementService_UserAchievementRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserAchievementService_UserAchievementRequest_default_instance_;
    new (ptr) ::sg::UserAchievementService_UserAchievementRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserAchievementService_UserAchievementRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserAchievementService_UserAchievementRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserAchievementService_UserAchievementRequest}, {}};

static void InitDefaultsUserAchievementService_UserAchievementResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserAchievementService_UserAchievementResponse_default_instance_;
    new (ptr) ::sg::UserAchievementService_UserAchievementResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserAchievementService_UserAchievementResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserAchievementService_UserAchievementResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserAchievementService_UserAchievementResponse}, {
      &protobuf_Achievement_2eproto::scc_info_Achievement.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsUserAchievementService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserAchievementService_default_instance_;
    new (ptr) ::sg::UserAchievementService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserAchievementService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserAchievementService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserAchievementService}, {
      &protobuf_Achievement_2eproto::scc_info_UserAchievementService_UserAchievementRequest.base,
      &protobuf_Achievement_2eproto::scc_info_UserAchievementService_UserAchievementResponse.base,}};

static void InitDefaultsAchievementNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_AchievementNotify_default_instance_;
    new (ptr) ::sg::AchievementNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::AchievementNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AchievementNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAchievementNotify}, {
      &protobuf_Achievement_2eproto::scc_info_Achievement.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Achievement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserAchievementService_UserAchievementRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserAchievementService_UserAchievementResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserAchievementService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AchievementNotify.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Achievement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Achievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Achievement, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Achievement, finish_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Achievement, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Achievement, state_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementRequest, id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementResponse, achievement_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementResponse, achievement_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService_UserAchievementResponse, reward_),
  1,
  ~0u,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserAchievementService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::AchievementNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::AchievementNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::AchievementNotify, achievement_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::sg::Achievement)},
  { 13, 20, sizeof(::sg::UserAchievementService_UserAchievementRequest)},
  { 22, 31, sizeof(::sg::UserAchievementService_UserAchievementResponse)},
  { 35, 42, sizeof(::sg::UserAchievementService)},
  { 44, 50, sizeof(::sg::AchievementNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Achievement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserAchievementService_UserAchievementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserAchievementService_UserAchievementResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserAchievementService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_AchievementNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Achievement.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021Achievement.proto\022\002sg\032\020BaseStruct.prot"
      "o\"M\n\013Achievement\022\n\n\002id\030\001 \002(\005\022\024\n\014finish_v"
      "alue\030\002 \002(\003\022\r\n\005phase\030\003 \002(\005\022\r\n\005state\030\004 \002(\005"
      "\"\235\003\n\026UserAchievementService\022>\n\003req\030\001 \001(\013"
      "21.sg.UserAchievementService.UserAchieve"
      "mentRequest\022@\n\004resp\030\002 \001(\01322.sg.UserAchie"
      "vementService.UserAchievementResponse\032Q\n"
      "\026UserAchievementRequest\022+\n\003cmd\030\001 \002(\0162\036.s"
      "g.UserAchievementService.CMD\022\n\n\002id\030\002 \001(\005"
      "\032\213\001\n\027UserAchievementResponse\022\016\n\006result\030\001"
      " \002(\005\022)\n\020achievement_list\030\002 \003(\0132\017.sg.Achi"
      "evement\022\031\n\021achievement_point\030\003 \001(\005\022\032\n\006re"
      "ward\030\004 \001(\0132\n.sg.Reward\" \n\003CMD\022\t\n\005QUERY\020\001"
      "\022\016\n\nGET_REWARD\020\002\"9\n\021AchievementNotify\022$\n"
      "\013achievement\030\001 \002(\0132\017.sg.AchievementB\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Achievement.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Achievement_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* UserAchievementService_CMD_descriptor() {
  protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Achievement_2eproto::file_level_enum_descriptors[0];
}
bool UserAchievementService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserAchievementService_CMD UserAchievementService::QUERY;
const UserAchievementService_CMD UserAchievementService::GET_REWARD;
const UserAchievementService_CMD UserAchievementService::CMD_MIN;
const UserAchievementService_CMD UserAchievementService::CMD_MAX;
const int UserAchievementService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Achievement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Achievement::kIdFieldNumber;
const int Achievement::kFinishValueFieldNumber;
const int Achievement::kPhaseFieldNumber;
const int Achievement::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Achievement::Achievement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Achievement_2eproto::scc_info_Achievement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Achievement)
}
Achievement::Achievement(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_Achievement.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Achievement)
}
Achievement::Achievement(const Achievement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&finish_value_, &from.finish_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&finish_value_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.Achievement)
}

void Achievement::SharedCtor() {
  ::memset(&finish_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&finish_value_)) + sizeof(state_));
}

Achievement::~Achievement() {
  // @@protoc_insertion_point(destructor:sg.Achievement)
  SharedDtor();
}

void Achievement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Achievement::ArenaDtor(void* object) {
  Achievement* _this = reinterpret_cast< Achievement* >(object);
  (void)_this;
}
void Achievement::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Achievement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Achievement::descriptor() {
  ::protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Achievement& Achievement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_Achievement.base);
  return *internal_default_instance();
}


void Achievement::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Achievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&finish_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&finish_value_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Achievement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 finish_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_finish_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finish_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Achievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Achievement)
  return false;
#undef DO_
}

void Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Achievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 finish_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->finish_value(), output);
  }

  // required int32 phase = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->phase(), output);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Achievement)
}

::google::protobuf::uint8* Achievement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Achievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 finish_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->finish_value(), target);
  }

  // required int32 phase = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->phase(), target);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Achievement)
  return target;
}

size_t Achievement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Achievement)
  size_t total_size = 0;

  if (has_finish_value()) {
    // required int64 finish_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->finish_value());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_phase()) {
    // required int32 phase = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phase());
  }

  if (has_state()) {
    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t Achievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Achievement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 finish_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->finish_value());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 phase = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phase());

    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Achievement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  const Achievement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Achievement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Achievement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Achievement)
    MergeFrom(*source);
  }
}

void Achievement::MergeFrom(const Achievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      finish_value_ = from.finish_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Achievement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achievement::CopyFrom(const Achievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achievement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Achievement::Swap(Achievement* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Achievement* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Achievement::UnsafeArenaSwap(Achievement* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Achievement::InternalSwap(Achievement* other) {
  using std::swap;
  swap(finish_value_, other->finish_value_);
  swap(id_, other->id_);
  swap(phase_, other->phase_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Achievement::GetMetadata() const {
  protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserAchievementService_UserAchievementRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserAchievementService_UserAchievementRequest::kCmdFieldNumber;
const int UserAchievementService_UserAchievementRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserAchievementService_UserAchievementRequest::UserAchievementService_UserAchievementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Achievement_2eproto::scc_info_UserAchievementService_UserAchievementRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserAchievementService.UserAchievementRequest)
}
UserAchievementService_UserAchievementRequest::UserAchievementService_UserAchievementRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_UserAchievementService_UserAchievementRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserAchievementService.UserAchievementRequest)
}
UserAchievementService_UserAchievementRequest::UserAchievementService_UserAchievementRequest(const UserAchievementService_UserAchievementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserAchievementService.UserAchievementRequest)
}

void UserAchievementService_UserAchievementRequest::SharedCtor() {
  id_ = 0;
  cmd_ = 1;
}

UserAchievementService_UserAchievementRequest::~UserAchievementService_UserAchievementRequest() {
  // @@protoc_insertion_point(destructor:sg.UserAchievementService.UserAchievementRequest)
  SharedDtor();
}

void UserAchievementService_UserAchievementRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserAchievementService_UserAchievementRequest::ArenaDtor(void* object) {
  UserAchievementService_UserAchievementRequest* _this = reinterpret_cast< UserAchievementService_UserAchievementRequest* >(object);
  (void)_this;
}
void UserAchievementService_UserAchievementRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserAchievementService_UserAchievementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserAchievementService_UserAchievementRequest::descriptor() {
  ::protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserAchievementService_UserAchievementRequest& UserAchievementService_UserAchievementRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_UserAchievementService_UserAchievementRequest.base);
  return *internal_default_instance();
}


void UserAchievementService_UserAchievementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserAchievementService.UserAchievementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    id_ = 0;
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserAchievementService_UserAchievementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserAchievementService.UserAchievementRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserAchievementService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserAchievementService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserAchievementService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserAchievementService.UserAchievementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserAchievementService.UserAchievementRequest)
  return false;
#undef DO_
}

void UserAchievementService_UserAchievementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserAchievementService.UserAchievementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserAchievementService.CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserAchievementService.UserAchievementRequest)
}

::google::protobuf::uint8* UserAchievementService_UserAchievementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserAchievementService.UserAchievementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserAchievementService.CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserAchievementService.UserAchievementRequest)
  return target;
}

size_t UserAchievementService_UserAchievementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserAchievementService.UserAchievementRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserAchievementService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // optional int32 id = 2;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAchievementService_UserAchievementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserAchievementService.UserAchievementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAchievementService_UserAchievementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserAchievementService_UserAchievementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserAchievementService.UserAchievementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserAchievementService.UserAchievementRequest)
    MergeFrom(*source);
  }
}

void UserAchievementService_UserAchievementRequest::MergeFrom(const UserAchievementService_UserAchievementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserAchievementService.UserAchievementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserAchievementService_UserAchievementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserAchievementService.UserAchievementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAchievementService_UserAchievementRequest::CopyFrom(const UserAchievementService_UserAchievementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserAchievementService.UserAchievementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAchievementService_UserAchievementRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void UserAchievementService_UserAchievementRequest::Swap(UserAchievementService_UserAchievementRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserAchievementService_UserAchievementRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserAchievementService_UserAchievementRequest::UnsafeArenaSwap(UserAchievementService_UserAchievementRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserAchievementService_UserAchievementRequest::InternalSwap(UserAchievementService_UserAchievementRequest* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserAchievementService_UserAchievementRequest::GetMetadata() const {
  protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserAchievementService_UserAchievementResponse::InitAsDefaultInstance() {
  ::sg::_UserAchievementService_UserAchievementResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void UserAchievementService_UserAchievementResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserAchievementService.UserAchievementResponse.reward)
}
void UserAchievementService_UserAchievementResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserAchievementService_UserAchievementResponse::kResultFieldNumber;
const int UserAchievementService_UserAchievementResponse::kAchievementListFieldNumber;
const int UserAchievementService_UserAchievementResponse::kAchievementPointFieldNumber;
const int UserAchievementService_UserAchievementResponse::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserAchievementService_UserAchievementResponse::UserAchievementService_UserAchievementResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Achievement_2eproto::scc_info_UserAchievementService_UserAchievementResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserAchievementService.UserAchievementResponse)
}
UserAchievementService_UserAchievementResponse::UserAchievementService_UserAchievementResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  achievement_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_UserAchievementService_UserAchievementResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserAchievementService.UserAchievementResponse)
}
UserAchievementService_UserAchievementResponse::UserAchievementService_UserAchievementResponse(const UserAchievementService_UserAchievementResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      achievement_list_(from.achievement_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&achievement_point_) -
    reinterpret_cast<char*>(&result_)) + sizeof(achievement_point_));
  // @@protoc_insertion_point(copy_constructor:sg.UserAchievementService.UserAchievementResponse)
}

void UserAchievementService_UserAchievementResponse::SharedCtor() {
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&achievement_point_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(achievement_point_));
}

UserAchievementService_UserAchievementResponse::~UserAchievementService_UserAchievementResponse() {
  // @@protoc_insertion_point(destructor:sg.UserAchievementService.UserAchievementResponse)
  SharedDtor();
}

void UserAchievementService_UserAchievementResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete reward_;
}

void UserAchievementService_UserAchievementResponse::ArenaDtor(void* object) {
  UserAchievementService_UserAchievementResponse* _this = reinterpret_cast< UserAchievementService_UserAchievementResponse* >(object);
  (void)_this;
}
void UserAchievementService_UserAchievementResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserAchievementService_UserAchievementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserAchievementService_UserAchievementResponse::descriptor() {
  ::protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserAchievementService_UserAchievementResponse& UserAchievementService_UserAchievementResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_UserAchievementService_UserAchievementResponse.base);
  return *internal_default_instance();
}


void UserAchievementService_UserAchievementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserAchievementService.UserAchievementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achievement_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != NULL);
    reward_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&achievement_point_) -
        reinterpret_cast<char*>(&result_)) + sizeof(achievement_point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserAchievementService_UserAchievementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserAchievementService.UserAchievementResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Achievement achievement_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_achievement_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 achievement_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_achievement_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievement_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserAchievementService.UserAchievementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserAchievementService.UserAchievementResponse)
  return false;
#undef DO_
}

void UserAchievementService_UserAchievementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserAchievementService.UserAchievementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.Achievement achievement_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->achievement_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->achievement_list(static_cast<int>(i)),
      output);
  }

  // optional int32 achievement_point = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->achievement_point(), output);
  }

  // optional .sg.Reward reward = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserAchievementService.UserAchievementResponse)
}

::google::protobuf::uint8* UserAchievementService_UserAchievementResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserAchievementService.UserAchievementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.Achievement achievement_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->achievement_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->achievement_list(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 achievement_point = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->achievement_point(), target);
  }

  // optional .sg.Reward reward = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserAchievementService.UserAchievementResponse)
  return target;
}

size_t UserAchievementService_UserAchievementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserAchievementService.UserAchievementResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.Achievement achievement_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->achievement_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->achievement_list(static_cast<int>(i)));
    }
  }

  // optional .sg.Reward reward = 4;
  if (has_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // optional int32 achievement_point = 3;
  if (has_achievement_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->achievement_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAchievementService_UserAchievementResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserAchievementService.UserAchievementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAchievementService_UserAchievementResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserAchievementService_UserAchievementResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserAchievementService.UserAchievementResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserAchievementService.UserAchievementResponse)
    MergeFrom(*source);
  }
}

void UserAchievementService_UserAchievementResponse::MergeFrom(const UserAchievementService_UserAchievementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserAchievementService.UserAchievementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  achievement_list_.MergeFrom(from.achievement_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      achievement_point_ = from.achievement_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserAchievementService_UserAchievementResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserAchievementService.UserAchievementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAchievementService_UserAchievementResponse::CopyFrom(const UserAchievementService_UserAchievementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserAchievementService.UserAchievementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAchievementService_UserAchievementResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->achievement_list())) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void UserAchievementService_UserAchievementResponse::Swap(UserAchievementService_UserAchievementResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserAchievementService_UserAchievementResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserAchievementService_UserAchievementResponse::UnsafeArenaSwap(UserAchievementService_UserAchievementResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserAchievementService_UserAchievementResponse::InternalSwap(UserAchievementService_UserAchievementResponse* other) {
  using std::swap;
  CastToBase(&achievement_list_)->InternalSwap(CastToBase(&other->achievement_list_));
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(achievement_point_, other->achievement_point_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserAchievementService_UserAchievementResponse::GetMetadata() const {
  protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserAchievementService::InitAsDefaultInstance() {
  ::sg::_UserAchievementService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserAchievementService_UserAchievementRequest*>(
      ::sg::UserAchievementService_UserAchievementRequest::internal_default_instance());
  ::sg::_UserAchievementService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserAchievementService_UserAchievementResponse*>(
      ::sg::UserAchievementService_UserAchievementResponse::internal_default_instance());
}
void UserAchievementService::unsafe_arena_set_allocated_req(
    ::sg::UserAchievementService_UserAchievementRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserAchievementService.req)
}
void UserAchievementService::unsafe_arena_set_allocated_resp(
    ::sg::UserAchievementService_UserAchievementResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserAchievementService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserAchievementService::kReqFieldNumber;
const int UserAchievementService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserAchievementService::UserAchievementService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Achievement_2eproto::scc_info_UserAchievementService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserAchievementService)
}
UserAchievementService::UserAchievementService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_UserAchievementService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserAchievementService)
}
UserAchievementService::UserAchievementService(const UserAchievementService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserAchievementService_UserAchievementRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserAchievementService_UserAchievementResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserAchievementService)
}

void UserAchievementService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserAchievementService::~UserAchievementService() {
  // @@protoc_insertion_point(destructor:sg.UserAchievementService)
  SharedDtor();
}

void UserAchievementService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserAchievementService::ArenaDtor(void* object) {
  UserAchievementService* _this = reinterpret_cast< UserAchievementService* >(object);
  (void)_this;
}
void UserAchievementService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserAchievementService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserAchievementService::descriptor() {
  ::protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserAchievementService& UserAchievementService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_UserAchievementService.base);
  return *internal_default_instance();
}


void UserAchievementService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserAchievementService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserAchievementService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserAchievementService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserAchievementService.UserAchievementRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserAchievementService.UserAchievementResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserAchievementService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserAchievementService)
  return false;
#undef DO_
}

void UserAchievementService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserAchievementService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserAchievementService.UserAchievementRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserAchievementService.UserAchievementResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserAchievementService)
}

::google::protobuf::uint8* UserAchievementService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserAchievementService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserAchievementService.UserAchievementRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserAchievementService.UserAchievementResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserAchievementService)
  return target;
}

size_t UserAchievementService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserAchievementService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserAchievementService.UserAchievementRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserAchievementService.UserAchievementResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAchievementService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserAchievementService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAchievementService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserAchievementService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserAchievementService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserAchievementService)
    MergeFrom(*source);
  }
}

void UserAchievementService::MergeFrom(const UserAchievementService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserAchievementService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserAchievementService_UserAchievementRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserAchievementService_UserAchievementResponse::MergeFrom(from.resp());
    }
  }
}

void UserAchievementService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserAchievementService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAchievementService::CopyFrom(const UserAchievementService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserAchievementService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAchievementService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserAchievementService::Swap(UserAchievementService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserAchievementService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserAchievementService::UnsafeArenaSwap(UserAchievementService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserAchievementService::InternalSwap(UserAchievementService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserAchievementService::GetMetadata() const {
  protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AchievementNotify::InitAsDefaultInstance() {
  ::sg::_AchievementNotify_default_instance_._instance.get_mutable()->achievement_ = const_cast< ::sg::Achievement*>(
      ::sg::Achievement::internal_default_instance());
}
void AchievementNotify::unsafe_arena_set_allocated_achievement(
    ::sg::Achievement* achievement) {
  if (GetArenaNoVirtual() == NULL) {
    delete achievement_;
  }
  achievement_ = achievement;
  if (achievement) {
    set_has_achievement();
  } else {
    clear_has_achievement();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.AchievementNotify.achievement)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AchievementNotify::kAchievementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AchievementNotify::AchievementNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Achievement_2eproto::scc_info_AchievementNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.AchievementNotify)
}
AchievementNotify::AchievementNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_AchievementNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.AchievementNotify)
}
AchievementNotify::AchievementNotify(const AchievementNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_achievement()) {
    achievement_ = new ::sg::Achievement(*from.achievement_);
  } else {
    achievement_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.AchievementNotify)
}

void AchievementNotify::SharedCtor() {
  achievement_ = NULL;
}

AchievementNotify::~AchievementNotify() {
  // @@protoc_insertion_point(destructor:sg.AchievementNotify)
  SharedDtor();
}

void AchievementNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete achievement_;
}

void AchievementNotify::ArenaDtor(void* object) {
  AchievementNotify* _this = reinterpret_cast< AchievementNotify* >(object);
  (void)_this;
}
void AchievementNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AchievementNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AchievementNotify::descriptor() {
  ::protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AchievementNotify& AchievementNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Achievement_2eproto::scc_info_AchievementNotify.base);
  return *internal_default_instance();
}


void AchievementNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.AchievementNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(achievement_ != NULL);
    achievement_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AchievementNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.AchievementNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.Achievement achievement = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_achievement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.AchievementNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.AchievementNotify)
  return false;
#undef DO_
}

void AchievementNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.AchievementNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Achievement achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_achievement(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.AchievementNotify)
}

::google::protobuf::uint8* AchievementNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.AchievementNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Achievement achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_achievement(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.AchievementNotify)
  return target;
}

size_t AchievementNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.AchievementNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.Achievement achievement = 1;
  if (has_achievement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *achievement_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AchievementNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.AchievementNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AchievementNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AchievementNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.AchievementNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.AchievementNotify)
    MergeFrom(*source);
  }
}

void AchievementNotify::MergeFrom(const AchievementNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.AchievementNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_achievement()) {
    mutable_achievement()->::sg::Achievement::MergeFrom(from.achievement());
  }
}

void AchievementNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.AchievementNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementNotify::CopyFrom(const AchievementNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.AchievementNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_achievement()) {
    if (!this->achievement_->IsInitialized()) return false;
  }
  return true;
}

void AchievementNotify::Swap(AchievementNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AchievementNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AchievementNotify::UnsafeArenaSwap(AchievementNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AchievementNotify::InternalSwap(AchievementNotify* other) {
  using std::swap;
  swap(achievement_, other->achievement_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AchievementNotify::GetMetadata() const {
  protobuf_Achievement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Achievement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Achievement* Arena::CreateMaybeMessage< ::sg::Achievement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Achievement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserAchievementService_UserAchievementRequest* Arena::CreateMaybeMessage< ::sg::UserAchievementService_UserAchievementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserAchievementService_UserAchievementRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserAchievementService_UserAchievementResponse* Arena::CreateMaybeMessage< ::sg::UserAchievementService_UserAchievementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserAchievementService_UserAchievementResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserAchievementService* Arena::CreateMaybeMessage< ::sg::UserAchievementService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserAchievementService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::AchievementNotify* Arena::CreateMaybeMessage< ::sg::AchievementNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::AchievementNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
