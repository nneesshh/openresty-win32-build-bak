// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserNavigation.proto

#include "UserNavigation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_UserNavigation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserNavigation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NavigationEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserNavigation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NavigationRecord;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserNavigation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NavigationState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserNavigation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserNavigationService_UserNavigationRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserNavigation_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_UserNavigationService_UserNavigationResponse;
}  // namespace protobuf_UserNavigation_2eproto
namespace sg {
class NavigationEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationEvent>
      _instance;
} _NavigationEvent_default_instance_;
class NavigationStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationState>
      _instance;
} _NavigationState_default_instance_;
class NavigationRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationRecord>
      _instance;
} _NavigationRecord_default_instance_;
class UserNavigationService_UserNavigationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserNavigationService_UserNavigationRequest>
      _instance;
} _UserNavigationService_UserNavigationRequest_default_instance_;
class UserNavigationService_UserNavigationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserNavigationService_UserNavigationResponse>
      _instance;
} _UserNavigationService_UserNavigationResponse_default_instance_;
class UserNavigationServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserNavigationService>
      _instance;
} _UserNavigationService_default_instance_;
class NavigationEventIgnoredNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationEventIgnoredNotify>
      _instance;
} _NavigationEventIgnoredNotify_default_instance_;
class FastReachTicketNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FastReachTicketNotify>
      _instance;
} _FastReachTicketNotify_default_instance_;
}  // namespace sg
namespace protobuf_UserNavigation_2eproto {
static void InitDefaultsNavigationEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_NavigationEvent_default_instance_;
    new (ptr) ::sg::NavigationEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::NavigationEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NavigationEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNavigationEvent}, {}};

static void InitDefaultsNavigationState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_NavigationState_default_instance_;
    new (ptr) ::sg::NavigationState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::NavigationState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NavigationState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNavigationState}, {}};

static void InitDefaultsNavigationRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_NavigationRecord_default_instance_;
    new (ptr) ::sg::NavigationRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::NavigationRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NavigationRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNavigationRecord}, {}};

static void InitDefaultsUserNavigationService_UserNavigationRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserNavigationService_UserNavigationRequest_default_instance_;
    new (ptr) ::sg::UserNavigationService_UserNavigationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserNavigationService_UserNavigationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserNavigationService_UserNavigationRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserNavigationService_UserNavigationRequest}, {}};

static void InitDefaultsUserNavigationService_UserNavigationResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserNavigationService_UserNavigationResponse_default_instance_;
    new (ptr) ::sg::UserNavigationService_UserNavigationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserNavigationService_UserNavigationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_UserNavigationService_UserNavigationResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsUserNavigationService_UserNavigationResponse}, {
      &protobuf_UserNavigation_2eproto::scc_info_NavigationState.base,
      &protobuf_UserNavigation_2eproto::scc_info_NavigationRecord.base,
      &protobuf_UserNavigation_2eproto::scc_info_NavigationEvent.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,
      &protobuf_BaseStruct_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsUserNavigationService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserNavigationService_default_instance_;
    new (ptr) ::sg::UserNavigationService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserNavigationService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserNavigationService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserNavigationService}, {
      &protobuf_UserNavigation_2eproto::scc_info_UserNavigationService_UserNavigationRequest.base,
      &protobuf_UserNavigation_2eproto::scc_info_UserNavigationService_UserNavigationResponse.base,}};

static void InitDefaultsNavigationEventIgnoredNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_NavigationEventIgnoredNotify_default_instance_;
    new (ptr) ::sg::NavigationEventIgnoredNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::NavigationEventIgnoredNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NavigationEventIgnoredNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNavigationEventIgnoredNotify}, {
      &protobuf_UserNavigation_2eproto::scc_info_NavigationEvent.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsFastReachTicketNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FastReachTicketNotify_default_instance_;
    new (ptr) ::sg::FastReachTicketNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FastReachTicketNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FastReachTicketNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFastReachTicketNotify}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserNavigationService_UserNavigationRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserNavigationService_UserNavigationResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserNavigationService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationEventIgnoredNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FastReachTicketNotify.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEvent, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEvent, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEvent, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEvent, state_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationState, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationState, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationState, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationState, fast_reach_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationState, ticket_timestamp_),
  1,
  0,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationRecord, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationRecord, recently_visit_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationRecord, isnew_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationRequest, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationRequest, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationRequest, pos_y_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationResponse, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationResponse, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationResponse, record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationResponse, now_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationResponse, lose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService_UserNavigationResponse, player_),
  4,
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNavigationService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEventIgnoredNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEventIgnoredNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEventIgnoredNotify, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NavigationEventIgnoredNotify, lose_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FastReachTicketNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FastReachTicketNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FastReachTicketNotify, fast_reach_ticket_num_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::sg::NavigationEvent)},
  { 15, 25, sizeof(::sg::NavigationState)},
  { 30, 38, sizeof(::sg::NavigationRecord)},
  { 41, 50, sizeof(::sg::UserNavigationService_UserNavigationRequest)},
  { 54, 66, sizeof(::sg::UserNavigationService_UserNavigationResponse)},
  { 73, 80, sizeof(::sg::UserNavigationService)},
  { 82, 89, sizeof(::sg::NavigationEventIgnoredNotify)},
  { 91, 97, sizeof(::sg::FastReachTicketNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_NavigationEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_NavigationState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_NavigationRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserNavigationService_UserNavigationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserNavigationService_UserNavigationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserNavigationService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_NavigationEventIgnoredNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FastReachTicketNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "UserNavigation.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024UserNavigation.proto\022\002sg\032\020BaseStruct.p"
      "roto\"\\\n\017NavigationEvent\022\n\n\002id\030\001 \002(\005\022\r\n\005p"
      "os_x\030\002 \002(\005\022\r\n\005pos_y\030\003 \002(\005\022\020\n\010duration\030\004 "
      "\002(\005\022\r\n\005state\030\005 \001(\005\"z\n\017NavigationState\022\r\n"
      "\005state\030\001 \002(\005\022\016\n\006origin\030\002 \002(\004\022\023\n\013destinat"
      "ion\030\003 \002(\004\022\031\n\021fast_reach_ticket\030\004 \001(\005\022\030\n\020"
      "ticket_timestamp\030\005 \001(\020\"J\n\020NavigationReco"
      "rd\022\n\n\002id\030\001 \002(\005\022\033\n\023recently_visit_time\030\002 "
      "\002(\020\022\r\n\005isnew\030\003 \001(\010\"\326\004\n\025UserNavigationSer"
      "vice\022<\n\003req\030\001 \001(\0132/.sg.UserNavigationSer"
      "vice.UserNavigationRequest\022>\n\004resp\030\002 \001(\013"
      "20.sg.UserNavigationService.UserNavigati"
      "onResponse\032\201\001\n\025UserNavigationRequest\0225\n\003"
      "cmd\030\001 \002(\0162(.sg.UserNavigationService.NAV"
      "IGATION_CMD\022\023\n\013destination\030\002 \001(\004\022\r\n\005pos_"
      "x\030\003 \001(\005\022\r\n\005pos_y\030\004 \001(\005\032\340\001\n\026UserNavigatio"
      "nResponse\022\016\n\006result\030\001 \002(\005\022\"\n\005state\030\002 \001(\013"
      "2\023.sg.NavigationState\022\014\n\004path\030\003 \003(\005\022$\n\006r"
      "ecord\030\004 \003(\0132\024.sg.NavigationRecord\022&\n\tnow"
      "_event\030\006 \001(\0132\023.sg.NavigationEvent\022\030\n\004los"
      "e\030\007 \001(\0132\n.sg.Reward\022\034\n\006player\030\010 \001(\0132\014.sg"
      ".UserInfo\"X\n\016NAVIGATION_CMD\022\t\n\005QUERY\020\001\022\r"
      "\n\tSTART_OFF\020\002\022\n\n\006RECORD\020\003\022\020\n\014IGNORE_EVEN"
      "T\020\004\022\016\n\nFAST_REACH\020\005\"\\\n\034NavigationEventIg"
      "noredNotify\022\"\n\005event\030\001 \001(\0132\023.sg.Navigati"
      "onEvent\022\030\n\004lose\030\002 \001(\0132\n.sg.Reward\"6\n\025Fas"
      "tReachTicketNotify\022\035\n\025fast_reach_ticket_"
      "num\030\001 \001(\005B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1094);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserNavigation.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_UserNavigation_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* UserNavigationService_NAVIGATION_CMD_descriptor() {
  protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserNavigation_2eproto::file_level_enum_descriptors[0];
}
bool UserNavigationService_NAVIGATION_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserNavigationService_NAVIGATION_CMD UserNavigationService::QUERY;
const UserNavigationService_NAVIGATION_CMD UserNavigationService::START_OFF;
const UserNavigationService_NAVIGATION_CMD UserNavigationService::RECORD;
const UserNavigationService_NAVIGATION_CMD UserNavigationService::IGNORE_EVENT;
const UserNavigationService_NAVIGATION_CMD UserNavigationService::FAST_REACH;
const UserNavigationService_NAVIGATION_CMD UserNavigationService::NAVIGATION_CMD_MIN;
const UserNavigationService_NAVIGATION_CMD UserNavigationService::NAVIGATION_CMD_MAX;
const int UserNavigationService::NAVIGATION_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void NavigationEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationEvent::kIdFieldNumber;
const int NavigationEvent::kPosXFieldNumber;
const int NavigationEvent::kPosYFieldNumber;
const int NavigationEvent::kDurationFieldNumber;
const int NavigationEvent::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationEvent::NavigationEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserNavigation_2eproto::scc_info_NavigationEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.NavigationEvent)
}
NavigationEvent::NavigationEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_NavigationEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.NavigationEvent)
}
NavigationEvent::NavigationEvent(const NavigationEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.NavigationEvent)
}

void NavigationEvent::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

NavigationEvent::~NavigationEvent() {
  // @@protoc_insertion_point(destructor:sg.NavigationEvent)
  SharedDtor();
}

void NavigationEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void NavigationEvent::ArenaDtor(void* object) {
  NavigationEvent* _this = reinterpret_cast< NavigationEvent* >(object);
  (void)_this;
}
void NavigationEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NavigationEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationEvent::descriptor() {
  ::protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationEvent& NavigationEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_NavigationEvent.base);
  return *internal_default_instance();
}


void NavigationEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.NavigationEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.NavigationEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.NavigationEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.NavigationEvent)
  return false;
#undef DO_
}

void NavigationEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.NavigationEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 pos_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_x(), output);
  }

  // required int32 pos_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_y(), output);
  }

  // required int32 duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duration(), output);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.NavigationEvent)
}

::google::protobuf::uint8* NavigationEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.NavigationEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 pos_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_x(), target);
  }

  // required int32 pos_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_y(), target);
  }

  // required int32 duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duration(), target);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.NavigationEvent)
  return target;
}

size_t NavigationEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.NavigationEvent)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_pos_x()) {
    // required int32 pos_x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_x());
  }

  if (has_pos_y()) {
    // required int32 pos_y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_y());
  }

  if (has_duration()) {
    // required int32 duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  return total_size;
}
size_t NavigationEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.NavigationEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 pos_x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_x());

    // required int32 pos_y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_y());

    // required int32 duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 state = 5;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.NavigationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.NavigationEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.NavigationEvent)
    MergeFrom(*source);
  }
}

void NavigationEvent::MergeFrom(const NavigationEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.NavigationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigationEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.NavigationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationEvent::CopyFrom(const NavigationEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.NavigationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void NavigationEvent::Swap(NavigationEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NavigationEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NavigationEvent::UnsafeArenaSwap(NavigationEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NavigationEvent::InternalSwap(NavigationEvent* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(duration_, other->duration_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationEvent::GetMetadata() const {
  protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigationState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationState::kStateFieldNumber;
const int NavigationState::kOriginFieldNumber;
const int NavigationState::kDestinationFieldNumber;
const int NavigationState::kFastReachTicketFieldNumber;
const int NavigationState::kTicketTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationState::NavigationState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserNavigation_2eproto::scc_info_NavigationState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.NavigationState)
}
NavigationState::NavigationState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_NavigationState.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.NavigationState)
}
NavigationState::NavigationState(const NavigationState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&origin_, &from.origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_timestamp_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(ticket_timestamp_));
  // @@protoc_insertion_point(copy_constructor:sg.NavigationState)
}

void NavigationState::SharedCtor() {
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_timestamp_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(ticket_timestamp_));
}

NavigationState::~NavigationState() {
  // @@protoc_insertion_point(destructor:sg.NavigationState)
  SharedDtor();
}

void NavigationState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void NavigationState::ArenaDtor(void* object) {
  NavigationState* _this = reinterpret_cast< NavigationState* >(object);
  (void)_this;
}
void NavigationState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NavigationState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationState::descriptor() {
  ::protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationState& NavigationState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_NavigationState.base);
  return *internal_default_instance();
}


void NavigationState::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.NavigationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&origin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ticket_timestamp_) -
        reinterpret_cast<char*>(&origin_)) + sizeof(ticket_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.NavigationState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 origin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_origin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 destination = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fast_reach_ticket = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_fast_reach_ticket();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fast_reach_ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 ticket_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_ticket_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &ticket_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.NavigationState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.NavigationState)
  return false;
#undef DO_
}

void NavigationState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.NavigationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required uint64 origin = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->origin(), output);
  }

  // required uint64 destination = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->destination(), output);
  }

  // optional int32 fast_reach_ticket = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fast_reach_ticket(), output);
  }

  // optional sfixed64 ticket_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->ticket_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.NavigationState)
}

::google::protobuf::uint8* NavigationState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.NavigationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // required uint64 origin = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->origin(), target);
  }

  // required uint64 destination = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->destination(), target);
  }

  // optional int32 fast_reach_ticket = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fast_reach_ticket(), target);
  }

  // optional sfixed64 ticket_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->ticket_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.NavigationState)
  return target;
}

size_t NavigationState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.NavigationState)
  size_t total_size = 0;

  if (has_origin()) {
    // required uint64 origin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->origin());
  }

  if (has_state()) {
    // required int32 state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_destination()) {
    // required uint64 destination = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->destination());
  }

  return total_size;
}
size_t NavigationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.NavigationState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required uint64 origin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->origin());

    // required int32 state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required uint64 destination = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->destination());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 fast_reach_ticket = 4;
  if (has_fast_reach_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fast_reach_ticket());
  }

  // optional sfixed64 ticket_timestamp = 5;
  if (has_ticket_timestamp()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.NavigationState)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.NavigationState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.NavigationState)
    MergeFrom(*source);
  }
}

void NavigationState::MergeFrom(const NavigationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.NavigationState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      fast_reach_ticket_ = from.fast_reach_ticket_;
    }
    if (cached_has_bits & 0x00000008u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000010u) {
      ticket_timestamp_ = from.ticket_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigationState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.NavigationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationState::CopyFrom(const NavigationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.NavigationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void NavigationState::Swap(NavigationState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NavigationState* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NavigationState::UnsafeArenaSwap(NavigationState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NavigationState::InternalSwap(NavigationState* other) {
  using std::swap;
  swap(origin_, other->origin_);
  swap(state_, other->state_);
  swap(fast_reach_ticket_, other->fast_reach_ticket_);
  swap(destination_, other->destination_);
  swap(ticket_timestamp_, other->ticket_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationState::GetMetadata() const {
  protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigationRecord::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationRecord::kIdFieldNumber;
const int NavigationRecord::kRecentlyVisitTimeFieldNumber;
const int NavigationRecord::kIsnewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationRecord::NavigationRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserNavigation_2eproto::scc_info_NavigationRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.NavigationRecord)
}
NavigationRecord::NavigationRecord(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_NavigationRecord.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.NavigationRecord)
}
NavigationRecord::NavigationRecord(const NavigationRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&recently_visit_time_, &from.recently_visit_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&isnew_) -
    reinterpret_cast<char*>(&recently_visit_time_)) + sizeof(isnew_));
  // @@protoc_insertion_point(copy_constructor:sg.NavigationRecord)
}

void NavigationRecord::SharedCtor() {
  ::memset(&recently_visit_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isnew_) -
      reinterpret_cast<char*>(&recently_visit_time_)) + sizeof(isnew_));
}

NavigationRecord::~NavigationRecord() {
  // @@protoc_insertion_point(destructor:sg.NavigationRecord)
  SharedDtor();
}

void NavigationRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void NavigationRecord::ArenaDtor(void* object) {
  NavigationRecord* _this = reinterpret_cast< NavigationRecord* >(object);
  (void)_this;
}
void NavigationRecord::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NavigationRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationRecord::descriptor() {
  ::protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationRecord& NavigationRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_NavigationRecord.base);
  return *internal_default_instance();
}


void NavigationRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.NavigationRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&recently_visit_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isnew_) -
        reinterpret_cast<char*>(&recently_visit_time_)) + sizeof(isnew_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.NavigationRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 recently_visit_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_recently_visit_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &recently_visit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isnew = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_isnew();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.NavigationRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.NavigationRecord)
  return false;
#undef DO_
}

void NavigationRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.NavigationRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required sfixed64 recently_visit_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->recently_visit_time(), output);
  }

  // optional bool isnew = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isnew(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.NavigationRecord)
}

::google::protobuf::uint8* NavigationRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.NavigationRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required sfixed64 recently_visit_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->recently_visit_time(), target);
  }

  // optional bool isnew = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isnew(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.NavigationRecord)
  return target;
}

size_t NavigationRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.NavigationRecord)
  size_t total_size = 0;

  if (has_recently_visit_time()) {
    // required sfixed64 recently_visit_time = 2;
    total_size += 1 + 8;
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t NavigationRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.NavigationRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sfixed64 recently_visit_time = 2;
    total_size += 1 + 8;

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool isnew = 3;
  if (has_isnew()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.NavigationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.NavigationRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.NavigationRecord)
    MergeFrom(*source);
  }
}

void NavigationRecord::MergeFrom(const NavigationRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.NavigationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      recently_visit_time_ = from.recently_visit_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      isnew_ = from.isnew_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigationRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.NavigationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationRecord::CopyFrom(const NavigationRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.NavigationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void NavigationRecord::Swap(NavigationRecord* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NavigationRecord* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NavigationRecord::UnsafeArenaSwap(NavigationRecord* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NavigationRecord::InternalSwap(NavigationRecord* other) {
  using std::swap;
  swap(recently_visit_time_, other->recently_visit_time_);
  swap(id_, other->id_);
  swap(isnew_, other->isnew_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationRecord::GetMetadata() const {
  protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserNavigationService_UserNavigationRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNavigationService_UserNavigationRequest::kCmdFieldNumber;
const int UserNavigationService_UserNavigationRequest::kDestinationFieldNumber;
const int UserNavigationService_UserNavigationRequest::kPosXFieldNumber;
const int UserNavigationService_UserNavigationRequest::kPosYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNavigationService_UserNavigationRequest::UserNavigationService_UserNavigationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserNavigation_2eproto::scc_info_UserNavigationService_UserNavigationRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserNavigationService.UserNavigationRequest)
}
UserNavigationService_UserNavigationRequest::UserNavigationService_UserNavigationRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_UserNavigationService_UserNavigationRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserNavigationService.UserNavigationRequest)
}
UserNavigationService_UserNavigationRequest::UserNavigationService_UserNavigationRequest(const UserNavigationService_UserNavigationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&destination_, &from.destination_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserNavigationService.UserNavigationRequest)
}

void UserNavigationService_UserNavigationRequest::SharedCtor() {
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(pos_y_));
  cmd_ = 1;
}

UserNavigationService_UserNavigationRequest::~UserNavigationService_UserNavigationRequest() {
  // @@protoc_insertion_point(destructor:sg.UserNavigationService.UserNavigationRequest)
  SharedDtor();
}

void UserNavigationService_UserNavigationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserNavigationService_UserNavigationRequest::ArenaDtor(void* object) {
  UserNavigationService_UserNavigationRequest* _this = reinterpret_cast< UserNavigationService_UserNavigationRequest* >(object);
  (void)_this;
}
void UserNavigationService_UserNavigationRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserNavigationService_UserNavigationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserNavigationService_UserNavigationRequest::descriptor() {
  ::protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserNavigationService_UserNavigationRequest& UserNavigationService_UserNavigationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_UserNavigationService_UserNavigationRequest.base);
  return *internal_default_instance();
}


void UserNavigationService_UserNavigationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserNavigationService.UserNavigationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&destination_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_y_) -
        reinterpret_cast<char*>(&destination_)) + sizeof(pos_y_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserNavigationService_UserNavigationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserNavigationService.UserNavigationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserNavigationService.NAVIGATION_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserNavigationService_NAVIGATION_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserNavigationService_NAVIGATION_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 destination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserNavigationService.UserNavigationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserNavigationService.UserNavigationRequest)
  return false;
#undef DO_
}

void UserNavigationService_UserNavigationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserNavigationService.UserNavigationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserNavigationService.NAVIGATION_CMD cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint64 destination = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->destination(), output);
  }

  // optional int32 pos_x = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // optional int32 pos_y = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserNavigationService.UserNavigationRequest)
}

::google::protobuf::uint8* UserNavigationService_UserNavigationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserNavigationService.UserNavigationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserNavigationService.NAVIGATION_CMD cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint64 destination = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->destination(), target);
  }

  // optional int32 pos_x = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // optional int32 pos_y = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserNavigationService.UserNavigationRequest)
  return target;
}

size_t UserNavigationService_UserNavigationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserNavigationService.UserNavigationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserNavigationService.NAVIGATION_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destination());
    }

    // optional int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserNavigationService_UserNavigationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserNavigationService.UserNavigationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserNavigationService_UserNavigationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNavigationService_UserNavigationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserNavigationService.UserNavigationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserNavigationService.UserNavigationRequest)
    MergeFrom(*source);
  }
}

void UserNavigationService_UserNavigationRequest::MergeFrom(const UserNavigationService_UserNavigationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserNavigationService.UserNavigationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserNavigationService_UserNavigationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserNavigationService.UserNavigationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNavigationService_UserNavigationRequest::CopyFrom(const UserNavigationService_UserNavigationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserNavigationService.UserNavigationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNavigationService_UserNavigationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void UserNavigationService_UserNavigationRequest::Swap(UserNavigationService_UserNavigationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserNavigationService_UserNavigationRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserNavigationService_UserNavigationRequest::UnsafeArenaSwap(UserNavigationService_UserNavigationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserNavigationService_UserNavigationRequest::InternalSwap(UserNavigationService_UserNavigationRequest* other) {
  using std::swap;
  swap(destination_, other->destination_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserNavigationService_UserNavigationRequest::GetMetadata() const {
  protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserNavigationService_UserNavigationResponse::InitAsDefaultInstance() {
  ::sg::_UserNavigationService_UserNavigationResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::sg::NavigationState*>(
      ::sg::NavigationState::internal_default_instance());
  ::sg::_UserNavigationService_UserNavigationResponse_default_instance_._instance.get_mutable()->now_event_ = const_cast< ::sg::NavigationEvent*>(
      ::sg::NavigationEvent::internal_default_instance());
  ::sg::_UserNavigationService_UserNavigationResponse_default_instance_._instance.get_mutable()->lose_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
  ::sg::_UserNavigationService_UserNavigationResponse_default_instance_._instance.get_mutable()->player_ = const_cast< ::sg::UserInfo*>(
      ::sg::UserInfo::internal_default_instance());
}
void UserNavigationService_UserNavigationResponse::unsafe_arena_set_allocated_state(
    ::sg::NavigationState* state) {
  if (GetArenaNoVirtual() == NULL) {
    delete state_;
  }
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserNavigationService.UserNavigationResponse.state)
}
void UserNavigationService_UserNavigationResponse::unsafe_arena_set_allocated_now_event(
    ::sg::NavigationEvent* now_event) {
  if (GetArenaNoVirtual() == NULL) {
    delete now_event_;
  }
  now_event_ = now_event;
  if (now_event) {
    set_has_now_event();
  } else {
    clear_has_now_event();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserNavigationService.UserNavigationResponse.now_event)
}
void UserNavigationService_UserNavigationResponse::unsafe_arena_set_allocated_lose(
    ::sg::Reward* lose) {
  if (GetArenaNoVirtual() == NULL) {
    delete lose_;
  }
  lose_ = lose;
  if (lose) {
    set_has_lose();
  } else {
    clear_has_lose();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserNavigationService.UserNavigationResponse.lose)
}
void UserNavigationService_UserNavigationResponse::clear_lose() {
  if (lose_ != NULL) lose_->Clear();
  clear_has_lose();
}
void UserNavigationService_UserNavigationResponse::unsafe_arena_set_allocated_player(
    ::sg::UserInfo* player) {
  if (GetArenaNoVirtual() == NULL) {
    delete player_;
  }
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserNavigationService.UserNavigationResponse.player)
}
void UserNavigationService_UserNavigationResponse::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNavigationService_UserNavigationResponse::kResultFieldNumber;
const int UserNavigationService_UserNavigationResponse::kStateFieldNumber;
const int UserNavigationService_UserNavigationResponse::kPathFieldNumber;
const int UserNavigationService_UserNavigationResponse::kRecordFieldNumber;
const int UserNavigationService_UserNavigationResponse::kNowEventFieldNumber;
const int UserNavigationService_UserNavigationResponse::kLoseFieldNumber;
const int UserNavigationService_UserNavigationResponse::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNavigationService_UserNavigationResponse::UserNavigationService_UserNavigationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserNavigation_2eproto::scc_info_UserNavigationService_UserNavigationResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserNavigationService.UserNavigationResponse)
}
UserNavigationService_UserNavigationResponse::UserNavigationService_UserNavigationResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  path_(arena),
  record_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_UserNavigationService_UserNavigationResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserNavigationService.UserNavigationResponse)
}
UserNavigationService_UserNavigationResponse::UserNavigationService_UserNavigationResponse(const UserNavigationService_UserNavigationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      path_(from.path_),
      record_(from.record_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::sg::NavigationState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_now_event()) {
    now_event_ = new ::sg::NavigationEvent(*from.now_event_);
  } else {
    now_event_ = NULL;
  }
  if (from.has_lose()) {
    lose_ = new ::sg::Reward(*from.lose_);
  } else {
    lose_ = NULL;
  }
  if (from.has_player()) {
    player_ = new ::sg::UserInfo(*from.player_);
  } else {
    player_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.UserNavigationService.UserNavigationResponse)
}

void UserNavigationService_UserNavigationResponse::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&state_)) + sizeof(result_));
}

UserNavigationService_UserNavigationResponse::~UserNavigationService_UserNavigationResponse() {
  // @@protoc_insertion_point(destructor:sg.UserNavigationService.UserNavigationResponse)
  SharedDtor();
}

void UserNavigationService_UserNavigationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete now_event_;
  if (this != internal_default_instance()) delete lose_;
  if (this != internal_default_instance()) delete player_;
}

void UserNavigationService_UserNavigationResponse::ArenaDtor(void* object) {
  UserNavigationService_UserNavigationResponse* _this = reinterpret_cast< UserNavigationService_UserNavigationResponse* >(object);
  (void)_this;
}
void UserNavigationService_UserNavigationResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserNavigationService_UserNavigationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserNavigationService_UserNavigationResponse::descriptor() {
  ::protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserNavigationService_UserNavigationResponse& UserNavigationService_UserNavigationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_UserNavigationService_UserNavigationResponse.base);
  return *internal_default_instance();
}


void UserNavigationService_UserNavigationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserNavigationService.UserNavigationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  record_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(now_event_ != NULL);
      now_event_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lose_ != NULL);
      lose_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(player_ != NULL);
      player_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserNavigationService_UserNavigationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserNavigationService.UserNavigationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.NavigationState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_path())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_path())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.NavigationRecord record = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.NavigationEvent now_event = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_now_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward lose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserInfo player = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserNavigationService.UserNavigationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserNavigationService.UserNavigationResponse)
  return false;
#undef DO_
}

void UserNavigationService_UserNavigationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserNavigationService.UserNavigationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.NavigationState state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  // repeated int32 path = 3;
  for (int i = 0, n = this->path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->path(i), output);
  }

  // repeated .sg.NavigationRecord record = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->record(static_cast<int>(i)),
      output);
  }

  // optional .sg.NavigationEvent now_event = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_now_event(), output);
  }

  // optional .sg.Reward lose = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_lose(), output);
  }

  // optional .sg.UserInfo player = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserNavigationService.UserNavigationResponse)
}

::google::protobuf::uint8* UserNavigationService_UserNavigationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserNavigationService.UserNavigationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.NavigationState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  // repeated int32 path = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->path_, target);

  // repeated .sg.NavigationRecord record = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->record(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.NavigationEvent now_event = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_now_event(), deterministic, target);
  }

  // optional .sg.Reward lose = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_lose(), deterministic, target);
  }

  // optional .sg.UserInfo player = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_player(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserNavigationService.UserNavigationResponse)
  return target;
}

size_t UserNavigationService_UserNavigationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserNavigationService.UserNavigationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated int32 path = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->path_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->path_size());
    total_size += data_size;
  }

  // repeated .sg.NavigationRecord record = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->record_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->record(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .sg.NavigationState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .sg.NavigationEvent now_event = 6;
    if (has_now_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *now_event_);
    }

    // optional .sg.Reward lose = 7;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lose_);
    }

    // optional .sg.UserInfo player = 8;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserNavigationService_UserNavigationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserNavigationService.UserNavigationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserNavigationService_UserNavigationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNavigationService_UserNavigationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserNavigationService.UserNavigationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserNavigationService.UserNavigationResponse)
    MergeFrom(*source);
  }
}

void UserNavigationService_UserNavigationResponse::MergeFrom(const UserNavigationService_UserNavigationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserNavigationService.UserNavigationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  record_.MergeFrom(from.record_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::sg::NavigationState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_now_event()->::sg::NavigationEvent::MergeFrom(from.now_event());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lose()->::sg::Reward::MergeFrom(from.lose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_player()->::sg::UserInfo::MergeFrom(from.player());
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserNavigationService_UserNavigationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserNavigationService.UserNavigationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNavigationService_UserNavigationResponse::CopyFrom(const UserNavigationService_UserNavigationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserNavigationService.UserNavigationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNavigationService_UserNavigationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record())) return false;
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  if (has_now_event()) {
    if (!this->now_event_->IsInitialized()) return false;
  }
  if (has_lose()) {
    if (!this->lose_->IsInitialized()) return false;
  }
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void UserNavigationService_UserNavigationResponse::Swap(UserNavigationService_UserNavigationResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserNavigationService_UserNavigationResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserNavigationService_UserNavigationResponse::UnsafeArenaSwap(UserNavigationService_UserNavigationResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserNavigationService_UserNavigationResponse::InternalSwap(UserNavigationService_UserNavigationResponse* other) {
  using std::swap;
  path_.InternalSwap(&other->path_);
  CastToBase(&record_)->InternalSwap(CastToBase(&other->record_));
  swap(state_, other->state_);
  swap(now_event_, other->now_event_);
  swap(lose_, other->lose_);
  swap(player_, other->player_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserNavigationService_UserNavigationResponse::GetMetadata() const {
  protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserNavigationService::InitAsDefaultInstance() {
  ::sg::_UserNavigationService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserNavigationService_UserNavigationRequest*>(
      ::sg::UserNavigationService_UserNavigationRequest::internal_default_instance());
  ::sg::_UserNavigationService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserNavigationService_UserNavigationResponse*>(
      ::sg::UserNavigationService_UserNavigationResponse::internal_default_instance());
}
void UserNavigationService::unsafe_arena_set_allocated_req(
    ::sg::UserNavigationService_UserNavigationRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserNavigationService.req)
}
void UserNavigationService::unsafe_arena_set_allocated_resp(
    ::sg::UserNavigationService_UserNavigationResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserNavigationService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNavigationService::kReqFieldNumber;
const int UserNavigationService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNavigationService::UserNavigationService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserNavigation_2eproto::scc_info_UserNavigationService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserNavigationService)
}
UserNavigationService::UserNavigationService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_UserNavigationService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserNavigationService)
}
UserNavigationService::UserNavigationService(const UserNavigationService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserNavigationService_UserNavigationRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserNavigationService_UserNavigationResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserNavigationService)
}

void UserNavigationService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserNavigationService::~UserNavigationService() {
  // @@protoc_insertion_point(destructor:sg.UserNavigationService)
  SharedDtor();
}

void UserNavigationService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserNavigationService::ArenaDtor(void* object) {
  UserNavigationService* _this = reinterpret_cast< UserNavigationService* >(object);
  (void)_this;
}
void UserNavigationService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserNavigationService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserNavigationService::descriptor() {
  ::protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserNavigationService& UserNavigationService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_UserNavigationService.base);
  return *internal_default_instance();
}


void UserNavigationService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserNavigationService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserNavigationService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserNavigationService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserNavigationService.UserNavigationRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserNavigationService.UserNavigationResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserNavigationService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserNavigationService)
  return false;
#undef DO_
}

void UserNavigationService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserNavigationService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserNavigationService.UserNavigationRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserNavigationService.UserNavigationResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserNavigationService)
}

::google::protobuf::uint8* UserNavigationService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserNavigationService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserNavigationService.UserNavigationRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserNavigationService.UserNavigationResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserNavigationService)
  return target;
}

size_t UserNavigationService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserNavigationService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserNavigationService.UserNavigationRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserNavigationService.UserNavigationResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserNavigationService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserNavigationService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserNavigationService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNavigationService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserNavigationService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserNavigationService)
    MergeFrom(*source);
  }
}

void UserNavigationService::MergeFrom(const UserNavigationService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserNavigationService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserNavigationService_UserNavigationRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserNavigationService_UserNavigationResponse::MergeFrom(from.resp());
    }
  }
}

void UserNavigationService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserNavigationService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNavigationService::CopyFrom(const UserNavigationService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserNavigationService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNavigationService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserNavigationService::Swap(UserNavigationService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserNavigationService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserNavigationService::UnsafeArenaSwap(UserNavigationService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserNavigationService::InternalSwap(UserNavigationService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserNavigationService::GetMetadata() const {
  protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigationEventIgnoredNotify::InitAsDefaultInstance() {
  ::sg::_NavigationEventIgnoredNotify_default_instance_._instance.get_mutable()->event_ = const_cast< ::sg::NavigationEvent*>(
      ::sg::NavigationEvent::internal_default_instance());
  ::sg::_NavigationEventIgnoredNotify_default_instance_._instance.get_mutable()->lose_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void NavigationEventIgnoredNotify::unsafe_arena_set_allocated_event(
    ::sg::NavigationEvent* event) {
  if (GetArenaNoVirtual() == NULL) {
    delete event_;
  }
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.NavigationEventIgnoredNotify.event)
}
void NavigationEventIgnoredNotify::unsafe_arena_set_allocated_lose(
    ::sg::Reward* lose) {
  if (GetArenaNoVirtual() == NULL) {
    delete lose_;
  }
  lose_ = lose;
  if (lose) {
    set_has_lose();
  } else {
    clear_has_lose();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.NavigationEventIgnoredNotify.lose)
}
void NavigationEventIgnoredNotify::clear_lose() {
  if (lose_ != NULL) lose_->Clear();
  clear_has_lose();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationEventIgnoredNotify::kEventFieldNumber;
const int NavigationEventIgnoredNotify::kLoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationEventIgnoredNotify::NavigationEventIgnoredNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserNavigation_2eproto::scc_info_NavigationEventIgnoredNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.NavigationEventIgnoredNotify)
}
NavigationEventIgnoredNotify::NavigationEventIgnoredNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_NavigationEventIgnoredNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.NavigationEventIgnoredNotify)
}
NavigationEventIgnoredNotify::NavigationEventIgnoredNotify(const NavigationEventIgnoredNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event()) {
    event_ = new ::sg::NavigationEvent(*from.event_);
  } else {
    event_ = NULL;
  }
  if (from.has_lose()) {
    lose_ = new ::sg::Reward(*from.lose_);
  } else {
    lose_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.NavigationEventIgnoredNotify)
}

void NavigationEventIgnoredNotify::SharedCtor() {
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lose_) -
      reinterpret_cast<char*>(&event_)) + sizeof(lose_));
}

NavigationEventIgnoredNotify::~NavigationEventIgnoredNotify() {
  // @@protoc_insertion_point(destructor:sg.NavigationEventIgnoredNotify)
  SharedDtor();
}

void NavigationEventIgnoredNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete event_;
  if (this != internal_default_instance()) delete lose_;
}

void NavigationEventIgnoredNotify::ArenaDtor(void* object) {
  NavigationEventIgnoredNotify* _this = reinterpret_cast< NavigationEventIgnoredNotify* >(object);
  (void)_this;
}
void NavigationEventIgnoredNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NavigationEventIgnoredNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationEventIgnoredNotify::descriptor() {
  ::protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationEventIgnoredNotify& NavigationEventIgnoredNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_NavigationEventIgnoredNotify.base);
  return *internal_default_instance();
}


void NavigationEventIgnoredNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.NavigationEventIgnoredNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(event_ != NULL);
      event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lose_ != NULL);
      lose_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationEventIgnoredNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.NavigationEventIgnoredNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.NavigationEvent event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward lose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.NavigationEventIgnoredNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.NavigationEventIgnoredNotify)
  return false;
#undef DO_
}

void NavigationEventIgnoredNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.NavigationEventIgnoredNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.NavigationEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_event(), output);
  }

  // optional .sg.Reward lose = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_lose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.NavigationEventIgnoredNotify)
}

::google::protobuf::uint8* NavigationEventIgnoredNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.NavigationEventIgnoredNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.NavigationEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_event(), deterministic, target);
  }

  // optional .sg.Reward lose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_lose(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.NavigationEventIgnoredNotify)
  return target;
}

size_t NavigationEventIgnoredNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.NavigationEventIgnoredNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.NavigationEvent event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_);
    }

    // optional .sg.Reward lose = 2;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lose_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationEventIgnoredNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.NavigationEventIgnoredNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationEventIgnoredNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationEventIgnoredNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.NavigationEventIgnoredNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.NavigationEventIgnoredNotify)
    MergeFrom(*source);
  }
}

void NavigationEventIgnoredNotify::MergeFrom(const NavigationEventIgnoredNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.NavigationEventIgnoredNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_event()->::sg::NavigationEvent::MergeFrom(from.event());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lose()->::sg::Reward::MergeFrom(from.lose());
    }
  }
}

void NavigationEventIgnoredNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.NavigationEventIgnoredNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationEventIgnoredNotify::CopyFrom(const NavigationEventIgnoredNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.NavigationEventIgnoredNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationEventIgnoredNotify::IsInitialized() const {
  if (has_event()) {
    if (!this->event_->IsInitialized()) return false;
  }
  if (has_lose()) {
    if (!this->lose_->IsInitialized()) return false;
  }
  return true;
}

void NavigationEventIgnoredNotify::Swap(NavigationEventIgnoredNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NavigationEventIgnoredNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NavigationEventIgnoredNotify::UnsafeArenaSwap(NavigationEventIgnoredNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NavigationEventIgnoredNotify::InternalSwap(NavigationEventIgnoredNotify* other) {
  using std::swap;
  swap(event_, other->event_);
  swap(lose_, other->lose_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationEventIgnoredNotify::GetMetadata() const {
  protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FastReachTicketNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastReachTicketNotify::kFastReachTicketNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastReachTicketNotify::FastReachTicketNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserNavigation_2eproto::scc_info_FastReachTicketNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FastReachTicketNotify)
}
FastReachTicketNotify::FastReachTicketNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_FastReachTicketNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FastReachTicketNotify)
}
FastReachTicketNotify::FastReachTicketNotify(const FastReachTicketNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fast_reach_ticket_num_ = from.fast_reach_ticket_num_;
  // @@protoc_insertion_point(copy_constructor:sg.FastReachTicketNotify)
}

void FastReachTicketNotify::SharedCtor() {
  fast_reach_ticket_num_ = 0;
}

FastReachTicketNotify::~FastReachTicketNotify() {
  // @@protoc_insertion_point(destructor:sg.FastReachTicketNotify)
  SharedDtor();
}

void FastReachTicketNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FastReachTicketNotify::ArenaDtor(void* object) {
  FastReachTicketNotify* _this = reinterpret_cast< FastReachTicketNotify* >(object);
  (void)_this;
}
void FastReachTicketNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FastReachTicketNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FastReachTicketNotify::descriptor() {
  ::protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FastReachTicketNotify& FastReachTicketNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserNavigation_2eproto::scc_info_FastReachTicketNotify.base);
  return *internal_default_instance();
}


void FastReachTicketNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FastReachTicketNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fast_reach_ticket_num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FastReachTicketNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FastReachTicketNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fast_reach_ticket_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_fast_reach_ticket_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fast_reach_ticket_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FastReachTicketNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FastReachTicketNotify)
  return false;
#undef DO_
}

void FastReachTicketNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FastReachTicketNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fast_reach_ticket_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fast_reach_ticket_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FastReachTicketNotify)
}

::google::protobuf::uint8* FastReachTicketNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FastReachTicketNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fast_reach_ticket_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fast_reach_ticket_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FastReachTicketNotify)
  return target;
}

size_t FastReachTicketNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FastReachTicketNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 fast_reach_ticket_num = 1;
  if (has_fast_reach_ticket_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fast_reach_ticket_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastReachTicketNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FastReachTicketNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FastReachTicketNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FastReachTicketNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FastReachTicketNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FastReachTicketNotify)
    MergeFrom(*source);
  }
}

void FastReachTicketNotify::MergeFrom(const FastReachTicketNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FastReachTicketNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fast_reach_ticket_num()) {
    set_fast_reach_ticket_num(from.fast_reach_ticket_num());
  }
}

void FastReachTicketNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FastReachTicketNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastReachTicketNotify::CopyFrom(const FastReachTicketNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FastReachTicketNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastReachTicketNotify::IsInitialized() const {
  return true;
}

void FastReachTicketNotify::Swap(FastReachTicketNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FastReachTicketNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FastReachTicketNotify::UnsafeArenaSwap(FastReachTicketNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FastReachTicketNotify::InternalSwap(FastReachTicketNotify* other) {
  using std::swap;
  swap(fast_reach_ticket_num_, other->fast_reach_ticket_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FastReachTicketNotify::GetMetadata() const {
  protobuf_UserNavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserNavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::NavigationEvent* Arena::CreateMaybeMessage< ::sg::NavigationEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::NavigationEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::NavigationState* Arena::CreateMaybeMessage< ::sg::NavigationState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::NavigationState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::NavigationRecord* Arena::CreateMaybeMessage< ::sg::NavigationRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::NavigationRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserNavigationService_UserNavigationRequest* Arena::CreateMaybeMessage< ::sg::UserNavigationService_UserNavigationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserNavigationService_UserNavigationRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserNavigationService_UserNavigationResponse* Arena::CreateMaybeMessage< ::sg::UserNavigationService_UserNavigationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserNavigationService_UserNavigationResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserNavigationService* Arena::CreateMaybeMessage< ::sg::UserNavigationService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserNavigationService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::NavigationEventIgnoredNotify* Arena::CreateMaybeMessage< ::sg::NavigationEventIgnoredNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::NavigationEventIgnoredNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FastReachTicketNotify* Arena::CreateMaybeMessage< ::sg::FastReachTicketNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FastReachTicketNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
