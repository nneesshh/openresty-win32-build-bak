// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chest.proto

#ifndef PROTOBUF_INCLUDED_Chest_2eproto
#define PROTOBUF_INCLUDED_Chest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Chest_2eproto 

namespace protobuf_Chest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Chest_2eproto
namespace sg {
class Chest;
class ChestDefaultTypeInternal;
extern ChestDefaultTypeInternal _Chest_default_instance_;
class UserChestService;
class UserChestServiceDefaultTypeInternal;
extern UserChestServiceDefaultTypeInternal _UserChestService_default_instance_;
class UserChestService_UserChestRequest;
class UserChestService_UserChestRequestDefaultTypeInternal;
extern UserChestService_UserChestRequestDefaultTypeInternal _UserChestService_UserChestRequest_default_instance_;
class UserChestService_UserChestResponse;
class UserChestService_UserChestResponseDefaultTypeInternal;
extern UserChestService_UserChestResponseDefaultTypeInternal _UserChestService_UserChestResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::Chest* Arena::CreateMaybeMessage<::sg::Chest>(Arena*);
template<> ::sg::UserChestService* Arena::CreateMaybeMessage<::sg::UserChestService>(Arena*);
template<> ::sg::UserChestService_UserChestRequest* Arena::CreateMaybeMessage<::sg::UserChestService_UserChestRequest>(Arena*);
template<> ::sg::UserChestService_UserChestResponse* Arena::CreateMaybeMessage<::sg::UserChestService_UserChestResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum UserChestService_CHEST_CMD {
  UserChestService_CHEST_CMD_QUERY = 1,
  UserChestService_CHEST_CMD_OPEN = 2
};
bool UserChestService_CHEST_CMD_IsValid(int value);
const UserChestService_CHEST_CMD UserChestService_CHEST_CMD_CHEST_CMD_MIN = UserChestService_CHEST_CMD_QUERY;
const UserChestService_CHEST_CMD UserChestService_CHEST_CMD_CHEST_CMD_MAX = UserChestService_CHEST_CMD_OPEN;
const int UserChestService_CHEST_CMD_CHEST_CMD_ARRAYSIZE = UserChestService_CHEST_CMD_CHEST_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserChestService_CHEST_CMD_descriptor();
inline const ::std::string& UserChestService_CHEST_CMD_Name(UserChestService_CHEST_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserChestService_CHEST_CMD_descriptor(), value);
}
inline bool UserChestService_CHEST_CMD_Parse(
    const ::std::string& name, UserChestService_CHEST_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserChestService_CHEST_CMD>(
    UserChestService_CHEST_CMD_descriptor(), name, value);
}
// ===================================================================

class Chest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.Chest) */ {
 public:
  Chest();
  virtual ~Chest();

  Chest(const Chest& from);

  inline Chest& operator=(const Chest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chest(Chest&& from) noexcept
    : Chest() {
    *this = ::std::move(from);
  }

  inline Chest& operator=(Chest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chest* internal_default_instance() {
    return reinterpret_cast<const Chest*>(
               &_Chest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Chest* other);
  void Swap(Chest* other);
  friend void swap(Chest& a, Chest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chest* New() const final {
    return CreateMaybeMessage<Chest>(NULL);
  }

  Chest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Chest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Chest& from);
  void MergeFrom(const Chest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chest* other);
  protected:
  explicit Chest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.Chest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_Chest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserChestService_UserChestRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserChestService.UserChestRequest) */ {
 public:
  UserChestService_UserChestRequest();
  virtual ~UserChestService_UserChestRequest();

  UserChestService_UserChestRequest(const UserChestService_UserChestRequest& from);

  inline UserChestService_UserChestRequest& operator=(const UserChestService_UserChestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserChestService_UserChestRequest(UserChestService_UserChestRequest&& from) noexcept
    : UserChestService_UserChestRequest() {
    *this = ::std::move(from);
  }

  inline UserChestService_UserChestRequest& operator=(UserChestService_UserChestRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserChestService_UserChestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserChestService_UserChestRequest* internal_default_instance() {
    return reinterpret_cast<const UserChestService_UserChestRequest*>(
               &_UserChestService_UserChestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(UserChestService_UserChestRequest* other);
  void Swap(UserChestService_UserChestRequest* other);
  friend void swap(UserChestService_UserChestRequest& a, UserChestService_UserChestRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserChestService_UserChestRequest* New() const final {
    return CreateMaybeMessage<UserChestService_UserChestRequest>(NULL);
  }

  UserChestService_UserChestRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserChestService_UserChestRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserChestService_UserChestRequest& from);
  void MergeFrom(const UserChestService_UserChestRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserChestService_UserChestRequest* other);
  protected:
  explicit UserChestService_UserChestRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 open_id = 2;
  bool has_open_id() const;
  void clear_open_id();
  static const int kOpenIdFieldNumber = 2;
  ::google::protobuf::int32 open_id() const;
  void set_open_id(::google::protobuf::int32 value);

  // required .sg.UserChestService.CHEST_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserChestService_CHEST_CMD cmd() const;
  void set_cmd(::sg::UserChestService_CHEST_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserChestService.UserChestRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_open_id();
  void clear_has_open_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 open_id_;
  int cmd_;
  friend struct ::protobuf_Chest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserChestService_UserChestResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserChestService.UserChestResponse) */ {
 public:
  UserChestService_UserChestResponse();
  virtual ~UserChestService_UserChestResponse();

  UserChestService_UserChestResponse(const UserChestService_UserChestResponse& from);

  inline UserChestService_UserChestResponse& operator=(const UserChestService_UserChestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserChestService_UserChestResponse(UserChestService_UserChestResponse&& from) noexcept
    : UserChestService_UserChestResponse() {
    *this = ::std::move(from);
  }

  inline UserChestService_UserChestResponse& operator=(UserChestService_UserChestResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserChestService_UserChestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserChestService_UserChestResponse* internal_default_instance() {
    return reinterpret_cast<const UserChestService_UserChestResponse*>(
               &_UserChestService_UserChestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(UserChestService_UserChestResponse* other);
  void Swap(UserChestService_UserChestResponse* other);
  friend void swap(UserChestService_UserChestResponse& a, UserChestService_UserChestResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserChestService_UserChestResponse* New() const final {
    return CreateMaybeMessage<UserChestService_UserChestResponse>(NULL);
  }

  UserChestService_UserChestResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserChestService_UserChestResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserChestService_UserChestResponse& from);
  void MergeFrom(const UserChestService_UserChestResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserChestService_UserChestResponse* other);
  protected:
  explicit UserChestService_UserChestResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Chest chest_list = 2;
  int chest_list_size() const;
  void clear_chest_list();
  static const int kChestListFieldNumber = 2;
  ::sg::Chest* mutable_chest_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Chest >*
      mutable_chest_list();
  const ::sg::Chest& chest_list(int index) const;
  ::sg::Chest* add_chest_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::Chest >&
      chest_list() const;

  // optional .sg.Reward reward = 3;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 3;
  private:
  const ::sg::Reward& _internal_reward() const;
  public:
  const ::sg::Reward& reward() const;
  ::sg::Reward* release_reward();
  ::sg::Reward* mutable_reward();
  void set_allocated_reward(::sg::Reward* reward);
  void unsafe_arena_set_allocated_reward(
      ::sg::Reward* reward);
  ::sg::Reward* unsafe_arena_release_reward();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserChestService.UserChestResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_reward();
  void clear_has_reward();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Chest > chest_list_;
  ::sg::Reward* reward_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_Chest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserChestService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserChestService) */ {
 public:
  UserChestService();
  virtual ~UserChestService();

  UserChestService(const UserChestService& from);

  inline UserChestService& operator=(const UserChestService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserChestService(UserChestService&& from) noexcept
    : UserChestService() {
    *this = ::std::move(from);
  }

  inline UserChestService& operator=(UserChestService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserChestService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserChestService* internal_default_instance() {
    return reinterpret_cast<const UserChestService*>(
               &_UserChestService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UserChestService* other);
  void Swap(UserChestService* other);
  friend void swap(UserChestService& a, UserChestService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserChestService* New() const final {
    return CreateMaybeMessage<UserChestService>(NULL);
  }

  UserChestService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserChestService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserChestService& from);
  void MergeFrom(const UserChestService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserChestService* other);
  protected:
  explicit UserChestService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserChestService_UserChestRequest UserChestRequest;
  typedef UserChestService_UserChestResponse UserChestResponse;

  typedef UserChestService_CHEST_CMD CHEST_CMD;
  static const CHEST_CMD QUERY =
    UserChestService_CHEST_CMD_QUERY;
  static const CHEST_CMD OPEN =
    UserChestService_CHEST_CMD_OPEN;
  static inline bool CHEST_CMD_IsValid(int value) {
    return UserChestService_CHEST_CMD_IsValid(value);
  }
  static const CHEST_CMD CHEST_CMD_MIN =
    UserChestService_CHEST_CMD_CHEST_CMD_MIN;
  static const CHEST_CMD CHEST_CMD_MAX =
    UserChestService_CHEST_CMD_CHEST_CMD_MAX;
  static const int CHEST_CMD_ARRAYSIZE =
    UserChestService_CHEST_CMD_CHEST_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CHEST_CMD_descriptor() {
    return UserChestService_CHEST_CMD_descriptor();
  }
  static inline const ::std::string& CHEST_CMD_Name(CHEST_CMD value) {
    return UserChestService_CHEST_CMD_Name(value);
  }
  static inline bool CHEST_CMD_Parse(const ::std::string& name,
      CHEST_CMD* value) {
    return UserChestService_CHEST_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserChestService.UserChestRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserChestService_UserChestRequest& _internal_req() const;
  public:
  const ::sg::UserChestService_UserChestRequest& req() const;
  ::sg::UserChestService_UserChestRequest* release_req();
  ::sg::UserChestService_UserChestRequest* mutable_req();
  void set_allocated_req(::sg::UserChestService_UserChestRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserChestService_UserChestRequest* req);
  ::sg::UserChestService_UserChestRequest* unsafe_arena_release_req();

  // optional .sg.UserChestService.UserChestResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserChestService_UserChestResponse& _internal_resp() const;
  public:
  const ::sg::UserChestService_UserChestResponse& resp() const;
  ::sg::UserChestService_UserChestResponse* release_resp();
  ::sg::UserChestService_UserChestResponse* mutable_resp();
  void set_allocated_resp(::sg::UserChestService_UserChestResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserChestService_UserChestResponse* resp);
  ::sg::UserChestService_UserChestResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserChestService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserChestService_UserChestRequest* req_;
  ::sg::UserChestService_UserChestResponse* resp_;
  friend struct ::protobuf_Chest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chest

// required int32 id = 1;
inline bool Chest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Chest::id() const {
  // @@protoc_insertion_point(field_get:sg.Chest.id)
  return id_;
}
inline void Chest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.Chest.id)
}

// required int32 state = 2;
inline bool Chest::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chest::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chest::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chest::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Chest::state() const {
  // @@protoc_insertion_point(field_get:sg.Chest.state)
  return state_;
}
inline void Chest::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.Chest.state)
}

// -------------------------------------------------------------------

// UserChestService_UserChestRequest

// required .sg.UserChestService.CHEST_CMD cmd = 1;
inline bool UserChestService_UserChestRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserChestService_UserChestRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserChestService_UserChestRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserChestService_UserChestRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserChestService_CHEST_CMD UserChestService_UserChestRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserChestService.UserChestRequest.cmd)
  return static_cast< ::sg::UserChestService_CHEST_CMD >(cmd_);
}
inline void UserChestService_UserChestRequest::set_cmd(::sg::UserChestService_CHEST_CMD value) {
  assert(::sg::UserChestService_CHEST_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserChestService.UserChestRequest.cmd)
}

// optional int32 open_id = 2;
inline bool UserChestService_UserChestRequest::has_open_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserChestService_UserChestRequest::set_has_open_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserChestService_UserChestRequest::clear_has_open_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserChestService_UserChestRequest::clear_open_id() {
  open_id_ = 0;
  clear_has_open_id();
}
inline ::google::protobuf::int32 UserChestService_UserChestRequest::open_id() const {
  // @@protoc_insertion_point(field_get:sg.UserChestService.UserChestRequest.open_id)
  return open_id_;
}
inline void UserChestService_UserChestRequest::set_open_id(::google::protobuf::int32 value) {
  set_has_open_id();
  open_id_ = value;
  // @@protoc_insertion_point(field_set:sg.UserChestService.UserChestRequest.open_id)
}

// -------------------------------------------------------------------

// UserChestService_UserChestResponse

// required int32 result = 1;
inline bool UserChestService_UserChestResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserChestService_UserChestResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserChestService_UserChestResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserChestService_UserChestResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserChestService_UserChestResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserChestService.UserChestResponse.result)
  return result_;
}
inline void UserChestService_UserChestResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserChestService.UserChestResponse.result)
}

// repeated .sg.Chest chest_list = 2;
inline int UserChestService_UserChestResponse::chest_list_size() const {
  return chest_list_.size();
}
inline void UserChestService_UserChestResponse::clear_chest_list() {
  chest_list_.Clear();
}
inline ::sg::Chest* UserChestService_UserChestResponse::mutable_chest_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserChestService.UserChestResponse.chest_list)
  return chest_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Chest >*
UserChestService_UserChestResponse::mutable_chest_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserChestService.UserChestResponse.chest_list)
  return &chest_list_;
}
inline const ::sg::Chest& UserChestService_UserChestResponse::chest_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserChestService.UserChestResponse.chest_list)
  return chest_list_.Get(index);
}
inline ::sg::Chest* UserChestService_UserChestResponse::add_chest_list() {
  // @@protoc_insertion_point(field_add:sg.UserChestService.UserChestResponse.chest_list)
  return chest_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Chest >&
UserChestService_UserChestResponse::chest_list() const {
  // @@protoc_insertion_point(field_list:sg.UserChestService.UserChestResponse.chest_list)
  return chest_list_;
}

// optional .sg.Reward reward = 3;
inline bool UserChestService_UserChestResponse::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserChestService_UserChestResponse::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserChestService_UserChestResponse::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Reward& UserChestService_UserChestResponse::_internal_reward() const {
  return *reward_;
}
inline const ::sg::Reward& UserChestService_UserChestResponse::reward() const {
  const ::sg::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:sg.UserChestService.UserChestResponse.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* UserChestService_UserChestResponse::release_reward() {
  // @@protoc_insertion_point(field_release:sg.UserChestService.UserChestResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserChestService_UserChestResponse::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserChestService.UserChestResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserChestService_UserChestResponse::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserChestService.UserChestResponse.reward)
  return reward_;
}
inline void UserChestService_UserChestResponse::set_allocated_reward(::sg::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reward_);
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reward)->GetArena();
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:sg.UserChestService.UserChestResponse.reward)
}

// -------------------------------------------------------------------

// UserChestService

// optional .sg.UserChestService.UserChestRequest req = 1;
inline bool UserChestService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserChestService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserChestService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserChestService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserChestService_UserChestRequest& UserChestService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserChestService_UserChestRequest& UserChestService::req() const {
  const ::sg::UserChestService_UserChestRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserChestService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserChestService_UserChestRequest*>(
      &::sg::_UserChestService_UserChestRequest_default_instance_);
}
inline ::sg::UserChestService_UserChestRequest* UserChestService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserChestService.req)
  clear_has_req();
  ::sg::UserChestService_UserChestRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserChestService_UserChestRequest* UserChestService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserChestService.req)
  clear_has_req();
  ::sg::UserChestService_UserChestRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserChestService_UserChestRequest* UserChestService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserChestService_UserChestRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserChestService.req)
  return req_;
}
inline void UserChestService::set_allocated_req(::sg::UserChestService_UserChestRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserChestService.req)
}

// optional .sg.UserChestService.UserChestResponse resp = 2;
inline bool UserChestService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserChestService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserChestService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserChestService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserChestService_UserChestResponse& UserChestService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserChestService_UserChestResponse& UserChestService::resp() const {
  const ::sg::UserChestService_UserChestResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserChestService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserChestService_UserChestResponse*>(
      &::sg::_UserChestService_UserChestResponse_default_instance_);
}
inline ::sg::UserChestService_UserChestResponse* UserChestService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserChestService.resp)
  clear_has_resp();
  ::sg::UserChestService_UserChestResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserChestService_UserChestResponse* UserChestService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserChestService.resp)
  clear_has_resp();
  ::sg::UserChestService_UserChestResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserChestService_UserChestResponse* UserChestService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserChestService_UserChestResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserChestService.resp)
  return resp_;
}
inline void UserChestService::set_allocated_resp(::sg::UserChestService_UserChestResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserChestService.resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::UserChestService_CHEST_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserChestService_CHEST_CMD>() {
  return ::sg::UserChestService_CHEST_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Chest_2eproto
