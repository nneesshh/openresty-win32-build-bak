// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lottery.proto

#include "Lottery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Lottery_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Lottery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LotteryMachine;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Lottery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LotteryNotify;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Lottery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LotteryService_LotteryRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Lottery_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LotteryService_LotteryResponse;
}  // namespace protobuf_Lottery_2eproto
namespace sg {
class LotteryMachineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LotteryMachine>
      _instance;
} _LotteryMachine_default_instance_;
class LotteryNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LotteryNotify>
      _instance;
} _LotteryNotify_default_instance_;
class LotteryService_LotteryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LotteryService_LotteryRequest>
      _instance;
} _LotteryService_LotteryRequest_default_instance_;
class LotteryService_LotteryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LotteryService_LotteryResponse>
      _instance;
} _LotteryService_LotteryResponse_default_instance_;
class LotteryServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LotteryService>
      _instance;
} _LotteryService_default_instance_;
}  // namespace sg
namespace protobuf_Lottery_2eproto {
static void InitDefaultsLotteryMachine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_LotteryMachine_default_instance_;
    new (ptr) ::sg::LotteryMachine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::LotteryMachine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LotteryMachine =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLotteryMachine}, {}};

static void InitDefaultsLotteryNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_LotteryNotify_default_instance_;
    new (ptr) ::sg::LotteryNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::LotteryNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LotteryNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLotteryNotify}, {}};

static void InitDefaultsLotteryService_LotteryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_LotteryService_LotteryRequest_default_instance_;
    new (ptr) ::sg::LotteryService_LotteryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::LotteryService_LotteryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LotteryService_LotteryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLotteryService_LotteryRequest}, {}};

static void InitDefaultsLotteryService_LotteryResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_LotteryService_LotteryResponse_default_instance_;
    new (ptr) ::sg::LotteryService_LotteryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::LotteryService_LotteryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LotteryService_LotteryResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLotteryService_LotteryResponse}, {
      &protobuf_Lottery_2eproto::scc_info_LotteryMachine.base,
      &protobuf_Lottery_2eproto::scc_info_LotteryNotify.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsLotteryService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_LotteryService_default_instance_;
    new (ptr) ::sg::LotteryService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::LotteryService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LotteryService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLotteryService}, {
      &protobuf_Lottery_2eproto::scc_info_LotteryService_LotteryRequest.base,
      &protobuf_Lottery_2eproto::scc_info_LotteryService_LotteryResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LotteryMachine.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LotteryNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LotteryService_LotteryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LotteryService_LotteryResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LotteryService.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, cost_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, once_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, ten_times_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, remain_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryMachine, cost_add_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryNotify, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryNotify, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryNotify, get_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryNotify, get_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryNotify, timestamp_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryRequest, machine_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryResponse, machine_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryResponse, notifys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService_LotteryResponse, reward_),
  1,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::LotteryService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::sg::LotteryMachine)},
  { 21, 31, sizeof(::sg::LotteryNotify)},
  { 36, 43, sizeof(::sg::LotteryService_LotteryRequest)},
  { 45, 54, sizeof(::sg::LotteryService_LotteryResponse)},
  { 58, 65, sizeof(::sg::LotteryService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_LotteryMachine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_LotteryNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_LotteryService_LotteryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_LotteryService_LotteryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_LotteryService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Lottery.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rLottery.proto\022\002sg\032\020BaseStruct.proto\"\245\001"
      "\n\016LotteryMachine\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002"
      "(\005\022\021\n\tcost_item\030\003 \002(\005\022\021\n\tonce_cost\030\004 \002(\005"
      "\022\026\n\016ten_times_cost\030\005 \002(\005\022\024\n\014remain_times"
      "\030\006 \002(\005\022\023\n\013activity_id\030\007 \002(\005\022\020\n\010cost_add\030"
      "\010 \001(\005\"d\n\rLotteryNotify\022\014\n\004uuid\030\001 \002(\004\022\014\n\004"
      "nick\030\002 \002(\014\022\020\n\010get_type\030\003 \002(\005\022\022\n\nget_type"
      "id\030\004 \002(\005\022\021\n\ttimestamp\030\005 \002(\020\"\250\003\n\016LotteryS"
      "ervice\022.\n\003req\030\001 \001(\0132!.sg.LotteryService."
      "LotteryRequest\0220\n\004resp\030\002 \001(\0132\".sg.Lotter"
      "yService.LotteryResponse\032Q\n\016LotteryReque"
      "st\022+\n\003cmd\030\001 \002(\0162\036.sg.LotteryService.LOTT"
      "ERY_CMD\022\022\n\nmachine_id\030\002 \001(\005\032\213\001\n\017LotteryR"
      "esponse\022\016\n\006result\030\001 \002(\005\022(\n\014machine_list\030"
      "\002 \003(\0132\022.sg.LotteryMachine\022\"\n\007notifys\030\003 \003"
      "(\0132\021.sg.LotteryNotify\022\032\n\006reward\030\013 \001(\0132\n."
      "sg.Reward\"S\n\013LOTTERY_CMD\022\t\n\005QUERY\020\001\022\020\n\014Q"
      "UERY_NOTIFY\020\002\022\020\n\014LOTTERY_ONCE\020\003\022\025\n\021LOTTE"
      "RY_TEN_TIMES\020\004B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 739);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Lottery.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Lottery_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* LotteryService_LOTTERY_CMD_descriptor() {
  protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Lottery_2eproto::file_level_enum_descriptors[0];
}
bool LotteryService_LOTTERY_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LotteryService_LOTTERY_CMD LotteryService::QUERY;
const LotteryService_LOTTERY_CMD LotteryService::QUERY_NOTIFY;
const LotteryService_LOTTERY_CMD LotteryService::LOTTERY_ONCE;
const LotteryService_LOTTERY_CMD LotteryService::LOTTERY_TEN_TIMES;
const LotteryService_LOTTERY_CMD LotteryService::LOTTERY_CMD_MIN;
const LotteryService_LOTTERY_CMD LotteryService::LOTTERY_CMD_MAX;
const int LotteryService::LOTTERY_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LotteryMachine::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LotteryMachine::kIdFieldNumber;
const int LotteryMachine::kTypeFieldNumber;
const int LotteryMachine::kCostItemFieldNumber;
const int LotteryMachine::kOnceCostFieldNumber;
const int LotteryMachine::kTenTimesCostFieldNumber;
const int LotteryMachine::kRemainTimesFieldNumber;
const int LotteryMachine::kActivityIdFieldNumber;
const int LotteryMachine::kCostAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LotteryMachine::LotteryMachine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Lottery_2eproto::scc_info_LotteryMachine.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.LotteryMachine)
}
LotteryMachine::LotteryMachine(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryMachine.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.LotteryMachine)
}
LotteryMachine::LotteryMachine(const LotteryMachine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_add_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cost_add_));
  // @@protoc_insertion_point(copy_constructor:sg.LotteryMachine)
}

void LotteryMachine::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_add_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cost_add_));
}

LotteryMachine::~LotteryMachine() {
  // @@protoc_insertion_point(destructor:sg.LotteryMachine)
  SharedDtor();
}

void LotteryMachine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void LotteryMachine::ArenaDtor(void* object) {
  LotteryMachine* _this = reinterpret_cast< LotteryMachine* >(object);
  (void)_this;
}
void LotteryMachine::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LotteryMachine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LotteryMachine::descriptor() {
  ::protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LotteryMachine& LotteryMachine::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryMachine.base);
  return *internal_default_instance();
}


void LotteryMachine::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.LotteryMachine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cost_add_) -
        reinterpret_cast<char*>(&id_)) + sizeof(cost_add_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LotteryMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.LotteryMachine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cost_item = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cost_item();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 once_cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_once_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &once_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ten_times_cost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ten_times_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ten_times_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 remain_times = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_remain_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 activity_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_activity_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cost_add = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_cost_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.LotteryMachine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.LotteryMachine)
  return false;
#undef DO_
}

void LotteryMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.LotteryMachine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 cost_item = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost_item(), output);
  }

  // required int32 once_cost = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->once_cost(), output);
  }

  // required int32 ten_times_cost = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ten_times_cost(), output);
  }

  // required int32 remain_times = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remain_times(), output);
  }

  // required int32 activity_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->activity_id(), output);
  }

  // optional int32 cost_add = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cost_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.LotteryMachine)
}

::google::protobuf::uint8* LotteryMachine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.LotteryMachine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 cost_item = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost_item(), target);
  }

  // required int32 once_cost = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->once_cost(), target);
  }

  // required int32 ten_times_cost = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ten_times_cost(), target);
  }

  // required int32 remain_times = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->remain_times(), target);
  }

  // required int32 activity_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->activity_id(), target);
  }

  // optional int32 cost_add = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cost_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.LotteryMachine)
  return target;
}

size_t LotteryMachine::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.LotteryMachine)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_cost_item()) {
    // required int32 cost_item = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost_item());
  }

  if (has_once_cost()) {
    // required int32 once_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->once_cost());
  }

  if (has_ten_times_cost()) {
    // required int32 ten_times_cost = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ten_times_cost());
  }

  if (has_remain_times()) {
    // required int32 remain_times = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remain_times());
  }

  if (has_activity_id()) {
    // required int32 activity_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->activity_id());
  }

  return total_size;
}
size_t LotteryMachine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.LotteryMachine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 cost_item = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost_item());

    // required int32 once_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->once_cost());

    // required int32 ten_times_cost = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ten_times_cost());

    // required int32 remain_times = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remain_times());

    // required int32 activity_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->activity_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 cost_add = 8;
  if (has_cost_add()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost_add());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryMachine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.LotteryMachine)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryMachine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LotteryMachine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.LotteryMachine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.LotteryMachine)
    MergeFrom(*source);
  }
}

void LotteryMachine::MergeFrom(const LotteryMachine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.LotteryMachine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      cost_item_ = from.cost_item_;
    }
    if (cached_has_bits & 0x00000008u) {
      once_cost_ = from.once_cost_;
    }
    if (cached_has_bits & 0x00000010u) {
      ten_times_cost_ = from.ten_times_cost_;
    }
    if (cached_has_bits & 0x00000020u) {
      remain_times_ = from.remain_times_;
    }
    if (cached_has_bits & 0x00000040u) {
      activity_id_ = from.activity_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      cost_add_ = from.cost_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LotteryMachine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.LotteryMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryMachine::CopyFrom(const LotteryMachine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.LotteryMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryMachine::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void LotteryMachine::Swap(LotteryMachine* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LotteryMachine* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LotteryMachine::UnsafeArenaSwap(LotteryMachine* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LotteryMachine::InternalSwap(LotteryMachine* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(cost_item_, other->cost_item_);
  swap(once_cost_, other->once_cost_);
  swap(ten_times_cost_, other->ten_times_cost_);
  swap(remain_times_, other->remain_times_);
  swap(activity_id_, other->activity_id_);
  swap(cost_add_, other->cost_add_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LotteryMachine::GetMetadata() const {
  protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LotteryNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LotteryNotify::kUuidFieldNumber;
const int LotteryNotify::kNickFieldNumber;
const int LotteryNotify::kGetTypeFieldNumber;
const int LotteryNotify::kGetTypeidFieldNumber;
const int LotteryNotify::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LotteryNotify::LotteryNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Lottery_2eproto::scc_info_LotteryNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.LotteryNotify)
}
LotteryNotify::LotteryNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.LotteryNotify)
}
LotteryNotify::LotteryNotify(const LotteryNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:sg.LotteryNotify)
}

void LotteryNotify::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(timestamp_));
}

LotteryNotify::~LotteryNotify() {
  // @@protoc_insertion_point(destructor:sg.LotteryNotify)
  SharedDtor();
}

void LotteryNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LotteryNotify::ArenaDtor(void* object) {
  LotteryNotify* _this = reinterpret_cast< LotteryNotify* >(object);
  (void)_this;
}
void LotteryNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LotteryNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LotteryNotify::descriptor() {
  ::protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LotteryNotify& LotteryNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryNotify.base);
  return *internal_default_instance();
}


void LotteryNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.LotteryNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nick_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 30u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LotteryNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.LotteryNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 get_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_get_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 get_typeid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_get_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.LotteryNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.LotteryNotify)
  return false;
#undef DO_
}

void LotteryNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.LotteryNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required bytes nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nick(), output);
  }

  // required int32 get_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->get_type(), output);
  }

  // required int32 get_typeid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->get_typeid(), output);
  }

  // required sfixed64 timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.LotteryNotify)
}

::google::protobuf::uint8* LotteryNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.LotteryNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // required bytes nick = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nick(), target);
  }

  // required int32 get_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->get_type(), target);
  }

  // required int32 get_typeid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->get_typeid(), target);
  }

  // required sfixed64 timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.LotteryNotify)
  return target;
}

size_t LotteryNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.LotteryNotify)
  size_t total_size = 0;

  if (has_nick()) {
    // required bytes nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (has_uuid()) {
    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  if (has_get_type()) {
    // required int32 get_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_type());
  }

  if (has_get_typeid()) {
    // required int32 get_typeid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_typeid());
  }

  if (has_timestamp()) {
    // required sfixed64 timestamp = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t LotteryNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.LotteryNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());

    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());

    // required int32 get_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_type());

    // required int32 get_typeid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_typeid());

    // required sfixed64 timestamp = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.LotteryNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LotteryNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.LotteryNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.LotteryNotify)
    MergeFrom(*source);
  }
}

void LotteryNotify::MergeFrom(const LotteryNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.LotteryNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000002u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      get_type_ = from.get_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      get_typeid_ = from.get_typeid_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LotteryNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.LotteryNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryNotify::CopyFrom(const LotteryNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.LotteryNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void LotteryNotify::Swap(LotteryNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LotteryNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LotteryNotify::UnsafeArenaSwap(LotteryNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LotteryNotify::InternalSwap(LotteryNotify* other) {
  using std::swap;
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uuid_, other->uuid_);
  swap(get_type_, other->get_type_);
  swap(get_typeid_, other->get_typeid_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LotteryNotify::GetMetadata() const {
  protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LotteryService_LotteryRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LotteryService_LotteryRequest::kCmdFieldNumber;
const int LotteryService_LotteryRequest::kMachineIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LotteryService_LotteryRequest::LotteryService_LotteryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Lottery_2eproto::scc_info_LotteryService_LotteryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.LotteryService.LotteryRequest)
}
LotteryService_LotteryRequest::LotteryService_LotteryRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryService_LotteryRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.LotteryService.LotteryRequest)
}
LotteryService_LotteryRequest::LotteryService_LotteryRequest(const LotteryService_LotteryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&machine_id_, &from.machine_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&machine_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.LotteryService.LotteryRequest)
}

void LotteryService_LotteryRequest::SharedCtor() {
  machine_id_ = 0;
  cmd_ = 1;
}

LotteryService_LotteryRequest::~LotteryService_LotteryRequest() {
  // @@protoc_insertion_point(destructor:sg.LotteryService.LotteryRequest)
  SharedDtor();
}

void LotteryService_LotteryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void LotteryService_LotteryRequest::ArenaDtor(void* object) {
  LotteryService_LotteryRequest* _this = reinterpret_cast< LotteryService_LotteryRequest* >(object);
  (void)_this;
}
void LotteryService_LotteryRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LotteryService_LotteryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LotteryService_LotteryRequest::descriptor() {
  ::protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LotteryService_LotteryRequest& LotteryService_LotteryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryService_LotteryRequest.base);
  return *internal_default_instance();
}


void LotteryService_LotteryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.LotteryService.LotteryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    machine_id_ = 0;
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LotteryService_LotteryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.LotteryService.LotteryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.LotteryService.LOTTERY_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::LotteryService_LOTTERY_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::LotteryService_LOTTERY_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 machine_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_machine_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.LotteryService.LotteryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.LotteryService.LotteryRequest)
  return false;
#undef DO_
}

void LotteryService_LotteryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.LotteryService.LotteryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.LotteryService.LOTTERY_CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 machine_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->machine_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.LotteryService.LotteryRequest)
}

::google::protobuf::uint8* LotteryService_LotteryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.LotteryService.LotteryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.LotteryService.LOTTERY_CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 machine_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->machine_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.LotteryService.LotteryRequest)
  return target;
}

size_t LotteryService_LotteryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.LotteryService.LotteryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.LotteryService.LOTTERY_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // optional int32 machine_id = 2;
  if (has_machine_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryService_LotteryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.LotteryService.LotteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryService_LotteryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LotteryService_LotteryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.LotteryService.LotteryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.LotteryService.LotteryRequest)
    MergeFrom(*source);
  }
}

void LotteryService_LotteryRequest::MergeFrom(const LotteryService_LotteryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.LotteryService.LotteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      machine_id_ = from.machine_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LotteryService_LotteryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.LotteryService.LotteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryService_LotteryRequest::CopyFrom(const LotteryService_LotteryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.LotteryService.LotteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryService_LotteryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void LotteryService_LotteryRequest::Swap(LotteryService_LotteryRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LotteryService_LotteryRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LotteryService_LotteryRequest::UnsafeArenaSwap(LotteryService_LotteryRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LotteryService_LotteryRequest::InternalSwap(LotteryService_LotteryRequest* other) {
  using std::swap;
  swap(machine_id_, other->machine_id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LotteryService_LotteryRequest::GetMetadata() const {
  protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LotteryService_LotteryResponse::InitAsDefaultInstance() {
  ::sg::_LotteryService_LotteryResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void LotteryService_LotteryResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.LotteryService.LotteryResponse.reward)
}
void LotteryService_LotteryResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LotteryService_LotteryResponse::kResultFieldNumber;
const int LotteryService_LotteryResponse::kMachineListFieldNumber;
const int LotteryService_LotteryResponse::kNotifysFieldNumber;
const int LotteryService_LotteryResponse::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LotteryService_LotteryResponse::LotteryService_LotteryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Lottery_2eproto::scc_info_LotteryService_LotteryResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.LotteryService.LotteryResponse)
}
LotteryService_LotteryResponse::LotteryService_LotteryResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  machine_list_(arena),
  notifys_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryService_LotteryResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.LotteryService.LotteryResponse)
}
LotteryService_LotteryResponse::LotteryService_LotteryResponse(const LotteryService_LotteryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      machine_list_(from.machine_list_),
      notifys_(from.notifys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.LotteryService.LotteryResponse)
}

void LotteryService_LotteryResponse::SharedCtor() {
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(result_));
}

LotteryService_LotteryResponse::~LotteryService_LotteryResponse() {
  // @@protoc_insertion_point(destructor:sg.LotteryService.LotteryResponse)
  SharedDtor();
}

void LotteryService_LotteryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete reward_;
}

void LotteryService_LotteryResponse::ArenaDtor(void* object) {
  LotteryService_LotteryResponse* _this = reinterpret_cast< LotteryService_LotteryResponse* >(object);
  (void)_this;
}
void LotteryService_LotteryResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LotteryService_LotteryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LotteryService_LotteryResponse::descriptor() {
  ::protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LotteryService_LotteryResponse& LotteryService_LotteryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryService_LotteryResponse.base);
  return *internal_default_instance();
}


void LotteryService_LotteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.LotteryService.LotteryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_list_.Clear();
  notifys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != NULL);
    reward_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LotteryService_LotteryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.LotteryService.LotteryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.LotteryMachine machine_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_machine_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.LotteryNotify notifys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.LotteryService.LotteryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.LotteryService.LotteryResponse)
  return false;
#undef DO_
}

void LotteryService_LotteryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.LotteryService.LotteryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.LotteryMachine machine_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->machine_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->machine_list(static_cast<int>(i)),
      output);
  }

  // repeated .sg.LotteryNotify notifys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->notifys(static_cast<int>(i)),
      output);
  }

  // optional .sg.Reward reward = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.LotteryService.LotteryResponse)
}

::google::protobuf::uint8* LotteryService_LotteryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.LotteryService.LotteryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.LotteryMachine machine_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->machine_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->machine_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.LotteryNotify notifys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->notifys(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.Reward reward = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.LotteryService.LotteryResponse)
  return target;
}

size_t LotteryService_LotteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.LotteryService.LotteryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.LotteryMachine machine_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->machine_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->machine_list(static_cast<int>(i)));
    }
  }

  // repeated .sg.LotteryNotify notifys = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->notifys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifys(static_cast<int>(i)));
    }
  }

  // optional .sg.Reward reward = 11;
  if (has_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryService_LotteryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.LotteryService.LotteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryService_LotteryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LotteryService_LotteryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.LotteryService.LotteryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.LotteryService.LotteryResponse)
    MergeFrom(*source);
  }
}

void LotteryService_LotteryResponse::MergeFrom(const LotteryService_LotteryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.LotteryService.LotteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  machine_list_.MergeFrom(from.machine_list_);
  notifys_.MergeFrom(from.notifys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LotteryService_LotteryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.LotteryService.LotteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryService_LotteryResponse::CopyFrom(const LotteryService_LotteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.LotteryService.LotteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryService_LotteryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->machine_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->notifys())) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void LotteryService_LotteryResponse::Swap(LotteryService_LotteryResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LotteryService_LotteryResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LotteryService_LotteryResponse::UnsafeArenaSwap(LotteryService_LotteryResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LotteryService_LotteryResponse::InternalSwap(LotteryService_LotteryResponse* other) {
  using std::swap;
  CastToBase(&machine_list_)->InternalSwap(CastToBase(&other->machine_list_));
  CastToBase(&notifys_)->InternalSwap(CastToBase(&other->notifys_));
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LotteryService_LotteryResponse::GetMetadata() const {
  protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LotteryService::InitAsDefaultInstance() {
  ::sg::_LotteryService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::LotteryService_LotteryRequest*>(
      ::sg::LotteryService_LotteryRequest::internal_default_instance());
  ::sg::_LotteryService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::LotteryService_LotteryResponse*>(
      ::sg::LotteryService_LotteryResponse::internal_default_instance());
}
void LotteryService::unsafe_arena_set_allocated_req(
    ::sg::LotteryService_LotteryRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.LotteryService.req)
}
void LotteryService::unsafe_arena_set_allocated_resp(
    ::sg::LotteryService_LotteryResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.LotteryService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LotteryService::kReqFieldNumber;
const int LotteryService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LotteryService::LotteryService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Lottery_2eproto::scc_info_LotteryService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.LotteryService)
}
LotteryService::LotteryService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.LotteryService)
}
LotteryService::LotteryService(const LotteryService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::LotteryService_LotteryRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::LotteryService_LotteryResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.LotteryService)
}

void LotteryService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

LotteryService::~LotteryService() {
  // @@protoc_insertion_point(destructor:sg.LotteryService)
  SharedDtor();
}

void LotteryService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void LotteryService::ArenaDtor(void* object) {
  LotteryService* _this = reinterpret_cast< LotteryService* >(object);
  (void)_this;
}
void LotteryService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LotteryService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LotteryService::descriptor() {
  ::protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LotteryService& LotteryService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Lottery_2eproto::scc_info_LotteryService.base);
  return *internal_default_instance();
}


void LotteryService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.LotteryService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LotteryService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.LotteryService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.LotteryService.LotteryRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.LotteryService.LotteryResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.LotteryService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.LotteryService)
  return false;
#undef DO_
}

void LotteryService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.LotteryService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.LotteryService.LotteryRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.LotteryService.LotteryResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.LotteryService)
}

::google::protobuf::uint8* LotteryService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.LotteryService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.LotteryService.LotteryRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.LotteryService.LotteryResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.LotteryService)
  return target;
}

size_t LotteryService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.LotteryService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.LotteryService.LotteryRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.LotteryService.LotteryResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LotteryService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.LotteryService)
  GOOGLE_DCHECK_NE(&from, this);
  const LotteryService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LotteryService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.LotteryService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.LotteryService)
    MergeFrom(*source);
  }
}

void LotteryService::MergeFrom(const LotteryService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.LotteryService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::LotteryService_LotteryRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::LotteryService_LotteryResponse::MergeFrom(from.resp());
    }
  }
}

void LotteryService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.LotteryService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryService::CopyFrom(const LotteryService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.LotteryService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void LotteryService::Swap(LotteryService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LotteryService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LotteryService::UnsafeArenaSwap(LotteryService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LotteryService::InternalSwap(LotteryService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LotteryService::GetMetadata() const {
  protobuf_Lottery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Lottery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::LotteryMachine* Arena::CreateMaybeMessage< ::sg::LotteryMachine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::LotteryMachine >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::LotteryNotify* Arena::CreateMaybeMessage< ::sg::LotteryNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::LotteryNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::LotteryService_LotteryRequest* Arena::CreateMaybeMessage< ::sg::LotteryService_LotteryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::LotteryService_LotteryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::LotteryService_LotteryResponse* Arena::CreateMaybeMessage< ::sg::LotteryService_LotteryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::LotteryService_LotteryResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::LotteryService* Arena::CreateMaybeMessage< ::sg::LotteryService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::LotteryService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
