// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Maelstrom.proto

#ifndef PROTOBUF_INCLUDED_Maelstrom_2eproto
#define PROTOBUF_INCLUDED_Maelstrom_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Maelstrom_2eproto 

namespace protobuf_Maelstrom_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Maelstrom_2eproto
namespace sg {
class MaelstromBuilding;
class MaelstromBuildingDefaultTypeInternal;
extern MaelstromBuildingDefaultTypeInternal _MaelstromBuilding_default_instance_;
class MaelstromBuildingLevelUpNotify;
class MaelstromBuildingLevelUpNotifyDefaultTypeInternal;
extern MaelstromBuildingLevelUpNotifyDefaultTypeInternal _MaelstromBuildingLevelUpNotify_default_instance_;
class MaelstromEvent;
class MaelstromEventDefaultTypeInternal;
extern MaelstromEventDefaultTypeInternal _MaelstromEvent_default_instance_;
class MaelstromService;
class MaelstromServiceDefaultTypeInternal;
extern MaelstromServiceDefaultTypeInternal _MaelstromService_default_instance_;
class MaelstromService_MaelstromRequest;
class MaelstromService_MaelstromRequestDefaultTypeInternal;
extern MaelstromService_MaelstromRequestDefaultTypeInternal _MaelstromService_MaelstromRequest_default_instance_;
class MaelstromService_MaelstromResponse;
class MaelstromService_MaelstromResponseDefaultTypeInternal;
extern MaelstromService_MaelstromResponseDefaultTypeInternal _MaelstromService_MaelstromResponse_default_instance_;
class MaelstromState;
class MaelstromStateDefaultTypeInternal;
extern MaelstromStateDefaultTypeInternal _MaelstromState_default_instance_;
class OilOutputNotify;
class OilOutputNotifyDefaultTypeInternal;
extern OilOutputNotifyDefaultTypeInternal _OilOutputNotify_default_instance_;
class ShipInjuredNotify;
class ShipInjuredNotifyDefaultTypeInternal;
extern ShipInjuredNotifyDefaultTypeInternal _ShipInjuredNotify_default_instance_;
class ShipRestoreNotify;
class ShipRestoreNotifyDefaultTypeInternal;
extern ShipRestoreNotifyDefaultTypeInternal _ShipRestoreNotify_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::MaelstromBuilding* Arena::CreateMaybeMessage<::sg::MaelstromBuilding>(Arena*);
template<> ::sg::MaelstromBuildingLevelUpNotify* Arena::CreateMaybeMessage<::sg::MaelstromBuildingLevelUpNotify>(Arena*);
template<> ::sg::MaelstromEvent* Arena::CreateMaybeMessage<::sg::MaelstromEvent>(Arena*);
template<> ::sg::MaelstromService* Arena::CreateMaybeMessage<::sg::MaelstromService>(Arena*);
template<> ::sg::MaelstromService_MaelstromRequest* Arena::CreateMaybeMessage<::sg::MaelstromService_MaelstromRequest>(Arena*);
template<> ::sg::MaelstromService_MaelstromResponse* Arena::CreateMaybeMessage<::sg::MaelstromService_MaelstromResponse>(Arena*);
template<> ::sg::MaelstromState* Arena::CreateMaybeMessage<::sg::MaelstromState>(Arena*);
template<> ::sg::OilOutputNotify* Arena::CreateMaybeMessage<::sg::OilOutputNotify>(Arena*);
template<> ::sg::ShipInjuredNotify* Arena::CreateMaybeMessage<::sg::ShipInjuredNotify>(Arena*);
template<> ::sg::ShipRestoreNotify* Arena::CreateMaybeMessage<::sg::ShipRestoreNotify>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum MaelstromService_CMD {
  MaelstromService_CMD_ENTER = 1,
  MaelstromService_CMD_MOVE = 2,
  MaelstromService_CMD_RESET = 3,
  MaelstromService_CMD_BUILDING_LEVEL_UP = 4,
  MaelstromService_CMD_SUPPLY = 5,
  MaelstromService_CMD_QUERY_EVENT = 6,
  MaelstromService_CMD_DEAL_WITH_EVENT = 7,
  MaelstromService_CMD_TALENT_LEVEL_UP = 8
};
bool MaelstromService_CMD_IsValid(int value);
const MaelstromService_CMD MaelstromService_CMD_CMD_MIN = MaelstromService_CMD_ENTER;
const MaelstromService_CMD MaelstromService_CMD_CMD_MAX = MaelstromService_CMD_TALENT_LEVEL_UP;
const int MaelstromService_CMD_CMD_ARRAYSIZE = MaelstromService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* MaelstromService_CMD_descriptor();
inline const ::std::string& MaelstromService_CMD_Name(MaelstromService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    MaelstromService_CMD_descriptor(), value);
}
inline bool MaelstromService_CMD_Parse(
    const ::std::string& name, MaelstromService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MaelstromService_CMD>(
    MaelstromService_CMD_descriptor(), name, value);
}
enum MAELSTROM_MOVE_DIRECTION {
  MAELSTROM_MOVE_DIRECTION_UP = 1,
  MAELSTROM_MOVE_DIRECTION_DOWN = 2,
  MAELSTROM_MOVE_DIRECTION_LEFT = 3,
  MAELSTROM_MOVE_DIRECTION_RIGHT = 4
};
bool MAELSTROM_MOVE_DIRECTION_IsValid(int value);
const MAELSTROM_MOVE_DIRECTION MAELSTROM_MOVE_DIRECTION_MIN = MAELSTROM_MOVE_DIRECTION_UP;
const MAELSTROM_MOVE_DIRECTION MAELSTROM_MOVE_DIRECTION_MAX = MAELSTROM_MOVE_DIRECTION_RIGHT;
const int MAELSTROM_MOVE_DIRECTION_ARRAYSIZE = MAELSTROM_MOVE_DIRECTION_MAX + 1;

const ::google::protobuf::EnumDescriptor* MAELSTROM_MOVE_DIRECTION_descriptor();
inline const ::std::string& MAELSTROM_MOVE_DIRECTION_Name(MAELSTROM_MOVE_DIRECTION value) {
  return ::google::protobuf::internal::NameOfEnum(
    MAELSTROM_MOVE_DIRECTION_descriptor(), value);
}
inline bool MAELSTROM_MOVE_DIRECTION_Parse(
    const ::std::string& name, MAELSTROM_MOVE_DIRECTION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MAELSTROM_MOVE_DIRECTION>(
    MAELSTROM_MOVE_DIRECTION_descriptor(), name, value);
}
enum MAELSTROM_BUILDING_TYPE {
  MAELSTROM_BUILDING_TYPE_BEACON = 1,
  MAELSTROM_BUILDING_TYPE_OIL_WELL = 2
};
bool MAELSTROM_BUILDING_TYPE_IsValid(int value);
const MAELSTROM_BUILDING_TYPE MAELSTROM_BUILDING_TYPE_MIN = MAELSTROM_BUILDING_TYPE_BEACON;
const MAELSTROM_BUILDING_TYPE MAELSTROM_BUILDING_TYPE_MAX = MAELSTROM_BUILDING_TYPE_OIL_WELL;
const int MAELSTROM_BUILDING_TYPE_ARRAYSIZE = MAELSTROM_BUILDING_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MAELSTROM_BUILDING_TYPE_descriptor();
inline const ::std::string& MAELSTROM_BUILDING_TYPE_Name(MAELSTROM_BUILDING_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MAELSTROM_BUILDING_TYPE_descriptor(), value);
}
inline bool MAELSTROM_BUILDING_TYPE_Parse(
    const ::std::string& name, MAELSTROM_BUILDING_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MAELSTROM_BUILDING_TYPE>(
    MAELSTROM_BUILDING_TYPE_descriptor(), name, value);
}
// ===================================================================

class MaelstromState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.MaelstromState) */ {
 public:
  MaelstromState();
  virtual ~MaelstromState();

  MaelstromState(const MaelstromState& from);

  inline MaelstromState& operator=(const MaelstromState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaelstromState(MaelstromState&& from) noexcept
    : MaelstromState() {
    *this = ::std::move(from);
  }

  inline MaelstromState& operator=(MaelstromState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaelstromState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaelstromState* internal_default_instance() {
    return reinterpret_cast<const MaelstromState*>(
               &_MaelstromState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MaelstromState* other);
  void Swap(MaelstromState* other);
  friend void swap(MaelstromState& a, MaelstromState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaelstromState* New() const final {
    return CreateMaybeMessage<MaelstromState>(NULL);
  }

  MaelstromState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaelstromState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaelstromState& from);
  void MergeFrom(const MaelstromState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaelstromState* other);
  protected:
  explicit MaelstromState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.pb_pair_int_int talent = 9;
  int talent_size() const;
  void clear_talent();
  static const int kTalentFieldNumber = 9;
  ::sg::pb_pair_int_int* mutable_talent(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >*
      mutable_talent();
  const ::sg::pb_pair_int_int& talent(int index) const;
  ::sg::pb_pair_int_int* add_talent();
  const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >&
      talent() const;

  // repeated .sg.pb_pair_int_int event_record = 10;
  int event_record_size() const;
  void clear_event_record();
  static const int kEventRecordFieldNumber = 10;
  ::sg::pb_pair_int_int* mutable_event_record(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >*
      mutable_event_record();
  const ::sg::pb_pair_int_int& event_record(int index) const;
  ::sg::pb_pair_int_int* add_event_record();
  const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >&
      event_record() const;

  // optional bytes fog = 4;
  bool has_fog() const;
  void clear_fog();
  static const int kFogFieldNumber = 4;
  const ::std::string& fog() const;
  void set_fog(const ::std::string& value);
  #if LANG_CXX11
  void set_fog(::std::string&& value);
  #endif
  void set_fog(const char* value);
  void set_fog(const void* value, size_t size);
  ::std::string* mutable_fog();
  ::std::string* release_fog();
  void set_allocated_fog(::std::string* fog);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_fog();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fog(
      ::std::string* fog);

  // required int32 explore_level = 1;
  bool has_explore_level() const;
  void clear_explore_level();
  static const int kExploreLevelFieldNumber = 1;
  ::google::protobuf::int32 explore_level() const;
  void set_explore_level(::google::protobuf::int32 value);

  // optional int32 pos_x = 2;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 2;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // optional int32 pos_y = 3;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 3;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // optional int32 oil = 5;
  bool has_oil() const;
  void clear_oil();
  static const int kOilFieldNumber = 5;
  ::google::protobuf::int32 oil() const;
  void set_oil(::google::protobuf::int32 value);

  // optional sfixed64 repair_timestamp = 6;
  bool has_repair_timestamp() const;
  void clear_repair_timestamp();
  static const int kRepairTimestampFieldNumber = 6;
  ::google::protobuf::int64 repair_timestamp() const;
  void set_repair_timestamp(::google::protobuf::int64 value);

  // optional sfixed64 refresh_timestamp = 7;
  bool has_refresh_timestamp() const;
  void clear_refresh_timestamp();
  static const int kRefreshTimestampFieldNumber = 7;
  ::google::protobuf::int64 refresh_timestamp() const;
  void set_refresh_timestamp(::google::protobuf::int64 value);

  // optional int32 explore_point = 8;
  bool has_explore_point() const;
  void clear_explore_point();
  static const int kExplorePointFieldNumber = 8;
  ::google::protobuf::int32 explore_point() const;
  void set_explore_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.MaelstromState)
 private:
  void set_has_explore_level();
  void clear_has_explore_level();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();
  void set_has_fog();
  void clear_has_fog();
  void set_has_oil();
  void clear_has_oil();
  void set_has_repair_timestamp();
  void clear_has_repair_timestamp();
  void set_has_refresh_timestamp();
  void clear_has_refresh_timestamp();
  void set_has_explore_point();
  void clear_has_explore_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int > talent_;
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int > event_record_;
  ::google::protobuf::internal::ArenaStringPtr fog_;
  ::google::protobuf::int32 explore_level_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  ::google::protobuf::int32 oil_;
  ::google::protobuf::int64 repair_timestamp_;
  ::google::protobuf::int64 refresh_timestamp_;
  ::google::protobuf::int32 explore_point_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaelstromBuilding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.MaelstromBuilding) */ {
 public:
  MaelstromBuilding();
  virtual ~MaelstromBuilding();

  MaelstromBuilding(const MaelstromBuilding& from);

  inline MaelstromBuilding& operator=(const MaelstromBuilding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaelstromBuilding(MaelstromBuilding&& from) noexcept
    : MaelstromBuilding() {
    *this = ::std::move(from);
  }

  inline MaelstromBuilding& operator=(MaelstromBuilding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaelstromBuilding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaelstromBuilding* internal_default_instance() {
    return reinterpret_cast<const MaelstromBuilding*>(
               &_MaelstromBuilding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(MaelstromBuilding* other);
  void Swap(MaelstromBuilding* other);
  friend void swap(MaelstromBuilding& a, MaelstromBuilding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaelstromBuilding* New() const final {
    return CreateMaybeMessage<MaelstromBuilding>(NULL);
  }

  MaelstromBuilding* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaelstromBuilding>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaelstromBuilding& from);
  void MergeFrom(const MaelstromBuilding& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaelstromBuilding* other);
  protected:
  explicit MaelstromBuilding(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sfixed64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional sfixed64 level_up_timestamp = 5;
  bool has_level_up_timestamp() const;
  void clear_level_up_timestamp();
  static const int kLevelUpTimestampFieldNumber = 5;
  ::google::protobuf::int64 level_up_timestamp() const;
  void set_level_up_timestamp(::google::protobuf::int64 value);

  // required int32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.MaelstromBuilding)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_level();
  void clear_has_level();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_level_up_timestamp();
  void clear_has_level_up_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 level_up_timestamp_;
  ::google::protobuf::int32 level_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaelstromEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.MaelstromEvent) */ {
 public:
  MaelstromEvent();
  virtual ~MaelstromEvent();

  MaelstromEvent(const MaelstromEvent& from);

  inline MaelstromEvent& operator=(const MaelstromEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaelstromEvent(MaelstromEvent&& from) noexcept
    : MaelstromEvent() {
    *this = ::std::move(from);
  }

  inline MaelstromEvent& operator=(MaelstromEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaelstromEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaelstromEvent* internal_default_instance() {
    return reinterpret_cast<const MaelstromEvent*>(
               &_MaelstromEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(MaelstromEvent* other);
  void Swap(MaelstromEvent* other);
  friend void swap(MaelstromEvent& a, MaelstromEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaelstromEvent* New() const final {
    return CreateMaybeMessage<MaelstromEvent>(NULL);
  }

  MaelstromEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaelstromEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaelstromEvent& from);
  void MergeFrom(const MaelstromEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaelstromEvent* other);
  protected:
  explicit MaelstromEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.UserInfo player = 7;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 7;
  private:
  const ::sg::UserInfo& _internal_player() const;
  public:
  const ::sg::UserInfo& player() const;
  ::sg::UserInfo* release_player();
  ::sg::UserInfo* mutable_player();
  void set_allocated_player(::sg::UserInfo* player);
  void unsafe_arena_set_allocated_player(
      ::sg::UserInfo* player);
  ::sg::UserInfo* unsafe_arena_release_player();

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 typeid = 2;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 2;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 pos_x = 5;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 5;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // optional int32 pos_y = 6;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 6;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.MaelstromEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_level();
  void clear_has_level();
  void set_has_state();
  void clear_has_state();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();
  void set_has_player();
  void clear_has_player();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserInfo* player_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaelstromService_MaelstromRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.MaelstromService.MaelstromRequest) */ {
 public:
  MaelstromService_MaelstromRequest();
  virtual ~MaelstromService_MaelstromRequest();

  MaelstromService_MaelstromRequest(const MaelstromService_MaelstromRequest& from);

  inline MaelstromService_MaelstromRequest& operator=(const MaelstromService_MaelstromRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaelstromService_MaelstromRequest(MaelstromService_MaelstromRequest&& from) noexcept
    : MaelstromService_MaelstromRequest() {
    *this = ::std::move(from);
  }

  inline MaelstromService_MaelstromRequest& operator=(MaelstromService_MaelstromRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaelstromService_MaelstromRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaelstromService_MaelstromRequest* internal_default_instance() {
    return reinterpret_cast<const MaelstromService_MaelstromRequest*>(
               &_MaelstromService_MaelstromRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(MaelstromService_MaelstromRequest* other);
  void Swap(MaelstromService_MaelstromRequest* other);
  friend void swap(MaelstromService_MaelstromRequest& a, MaelstromService_MaelstromRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaelstromService_MaelstromRequest* New() const final {
    return CreateMaybeMessage<MaelstromService_MaelstromRequest>(NULL);
  }

  MaelstromService_MaelstromRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaelstromService_MaelstromRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaelstromService_MaelstromRequest& from);
  void MergeFrom(const MaelstromService_MaelstromRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaelstromService_MaelstromRequest* other);
  protected:
  explicit MaelstromService_MaelstromRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 direction = 2;
  int direction_size() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::google::protobuf::int32 direction(int index) const;
  void set_direction(int index, ::google::protobuf::int32 value);
  void add_direction(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      direction() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_direction();

  // optional int32 building = 3;
  bool has_building() const;
  void clear_building();
  static const int kBuildingFieldNumber = 3;
  ::google::protobuf::int32 building() const;
  void set_building(::google::protobuf::int32 value);

  // optional int32 event_id = 4;
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 4;
  ::google::protobuf::int32 event_id() const;
  void set_event_id(::google::protobuf::int32 value);

  // optional bool success = 5;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 5;
  bool success() const;
  void set_success(bool value);

  // optional int32 talent_id = 6;
  bool has_talent_id() const;
  void clear_talent_id();
  static const int kTalentIdFieldNumber = 6;
  ::google::protobuf::int32 talent_id() const;
  void set_talent_id(::google::protobuf::int32 value);

  // required .sg.MaelstromService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::MaelstromService_CMD cmd() const;
  void set_cmd(::sg::MaelstromService_CMD value);

  // @@protoc_insertion_point(class_scope:sg.MaelstromService.MaelstromRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_building();
  void clear_has_building();
  void set_has_event_id();
  void clear_has_event_id();
  void set_has_success();
  void clear_has_success();
  void set_has_talent_id();
  void clear_has_talent_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > direction_;
  ::google::protobuf::int32 building_;
  ::google::protobuf::int32 event_id_;
  bool success_;
  ::google::protobuf::int32 talent_id_;
  int cmd_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaelstromService_MaelstromResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.MaelstromService.MaelstromResponse) */ {
 public:
  MaelstromService_MaelstromResponse();
  virtual ~MaelstromService_MaelstromResponse();

  MaelstromService_MaelstromResponse(const MaelstromService_MaelstromResponse& from);

  inline MaelstromService_MaelstromResponse& operator=(const MaelstromService_MaelstromResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaelstromService_MaelstromResponse(MaelstromService_MaelstromResponse&& from) noexcept
    : MaelstromService_MaelstromResponse() {
    *this = ::std::move(from);
  }

  inline MaelstromService_MaelstromResponse& operator=(MaelstromService_MaelstromResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaelstromService_MaelstromResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaelstromService_MaelstromResponse* internal_default_instance() {
    return reinterpret_cast<const MaelstromService_MaelstromResponse*>(
               &_MaelstromService_MaelstromResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(MaelstromService_MaelstromResponse* other);
  void Swap(MaelstromService_MaelstromResponse* other);
  friend void swap(MaelstromService_MaelstromResponse& a, MaelstromService_MaelstromResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaelstromService_MaelstromResponse* New() const final {
    return CreateMaybeMessage<MaelstromService_MaelstromResponse>(NULL);
  }

  MaelstromService_MaelstromResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaelstromService_MaelstromResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaelstromService_MaelstromResponse& from);
  void MergeFrom(const MaelstromService_MaelstromResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaelstromService_MaelstromResponse* other);
  protected:
  explicit MaelstromService_MaelstromResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.MaelstromBuilding building_list = 3;
  int building_list_size() const;
  void clear_building_list();
  static const int kBuildingListFieldNumber = 3;
  ::sg::MaelstromBuilding* mutable_building_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::MaelstromBuilding >*
      mutable_building_list();
  const ::sg::MaelstromBuilding& building_list(int index) const;
  ::sg::MaelstromBuilding* add_building_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::MaelstromBuilding >&
      building_list() const;

  // repeated .sg.MaelstromEvent event_list = 6;
  int event_list_size() const;
  void clear_event_list();
  static const int kEventListFieldNumber = 6;
  ::sg::MaelstromEvent* mutable_event_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::MaelstromEvent >*
      mutable_event_list();
  const ::sg::MaelstromEvent& event_list(int index) const;
  ::sg::MaelstromEvent* add_event_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::MaelstromEvent >&
      event_list() const;

  // optional .sg.MaelstromState state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  private:
  const ::sg::MaelstromState& _internal_state() const;
  public:
  const ::sg::MaelstromState& state() const;
  ::sg::MaelstromState* release_state();
  ::sg::MaelstromState* mutable_state();
  void set_allocated_state(::sg::MaelstromState* state);
  void unsafe_arena_set_allocated_state(
      ::sg::MaelstromState* state);
  ::sg::MaelstromState* unsafe_arena_release_state();

  // optional .sg.Reward reward = 7;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 7;
  private:
  const ::sg::Reward& _internal_reward() const;
  public:
  const ::sg::Reward& reward() const;
  ::sg::Reward* release_reward();
  ::sg::Reward* mutable_reward();
  void set_allocated_reward(::sg::Reward* reward);
  void unsafe_arena_set_allocated_reward(
      ::sg::Reward* reward);
  ::sg::Reward* unsafe_arena_release_reward();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 step = 2;
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 2;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // optional bool ship_injured = 5;
  bool has_ship_injured() const;
  void clear_ship_injured();
  static const int kShipInjuredFieldNumber = 5;
  bool ship_injured() const;
  void set_ship_injured(bool value);

  // @@protoc_insertion_point(class_scope:sg.MaelstromService.MaelstromResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_step();
  void clear_has_step();
  void set_has_state();
  void clear_has_state();
  void set_has_ship_injured();
  void clear_has_ship_injured();
  void set_has_reward();
  void clear_has_reward();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::MaelstromBuilding > building_list_;
  ::google::protobuf::RepeatedPtrField< ::sg::MaelstromEvent > event_list_;
  ::sg::MaelstromState* state_;
  ::sg::Reward* reward_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 step_;
  bool ship_injured_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaelstromService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.MaelstromService) */ {
 public:
  MaelstromService();
  virtual ~MaelstromService();

  MaelstromService(const MaelstromService& from);

  inline MaelstromService& operator=(const MaelstromService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaelstromService(MaelstromService&& from) noexcept
    : MaelstromService() {
    *this = ::std::move(from);
  }

  inline MaelstromService& operator=(MaelstromService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaelstromService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaelstromService* internal_default_instance() {
    return reinterpret_cast<const MaelstromService*>(
               &_MaelstromService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(MaelstromService* other);
  void Swap(MaelstromService* other);
  friend void swap(MaelstromService& a, MaelstromService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaelstromService* New() const final {
    return CreateMaybeMessage<MaelstromService>(NULL);
  }

  MaelstromService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaelstromService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaelstromService& from);
  void MergeFrom(const MaelstromService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaelstromService* other);
  protected:
  explicit MaelstromService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MaelstromService_MaelstromRequest MaelstromRequest;
  typedef MaelstromService_MaelstromResponse MaelstromResponse;

  typedef MaelstromService_CMD CMD;
  static const CMD ENTER =
    MaelstromService_CMD_ENTER;
  static const CMD MOVE =
    MaelstromService_CMD_MOVE;
  static const CMD RESET =
    MaelstromService_CMD_RESET;
  static const CMD BUILDING_LEVEL_UP =
    MaelstromService_CMD_BUILDING_LEVEL_UP;
  static const CMD SUPPLY =
    MaelstromService_CMD_SUPPLY;
  static const CMD QUERY_EVENT =
    MaelstromService_CMD_QUERY_EVENT;
  static const CMD DEAL_WITH_EVENT =
    MaelstromService_CMD_DEAL_WITH_EVENT;
  static const CMD TALENT_LEVEL_UP =
    MaelstromService_CMD_TALENT_LEVEL_UP;
  static inline bool CMD_IsValid(int value) {
    return MaelstromService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    MaelstromService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    MaelstromService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    MaelstromService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return MaelstromService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return MaelstromService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return MaelstromService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.MaelstromService.MaelstromRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::MaelstromService_MaelstromRequest& _internal_req() const;
  public:
  const ::sg::MaelstromService_MaelstromRequest& req() const;
  ::sg::MaelstromService_MaelstromRequest* release_req();
  ::sg::MaelstromService_MaelstromRequest* mutable_req();
  void set_allocated_req(::sg::MaelstromService_MaelstromRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::MaelstromService_MaelstromRequest* req);
  ::sg::MaelstromService_MaelstromRequest* unsafe_arena_release_req();

  // optional .sg.MaelstromService.MaelstromResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::MaelstromService_MaelstromResponse& _internal_resp() const;
  public:
  const ::sg::MaelstromService_MaelstromResponse& resp() const;
  ::sg::MaelstromService_MaelstromResponse* release_resp();
  ::sg::MaelstromService_MaelstromResponse* mutable_resp();
  void set_allocated_resp(::sg::MaelstromService_MaelstromResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::MaelstromService_MaelstromResponse* resp);
  ::sg::MaelstromService_MaelstromResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.MaelstromService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::MaelstromService_MaelstromRequest* req_;
  ::sg::MaelstromService_MaelstromResponse* resp_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShipRestoreNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ShipRestoreNotify) */ {
 public:
  ShipRestoreNotify();
  virtual ~ShipRestoreNotify();

  ShipRestoreNotify(const ShipRestoreNotify& from);

  inline ShipRestoreNotify& operator=(const ShipRestoreNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShipRestoreNotify(ShipRestoreNotify&& from) noexcept
    : ShipRestoreNotify() {
    *this = ::std::move(from);
  }

  inline ShipRestoreNotify& operator=(ShipRestoreNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShipRestoreNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipRestoreNotify* internal_default_instance() {
    return reinterpret_cast<const ShipRestoreNotify*>(
               &_ShipRestoreNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(ShipRestoreNotify* other);
  void Swap(ShipRestoreNotify* other);
  friend void swap(ShipRestoreNotify& a, ShipRestoreNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipRestoreNotify* New() const final {
    return CreateMaybeMessage<ShipRestoreNotify>(NULL);
  }

  ShipRestoreNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShipRestoreNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShipRestoreNotify& from);
  void MergeFrom(const ShipRestoreNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipRestoreNotify* other);
  protected:
  explicit ShipRestoreNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sg.ShipRestoreNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaelstromBuildingLevelUpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.MaelstromBuildingLevelUpNotify) */ {
 public:
  MaelstromBuildingLevelUpNotify();
  virtual ~MaelstromBuildingLevelUpNotify();

  MaelstromBuildingLevelUpNotify(const MaelstromBuildingLevelUpNotify& from);

  inline MaelstromBuildingLevelUpNotify& operator=(const MaelstromBuildingLevelUpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaelstromBuildingLevelUpNotify(MaelstromBuildingLevelUpNotify&& from) noexcept
    : MaelstromBuildingLevelUpNotify() {
    *this = ::std::move(from);
  }

  inline MaelstromBuildingLevelUpNotify& operator=(MaelstromBuildingLevelUpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaelstromBuildingLevelUpNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaelstromBuildingLevelUpNotify* internal_default_instance() {
    return reinterpret_cast<const MaelstromBuildingLevelUpNotify*>(
               &_MaelstromBuildingLevelUpNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(MaelstromBuildingLevelUpNotify* other);
  void Swap(MaelstromBuildingLevelUpNotify* other);
  friend void swap(MaelstromBuildingLevelUpNotify& a, MaelstromBuildingLevelUpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaelstromBuildingLevelUpNotify* New() const final {
    return CreateMaybeMessage<MaelstromBuildingLevelUpNotify>(NULL);
  }

  MaelstromBuildingLevelUpNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaelstromBuildingLevelUpNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaelstromBuildingLevelUpNotify& from);
  void MergeFrom(const MaelstromBuildingLevelUpNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaelstromBuildingLevelUpNotify* other);
  protected:
  explicit MaelstromBuildingLevelUpNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.MaelstromBuildingLevelUpNotify)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShipInjuredNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ShipInjuredNotify) */ {
 public:
  ShipInjuredNotify();
  virtual ~ShipInjuredNotify();

  ShipInjuredNotify(const ShipInjuredNotify& from);

  inline ShipInjuredNotify& operator=(const ShipInjuredNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShipInjuredNotify(ShipInjuredNotify&& from) noexcept
    : ShipInjuredNotify() {
    *this = ::std::move(from);
  }

  inline ShipInjuredNotify& operator=(ShipInjuredNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShipInjuredNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipInjuredNotify* internal_default_instance() {
    return reinterpret_cast<const ShipInjuredNotify*>(
               &_ShipInjuredNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ShipInjuredNotify* other);
  void Swap(ShipInjuredNotify* other);
  friend void swap(ShipInjuredNotify& a, ShipInjuredNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipInjuredNotify* New() const final {
    return CreateMaybeMessage<ShipInjuredNotify>(NULL);
  }

  ShipInjuredNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShipInjuredNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShipInjuredNotify& from);
  void MergeFrom(const ShipInjuredNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipInjuredNotify* other);
  protected:
  explicit ShipInjuredNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pos_x = 1;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 1;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // optional int32 pos_y = 2;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 2;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // optional sfixed64 repair_timestamp = 3;
  bool has_repair_timestamp() const;
  void clear_repair_timestamp();
  static const int kRepairTimestampFieldNumber = 3;
  ::google::protobuf::int64 repair_timestamp() const;
  void set_repair_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sg.ShipInjuredNotify)
 private:
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();
  void set_has_repair_timestamp();
  void clear_has_repair_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  ::google::protobuf::int64 repair_timestamp_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilOutputNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.OilOutputNotify) */ {
 public:
  OilOutputNotify();
  virtual ~OilOutputNotify();

  OilOutputNotify(const OilOutputNotify& from);

  inline OilOutputNotify& operator=(const OilOutputNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilOutputNotify(OilOutputNotify&& from) noexcept
    : OilOutputNotify() {
    *this = ::std::move(from);
  }

  inline OilOutputNotify& operator=(OilOutputNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilOutputNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilOutputNotify* internal_default_instance() {
    return reinterpret_cast<const OilOutputNotify*>(
               &_OilOutputNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(OilOutputNotify* other);
  void Swap(OilOutputNotify* other);
  friend void swap(OilOutputNotify& a, OilOutputNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilOutputNotify* New() const final {
    return CreateMaybeMessage<OilOutputNotify>(NULL);
  }

  OilOutputNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilOutputNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilOutputNotify& from);
  void MergeFrom(const OilOutputNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilOutputNotify* other);
  protected:
  explicit OilOutputNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.Item output = 1;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 1;
  private:
  const ::sg::Item& _internal_output() const;
  public:
  const ::sg::Item& output() const;
  ::sg::Item* release_output();
  ::sg::Item* mutable_output();
  void set_allocated_output(::sg::Item* output);
  void unsafe_arena_set_allocated_output(
      ::sg::Item* output);
  ::sg::Item* unsafe_arena_release_output();

  // @@protoc_insertion_point(class_scope:sg.OilOutputNotify)
 private:
  void set_has_output();
  void clear_has_output();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::Item* output_;
  friend struct ::protobuf_Maelstrom_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MaelstromState

// required int32 explore_level = 1;
inline bool MaelstromState::has_explore_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaelstromState::set_has_explore_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaelstromState::clear_has_explore_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaelstromState::clear_explore_level() {
  explore_level_ = 0;
  clear_has_explore_level();
}
inline ::google::protobuf::int32 MaelstromState::explore_level() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.explore_level)
  return explore_level_;
}
inline void MaelstromState::set_explore_level(::google::protobuf::int32 value) {
  set_has_explore_level();
  explore_level_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromState.explore_level)
}

// optional int32 pos_x = 2;
inline bool MaelstromState::has_pos_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaelstromState::set_has_pos_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaelstromState::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaelstromState::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 MaelstromState::pos_x() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.pos_x)
  return pos_x_;
}
inline void MaelstromState::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromState.pos_x)
}

// optional int32 pos_y = 3;
inline bool MaelstromState::has_pos_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaelstromState::set_has_pos_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaelstromState::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaelstromState::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 MaelstromState::pos_y() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.pos_y)
  return pos_y_;
}
inline void MaelstromState::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromState.pos_y)
}

// optional bytes fog = 4;
inline bool MaelstromState::has_fog() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaelstromState::set_has_fog() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaelstromState::clear_has_fog() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaelstromState::clear_fog() {
  fog_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_fog();
}
inline const ::std::string& MaelstromState::fog() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.fog)
  return fog_.Get();
}
inline void MaelstromState::set_fog(const ::std::string& value) {
  set_has_fog();
  fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.MaelstromState.fog)
}
#if LANG_CXX11
inline void MaelstromState::set_fog(::std::string&& value) {
  set_has_fog();
  fog_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.MaelstromState.fog)
}
#endif
inline void MaelstromState::set_fog(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fog();
  fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.MaelstromState.fog)
}
inline void MaelstromState::set_fog(const void* value,
    size_t size) {
  set_has_fog();
  fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.MaelstromState.fog)
}
inline ::std::string* MaelstromState::mutable_fog() {
  set_has_fog();
  // @@protoc_insertion_point(field_mutable:sg.MaelstromState.fog)
  return fog_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaelstromState::release_fog() {
  // @@protoc_insertion_point(field_release:sg.MaelstromState.fog)
  if (!has_fog()) {
    return NULL;
  }
  clear_has_fog();
  return fog_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MaelstromState::set_allocated_fog(::std::string* fog) {
  if (fog != NULL) {
    set_has_fog();
  } else {
    clear_has_fog();
  }
  fog_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fog,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.MaelstromState.fog)
}
inline ::std::string* MaelstromState::unsafe_arena_release_fog() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.MaelstromState.fog)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_fog();
  return fog_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MaelstromState::unsafe_arena_set_allocated_fog(
    ::std::string* fog) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fog != NULL) {
    set_has_fog();
  } else {
    clear_has_fog();
  }
  fog_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fog, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MaelstromState.fog)
}

// optional int32 oil = 5;
inline bool MaelstromState::has_oil() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaelstromState::set_has_oil() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaelstromState::clear_has_oil() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaelstromState::clear_oil() {
  oil_ = 0;
  clear_has_oil();
}
inline ::google::protobuf::int32 MaelstromState::oil() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.oil)
  return oil_;
}
inline void MaelstromState::set_oil(::google::protobuf::int32 value) {
  set_has_oil();
  oil_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromState.oil)
}

// optional sfixed64 repair_timestamp = 6;
inline bool MaelstromState::has_repair_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MaelstromState::set_has_repair_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MaelstromState::clear_has_repair_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MaelstromState::clear_repair_timestamp() {
  repair_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_repair_timestamp();
}
inline ::google::protobuf::int64 MaelstromState::repair_timestamp() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.repair_timestamp)
  return repair_timestamp_;
}
inline void MaelstromState::set_repair_timestamp(::google::protobuf::int64 value) {
  set_has_repair_timestamp();
  repair_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromState.repair_timestamp)
}

// optional sfixed64 refresh_timestamp = 7;
inline bool MaelstromState::has_refresh_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MaelstromState::set_has_refresh_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MaelstromState::clear_has_refresh_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MaelstromState::clear_refresh_timestamp() {
  refresh_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_refresh_timestamp();
}
inline ::google::protobuf::int64 MaelstromState::refresh_timestamp() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.refresh_timestamp)
  return refresh_timestamp_;
}
inline void MaelstromState::set_refresh_timestamp(::google::protobuf::int64 value) {
  set_has_refresh_timestamp();
  refresh_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromState.refresh_timestamp)
}

// optional int32 explore_point = 8;
inline bool MaelstromState::has_explore_point() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MaelstromState::set_has_explore_point() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MaelstromState::clear_has_explore_point() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MaelstromState::clear_explore_point() {
  explore_point_ = 0;
  clear_has_explore_point();
}
inline ::google::protobuf::int32 MaelstromState::explore_point() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.explore_point)
  return explore_point_;
}
inline void MaelstromState::set_explore_point(::google::protobuf::int32 value) {
  set_has_explore_point();
  explore_point_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromState.explore_point)
}

// repeated .sg.pb_pair_int_int talent = 9;
inline int MaelstromState::talent_size() const {
  return talent_.size();
}
inline ::sg::pb_pair_int_int* MaelstromState::mutable_talent(int index) {
  // @@protoc_insertion_point(field_mutable:sg.MaelstromState.talent)
  return talent_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >*
MaelstromState::mutable_talent() {
  // @@protoc_insertion_point(field_mutable_list:sg.MaelstromState.talent)
  return &talent_;
}
inline const ::sg::pb_pair_int_int& MaelstromState::talent(int index) const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.talent)
  return talent_.Get(index);
}
inline ::sg::pb_pair_int_int* MaelstromState::add_talent() {
  // @@protoc_insertion_point(field_add:sg.MaelstromState.talent)
  return talent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >&
MaelstromState::talent() const {
  // @@protoc_insertion_point(field_list:sg.MaelstromState.talent)
  return talent_;
}

// repeated .sg.pb_pair_int_int event_record = 10;
inline int MaelstromState::event_record_size() const {
  return event_record_.size();
}
inline ::sg::pb_pair_int_int* MaelstromState::mutable_event_record(int index) {
  // @@protoc_insertion_point(field_mutable:sg.MaelstromState.event_record)
  return event_record_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >*
MaelstromState::mutable_event_record() {
  // @@protoc_insertion_point(field_mutable_list:sg.MaelstromState.event_record)
  return &event_record_;
}
inline const ::sg::pb_pair_int_int& MaelstromState::event_record(int index) const {
  // @@protoc_insertion_point(field_get:sg.MaelstromState.event_record)
  return event_record_.Get(index);
}
inline ::sg::pb_pair_int_int* MaelstromState::add_event_record() {
  // @@protoc_insertion_point(field_add:sg.MaelstromState.event_record)
  return event_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >&
MaelstromState::event_record() const {
  // @@protoc_insertion_point(field_list:sg.MaelstromState.event_record)
  return event_record_;
}

// -------------------------------------------------------------------

// MaelstromBuilding

// required int32 id = 1;
inline bool MaelstromBuilding::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaelstromBuilding::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaelstromBuilding::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaelstromBuilding::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MaelstromBuilding::id() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromBuilding.id)
  return id_;
}
inline void MaelstromBuilding::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromBuilding.id)
}

// required int32 type = 2;
inline bool MaelstromBuilding::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaelstromBuilding::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaelstromBuilding::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaelstromBuilding::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MaelstromBuilding::type() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromBuilding.type)
  return type_;
}
inline void MaelstromBuilding::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromBuilding.type)
}

// required int32 level = 3;
inline bool MaelstromBuilding::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaelstromBuilding::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaelstromBuilding::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaelstromBuilding::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MaelstromBuilding::level() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromBuilding.level)
  return level_;
}
inline void MaelstromBuilding::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromBuilding.level)
}

// optional sfixed64 timestamp = 4;
inline bool MaelstromBuilding::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaelstromBuilding::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaelstromBuilding::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaelstromBuilding::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 MaelstromBuilding::timestamp() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromBuilding.timestamp)
  return timestamp_;
}
inline void MaelstromBuilding::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromBuilding.timestamp)
}

// optional sfixed64 level_up_timestamp = 5;
inline bool MaelstromBuilding::has_level_up_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaelstromBuilding::set_has_level_up_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaelstromBuilding::clear_has_level_up_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaelstromBuilding::clear_level_up_timestamp() {
  level_up_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_level_up_timestamp();
}
inline ::google::protobuf::int64 MaelstromBuilding::level_up_timestamp() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromBuilding.level_up_timestamp)
  return level_up_timestamp_;
}
inline void MaelstromBuilding::set_level_up_timestamp(::google::protobuf::int64 value) {
  set_has_level_up_timestamp();
  level_up_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromBuilding.level_up_timestamp)
}

// -------------------------------------------------------------------

// MaelstromEvent

// required int32 id = 1;
inline bool MaelstromEvent::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaelstromEvent::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaelstromEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaelstromEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MaelstromEvent::id() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromEvent.id)
  return id_;
}
inline void MaelstromEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromEvent.id)
}

// required int32 typeid = 2;
inline bool MaelstromEvent::has_typeid_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaelstromEvent::set_has_typeid_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaelstromEvent::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaelstromEvent::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 MaelstromEvent::typeid_() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromEvent.typeid)
  return typeid__;
}
inline void MaelstromEvent::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromEvent.typeid)
}

// required int32 level = 3;
inline bool MaelstromEvent::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaelstromEvent::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaelstromEvent::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaelstromEvent::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MaelstromEvent::level() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromEvent.level)
  return level_;
}
inline void MaelstromEvent::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromEvent.level)
}

// optional int32 state = 4;
inline bool MaelstromEvent::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaelstromEvent::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaelstromEvent::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaelstromEvent::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 MaelstromEvent::state() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromEvent.state)
  return state_;
}
inline void MaelstromEvent::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromEvent.state)
}

// optional int32 pos_x = 5;
inline bool MaelstromEvent::has_pos_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MaelstromEvent::set_has_pos_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MaelstromEvent::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MaelstromEvent::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 MaelstromEvent::pos_x() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromEvent.pos_x)
  return pos_x_;
}
inline void MaelstromEvent::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromEvent.pos_x)
}

// optional int32 pos_y = 6;
inline bool MaelstromEvent::has_pos_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MaelstromEvent::set_has_pos_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MaelstromEvent::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MaelstromEvent::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 MaelstromEvent::pos_y() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromEvent.pos_y)
  return pos_y_;
}
inline void MaelstromEvent::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromEvent.pos_y)
}

// optional .sg.UserInfo player = 7;
inline bool MaelstromEvent::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaelstromEvent::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaelstromEvent::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::UserInfo& MaelstromEvent::_internal_player() const {
  return *player_;
}
inline const ::sg::UserInfo& MaelstromEvent::player() const {
  const ::sg::UserInfo* p = player_;
  // @@protoc_insertion_point(field_get:sg.MaelstromEvent.player)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserInfo*>(
      &::sg::_UserInfo_default_instance_);
}
inline ::sg::UserInfo* MaelstromEvent::release_player() {
  // @@protoc_insertion_point(field_release:sg.MaelstromEvent.player)
  clear_has_player();
  ::sg::UserInfo* temp = player_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  player_ = NULL;
  return temp;
}
inline ::sg::UserInfo* MaelstromEvent::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.MaelstromEvent.player)
  clear_has_player();
  ::sg::UserInfo* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::sg::UserInfo* MaelstromEvent::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserInfo>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.MaelstromEvent.player)
  return player_;
}
inline void MaelstromEvent::set_allocated_player(::sg::UserInfo* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_);
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(player)->GetArena();
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:sg.MaelstromEvent.player)
}

// -------------------------------------------------------------------

// MaelstromService_MaelstromRequest

// required .sg.MaelstromService.CMD cmd = 1;
inline bool MaelstromService_MaelstromRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaelstromService_MaelstromRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaelstromService_MaelstromRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaelstromService_MaelstromRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::MaelstromService_CMD MaelstromService_MaelstromRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromRequest.cmd)
  return static_cast< ::sg::MaelstromService_CMD >(cmd_);
}
inline void MaelstromService_MaelstromRequest::set_cmd(::sg::MaelstromService_CMD value) {
  assert(::sg::MaelstromService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromService.MaelstromRequest.cmd)
}

// repeated int32 direction = 2;
inline int MaelstromService_MaelstromRequest::direction_size() const {
  return direction_.size();
}
inline void MaelstromService_MaelstromRequest::clear_direction() {
  direction_.Clear();
}
inline ::google::protobuf::int32 MaelstromService_MaelstromRequest::direction(int index) const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromRequest.direction)
  return direction_.Get(index);
}
inline void MaelstromService_MaelstromRequest::set_direction(int index, ::google::protobuf::int32 value) {
  direction_.Set(index, value);
  // @@protoc_insertion_point(field_set:sg.MaelstromService.MaelstromRequest.direction)
}
inline void MaelstromService_MaelstromRequest::add_direction(::google::protobuf::int32 value) {
  direction_.Add(value);
  // @@protoc_insertion_point(field_add:sg.MaelstromService.MaelstromRequest.direction)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MaelstromService_MaelstromRequest::direction() const {
  // @@protoc_insertion_point(field_list:sg.MaelstromService.MaelstromRequest.direction)
  return direction_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MaelstromService_MaelstromRequest::mutable_direction() {
  // @@protoc_insertion_point(field_mutable_list:sg.MaelstromService.MaelstromRequest.direction)
  return &direction_;
}

// optional int32 building = 3;
inline bool MaelstromService_MaelstromRequest::has_building() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaelstromService_MaelstromRequest::set_has_building() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaelstromService_MaelstromRequest::clear_has_building() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaelstromService_MaelstromRequest::clear_building() {
  building_ = 0;
  clear_has_building();
}
inline ::google::protobuf::int32 MaelstromService_MaelstromRequest::building() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromRequest.building)
  return building_;
}
inline void MaelstromService_MaelstromRequest::set_building(::google::protobuf::int32 value) {
  set_has_building();
  building_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromService.MaelstromRequest.building)
}

// optional int32 event_id = 4;
inline bool MaelstromService_MaelstromRequest::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaelstromService_MaelstromRequest::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaelstromService_MaelstromRequest::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaelstromService_MaelstromRequest::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 MaelstromService_MaelstromRequest::event_id() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromRequest.event_id)
  return event_id_;
}
inline void MaelstromService_MaelstromRequest::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromService.MaelstromRequest.event_id)
}

// optional bool success = 5;
inline bool MaelstromService_MaelstromRequest::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaelstromService_MaelstromRequest::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaelstromService_MaelstromRequest::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaelstromService_MaelstromRequest::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool MaelstromService_MaelstromRequest::success() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromRequest.success)
  return success_;
}
inline void MaelstromService_MaelstromRequest::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromService.MaelstromRequest.success)
}

// optional int32 talent_id = 6;
inline bool MaelstromService_MaelstromRequest::has_talent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaelstromService_MaelstromRequest::set_has_talent_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaelstromService_MaelstromRequest::clear_has_talent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaelstromService_MaelstromRequest::clear_talent_id() {
  talent_id_ = 0;
  clear_has_talent_id();
}
inline ::google::protobuf::int32 MaelstromService_MaelstromRequest::talent_id() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromRequest.talent_id)
  return talent_id_;
}
inline void MaelstromService_MaelstromRequest::set_talent_id(::google::protobuf::int32 value) {
  set_has_talent_id();
  talent_id_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromService.MaelstromRequest.talent_id)
}

// -------------------------------------------------------------------

// MaelstromService_MaelstromResponse

// required int32 result = 1;
inline bool MaelstromService_MaelstromResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaelstromService_MaelstromResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaelstromService_MaelstromResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaelstromService_MaelstromResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 MaelstromService_MaelstromResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromResponse.result)
  return result_;
}
inline void MaelstromService_MaelstromResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromService.MaelstromResponse.result)
}

// optional int32 step = 2;
inline bool MaelstromService_MaelstromResponse::has_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaelstromService_MaelstromResponse::set_has_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaelstromService_MaelstromResponse::clear_has_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaelstromService_MaelstromResponse::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 MaelstromService_MaelstromResponse::step() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromResponse.step)
  return step_;
}
inline void MaelstromService_MaelstromResponse::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromService.MaelstromResponse.step)
}

// repeated .sg.MaelstromBuilding building_list = 3;
inline int MaelstromService_MaelstromResponse::building_list_size() const {
  return building_list_.size();
}
inline void MaelstromService_MaelstromResponse::clear_building_list() {
  building_list_.Clear();
}
inline ::sg::MaelstromBuilding* MaelstromService_MaelstromResponse::mutable_building_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.MaelstromService.MaelstromResponse.building_list)
  return building_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::MaelstromBuilding >*
MaelstromService_MaelstromResponse::mutable_building_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.MaelstromService.MaelstromResponse.building_list)
  return &building_list_;
}
inline const ::sg::MaelstromBuilding& MaelstromService_MaelstromResponse::building_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromResponse.building_list)
  return building_list_.Get(index);
}
inline ::sg::MaelstromBuilding* MaelstromService_MaelstromResponse::add_building_list() {
  // @@protoc_insertion_point(field_add:sg.MaelstromService.MaelstromResponse.building_list)
  return building_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::MaelstromBuilding >&
MaelstromService_MaelstromResponse::building_list() const {
  // @@protoc_insertion_point(field_list:sg.MaelstromService.MaelstromResponse.building_list)
  return building_list_;
}

// optional .sg.MaelstromState state = 4;
inline bool MaelstromService_MaelstromResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaelstromService_MaelstromResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaelstromService_MaelstromResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaelstromService_MaelstromResponse::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
inline const ::sg::MaelstromState& MaelstromService_MaelstromResponse::_internal_state() const {
  return *state_;
}
inline const ::sg::MaelstromState& MaelstromService_MaelstromResponse::state() const {
  const ::sg::MaelstromState* p = state_;
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromResponse.state)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::MaelstromState*>(
      &::sg::_MaelstromState_default_instance_);
}
inline ::sg::MaelstromState* MaelstromService_MaelstromResponse::release_state() {
  // @@protoc_insertion_point(field_release:sg.MaelstromService.MaelstromResponse.state)
  clear_has_state();
  ::sg::MaelstromState* temp = state_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  state_ = NULL;
  return temp;
}
inline ::sg::MaelstromState* MaelstromService_MaelstromResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.MaelstromService.MaelstromResponse.state)
  clear_has_state();
  ::sg::MaelstromState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::sg::MaelstromState* MaelstromService_MaelstromResponse::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::MaelstromState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.MaelstromService.MaelstromResponse.state)
  return state_;
}
inline void MaelstromService_MaelstromResponse::set_allocated_state(::sg::MaelstromState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:sg.MaelstromService.MaelstromResponse.state)
}

// optional bool ship_injured = 5;
inline bool MaelstromService_MaelstromResponse::has_ship_injured() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaelstromService_MaelstromResponse::set_has_ship_injured() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaelstromService_MaelstromResponse::clear_has_ship_injured() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaelstromService_MaelstromResponse::clear_ship_injured() {
  ship_injured_ = false;
  clear_has_ship_injured();
}
inline bool MaelstromService_MaelstromResponse::ship_injured() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromResponse.ship_injured)
  return ship_injured_;
}
inline void MaelstromService_MaelstromResponse::set_ship_injured(bool value) {
  set_has_ship_injured();
  ship_injured_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromService.MaelstromResponse.ship_injured)
}

// repeated .sg.MaelstromEvent event_list = 6;
inline int MaelstromService_MaelstromResponse::event_list_size() const {
  return event_list_.size();
}
inline void MaelstromService_MaelstromResponse::clear_event_list() {
  event_list_.Clear();
}
inline ::sg::MaelstromEvent* MaelstromService_MaelstromResponse::mutable_event_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.MaelstromService.MaelstromResponse.event_list)
  return event_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::MaelstromEvent >*
MaelstromService_MaelstromResponse::mutable_event_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.MaelstromService.MaelstromResponse.event_list)
  return &event_list_;
}
inline const ::sg::MaelstromEvent& MaelstromService_MaelstromResponse::event_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromResponse.event_list)
  return event_list_.Get(index);
}
inline ::sg::MaelstromEvent* MaelstromService_MaelstromResponse::add_event_list() {
  // @@protoc_insertion_point(field_add:sg.MaelstromService.MaelstromResponse.event_list)
  return event_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::MaelstromEvent >&
MaelstromService_MaelstromResponse::event_list() const {
  // @@protoc_insertion_point(field_list:sg.MaelstromService.MaelstromResponse.event_list)
  return event_list_;
}

// optional .sg.Reward reward = 7;
inline bool MaelstromService_MaelstromResponse::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaelstromService_MaelstromResponse::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaelstromService_MaelstromResponse::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::Reward& MaelstromService_MaelstromResponse::_internal_reward() const {
  return *reward_;
}
inline const ::sg::Reward& MaelstromService_MaelstromResponse::reward() const {
  const ::sg::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:sg.MaelstromService.MaelstromResponse.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* MaelstromService_MaelstromResponse::release_reward() {
  // @@protoc_insertion_point(field_release:sg.MaelstromService.MaelstromResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* MaelstromService_MaelstromResponse::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.MaelstromService.MaelstromResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* MaelstromService_MaelstromResponse::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.MaelstromService.MaelstromResponse.reward)
  return reward_;
}
inline void MaelstromService_MaelstromResponse::set_allocated_reward(::sg::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reward_);
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reward)->GetArena();
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:sg.MaelstromService.MaelstromResponse.reward)
}

// -------------------------------------------------------------------

// MaelstromService

// optional .sg.MaelstromService.MaelstromRequest req = 1;
inline bool MaelstromService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaelstromService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaelstromService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaelstromService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::MaelstromService_MaelstromRequest& MaelstromService::_internal_req() const {
  return *req_;
}
inline const ::sg::MaelstromService_MaelstromRequest& MaelstromService::req() const {
  const ::sg::MaelstromService_MaelstromRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.MaelstromService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::MaelstromService_MaelstromRequest*>(
      &::sg::_MaelstromService_MaelstromRequest_default_instance_);
}
inline ::sg::MaelstromService_MaelstromRequest* MaelstromService::release_req() {
  // @@protoc_insertion_point(field_release:sg.MaelstromService.req)
  clear_has_req();
  ::sg::MaelstromService_MaelstromRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::MaelstromService_MaelstromRequest* MaelstromService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.MaelstromService.req)
  clear_has_req();
  ::sg::MaelstromService_MaelstromRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::MaelstromService_MaelstromRequest* MaelstromService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::MaelstromService_MaelstromRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.MaelstromService.req)
  return req_;
}
inline void MaelstromService::set_allocated_req(::sg::MaelstromService_MaelstromRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.MaelstromService.req)
}

// optional .sg.MaelstromService.MaelstromResponse resp = 2;
inline bool MaelstromService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaelstromService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaelstromService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaelstromService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::MaelstromService_MaelstromResponse& MaelstromService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::MaelstromService_MaelstromResponse& MaelstromService::resp() const {
  const ::sg::MaelstromService_MaelstromResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.MaelstromService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::MaelstromService_MaelstromResponse*>(
      &::sg::_MaelstromService_MaelstromResponse_default_instance_);
}
inline ::sg::MaelstromService_MaelstromResponse* MaelstromService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.MaelstromService.resp)
  clear_has_resp();
  ::sg::MaelstromService_MaelstromResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::MaelstromService_MaelstromResponse* MaelstromService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.MaelstromService.resp)
  clear_has_resp();
  ::sg::MaelstromService_MaelstromResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::MaelstromService_MaelstromResponse* MaelstromService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::MaelstromService_MaelstromResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.MaelstromService.resp)
  return resp_;
}
inline void MaelstromService::set_allocated_resp(::sg::MaelstromService_MaelstromResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.MaelstromService.resp)
}

// -------------------------------------------------------------------

// ShipRestoreNotify

// -------------------------------------------------------------------

// MaelstromBuildingLevelUpNotify

// required int32 id = 1;
inline bool MaelstromBuildingLevelUpNotify::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaelstromBuildingLevelUpNotify::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaelstromBuildingLevelUpNotify::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaelstromBuildingLevelUpNotify::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MaelstromBuildingLevelUpNotify::id() const {
  // @@protoc_insertion_point(field_get:sg.MaelstromBuildingLevelUpNotify.id)
  return id_;
}
inline void MaelstromBuildingLevelUpNotify::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.MaelstromBuildingLevelUpNotify.id)
}

// -------------------------------------------------------------------

// ShipInjuredNotify

// optional int32 pos_x = 1;
inline bool ShipInjuredNotify::has_pos_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShipInjuredNotify::set_has_pos_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShipInjuredNotify::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShipInjuredNotify::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 ShipInjuredNotify::pos_x() const {
  // @@protoc_insertion_point(field_get:sg.ShipInjuredNotify.pos_x)
  return pos_x_;
}
inline void ShipInjuredNotify::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipInjuredNotify.pos_x)
}

// optional int32 pos_y = 2;
inline bool ShipInjuredNotify::has_pos_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShipInjuredNotify::set_has_pos_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShipInjuredNotify::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShipInjuredNotify::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 ShipInjuredNotify::pos_y() const {
  // @@protoc_insertion_point(field_get:sg.ShipInjuredNotify.pos_y)
  return pos_y_;
}
inline void ShipInjuredNotify::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipInjuredNotify.pos_y)
}

// optional sfixed64 repair_timestamp = 3;
inline bool ShipInjuredNotify::has_repair_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShipInjuredNotify::set_has_repair_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShipInjuredNotify::clear_has_repair_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShipInjuredNotify::clear_repair_timestamp() {
  repair_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_repair_timestamp();
}
inline ::google::protobuf::int64 ShipInjuredNotify::repair_timestamp() const {
  // @@protoc_insertion_point(field_get:sg.ShipInjuredNotify.repair_timestamp)
  return repair_timestamp_;
}
inline void ShipInjuredNotify::set_repair_timestamp(::google::protobuf::int64 value) {
  set_has_repair_timestamp();
  repair_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.ShipInjuredNotify.repair_timestamp)
}

// -------------------------------------------------------------------

// OilOutputNotify

// required .sg.Item output = 1;
inline bool OilOutputNotify::has_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OilOutputNotify::set_has_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OilOutputNotify::clear_has_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Item& OilOutputNotify::_internal_output() const {
  return *output_;
}
inline const ::sg::Item& OilOutputNotify::output() const {
  const ::sg::Item* p = output_;
  // @@protoc_insertion_point(field_get:sg.OilOutputNotify.output)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Item*>(
      &::sg::_Item_default_instance_);
}
inline ::sg::Item* OilOutputNotify::release_output() {
  // @@protoc_insertion_point(field_release:sg.OilOutputNotify.output)
  clear_has_output();
  ::sg::Item* temp = output_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  output_ = NULL;
  return temp;
}
inline ::sg::Item* OilOutputNotify::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.OilOutputNotify.output)
  clear_has_output();
  ::sg::Item* temp = output_;
  output_ = NULL;
  return temp;
}
inline ::sg::Item* OilOutputNotify::mutable_output() {
  set_has_output();
  if (output_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Item>(GetArenaNoVirtual());
    output_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.OilOutputNotify.output)
  return output_;
}
inline void OilOutputNotify::set_allocated_output(::sg::Item* output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_);
  }
  if (output) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(output)->GetArena();
    if (message_arena != submessage_arena) {
      output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    set_has_output();
  } else {
    clear_has_output();
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:sg.OilOutputNotify.output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::MaelstromService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::MaelstromService_CMD>() {
  return ::sg::MaelstromService_CMD_descriptor();
}
template <> struct is_proto_enum< ::sg::MAELSTROM_MOVE_DIRECTION> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::MAELSTROM_MOVE_DIRECTION>() {
  return ::sg::MAELSTROM_MOVE_DIRECTION_descriptor();
}
template <> struct is_proto_enum< ::sg::MAELSTROM_BUILDING_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::MAELSTROM_BUILDING_TYPE>() {
  return ::sg::MAELSTROM_BUILDING_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Maelstrom_2eproto
