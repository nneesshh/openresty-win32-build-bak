// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#include "Task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_string_int;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Task_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Task_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemTask;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Task_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserSystemTaskService_UserSystemTaskRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Task_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserTaskService_UserTaskRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Task_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Task;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Task_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Task_Content;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Task_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserSystemTaskService_UserSystemTaskResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Task_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserTaskService_UserTaskResponse;
}  // namespace protobuf_Task_2eproto
namespace sg {
class Task_ContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Task_Content>
      _instance;
} _Task_Content_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Task>
      _instance;
} _Task_default_instance_;
class SystemTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemTask>
      _instance;
} _SystemTask_default_instance_;
class UserTaskService_UserTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserTaskService_UserTaskRequest>
      _instance;
} _UserTaskService_UserTaskRequest_default_instance_;
class UserTaskService_UserTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserTaskService_UserTaskResponse>
      _instance;
} _UserTaskService_UserTaskResponse_default_instance_;
class UserTaskServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserTaskService>
      _instance;
} _UserTaskService_default_instance_;
class UserSystemTaskService_UserSystemTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserSystemTaskService_UserSystemTaskRequest>
      _instance;
} _UserSystemTaskService_UserSystemTaskRequest_default_instance_;
class UserSystemTaskService_UserSystemTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserSystemTaskService_UserSystemTaskResponse>
      _instance;
} _UserSystemTaskService_UserSystemTaskResponse_default_instance_;
class UserSystemTaskServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserSystemTaskService>
      _instance;
} _UserSystemTaskService_default_instance_;
class TaskNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskNotify>
      _instance;
} _TaskNotify_default_instance_;
class SystemTaskNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemTaskNotify>
      _instance;
} _SystemTaskNotify_default_instance_;
}  // namespace sg
namespace protobuf_Task_2eproto {
static void InitDefaultsTask_Content() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Task_Content_default_instance_;
    new (ptr) ::sg::Task_Content();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Task_Content::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Task_Content =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTask_Content}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_string_int.base,}};

static void InitDefaultsTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Task_default_instance_;
    new (ptr) ::sg::Task();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Task::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Task =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTask}, {
      &protobuf_Task_2eproto::scc_info_Task_Content.base,}};

static void InitDefaultsSystemTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SystemTask_default_instance_;
    new (ptr) ::sg::SystemTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SystemTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemTask}, {}};

static void InitDefaultsUserTaskService_UserTaskRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserTaskService_UserTaskRequest_default_instance_;
    new (ptr) ::sg::UserTaskService_UserTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserTaskService_UserTaskRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserTaskService_UserTaskRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserTaskService_UserTaskRequest}, {}};

static void InitDefaultsUserTaskService_UserTaskResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserTaskService_UserTaskResponse_default_instance_;
    new (ptr) ::sg::UserTaskService_UserTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserTaskService_UserTaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserTaskService_UserTaskResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserTaskService_UserTaskResponse}, {
      &protobuf_Task_2eproto::scc_info_Task.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsUserTaskService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserTaskService_default_instance_;
    new (ptr) ::sg::UserTaskService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserTaskService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserTaskService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserTaskService}, {
      &protobuf_Task_2eproto::scc_info_UserTaskService_UserTaskRequest.base,
      &protobuf_Task_2eproto::scc_info_UserTaskService_UserTaskResponse.base,}};

static void InitDefaultsUserSystemTaskService_UserSystemTaskRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserSystemTaskService_UserSystemTaskRequest_default_instance_;
    new (ptr) ::sg::UserSystemTaskService_UserSystemTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserSystemTaskService_UserSystemTaskRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserSystemTaskService_UserSystemTaskRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserSystemTaskService_UserSystemTaskRequest}, {}};

static void InitDefaultsUserSystemTaskService_UserSystemTaskResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserSystemTaskService_UserSystemTaskResponse_default_instance_;
    new (ptr) ::sg::UserSystemTaskService_UserSystemTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserSystemTaskService_UserSystemTaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserSystemTaskService_UserSystemTaskResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserSystemTaskService_UserSystemTaskResponse}, {
      &protobuf_Task_2eproto::scc_info_SystemTask.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsUserSystemTaskService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserSystemTaskService_default_instance_;
    new (ptr) ::sg::UserSystemTaskService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserSystemTaskService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserSystemTaskService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserSystemTaskService}, {
      &protobuf_Task_2eproto::scc_info_UserSystemTaskService_UserSystemTaskRequest.base,
      &protobuf_Task_2eproto::scc_info_UserSystemTaskService_UserSystemTaskResponse.base,}};

static void InitDefaultsTaskNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_TaskNotify_default_instance_;
    new (ptr) ::sg::TaskNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::TaskNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskNotify}, {
      &protobuf_Task_2eproto::scc_info_Task.base,}};

static void InitDefaultsSystemTaskNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SystemTaskNotify_default_instance_;
    new (ptr) ::sg::SystemTaskNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SystemTaskNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SystemTaskNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystemTaskNotify}, {
      &protobuf_Task_2eproto::scc_info_SystemTask.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Task_Content.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Task.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemTask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserTaskService_UserTaskRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserTaskService_UserTaskResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserTaskService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserSystemTaskService_UserSystemTaskRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserSystemTaskService_UserSystemTaskResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserSystemTaskService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemTaskNotify.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task_Content, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task_Content, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task_Content, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task_Content, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task_Content, des_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task_Content, finish_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task_Content, require_value_),
  0,
  1,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Task, content_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTask, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTask, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTask, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTask, finish_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTask, deadline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTask, require_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTask, timestamp_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskRequest, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskRequest, content_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskRequest, times_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskResponse, tasks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService_UserTaskResponse, reward_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTaskService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskRequest, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskRequest, query_type_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskResponse, tasks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService_UserSystemTaskResponse, reward_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserSystemTaskService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::TaskNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::TaskNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::TaskNotify, task_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTaskNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTaskNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SystemTaskNotify, task_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::sg::Task_Content)},
  { 15, 24, sizeof(::sg::Task)},
  { 28, 40, sizeof(::sg::SystemTask)},
  { 47, 56, sizeof(::sg::UserTaskService_UserTaskRequest)},
  { 60, 68, sizeof(::sg::UserTaskService_UserTaskResponse)},
  { 71, 78, sizeof(::sg::UserTaskService)},
  { 80, 88, sizeof(::sg::UserSystemTaskService_UserSystemTaskRequest)},
  { 91, 99, sizeof(::sg::UserSystemTaskService_UserSystemTaskResponse)},
  { 102, 109, sizeof(::sg::UserSystemTaskService)},
  { 111, 117, sizeof(::sg::TaskNotify)},
  { 118, 124, sizeof(::sg::SystemTaskNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Task_Content_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Task_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SystemTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserTaskService_UserTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserTaskService_UserTaskResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserTaskService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserSystemTaskService_UserSystemTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserSystemTaskService_UserSystemTaskResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserSystemTaskService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_TaskNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SystemTaskNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Task.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nTask.proto\022\002sg\032\020BaseStruct.proto\"}\n\014Ta"
      "sk_Content\022\r\n\005index\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022"
      "#\n\003des\030\003 \003(\0132\026.sg.pb_pair_string_int\022\024\n\014"
      "finish_value\030\004 \002(\005\022\025\n\rrequire_value\030\005 \002("
      "\005\"b\n\004Task\022\n\n\002id\030\001 \002(\005\022\035\n\005state\030\002 \002(\0162\016.s"
      "g.TASK_STATE\022\014\n\004step\030\003 \002(\005\022!\n\007content\030\004 "
      "\003(\0132\020.sg.Task_Content\"\236\001\n\nSystemTask\022\n\n\002"
      "id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022$\n\005state\030\003 \002(\0162\025."
      "sg.SYSTEM_TASK_STATE\022\024\n\014finish_value\030\004 \002"
      "(\003\022\020\n\010deadline\030\005 \002(\020\022\025\n\rrequire_value\030\006 "
      "\002(\003\022\021\n\ttimestamp\030\007 \001(\020\"\211\003\n\017UserTaskServi"
      "ce\0220\n\003req\030\001 \001(\0132#.sg.UserTaskService.Use"
      "rTaskRequest\0222\n\004resp\030\002 \001(\0132$.sg.UserTask"
      "Service.UserTaskResponse\032n\n\017UserTaskRequ"
      "est\022$\n\003cmd\030\001 \002(\0162\027.sg.UserTaskService.CM"
      "D\022\017\n\007task_id\030\002 \001(\005\022\025\n\rcontent_index\030\003 \001("
      "\005\022\r\n\005times\030\005 \001(\005\032W\n\020UserTaskResponse\022\016\n\006"
      "result\030\001 \002(\005\022\027\n\005tasks\030\002 \003(\0132\010.sg.Task\022\032\n"
      "\006reward\030\003 \001(\0132\n.sg.Reward\"G\n\003CMD\022\t\n\005QUER"
      "Y\020\001\022\021\n\rTAKE_THE_TASK\020\002\022\017\n\013DO_THE_TASK\020\003\022"
      "\021\n\rCOMPLETE_TASK\020\004\"\226\003\n\025UserSystemTaskSer"
      "vice\022<\n\003req\030\001 \001(\0132/.sg.UserSystemTaskSer"
      "vice.UserSystemTaskRequest\022>\n\004resp\030\002 \001(\013"
      "20.sg.UserSystemTaskService.UserSystemTa"
      "skResponse\032h\n\025UserSystemTaskRequest\022*\n\003c"
      "md\030\001 \002(\0162\035.sg.UserSystemTaskService.CMD\022"
      "\017\n\007task_id\030\002 \001(\005\022\022\n\nquery_type\030\003 \001(\005\032c\n\026"
      "UserSystemTaskResponse\022\016\n\006result\030\001 \002(\005\022\035"
      "\n\005tasks\030\002 \003(\0132\016.sg.SystemTask\022\032\n\006reward\030"
      "\003 \001(\0132\n.sg.Reward\"0\n\003CMD\022\t\n\005QUERY\020\001\022\016\n\nG"
      "ET_REWARD\020\002\022\016\n\nRESET_TASK\020\003\"$\n\nTaskNotif"
      "y\022\026\n\004task\030\001 \002(\0132\010.sg.Task\"0\n\020SystemTaskN"
      "otify\022\034\n\004task\030\001 \002(\0132\016.sg.SystemTask*g\n\nT"
      "ASK_STATE\022\023\n\017TASK_STATE_LOCK\020\000\022\027\n\023TASK_S"
      "TATE_CAN_TAKE\020\001\022\024\n\020TASK_STATE_DOING\020\002\022\025\n"
      "\021TASK_STATE_FINISH\020\003*\214\001\n\021SYSTEM_TASK_STA"
      "TE\022\033\n\027SYSTEM_TASK_STATE_VALID\020\001\022\034\n\030SYSTE"
      "M_TASK_STATE_FINISH\020\002\022\035\n\031SYSTEM_TASK_STA"
      "TE_INVALID\020\003\022\035\n\031SYSTEM_TASK_STATE_WAITIN"
      "G\020\004B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Task.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Task_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* UserTaskService_CMD_descriptor() {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Task_2eproto::file_level_enum_descriptors[0];
}
bool UserTaskService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserTaskService_CMD UserTaskService::QUERY;
const UserTaskService_CMD UserTaskService::TAKE_THE_TASK;
const UserTaskService_CMD UserTaskService::DO_THE_TASK;
const UserTaskService_CMD UserTaskService::COMPLETE_TASK;
const UserTaskService_CMD UserTaskService::CMD_MIN;
const UserTaskService_CMD UserTaskService::CMD_MAX;
const int UserTaskService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserSystemTaskService_CMD_descriptor() {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Task_2eproto::file_level_enum_descriptors[1];
}
bool UserSystemTaskService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserSystemTaskService_CMD UserSystemTaskService::QUERY;
const UserSystemTaskService_CMD UserSystemTaskService::GET_REWARD;
const UserSystemTaskService_CMD UserSystemTaskService::RESET_TASK;
const UserSystemTaskService_CMD UserSystemTaskService::CMD_MIN;
const UserSystemTaskService_CMD UserSystemTaskService::CMD_MAX;
const int UserSystemTaskService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TASK_STATE_descriptor() {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Task_2eproto::file_level_enum_descriptors[2];
}
bool TASK_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SYSTEM_TASK_STATE_descriptor() {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Task_2eproto::file_level_enum_descriptors[3];
}
bool SYSTEM_TASK_STATE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Task_Content::InitAsDefaultInstance() {
}
void Task_Content::clear_des() {
  des_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task_Content::kIndexFieldNumber;
const int Task_Content::kTypeFieldNumber;
const int Task_Content::kDesFieldNumber;
const int Task_Content::kFinishValueFieldNumber;
const int Task_Content::kRequireValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task_Content::Task_Content()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_Task_Content.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Task_Content)
}
Task_Content::Task_Content(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  des_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_Task_Content.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Task_Content)
}
Task_Content::Task_Content(const Task_Content& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      des_(from.des_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_value_) -
    reinterpret_cast<char*>(&index_)) + sizeof(require_value_));
  // @@protoc_insertion_point(copy_constructor:sg.Task_Content)
}

void Task_Content::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_value_) -
      reinterpret_cast<char*>(&index_)) + sizeof(require_value_));
}

Task_Content::~Task_Content() {
  // @@protoc_insertion_point(destructor:sg.Task_Content)
  SharedDtor();
}

void Task_Content::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Task_Content::ArenaDtor(void* object) {
  Task_Content* _this = reinterpret_cast< Task_Content* >(object);
  (void)_this;
}
void Task_Content::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Task_Content::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Task_Content::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Task_Content& Task_Content::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_Task_Content.base);
  return *internal_default_instance();
}


void Task_Content::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Task_Content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  des_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_value_) -
        reinterpret_cast<char*>(&index_)) + sizeof(require_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Task_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Task_Content)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_string_int des = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_des()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 finish_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_finish_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 require_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_require_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Task_Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Task_Content)
  return false;
#undef DO_
}

void Task_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Task_Content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .sg.pb_pair_string_int des = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->des_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->des(static_cast<int>(i)),
      output);
  }

  // required int32 finish_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->finish_value(), output);
  }

  // required int32 require_value = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->require_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Task_Content)
}

::google::protobuf::uint8* Task_Content::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Task_Content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .sg.pb_pair_string_int des = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->des_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->des(static_cast<int>(i)), deterministic, target);
  }

  // required int32 finish_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->finish_value(), target);
  }

  // required int32 require_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->require_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Task_Content)
  return target;
}

size_t Task_Content::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Task_Content)
  size_t total_size = 0;

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_finish_value()) {
    // required int32 finish_value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->finish_value());
  }

  if (has_require_value()) {
    // required int32 require_value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require_value());
  }

  return total_size;
}
size_t Task_Content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Task_Content)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 finish_value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->finish_value());

    // required int32 require_value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.pb_pair_string_int des = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->des_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->des(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task_Content::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Task_Content)
  GOOGLE_DCHECK_NE(&from, this);
  const Task_Content* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Task_Content>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Task_Content)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Task_Content)
    MergeFrom(*source);
  }
}

void Task_Content::MergeFrom(const Task_Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Task_Content)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  des_.MergeFrom(from.des_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      finish_value_ = from.finish_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      require_value_ = from.require_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Task_Content::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Task_Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task_Content::CopyFrom(const Task_Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Task_Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task_Content::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->des())) return false;
  return true;
}

void Task_Content::Swap(Task_Content* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Task_Content* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Task_Content::UnsafeArenaSwap(Task_Content* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Task_Content::InternalSwap(Task_Content* other) {
  using std::swap;
  CastToBase(&des_)->InternalSwap(CastToBase(&other->des_));
  swap(index_, other->index_);
  swap(type_, other->type_);
  swap(finish_value_, other->finish_value_);
  swap(require_value_, other->require_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Task_Content::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Task::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kIdFieldNumber;
const int Task::kStateFieldNumber;
const int Task::kStepFieldNumber;
const int Task::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_Task.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Task)
}
Task::Task(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  content_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_Task.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Task)
}
Task::Task(const Task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      content_(from.content_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&id_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:sg.Task)
}

void Task::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&id_)) + sizeof(step_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:sg.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  (void)_this;
}
void Task::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Task& Task::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_Task.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&step_) -
        reinterpret_cast<char*>(&id_)) + sizeof(step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Task)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.TASK_STATE state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::TASK_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::TASK_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 step = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Task_Content content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .sg.TASK_STATE state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required int32 step = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step(), output);
  }

  // repeated .sg.Task_Content content = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->content(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .sg.TASK_STATE state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required int32 step = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step(), target);
  }

  // repeated .sg.Task_Content content = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->content(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Task)
  return target;
}

size_t Task::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Task)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required .sg.TASK_STATE state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_step()) {
    // required int32 step = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  return total_size;
}
size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required .sg.TASK_STATE state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required int32 step = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.Task_Content content = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->content_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->content(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      step_ = from.step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->content())) return false;
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Task* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Task::UnsafeArenaSwap(Task* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  using std::swap;
  CastToBase(&content_)->InternalSwap(CastToBase(&other->content_));
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(step_, other->step_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SystemTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemTask::kIdFieldNumber;
const int SystemTask::kTypeFieldNumber;
const int SystemTask::kStateFieldNumber;
const int SystemTask::kFinishValueFieldNumber;
const int SystemTask::kDeadlineFieldNumber;
const int SystemTask::kRequireValueFieldNumber;
const int SystemTask::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemTask::SystemTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_SystemTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SystemTask)
}
SystemTask::SystemTask(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_SystemTask.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SystemTask)
}
SystemTask::SystemTask(const SystemTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.SystemTask)
}

void SystemTask::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  state_ = 1;
}

SystemTask::~SystemTask() {
  // @@protoc_insertion_point(destructor:sg.SystemTask)
  SharedDtor();
}

void SystemTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SystemTask::ArenaDtor(void* object) {
  SystemTask* _this = reinterpret_cast< SystemTask* >(object);
  (void)_this;
}
void SystemTask::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SystemTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SystemTask::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemTask& SystemTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_SystemTask.base);
  return *internal_default_instance();
}


void SystemTask::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SystemTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SystemTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.SYSTEM_TASK_STATE state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::SYSTEM_TASK_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::SYSTEM_TASK_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 finish_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_finish_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finish_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 deadline = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_deadline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 require_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_require_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &require_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SystemTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SystemTask)
  return false;
#undef DO_
}

void SystemTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SystemTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required .sg.SYSTEM_TASK_STATE state = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required int64 finish_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->finish_value(), output);
  }

  // required sfixed64 deadline = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->deadline(), output);
  }

  // required int64 require_value = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->require_value(), output);
  }

  // optional sfixed64 timestamp = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SystemTask)
}

::google::protobuf::uint8* SystemTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SystemTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required .sg.SYSTEM_TASK_STATE state = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required int64 finish_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->finish_value(), target);
  }

  // required sfixed64 deadline = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->deadline(), target);
  }

  // required int64 require_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->require_value(), target);
  }

  // optional sfixed64 timestamp = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SystemTask)
  return target;
}

size_t SystemTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.SystemTask)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_finish_value()) {
    // required int64 finish_value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->finish_value());
  }

  if (has_deadline()) {
    // required sfixed64 deadline = 5;
    total_size += 1 + 8;
  }

  if (has_require_value()) {
    // required int64 require_value = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->require_value());
  }

  if (has_state()) {
    // required .sg.SYSTEM_TASK_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t SystemTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SystemTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int64 finish_value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->finish_value());

    // required sfixed64 deadline = 5;
    total_size += 1 + 8;

    // required int64 require_value = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->require_value());

    // required .sg.SYSTEM_TASK_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional sfixed64 timestamp = 7;
  if (has_timestamp()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SystemTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SystemTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SystemTask)
    MergeFrom(*source);
  }
}

void SystemTask::MergeFrom(const SystemTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SystemTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      finish_value_ = from.finish_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      deadline_ = from.deadline_;
    }
    if (cached_has_bits & 0x00000010u) {
      require_value_ = from.require_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SystemTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemTask::CopyFrom(const SystemTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SystemTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;
  return true;
}

void SystemTask::Swap(SystemTask* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SystemTask* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SystemTask::UnsafeArenaSwap(SystemTask* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SystemTask::InternalSwap(SystemTask* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(finish_value_, other->finish_value_);
  swap(deadline_, other->deadline_);
  swap(require_value_, other->require_value_);
  swap(timestamp_, other->timestamp_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SystemTask::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserTaskService_UserTaskRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTaskService_UserTaskRequest::kCmdFieldNumber;
const int UserTaskService_UserTaskRequest::kTaskIdFieldNumber;
const int UserTaskService_UserTaskRequest::kContentIndexFieldNumber;
const int UserTaskService_UserTaskRequest::kTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTaskService_UserTaskRequest::UserTaskService_UserTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_UserTaskService_UserTaskRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserTaskService.UserTaskRequest)
}
UserTaskService_UserTaskRequest::UserTaskService_UserTaskRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserTaskService_UserTaskRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserTaskService.UserTaskRequest)
}
UserTaskService_UserTaskRequest::UserTaskService_UserTaskRequest(const UserTaskService_UserTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserTaskService.UserTaskRequest)
}

void UserTaskService_UserTaskRequest::SharedCtor() {
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(times_));
  cmd_ = 1;
}

UserTaskService_UserTaskRequest::~UserTaskService_UserTaskRequest() {
  // @@protoc_insertion_point(destructor:sg.UserTaskService.UserTaskRequest)
  SharedDtor();
}

void UserTaskService_UserTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserTaskService_UserTaskRequest::ArenaDtor(void* object) {
  UserTaskService_UserTaskRequest* _this = reinterpret_cast< UserTaskService_UserTaskRequest* >(object);
  (void)_this;
}
void UserTaskService_UserTaskRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserTaskService_UserTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserTaskService_UserTaskRequest::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserTaskService_UserTaskRequest& UserTaskService_UserTaskRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserTaskService_UserTaskRequest.base);
  return *internal_default_instance();
}


void UserTaskService_UserTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserTaskService.UserTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&task_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_) -
        reinterpret_cast<char*>(&task_id_)) + sizeof(times_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserTaskService_UserTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserTaskService.UserTaskRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserTaskService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserTaskService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserTaskService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 task_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_task_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 content_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_content_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 times = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserTaskService.UserTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserTaskService.UserTaskRequest)
  return false;
#undef DO_
}

void UserTaskService_UserTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserTaskService.UserTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserTaskService.CMD cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 task_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_id(), output);
  }

  // optional int32 content_index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->content_index(), output);
  }

  // optional int32 times = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserTaskService.UserTaskRequest)
}

::google::protobuf::uint8* UserTaskService_UserTaskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserTaskService.UserTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserTaskService.CMD cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 task_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_id(), target);
  }

  // optional int32 content_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->content_index(), target);
  }

  // optional int32 times = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserTaskService.UserTaskRequest)
  return target;
}

size_t UserTaskService_UserTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserTaskService.UserTaskRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserTaskService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // optional int32 content_index = 3;
    if (has_content_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_index());
    }

    // optional int32 times = 5;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTaskService_UserTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserTaskService.UserTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTaskService_UserTaskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserTaskService_UserTaskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserTaskService.UserTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserTaskService.UserTaskRequest)
    MergeFrom(*source);
  }
}

void UserTaskService_UserTaskRequest::MergeFrom(const UserTaskService_UserTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserTaskService.UserTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      task_id_ = from.task_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      content_index_ = from.content_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      times_ = from.times_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserTaskService_UserTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserTaskService.UserTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTaskService_UserTaskRequest::CopyFrom(const UserTaskService_UserTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserTaskService.UserTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTaskService_UserTaskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void UserTaskService_UserTaskRequest::Swap(UserTaskService_UserTaskRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserTaskService_UserTaskRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserTaskService_UserTaskRequest::UnsafeArenaSwap(UserTaskService_UserTaskRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserTaskService_UserTaskRequest::InternalSwap(UserTaskService_UserTaskRequest* other) {
  using std::swap;
  swap(task_id_, other->task_id_);
  swap(content_index_, other->content_index_);
  swap(times_, other->times_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserTaskService_UserTaskRequest::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserTaskService_UserTaskResponse::InitAsDefaultInstance() {
  ::sg::_UserTaskService_UserTaskResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void UserTaskService_UserTaskResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserTaskService.UserTaskResponse.reward)
}
void UserTaskService_UserTaskResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTaskService_UserTaskResponse::kResultFieldNumber;
const int UserTaskService_UserTaskResponse::kTasksFieldNumber;
const int UserTaskService_UserTaskResponse::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTaskService_UserTaskResponse::UserTaskService_UserTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_UserTaskService_UserTaskResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserTaskService.UserTaskResponse)
}
UserTaskService_UserTaskResponse::UserTaskService_UserTaskResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tasks_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserTaskService_UserTaskResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserTaskService.UserTaskResponse)
}
UserTaskService_UserTaskResponse::UserTaskService_UserTaskResponse(const UserTaskService_UserTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.UserTaskService.UserTaskResponse)
}

void UserTaskService_UserTaskResponse::SharedCtor() {
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(result_));
}

UserTaskService_UserTaskResponse::~UserTaskService_UserTaskResponse() {
  // @@protoc_insertion_point(destructor:sg.UserTaskService.UserTaskResponse)
  SharedDtor();
}

void UserTaskService_UserTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete reward_;
}

void UserTaskService_UserTaskResponse::ArenaDtor(void* object) {
  UserTaskService_UserTaskResponse* _this = reinterpret_cast< UserTaskService_UserTaskResponse* >(object);
  (void)_this;
}
void UserTaskService_UserTaskResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserTaskService_UserTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserTaskService_UserTaskResponse::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserTaskService_UserTaskResponse& UserTaskService_UserTaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserTaskService_UserTaskResponse.base);
  return *internal_default_instance();
}


void UserTaskService_UserTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserTaskService.UserTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != NULL);
    reward_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserTaskService_UserTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserTaskService.UserTaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Task tasks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserTaskService.UserTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserTaskService.UserTaskResponse)
  return false;
#undef DO_
}

void UserTaskService_UserTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserTaskService.UserTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tasks(static_cast<int>(i)),
      output);
  }

  // optional .sg.Reward reward = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserTaskService.UserTaskResponse)
}

::google::protobuf::uint8* UserTaskService_UserTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserTaskService.UserTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tasks(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.Reward reward = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserTaskService.UserTaskResponse)
  return target;
}

size_t UserTaskService_UserTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserTaskService.UserTaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.Task tasks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tasks(static_cast<int>(i)));
    }
  }

  // optional .sg.Reward reward = 3;
  if (has_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTaskService_UserTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserTaskService.UserTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTaskService_UserTaskResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserTaskService_UserTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserTaskService.UserTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserTaskService.UserTaskResponse)
    MergeFrom(*source);
  }
}

void UserTaskService_UserTaskResponse::MergeFrom(const UserTaskService_UserTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserTaskService.UserTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserTaskService_UserTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserTaskService.UserTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTaskService_UserTaskResponse::CopyFrom(const UserTaskService_UserTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserTaskService.UserTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTaskService_UserTaskResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tasks())) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void UserTaskService_UserTaskResponse::Swap(UserTaskService_UserTaskResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserTaskService_UserTaskResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserTaskService_UserTaskResponse::UnsafeArenaSwap(UserTaskService_UserTaskResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserTaskService_UserTaskResponse::InternalSwap(UserTaskService_UserTaskResponse* other) {
  using std::swap;
  CastToBase(&tasks_)->InternalSwap(CastToBase(&other->tasks_));
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserTaskService_UserTaskResponse::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserTaskService::InitAsDefaultInstance() {
  ::sg::_UserTaskService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserTaskService_UserTaskRequest*>(
      ::sg::UserTaskService_UserTaskRequest::internal_default_instance());
  ::sg::_UserTaskService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserTaskService_UserTaskResponse*>(
      ::sg::UserTaskService_UserTaskResponse::internal_default_instance());
}
void UserTaskService::unsafe_arena_set_allocated_req(
    ::sg::UserTaskService_UserTaskRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserTaskService.req)
}
void UserTaskService::unsafe_arena_set_allocated_resp(
    ::sg::UserTaskService_UserTaskResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserTaskService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTaskService::kReqFieldNumber;
const int UserTaskService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTaskService::UserTaskService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_UserTaskService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserTaskService)
}
UserTaskService::UserTaskService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserTaskService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserTaskService)
}
UserTaskService::UserTaskService(const UserTaskService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserTaskService_UserTaskRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserTaskService_UserTaskResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserTaskService)
}

void UserTaskService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserTaskService::~UserTaskService() {
  // @@protoc_insertion_point(destructor:sg.UserTaskService)
  SharedDtor();
}

void UserTaskService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserTaskService::ArenaDtor(void* object) {
  UserTaskService* _this = reinterpret_cast< UserTaskService* >(object);
  (void)_this;
}
void UserTaskService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserTaskService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserTaskService::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserTaskService& UserTaskService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserTaskService.base);
  return *internal_default_instance();
}


void UserTaskService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserTaskService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserTaskService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserTaskService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserTaskService.UserTaskRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserTaskService.UserTaskResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserTaskService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserTaskService)
  return false;
#undef DO_
}

void UserTaskService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserTaskService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserTaskService.UserTaskRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserTaskService.UserTaskResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserTaskService)
}

::google::protobuf::uint8* UserTaskService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserTaskService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserTaskService.UserTaskRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserTaskService.UserTaskResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserTaskService)
  return target;
}

size_t UserTaskService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserTaskService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserTaskService.UserTaskRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserTaskService.UserTaskResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTaskService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserTaskService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTaskService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserTaskService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserTaskService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserTaskService)
    MergeFrom(*source);
  }
}

void UserTaskService::MergeFrom(const UserTaskService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserTaskService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserTaskService_UserTaskRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserTaskService_UserTaskResponse::MergeFrom(from.resp());
    }
  }
}

void UserTaskService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserTaskService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTaskService::CopyFrom(const UserTaskService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserTaskService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTaskService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserTaskService::Swap(UserTaskService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserTaskService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserTaskService::UnsafeArenaSwap(UserTaskService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserTaskService::InternalSwap(UserTaskService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserTaskService::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserSystemTaskService_UserSystemTaskRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSystemTaskService_UserSystemTaskRequest::kCmdFieldNumber;
const int UserSystemTaskService_UserSystemTaskRequest::kTaskIdFieldNumber;
const int UserSystemTaskService_UserSystemTaskRequest::kQueryTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSystemTaskService_UserSystemTaskRequest::UserSystemTaskService_UserSystemTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_UserSystemTaskService_UserSystemTaskRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserSystemTaskService.UserSystemTaskRequest)
}
UserSystemTaskService_UserSystemTaskRequest::UserSystemTaskService_UserSystemTaskRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserSystemTaskService_UserSystemTaskRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserSystemTaskService.UserSystemTaskRequest)
}
UserSystemTaskService_UserSystemTaskRequest::UserSystemTaskService_UserSystemTaskRequest(const UserSystemTaskService_UserSystemTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserSystemTaskService.UserSystemTaskRequest)
}

void UserSystemTaskService_UserSystemTaskRequest::SharedCtor() {
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_type_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(query_type_));
  cmd_ = 1;
}

UserSystemTaskService_UserSystemTaskRequest::~UserSystemTaskService_UserSystemTaskRequest() {
  // @@protoc_insertion_point(destructor:sg.UserSystemTaskService.UserSystemTaskRequest)
  SharedDtor();
}

void UserSystemTaskService_UserSystemTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserSystemTaskService_UserSystemTaskRequest::ArenaDtor(void* object) {
  UserSystemTaskService_UserSystemTaskRequest* _this = reinterpret_cast< UserSystemTaskService_UserSystemTaskRequest* >(object);
  (void)_this;
}
void UserSystemTaskService_UserSystemTaskRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserSystemTaskService_UserSystemTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserSystemTaskService_UserSystemTaskRequest::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserSystemTaskService_UserSystemTaskRequest& UserSystemTaskService_UserSystemTaskRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserSystemTaskService_UserSystemTaskRequest.base);
  return *internal_default_instance();
}


void UserSystemTaskService_UserSystemTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserSystemTaskService.UserSystemTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&task_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_type_) -
        reinterpret_cast<char*>(&task_id_)) + sizeof(query_type_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserSystemTaskService_UserSystemTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserSystemTaskService.UserSystemTaskRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserSystemTaskService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserSystemTaskService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserSystemTaskService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 task_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_task_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 query_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_query_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserSystemTaskService.UserSystemTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserSystemTaskService.UserSystemTaskRequest)
  return false;
#undef DO_
}

void UserSystemTaskService_UserSystemTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserSystemTaskService.UserSystemTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserSystemTaskService.CMD cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 task_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_id(), output);
  }

  // optional int32 query_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->query_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserSystemTaskService.UserSystemTaskRequest)
}

::google::protobuf::uint8* UserSystemTaskService_UserSystemTaskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserSystemTaskService.UserSystemTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserSystemTaskService.CMD cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 task_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_id(), target);
  }

  // optional int32 query_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->query_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserSystemTaskService.UserSystemTaskRequest)
  return target;
}

size_t UserSystemTaskService_UserSystemTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserSystemTaskService.UserSystemTaskRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserSystemTaskService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // optional int32 query_type = 3;
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->query_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSystemTaskService_UserSystemTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserSystemTaskService.UserSystemTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSystemTaskService_UserSystemTaskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSystemTaskService_UserSystemTaskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserSystemTaskService.UserSystemTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserSystemTaskService.UserSystemTaskRequest)
    MergeFrom(*source);
  }
}

void UserSystemTaskService_UserSystemTaskRequest::MergeFrom(const UserSystemTaskService_UserSystemTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserSystemTaskService.UserSystemTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      task_id_ = from.task_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      query_type_ = from.query_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserSystemTaskService_UserSystemTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserSystemTaskService.UserSystemTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSystemTaskService_UserSystemTaskRequest::CopyFrom(const UserSystemTaskService_UserSystemTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserSystemTaskService.UserSystemTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSystemTaskService_UserSystemTaskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void UserSystemTaskService_UserSystemTaskRequest::Swap(UserSystemTaskService_UserSystemTaskRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserSystemTaskService_UserSystemTaskRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserSystemTaskService_UserSystemTaskRequest::UnsafeArenaSwap(UserSystemTaskService_UserSystemTaskRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserSystemTaskService_UserSystemTaskRequest::InternalSwap(UserSystemTaskService_UserSystemTaskRequest* other) {
  using std::swap;
  swap(task_id_, other->task_id_);
  swap(query_type_, other->query_type_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserSystemTaskService_UserSystemTaskRequest::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserSystemTaskService_UserSystemTaskResponse::InitAsDefaultInstance() {
  ::sg::_UserSystemTaskService_UserSystemTaskResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void UserSystemTaskService_UserSystemTaskResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserSystemTaskService.UserSystemTaskResponse.reward)
}
void UserSystemTaskService_UserSystemTaskResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSystemTaskService_UserSystemTaskResponse::kResultFieldNumber;
const int UserSystemTaskService_UserSystemTaskResponse::kTasksFieldNumber;
const int UserSystemTaskService_UserSystemTaskResponse::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSystemTaskService_UserSystemTaskResponse::UserSystemTaskService_UserSystemTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_UserSystemTaskService_UserSystemTaskResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserSystemTaskService.UserSystemTaskResponse)
}
UserSystemTaskService_UserSystemTaskResponse::UserSystemTaskService_UserSystemTaskResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tasks_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserSystemTaskService_UserSystemTaskResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserSystemTaskService.UserSystemTaskResponse)
}
UserSystemTaskService_UserSystemTaskResponse::UserSystemTaskService_UserSystemTaskResponse(const UserSystemTaskService_UserSystemTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.UserSystemTaskService.UserSystemTaskResponse)
}

void UserSystemTaskService_UserSystemTaskResponse::SharedCtor() {
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(result_));
}

UserSystemTaskService_UserSystemTaskResponse::~UserSystemTaskService_UserSystemTaskResponse() {
  // @@protoc_insertion_point(destructor:sg.UserSystemTaskService.UserSystemTaskResponse)
  SharedDtor();
}

void UserSystemTaskService_UserSystemTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete reward_;
}

void UserSystemTaskService_UserSystemTaskResponse::ArenaDtor(void* object) {
  UserSystemTaskService_UserSystemTaskResponse* _this = reinterpret_cast< UserSystemTaskService_UserSystemTaskResponse* >(object);
  (void)_this;
}
void UserSystemTaskService_UserSystemTaskResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserSystemTaskService_UserSystemTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserSystemTaskService_UserSystemTaskResponse::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserSystemTaskService_UserSystemTaskResponse& UserSystemTaskService_UserSystemTaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserSystemTaskService_UserSystemTaskResponse.base);
  return *internal_default_instance();
}


void UserSystemTaskService_UserSystemTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserSystemTaskService.UserSystemTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != NULL);
    reward_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserSystemTaskService_UserSystemTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserSystemTaskService.UserSystemTaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SystemTask tasks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserSystemTaskService.UserSystemTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserSystemTaskService.UserSystemTaskResponse)
  return false;
#undef DO_
}

void UserSystemTaskService_UserSystemTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserSystemTaskService.UserSystemTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.SystemTask tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tasks(static_cast<int>(i)),
      output);
  }

  // optional .sg.Reward reward = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserSystemTaskService.UserSystemTaskResponse)
}

::google::protobuf::uint8* UserSystemTaskService_UserSystemTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserSystemTaskService.UserSystemTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.SystemTask tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tasks(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.Reward reward = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserSystemTaskService.UserSystemTaskResponse)
  return target;
}

size_t UserSystemTaskService_UserSystemTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserSystemTaskService.UserSystemTaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.SystemTask tasks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tasks(static_cast<int>(i)));
    }
  }

  // optional .sg.Reward reward = 3;
  if (has_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSystemTaskService_UserSystemTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserSystemTaskService.UserSystemTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSystemTaskService_UserSystemTaskResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSystemTaskService_UserSystemTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserSystemTaskService.UserSystemTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserSystemTaskService.UserSystemTaskResponse)
    MergeFrom(*source);
  }
}

void UserSystemTaskService_UserSystemTaskResponse::MergeFrom(const UserSystemTaskService_UserSystemTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserSystemTaskService.UserSystemTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserSystemTaskService_UserSystemTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserSystemTaskService.UserSystemTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSystemTaskService_UserSystemTaskResponse::CopyFrom(const UserSystemTaskService_UserSystemTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserSystemTaskService.UserSystemTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSystemTaskService_UserSystemTaskResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tasks())) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void UserSystemTaskService_UserSystemTaskResponse::Swap(UserSystemTaskService_UserSystemTaskResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserSystemTaskService_UserSystemTaskResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserSystemTaskService_UserSystemTaskResponse::UnsafeArenaSwap(UserSystemTaskService_UserSystemTaskResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserSystemTaskService_UserSystemTaskResponse::InternalSwap(UserSystemTaskService_UserSystemTaskResponse* other) {
  using std::swap;
  CastToBase(&tasks_)->InternalSwap(CastToBase(&other->tasks_));
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserSystemTaskService_UserSystemTaskResponse::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserSystemTaskService::InitAsDefaultInstance() {
  ::sg::_UserSystemTaskService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserSystemTaskService_UserSystemTaskRequest*>(
      ::sg::UserSystemTaskService_UserSystemTaskRequest::internal_default_instance());
  ::sg::_UserSystemTaskService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserSystemTaskService_UserSystemTaskResponse*>(
      ::sg::UserSystemTaskService_UserSystemTaskResponse::internal_default_instance());
}
void UserSystemTaskService::unsafe_arena_set_allocated_req(
    ::sg::UserSystemTaskService_UserSystemTaskRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserSystemTaskService.req)
}
void UserSystemTaskService::unsafe_arena_set_allocated_resp(
    ::sg::UserSystemTaskService_UserSystemTaskResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserSystemTaskService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSystemTaskService::kReqFieldNumber;
const int UserSystemTaskService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSystemTaskService::UserSystemTaskService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_UserSystemTaskService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserSystemTaskService)
}
UserSystemTaskService::UserSystemTaskService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserSystemTaskService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserSystemTaskService)
}
UserSystemTaskService::UserSystemTaskService(const UserSystemTaskService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserSystemTaskService_UserSystemTaskRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserSystemTaskService_UserSystemTaskResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserSystemTaskService)
}

void UserSystemTaskService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserSystemTaskService::~UserSystemTaskService() {
  // @@protoc_insertion_point(destructor:sg.UserSystemTaskService)
  SharedDtor();
}

void UserSystemTaskService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserSystemTaskService::ArenaDtor(void* object) {
  UserSystemTaskService* _this = reinterpret_cast< UserSystemTaskService* >(object);
  (void)_this;
}
void UserSystemTaskService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserSystemTaskService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserSystemTaskService::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserSystemTaskService& UserSystemTaskService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_UserSystemTaskService.base);
  return *internal_default_instance();
}


void UserSystemTaskService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserSystemTaskService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserSystemTaskService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserSystemTaskService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserSystemTaskService.UserSystemTaskRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserSystemTaskService.UserSystemTaskResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserSystemTaskService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserSystemTaskService)
  return false;
#undef DO_
}

void UserSystemTaskService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserSystemTaskService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserSystemTaskService.UserSystemTaskRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserSystemTaskService.UserSystemTaskResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserSystemTaskService)
}

::google::protobuf::uint8* UserSystemTaskService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserSystemTaskService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserSystemTaskService.UserSystemTaskRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserSystemTaskService.UserSystemTaskResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserSystemTaskService)
  return target;
}

size_t UserSystemTaskService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserSystemTaskService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserSystemTaskService.UserSystemTaskRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserSystemTaskService.UserSystemTaskResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSystemTaskService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserSystemTaskService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSystemTaskService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSystemTaskService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserSystemTaskService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserSystemTaskService)
    MergeFrom(*source);
  }
}

void UserSystemTaskService::MergeFrom(const UserSystemTaskService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserSystemTaskService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserSystemTaskService_UserSystemTaskRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserSystemTaskService_UserSystemTaskResponse::MergeFrom(from.resp());
    }
  }
}

void UserSystemTaskService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserSystemTaskService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSystemTaskService::CopyFrom(const UserSystemTaskService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserSystemTaskService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSystemTaskService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserSystemTaskService::Swap(UserSystemTaskService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserSystemTaskService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserSystemTaskService::UnsafeArenaSwap(UserSystemTaskService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserSystemTaskService::InternalSwap(UserSystemTaskService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserSystemTaskService::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskNotify::InitAsDefaultInstance() {
  ::sg::_TaskNotify_default_instance_._instance.get_mutable()->task_ = const_cast< ::sg::Task*>(
      ::sg::Task::internal_default_instance());
}
void TaskNotify::unsafe_arena_set_allocated_task(
    ::sg::Task* task) {
  if (GetArenaNoVirtual() == NULL) {
    delete task_;
  }
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.TaskNotify.task)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskNotify::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskNotify::TaskNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_TaskNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.TaskNotify)
}
TaskNotify::TaskNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_TaskNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.TaskNotify)
}
TaskNotify::TaskNotify(const TaskNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task()) {
    task_ = new ::sg::Task(*from.task_);
  } else {
    task_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.TaskNotify)
}

void TaskNotify::SharedCtor() {
  task_ = NULL;
}

TaskNotify::~TaskNotify() {
  // @@protoc_insertion_point(destructor:sg.TaskNotify)
  SharedDtor();
}

void TaskNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete task_;
}

void TaskNotify::ArenaDtor(void* object) {
  TaskNotify* _this = reinterpret_cast< TaskNotify* >(object);
  (void)_this;
}
void TaskNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TaskNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TaskNotify::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskNotify& TaskNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_TaskNotify.base);
  return *internal_default_instance();
}


void TaskNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.TaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(task_ != NULL);
    task_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.TaskNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.Task task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.TaskNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.TaskNotify)
  return false;
#undef DO_
}

void TaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.TaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Task task = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_task(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.TaskNotify)
}

::google::protobuf::uint8* TaskNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.TaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Task task = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_task(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.TaskNotify)
  return target;
}

size_t TaskNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.TaskNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.Task task = 1;
  if (has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.TaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.TaskNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.TaskNotify)
    MergeFrom(*source);
  }
}

void TaskNotify::MergeFrom(const TaskNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.TaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    mutable_task()->::sg::Task::MergeFrom(from.task());
  }
}

void TaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.TaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskNotify::CopyFrom(const TaskNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.TaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_task()) {
    if (!this->task_->IsInitialized()) return false;
  }
  return true;
}

void TaskNotify::Swap(TaskNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TaskNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TaskNotify::UnsafeArenaSwap(TaskNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TaskNotify::InternalSwap(TaskNotify* other) {
  using std::swap;
  swap(task_, other->task_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaskNotify::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SystemTaskNotify::InitAsDefaultInstance() {
  ::sg::_SystemTaskNotify_default_instance_._instance.get_mutable()->task_ = const_cast< ::sg::SystemTask*>(
      ::sg::SystemTask::internal_default_instance());
}
void SystemTaskNotify::unsafe_arena_set_allocated_task(
    ::sg::SystemTask* task) {
  if (GetArenaNoVirtual() == NULL) {
    delete task_;
  }
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.SystemTaskNotify.task)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemTaskNotify::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemTaskNotify::SystemTaskNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Task_2eproto::scc_info_SystemTaskNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SystemTaskNotify)
}
SystemTaskNotify::SystemTaskNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_SystemTaskNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SystemTaskNotify)
}
SystemTaskNotify::SystemTaskNotify(const SystemTaskNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task()) {
    task_ = new ::sg::SystemTask(*from.task_);
  } else {
    task_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.SystemTaskNotify)
}

void SystemTaskNotify::SharedCtor() {
  task_ = NULL;
}

SystemTaskNotify::~SystemTaskNotify() {
  // @@protoc_insertion_point(destructor:sg.SystemTaskNotify)
  SharedDtor();
}

void SystemTaskNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete task_;
}

void SystemTaskNotify::ArenaDtor(void* object) {
  SystemTaskNotify* _this = reinterpret_cast< SystemTaskNotify* >(object);
  (void)_this;
}
void SystemTaskNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SystemTaskNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SystemTaskNotify::descriptor() {
  ::protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemTaskNotify& SystemTaskNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Task_2eproto::scc_info_SystemTaskNotify.base);
  return *internal_default_instance();
}


void SystemTaskNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SystemTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(task_ != NULL);
    task_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemTaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SystemTaskNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.SystemTask task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SystemTaskNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SystemTaskNotify)
  return false;
#undef DO_
}

void SystemTaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SystemTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.SystemTask task = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_task(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SystemTaskNotify)
}

::google::protobuf::uint8* SystemTaskNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SystemTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.SystemTask task = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_task(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SystemTaskNotify)
  return target;
}

size_t SystemTaskNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SystemTaskNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.SystemTask task = 1;
  if (has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemTaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SystemTaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemTaskNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemTaskNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SystemTaskNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SystemTaskNotify)
    MergeFrom(*source);
  }
}

void SystemTaskNotify::MergeFrom(const SystemTaskNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SystemTaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    mutable_task()->::sg::SystemTask::MergeFrom(from.task());
  }
}

void SystemTaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SystemTaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemTaskNotify::CopyFrom(const SystemTaskNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SystemTaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemTaskNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_task()) {
    if (!this->task_->IsInitialized()) return false;
  }
  return true;
}

void SystemTaskNotify::Swap(SystemTaskNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SystemTaskNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SystemTaskNotify::UnsafeArenaSwap(SystemTaskNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SystemTaskNotify::InternalSwap(SystemTaskNotify* other) {
  using std::swap;
  swap(task_, other->task_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SystemTaskNotify::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Task_Content* Arena::CreateMaybeMessage< ::sg::Task_Content >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Task_Content >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Task* Arena::CreateMaybeMessage< ::sg::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Task >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SystemTask* Arena::CreateMaybeMessage< ::sg::SystemTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SystemTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserTaskService_UserTaskRequest* Arena::CreateMaybeMessage< ::sg::UserTaskService_UserTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserTaskService_UserTaskRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserTaskService_UserTaskResponse* Arena::CreateMaybeMessage< ::sg::UserTaskService_UserTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserTaskService_UserTaskResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserTaskService* Arena::CreateMaybeMessage< ::sg::UserTaskService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserTaskService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserSystemTaskService_UserSystemTaskRequest* Arena::CreateMaybeMessage< ::sg::UserSystemTaskService_UserSystemTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserSystemTaskService_UserSystemTaskRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserSystemTaskService_UserSystemTaskResponse* Arena::CreateMaybeMessage< ::sg::UserSystemTaskService_UserSystemTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserSystemTaskService_UserSystemTaskResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserSystemTaskService* Arena::CreateMaybeMessage< ::sg::UserSystemTaskService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserSystemTaskService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::TaskNotify* Arena::CreateMaybeMessage< ::sg::TaskNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::TaskNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SystemTaskNotify* Arena::CreateMaybeMessage< ::sg::SystemTaskNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SystemTaskNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
