// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserFacility.proto

#include "UserFacility.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegionState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_int;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Facility;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_UserFacility_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserFacility_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserFacilityService_UserFacilityRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserFacility_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_UserFacilityService_UserFacilityResponse;
}  // namespace protobuf_UserFacility_2eproto
namespace sg {
class UserFacilityService_UserFacilityRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserFacilityService_UserFacilityRequest>
      _instance;
} _UserFacilityService_UserFacilityRequest_default_instance_;
class UserFacilityService_UserFacilityResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserFacilityService_UserFacilityResponse>
      _instance;
} _UserFacilityService_UserFacilityResponse_default_instance_;
class UserFacilityServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserFacilityService>
      _instance;
} _UserFacilityService_default_instance_;
class FacilityContainAddNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FacilityContainAddNotify>
      _instance;
} _FacilityContainAddNotify_default_instance_;
class FacilityLevelUpNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FacilityLevelUpNotify>
      _instance;
} _FacilityLevelUpNotify_default_instance_;
}  // namespace sg
namespace protobuf_UserFacility_2eproto {
static void InitDefaultsUserFacilityService_UserFacilityRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserFacilityService_UserFacilityRequest_default_instance_;
    new (ptr) ::sg::UserFacilityService_UserFacilityRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserFacilityService_UserFacilityRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserFacilityService_UserFacilityRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserFacilityService_UserFacilityRequest}, {
      &protobuf_BaseStruct_2eproto::scc_info_Facility.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,}};

static void InitDefaultsUserFacilityService_UserFacilityResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserFacilityService_UserFacilityResponse_default_instance_;
    new (ptr) ::sg::UserFacilityService_UserFacilityResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserFacilityService_UserFacilityResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UserFacilityService_UserFacilityResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUserFacilityService_UserFacilityResponse}, {
      &protobuf_BaseStruct_2eproto::scc_info_Facility.base,
      &protobuf_BaseStruct_2eproto::scc_info_RegionState.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsUserFacilityService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserFacilityService_default_instance_;
    new (ptr) ::sg::UserFacilityService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserFacilityService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserFacilityService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserFacilityService}, {
      &protobuf_UserFacility_2eproto::scc_info_UserFacilityService_UserFacilityRequest.base,
      &protobuf_UserFacility_2eproto::scc_info_UserFacilityService_UserFacilityResponse.base,}};

static void InitDefaultsFacilityContainAddNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FacilityContainAddNotify_default_instance_;
    new (ptr) ::sg::FacilityContainAddNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FacilityContainAddNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FacilityContainAddNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFacilityContainAddNotify}, {
      &protobuf_BaseStruct_2eproto::scc_info_Item.base,}};

static void InitDefaultsFacilityLevelUpNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FacilityLevelUpNotify_default_instance_;
    new (ptr) ::sg::FacilityLevelUpNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FacilityLevelUpNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FacilityLevelUpNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFacilityLevelUpNotify}, {
      &protobuf_BaseStruct_2eproto::scc_info_Facility.base,
      &protobuf_BaseStruct_2eproto::scc_info_RegionState.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserFacilityService_UserFacilityRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserFacilityService_UserFacilityResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserFacilityService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FacilityContainAddNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FacilityLevelUpNotify.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, facilitys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, device_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, facility_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, food_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityRequest, slot_id_),
  5,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityResponse, facilitys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityResponse, formula_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityResponse, ship_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityResponse, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService_UserFacilityResponse, cost_diamond_),
  2,
  ~0u,
  ~0u,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserFacilityService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FacilityContainAddNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FacilityContainAddNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FacilityContainAddNotify, facility_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FacilityContainAddNotify, items_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FacilityLevelUpNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FacilityLevelUpNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FacilityLevelUpNotify, facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FacilityLevelUpNotify, formula_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FacilityLevelUpNotify, ship_state_),
  0,
  ~0u,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::sg::UserFacilityService_UserFacilityRequest)},
  { 21, 32, sizeof(::sg::UserFacilityService_UserFacilityResponse)},
  { 38, 45, sizeof(::sg::UserFacilityService)},
  { 47, 54, sizeof(::sg::FacilityContainAddNotify)},
  { 56, 64, sizeof(::sg::FacilityLevelUpNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserFacilityService_UserFacilityRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserFacilityService_UserFacilityResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserFacilityService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FacilityContainAddNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FacilityLevelUpNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "UserFacility.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022UserFacility.proto\022\002sg\032\020BaseStruct.pro"
      "to\"\252\006\n\023UserFacilityService\0228\n\003req\030\001 \001(\0132"
      "+.sg.UserFacilityService.UserFacilityReq"
      "uest\022:\n\004resp\030\002 \001(\0132,.sg.UserFacilityServ"
      "ice.UserFacilityResponse\032\361\001\n\023UserFacilit"
      "yRequest\0221\n\003cmd\030\001 \002(\0162$.sg.UserFacilityS"
      "ervice.FACILITY_CMD\022\037\n\tfacilitys\030\002 \003(\0132\014"
      ".sg.Facility\022\021\n\tdevice_id\030\003 \001(\005\022\025\n\rdevic"
      "e_typeid\030\004 \001(\005\022\016\n\006region\030\005 \001(\005\022\023\n\013facili"
      "ty_id\030\006 \001(\005\022&\n\tfood_list\030\007 \003(\0132\023.sg.pb_p"
      "air_int_int\022\017\n\007slot_id\030\010 \001(\005\032\266\001\n\024UserFac"
      "ilityResponse\022\016\n\006result\030\001 \002(\005\022\037\n\tfacilit"
      "ys\030\002 \003(\0132\014.sg.Facility\022\026\n\016formula_unlock"
      "\030\003 \003(\005\022#\n\nship_state\030\004 \001(\0132\017.sg.RegionSt"
      "ate\022\032\n\006reward\030\005 \001(\0132\n.sg.Reward\022\024\n\014cost_"
      "diamond\030\006 \001(\005\"\357\001\n\014FACILITY_CMD\022\t\n\005QUERY\020"
      "\001\022\013\n\007PUTDOWN\020\002\022\n\n\006REMOVE\020\003\022\020\n\014CHANGE_STY"
      "LE\020\004\022\013\n\007REPLACE\020\005\022\021\n\rCREATE_DEVICE\020\006\022\023\n\017"
      "DEVICE_LEVEL_UP\020\007\022\017\n\013GET_CONTAIN\020\010\022\030\n\024US"
      "E_SPECIAL_PROPERTY\020\t\022\014\n\010ADD_FOOD\020\n\022\r\n\tQU"
      "ERY_ONE\020\013\022\017\n\013UNLOCK_SLOT\020\014\022\017\n\013FAST_FINIS"
      "H\020\r\022\n\n\006CANCEL\020\016\"H\n\030FacilityContainAddNot"
      "ify\022\023\n\013facility_id\030\001 \002(\005\022\027\n\005items\030\002 \003(\0132"
      "\010.sg.Item\"t\n\025FacilityLevelUpNotify\022\036\n\010fa"
      "cility\030\001 \002(\0132\014.sg.Facility\022\026\n\016formula_un"
      "lock\030\002 \003(\005\022#\n\nship_state\030\004 \001(\0132\017.sg.Regi"
      "onStateB\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1052);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserFacility.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_UserFacility_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* UserFacilityService_FACILITY_CMD_descriptor() {
  protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserFacility_2eproto::file_level_enum_descriptors[0];
}
bool UserFacilityService_FACILITY_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserFacilityService_FACILITY_CMD UserFacilityService::QUERY;
const UserFacilityService_FACILITY_CMD UserFacilityService::PUTDOWN;
const UserFacilityService_FACILITY_CMD UserFacilityService::REMOVE;
const UserFacilityService_FACILITY_CMD UserFacilityService::CHANGE_STYLE;
const UserFacilityService_FACILITY_CMD UserFacilityService::REPLACE;
const UserFacilityService_FACILITY_CMD UserFacilityService::CREATE_DEVICE;
const UserFacilityService_FACILITY_CMD UserFacilityService::DEVICE_LEVEL_UP;
const UserFacilityService_FACILITY_CMD UserFacilityService::GET_CONTAIN;
const UserFacilityService_FACILITY_CMD UserFacilityService::USE_SPECIAL_PROPERTY;
const UserFacilityService_FACILITY_CMD UserFacilityService::ADD_FOOD;
const UserFacilityService_FACILITY_CMD UserFacilityService::QUERY_ONE;
const UserFacilityService_FACILITY_CMD UserFacilityService::UNLOCK_SLOT;
const UserFacilityService_FACILITY_CMD UserFacilityService::FAST_FINISH;
const UserFacilityService_FACILITY_CMD UserFacilityService::CANCEL;
const UserFacilityService_FACILITY_CMD UserFacilityService::FACILITY_CMD_MIN;
const UserFacilityService_FACILITY_CMD UserFacilityService::FACILITY_CMD_MAX;
const int UserFacilityService::FACILITY_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void UserFacilityService_UserFacilityRequest::InitAsDefaultInstance() {
}
void UserFacilityService_UserFacilityRequest::clear_facilitys() {
  facilitys_.Clear();
}
void UserFacilityService_UserFacilityRequest::clear_food_list() {
  food_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserFacilityService_UserFacilityRequest::kCmdFieldNumber;
const int UserFacilityService_UserFacilityRequest::kFacilitysFieldNumber;
const int UserFacilityService_UserFacilityRequest::kDeviceIdFieldNumber;
const int UserFacilityService_UserFacilityRequest::kDeviceTypeidFieldNumber;
const int UserFacilityService_UserFacilityRequest::kRegionFieldNumber;
const int UserFacilityService_UserFacilityRequest::kFacilityIdFieldNumber;
const int UserFacilityService_UserFacilityRequest::kFoodListFieldNumber;
const int UserFacilityService_UserFacilityRequest::kSlotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserFacilityService_UserFacilityRequest::UserFacilityService_UserFacilityRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserFacility_2eproto::scc_info_UserFacilityService_UserFacilityRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserFacilityService.UserFacilityRequest)
}
UserFacilityService_UserFacilityRequest::UserFacilityService_UserFacilityRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  facilitys_(arena),
  food_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_UserFacilityService_UserFacilityRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserFacilityService.UserFacilityRequest)
}
UserFacilityService_UserFacilityRequest::UserFacilityService_UserFacilityRequest(const UserFacilityService_UserFacilityRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      facilitys_(from.facilitys_),
      food_list_(from.food_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserFacilityService.UserFacilityRequest)
}

void UserFacilityService_UserFacilityRequest::SharedCtor() {
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_id_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(slot_id_));
  cmd_ = 1;
}

UserFacilityService_UserFacilityRequest::~UserFacilityService_UserFacilityRequest() {
  // @@protoc_insertion_point(destructor:sg.UserFacilityService.UserFacilityRequest)
  SharedDtor();
}

void UserFacilityService_UserFacilityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserFacilityService_UserFacilityRequest::ArenaDtor(void* object) {
  UserFacilityService_UserFacilityRequest* _this = reinterpret_cast< UserFacilityService_UserFacilityRequest* >(object);
  (void)_this;
}
void UserFacilityService_UserFacilityRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserFacilityService_UserFacilityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserFacilityService_UserFacilityRequest::descriptor() {
  ::protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserFacilityService_UserFacilityRequest& UserFacilityService_UserFacilityRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_UserFacilityService_UserFacilityRequest.base);
  return *internal_default_instance();
}


void UserFacilityService_UserFacilityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserFacilityService.UserFacilityRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facilitys_.Clear();
  food_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&device_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_id_) -
        reinterpret_cast<char*>(&device_id_)) + sizeof(slot_id_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserFacilityService_UserFacilityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserFacilityService.UserFacilityRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserFacilityService.FACILITY_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserFacilityService_FACILITY_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserFacilityService_FACILITY_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Facility facilitys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_facilitys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 device_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 device_typeid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_device_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 region = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 facility_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_facility_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facility_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int food_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_food_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 slot_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_slot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserFacilityService.UserFacilityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserFacilityService.UserFacilityRequest)
  return false;
#undef DO_
}

void UserFacilityService_UserFacilityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserFacilityService.UserFacilityRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserFacilityService.FACILITY_CMD cmd = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // repeated .sg.Facility facilitys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->facilitys(static_cast<int>(i)),
      output);
  }

  // optional int32 device_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->device_id(), output);
  }

  // optional int32 device_typeid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->device_typeid(), output);
  }

  // optional int32 region = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->region(), output);
  }

  // optional int32 facility_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->facility_id(), output);
  }

  // repeated .sg.pb_pair_int_int food_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->food_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->food_list(static_cast<int>(i)),
      output);
  }

  // optional int32 slot_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->slot_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserFacilityService.UserFacilityRequest)
}

::google::protobuf::uint8* UserFacilityService_UserFacilityRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserFacilityService.UserFacilityRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserFacilityService.FACILITY_CMD cmd = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // repeated .sg.Facility facilitys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->facilitys(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 device_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->device_id(), target);
  }

  // optional int32 device_typeid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->device_typeid(), target);
  }

  // optional int32 region = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->region(), target);
  }

  // optional int32 facility_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->facility_id(), target);
  }

  // repeated .sg.pb_pair_int_int food_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->food_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->food_list(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 slot_id = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->slot_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserFacilityService.UserFacilityRequest)
  return target;
}

size_t UserFacilityService_UserFacilityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserFacilityService.UserFacilityRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserFacilityService.FACILITY_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated .sg.Facility facilitys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->facilitys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->facilitys(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int food_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->food_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->food_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 device_id = 3;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_id());
    }

    // optional int32 device_typeid = 4;
    if (has_device_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_typeid());
    }

    // optional int32 region = 5;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }

    // optional int32 facility_id = 6;
    if (has_facility_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facility_id());
    }

    // optional int32 slot_id = 8;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFacilityService_UserFacilityRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserFacilityService.UserFacilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFacilityService_UserFacilityRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserFacilityService_UserFacilityRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserFacilityService.UserFacilityRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserFacilityService.UserFacilityRequest)
    MergeFrom(*source);
  }
}

void UserFacilityService_UserFacilityRequest::MergeFrom(const UserFacilityService_UserFacilityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserFacilityService.UserFacilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  facilitys_.MergeFrom(from.facilitys_);
  food_list_.MergeFrom(from.food_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      device_id_ = from.device_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      device_typeid_ = from.device_typeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000008u) {
      facility_id_ = from.facility_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserFacilityService_UserFacilityRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserFacilityService.UserFacilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFacilityService_UserFacilityRequest::CopyFrom(const UserFacilityService_UserFacilityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserFacilityService.UserFacilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFacilityService_UserFacilityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->facilitys())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->food_list())) return false;
  return true;
}

void UserFacilityService_UserFacilityRequest::Swap(UserFacilityService_UserFacilityRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserFacilityService_UserFacilityRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserFacilityService_UserFacilityRequest::UnsafeArenaSwap(UserFacilityService_UserFacilityRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserFacilityService_UserFacilityRequest::InternalSwap(UserFacilityService_UserFacilityRequest* other) {
  using std::swap;
  CastToBase(&facilitys_)->InternalSwap(CastToBase(&other->facilitys_));
  CastToBase(&food_list_)->InternalSwap(CastToBase(&other->food_list_));
  swap(device_id_, other->device_id_);
  swap(device_typeid_, other->device_typeid_);
  swap(region_, other->region_);
  swap(facility_id_, other->facility_id_);
  swap(slot_id_, other->slot_id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserFacilityService_UserFacilityRequest::GetMetadata() const {
  protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserFacilityService_UserFacilityResponse::InitAsDefaultInstance() {
  ::sg::_UserFacilityService_UserFacilityResponse_default_instance_._instance.get_mutable()->ship_state_ = const_cast< ::sg::RegionState*>(
      ::sg::RegionState::internal_default_instance());
  ::sg::_UserFacilityService_UserFacilityResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void UserFacilityService_UserFacilityResponse::clear_facilitys() {
  facilitys_.Clear();
}
void UserFacilityService_UserFacilityResponse::unsafe_arena_set_allocated_ship_state(
    ::sg::RegionState* ship_state) {
  if (GetArenaNoVirtual() == NULL) {
    delete ship_state_;
  }
  ship_state_ = ship_state;
  if (ship_state) {
    set_has_ship_state();
  } else {
    clear_has_ship_state();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserFacilityService.UserFacilityResponse.ship_state)
}
void UserFacilityService_UserFacilityResponse::clear_ship_state() {
  if (ship_state_ != NULL) ship_state_->Clear();
  clear_has_ship_state();
}
void UserFacilityService_UserFacilityResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserFacilityService.UserFacilityResponse.reward)
}
void UserFacilityService_UserFacilityResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserFacilityService_UserFacilityResponse::kResultFieldNumber;
const int UserFacilityService_UserFacilityResponse::kFacilitysFieldNumber;
const int UserFacilityService_UserFacilityResponse::kFormulaUnlockFieldNumber;
const int UserFacilityService_UserFacilityResponse::kShipStateFieldNumber;
const int UserFacilityService_UserFacilityResponse::kRewardFieldNumber;
const int UserFacilityService_UserFacilityResponse::kCostDiamondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserFacilityService_UserFacilityResponse::UserFacilityService_UserFacilityResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserFacility_2eproto::scc_info_UserFacilityService_UserFacilityResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserFacilityService.UserFacilityResponse)
}
UserFacilityService_UserFacilityResponse::UserFacilityService_UserFacilityResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  facilitys_(arena),
  formula_unlock_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_UserFacilityService_UserFacilityResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserFacilityService.UserFacilityResponse)
}
UserFacilityService_UserFacilityResponse::UserFacilityService_UserFacilityResponse(const UserFacilityService_UserFacilityResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      facilitys_(from.facilitys_),
      formula_unlock_(from.formula_unlock_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ship_state()) {
    ship_state_ = new ::sg::RegionState(*from.ship_state_);
  } else {
    ship_state_ = NULL;
  }
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_diamond_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cost_diamond_));
  // @@protoc_insertion_point(copy_constructor:sg.UserFacilityService.UserFacilityResponse)
}

void UserFacilityService_UserFacilityResponse::SharedCtor() {
  ::memset(&ship_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_diamond_) -
      reinterpret_cast<char*>(&ship_state_)) + sizeof(cost_diamond_));
}

UserFacilityService_UserFacilityResponse::~UserFacilityService_UserFacilityResponse() {
  // @@protoc_insertion_point(destructor:sg.UserFacilityService.UserFacilityResponse)
  SharedDtor();
}

void UserFacilityService_UserFacilityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete ship_state_;
  if (this != internal_default_instance()) delete reward_;
}

void UserFacilityService_UserFacilityResponse::ArenaDtor(void* object) {
  UserFacilityService_UserFacilityResponse* _this = reinterpret_cast< UserFacilityService_UserFacilityResponse* >(object);
  (void)_this;
}
void UserFacilityService_UserFacilityResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserFacilityService_UserFacilityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserFacilityService_UserFacilityResponse::descriptor() {
  ::protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserFacilityService_UserFacilityResponse& UserFacilityService_UserFacilityResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_UserFacilityService_UserFacilityResponse.base);
  return *internal_default_instance();
}


void UserFacilityService_UserFacilityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserFacilityService.UserFacilityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facilitys_.Clear();
  formula_unlock_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ship_state_ != NULL);
      ship_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reward_ != NULL);
      reward_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cost_diamond_) -
        reinterpret_cast<char*>(&result_)) + sizeof(cost_diamond_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserFacilityService_UserFacilityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserFacilityService.UserFacilityResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Facility facilitys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_facilitys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 formula_unlock = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_formula_unlock())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_formula_unlock())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.RegionState ship_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ship_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cost_diamond = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cost_diamond();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserFacilityService.UserFacilityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserFacilityService.UserFacilityResponse)
  return false;
#undef DO_
}

void UserFacilityService_UserFacilityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserFacilityService.UserFacilityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.Facility facilitys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->facilitys(static_cast<int>(i)),
      output);
  }

  // repeated int32 formula_unlock = 3;
  for (int i = 0, n = this->formula_unlock_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->formula_unlock(i), output);
  }

  // optional .sg.RegionState ship_state = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ship_state(), output);
  }

  // optional .sg.Reward reward = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_reward(), output);
  }

  // optional int32 cost_diamond = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cost_diamond(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserFacilityService.UserFacilityResponse)
}

::google::protobuf::uint8* UserFacilityService_UserFacilityResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserFacilityService.UserFacilityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.Facility facilitys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->facilitys(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 formula_unlock = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->formula_unlock_, target);

  // optional .sg.RegionState ship_state = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ship_state(), deterministic, target);
  }

  // optional .sg.Reward reward = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_reward(), deterministic, target);
  }

  // optional int32 cost_diamond = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cost_diamond(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserFacilityService.UserFacilityResponse)
  return target;
}

size_t UserFacilityService_UserFacilityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserFacilityService.UserFacilityResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.Facility facilitys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->facilitys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->facilitys(static_cast<int>(i)));
    }
  }

  // repeated int32 formula_unlock = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->formula_unlock_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->formula_unlock_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.RegionState ship_state = 4;
    if (has_ship_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ship_state_);
    }

    // optional .sg.Reward reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reward_);
    }

  }
  // optional int32 cost_diamond = 6;
  if (has_cost_diamond()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost_diamond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFacilityService_UserFacilityResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserFacilityService.UserFacilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFacilityService_UserFacilityResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserFacilityService_UserFacilityResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserFacilityService.UserFacilityResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserFacilityService.UserFacilityResponse)
    MergeFrom(*source);
  }
}

void UserFacilityService_UserFacilityResponse::MergeFrom(const UserFacilityService_UserFacilityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserFacilityService.UserFacilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  facilitys_.MergeFrom(from.facilitys_);
  formula_unlock_.MergeFrom(from.formula_unlock_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ship_state()->::sg::RegionState::MergeFrom(from.ship_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      cost_diamond_ = from.cost_diamond_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserFacilityService_UserFacilityResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserFacilityService.UserFacilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFacilityService_UserFacilityResponse::CopyFrom(const UserFacilityService_UserFacilityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserFacilityService.UserFacilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFacilityService_UserFacilityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->facilitys())) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void UserFacilityService_UserFacilityResponse::Swap(UserFacilityService_UserFacilityResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserFacilityService_UserFacilityResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserFacilityService_UserFacilityResponse::UnsafeArenaSwap(UserFacilityService_UserFacilityResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserFacilityService_UserFacilityResponse::InternalSwap(UserFacilityService_UserFacilityResponse* other) {
  using std::swap;
  CastToBase(&facilitys_)->InternalSwap(CastToBase(&other->facilitys_));
  formula_unlock_.InternalSwap(&other->formula_unlock_);
  swap(ship_state_, other->ship_state_);
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(cost_diamond_, other->cost_diamond_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserFacilityService_UserFacilityResponse::GetMetadata() const {
  protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserFacilityService::InitAsDefaultInstance() {
  ::sg::_UserFacilityService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserFacilityService_UserFacilityRequest*>(
      ::sg::UserFacilityService_UserFacilityRequest::internal_default_instance());
  ::sg::_UserFacilityService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserFacilityService_UserFacilityResponse*>(
      ::sg::UserFacilityService_UserFacilityResponse::internal_default_instance());
}
void UserFacilityService::unsafe_arena_set_allocated_req(
    ::sg::UserFacilityService_UserFacilityRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserFacilityService.req)
}
void UserFacilityService::unsafe_arena_set_allocated_resp(
    ::sg::UserFacilityService_UserFacilityResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserFacilityService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserFacilityService::kReqFieldNumber;
const int UserFacilityService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserFacilityService::UserFacilityService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserFacility_2eproto::scc_info_UserFacilityService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserFacilityService)
}
UserFacilityService::UserFacilityService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_UserFacilityService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserFacilityService)
}
UserFacilityService::UserFacilityService(const UserFacilityService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserFacilityService_UserFacilityRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserFacilityService_UserFacilityResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserFacilityService)
}

void UserFacilityService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserFacilityService::~UserFacilityService() {
  // @@protoc_insertion_point(destructor:sg.UserFacilityService)
  SharedDtor();
}

void UserFacilityService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserFacilityService::ArenaDtor(void* object) {
  UserFacilityService* _this = reinterpret_cast< UserFacilityService* >(object);
  (void)_this;
}
void UserFacilityService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserFacilityService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserFacilityService::descriptor() {
  ::protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserFacilityService& UserFacilityService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_UserFacilityService.base);
  return *internal_default_instance();
}


void UserFacilityService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserFacilityService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserFacilityService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserFacilityService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserFacilityService.UserFacilityRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserFacilityService.UserFacilityResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserFacilityService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserFacilityService)
  return false;
#undef DO_
}

void UserFacilityService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserFacilityService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserFacilityService.UserFacilityRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserFacilityService.UserFacilityResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserFacilityService)
}

::google::protobuf::uint8* UserFacilityService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserFacilityService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserFacilityService.UserFacilityRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserFacilityService.UserFacilityResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserFacilityService)
  return target;
}

size_t UserFacilityService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserFacilityService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserFacilityService.UserFacilityRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserFacilityService.UserFacilityResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFacilityService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserFacilityService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFacilityService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserFacilityService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserFacilityService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserFacilityService)
    MergeFrom(*source);
  }
}

void UserFacilityService::MergeFrom(const UserFacilityService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserFacilityService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserFacilityService_UserFacilityRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserFacilityService_UserFacilityResponse::MergeFrom(from.resp());
    }
  }
}

void UserFacilityService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserFacilityService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFacilityService::CopyFrom(const UserFacilityService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserFacilityService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFacilityService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserFacilityService::Swap(UserFacilityService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserFacilityService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserFacilityService::UnsafeArenaSwap(UserFacilityService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserFacilityService::InternalSwap(UserFacilityService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserFacilityService::GetMetadata() const {
  protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FacilityContainAddNotify::InitAsDefaultInstance() {
}
void FacilityContainAddNotify::clear_items() {
  items_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacilityContainAddNotify::kFacilityIdFieldNumber;
const int FacilityContainAddNotify::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacilityContainAddNotify::FacilityContainAddNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserFacility_2eproto::scc_info_FacilityContainAddNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FacilityContainAddNotify)
}
FacilityContainAddNotify::FacilityContainAddNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  items_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_FacilityContainAddNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FacilityContainAddNotify)
}
FacilityContainAddNotify::FacilityContainAddNotify(const FacilityContainAddNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  facility_id_ = from.facility_id_;
  // @@protoc_insertion_point(copy_constructor:sg.FacilityContainAddNotify)
}

void FacilityContainAddNotify::SharedCtor() {
  facility_id_ = 0;
}

FacilityContainAddNotify::~FacilityContainAddNotify() {
  // @@protoc_insertion_point(destructor:sg.FacilityContainAddNotify)
  SharedDtor();
}

void FacilityContainAddNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FacilityContainAddNotify::ArenaDtor(void* object) {
  FacilityContainAddNotify* _this = reinterpret_cast< FacilityContainAddNotify* >(object);
  (void)_this;
}
void FacilityContainAddNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FacilityContainAddNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FacilityContainAddNotify::descriptor() {
  ::protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FacilityContainAddNotify& FacilityContainAddNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_FacilityContainAddNotify.base);
  return *internal_default_instance();
}


void FacilityContainAddNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FacilityContainAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  facility_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FacilityContainAddNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FacilityContainAddNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 facility_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_facility_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facility_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Item items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FacilityContainAddNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FacilityContainAddNotify)
  return false;
#undef DO_
}

void FacilityContainAddNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FacilityContainAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 facility_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->facility_id(), output);
  }

  // repeated .sg.Item items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FacilityContainAddNotify)
}

::google::protobuf::uint8* FacilityContainAddNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FacilityContainAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 facility_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->facility_id(), target);
  }

  // repeated .sg.Item items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FacilityContainAddNotify)
  return target;
}

size_t FacilityContainAddNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FacilityContainAddNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 facility_id = 1;
  if (has_facility_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facility_id());
  }
  // repeated .sg.Item items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FacilityContainAddNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FacilityContainAddNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FacilityContainAddNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FacilityContainAddNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FacilityContainAddNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FacilityContainAddNotify)
    MergeFrom(*source);
  }
}

void FacilityContainAddNotify::MergeFrom(const FacilityContainAddNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FacilityContainAddNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_facility_id()) {
    set_facility_id(from.facility_id());
  }
}

void FacilityContainAddNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FacilityContainAddNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacilityContainAddNotify::CopyFrom(const FacilityContainAddNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FacilityContainAddNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacilityContainAddNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void FacilityContainAddNotify::Swap(FacilityContainAddNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FacilityContainAddNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FacilityContainAddNotify::UnsafeArenaSwap(FacilityContainAddNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FacilityContainAddNotify::InternalSwap(FacilityContainAddNotify* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(facility_id_, other->facility_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FacilityContainAddNotify::GetMetadata() const {
  protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FacilityLevelUpNotify::InitAsDefaultInstance() {
  ::sg::_FacilityLevelUpNotify_default_instance_._instance.get_mutable()->facility_ = const_cast< ::sg::Facility*>(
      ::sg::Facility::internal_default_instance());
  ::sg::_FacilityLevelUpNotify_default_instance_._instance.get_mutable()->ship_state_ = const_cast< ::sg::RegionState*>(
      ::sg::RegionState::internal_default_instance());
}
void FacilityLevelUpNotify::unsafe_arena_set_allocated_facility(
    ::sg::Facility* facility) {
  if (GetArenaNoVirtual() == NULL) {
    delete facility_;
  }
  facility_ = facility;
  if (facility) {
    set_has_facility();
  } else {
    clear_has_facility();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FacilityLevelUpNotify.facility)
}
void FacilityLevelUpNotify::clear_facility() {
  if (facility_ != NULL) facility_->Clear();
  clear_has_facility();
}
void FacilityLevelUpNotify::unsafe_arena_set_allocated_ship_state(
    ::sg::RegionState* ship_state) {
  if (GetArenaNoVirtual() == NULL) {
    delete ship_state_;
  }
  ship_state_ = ship_state;
  if (ship_state) {
    set_has_ship_state();
  } else {
    clear_has_ship_state();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FacilityLevelUpNotify.ship_state)
}
void FacilityLevelUpNotify::clear_ship_state() {
  if (ship_state_ != NULL) ship_state_->Clear();
  clear_has_ship_state();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacilityLevelUpNotify::kFacilityFieldNumber;
const int FacilityLevelUpNotify::kFormulaUnlockFieldNumber;
const int FacilityLevelUpNotify::kShipStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacilityLevelUpNotify::FacilityLevelUpNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserFacility_2eproto::scc_info_FacilityLevelUpNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FacilityLevelUpNotify)
}
FacilityLevelUpNotify::FacilityLevelUpNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  formula_unlock_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_FacilityLevelUpNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FacilityLevelUpNotify)
}
FacilityLevelUpNotify::FacilityLevelUpNotify(const FacilityLevelUpNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      formula_unlock_(from.formula_unlock_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_facility()) {
    facility_ = new ::sg::Facility(*from.facility_);
  } else {
    facility_ = NULL;
  }
  if (from.has_ship_state()) {
    ship_state_ = new ::sg::RegionState(*from.ship_state_);
  } else {
    ship_state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.FacilityLevelUpNotify)
}

void FacilityLevelUpNotify::SharedCtor() {
  ::memset(&facility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ship_state_) -
      reinterpret_cast<char*>(&facility_)) + sizeof(ship_state_));
}

FacilityLevelUpNotify::~FacilityLevelUpNotify() {
  // @@protoc_insertion_point(destructor:sg.FacilityLevelUpNotify)
  SharedDtor();
}

void FacilityLevelUpNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete facility_;
  if (this != internal_default_instance()) delete ship_state_;
}

void FacilityLevelUpNotify::ArenaDtor(void* object) {
  FacilityLevelUpNotify* _this = reinterpret_cast< FacilityLevelUpNotify* >(object);
  (void)_this;
}
void FacilityLevelUpNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FacilityLevelUpNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FacilityLevelUpNotify::descriptor() {
  ::protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FacilityLevelUpNotify& FacilityLevelUpNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserFacility_2eproto::scc_info_FacilityLevelUpNotify.base);
  return *internal_default_instance();
}


void FacilityLevelUpNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FacilityLevelUpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  formula_unlock_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(facility_ != NULL);
      facility_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ship_state_ != NULL);
      ship_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FacilityLevelUpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FacilityLevelUpNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.Facility facility = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_facility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 formula_unlock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_formula_unlock())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_formula_unlock())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.RegionState ship_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ship_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FacilityLevelUpNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FacilityLevelUpNotify)
  return false;
#undef DO_
}

void FacilityLevelUpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FacilityLevelUpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Facility facility = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_facility(), output);
  }

  // repeated int32 formula_unlock = 2;
  for (int i = 0, n = this->formula_unlock_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->formula_unlock(i), output);
  }

  // optional .sg.RegionState ship_state = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ship_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FacilityLevelUpNotify)
}

::google::protobuf::uint8* FacilityLevelUpNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FacilityLevelUpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Facility facility = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_facility(), deterministic, target);
  }

  // repeated int32 formula_unlock = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->formula_unlock_, target);

  // optional .sg.RegionState ship_state = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ship_state(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FacilityLevelUpNotify)
  return target;
}

size_t FacilityLevelUpNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FacilityLevelUpNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.Facility facility = 1;
  if (has_facility()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *facility_);
  }
  // repeated int32 formula_unlock = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->formula_unlock_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->formula_unlock_size());
    total_size += data_size;
  }

  // optional .sg.RegionState ship_state = 4;
  if (has_ship_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ship_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FacilityLevelUpNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FacilityLevelUpNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FacilityLevelUpNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FacilityLevelUpNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FacilityLevelUpNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FacilityLevelUpNotify)
    MergeFrom(*source);
  }
}

void FacilityLevelUpNotify::MergeFrom(const FacilityLevelUpNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FacilityLevelUpNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formula_unlock_.MergeFrom(from.formula_unlock_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_facility()->::sg::Facility::MergeFrom(from.facility());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ship_state()->::sg::RegionState::MergeFrom(from.ship_state());
    }
  }
}

void FacilityLevelUpNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FacilityLevelUpNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacilityLevelUpNotify::CopyFrom(const FacilityLevelUpNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FacilityLevelUpNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacilityLevelUpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_facility()) {
    if (!this->facility_->IsInitialized()) return false;
  }
  return true;
}

void FacilityLevelUpNotify::Swap(FacilityLevelUpNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FacilityLevelUpNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FacilityLevelUpNotify::UnsafeArenaSwap(FacilityLevelUpNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FacilityLevelUpNotify::InternalSwap(FacilityLevelUpNotify* other) {
  using std::swap;
  formula_unlock_.InternalSwap(&other->formula_unlock_);
  swap(facility_, other->facility_);
  swap(ship_state_, other->ship_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FacilityLevelUpNotify::GetMetadata() const {
  protobuf_UserFacility_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserFacility_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserFacilityService_UserFacilityRequest* Arena::CreateMaybeMessage< ::sg::UserFacilityService_UserFacilityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserFacilityService_UserFacilityRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserFacilityService_UserFacilityResponse* Arena::CreateMaybeMessage< ::sg::UserFacilityService_UserFacilityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserFacilityService_UserFacilityResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserFacilityService* Arena::CreateMaybeMessage< ::sg::UserFacilityService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserFacilityService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FacilityContainAddNotify* Arena::CreateMaybeMessage< ::sg::FacilityContainAddNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FacilityContainAddNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FacilityLevelUpNotify* Arena::CreateMaybeMessage< ::sg::FacilityLevelUpNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FacilityLevelUpNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
