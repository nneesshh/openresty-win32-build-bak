// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseStruct.proto

#include "BaseStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Equip_EquipAttributeSlot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Equip_SpecialAttribute;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Facility_OrderSlot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Locale;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SailorFarmSkill;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SailorSkill;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SailorTalent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_float;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_int;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Facility_SpecialData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Facility;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Equip;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Sailor;
}  // namespace protobuf_BaseStruct_2eproto
namespace sg {
class UserRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserRoom>
      _instance;
} _UserRoom_default_instance_;
class LocaleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Locale>
      _instance;
} _Locale_default_instance_;
class pb_pair_int_intDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pb_pair_int_int>
      _instance;
} _pb_pair_int_int_default_instance_;
class pb_pair_int_timeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pb_pair_int_time>
      _instance;
} _pb_pair_int_time_default_instance_;
class pb_pair_int64_intDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pb_pair_int64_int>
      _instance;
} _pb_pair_int64_int_default_instance_;
class pb_pair_string_intDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pb_pair_string_int>
      _instance;
} _pb_pair_string_int_default_instance_;
class pb_pair_int_floatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pb_pair_int_float>
      _instance;
} _pb_pair_int_float_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserInfo>
      _instance;
} _UserInfo_default_instance_;
class UserStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserState>
      _instance;
} _UserState_default_instance_;
class Equip_SpecialAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Equip_SpecialAttribute>
      _instance;
} _Equip_SpecialAttribute_default_instance_;
class Equip_EquipAttributeSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Equip_EquipAttributeSlot>
      _instance;
} _Equip_EquipAttributeSlot_default_instance_;
class EquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Equip>
      _instance;
} _Equip_default_instance_;
class SailorSkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SailorSkill>
      _instance;
} _SailorSkill_default_instance_;
class SailorFarmSkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SailorFarmSkill>
      _instance;
} _SailorFarmSkill_default_instance_;
class SailorTalentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SailorTalent>
      _instance;
} _SailorTalent_default_instance_;
class SailorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sailor>
      _instance;
} _Sailor_default_instance_;
class NPCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NPC>
      _instance;
} _NPC_default_instance_;
class ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Item>
      _instance;
} _Item_default_instance_;
class Facility_SpecialDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Facility_SpecialData>
      _instance;
} _Facility_SpecialData_default_instance_;
class Facility_OrderSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Facility_OrderSlot>
      _instance;
} _Facility_OrderSlot_default_instance_;
class FacilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Facility>
      _instance;
} _Facility_default_instance_;
class RewardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reward>
      _instance;
} _Reward_default_instance_;
class RegionStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionState>
      _instance;
} _RegionState_default_instance_;
class SpecialEventNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpecialEventNotify>
      _instance;
} _SpecialEventNotify_default_instance_;
}  // namespace sg
namespace protobuf_BaseStruct_2eproto {
static void InitDefaultsUserRoom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserRoom_default_instance_;
    new (ptr) ::sg::UserRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserRoom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserRoom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserRoom}, {}};

static void InitDefaultsLocale() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Locale_default_instance_;
    new (ptr) ::sg::Locale();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Locale::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Locale =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocale}, {}};

static void InitDefaultspb_pair_int_int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_pb_pair_int_int_default_instance_;
    new (ptr) ::sg::pb_pair_int_int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::pb_pair_int_int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspb_pair_int_int}, {}};

static void InitDefaultspb_pair_int_time() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_pb_pair_int_time_default_instance_;
    new (ptr) ::sg::pb_pair_int_time();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::pb_pair_int_time::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_time =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspb_pair_int_time}, {}};

static void InitDefaultspb_pair_int64_int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_pb_pair_int64_int_default_instance_;
    new (ptr) ::sg::pb_pair_int64_int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::pb_pair_int64_int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int64_int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspb_pair_int64_int}, {}};

static void InitDefaultspb_pair_string_int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_pb_pair_string_int_default_instance_;
    new (ptr) ::sg::pb_pair_string_int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::pb_pair_string_int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_string_int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspb_pair_string_int}, {}};

static void InitDefaultspb_pair_int_float() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_pb_pair_int_float_default_instance_;
    new (ptr) ::sg::pb_pair_int_float();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::pb_pair_int_float::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_float =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspb_pair_int_float}, {}};

static void InitDefaultsUserInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserInfo_default_instance_;
    new (ptr) ::sg::UserInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserInfo}, {}};

static void InitDefaultsUserState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserState_default_instance_;
    new (ptr) ::sg::UserState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserState}, {}};

static void InitDefaultsEquip_SpecialAttribute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Equip_SpecialAttribute_default_instance_;
    new (ptr) ::sg::Equip_SpecialAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Equip_SpecialAttribute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Equip_SpecialAttribute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEquip_SpecialAttribute}, {}};

static void InitDefaultsEquip_EquipAttributeSlot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Equip_EquipAttributeSlot_default_instance_;
    new (ptr) ::sg::Equip_EquipAttributeSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Equip_EquipAttributeSlot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Equip_EquipAttributeSlot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEquip_EquipAttributeSlot}, {}};

static void InitDefaultsEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Equip_default_instance_;
    new (ptr) ::sg::Equip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Equip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Equip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsEquip}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base,
      &protobuf_BaseStruct_2eproto::scc_info_Equip_SpecialAttribute.base,
      &protobuf_BaseStruct_2eproto::scc_info_Equip_EquipAttributeSlot.base,}};

static void InitDefaultsSailorSkill() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SailorSkill_default_instance_;
    new (ptr) ::sg::SailorSkill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SailorSkill::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SailorSkill =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSailorSkill}, {}};

static void InitDefaultsSailorFarmSkill() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SailorFarmSkill_default_instance_;
    new (ptr) ::sg::SailorFarmSkill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SailorFarmSkill::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SailorFarmSkill =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSailorFarmSkill}, {}};

static void InitDefaultsSailorTalent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SailorTalent_default_instance_;
    new (ptr) ::sg::SailorTalent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SailorTalent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SailorTalent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSailorTalent}, {}};

static void InitDefaultsSailor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Sailor_default_instance_;
    new (ptr) ::sg::Sailor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Sailor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Sailor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSailor}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base,
      &protobuf_BaseStruct_2eproto::scc_info_Equip.base,
      &protobuf_BaseStruct_2eproto::scc_info_SailorSkill.base,
      &protobuf_BaseStruct_2eproto::scc_info_SailorFarmSkill.base,
      &protobuf_BaseStruct_2eproto::scc_info_SailorTalent.base,}};

static void InitDefaultsNPC() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_NPC_default_instance_;
    new (ptr) ::sg::NPC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::NPC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NPC =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNPC}, {
      &protobuf_BaseStruct_2eproto::scc_info_Locale.base,}};

static void InitDefaultsItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Item_default_instance_;
    new (ptr) ::sg::Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Item::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Item =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsItem}, {}};

static void InitDefaultsFacility_SpecialData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Facility_SpecialData_default_instance_;
    new (ptr) ::sg::Facility_SpecialData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Facility_SpecialData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Facility_SpecialData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFacility_SpecialData}, {
      &protobuf_BaseStruct_2eproto::scc_info_Item.base,}};

static void InitDefaultsFacility_OrderSlot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Facility_OrderSlot_default_instance_;
    new (ptr) ::sg::Facility_OrderSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Facility_OrderSlot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Facility_OrderSlot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFacility_OrderSlot}, {}};

static void InitDefaultsFacility() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Facility_default_instance_;
    new (ptr) ::sg::Facility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Facility::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Facility =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFacility}, {
      &protobuf_BaseStruct_2eproto::scc_info_Facility_OrderSlot.base,
      &protobuf_BaseStruct_2eproto::scc_info_Facility_SpecialData.base,}};

static void InitDefaultsReward() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Reward_default_instance_;
    new (ptr) ::sg::Reward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Reward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Reward =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsReward}, {
      &protobuf_BaseStruct_2eproto::scc_info_Item.base,
      &protobuf_BaseStruct_2eproto::scc_info_Sailor.base,
      &protobuf_BaseStruct_2eproto::scc_info_Facility.base,
      &protobuf_BaseStruct_2eproto::scc_info_Equip.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,}};

static void InitDefaultsRegionState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_RegionState_default_instance_;
    new (ptr) ::sg::RegionState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::RegionState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegionState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegionState}, {}};

static void InitDefaultsSpecialEventNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SpecialEventNotify_default_instance_;
    new (ptr) ::sg::SpecialEventNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SpecialEventNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpecialEventNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpecialEventNotify}, {
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserRoom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Locale.base);
  ::google::protobuf::internal::InitSCC(&scc_info_pb_pair_int_int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_pb_pair_int_time.base);
  ::google::protobuf::internal::InitSCC(&scc_info_pb_pair_int64_int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_pb_pair_string_int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_pb_pair_int_float.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Equip_SpecialAttribute.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Equip_EquipAttributeSlot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Equip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SailorSkill.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SailorFarmSkill.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SailorTalent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sailor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NPC.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Item.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Facility_SpecialData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Facility_OrderSlot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Facility.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Reward.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpecialEventNotify.base);
}

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRoom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRoom, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRoom, room_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRoom, comfort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRoom, machine_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserRoom, machine_value_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Locale, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Locale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Locale, place_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Locale, pos_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Locale, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Locale, pos_y_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_int, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_int, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_time, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_time, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_time, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int64_int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int64_int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int64_int, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int64_int, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_string_int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_string_int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_string_int, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_string_int, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_float, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_float, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_float, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::pb_pair_int_float, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInfo, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInfo, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInfo, portrait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInfo, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInfo, portrait_frame_),
  2,
  3,
  0,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, guide_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, occupy_monster_ship_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, occupy_player_ship_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, occupy_special_ship_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, max_occupy_monster_ship_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, max_occupy_player_ship_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, max_occupy_special_ship_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserState, daily_buy_vitality_times_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_SpecialAttribute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_SpecialAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_SpecialAttribute, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_SpecialAttribute, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_SpecialAttribute, value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_EquipAttributeSlot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_EquipAttributeSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_EquipAttributeSlot, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_EquipAttributeSlot, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_EquipAttributeSlot, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_EquipAttributeSlot, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_EquipAttributeSlot, refine_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip_EquipAttributeSlot, big_success_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, belong_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, special_attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, attr_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, quality_refine_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Equip, skill_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorSkill, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorSkill, slotid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorSkill, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorSkill, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorSkill, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorSkill, level_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorFarmSkill, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorFarmSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorFarmSkill, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorFarmSkill, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorFarmSkill, exp_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorTalent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorTalent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorTalent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorTalent, level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, place_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, facility_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, hp_lost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, vim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, orderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, last_rest_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, job_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, aptitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, equip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, skills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, farm_skills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, talent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, practice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Sailor, hunger_),
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  14,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  15,
  16,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NPC, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NPC, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NPC, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NPC, locale_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Item, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Item, num_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_SpecialData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_SpecialData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_SpecialData, property_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_SpecialData, count_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_SpecialData, contain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_SpecialData, timestamp_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_OrderSlot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_OrderSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_OrderSlot, orderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_OrderSlot, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility_OrderSlot, index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, order_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, worker_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, special_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, remain_food_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Facility, level_up_starttime_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  4,
  5,
  6,
  7,
  ~0u,
  9,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, sailors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, facilitys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, models_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, formulas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, maps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, month_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, equips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, sailor_add_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, treasure_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Reward, grow_gift_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, comfort_grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, item_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, equip_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, facility_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, food_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, resource_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, resource_product_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, food_resource_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, wood_resource_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, iron_resource_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RegionState, machine_capacity_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SpecialEventNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SpecialEventNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SpecialEventNotify, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SpecialEventNotify, reward_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::sg::UserRoom)},
  { 15, 24, sizeof(::sg::Locale)},
  { 28, 35, sizeof(::sg::pb_pair_int_int)},
  { 37, 44, sizeof(::sg::pb_pair_int_time)},
  { 46, 53, sizeof(::sg::pb_pair_int64_int)},
  { 55, 62, sizeof(::sg::pb_pair_string_int)},
  { 64, 71, sizeof(::sg::pb_pair_int_float)},
  { 73, 84, sizeof(::sg::UserInfo)},
  { 90, 103, sizeof(::sg::UserState)},
  { 111, 119, sizeof(::sg::Equip_SpecialAttribute)},
  { 122, 133, sizeof(::sg::Equip_EquipAttributeSlot)},
  { 139, 154, sizeof(::sg::Equip)},
  { 164, 174, sizeof(::sg::SailorSkill)},
  { 179, 187, sizeof(::sg::SailorFarmSkill)},
  { 190, 197, sizeof(::sg::SailorTalent)},
  { 199, 227, sizeof(::sg::Sailor)},
  { 250, 258, sizeof(::sg::NPC)},
  { 261, 268, sizeof(::sg::Item)},
  { 270, 279, sizeof(::sg::Facility_SpecialData)},
  { 283, 291, sizeof(::sg::Facility_OrderSlot)},
  { 294, 312, sizeof(::sg::Facility)},
  { 325, 342, sizeof(::sg::Reward)},
  { 354, 370, sizeof(::sg::RegionState)},
  { 381, 388, sizeof(::sg::SpecialEventNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Locale_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_pb_pair_int_int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_pb_pair_int_time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_pb_pair_int64_int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_pb_pair_string_int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_pb_pair_int_float_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Equip_SpecialAttribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Equip_EquipAttributeSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Equip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SailorSkill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SailorFarmSkill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SailorTalent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Sailor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_NPC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Facility_SpecialData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Facility_OrderSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Facility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Reward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_RegionState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SpecialEventNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "BaseStruct.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020BaseStruct.proto\022\002sg\"k\n\010UserRoom\022\n\n\002id"
      "\030\001 \002(\005\022\021\n\troom_type\030\002 \002(\005\022\017\n\007comfort\030\003 \001"
      "(\005\022\030\n\020machine_capacity\030\004 \001(\005\022\025\n\rmachine_"
      "value\030\005 \001(\005\"J\n\006Locale\022\020\n\010place_id\030\001 \002(\005\022"
      "\020\n\010pos_type\030\002 \002(\005\022\r\n\005pos_x\030\003 \002(\005\022\r\n\005pos_"
      "y\030\004 \002(\005\"-\n\017pb_pair_int_int\022\013\n\003key\030\001 \002(\005\022"
      "\r\n\005value\030\002 \002(\005\".\n\020pb_pair_int_time\022\013\n\003ke"
      "y\030\001 \002(\005\022\r\n\005value\030\002 \002(\020\"/\n\021pb_pair_int64_"
      "int\022\013\n\003key\030\001 \002(\003\022\r\n\005value\030\002 \002(\005\"0\n\022pb_pa"
      "ir_string_int\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002("
      "\005\"/\n\021pb_pair_int_float\022\013\n\003key\030\001 \002(\005\022\r\n\005v"
      "alue\030\002 \002(\002\"r\n\010UserInfo\022\014\n\004uuid\030\001 \002(\004\022\r\n\005"
      "level\030\002 \002(\005\022\014\n\004nick\030\003 \002(\014\022\020\n\010portrait\030\004 "
      "\002(\005\022\021\n\tsignature\030\005 \002(\014\022\026\n\016portrait_frame"
      "\030\006 \001(\005\"\234\002\n\tUserState\022\021\n\tguide_val\030\002 \001(\014\022"
      "!\n\031occupy_monster_ship_times\030\003 \001(\005\022 \n\030oc"
      "cupy_player_ship_times\030\004 \001(\005\022!\n\031occupy_s"
      "pecial_ship_times\030\005 \001(\005\022%\n\035max_occupy_mo"
      "nster_ship_times\030\006 \001(\005\022$\n\034max_occupy_pla"
      "yer_ship_times\030\007 \001(\005\022%\n\035max_occupy_speci"
      "al_ship_times\030\010 \001(\005\022 \n\030daily_buy_vitalit"
      "y_times\030\t \001(\005\"\312\003\n\005Equip\022\n\n\002id\030\001 \002(\005\022\016\n\006t"
      "ypeid\030\002 \002(\005\022\017\n\007quality\030\003 \002(\005\022\r\n\005state\030\004 "
      "\002(\005\022\021\n\tbelong_to\030\005 \002(\005\022(\n\tattribute\030\006 \003("
      "\0132\025.sg.pb_pair_int_float\0220\n\014special_attr"
      "\030\007 \003(\0132\032.sg.Equip.SpecialAttribute\0220\n\nat"
      "tr_slots\030\010 \003(\0132\034.sg.Equip.EquipAttribute"
      "Slot\022\034\n\024quality_refine_times\030\t \001(\005\022\r\n\005sk"
      "ill\030\n \001(\003\032=\n\020SpecialAttribute\022\n\n\002id\030\001 \002("
      "\005\022\016\n\006target\030\002 \002(\005\022\r\n\005value\030\003 \002(\002\032x\n\022Equi"
      "pAttributeSlot\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005"
      "\022\016\n\006typeid\030\003 \002(\005\022\r\n\005value\030\004 \002(\002\022\024\n\014refin"
      "e_times\030\005 \002(\005\022\023\n\013big_success\030\006 \001(\010\"Z\n\013Sa"
      "ilorSkill\022\016\n\006slotid\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022"
      "\r\n\005state\030\003 \002(\005\022\017\n\007skillid\030\004 \002(\004\022\r\n\005level"
      "\030\005 \002(\005\"9\n\017SailorFarmSkill\022\n\n\002id\030\001 \002(\004\022\r\n"
      "\005level\030\002 \002(\005\022\013\n\003exp\030\003 \002(\005\")\n\014SailorTalen"
      "t\022\n\n\002id\030\001 \002(\004\022\r\n\005level\030\002 \002(\005\"\202\004\n\006Sailor\022"
      "\n\n\002id\030\001 \002(\005\022\016\n\006typeid\030\002 \002(\005\022\037\n\005state\030\003 \002"
      "(\0162\020.sg.SAILOR_STATE\022\r\n\005place\030\004 \002(\004\022\023\n\013f"
      "acility_id\030\005 \002(\005\022\r\n\005level\030\006 \002(\005\022\014\n\004star\030"
      "\007 \002(\005\022\r\n\005phase\030\010 \002(\005\022\017\n\007hp_lost\030\t \002(\005\022\013\n"
      "\003vim\030\n \002(\002\022\013\n\003exp\030\013 \002(\005\022\017\n\007orderid\030\r \001(\005"
      "\022\026\n\016last_rest_time\030\016 \001(\020\022\013\n\003job\030\017 \001(\005\022(\n"
      "\tattribute\030\020 \003(\0132\025.sg.pb_pair_int_float\022"
      "\'\n\010aptitude\030\021 \003(\0132\025.sg.pb_pair_int_float"
      "\022\030\n\005equip\030\022 \003(\0132\t.sg.Equip\022\037\n\006skills\030\023 \003"
      "(\0132\017.sg.SailorSkill\022(\n\013farm_skills\030\024 \003(\013"
      "2\023.sg.SailorFarmSkill\022 \n\006talent\030\025 \001(\0132\020."
      "sg.SailorTalent\022\020\n\010practice\030\026 \001(\005\022\016\n\006reg"
      "ion\030\027 \001(\005\022\016\n\006hunger\030\030 \001(\002\"<\n\003NPC\022\n\n\002id\030\001"
      " \002(\005\022\r\n\005state\030\002 \002(\005\022\032\n\006locale\030\003 \002(\0132\n.sg"
      ".Locale\"#\n\004Item\022\016\n\006typeid\030\001 \002(\005\022\013\n\003num\030\002"
      " \002(\003\"\311\003\n\010Facility\022\n\n\002id\030\001 \002(\005\022\016\n\006typeid\030"
      "\002 \002(\005\022\r\n\005style\030\003 \002(\005\022*\n\norder_list\030\004 \003(\013"
      "2\026.sg.Facility.OrderSlot\022\016\n\006roomid\030\005 \001(\005"
      "\022\023\n\013worker_list\030\006 \003(\005\022\r\n\005pos_x\030\007 \001(\005\022\r\n\005"
      "pos_y\030\010 \001(\005\022\r\n\005level\030\t \001(\005\022\016\n\006region\030\n \001"
      "(\005\022.\n\014special_data\030\013 \003(\0132\030.sg.Facility.S"
      "pecialData\022\023\n\013remain_food\030\014 \001(\005\022\032\n\022level"
      "_up_starttime\030\r \001(\020\032g\n\013SpecialData\022\025\n\rpr"
      "operty_type\030\001 \002(\005\022\023\n\013count_times\030\002 \002(\005\022\031"
      "\n\007contain\030\003 \003(\0132\010.sg.Item\022\021\n\ttimestamp\030\004"
      " \001(\020\032:\n\tOrderSlot\022\017\n\007orderid\030\001 \002(\005\022\r\n\005st"
      "ate\030\002 \002(\005\022\r\n\005index\030\003 \002(\005\"\245\002\n\006Reward\022\027\n\005i"
      "tems\030\001 \003(\0132\010.sg.Item\022\033\n\007sailors\030\002 \003(\0132\n."
      "sg.Sailor\022\037\n\tfacilitys\030\003 \003(\0132\014.sg.Facili"
      "ty\022\016\n\006models\030\004 \003(\005\022\020\n\010formulas\030\005 \003(\005\022\014\n\004"
      "maps\030\006 \003(\005\022\023\n\013month_cards\030\007 \003(\005\022\031\n\006equip"
      "s\030\010 \003(\0132\t.sg.Equip\022\013\n\003exp\030\t \001(\005\022+\n\016sailo"
      "r_add_exp\030\n \003(\0132\023.sg.pb_pair_int_int\022\027\n\017"
      "treasure_ticket\030\013 \003(\005\022\021\n\tgrow_gift\030\014 \003(\005"
      "\"\270\002\n\013RegionState\022\025\n\rcomfort_grade\030\001 \001(\005\022"
      "\025\n\ritem_capacity\030\002 \001(\005\022\026\n\016equip_capacity"
      "\030\003 \001(\005\022\031\n\021facility_capacity\030\004 \001(\005\022\025\n\rfoo"
      "d_capacity\030\005 \001(\005\022\031\n\021resource_capacity\030\006 "
      "\001(\005\022\034\n\024resource_product_add\030\007 \001(\002\022\036\n\026foo"
      "d_resource_capacity\030\010 \001(\005\022\036\n\026wood_resour"
      "ce_capacity\030\t \001(\005\022\036\n\026iron_resource_capac"
      "ity\030\n \001(\005\022\030\n\020machine_capacity\030\013 \001(\005\"<\n\022S"
      "pecialEventNotify\022\n\n\002id\030\001 \002(\003\022\032\n\006reward\030"
      "\002 \001(\0132\n.sg.Reward*\321\002\n\017GAME_GOODS_TYPE\022\030\n"
      "\024GAME_GOODS_TYPE_ITEM\020\001\022\032\n\026GAME_GOODS_TY"
      "PE_SAILOR\020\002\022\036\n\032GAME_GOODS_TYPE_SHIP_MODE"
      "L\020\003\022\032\n\026GAME_GOODS_TYPE_DEVICE\020\004\022\033\n\027GAME_"
      "GOODS_TYPE_FORMULA\020\005\022\036\n\032GAME_GOODS_TYPE_"
      "MONTH_CARD\020\006\022\027\n\023GAME_GOODS_TYPE_MAP\020\007\022\031\n"
      "\025GAME_GOODS_TYPE_EQUIP\020\010\022#\n\037GAME_GOODS_T"
      "YPE_TREASURE_TICKET\020\t\022\035\n\031GAME_GOODS_TYPE"
      "_GROW_GIFT\020\n\022\027\n\023GAME_GOODS_CUSTOMER\020\013*\347\004"
      "\n\tROOM_TYPE\022\r\n\tROOM_NONE\020\000\022\016\n\nROOM_EMPTY"
      "\020\001\022\023\n\017ROOM_STOREHOUSE\020\002\022\020\n\014ROOM_KITCHEN\020"
      "\003\022\021\n\rROOM_MAGAZINE\020\004\022\016\n\nROOM_BREED\020\005\022\022\n\016"
      "ROOM_CULTIVATE\020\006\022\023\n\017ROOM_RESTAURANT\020\007\022\020\n"
      "\014ROOM_FACTORY\020\010\022\017\n\013ROOM_STATUE\020\t\022\017\n\013ROOM"
      "_SMITHY\020\n\022\016\n\nROOM_POWER\020\013\022\020\n\014ROOM_BEDROO"
      "M\020\014\022\r\n\tROOM_REST\020\r\022\017\n\013ROOM_SHRINE\020\016\022\023\n\017R"
      "OOM_LABORATORY\020\017\022\017\n\013ROOM_VINTRY\020\020\022\016\n\nROO"
      "M_TRAIN\020\021\022\r\n\tROOM_CELL\020\022\022\016\n\nROOM_BOARD\020\023"
      "\022\016\n\nROOM_ENTER\020\024\022\020\n\014ROOM_CAPTAIN\020\025\022\r\n\tRO"
      "OM_TASK\020\026\022\r\n\tROOM_PLAY\020\027\022\016\n\nROOM_CRAFT\020\030"
      "\022\016\n\nROOM_STORE\020\031\022\017\n\013ROOM_SEWING\020\032\022\025\n\021ROO"
      "M_COLLECTION_1\020\034\022\025\n\021ROOM_COLLECTION_2\020\036\022"
      "\025\n\021ROOM_COLLECTION_3\020!\022\r\n\tROOM_WOOD\020e\022\022\n"
      "\016ROOM_STONE_ORE\020f\022\021\n\rROOM_GOLD_ORE\020g\022\021\n\r"
      "ROOM_IRON_ORE\020h*\231\002\n\014SAILOR_STATE\022\025\n\021SAIL"
      "OR_STATE_NONE\020\000\022\025\n\021SAILOR_STATE_IDLE\020\001\022\030"
      "\n\024SAILOR_STATE_WORKING\020e\022\031\n\025SAILOR_STATE"
      "_DO_EVENT\020f\022\030\n\024SAILOR_STATE_COOKING\020g\022\026\n"
      "\021SAILOR_STATE_REST\020\315\001\022\027\n\022SAILOR_STATE_SL"
      "EEP\020\316\001\022#\n\036SAILOR_STATE_SLEEP_WITHOUT_BED"
      "\020\317\001\022\031\n\024SAILOR_STATE_SENDING\020\263\002\022\033\n\026SAILOR"
      "_STATE_DEFENDING\020\350\007*g\n\021SAILOR_SKILL_TYPE"
      "\022\032\n\026SAILOR_SKILL_TYPE_FALL\020\001\022\032\n\026SAILOR_S"
      "KILL_TYPE_BUFF\020\002\022\032\n\026SAILOR_SKILL_TYPE_SE"
      "LF\020\003B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BaseStruct.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BaseStruct_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* GAME_GOODS_TYPE_descriptor() {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseStruct_2eproto::file_level_enum_descriptors[0];
}
bool GAME_GOODS_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ROOM_TYPE_descriptor() {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseStruct_2eproto::file_level_enum_descriptors[1];
}
bool ROOM_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 28:
    case 30:
    case 33:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SAILOR_STATE_descriptor() {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseStruct_2eproto::file_level_enum_descriptors[2];
}
bool SAILOR_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 101:
    case 102:
    case 103:
    case 205:
    case 206:
    case 207:
    case 307:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SAILOR_SKILL_TYPE_descriptor() {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseStruct_2eproto::file_level_enum_descriptors[3];
}
bool SAILOR_SKILL_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void UserRoom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRoom::kIdFieldNumber;
const int UserRoom::kRoomTypeFieldNumber;
const int UserRoom::kComfortFieldNumber;
const int UserRoom::kMachineCapacityFieldNumber;
const int UserRoom::kMachineValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRoom::UserRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_UserRoom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserRoom)
}
UserRoom::UserRoom(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_UserRoom.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserRoom)
}
UserRoom::UserRoom(const UserRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&machine_value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(machine_value_));
  // @@protoc_insertion_point(copy_constructor:sg.UserRoom)
}

void UserRoom::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&machine_value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(machine_value_));
}

UserRoom::~UserRoom() {
  // @@protoc_insertion_point(destructor:sg.UserRoom)
  SharedDtor();
}

void UserRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserRoom::ArenaDtor(void* object) {
  UserRoom* _this = reinterpret_cast< UserRoom* >(object);
  (void)_this;
}
void UserRoom::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserRoom::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRoom& UserRoom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_UserRoom.base);
  return *internal_default_instance();
}


void UserRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&machine_value_) -
        reinterpret_cast<char*>(&id_)) + sizeof(machine_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserRoom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 room_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_room_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 comfort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_comfort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comfort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 machine_capacity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_machine_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 machine_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_machine_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserRoom)
  return false;
#undef DO_
}

void UserRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 room_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_type(), output);
  }

  // optional int32 comfort = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comfort(), output);
  }

  // optional int32 machine_capacity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->machine_capacity(), output);
  }

  // optional int32 machine_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->machine_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserRoom)
}

::google::protobuf::uint8* UserRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 room_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_type(), target);
  }

  // optional int32 comfort = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->comfort(), target);
  }

  // optional int32 machine_capacity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->machine_capacity(), target);
  }

  // optional int32 machine_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->machine_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserRoom)
  return target;
}

size_t UserRoom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.UserRoom)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_room_type()) {
    // required int32 room_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_type());
  }

  return total_size;
}
size_t UserRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 room_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional int32 comfort = 3;
    if (has_comfort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comfort());
    }

    // optional int32 machine_capacity = 4;
    if (has_machine_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->machine_capacity());
    }

    // optional int32 machine_value = 5;
    if (has_machine_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->machine_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserRoom)
    MergeFrom(*source);
  }
}

void UserRoom::MergeFrom(const UserRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      room_type_ = from.room_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      comfort_ = from.comfort_;
    }
    if (cached_has_bits & 0x00000008u) {
      machine_capacity_ = from.machine_capacity_;
    }
    if (cached_has_bits & 0x00000010u) {
      machine_value_ = from.machine_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRoom::CopyFrom(const UserRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserRoom::Swap(UserRoom* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserRoom* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserRoom::UnsafeArenaSwap(UserRoom* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserRoom::InternalSwap(UserRoom* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(room_type_, other->room_type_);
  swap(comfort_, other->comfort_);
  swap(machine_capacity_, other->machine_capacity_);
  swap(machine_value_, other->machine_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserRoom::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Locale::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Locale::kPlaceIdFieldNumber;
const int Locale::kPosTypeFieldNumber;
const int Locale::kPosXFieldNumber;
const int Locale::kPosYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Locale::Locale()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Locale.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Locale)
}
Locale::Locale(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Locale.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Locale)
}
Locale::Locale(const Locale& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&place_id_, &from.place_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&place_id_)) + sizeof(pos_y_));
  // @@protoc_insertion_point(copy_constructor:sg.Locale)
}

void Locale::SharedCtor() {
  ::memset(&place_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&place_id_)) + sizeof(pos_y_));
}

Locale::~Locale() {
  // @@protoc_insertion_point(destructor:sg.Locale)
  SharedDtor();
}

void Locale::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Locale::ArenaDtor(void* object) {
  Locale* _this = reinterpret_cast< Locale* >(object);
  (void)_this;
}
void Locale::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Locale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Locale::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Locale& Locale::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Locale.base);
  return *internal_default_instance();
}


void Locale::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Locale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&place_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_y_) -
        reinterpret_cast<char*>(&place_id_)) + sizeof(pos_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Locale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Locale)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 place_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_place_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pos_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Locale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Locale)
  return false;
#undef DO_
}

void Locale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Locale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 place_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->place_id(), output);
  }

  // required int32 pos_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_type(), output);
  }

  // required int32 pos_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // required int32 pos_y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Locale)
}

::google::protobuf::uint8* Locale::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Locale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 place_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->place_id(), target);
  }

  // required int32 pos_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_type(), target);
  }

  // required int32 pos_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // required int32 pos_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Locale)
  return target;
}

size_t Locale::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Locale)
  size_t total_size = 0;

  if (has_place_id()) {
    // required int32 place_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->place_id());
  }

  if (has_pos_type()) {
    // required int32 pos_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_type());
  }

  if (has_pos_x()) {
    // required int32 pos_x = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_x());
  }

  if (has_pos_y()) {
    // required int32 pos_y = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_y());
  }

  return total_size;
}
size_t Locale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Locale)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 place_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->place_id());

    // required int32 pos_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_type());

    // required int32 pos_x = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_x());

    // required int32 pos_y = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Locale::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Locale)
  GOOGLE_DCHECK_NE(&from, this);
  const Locale* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Locale>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Locale)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Locale)
    MergeFrom(*source);
  }
}

void Locale::MergeFrom(const Locale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Locale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      place_id_ = from.place_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_type_ = from.pos_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_y_ = from.pos_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Locale::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Locale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Locale::CopyFrom(const Locale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Locale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locale::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Locale::Swap(Locale* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Locale* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Locale::UnsafeArenaSwap(Locale* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Locale::InternalSwap(Locale* other) {
  using std::swap;
  swap(place_id_, other->place_id_);
  swap(pos_type_, other->pos_type_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Locale::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void pb_pair_int_int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pb_pair_int_int::kKeyFieldNumber;
const int pb_pair_int_int::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pb_pair_int_int::pb_pair_int_int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.pb_pair_int_int)
}
pb_pair_int_int::pb_pair_int_int(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.pb_pair_int_int)
}
pb_pair_int_int::pb_pair_int_int(const pb_pair_int_int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sg.pb_pair_int_int)
}

void pb_pair_int_int::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

pb_pair_int_int::~pb_pair_int_int() {
  // @@protoc_insertion_point(destructor:sg.pb_pair_int_int)
  SharedDtor();
}

void pb_pair_int_int::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void pb_pair_int_int::ArenaDtor(void* object) {
  pb_pair_int_int* _this = reinterpret_cast< pb_pair_int_int* >(object);
  (void)_this;
}
void pb_pair_int_int::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void pb_pair_int_int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* pb_pair_int_int::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const pb_pair_int_int& pb_pair_int_int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base);
  return *internal_default_instance();
}


void pb_pair_int_int::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.pb_pair_int_int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&key_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool pb_pair_int_int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.pb_pair_int_int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.pb_pair_int_int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.pb_pair_int_int)
  return false;
#undef DO_
}

void pb_pair_int_int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.pb_pair_int_int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.pb_pair_int_int)
}

::google::protobuf::uint8* pb_pair_int_int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.pb_pair_int_int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.pb_pair_int_int)
  return target;
}

size_t pb_pair_int_int::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.pb_pair_int_int)
  size_t total_size = 0;

  if (has_key()) {
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
size_t pb_pair_int_int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.pb_pair_int_int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_pair_int_int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.pb_pair_int_int)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_pair_int_int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pb_pair_int_int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.pb_pair_int_int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.pb_pair_int_int)
    MergeFrom(*source);
  }
}

void pb_pair_int_int::MergeFrom(const pb_pair_int_int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.pb_pair_int_int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void pb_pair_int_int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.pb_pair_int_int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_pair_int_int::CopyFrom(const pb_pair_int_int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.pb_pair_int_int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_pair_int_int::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void pb_pair_int_int::Swap(pb_pair_int_int* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    pb_pair_int_int* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void pb_pair_int_int::UnsafeArenaSwap(pb_pair_int_int* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void pb_pair_int_int::InternalSwap(pb_pair_int_int* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata pb_pair_int_int::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void pb_pair_int_time::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pb_pair_int_time::kKeyFieldNumber;
const int pb_pair_int_time::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pb_pair_int_time::pb_pair_int_time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_time.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.pb_pair_int_time)
}
pb_pair_int_time::pb_pair_int_time(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_time.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.pb_pair_int_time)
}
pb_pair_int_time::pb_pair_int_time(const pb_pair_int_time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&value_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:sg.pb_pair_int_time)
}

void pb_pair_int_time::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value_)) + sizeof(key_));
}

pb_pair_int_time::~pb_pair_int_time() {
  // @@protoc_insertion_point(destructor:sg.pb_pair_int_time)
  SharedDtor();
}

void pb_pair_int_time::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void pb_pair_int_time::ArenaDtor(void* object) {
  pb_pair_int_time* _this = reinterpret_cast< pb_pair_int_time* >(object);
  (void)_this;
}
void pb_pair_int_time::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void pb_pair_int_time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* pb_pair_int_time::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const pb_pair_int_time& pb_pair_int_time::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_time.base);
  return *internal_default_instance();
}


void pb_pair_int_time::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.pb_pair_int_time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_) -
        reinterpret_cast<char*>(&value_)) + sizeof(key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool pb_pair_int_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.pb_pair_int_time)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.pb_pair_int_time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.pb_pair_int_time)
  return false;
#undef DO_
}

void pb_pair_int_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.pb_pair_int_time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required sfixed64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.pb_pair_int_time)
}

::google::protobuf::uint8* pb_pair_int_time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.pb_pair_int_time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required sfixed64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.pb_pair_int_time)
  return target;
}

size_t pb_pair_int_time::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.pb_pair_int_time)
  size_t total_size = 0;

  if (has_value()) {
    // required sfixed64 value = 2;
    total_size += 1 + 8;
  }

  if (has_key()) {
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  return total_size;
}
size_t pb_pair_int_time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.pb_pair_int_time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sfixed64 value = 2;
    total_size += 1 + 8;

    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_pair_int_time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.pb_pair_int_time)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_pair_int_time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pb_pair_int_time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.pb_pair_int_time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.pb_pair_int_time)
    MergeFrom(*source);
  }
}

void pb_pair_int_time::MergeFrom(const pb_pair_int_time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.pb_pair_int_time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void pb_pair_int_time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.pb_pair_int_time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_pair_int_time::CopyFrom(const pb_pair_int_time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.pb_pair_int_time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_pair_int_time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void pb_pair_int_time::Swap(pb_pair_int_time* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    pb_pair_int_time* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void pb_pair_int_time::UnsafeArenaSwap(pb_pair_int_time* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void pb_pair_int_time::InternalSwap(pb_pair_int_time* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(key_, other->key_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata pb_pair_int_time::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void pb_pair_int64_int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pb_pair_int64_int::kKeyFieldNumber;
const int pb_pair_int64_int::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pb_pair_int64_int::pb_pair_int64_int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int64_int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.pb_pair_int64_int)
}
pb_pair_int64_int::pb_pair_int64_int(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_int64_int.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.pb_pair_int64_int)
}
pb_pair_int64_int::pb_pair_int64_int(const pb_pair_int64_int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sg.pb_pair_int64_int)
}

void pb_pair_int64_int::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

pb_pair_int64_int::~pb_pair_int64_int() {
  // @@protoc_insertion_point(destructor:sg.pb_pair_int64_int)
  SharedDtor();
}

void pb_pair_int64_int::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void pb_pair_int64_int::ArenaDtor(void* object) {
  pb_pair_int64_int* _this = reinterpret_cast< pb_pair_int64_int* >(object);
  (void)_this;
}
void pb_pair_int64_int::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void pb_pair_int64_int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* pb_pair_int64_int::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const pb_pair_int64_int& pb_pair_int64_int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_int64_int.base);
  return *internal_default_instance();
}


void pb_pair_int64_int::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.pb_pair_int64_int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&key_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool pb_pair_int64_int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.pb_pair_int64_int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.pb_pair_int64_int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.pb_pair_int64_int)
  return false;
#undef DO_
}

void pb_pair_int64_int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.pb_pair_int64_int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.pb_pair_int64_int)
}

::google::protobuf::uint8* pb_pair_int64_int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.pb_pair_int64_int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.pb_pair_int64_int)
  return target;
}

size_t pb_pair_int64_int::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.pb_pair_int64_int)
  size_t total_size = 0;

  if (has_key()) {
    // required int64 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
size_t pb_pair_int64_int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.pb_pair_int64_int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_pair_int64_int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.pb_pair_int64_int)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_pair_int64_int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pb_pair_int64_int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.pb_pair_int64_int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.pb_pair_int64_int)
    MergeFrom(*source);
  }
}

void pb_pair_int64_int::MergeFrom(const pb_pair_int64_int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.pb_pair_int64_int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void pb_pair_int64_int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.pb_pair_int64_int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_pair_int64_int::CopyFrom(const pb_pair_int64_int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.pb_pair_int64_int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_pair_int64_int::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void pb_pair_int64_int::Swap(pb_pair_int64_int* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    pb_pair_int64_int* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void pb_pair_int64_int::UnsafeArenaSwap(pb_pair_int64_int* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void pb_pair_int64_int::InternalSwap(pb_pair_int64_int* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata pb_pair_int64_int::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void pb_pair_string_int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pb_pair_string_int::kKeyFieldNumber;
const int pb_pair_string_int::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pb_pair_string_int::pb_pair_string_int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_string_int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.pb_pair_string_int)
}
pb_pair_string_int::pb_pair_string_int(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_string_int.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.pb_pair_string_int)
}
pb_pair_string_int::pb_pair_string_int(const pb_pair_string_int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key(),
      GetArenaNoVirtual());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:sg.pb_pair_string_int)
}

void pb_pair_string_int::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

pb_pair_string_int::~pb_pair_string_int() {
  // @@protoc_insertion_point(destructor:sg.pb_pair_string_int)
  SharedDtor();
}

void pb_pair_string_int::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void pb_pair_string_int::ArenaDtor(void* object) {
  pb_pair_string_int* _this = reinterpret_cast< pb_pair_string_int* >(object);
  (void)_this;
}
void pb_pair_string_int::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void pb_pair_string_int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* pb_pair_string_int::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const pb_pair_string_int& pb_pair_string_int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_string_int.base);
  return *internal_default_instance();
}


void pb_pair_string_int::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.pb_pair_string_int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool pb_pair_string_int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.pb_pair_string_int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.pb_pair_string_int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.pb_pair_string_int)
  return false;
#undef DO_
}

void pb_pair_string_int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.pb_pair_string_int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.pb_pair_string_int)
}

::google::protobuf::uint8* pb_pair_string_int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.pb_pair_string_int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.pb_pair_string_int)
  return target;
}

size_t pb_pair_string_int::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.pb_pair_string_int)
  size_t total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
size_t pb_pair_string_int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.pb_pair_string_int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_pair_string_int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.pb_pair_string_int)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_pair_string_int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pb_pair_string_int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.pb_pair_string_int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.pb_pair_string_int)
    MergeFrom(*source);
  }
}

void pb_pair_string_int::MergeFrom(const pb_pair_string_int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.pb_pair_string_int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_key(from.key());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void pb_pair_string_int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.pb_pair_string_int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_pair_string_int::CopyFrom(const pb_pair_string_int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.pb_pair_string_int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_pair_string_int::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void pb_pair_string_int::Swap(pb_pair_string_int* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    pb_pair_string_int* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void pb_pair_string_int::UnsafeArenaSwap(pb_pair_string_int* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void pb_pair_string_int::InternalSwap(pb_pair_string_int* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata pb_pair_string_int::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void pb_pair_int_float::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pb_pair_int_float::kKeyFieldNumber;
const int pb_pair_int_float::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pb_pair_int_float::pb_pair_int_float()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.pb_pair_int_float)
}
pb_pair_int_float::pb_pair_int_float(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.pb_pair_int_float)
}
pb_pair_int_float::pb_pair_int_float(const pb_pair_int_float& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sg.pb_pair_int_float)
}

void pb_pair_int_float::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

pb_pair_int_float::~pb_pair_int_float() {
  // @@protoc_insertion_point(destructor:sg.pb_pair_int_float)
  SharedDtor();
}

void pb_pair_int_float::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void pb_pair_int_float::ArenaDtor(void* object) {
  pb_pair_int_float* _this = reinterpret_cast< pb_pair_int_float* >(object);
  (void)_this;
}
void pb_pair_int_float::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void pb_pair_int_float::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* pb_pair_int_float::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const pb_pair_int_float& pb_pair_int_float::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base);
  return *internal_default_instance();
}


void pb_pair_int_float::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.pb_pair_int_float)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&key_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool pb_pair_int_float::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.pb_pair_int_float)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.pb_pair_int_float)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.pb_pair_int_float)
  return false;
#undef DO_
}

void pb_pair_int_float::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.pb_pair_int_float)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required float value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.pb_pair_int_float)
}

::google::protobuf::uint8* pb_pair_int_float::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.pb_pair_int_float)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.pb_pair_int_float)
  return target;
}

size_t pb_pair_int_float::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.pb_pair_int_float)
  size_t total_size = 0;

  if (has_key()) {
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  if (has_value()) {
    // required float value = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t pb_pair_int_float::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.pb_pair_int_float)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());

    // required float value = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_pair_int_float::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.pb_pair_int_float)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_pair_int_float* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pb_pair_int_float>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.pb_pair_int_float)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.pb_pair_int_float)
    MergeFrom(*source);
  }
}

void pb_pair_int_float::MergeFrom(const pb_pair_int_float& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.pb_pair_int_float)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void pb_pair_int_float::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.pb_pair_int_float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_pair_int_float::CopyFrom(const pb_pair_int_float& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.pb_pair_int_float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_pair_int_float::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void pb_pair_int_float::Swap(pb_pair_int_float* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    pb_pair_int_float* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void pb_pair_int_float::UnsafeArenaSwap(pb_pair_int_float* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void pb_pair_int_float::InternalSwap(pb_pair_int_float* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata pb_pair_int_float::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUuidFieldNumber;
const int UserInfo::kLevelFieldNumber;
const int UserInfo::kNickFieldNumber;
const int UserInfo::kPortraitFieldNumber;
const int UserInfo::kSignatureFieldNumber;
const int UserInfo::kPortraitFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_UserInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserInfo)
}
UserInfo::UserInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_UserInfo.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature(),
      GetArenaNoVirtual());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&portrait_frame_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(portrait_frame_));
  // @@protoc_insertion_point(copy_constructor:sg.UserInfo)
}

void UserInfo::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&portrait_frame_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(portrait_frame_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:sg.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInfo& UserInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_UserInfo.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&portrait_frame_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(portrait_frame_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 portrait = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_portrait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portrait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 portrait_frame = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_portrait_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portrait_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nick(), output);
  }

  // required int32 portrait = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->portrait(), output);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->signature(), output);
  }

  // optional int32 portrait_frame = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->portrait_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick(), target);
  }

  // required int32 portrait = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->portrait(), target);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->signature(), target);
  }

  // optional int32 portrait_frame = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->portrait_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserInfo)
  return target;
}

size_t UserInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.UserInfo)
  size_t total_size = 0;

  if (has_nick()) {
    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (has_signature()) {
    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  if (has_uuid()) {
    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_portrait()) {
    // required int32 portrait = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrait());
  }

  return total_size;
}
size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());

    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());

    // required uint64 uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 portrait = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrait());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 portrait_frame = 6;
  if (has_portrait_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrait_frame());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000002u) {
      set_signature(from.signature());
    }
    if (cached_has_bits & 0x00000004u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      portrait_ = from.portrait_;
    }
    if (cached_has_bits & 0x00000020u) {
      portrait_frame_ = from.portrait_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserInfo::UnsafeArenaSwap(UserInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uuid_, other->uuid_);
  swap(level_, other->level_);
  swap(portrait_, other->portrait_);
  swap(portrait_frame_, other->portrait_frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserState::kGuideValFieldNumber;
const int UserState::kOccupyMonsterShipTimesFieldNumber;
const int UserState::kOccupyPlayerShipTimesFieldNumber;
const int UserState::kOccupySpecialShipTimesFieldNumber;
const int UserState::kMaxOccupyMonsterShipTimesFieldNumber;
const int UserState::kMaxOccupyPlayerShipTimesFieldNumber;
const int UserState::kMaxOccupySpecialShipTimesFieldNumber;
const int UserState::kDailyBuyVitalityTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserState::UserState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_UserState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserState)
}
UserState::UserState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_UserState.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserState)
}
UserState::UserState(const UserState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guide_val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guide_val()) {
    guide_val_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guide_val(),
      GetArenaNoVirtual());
  }
  ::memcpy(&occupy_monster_ship_times_, &from.occupy_monster_ship_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&daily_buy_vitality_times_) -
    reinterpret_cast<char*>(&occupy_monster_ship_times_)) + sizeof(daily_buy_vitality_times_));
  // @@protoc_insertion_point(copy_constructor:sg.UserState)
}

void UserState::SharedCtor() {
  guide_val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&occupy_monster_ship_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&daily_buy_vitality_times_) -
      reinterpret_cast<char*>(&occupy_monster_ship_times_)) + sizeof(daily_buy_vitality_times_));
}

UserState::~UserState() {
  // @@protoc_insertion_point(destructor:sg.UserState)
  SharedDtor();
}

void UserState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  guide_val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserState::ArenaDtor(void* object) {
  UserState* _this = reinterpret_cast< UserState* >(object);
  (void)_this;
}
void UserState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserState::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserState& UserState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_UserState.base);
  return *internal_default_instance();
}


void UserState::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guide_val_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&occupy_monster_ship_times_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&daily_buy_vitality_times_) -
        reinterpret_cast<char*>(&occupy_monster_ship_times_)) + sizeof(daily_buy_vitality_times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes guide_val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guide_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupy_monster_ship_times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_occupy_monster_ship_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupy_monster_ship_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupy_player_ship_times = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_occupy_player_ship_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupy_player_ship_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupy_special_ship_times = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_occupy_special_ship_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupy_special_ship_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_occupy_monster_ship_times = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_max_occupy_monster_ship_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_occupy_monster_ship_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_occupy_player_ship_times = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_occupy_player_ship_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_occupy_player_ship_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_occupy_special_ship_times = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_max_occupy_special_ship_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_occupy_special_ship_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 daily_buy_vitality_times = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_daily_buy_vitality_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_buy_vitality_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserState)
  return false;
#undef DO_
}

void UserState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes guide_val = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->guide_val(), output);
  }

  // optional int32 occupy_monster_ship_times = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->occupy_monster_ship_times(), output);
  }

  // optional int32 occupy_player_ship_times = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->occupy_player_ship_times(), output);
  }

  // optional int32 occupy_special_ship_times = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->occupy_special_ship_times(), output);
  }

  // optional int32 max_occupy_monster_ship_times = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_occupy_monster_ship_times(), output);
  }

  // optional int32 max_occupy_player_ship_times = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_occupy_player_ship_times(), output);
  }

  // optional int32 max_occupy_special_ship_times = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_occupy_special_ship_times(), output);
  }

  // optional int32 daily_buy_vitality_times = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->daily_buy_vitality_times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserState)
}

::google::protobuf::uint8* UserState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes guide_val = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->guide_val(), target);
  }

  // optional int32 occupy_monster_ship_times = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->occupy_monster_ship_times(), target);
  }

  // optional int32 occupy_player_ship_times = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->occupy_player_ship_times(), target);
  }

  // optional int32 occupy_special_ship_times = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->occupy_special_ship_times(), target);
  }

  // optional int32 max_occupy_monster_ship_times = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_occupy_monster_ship_times(), target);
  }

  // optional int32 max_occupy_player_ship_times = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_occupy_player_ship_times(), target);
  }

  // optional int32 max_occupy_special_ship_times = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_occupy_special_ship_times(), target);
  }

  // optional int32 daily_buy_vitality_times = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->daily_buy_vitality_times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserState)
  return target;
}

size_t UserState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes guide_val = 2;
    if (has_guide_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guide_val());
    }

    // optional int32 occupy_monster_ship_times = 3;
    if (has_occupy_monster_ship_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupy_monster_ship_times());
    }

    // optional int32 occupy_player_ship_times = 4;
    if (has_occupy_player_ship_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupy_player_ship_times());
    }

    // optional int32 occupy_special_ship_times = 5;
    if (has_occupy_special_ship_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupy_special_ship_times());
    }

    // optional int32 max_occupy_monster_ship_times = 6;
    if (has_max_occupy_monster_ship_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_occupy_monster_ship_times());
    }

    // optional int32 max_occupy_player_ship_times = 7;
    if (has_max_occupy_player_ship_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_occupy_player_ship_times());
    }

    // optional int32 max_occupy_special_ship_times = 8;
    if (has_max_occupy_special_ship_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_occupy_special_ship_times());
    }

    // optional int32 daily_buy_vitality_times = 9;
    if (has_daily_buy_vitality_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_buy_vitality_times());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserState)
  GOOGLE_DCHECK_NE(&from, this);
  const UserState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserState)
    MergeFrom(*source);
  }
}

void UserState::MergeFrom(const UserState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_guide_val(from.guide_val());
    }
    if (cached_has_bits & 0x00000002u) {
      occupy_monster_ship_times_ = from.occupy_monster_ship_times_;
    }
    if (cached_has_bits & 0x00000004u) {
      occupy_player_ship_times_ = from.occupy_player_ship_times_;
    }
    if (cached_has_bits & 0x00000008u) {
      occupy_special_ship_times_ = from.occupy_special_ship_times_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_occupy_monster_ship_times_ = from.max_occupy_monster_ship_times_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_occupy_player_ship_times_ = from.max_occupy_player_ship_times_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_occupy_special_ship_times_ = from.max_occupy_special_ship_times_;
    }
    if (cached_has_bits & 0x00000080u) {
      daily_buy_vitality_times_ = from.daily_buy_vitality_times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserState::CopyFrom(const UserState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserState::IsInitialized() const {
  return true;
}

void UserState::Swap(UserState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserState* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserState::UnsafeArenaSwap(UserState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserState::InternalSwap(UserState* other) {
  using std::swap;
  guide_val_.Swap(&other->guide_val_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(occupy_monster_ship_times_, other->occupy_monster_ship_times_);
  swap(occupy_player_ship_times_, other->occupy_player_ship_times_);
  swap(occupy_special_ship_times_, other->occupy_special_ship_times_);
  swap(max_occupy_monster_ship_times_, other->max_occupy_monster_ship_times_);
  swap(max_occupy_player_ship_times_, other->max_occupy_player_ship_times_);
  swap(max_occupy_special_ship_times_, other->max_occupy_special_ship_times_);
  swap(daily_buy_vitality_times_, other->daily_buy_vitality_times_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserState::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Equip_SpecialAttribute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Equip_SpecialAttribute::kIdFieldNumber;
const int Equip_SpecialAttribute::kTargetFieldNumber;
const int Equip_SpecialAttribute::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Equip_SpecialAttribute::Equip_SpecialAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Equip_SpecialAttribute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Equip.SpecialAttribute)
}
Equip_SpecialAttribute::Equip_SpecialAttribute(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Equip_SpecialAttribute.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Equip.SpecialAttribute)
}
Equip_SpecialAttribute::Equip_SpecialAttribute(const Equip_SpecialAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sg.Equip.SpecialAttribute)
}

void Equip_SpecialAttribute::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

Equip_SpecialAttribute::~Equip_SpecialAttribute() {
  // @@protoc_insertion_point(destructor:sg.Equip.SpecialAttribute)
  SharedDtor();
}

void Equip_SpecialAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Equip_SpecialAttribute::ArenaDtor(void* object) {
  Equip_SpecialAttribute* _this = reinterpret_cast< Equip_SpecialAttribute* >(object);
  (void)_this;
}
void Equip_SpecialAttribute::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Equip_SpecialAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Equip_SpecialAttribute::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Equip_SpecialAttribute& Equip_SpecialAttribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Equip_SpecialAttribute.base);
  return *internal_default_instance();
}


void Equip_SpecialAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Equip.SpecialAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&id_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Equip_SpecialAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Equip.SpecialAttribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Equip.SpecialAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Equip.SpecialAttribute)
  return false;
#undef DO_
}

void Equip_SpecialAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Equip.SpecialAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 target = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target(), output);
  }

  // required float value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Equip.SpecialAttribute)
}

::google::protobuf::uint8* Equip_SpecialAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Equip.SpecialAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 target = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target(), target);
  }

  // required float value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Equip.SpecialAttribute)
  return target;
}

size_t Equip_SpecialAttribute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Equip.SpecialAttribute)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_target()) {
    // required int32 target = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  if (has_value()) {
    // required float value = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Equip_SpecialAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Equip.SpecialAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 target = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());

    // required float value = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Equip_SpecialAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Equip.SpecialAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const Equip_SpecialAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Equip_SpecialAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Equip.SpecialAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Equip.SpecialAttribute)
    MergeFrom(*source);
  }
}

void Equip_SpecialAttribute::MergeFrom(const Equip_SpecialAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Equip.SpecialAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Equip_SpecialAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Equip.SpecialAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equip_SpecialAttribute::CopyFrom(const Equip_SpecialAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Equip.SpecialAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip_SpecialAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Equip_SpecialAttribute::Swap(Equip_SpecialAttribute* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Equip_SpecialAttribute* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Equip_SpecialAttribute::UnsafeArenaSwap(Equip_SpecialAttribute* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Equip_SpecialAttribute::InternalSwap(Equip_SpecialAttribute* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(target_, other->target_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Equip_SpecialAttribute::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Equip_EquipAttributeSlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Equip_EquipAttributeSlot::kIdFieldNumber;
const int Equip_EquipAttributeSlot::kTypeFieldNumber;
const int Equip_EquipAttributeSlot::kTypeidFieldNumber;
const int Equip_EquipAttributeSlot::kValueFieldNumber;
const int Equip_EquipAttributeSlot::kRefineTimesFieldNumber;
const int Equip_EquipAttributeSlot::kBigSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Equip_EquipAttributeSlot::Equip_EquipAttributeSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Equip_EquipAttributeSlot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Equip.EquipAttributeSlot)
}
Equip_EquipAttributeSlot::Equip_EquipAttributeSlot(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Equip_EquipAttributeSlot.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Equip.EquipAttributeSlot)
}
Equip_EquipAttributeSlot::Equip_EquipAttributeSlot(const Equip_EquipAttributeSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&big_success_) -
    reinterpret_cast<char*>(&id_)) + sizeof(big_success_));
  // @@protoc_insertion_point(copy_constructor:sg.Equip.EquipAttributeSlot)
}

void Equip_EquipAttributeSlot::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_success_) -
      reinterpret_cast<char*>(&id_)) + sizeof(big_success_));
}

Equip_EquipAttributeSlot::~Equip_EquipAttributeSlot() {
  // @@protoc_insertion_point(destructor:sg.Equip.EquipAttributeSlot)
  SharedDtor();
}

void Equip_EquipAttributeSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Equip_EquipAttributeSlot::ArenaDtor(void* object) {
  Equip_EquipAttributeSlot* _this = reinterpret_cast< Equip_EquipAttributeSlot* >(object);
  (void)_this;
}
void Equip_EquipAttributeSlot::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Equip_EquipAttributeSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Equip_EquipAttributeSlot::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Equip_EquipAttributeSlot& Equip_EquipAttributeSlot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Equip_EquipAttributeSlot.base);
  return *internal_default_instance();
}


void Equip_EquipAttributeSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Equip.EquipAttributeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&big_success_) -
        reinterpret_cast<char*>(&id_)) + sizeof(big_success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Equip_EquipAttributeSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Equip.EquipAttributeSlot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 refine_times = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_refine_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool big_success = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_big_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &big_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Equip.EquipAttributeSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Equip.EquipAttributeSlot)
  return false;
#undef DO_
}

void Equip_EquipAttributeSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Equip.EquipAttributeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 typeid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeid_(), output);
  }

  // required float value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  // required int32 refine_times = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refine_times(), output);
  }

  // optional bool big_success = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->big_success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Equip.EquipAttributeSlot)
}

::google::protobuf::uint8* Equip_EquipAttributeSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Equip.EquipAttributeSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 typeid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeid_(), target);
  }

  // required float value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  // required int32 refine_times = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refine_times(), target);
  }

  // optional bool big_success = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->big_success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Equip.EquipAttributeSlot)
  return target;
}

size_t Equip_EquipAttributeSlot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Equip.EquipAttributeSlot)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_typeid_()) {
    // required int32 typeid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_value()) {
    // required float value = 4;
    total_size += 1 + 4;
  }

  if (has_refine_times()) {
    // required int32 refine_times = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refine_times());
  }

  return total_size;
}
size_t Equip_EquipAttributeSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Equip.EquipAttributeSlot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 typeid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required float value = 4;
    total_size += 1 + 4;

    // required int32 refine_times = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refine_times());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool big_success = 6;
  if (has_big_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Equip_EquipAttributeSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Equip.EquipAttributeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const Equip_EquipAttributeSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Equip_EquipAttributeSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Equip.EquipAttributeSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Equip.EquipAttributeSlot)
    MergeFrom(*source);
  }
}

void Equip_EquipAttributeSlot::MergeFrom(const Equip_EquipAttributeSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Equip.EquipAttributeSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      refine_times_ = from.refine_times_;
    }
    if (cached_has_bits & 0x00000020u) {
      big_success_ = from.big_success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Equip_EquipAttributeSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Equip.EquipAttributeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equip_EquipAttributeSlot::CopyFrom(const Equip_EquipAttributeSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Equip.EquipAttributeSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip_EquipAttributeSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Equip_EquipAttributeSlot::Swap(Equip_EquipAttributeSlot* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Equip_EquipAttributeSlot* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Equip_EquipAttributeSlot::UnsafeArenaSwap(Equip_EquipAttributeSlot* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Equip_EquipAttributeSlot::InternalSwap(Equip_EquipAttributeSlot* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(typeid__, other->typeid__);
  swap(value_, other->value_);
  swap(refine_times_, other->refine_times_);
  swap(big_success_, other->big_success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Equip_EquipAttributeSlot::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Equip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Equip::kIdFieldNumber;
const int Equip::kTypeidFieldNumber;
const int Equip::kQualityFieldNumber;
const int Equip::kStateFieldNumber;
const int Equip::kBelongToFieldNumber;
const int Equip::kAttributeFieldNumber;
const int Equip::kSpecialAttrFieldNumber;
const int Equip::kAttrSlotsFieldNumber;
const int Equip::kQualityRefineTimesFieldNumber;
const int Equip::kSkillFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Equip::Equip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Equip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Equip)
}
Equip::Equip(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attribute_(arena),
  special_attr_(arena),
  attr_slots_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Equip.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Equip)
}
Equip::Equip(const Equip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      special_attr_(from.special_attr_),
      attr_slots_(from.attr_slots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_) -
    reinterpret_cast<char*>(&id_)) + sizeof(skill_));
  // @@protoc_insertion_point(copy_constructor:sg.Equip)
}

void Equip::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_) -
      reinterpret_cast<char*>(&id_)) + sizeof(skill_));
}

Equip::~Equip() {
  // @@protoc_insertion_point(destructor:sg.Equip)
  SharedDtor();
}

void Equip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Equip::ArenaDtor(void* object) {
  Equip* _this = reinterpret_cast< Equip* >(object);
  (void)_this;
}
void Equip::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Equip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Equip::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Equip& Equip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Equip.base);
  return *internal_default_instance();
}


void Equip::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Equip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  special_attr_.Clear();
  attr_slots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skill_) -
        reinterpret_cast<char*>(&id_)) + sizeof(skill_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Equip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 belong_to = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_belong_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belong_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_float attribute = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Equip.SpecialAttribute special_attr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_special_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Equip.EquipAttributeSlot attr_slots = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_attr_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quality_refine_times = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_quality_refine_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_refine_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 skill = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_skill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Equip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Equip)
  return false;
#undef DO_
}

void Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Equip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // required int32 quality = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // required int32 belong_to = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->belong_to(), output);
  }

  // repeated .sg.pb_pair_int_float attribute = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->attribute(static_cast<int>(i)),
      output);
  }

  // repeated .sg.Equip.SpecialAttribute special_attr = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->special_attr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->special_attr(static_cast<int>(i)),
      output);
  }

  // repeated .sg.Equip.EquipAttributeSlot attr_slots = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attr_slots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->attr_slots(static_cast<int>(i)),
      output);
  }

  // optional int32 quality_refine_times = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->quality_refine_times(), output);
  }

  // optional int64 skill = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->skill(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Equip)
}

::google::protobuf::uint8* Equip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Equip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // required int32 quality = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // required int32 belong_to = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->belong_to(), target);
  }

  // repeated .sg.pb_pair_int_float attribute = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->attribute(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.Equip.SpecialAttribute special_attr = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->special_attr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->special_attr(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.Equip.EquipAttributeSlot attr_slots = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attr_slots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->attr_slots(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 quality_refine_times = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->quality_refine_times(), target);
  }

  // optional int64 skill = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->skill(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Equip)
  return target;
}

size_t Equip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Equip)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_quality()) {
    // required int32 quality = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  if (has_state()) {
    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_belong_to()) {
    // required int32 belong_to = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belong_to());
  }

  return total_size;
}
size_t Equip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Equip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 quality = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());

    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 belong_to = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belong_to());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.pb_pair_int_float attribute = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  // repeated .sg.Equip.SpecialAttribute special_attr = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->special_attr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->special_attr(static_cast<int>(i)));
    }
  }

  // repeated .sg.Equip.EquipAttributeSlot attr_slots = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->attr_slots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->attr_slots(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional int32 quality_refine_times = 9;
    if (has_quality_refine_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality_refine_times());
    }

    // optional int64 skill = 10;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skill());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Equip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Equip)
  GOOGLE_DCHECK_NE(&from, this);
  const Equip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Equip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Equip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Equip)
    MergeFrom(*source);
  }
}

void Equip::MergeFrom(const Equip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Equip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  special_attr_.MergeFrom(from.special_attr_);
  attr_slots_.MergeFrom(from.attr_slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000004u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      belong_to_ = from.belong_to_;
    }
    if (cached_has_bits & 0x00000020u) {
      quality_refine_times_ = from.quality_refine_times_;
    }
    if (cached_has_bits & 0x00000040u) {
      skill_ = from.skill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Equip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Equip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equip::CopyFrom(const Equip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Equip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attribute())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->special_attr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attr_slots())) return false;
  return true;
}

void Equip::Swap(Equip* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Equip* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Equip::UnsafeArenaSwap(Equip* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Equip::InternalSwap(Equip* other) {
  using std::swap;
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
  CastToBase(&special_attr_)->InternalSwap(CastToBase(&other->special_attr_));
  CastToBase(&attr_slots_)->InternalSwap(CastToBase(&other->attr_slots_));
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(quality_, other->quality_);
  swap(state_, other->state_);
  swap(belong_to_, other->belong_to_);
  swap(quality_refine_times_, other->quality_refine_times_);
  swap(skill_, other->skill_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Equip::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SailorSkill::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SailorSkill::kSlotidFieldNumber;
const int SailorSkill::kTypeFieldNumber;
const int SailorSkill::kStateFieldNumber;
const int SailorSkill::kSkillidFieldNumber;
const int SailorSkill::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SailorSkill::SailorSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_SailorSkill.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SailorSkill)
}
SailorSkill::SailorSkill(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_SailorSkill.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SailorSkill)
}
SailorSkill::SailorSkill(const SailorSkill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slotid_, &from.slotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&slotid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:sg.SailorSkill)
}

void SailorSkill::SharedCtor() {
  ::memset(&slotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&slotid_)) + sizeof(level_));
}

SailorSkill::~SailorSkill() {
  // @@protoc_insertion_point(destructor:sg.SailorSkill)
  SharedDtor();
}

void SailorSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SailorSkill::ArenaDtor(void* object) {
  SailorSkill* _this = reinterpret_cast< SailorSkill* >(object);
  (void)_this;
}
void SailorSkill::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SailorSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SailorSkill::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SailorSkill& SailorSkill::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_SailorSkill.base);
  return *internal_default_instance();
}


void SailorSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SailorSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&slotid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&slotid_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SailorSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SailorSkill)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 slotid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_slotid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 skillid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SailorSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SailorSkill)
  return false;
#undef DO_
}

void SailorSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SailorSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 slotid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slotid(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // required uint64 skillid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->skillid(), output);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SailorSkill)
}

::google::protobuf::uint8* SailorSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SailorSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 slotid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slotid(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // required uint64 skillid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->skillid(), target);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SailorSkill)
  return target;
}

size_t SailorSkill::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.SailorSkill)
  size_t total_size = 0;

  if (has_slotid()) {
    // required int32 slotid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slotid());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_skillid()) {
    // required uint64 skillid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->skillid());
  }

  if (has_state()) {
    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_level()) {
    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t SailorSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SailorSkill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 slotid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slotid());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required uint64 skillid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->skillid());

    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SailorSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SailorSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const SailorSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SailorSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SailorSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SailorSkill)
    MergeFrom(*source);
  }
}

void SailorSkill::MergeFrom(const SailorSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SailorSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      slotid_ = from.slotid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SailorSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SailorSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SailorSkill::CopyFrom(const SailorSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SailorSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SailorSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void SailorSkill::Swap(SailorSkill* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SailorSkill* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SailorSkill::UnsafeArenaSwap(SailorSkill* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SailorSkill::InternalSwap(SailorSkill* other) {
  using std::swap;
  swap(slotid_, other->slotid_);
  swap(type_, other->type_);
  swap(skillid_, other->skillid_);
  swap(state_, other->state_);
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SailorSkill::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SailorFarmSkill::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SailorFarmSkill::kIdFieldNumber;
const int SailorFarmSkill::kLevelFieldNumber;
const int SailorFarmSkill::kExpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SailorFarmSkill::SailorFarmSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_SailorFarmSkill.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SailorFarmSkill)
}
SailorFarmSkill::SailorFarmSkill(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_SailorFarmSkill.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SailorFarmSkill)
}
SailorFarmSkill::SailorFarmSkill(const SailorFarmSkill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:sg.SailorFarmSkill)
}

void SailorFarmSkill::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exp_));
}

SailorFarmSkill::~SailorFarmSkill() {
  // @@protoc_insertion_point(destructor:sg.SailorFarmSkill)
  SharedDtor();
}

void SailorFarmSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SailorFarmSkill::ArenaDtor(void* object) {
  SailorFarmSkill* _this = reinterpret_cast< SailorFarmSkill* >(object);
  (void)_this;
}
void SailorFarmSkill::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SailorFarmSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SailorFarmSkill::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SailorFarmSkill& SailorFarmSkill::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_SailorFarmSkill.base);
  return *internal_default_instance();
}


void SailorFarmSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SailorFarmSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(exp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SailorFarmSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SailorFarmSkill)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SailorFarmSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SailorFarmSkill)
  return false;
#undef DO_
}

void SailorFarmSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SailorFarmSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 exp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SailorFarmSkill)
}

::google::protobuf::uint8* SailorFarmSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SailorFarmSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 exp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SailorFarmSkill)
  return target;
}

size_t SailorFarmSkill::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.SailorFarmSkill)
  size_t total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_exp()) {
    // required int32 exp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  return total_size;
}
size_t SailorFarmSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SailorFarmSkill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 exp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SailorFarmSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SailorFarmSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const SailorFarmSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SailorFarmSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SailorFarmSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SailorFarmSkill)
    MergeFrom(*source);
  }
}

void SailorFarmSkill::MergeFrom(const SailorFarmSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SailorFarmSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      exp_ = from.exp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SailorFarmSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SailorFarmSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SailorFarmSkill::CopyFrom(const SailorFarmSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SailorFarmSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SailorFarmSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SailorFarmSkill::Swap(SailorFarmSkill* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SailorFarmSkill* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SailorFarmSkill::UnsafeArenaSwap(SailorFarmSkill* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SailorFarmSkill::InternalSwap(SailorFarmSkill* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(exp_, other->exp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SailorFarmSkill::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SailorTalent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SailorTalent::kIdFieldNumber;
const int SailorTalent::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SailorTalent::SailorTalent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_SailorTalent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SailorTalent)
}
SailorTalent::SailorTalent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_SailorTalent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SailorTalent)
}
SailorTalent::SailorTalent(const SailorTalent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:sg.SailorTalent)
}

void SailorTalent::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
}

SailorTalent::~SailorTalent() {
  // @@protoc_insertion_point(destructor:sg.SailorTalent)
  SharedDtor();
}

void SailorTalent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SailorTalent::ArenaDtor(void* object) {
  SailorTalent* _this = reinterpret_cast< SailorTalent* >(object);
  (void)_this;
}
void SailorTalent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SailorTalent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SailorTalent::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SailorTalent& SailorTalent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_SailorTalent.base);
  return *internal_default_instance();
}


void SailorTalent::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SailorTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&id_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SailorTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SailorTalent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SailorTalent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SailorTalent)
  return false;
#undef DO_
}

void SailorTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SailorTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SailorTalent)
}

::google::protobuf::uint8* SailorTalent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SailorTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SailorTalent)
  return target;
}

size_t SailorTalent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.SailorTalent)
  size_t total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t SailorTalent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SailorTalent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SailorTalent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SailorTalent)
  GOOGLE_DCHECK_NE(&from, this);
  const SailorTalent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SailorTalent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SailorTalent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SailorTalent)
    MergeFrom(*source);
  }
}

void SailorTalent::MergeFrom(const SailorTalent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SailorTalent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SailorTalent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SailorTalent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SailorTalent::CopyFrom(const SailorTalent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SailorTalent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SailorTalent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SailorTalent::Swap(SailorTalent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SailorTalent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SailorTalent::UnsafeArenaSwap(SailorTalent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SailorTalent::InternalSwap(SailorTalent* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SailorTalent::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sailor::InitAsDefaultInstance() {
  ::sg::_Sailor_default_instance_._instance.get_mutable()->talent_ = const_cast< ::sg::SailorTalent*>(
      ::sg::SailorTalent::internal_default_instance());
}
void Sailor::unsafe_arena_set_allocated_talent(
    ::sg::SailorTalent* talent) {
  if (GetArenaNoVirtual() == NULL) {
    delete talent_;
  }
  talent_ = talent;
  if (talent) {
    set_has_talent();
  } else {
    clear_has_talent();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.Sailor.talent)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sailor::kIdFieldNumber;
const int Sailor::kTypeidFieldNumber;
const int Sailor::kStateFieldNumber;
const int Sailor::kPlaceFieldNumber;
const int Sailor::kFacilityIdFieldNumber;
const int Sailor::kLevelFieldNumber;
const int Sailor::kStarFieldNumber;
const int Sailor::kPhaseFieldNumber;
const int Sailor::kHpLostFieldNumber;
const int Sailor::kVimFieldNumber;
const int Sailor::kExpFieldNumber;
const int Sailor::kOrderidFieldNumber;
const int Sailor::kLastRestTimeFieldNumber;
const int Sailor::kJobFieldNumber;
const int Sailor::kAttributeFieldNumber;
const int Sailor::kAptitudeFieldNumber;
const int Sailor::kEquipFieldNumber;
const int Sailor::kSkillsFieldNumber;
const int Sailor::kFarmSkillsFieldNumber;
const int Sailor::kTalentFieldNumber;
const int Sailor::kPracticeFieldNumber;
const int Sailor::kRegionFieldNumber;
const int Sailor::kHungerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sailor::Sailor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Sailor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Sailor)
}
Sailor::Sailor(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attribute_(arena),
  aptitude_(arena),
  equip_(arena),
  skills_(arena),
  farm_skills_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Sailor.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Sailor)
}
Sailor::Sailor(const Sailor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      aptitude_(from.aptitude_),
      equip_(from.equip_),
      skills_(from.skills_),
      farm_skills_(from.farm_skills_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_talent()) {
    talent_ = new ::sg::SailorTalent(*from.talent_);
  } else {
    talent_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hunger_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hunger_));
  // @@protoc_insertion_point(copy_constructor:sg.Sailor)
}

void Sailor::SharedCtor() {
  ::memset(&talent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hunger_) -
      reinterpret_cast<char*>(&talent_)) + sizeof(hunger_));
}

Sailor::~Sailor() {
  // @@protoc_insertion_point(destructor:sg.Sailor)
  SharedDtor();
}

void Sailor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete talent_;
}

void Sailor::ArenaDtor(void* object) {
  Sailor* _this = reinterpret_cast< Sailor* >(object);
  (void)_this;
}
void Sailor::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Sailor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sailor::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sailor& Sailor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Sailor.base);
  return *internal_default_instance();
}


void Sailor::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Sailor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  aptitude_.Clear();
  equip_.Clear();
  skills_.Clear();
  farm_skills_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(talent_ != NULL);
    talent_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&star_) -
        reinterpret_cast<char*>(&id_)) + sizeof(star_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&practice_) -
        reinterpret_cast<char*>(&phase_)) + sizeof(practice_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hunger_) -
        reinterpret_cast<char*>(&region_)) + sizeof(hunger_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sailor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Sailor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.SAILOR_STATE state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::SAILOR_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::SAILOR_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 place = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_place();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &place_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 facility_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_facility_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facility_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 phase = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hp_lost = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_hp_lost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float vim = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_vim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 orderid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_orderid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 last_rest_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_last_rest_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_rest_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 job = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_job();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_float attribute = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_float aptitude = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_aptitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Equip equip = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SailorSkill skills = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SailorFarmSkill farm_skills = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_farm_skills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.SailorTalent talent = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_talent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 practice = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_practice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 region = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hunger = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
          set_has_hunger();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hunger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Sailor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Sailor)
  return false;
#undef DO_
}

void Sailor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Sailor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // required .sg.SAILOR_STATE state = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required uint64 place = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->place(), output);
  }

  // required int32 facility_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->facility_id(), output);
  }

  // required int32 level = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // required int32 star = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->star(), output);
  }

  // required int32 phase = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->phase(), output);
  }

  // required int32 hp_lost = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hp_lost(), output);
  }

  // required float vim = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->vim(), output);
  }

  // required int32 exp = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->exp(), output);
  }

  // optional int32 orderid = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->orderid(), output);
  }

  // optional sfixed64 last_rest_time = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(14, this->last_rest_time(), output);
  }

  // optional int32 job = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->job(), output);
  }

  // repeated .sg.pb_pair_int_float attribute = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->attribute(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_float aptitude = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aptitude_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->aptitude(static_cast<int>(i)),
      output);
  }

  // repeated .sg.Equip equip = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equip_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->equip(static_cast<int>(i)),
      output);
  }

  // repeated .sg.SailorSkill skills = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skills_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->skills(static_cast<int>(i)),
      output);
  }

  // repeated .sg.SailorFarmSkill farm_skills = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->farm_skills_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->farm_skills(static_cast<int>(i)),
      output);
  }

  // optional .sg.SailorTalent talent = 21;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_talent(), output);
  }

  // optional int32 practice = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->practice(), output);
  }

  // optional int32 region = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->region(), output);
  }

  // optional float hunger = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->hunger(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Sailor)
}

::google::protobuf::uint8* Sailor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Sailor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // required .sg.SAILOR_STATE state = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required uint64 place = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->place(), target);
  }

  // required int32 facility_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->facility_id(), target);
  }

  // required int32 level = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // required int32 star = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->star(), target);
  }

  // required int32 phase = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->phase(), target);
  }

  // required int32 hp_lost = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hp_lost(), target);
  }

  // required float vim = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->vim(), target);
  }

  // required int32 exp = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->exp(), target);
  }

  // optional int32 orderid = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->orderid(), target);
  }

  // optional sfixed64 last_rest_time = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(14, this->last_rest_time(), target);
  }

  // optional int32 job = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->job(), target);
  }

  // repeated .sg.pb_pair_int_float attribute = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->attribute(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_float aptitude = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aptitude_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->aptitude(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.Equip equip = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equip_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->equip(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.SailorSkill skills = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skills_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->skills(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.SailorFarmSkill farm_skills = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->farm_skills_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->farm_skills(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.SailorTalent talent = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_talent(), deterministic, target);
  }

  // optional int32 practice = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->practice(), target);
  }

  // optional int32 region = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->region(), target);
  }

  // optional float hunger = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->hunger(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Sailor)
  return target;
}

size_t Sailor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Sailor)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_place()) {
    // required uint64 place = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->place());
  }

  if (has_state()) {
    // required .sg.SAILOR_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_facility_id()) {
    // required int32 facility_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facility_id());
  }

  if (has_level()) {
    // required int32 level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_star()) {
    // required int32 star = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_phase()) {
    // required int32 phase = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phase());
  }

  if (has_hp_lost()) {
    // required int32 hp_lost = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp_lost());
  }

  if (has_vim()) {
    // required float vim = 10;
    total_size += 1 + 4;
  }

  if (has_exp()) {
    // required int32 exp = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  return total_size;
}
size_t Sailor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Sailor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000ffe) ^ 0x00000ffe) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required uint64 place = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->place());

    // required .sg.SAILOR_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required int32 facility_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facility_id());

    // required int32 level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 star = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required int32 phase = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phase());

    // required int32 hp_lost = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp_lost());

    // required float vim = 10;
    total_size += 1 + 4;

    // required int32 exp = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.pb_pair_int_float attribute = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_float aptitude = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->aptitude_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->aptitude(static_cast<int>(i)));
    }
  }

  // repeated .sg.Equip equip = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->equip_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equip(static_cast<int>(i)));
    }
  }

  // repeated .sg.SailorSkill skills = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->skills_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->skills(static_cast<int>(i)));
    }
  }

  // repeated .sg.SailorFarmSkill farm_skills = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->farm_skills_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->farm_skills(static_cast<int>(i)));
    }
  }

  // optional .sg.SailorTalent talent = 21;
  if (has_talent()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *talent_);
  }

  if (_has_bits_[8 / 32] & 61440u) {
    // optional sfixed64 last_rest_time = 14;
    if (has_last_rest_time()) {
      total_size += 1 + 8;
    }

    // optional int32 orderid = 13;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional int32 job = 15;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional int32 practice = 22;
    if (has_practice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practice());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 region = 23;
    if (has_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }

    // optional float hunger = 24;
    if (has_hunger()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sailor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Sailor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sailor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sailor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Sailor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Sailor)
    MergeFrom(*source);
  }
}

void Sailor::MergeFrom(const Sailor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Sailor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  aptitude_.MergeFrom(from.aptitude_);
  equip_.MergeFrom(from.equip_);
  skills_.MergeFrom(from.skills_);
  farm_skills_.MergeFrom(from.farm_skills_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_talent()->::sg::SailorTalent::MergeFrom(from.talent());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000008u) {
      place_ = from.place_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      facility_id_ = from.facility_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000080u) {
      star_ = from.star_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000200u) {
      hp_lost_ = from.hp_lost_;
    }
    if (cached_has_bits & 0x00000400u) {
      vim_ = from.vim_;
    }
    if (cached_has_bits & 0x00000800u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00001000u) {
      last_rest_time_ = from.last_rest_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00004000u) {
      job_ = from.job_;
    }
    if (cached_has_bits & 0x00008000u) {
      practice_ = from.practice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00020000u) {
      hunger_ = from.hunger_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sailor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Sailor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sailor::CopyFrom(const Sailor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Sailor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sailor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000ffe) != 0x00000ffe) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attribute())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->aptitude())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equip())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skills())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->farm_skills())) return false;
  if (has_talent()) {
    if (!this->talent_->IsInitialized()) return false;
  }
  return true;
}

void Sailor::Swap(Sailor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Sailor* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Sailor::UnsafeArenaSwap(Sailor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Sailor::InternalSwap(Sailor* other) {
  using std::swap;
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
  CastToBase(&aptitude_)->InternalSwap(CastToBase(&other->aptitude_));
  CastToBase(&equip_)->InternalSwap(CastToBase(&other->equip_));
  CastToBase(&skills_)->InternalSwap(CastToBase(&other->skills_));
  CastToBase(&farm_skills_)->InternalSwap(CastToBase(&other->farm_skills_));
  swap(talent_, other->talent_);
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(place_, other->place_);
  swap(state_, other->state_);
  swap(facility_id_, other->facility_id_);
  swap(level_, other->level_);
  swap(star_, other->star_);
  swap(phase_, other->phase_);
  swap(hp_lost_, other->hp_lost_);
  swap(vim_, other->vim_);
  swap(exp_, other->exp_);
  swap(last_rest_time_, other->last_rest_time_);
  swap(orderid_, other->orderid_);
  swap(job_, other->job_);
  swap(practice_, other->practice_);
  swap(region_, other->region_);
  swap(hunger_, other->hunger_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sailor::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NPC::InitAsDefaultInstance() {
  ::sg::_NPC_default_instance_._instance.get_mutable()->locale_ = const_cast< ::sg::Locale*>(
      ::sg::Locale::internal_default_instance());
}
void NPC::unsafe_arena_set_allocated_locale(
    ::sg::Locale* locale) {
  if (GetArenaNoVirtual() == NULL) {
    delete locale_;
  }
  locale_ = locale;
  if (locale) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.NPC.locale)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NPC::kIdFieldNumber;
const int NPC::kStateFieldNumber;
const int NPC::kLocaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NPC::NPC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_NPC.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.NPC)
}
NPC::NPC(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_NPC.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.NPC)
}
NPC::NPC(const NPC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_locale()) {
    locale_ = new ::sg::Locale(*from.locale_);
  } else {
    locale_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.NPC)
}

void NPC::SharedCtor() {
  ::memset(&locale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&locale_)) + sizeof(state_));
}

NPC::~NPC() {
  // @@protoc_insertion_point(destructor:sg.NPC)
  SharedDtor();
}

void NPC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete locale_;
}

void NPC::ArenaDtor(void* object) {
  NPC* _this = reinterpret_cast< NPC* >(object);
  (void)_this;
}
void NPC::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NPC::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NPC& NPC::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_NPC.base);
  return *internal_default_instance();
}


void NPC::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.NPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(locale_ != NULL);
    locale_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.NPC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.Locale locale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.NPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.NPC)
  return false;
#undef DO_
}

void NPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.NPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required .sg.Locale locale = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_locale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.NPC)
}

::google::protobuf::uint8* NPC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.NPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required .sg.Locale locale = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_locale(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.NPC)
  return target;
}

size_t NPC::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.NPC)
  size_t total_size = 0;

  if (has_locale()) {
    // required .sg.Locale locale = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *locale_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t NPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.NPC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .sg.Locale locale = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *locale_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NPC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.NPC)
  GOOGLE_DCHECK_NE(&from, this);
  const NPC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NPC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.NPC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.NPC)
    MergeFrom(*source);
  }
}

void NPC::MergeFrom(const NPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.NPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_locale()->::sg::Locale::MergeFrom(from.locale());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NPC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.NPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPC::CopyFrom(const NPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.NPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_locale()) {
    if (!this->locale_->IsInitialized()) return false;
  }
  return true;
}

void NPC::Swap(NPC* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NPC* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NPC::UnsafeArenaSwap(NPC* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NPC::InternalSwap(NPC* other) {
  using std::swap;
  swap(locale_, other->locale_);
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NPC::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Item::kTypeidFieldNumber;
const int Item::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Item::Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Item.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Item)
}
Item::Item(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Item.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Item)
}
Item::Item(const Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&typeid__) -
    reinterpret_cast<char*>(&num_)) + sizeof(typeid__));
  // @@protoc_insertion_point(copy_constructor:sg.Item)
}

void Item::SharedCtor() {
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&typeid__) -
      reinterpret_cast<char*>(&num_)) + sizeof(typeid__));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:sg.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Item::ArenaDtor(void* object) {
  Item* _this = reinterpret_cast< Item* >(object);
  (void)_this;
}
void Item::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Item& Item::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Item.base);
  return *internal_default_instance();
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&typeid__) -
        reinterpret_cast<char*>(&num_)) + sizeof(typeid__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Item)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 typeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // required int64 num = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Item)
}

::google::protobuf::uint8* Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // required int64 num = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Item)
  return target;
}

size_t Item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Item)
  size_t total_size = 0;

  if (has_num()) {
    // required int64 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num());
  }

  if (has_typeid_()) {
    // required int32 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  return total_size;
}
size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num());

    // required int32 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000002u) {
      typeid__ = from.typeid__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Item::Swap(Item* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Item* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Item::UnsafeArenaSwap(Item* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Item::InternalSwap(Item* other) {
  using std::swap;
  swap(num_, other->num_);
  swap(typeid__, other->typeid__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Facility_SpecialData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Facility_SpecialData::kPropertyTypeFieldNumber;
const int Facility_SpecialData::kCountTimesFieldNumber;
const int Facility_SpecialData::kContainFieldNumber;
const int Facility_SpecialData::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Facility_SpecialData::Facility_SpecialData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Facility_SpecialData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Facility.SpecialData)
}
Facility_SpecialData::Facility_SpecialData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  contain_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Facility_SpecialData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Facility.SpecialData)
}
Facility_SpecialData::Facility_SpecialData(const Facility_SpecialData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      contain_(from.contain_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&property_type_, &from.property_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&property_type_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:sg.Facility.SpecialData)
}

void Facility_SpecialData::SharedCtor() {
  ::memset(&property_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&property_type_)) + sizeof(timestamp_));
}

Facility_SpecialData::~Facility_SpecialData() {
  // @@protoc_insertion_point(destructor:sg.Facility.SpecialData)
  SharedDtor();
}

void Facility_SpecialData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Facility_SpecialData::ArenaDtor(void* object) {
  Facility_SpecialData* _this = reinterpret_cast< Facility_SpecialData* >(object);
  (void)_this;
}
void Facility_SpecialData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Facility_SpecialData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Facility_SpecialData::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Facility_SpecialData& Facility_SpecialData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Facility_SpecialData.base);
  return *internal_default_instance();
}


void Facility_SpecialData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Facility.SpecialData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&property_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&property_type_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Facility_SpecialData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Facility.SpecialData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 property_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_property_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 count_times = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Item contain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_contain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Facility.SpecialData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Facility.SpecialData)
  return false;
#undef DO_
}

void Facility_SpecialData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Facility.SpecialData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 property_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->property_type(), output);
  }

  // required int32 count_times = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_times(), output);
  }

  // repeated .sg.Item contain = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contain_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->contain(static_cast<int>(i)),
      output);
  }

  // optional sfixed64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Facility.SpecialData)
}

::google::protobuf::uint8* Facility_SpecialData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Facility.SpecialData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 property_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->property_type(), target);
  }

  // required int32 count_times = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_times(), target);
  }

  // repeated .sg.Item contain = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contain_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->contain(static_cast<int>(i)), deterministic, target);
  }

  // optional sfixed64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Facility.SpecialData)
  return target;
}

size_t Facility_SpecialData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Facility.SpecialData)
  size_t total_size = 0;

  if (has_property_type()) {
    // required int32 property_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->property_type());
  }

  if (has_count_times()) {
    // required int32 count_times = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count_times());
  }

  return total_size;
}
size_t Facility_SpecialData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Facility.SpecialData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 property_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->property_type());

    // required int32 count_times = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count_times());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.Item contain = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->contain_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->contain(static_cast<int>(i)));
    }
  }

  // optional sfixed64 timestamp = 4;
  if (has_timestamp()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Facility_SpecialData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Facility.SpecialData)
  GOOGLE_DCHECK_NE(&from, this);
  const Facility_SpecialData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Facility_SpecialData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Facility.SpecialData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Facility.SpecialData)
    MergeFrom(*source);
  }
}

void Facility_SpecialData::MergeFrom(const Facility_SpecialData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Facility.SpecialData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contain_.MergeFrom(from.contain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      property_type_ = from.property_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_times_ = from.count_times_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Facility_SpecialData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Facility.SpecialData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Facility_SpecialData::CopyFrom(const Facility_SpecialData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Facility.SpecialData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Facility_SpecialData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->contain())) return false;
  return true;
}

void Facility_SpecialData::Swap(Facility_SpecialData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Facility_SpecialData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Facility_SpecialData::UnsafeArenaSwap(Facility_SpecialData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Facility_SpecialData::InternalSwap(Facility_SpecialData* other) {
  using std::swap;
  CastToBase(&contain_)->InternalSwap(CastToBase(&other->contain_));
  swap(property_type_, other->property_type_);
  swap(count_times_, other->count_times_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Facility_SpecialData::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Facility_OrderSlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Facility_OrderSlot::kOrderidFieldNumber;
const int Facility_OrderSlot::kStateFieldNumber;
const int Facility_OrderSlot::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Facility_OrderSlot::Facility_OrderSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Facility_OrderSlot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Facility.OrderSlot)
}
Facility_OrderSlot::Facility_OrderSlot(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Facility_OrderSlot.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Facility.OrderSlot)
}
Facility_OrderSlot::Facility_OrderSlot(const Facility_OrderSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:sg.Facility.OrderSlot)
}

void Facility_OrderSlot::SharedCtor() {
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(index_));
}

Facility_OrderSlot::~Facility_OrderSlot() {
  // @@protoc_insertion_point(destructor:sg.Facility.OrderSlot)
  SharedDtor();
}

void Facility_OrderSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Facility_OrderSlot::ArenaDtor(void* object) {
  Facility_OrderSlot* _this = reinterpret_cast< Facility_OrderSlot* >(object);
  (void)_this;
}
void Facility_OrderSlot::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Facility_OrderSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Facility_OrderSlot::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Facility_OrderSlot& Facility_OrderSlot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Facility_OrderSlot.base);
  return *internal_default_instance();
}


void Facility_OrderSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Facility.OrderSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&orderid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&orderid_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Facility_OrderSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Facility.OrderSlot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 orderid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_orderid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Facility.OrderSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Facility.OrderSlot)
  return false;
#undef DO_
}

void Facility_OrderSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Facility.OrderSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 orderid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderid(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required int32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Facility.OrderSlot)
}

::google::protobuf::uint8* Facility_OrderSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Facility.OrderSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 orderid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderid(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required int32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Facility.OrderSlot)
  return target;
}

size_t Facility_OrderSlot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Facility.OrderSlot)
  size_t total_size = 0;

  if (has_orderid()) {
    // required int32 orderid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orderid());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_index()) {
    // required int32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  return total_size;
}
size_t Facility_OrderSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Facility.OrderSlot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 orderid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orderid());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Facility_OrderSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Facility.OrderSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const Facility_OrderSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Facility_OrderSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Facility.OrderSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Facility.OrderSlot)
    MergeFrom(*source);
  }
}

void Facility_OrderSlot::MergeFrom(const Facility_OrderSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Facility.OrderSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Facility_OrderSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Facility.OrderSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Facility_OrderSlot::CopyFrom(const Facility_OrderSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Facility.OrderSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Facility_OrderSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Facility_OrderSlot::Swap(Facility_OrderSlot* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Facility_OrderSlot* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Facility_OrderSlot::UnsafeArenaSwap(Facility_OrderSlot* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Facility_OrderSlot::InternalSwap(Facility_OrderSlot* other) {
  using std::swap;
  swap(orderid_, other->orderid_);
  swap(state_, other->state_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Facility_OrderSlot::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Facility::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Facility::kIdFieldNumber;
const int Facility::kTypeidFieldNumber;
const int Facility::kStyleFieldNumber;
const int Facility::kOrderListFieldNumber;
const int Facility::kRoomidFieldNumber;
const int Facility::kWorkerListFieldNumber;
const int Facility::kPosXFieldNumber;
const int Facility::kPosYFieldNumber;
const int Facility::kLevelFieldNumber;
const int Facility::kRegionFieldNumber;
const int Facility::kSpecialDataFieldNumber;
const int Facility::kRemainFoodFieldNumber;
const int Facility::kLevelUpStarttimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Facility::Facility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Facility.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Facility)
}
Facility::Facility(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  order_list_(arena),
  worker_list_(arena),
  special_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Facility.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Facility)
}
Facility::Facility(const Facility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      order_list_(from.order_list_),
      worker_list_(from.worker_list_),
      special_data_(from.special_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&remain_food_) -
    reinterpret_cast<char*>(&id_)) + sizeof(remain_food_));
  // @@protoc_insertion_point(copy_constructor:sg.Facility)
}

void Facility::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remain_food_) -
      reinterpret_cast<char*>(&id_)) + sizeof(remain_food_));
}

Facility::~Facility() {
  // @@protoc_insertion_point(destructor:sg.Facility)
  SharedDtor();
}

void Facility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Facility::ArenaDtor(void* object) {
  Facility* _this = reinterpret_cast< Facility* >(object);
  (void)_this;
}
void Facility::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Facility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Facility::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Facility& Facility::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Facility.base);
  return *internal_default_instance();
}


void Facility::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Facility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_list_.Clear();
  worker_list_.Clear();
  special_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_) -
        reinterpret_cast<char*>(&id_)) + sizeof(region_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&level_up_starttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remain_food_) -
        reinterpret_cast<char*>(&level_up_starttime_)) + sizeof(remain_food_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Facility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Facility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 style = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Facility.OrderSlot order_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 worker_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_worker_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_worker_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 region = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Facility.SpecialData special_data = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_special_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 remain_food = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_remain_food();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_food_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 level_up_starttime = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_level_up_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &level_up_starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Facility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Facility)
  return false;
#undef DO_
}

void Facility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Facility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // required int32 style = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->style(), output);
  }

  // repeated .sg.Facility.OrderSlot order_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->order_list(static_cast<int>(i)),
      output);
  }

  // optional int32 roomid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }

  // repeated int32 worker_list = 6;
  for (int i = 0, n = this->worker_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->worker_list(i), output);
  }

  // optional int32 pos_x = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos_x(), output);
  }

  // optional int32 pos_y = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pos_y(), output);
  }

  // optional int32 level = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional int32 region = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->region(), output);
  }

  // repeated .sg.Facility.SpecialData special_data = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->special_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->special_data(static_cast<int>(i)),
      output);
  }

  // optional int32 remain_food = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->remain_food(), output);
  }

  // optional sfixed64 level_up_starttime = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->level_up_starttime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Facility)
}

::google::protobuf::uint8* Facility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Facility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // required int32 style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->style(), target);
  }

  // repeated .sg.Facility.OrderSlot order_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->order_list(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 roomid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }

  // repeated int32 worker_list = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->worker_list_, target);

  // optional int32 pos_x = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos_x(), target);
  }

  // optional int32 pos_y = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pos_y(), target);
  }

  // optional int32 level = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional int32 region = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->region(), target);
  }

  // repeated .sg.Facility.SpecialData special_data = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->special_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->special_data(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 remain_food = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->remain_food(), target);
  }

  // optional sfixed64 level_up_starttime = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->level_up_starttime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Facility)
  return target;
}

size_t Facility::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Facility)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_style()) {
    // required int32 style = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->style());
  }

  return total_size;
}
size_t Facility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Facility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 style = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->style());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.Facility.OrderSlot order_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->order_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_list(static_cast<int>(i)));
    }
  }

  // repeated int32 worker_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->worker_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->worker_list_size());
    total_size += data_size;
  }

  // repeated .sg.Facility.SpecialData special_data = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->special_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->special_data(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional int32 roomid = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 pos_x = 7;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 8;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 region = 10;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional sfixed64 level_up_starttime = 13;
    if (has_level_up_starttime()) {
      total_size += 1 + 8;
    }

    // optional int32 remain_food = 12;
    if (has_remain_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_food());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Facility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Facility)
  GOOGLE_DCHECK_NE(&from, this);
  const Facility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Facility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Facility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Facility)
    MergeFrom(*source);
  }
}

void Facility::MergeFrom(const Facility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Facility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_list_.MergeFrom(from.order_list_);
  worker_list_.MergeFrom(from.worker_list_);
  special_data_.MergeFrom(from.special_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000004u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000008u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000080u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      level_up_starttime_ = from.level_up_starttime_;
    }
    if (cached_has_bits & 0x00000200u) {
      remain_food_ = from.remain_food_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Facility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Facility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Facility::CopyFrom(const Facility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Facility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Facility::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->special_data())) return false;
  return true;
}

void Facility::Swap(Facility* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Facility* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Facility::UnsafeArenaSwap(Facility* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Facility::InternalSwap(Facility* other) {
  using std::swap;
  CastToBase(&order_list_)->InternalSwap(CastToBase(&other->order_list_));
  worker_list_.InternalSwap(&other->worker_list_);
  CastToBase(&special_data_)->InternalSwap(CastToBase(&other->special_data_));
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(style_, other->style_);
  swap(roomid_, other->roomid_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(level_, other->level_);
  swap(region_, other->region_);
  swap(level_up_starttime_, other->level_up_starttime_);
  swap(remain_food_, other->remain_food_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Facility::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Reward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reward::kItemsFieldNumber;
const int Reward::kSailorsFieldNumber;
const int Reward::kFacilitysFieldNumber;
const int Reward::kModelsFieldNumber;
const int Reward::kFormulasFieldNumber;
const int Reward::kMapsFieldNumber;
const int Reward::kMonthCardsFieldNumber;
const int Reward::kEquipsFieldNumber;
const int Reward::kExpFieldNumber;
const int Reward::kSailorAddExpFieldNumber;
const int Reward::kTreasureTicketFieldNumber;
const int Reward::kGrowGiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reward::Reward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Reward)
}
Reward::Reward(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  items_(arena),
  sailors_(arena),
  facilitys_(arena),
  models_(arena),
  formulas_(arena),
  maps_(arena),
  month_cards_(arena),
  equips_(arena),
  sailor_add_exp_(arena),
  treasure_ticket_(arena),
  grow_gift_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Reward.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Reward)
}
Reward::Reward(const Reward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      items_(from.items_),
      sailors_(from.sailors_),
      facilitys_(from.facilitys_),
      models_(from.models_),
      formulas_(from.formulas_),
      maps_(from.maps_),
      month_cards_(from.month_cards_),
      equips_(from.equips_),
      sailor_add_exp_(from.sailor_add_exp_),
      treasure_ticket_(from.treasure_ticket_),
      grow_gift_(from.grow_gift_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exp_ = from.exp_;
  // @@protoc_insertion_point(copy_constructor:sg.Reward)
}

void Reward::SharedCtor() {
  exp_ = 0;
}

Reward::~Reward() {
  // @@protoc_insertion_point(destructor:sg.Reward)
  SharedDtor();
}

void Reward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Reward::ArenaDtor(void* object) {
  Reward* _this = reinterpret_cast< Reward* >(object);
  (void)_this;
}
void Reward::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Reward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Reward::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reward& Reward::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_Reward.base);
  return *internal_default_instance();
}


void Reward::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  sailors_.Clear();
  facilitys_.Clear();
  models_.Clear();
  formulas_.Clear();
  maps_.Clear();
  month_cards_.Clear();
  equips_.Clear();
  sailor_add_exp_.Clear();
  treasure_ticket_.Clear();
  grow_gift_.Clear();
  exp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Reward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.Item items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Sailor sailors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sailors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Facility facilitys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_facilitys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 models = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_models())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_models())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 formulas = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_formulas())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_formulas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 maps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_maps())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_maps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 month_cards = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_month_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_month_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Equip equips = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int sailor_add_exp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sailor_add_exp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 treasure_ticket = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88u, input, this->mutable_treasure_ticket())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_treasure_ticket())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 grow_gift = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_grow_gift())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_grow_gift())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Reward)
  return false;
#undef DO_
}

void Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->items(static_cast<int>(i)),
      output);
  }

  // repeated .sg.Sailor sailors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sailors(static_cast<int>(i)),
      output);
  }

  // repeated .sg.Facility facilitys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->facilitys(static_cast<int>(i)),
      output);
  }

  // repeated int32 models = 4;
  for (int i = 0, n = this->models_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->models(i), output);
  }

  // repeated int32 formulas = 5;
  for (int i = 0, n = this->formulas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->formulas(i), output);
  }

  // repeated int32 maps = 6;
  for (int i = 0, n = this->maps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->maps(i), output);
  }

  // repeated int32 month_cards = 7;
  for (int i = 0, n = this->month_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->month_cards(i), output);
  }

  // repeated .sg.Equip equips = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->equips(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 exp = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exp(), output);
  }

  // repeated .sg.pb_pair_int_int sailor_add_exp = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailor_add_exp_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->sailor_add_exp(static_cast<int>(i)),
      output);
  }

  // repeated int32 treasure_ticket = 11;
  for (int i = 0, n = this->treasure_ticket_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->treasure_ticket(i), output);
  }

  // repeated int32 grow_gift = 12;
  for (int i = 0, n = this->grow_gift_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->grow_gift(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Reward)
}

::google::protobuf::uint8* Reward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.Sailor sailors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sailors(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.Facility facilitys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->facilitys(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 models = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->models_, target);

  // repeated int32 formulas = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->formulas_, target);

  // repeated int32 maps = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->maps_, target);

  // repeated int32 month_cards = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(7, this->month_cards_, target);

  // repeated .sg.Equip equips = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->equips(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 exp = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exp(), target);
  }

  // repeated .sg.pb_pair_int_int sailor_add_exp = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailor_add_exp_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->sailor_add_exp(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 treasure_ticket = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(11, this->treasure_ticket_, target);

  // repeated int32 grow_gift = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(12, this->grow_gift_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Reward)
  return target;
}

size_t Reward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Reward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.Item items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // repeated .sg.Sailor sailors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sailors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sailors(static_cast<int>(i)));
    }
  }

  // repeated .sg.Facility facilitys = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->facilitys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->facilitys(static_cast<int>(i)));
    }
  }

  // repeated int32 models = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->models_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->models_size());
    total_size += data_size;
  }

  // repeated int32 formulas = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->formulas_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->formulas_size());
    total_size += data_size;
  }

  // repeated int32 maps = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->maps_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->maps_size());
    total_size += data_size;
  }

  // repeated int32 month_cards = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->month_cards_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->month_cards_size());
    total_size += data_size;
  }

  // repeated .sg.Equip equips = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->equips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equips(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int sailor_add_exp = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->sailor_add_exp_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sailor_add_exp(static_cast<int>(i)));
    }
  }

  // repeated int32 treasure_ticket = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->treasure_ticket_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->treasure_ticket_size());
    total_size += data_size;
  }

  // repeated int32 grow_gift = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->grow_gift_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->grow_gift_size());
    total_size += data_size;
  }

  // optional int32 exp = 9;
  if (has_exp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  const Reward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Reward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Reward)
    MergeFrom(*source);
  }
}

void Reward::MergeFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  sailors_.MergeFrom(from.sailors_);
  facilitys_.MergeFrom(from.facilitys_);
  models_.MergeFrom(from.models_);
  formulas_.MergeFrom(from.formulas_);
  maps_.MergeFrom(from.maps_);
  month_cards_.MergeFrom(from.month_cards_);
  equips_.MergeFrom(from.equips_);
  sailor_add_exp_.MergeFrom(from.sailor_add_exp_);
  treasure_ticket_.MergeFrom(from.treasure_ticket_);
  grow_gift_.MergeFrom(from.grow_gift_);
  if (from.has_exp()) {
    set_exp(from.exp());
  }
}

void Reward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reward::CopyFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sailors())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->facilitys())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equips())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sailor_add_exp())) return false;
  return true;
}

void Reward::Swap(Reward* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Reward* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Reward::UnsafeArenaSwap(Reward* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Reward::InternalSwap(Reward* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  CastToBase(&sailors_)->InternalSwap(CastToBase(&other->sailors_));
  CastToBase(&facilitys_)->InternalSwap(CastToBase(&other->facilitys_));
  models_.InternalSwap(&other->models_);
  formulas_.InternalSwap(&other->formulas_);
  maps_.InternalSwap(&other->maps_);
  month_cards_.InternalSwap(&other->month_cards_);
  CastToBase(&equips_)->InternalSwap(CastToBase(&other->equips_));
  CastToBase(&sailor_add_exp_)->InternalSwap(CastToBase(&other->sailor_add_exp_));
  treasure_ticket_.InternalSwap(&other->treasure_ticket_);
  grow_gift_.InternalSwap(&other->grow_gift_);
  swap(exp_, other->exp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Reward::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegionState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionState::kComfortGradeFieldNumber;
const int RegionState::kItemCapacityFieldNumber;
const int RegionState::kEquipCapacityFieldNumber;
const int RegionState::kFacilityCapacityFieldNumber;
const int RegionState::kFoodCapacityFieldNumber;
const int RegionState::kResourceCapacityFieldNumber;
const int RegionState::kResourceProductAddFieldNumber;
const int RegionState::kFoodResourceCapacityFieldNumber;
const int RegionState::kWoodResourceCapacityFieldNumber;
const int RegionState::kIronResourceCapacityFieldNumber;
const int RegionState::kMachineCapacityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionState::RegionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_RegionState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.RegionState)
}
RegionState::RegionState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_RegionState.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.RegionState)
}
RegionState::RegionState(const RegionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&comfort_grade_, &from.comfort_grade_,
    static_cast<size_t>(reinterpret_cast<char*>(&machine_capacity_) -
    reinterpret_cast<char*>(&comfort_grade_)) + sizeof(machine_capacity_));
  // @@protoc_insertion_point(copy_constructor:sg.RegionState)
}

void RegionState::SharedCtor() {
  ::memset(&comfort_grade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&machine_capacity_) -
      reinterpret_cast<char*>(&comfort_grade_)) + sizeof(machine_capacity_));
}

RegionState::~RegionState() {
  // @@protoc_insertion_point(destructor:sg.RegionState)
  SharedDtor();
}

void RegionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void RegionState::ArenaDtor(void* object) {
  RegionState* _this = reinterpret_cast< RegionState* >(object);
  (void)_this;
}
void RegionState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RegionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegionState::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionState& RegionState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_RegionState.base);
  return *internal_default_instance();
}


void RegionState::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.RegionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&comfort_grade_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&food_resource_capacity_) -
        reinterpret_cast<char*>(&comfort_grade_)) + sizeof(food_resource_capacity_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&wood_resource_capacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&machine_capacity_) -
        reinterpret_cast<char*>(&wood_resource_capacity_)) + sizeof(machine_capacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.RegionState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 comfort_grade = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_comfort_grade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comfort_grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 item_capacity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_item_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 equip_capacity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_equip_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 facility_capacity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_facility_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facility_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 food_capacity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_food_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 resource_capacity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_resource_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float resource_product_add = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_resource_product_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resource_product_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 food_resource_capacity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_food_resource_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_resource_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wood_resource_capacity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_wood_resource_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wood_resource_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iron_resource_capacity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_iron_resource_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iron_resource_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 machine_capacity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_machine_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.RegionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.RegionState)
  return false;
#undef DO_
}

void RegionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.RegionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 comfort_grade = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->comfort_grade(), output);
  }

  // optional int32 item_capacity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_capacity(), output);
  }

  // optional int32 equip_capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equip_capacity(), output);
  }

  // optional int32 facility_capacity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->facility_capacity(), output);
  }

  // optional int32 food_capacity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->food_capacity(), output);
  }

  // optional int32 resource_capacity = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->resource_capacity(), output);
  }

  // optional float resource_product_add = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->resource_product_add(), output);
  }

  // optional int32 food_resource_capacity = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->food_resource_capacity(), output);
  }

  // optional int32 wood_resource_capacity = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->wood_resource_capacity(), output);
  }

  // optional int32 iron_resource_capacity = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->iron_resource_capacity(), output);
  }

  // optional int32 machine_capacity = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->machine_capacity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.RegionState)
}

::google::protobuf::uint8* RegionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.RegionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 comfort_grade = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->comfort_grade(), target);
  }

  // optional int32 item_capacity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_capacity(), target);
  }

  // optional int32 equip_capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equip_capacity(), target);
  }

  // optional int32 facility_capacity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->facility_capacity(), target);
  }

  // optional int32 food_capacity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->food_capacity(), target);
  }

  // optional int32 resource_capacity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->resource_capacity(), target);
  }

  // optional float resource_product_add = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->resource_product_add(), target);
  }

  // optional int32 food_resource_capacity = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->food_resource_capacity(), target);
  }

  // optional int32 wood_resource_capacity = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->wood_resource_capacity(), target);
  }

  // optional int32 iron_resource_capacity = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->iron_resource_capacity(), target);
  }

  // optional int32 machine_capacity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->machine_capacity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.RegionState)
  return target;
}

size_t RegionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.RegionState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 comfort_grade = 1;
    if (has_comfort_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comfort_grade());
    }

    // optional int32 item_capacity = 2;
    if (has_item_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_capacity());
    }

    // optional int32 equip_capacity = 3;
    if (has_equip_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_capacity());
    }

    // optional int32 facility_capacity = 4;
    if (has_facility_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facility_capacity());
    }

    // optional int32 food_capacity = 5;
    if (has_food_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food_capacity());
    }

    // optional int32 resource_capacity = 6;
    if (has_resource_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_capacity());
    }

    // optional float resource_product_add = 7;
    if (has_resource_product_add()) {
      total_size += 1 + 4;
    }

    // optional int32 food_resource_capacity = 8;
    if (has_food_resource_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food_resource_capacity());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 wood_resource_capacity = 9;
    if (has_wood_resource_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wood_resource_capacity());
    }

    // optional int32 iron_resource_capacity = 10;
    if (has_iron_resource_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iron_resource_capacity());
    }

    // optional int32 machine_capacity = 11;
    if (has_machine_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->machine_capacity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.RegionState)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.RegionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.RegionState)
    MergeFrom(*source);
  }
}

void RegionState::MergeFrom(const RegionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.RegionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      comfort_grade_ = from.comfort_grade_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_capacity_ = from.item_capacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      equip_capacity_ = from.equip_capacity_;
    }
    if (cached_has_bits & 0x00000008u) {
      facility_capacity_ = from.facility_capacity_;
    }
    if (cached_has_bits & 0x00000010u) {
      food_capacity_ = from.food_capacity_;
    }
    if (cached_has_bits & 0x00000020u) {
      resource_capacity_ = from.resource_capacity_;
    }
    if (cached_has_bits & 0x00000040u) {
      resource_product_add_ = from.resource_product_add_;
    }
    if (cached_has_bits & 0x00000080u) {
      food_resource_capacity_ = from.food_resource_capacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      wood_resource_capacity_ = from.wood_resource_capacity_;
    }
    if (cached_has_bits & 0x00000200u) {
      iron_resource_capacity_ = from.iron_resource_capacity_;
    }
    if (cached_has_bits & 0x00000400u) {
      machine_capacity_ = from.machine_capacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.RegionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionState::CopyFrom(const RegionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.RegionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionState::IsInitialized() const {
  return true;
}

void RegionState::Swap(RegionState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegionState* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RegionState::UnsafeArenaSwap(RegionState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegionState::InternalSwap(RegionState* other) {
  using std::swap;
  swap(comfort_grade_, other->comfort_grade_);
  swap(item_capacity_, other->item_capacity_);
  swap(equip_capacity_, other->equip_capacity_);
  swap(facility_capacity_, other->facility_capacity_);
  swap(food_capacity_, other->food_capacity_);
  swap(resource_capacity_, other->resource_capacity_);
  swap(resource_product_add_, other->resource_product_add_);
  swap(food_resource_capacity_, other->food_resource_capacity_);
  swap(wood_resource_capacity_, other->wood_resource_capacity_);
  swap(iron_resource_capacity_, other->iron_resource_capacity_);
  swap(machine_capacity_, other->machine_capacity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegionState::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpecialEventNotify::InitAsDefaultInstance() {
  ::sg::_SpecialEventNotify_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void SpecialEventNotify::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.SpecialEventNotify.reward)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpecialEventNotify::kIdFieldNumber;
const int SpecialEventNotify::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpecialEventNotify::SpecialEventNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseStruct_2eproto::scc_info_SpecialEventNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SpecialEventNotify)
}
SpecialEventNotify::SpecialEventNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_SpecialEventNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SpecialEventNotify)
}
SpecialEventNotify::SpecialEventNotify(const SpecialEventNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sg.SpecialEventNotify)
}

void SpecialEventNotify::SharedCtor() {
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(id_));
}

SpecialEventNotify::~SpecialEventNotify() {
  // @@protoc_insertion_point(destructor:sg.SpecialEventNotify)
  SharedDtor();
}

void SpecialEventNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete reward_;
}

void SpecialEventNotify::ArenaDtor(void* object) {
  SpecialEventNotify* _this = reinterpret_cast< SpecialEventNotify* >(object);
  (void)_this;
}
void SpecialEventNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpecialEventNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpecialEventNotify::descriptor() {
  ::protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpecialEventNotify& SpecialEventNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseStruct_2eproto::scc_info_SpecialEventNotify.base);
  return *internal_default_instance();
}


void SpecialEventNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SpecialEventNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != NULL);
    reward_->Clear();
  }
  id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpecialEventNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SpecialEventNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SpecialEventNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SpecialEventNotify)
  return false;
#undef DO_
}

void SpecialEventNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SpecialEventNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .sg.Reward reward = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SpecialEventNotify)
}

::google::protobuf::uint8* SpecialEventNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SpecialEventNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .sg.Reward reward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_reward(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SpecialEventNotify)
  return target;
}

size_t SpecialEventNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SpecialEventNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }
  // optional .sg.Reward reward = 2;
  if (has_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecialEventNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SpecialEventNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecialEventNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpecialEventNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SpecialEventNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SpecialEventNotify)
    MergeFrom(*source);
  }
}

void SpecialEventNotify::MergeFrom(const SpecialEventNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SpecialEventNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecialEventNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SpecialEventNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialEventNotify::CopyFrom(const SpecialEventNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SpecialEventNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialEventNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void SpecialEventNotify::Swap(SpecialEventNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpecialEventNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpecialEventNotify::UnsafeArenaSwap(SpecialEventNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpecialEventNotify::InternalSwap(SpecialEventNotify* other) {
  using std::swap;
  swap(reward_, other->reward_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpecialEventNotify::GetMetadata() const {
  protobuf_BaseStruct_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseStruct_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserRoom* Arena::CreateMaybeMessage< ::sg::UserRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserRoom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Locale* Arena::CreateMaybeMessage< ::sg::Locale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Locale >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::pb_pair_int_int* Arena::CreateMaybeMessage< ::sg::pb_pair_int_int >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::pb_pair_int_int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::pb_pair_int_time* Arena::CreateMaybeMessage< ::sg::pb_pair_int_time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::pb_pair_int_time >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::pb_pair_int64_int* Arena::CreateMaybeMessage< ::sg::pb_pair_int64_int >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::pb_pair_int64_int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::pb_pair_string_int* Arena::CreateMaybeMessage< ::sg::pb_pair_string_int >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::pb_pair_string_int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::pb_pair_int_float* Arena::CreateMaybeMessage< ::sg::pb_pair_int_float >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::pb_pair_int_float >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserInfo* Arena::CreateMaybeMessage< ::sg::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserState* Arena::CreateMaybeMessage< ::sg::UserState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Equip_SpecialAttribute* Arena::CreateMaybeMessage< ::sg::Equip_SpecialAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Equip_SpecialAttribute >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Equip_EquipAttributeSlot* Arena::CreateMaybeMessage< ::sg::Equip_EquipAttributeSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Equip_EquipAttributeSlot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Equip* Arena::CreateMaybeMessage< ::sg::Equip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Equip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SailorSkill* Arena::CreateMaybeMessage< ::sg::SailorSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SailorSkill >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SailorFarmSkill* Arena::CreateMaybeMessage< ::sg::SailorFarmSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SailorFarmSkill >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SailorTalent* Arena::CreateMaybeMessage< ::sg::SailorTalent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SailorTalent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Sailor* Arena::CreateMaybeMessage< ::sg::Sailor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Sailor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::NPC* Arena::CreateMaybeMessage< ::sg::NPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::NPC >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Item* Arena::CreateMaybeMessage< ::sg::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Item >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Facility_SpecialData* Arena::CreateMaybeMessage< ::sg::Facility_SpecialData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Facility_SpecialData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Facility_OrderSlot* Arena::CreateMaybeMessage< ::sg::Facility_OrderSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Facility_OrderSlot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Facility* Arena::CreateMaybeMessage< ::sg::Facility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Facility >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Reward* Arena::CreateMaybeMessage< ::sg::Reward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Reward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::RegionState* Arena::CreateMaybeMessage< ::sg::RegionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::RegionState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SpecialEventNotify* Arena::CreateMaybeMessage< ::sg::SpecialEventNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SpecialEventNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
