// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserFacility.proto

#ifndef PROTOBUF_INCLUDED_UserFacility_2eproto
#define PROTOBUF_INCLUDED_UserFacility_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_UserFacility_2eproto 

namespace protobuf_UserFacility_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_UserFacility_2eproto
namespace sg {
class FacilityContainAddNotify;
class FacilityContainAddNotifyDefaultTypeInternal;
extern FacilityContainAddNotifyDefaultTypeInternal _FacilityContainAddNotify_default_instance_;
class FacilityLevelUpNotify;
class FacilityLevelUpNotifyDefaultTypeInternal;
extern FacilityLevelUpNotifyDefaultTypeInternal _FacilityLevelUpNotify_default_instance_;
class UserFacilityService;
class UserFacilityServiceDefaultTypeInternal;
extern UserFacilityServiceDefaultTypeInternal _UserFacilityService_default_instance_;
class UserFacilityService_UserFacilityRequest;
class UserFacilityService_UserFacilityRequestDefaultTypeInternal;
extern UserFacilityService_UserFacilityRequestDefaultTypeInternal _UserFacilityService_UserFacilityRequest_default_instance_;
class UserFacilityService_UserFacilityResponse;
class UserFacilityService_UserFacilityResponseDefaultTypeInternal;
extern UserFacilityService_UserFacilityResponseDefaultTypeInternal _UserFacilityService_UserFacilityResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::FacilityContainAddNotify* Arena::CreateMaybeMessage<::sg::FacilityContainAddNotify>(Arena*);
template<> ::sg::FacilityLevelUpNotify* Arena::CreateMaybeMessage<::sg::FacilityLevelUpNotify>(Arena*);
template<> ::sg::UserFacilityService* Arena::CreateMaybeMessage<::sg::UserFacilityService>(Arena*);
template<> ::sg::UserFacilityService_UserFacilityRequest* Arena::CreateMaybeMessage<::sg::UserFacilityService_UserFacilityRequest>(Arena*);
template<> ::sg::UserFacilityService_UserFacilityResponse* Arena::CreateMaybeMessage<::sg::UserFacilityService_UserFacilityResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum UserFacilityService_FACILITY_CMD {
  UserFacilityService_FACILITY_CMD_QUERY = 1,
  UserFacilityService_FACILITY_CMD_PUTDOWN = 2,
  UserFacilityService_FACILITY_CMD_REMOVE = 3,
  UserFacilityService_FACILITY_CMD_CHANGE_STYLE = 4,
  UserFacilityService_FACILITY_CMD_REPLACE = 5,
  UserFacilityService_FACILITY_CMD_CREATE_DEVICE = 6,
  UserFacilityService_FACILITY_CMD_DEVICE_LEVEL_UP = 7,
  UserFacilityService_FACILITY_CMD_GET_CONTAIN = 8,
  UserFacilityService_FACILITY_CMD_USE_SPECIAL_PROPERTY = 9,
  UserFacilityService_FACILITY_CMD_ADD_FOOD = 10,
  UserFacilityService_FACILITY_CMD_QUERY_ONE = 11,
  UserFacilityService_FACILITY_CMD_UNLOCK_SLOT = 12,
  UserFacilityService_FACILITY_CMD_FAST_FINISH = 13,
  UserFacilityService_FACILITY_CMD_CANCEL = 14
};
bool UserFacilityService_FACILITY_CMD_IsValid(int value);
const UserFacilityService_FACILITY_CMD UserFacilityService_FACILITY_CMD_FACILITY_CMD_MIN = UserFacilityService_FACILITY_CMD_QUERY;
const UserFacilityService_FACILITY_CMD UserFacilityService_FACILITY_CMD_FACILITY_CMD_MAX = UserFacilityService_FACILITY_CMD_CANCEL;
const int UserFacilityService_FACILITY_CMD_FACILITY_CMD_ARRAYSIZE = UserFacilityService_FACILITY_CMD_FACILITY_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserFacilityService_FACILITY_CMD_descriptor();
inline const ::std::string& UserFacilityService_FACILITY_CMD_Name(UserFacilityService_FACILITY_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserFacilityService_FACILITY_CMD_descriptor(), value);
}
inline bool UserFacilityService_FACILITY_CMD_Parse(
    const ::std::string& name, UserFacilityService_FACILITY_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserFacilityService_FACILITY_CMD>(
    UserFacilityService_FACILITY_CMD_descriptor(), name, value);
}
// ===================================================================

class UserFacilityService_UserFacilityRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserFacilityService.UserFacilityRequest) */ {
 public:
  UserFacilityService_UserFacilityRequest();
  virtual ~UserFacilityService_UserFacilityRequest();

  UserFacilityService_UserFacilityRequest(const UserFacilityService_UserFacilityRequest& from);

  inline UserFacilityService_UserFacilityRequest& operator=(const UserFacilityService_UserFacilityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserFacilityService_UserFacilityRequest(UserFacilityService_UserFacilityRequest&& from) noexcept
    : UserFacilityService_UserFacilityRequest() {
    *this = ::std::move(from);
  }

  inline UserFacilityService_UserFacilityRequest& operator=(UserFacilityService_UserFacilityRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFacilityService_UserFacilityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFacilityService_UserFacilityRequest* internal_default_instance() {
    return reinterpret_cast<const UserFacilityService_UserFacilityRequest*>(
               &_UserFacilityService_UserFacilityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(UserFacilityService_UserFacilityRequest* other);
  void Swap(UserFacilityService_UserFacilityRequest* other);
  friend void swap(UserFacilityService_UserFacilityRequest& a, UserFacilityService_UserFacilityRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserFacilityService_UserFacilityRequest* New() const final {
    return CreateMaybeMessage<UserFacilityService_UserFacilityRequest>(NULL);
  }

  UserFacilityService_UserFacilityRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserFacilityService_UserFacilityRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserFacilityService_UserFacilityRequest& from);
  void MergeFrom(const UserFacilityService_UserFacilityRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFacilityService_UserFacilityRequest* other);
  protected:
  explicit UserFacilityService_UserFacilityRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Facility facilitys = 2;
  int facilitys_size() const;
  void clear_facilitys();
  static const int kFacilitysFieldNumber = 2;
  ::sg::Facility* mutable_facilitys(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Facility >*
      mutable_facilitys();
  const ::sg::Facility& facilitys(int index) const;
  ::sg::Facility* add_facilitys();
  const ::google::protobuf::RepeatedPtrField< ::sg::Facility >&
      facilitys() const;

  // repeated .sg.pb_pair_int_int food_list = 7;
  int food_list_size() const;
  void clear_food_list();
  static const int kFoodListFieldNumber = 7;
  ::sg::pb_pair_int_int* mutable_food_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >*
      mutable_food_list();
  const ::sg::pb_pair_int_int& food_list(int index) const;
  ::sg::pb_pair_int_int* add_food_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >&
      food_list() const;

  // optional int32 device_id = 3;
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 3;
  ::google::protobuf::int32 device_id() const;
  void set_device_id(::google::protobuf::int32 value);

  // optional int32 device_typeid = 4;
  bool has_device_typeid() const;
  void clear_device_typeid();
  static const int kDeviceTypeidFieldNumber = 4;
  ::google::protobuf::int32 device_typeid() const;
  void set_device_typeid(::google::protobuf::int32 value);

  // optional int32 region = 5;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 5;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // optional int32 facility_id = 6;
  bool has_facility_id() const;
  void clear_facility_id();
  static const int kFacilityIdFieldNumber = 6;
  ::google::protobuf::int32 facility_id() const;
  void set_facility_id(::google::protobuf::int32 value);

  // optional int32 slot_id = 8;
  bool has_slot_id() const;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 8;
  ::google::protobuf::int32 slot_id() const;
  void set_slot_id(::google::protobuf::int32 value);

  // required .sg.UserFacilityService.FACILITY_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserFacilityService_FACILITY_CMD cmd() const;
  void set_cmd(::sg::UserFacilityService_FACILITY_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserFacilityService.UserFacilityRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_device_id();
  void clear_has_device_id();
  void set_has_device_typeid();
  void clear_has_device_typeid();
  void set_has_region();
  void clear_has_region();
  void set_has_facility_id();
  void clear_has_facility_id();
  void set_has_slot_id();
  void clear_has_slot_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Facility > facilitys_;
  ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int > food_list_;
  ::google::protobuf::int32 device_id_;
  ::google::protobuf::int32 device_typeid_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 facility_id_;
  ::google::protobuf::int32 slot_id_;
  int cmd_;
  friend struct ::protobuf_UserFacility_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserFacilityService_UserFacilityResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserFacilityService.UserFacilityResponse) */ {
 public:
  UserFacilityService_UserFacilityResponse();
  virtual ~UserFacilityService_UserFacilityResponse();

  UserFacilityService_UserFacilityResponse(const UserFacilityService_UserFacilityResponse& from);

  inline UserFacilityService_UserFacilityResponse& operator=(const UserFacilityService_UserFacilityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserFacilityService_UserFacilityResponse(UserFacilityService_UserFacilityResponse&& from) noexcept
    : UserFacilityService_UserFacilityResponse() {
    *this = ::std::move(from);
  }

  inline UserFacilityService_UserFacilityResponse& operator=(UserFacilityService_UserFacilityResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFacilityService_UserFacilityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFacilityService_UserFacilityResponse* internal_default_instance() {
    return reinterpret_cast<const UserFacilityService_UserFacilityResponse*>(
               &_UserFacilityService_UserFacilityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(UserFacilityService_UserFacilityResponse* other);
  void Swap(UserFacilityService_UserFacilityResponse* other);
  friend void swap(UserFacilityService_UserFacilityResponse& a, UserFacilityService_UserFacilityResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserFacilityService_UserFacilityResponse* New() const final {
    return CreateMaybeMessage<UserFacilityService_UserFacilityResponse>(NULL);
  }

  UserFacilityService_UserFacilityResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserFacilityService_UserFacilityResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserFacilityService_UserFacilityResponse& from);
  void MergeFrom(const UserFacilityService_UserFacilityResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFacilityService_UserFacilityResponse* other);
  protected:
  explicit UserFacilityService_UserFacilityResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Facility facilitys = 2;
  int facilitys_size() const;
  void clear_facilitys();
  static const int kFacilitysFieldNumber = 2;
  ::sg::Facility* mutable_facilitys(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Facility >*
      mutable_facilitys();
  const ::sg::Facility& facilitys(int index) const;
  ::sg::Facility* add_facilitys();
  const ::google::protobuf::RepeatedPtrField< ::sg::Facility >&
      facilitys() const;

  // repeated int32 formula_unlock = 3;
  int formula_unlock_size() const;
  void clear_formula_unlock();
  static const int kFormulaUnlockFieldNumber = 3;
  ::google::protobuf::int32 formula_unlock(int index) const;
  void set_formula_unlock(int index, ::google::protobuf::int32 value);
  void add_formula_unlock(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      formula_unlock() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_formula_unlock();

  // optional .sg.RegionState ship_state = 4;
  bool has_ship_state() const;
  void clear_ship_state();
  static const int kShipStateFieldNumber = 4;
  private:
  const ::sg::RegionState& _internal_ship_state() const;
  public:
  const ::sg::RegionState& ship_state() const;
  ::sg::RegionState* release_ship_state();
  ::sg::RegionState* mutable_ship_state();
  void set_allocated_ship_state(::sg::RegionState* ship_state);
  void unsafe_arena_set_allocated_ship_state(
      ::sg::RegionState* ship_state);
  ::sg::RegionState* unsafe_arena_release_ship_state();

  // optional .sg.Reward reward = 5;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 5;
  private:
  const ::sg::Reward& _internal_reward() const;
  public:
  const ::sg::Reward& reward() const;
  ::sg::Reward* release_reward();
  ::sg::Reward* mutable_reward();
  void set_allocated_reward(::sg::Reward* reward);
  void unsafe_arena_set_allocated_reward(
      ::sg::Reward* reward);
  ::sg::Reward* unsafe_arena_release_reward();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 cost_diamond = 6;
  bool has_cost_diamond() const;
  void clear_cost_diamond();
  static const int kCostDiamondFieldNumber = 6;
  ::google::protobuf::int32 cost_diamond() const;
  void set_cost_diamond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserFacilityService.UserFacilityResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_ship_state();
  void clear_has_ship_state();
  void set_has_reward();
  void clear_has_reward();
  void set_has_cost_diamond();
  void clear_has_cost_diamond();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Facility > facilitys_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > formula_unlock_;
  ::sg::RegionState* ship_state_;
  ::sg::Reward* reward_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 cost_diamond_;
  friend struct ::protobuf_UserFacility_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserFacilityService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserFacilityService) */ {
 public:
  UserFacilityService();
  virtual ~UserFacilityService();

  UserFacilityService(const UserFacilityService& from);

  inline UserFacilityService& operator=(const UserFacilityService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserFacilityService(UserFacilityService&& from) noexcept
    : UserFacilityService() {
    *this = ::std::move(from);
  }

  inline UserFacilityService& operator=(UserFacilityService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFacilityService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFacilityService* internal_default_instance() {
    return reinterpret_cast<const UserFacilityService*>(
               &_UserFacilityService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(UserFacilityService* other);
  void Swap(UserFacilityService* other);
  friend void swap(UserFacilityService& a, UserFacilityService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserFacilityService* New() const final {
    return CreateMaybeMessage<UserFacilityService>(NULL);
  }

  UserFacilityService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserFacilityService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserFacilityService& from);
  void MergeFrom(const UserFacilityService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFacilityService* other);
  protected:
  explicit UserFacilityService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserFacilityService_UserFacilityRequest UserFacilityRequest;
  typedef UserFacilityService_UserFacilityResponse UserFacilityResponse;

  typedef UserFacilityService_FACILITY_CMD FACILITY_CMD;
  static const FACILITY_CMD QUERY =
    UserFacilityService_FACILITY_CMD_QUERY;
  static const FACILITY_CMD PUTDOWN =
    UserFacilityService_FACILITY_CMD_PUTDOWN;
  static const FACILITY_CMD REMOVE =
    UserFacilityService_FACILITY_CMD_REMOVE;
  static const FACILITY_CMD CHANGE_STYLE =
    UserFacilityService_FACILITY_CMD_CHANGE_STYLE;
  static const FACILITY_CMD REPLACE =
    UserFacilityService_FACILITY_CMD_REPLACE;
  static const FACILITY_CMD CREATE_DEVICE =
    UserFacilityService_FACILITY_CMD_CREATE_DEVICE;
  static const FACILITY_CMD DEVICE_LEVEL_UP =
    UserFacilityService_FACILITY_CMD_DEVICE_LEVEL_UP;
  static const FACILITY_CMD GET_CONTAIN =
    UserFacilityService_FACILITY_CMD_GET_CONTAIN;
  static const FACILITY_CMD USE_SPECIAL_PROPERTY =
    UserFacilityService_FACILITY_CMD_USE_SPECIAL_PROPERTY;
  static const FACILITY_CMD ADD_FOOD =
    UserFacilityService_FACILITY_CMD_ADD_FOOD;
  static const FACILITY_CMD QUERY_ONE =
    UserFacilityService_FACILITY_CMD_QUERY_ONE;
  static const FACILITY_CMD UNLOCK_SLOT =
    UserFacilityService_FACILITY_CMD_UNLOCK_SLOT;
  static const FACILITY_CMD FAST_FINISH =
    UserFacilityService_FACILITY_CMD_FAST_FINISH;
  static const FACILITY_CMD CANCEL =
    UserFacilityService_FACILITY_CMD_CANCEL;
  static inline bool FACILITY_CMD_IsValid(int value) {
    return UserFacilityService_FACILITY_CMD_IsValid(value);
  }
  static const FACILITY_CMD FACILITY_CMD_MIN =
    UserFacilityService_FACILITY_CMD_FACILITY_CMD_MIN;
  static const FACILITY_CMD FACILITY_CMD_MAX =
    UserFacilityService_FACILITY_CMD_FACILITY_CMD_MAX;
  static const int FACILITY_CMD_ARRAYSIZE =
    UserFacilityService_FACILITY_CMD_FACILITY_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FACILITY_CMD_descriptor() {
    return UserFacilityService_FACILITY_CMD_descriptor();
  }
  static inline const ::std::string& FACILITY_CMD_Name(FACILITY_CMD value) {
    return UserFacilityService_FACILITY_CMD_Name(value);
  }
  static inline bool FACILITY_CMD_Parse(const ::std::string& name,
      FACILITY_CMD* value) {
    return UserFacilityService_FACILITY_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserFacilityService.UserFacilityRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserFacilityService_UserFacilityRequest& _internal_req() const;
  public:
  const ::sg::UserFacilityService_UserFacilityRequest& req() const;
  ::sg::UserFacilityService_UserFacilityRequest* release_req();
  ::sg::UserFacilityService_UserFacilityRequest* mutable_req();
  void set_allocated_req(::sg::UserFacilityService_UserFacilityRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserFacilityService_UserFacilityRequest* req);
  ::sg::UserFacilityService_UserFacilityRequest* unsafe_arena_release_req();

  // optional .sg.UserFacilityService.UserFacilityResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserFacilityService_UserFacilityResponse& _internal_resp() const;
  public:
  const ::sg::UserFacilityService_UserFacilityResponse& resp() const;
  ::sg::UserFacilityService_UserFacilityResponse* release_resp();
  ::sg::UserFacilityService_UserFacilityResponse* mutable_resp();
  void set_allocated_resp(::sg::UserFacilityService_UserFacilityResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserFacilityService_UserFacilityResponse* resp);
  ::sg::UserFacilityService_UserFacilityResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserFacilityService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserFacilityService_UserFacilityRequest* req_;
  ::sg::UserFacilityService_UserFacilityResponse* resp_;
  friend struct ::protobuf_UserFacility_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FacilityContainAddNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FacilityContainAddNotify) */ {
 public:
  FacilityContainAddNotify();
  virtual ~FacilityContainAddNotify();

  FacilityContainAddNotify(const FacilityContainAddNotify& from);

  inline FacilityContainAddNotify& operator=(const FacilityContainAddNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FacilityContainAddNotify(FacilityContainAddNotify&& from) noexcept
    : FacilityContainAddNotify() {
    *this = ::std::move(from);
  }

  inline FacilityContainAddNotify& operator=(FacilityContainAddNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FacilityContainAddNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FacilityContainAddNotify* internal_default_instance() {
    return reinterpret_cast<const FacilityContainAddNotify*>(
               &_FacilityContainAddNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(FacilityContainAddNotify* other);
  void Swap(FacilityContainAddNotify* other);
  friend void swap(FacilityContainAddNotify& a, FacilityContainAddNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FacilityContainAddNotify* New() const final {
    return CreateMaybeMessage<FacilityContainAddNotify>(NULL);
  }

  FacilityContainAddNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FacilityContainAddNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FacilityContainAddNotify& from);
  void MergeFrom(const FacilityContainAddNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FacilityContainAddNotify* other);
  protected:
  explicit FacilityContainAddNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Item items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::sg::Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Item >*
      mutable_items();
  const ::sg::Item& items(int index) const;
  ::sg::Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::sg::Item >&
      items() const;

  // required int32 facility_id = 1;
  bool has_facility_id() const;
  void clear_facility_id();
  static const int kFacilityIdFieldNumber = 1;
  ::google::protobuf::int32 facility_id() const;
  void set_facility_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.FacilityContainAddNotify)
 private:
  void set_has_facility_id();
  void clear_has_facility_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Item > items_;
  ::google::protobuf::int32 facility_id_;
  friend struct ::protobuf_UserFacility_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FacilityLevelUpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FacilityLevelUpNotify) */ {
 public:
  FacilityLevelUpNotify();
  virtual ~FacilityLevelUpNotify();

  FacilityLevelUpNotify(const FacilityLevelUpNotify& from);

  inline FacilityLevelUpNotify& operator=(const FacilityLevelUpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FacilityLevelUpNotify(FacilityLevelUpNotify&& from) noexcept
    : FacilityLevelUpNotify() {
    *this = ::std::move(from);
  }

  inline FacilityLevelUpNotify& operator=(FacilityLevelUpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FacilityLevelUpNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FacilityLevelUpNotify* internal_default_instance() {
    return reinterpret_cast<const FacilityLevelUpNotify*>(
               &_FacilityLevelUpNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(FacilityLevelUpNotify* other);
  void Swap(FacilityLevelUpNotify* other);
  friend void swap(FacilityLevelUpNotify& a, FacilityLevelUpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FacilityLevelUpNotify* New() const final {
    return CreateMaybeMessage<FacilityLevelUpNotify>(NULL);
  }

  FacilityLevelUpNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FacilityLevelUpNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FacilityLevelUpNotify& from);
  void MergeFrom(const FacilityLevelUpNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FacilityLevelUpNotify* other);
  protected:
  explicit FacilityLevelUpNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 formula_unlock = 2;
  int formula_unlock_size() const;
  void clear_formula_unlock();
  static const int kFormulaUnlockFieldNumber = 2;
  ::google::protobuf::int32 formula_unlock(int index) const;
  void set_formula_unlock(int index, ::google::protobuf::int32 value);
  void add_formula_unlock(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      formula_unlock() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_formula_unlock();

  // required .sg.Facility facility = 1;
  bool has_facility() const;
  void clear_facility();
  static const int kFacilityFieldNumber = 1;
  private:
  const ::sg::Facility& _internal_facility() const;
  public:
  const ::sg::Facility& facility() const;
  ::sg::Facility* release_facility();
  ::sg::Facility* mutable_facility();
  void set_allocated_facility(::sg::Facility* facility);
  void unsafe_arena_set_allocated_facility(
      ::sg::Facility* facility);
  ::sg::Facility* unsafe_arena_release_facility();

  // optional .sg.RegionState ship_state = 4;
  bool has_ship_state() const;
  void clear_ship_state();
  static const int kShipStateFieldNumber = 4;
  private:
  const ::sg::RegionState& _internal_ship_state() const;
  public:
  const ::sg::RegionState& ship_state() const;
  ::sg::RegionState* release_ship_state();
  ::sg::RegionState* mutable_ship_state();
  void set_allocated_ship_state(::sg::RegionState* ship_state);
  void unsafe_arena_set_allocated_ship_state(
      ::sg::RegionState* ship_state);
  ::sg::RegionState* unsafe_arena_release_ship_state();

  // @@protoc_insertion_point(class_scope:sg.FacilityLevelUpNotify)
 private:
  void set_has_facility();
  void clear_has_facility();
  void set_has_ship_state();
  void clear_has_ship_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > formula_unlock_;
  ::sg::Facility* facility_;
  ::sg::RegionState* ship_state_;
  friend struct ::protobuf_UserFacility_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserFacilityService_UserFacilityRequest

// required .sg.UserFacilityService.FACILITY_CMD cmd = 1;
inline bool UserFacilityService_UserFacilityRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserFacilityService_UserFacilityRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserFacilityService_UserFacilityRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserFacilityService_UserFacilityRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserFacilityService_FACILITY_CMD UserFacilityService_UserFacilityRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityRequest.cmd)
  return static_cast< ::sg::UserFacilityService_FACILITY_CMD >(cmd_);
}
inline void UserFacilityService_UserFacilityRequest::set_cmd(::sg::UserFacilityService_FACILITY_CMD value) {
  assert(::sg::UserFacilityService_FACILITY_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserFacilityService.UserFacilityRequest.cmd)
}

// repeated .sg.Facility facilitys = 2;
inline int UserFacilityService_UserFacilityRequest::facilitys_size() const {
  return facilitys_.size();
}
inline ::sg::Facility* UserFacilityService_UserFacilityRequest::mutable_facilitys(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserFacilityService.UserFacilityRequest.facilitys)
  return facilitys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Facility >*
UserFacilityService_UserFacilityRequest::mutable_facilitys() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserFacilityService.UserFacilityRequest.facilitys)
  return &facilitys_;
}
inline const ::sg::Facility& UserFacilityService_UserFacilityRequest::facilitys(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityRequest.facilitys)
  return facilitys_.Get(index);
}
inline ::sg::Facility* UserFacilityService_UserFacilityRequest::add_facilitys() {
  // @@protoc_insertion_point(field_add:sg.UserFacilityService.UserFacilityRequest.facilitys)
  return facilitys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Facility >&
UserFacilityService_UserFacilityRequest::facilitys() const {
  // @@protoc_insertion_point(field_list:sg.UserFacilityService.UserFacilityRequest.facilitys)
  return facilitys_;
}

// optional int32 device_id = 3;
inline bool UserFacilityService_UserFacilityRequest::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFacilityService_UserFacilityRequest::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFacilityService_UserFacilityRequest::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFacilityService_UserFacilityRequest::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 UserFacilityService_UserFacilityRequest::device_id() const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityRequest.device_id)
  return device_id_;
}
inline void UserFacilityService_UserFacilityRequest::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:sg.UserFacilityService.UserFacilityRequest.device_id)
}

// optional int32 device_typeid = 4;
inline bool UserFacilityService_UserFacilityRequest::has_device_typeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFacilityService_UserFacilityRequest::set_has_device_typeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFacilityService_UserFacilityRequest::clear_has_device_typeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFacilityService_UserFacilityRequest::clear_device_typeid() {
  device_typeid_ = 0;
  clear_has_device_typeid();
}
inline ::google::protobuf::int32 UserFacilityService_UserFacilityRequest::device_typeid() const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityRequest.device_typeid)
  return device_typeid_;
}
inline void UserFacilityService_UserFacilityRequest::set_device_typeid(::google::protobuf::int32 value) {
  set_has_device_typeid();
  device_typeid_ = value;
  // @@protoc_insertion_point(field_set:sg.UserFacilityService.UserFacilityRequest.device_typeid)
}

// optional int32 region = 5;
inline bool UserFacilityService_UserFacilityRequest::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserFacilityService_UserFacilityRequest::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserFacilityService_UserFacilityRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserFacilityService_UserFacilityRequest::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 UserFacilityService_UserFacilityRequest::region() const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityRequest.region)
  return region_;
}
inline void UserFacilityService_UserFacilityRequest::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:sg.UserFacilityService.UserFacilityRequest.region)
}

// optional int32 facility_id = 6;
inline bool UserFacilityService_UserFacilityRequest::has_facility_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserFacilityService_UserFacilityRequest::set_has_facility_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserFacilityService_UserFacilityRequest::clear_has_facility_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserFacilityService_UserFacilityRequest::clear_facility_id() {
  facility_id_ = 0;
  clear_has_facility_id();
}
inline ::google::protobuf::int32 UserFacilityService_UserFacilityRequest::facility_id() const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityRequest.facility_id)
  return facility_id_;
}
inline void UserFacilityService_UserFacilityRequest::set_facility_id(::google::protobuf::int32 value) {
  set_has_facility_id();
  facility_id_ = value;
  // @@protoc_insertion_point(field_set:sg.UserFacilityService.UserFacilityRequest.facility_id)
}

// repeated .sg.pb_pair_int_int food_list = 7;
inline int UserFacilityService_UserFacilityRequest::food_list_size() const {
  return food_list_.size();
}
inline ::sg::pb_pair_int_int* UserFacilityService_UserFacilityRequest::mutable_food_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserFacilityService.UserFacilityRequest.food_list)
  return food_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >*
UserFacilityService_UserFacilityRequest::mutable_food_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserFacilityService.UserFacilityRequest.food_list)
  return &food_list_;
}
inline const ::sg::pb_pair_int_int& UserFacilityService_UserFacilityRequest::food_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityRequest.food_list)
  return food_list_.Get(index);
}
inline ::sg::pb_pair_int_int* UserFacilityService_UserFacilityRequest::add_food_list() {
  // @@protoc_insertion_point(field_add:sg.UserFacilityService.UserFacilityRequest.food_list)
  return food_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::pb_pair_int_int >&
UserFacilityService_UserFacilityRequest::food_list() const {
  // @@protoc_insertion_point(field_list:sg.UserFacilityService.UserFacilityRequest.food_list)
  return food_list_;
}

// optional int32 slot_id = 8;
inline bool UserFacilityService_UserFacilityRequest::has_slot_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserFacilityService_UserFacilityRequest::set_has_slot_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserFacilityService_UserFacilityRequest::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserFacilityService_UserFacilityRequest::clear_slot_id() {
  slot_id_ = 0;
  clear_has_slot_id();
}
inline ::google::protobuf::int32 UserFacilityService_UserFacilityRequest::slot_id() const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityRequest.slot_id)
  return slot_id_;
}
inline void UserFacilityService_UserFacilityRequest::set_slot_id(::google::protobuf::int32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:sg.UserFacilityService.UserFacilityRequest.slot_id)
}

// -------------------------------------------------------------------

// UserFacilityService_UserFacilityResponse

// required int32 result = 1;
inline bool UserFacilityService_UserFacilityResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserFacilityService_UserFacilityResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserFacilityService_UserFacilityResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserFacilityService_UserFacilityResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserFacilityService_UserFacilityResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityResponse.result)
  return result_;
}
inline void UserFacilityService_UserFacilityResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserFacilityService.UserFacilityResponse.result)
}

// repeated .sg.Facility facilitys = 2;
inline int UserFacilityService_UserFacilityResponse::facilitys_size() const {
  return facilitys_.size();
}
inline ::sg::Facility* UserFacilityService_UserFacilityResponse::mutable_facilitys(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserFacilityService.UserFacilityResponse.facilitys)
  return facilitys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Facility >*
UserFacilityService_UserFacilityResponse::mutable_facilitys() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserFacilityService.UserFacilityResponse.facilitys)
  return &facilitys_;
}
inline const ::sg::Facility& UserFacilityService_UserFacilityResponse::facilitys(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityResponse.facilitys)
  return facilitys_.Get(index);
}
inline ::sg::Facility* UserFacilityService_UserFacilityResponse::add_facilitys() {
  // @@protoc_insertion_point(field_add:sg.UserFacilityService.UserFacilityResponse.facilitys)
  return facilitys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Facility >&
UserFacilityService_UserFacilityResponse::facilitys() const {
  // @@protoc_insertion_point(field_list:sg.UserFacilityService.UserFacilityResponse.facilitys)
  return facilitys_;
}

// repeated int32 formula_unlock = 3;
inline int UserFacilityService_UserFacilityResponse::formula_unlock_size() const {
  return formula_unlock_.size();
}
inline void UserFacilityService_UserFacilityResponse::clear_formula_unlock() {
  formula_unlock_.Clear();
}
inline ::google::protobuf::int32 UserFacilityService_UserFacilityResponse::formula_unlock(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityResponse.formula_unlock)
  return formula_unlock_.Get(index);
}
inline void UserFacilityService_UserFacilityResponse::set_formula_unlock(int index, ::google::protobuf::int32 value) {
  formula_unlock_.Set(index, value);
  // @@protoc_insertion_point(field_set:sg.UserFacilityService.UserFacilityResponse.formula_unlock)
}
inline void UserFacilityService_UserFacilityResponse::add_formula_unlock(::google::protobuf::int32 value) {
  formula_unlock_.Add(value);
  // @@protoc_insertion_point(field_add:sg.UserFacilityService.UserFacilityResponse.formula_unlock)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserFacilityService_UserFacilityResponse::formula_unlock() const {
  // @@protoc_insertion_point(field_list:sg.UserFacilityService.UserFacilityResponse.formula_unlock)
  return formula_unlock_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserFacilityService_UserFacilityResponse::mutable_formula_unlock() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserFacilityService.UserFacilityResponse.formula_unlock)
  return &formula_unlock_;
}

// optional .sg.RegionState ship_state = 4;
inline bool UserFacilityService_UserFacilityResponse::has_ship_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFacilityService_UserFacilityResponse::set_has_ship_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFacilityService_UserFacilityResponse::clear_has_ship_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::RegionState& UserFacilityService_UserFacilityResponse::_internal_ship_state() const {
  return *ship_state_;
}
inline const ::sg::RegionState& UserFacilityService_UserFacilityResponse::ship_state() const {
  const ::sg::RegionState* p = ship_state_;
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityResponse.ship_state)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::RegionState*>(
      &::sg::_RegionState_default_instance_);
}
inline ::sg::RegionState* UserFacilityService_UserFacilityResponse::release_ship_state() {
  // @@protoc_insertion_point(field_release:sg.UserFacilityService.UserFacilityResponse.ship_state)
  clear_has_ship_state();
  ::sg::RegionState* temp = ship_state_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  ship_state_ = NULL;
  return temp;
}
inline ::sg::RegionState* UserFacilityService_UserFacilityResponse::unsafe_arena_release_ship_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserFacilityService.UserFacilityResponse.ship_state)
  clear_has_ship_state();
  ::sg::RegionState* temp = ship_state_;
  ship_state_ = NULL;
  return temp;
}
inline ::sg::RegionState* UserFacilityService_UserFacilityResponse::mutable_ship_state() {
  set_has_ship_state();
  if (ship_state_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::RegionState>(GetArenaNoVirtual());
    ship_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserFacilityService.UserFacilityResponse.ship_state)
  return ship_state_;
}
inline void UserFacilityService_UserFacilityResponse::set_allocated_ship_state(::sg::RegionState* ship_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ship_state_);
  }
  if (ship_state) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ship_state)->GetArena();
    if (message_arena != submessage_arena) {
      ship_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ship_state, submessage_arena);
    }
    set_has_ship_state();
  } else {
    clear_has_ship_state();
  }
  ship_state_ = ship_state;
  // @@protoc_insertion_point(field_set_allocated:sg.UserFacilityService.UserFacilityResponse.ship_state)
}

// optional .sg.Reward reward = 5;
inline bool UserFacilityService_UserFacilityResponse::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFacilityService_UserFacilityResponse::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFacilityService_UserFacilityResponse::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::Reward& UserFacilityService_UserFacilityResponse::_internal_reward() const {
  return *reward_;
}
inline const ::sg::Reward& UserFacilityService_UserFacilityResponse::reward() const {
  const ::sg::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityResponse.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* UserFacilityService_UserFacilityResponse::release_reward() {
  // @@protoc_insertion_point(field_release:sg.UserFacilityService.UserFacilityResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserFacilityService_UserFacilityResponse::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserFacilityService.UserFacilityResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserFacilityService_UserFacilityResponse::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserFacilityService.UserFacilityResponse.reward)
  return reward_;
}
inline void UserFacilityService_UserFacilityResponse::set_allocated_reward(::sg::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reward_);
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reward)->GetArena();
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:sg.UserFacilityService.UserFacilityResponse.reward)
}

// optional int32 cost_diamond = 6;
inline bool UserFacilityService_UserFacilityResponse::has_cost_diamond() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserFacilityService_UserFacilityResponse::set_has_cost_diamond() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserFacilityService_UserFacilityResponse::clear_has_cost_diamond() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserFacilityService_UserFacilityResponse::clear_cost_diamond() {
  cost_diamond_ = 0;
  clear_has_cost_diamond();
}
inline ::google::protobuf::int32 UserFacilityService_UserFacilityResponse::cost_diamond() const {
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.UserFacilityResponse.cost_diamond)
  return cost_diamond_;
}
inline void UserFacilityService_UserFacilityResponse::set_cost_diamond(::google::protobuf::int32 value) {
  set_has_cost_diamond();
  cost_diamond_ = value;
  // @@protoc_insertion_point(field_set:sg.UserFacilityService.UserFacilityResponse.cost_diamond)
}

// -------------------------------------------------------------------

// UserFacilityService

// optional .sg.UserFacilityService.UserFacilityRequest req = 1;
inline bool UserFacilityService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFacilityService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFacilityService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFacilityService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserFacilityService_UserFacilityRequest& UserFacilityService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserFacilityService_UserFacilityRequest& UserFacilityService::req() const {
  const ::sg::UserFacilityService_UserFacilityRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserFacilityService_UserFacilityRequest*>(
      &::sg::_UserFacilityService_UserFacilityRequest_default_instance_);
}
inline ::sg::UserFacilityService_UserFacilityRequest* UserFacilityService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserFacilityService.req)
  clear_has_req();
  ::sg::UserFacilityService_UserFacilityRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserFacilityService_UserFacilityRequest* UserFacilityService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserFacilityService.req)
  clear_has_req();
  ::sg::UserFacilityService_UserFacilityRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserFacilityService_UserFacilityRequest* UserFacilityService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserFacilityService_UserFacilityRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserFacilityService.req)
  return req_;
}
inline void UserFacilityService::set_allocated_req(::sg::UserFacilityService_UserFacilityRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserFacilityService.req)
}

// optional .sg.UserFacilityService.UserFacilityResponse resp = 2;
inline bool UserFacilityService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFacilityService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFacilityService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFacilityService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserFacilityService_UserFacilityResponse& UserFacilityService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserFacilityService_UserFacilityResponse& UserFacilityService::resp() const {
  const ::sg::UserFacilityService_UserFacilityResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserFacilityService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserFacilityService_UserFacilityResponse*>(
      &::sg::_UserFacilityService_UserFacilityResponse_default_instance_);
}
inline ::sg::UserFacilityService_UserFacilityResponse* UserFacilityService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserFacilityService.resp)
  clear_has_resp();
  ::sg::UserFacilityService_UserFacilityResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserFacilityService_UserFacilityResponse* UserFacilityService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserFacilityService.resp)
  clear_has_resp();
  ::sg::UserFacilityService_UserFacilityResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserFacilityService_UserFacilityResponse* UserFacilityService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserFacilityService_UserFacilityResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserFacilityService.resp)
  return resp_;
}
inline void UserFacilityService::set_allocated_resp(::sg::UserFacilityService_UserFacilityResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserFacilityService.resp)
}

// -------------------------------------------------------------------

// FacilityContainAddNotify

// required int32 facility_id = 1;
inline bool FacilityContainAddNotify::has_facility_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FacilityContainAddNotify::set_has_facility_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FacilityContainAddNotify::clear_has_facility_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FacilityContainAddNotify::clear_facility_id() {
  facility_id_ = 0;
  clear_has_facility_id();
}
inline ::google::protobuf::int32 FacilityContainAddNotify::facility_id() const {
  // @@protoc_insertion_point(field_get:sg.FacilityContainAddNotify.facility_id)
  return facility_id_;
}
inline void FacilityContainAddNotify::set_facility_id(::google::protobuf::int32 value) {
  set_has_facility_id();
  facility_id_ = value;
  // @@protoc_insertion_point(field_set:sg.FacilityContainAddNotify.facility_id)
}

// repeated .sg.Item items = 2;
inline int FacilityContainAddNotify::items_size() const {
  return items_.size();
}
inline ::sg::Item* FacilityContainAddNotify::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:sg.FacilityContainAddNotify.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Item >*
FacilityContainAddNotify::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:sg.FacilityContainAddNotify.items)
  return &items_;
}
inline const ::sg::Item& FacilityContainAddNotify::items(int index) const {
  // @@protoc_insertion_point(field_get:sg.FacilityContainAddNotify.items)
  return items_.Get(index);
}
inline ::sg::Item* FacilityContainAddNotify::add_items() {
  // @@protoc_insertion_point(field_add:sg.FacilityContainAddNotify.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Item >&
FacilityContainAddNotify::items() const {
  // @@protoc_insertion_point(field_list:sg.FacilityContainAddNotify.items)
  return items_;
}

// -------------------------------------------------------------------

// FacilityLevelUpNotify

// required .sg.Facility facility = 1;
inline bool FacilityLevelUpNotify::has_facility() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FacilityLevelUpNotify::set_has_facility() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FacilityLevelUpNotify::clear_has_facility() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Facility& FacilityLevelUpNotify::_internal_facility() const {
  return *facility_;
}
inline const ::sg::Facility& FacilityLevelUpNotify::facility() const {
  const ::sg::Facility* p = facility_;
  // @@protoc_insertion_point(field_get:sg.FacilityLevelUpNotify.facility)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Facility*>(
      &::sg::_Facility_default_instance_);
}
inline ::sg::Facility* FacilityLevelUpNotify::release_facility() {
  // @@protoc_insertion_point(field_release:sg.FacilityLevelUpNotify.facility)
  clear_has_facility();
  ::sg::Facility* temp = facility_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  facility_ = NULL;
  return temp;
}
inline ::sg::Facility* FacilityLevelUpNotify::unsafe_arena_release_facility() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FacilityLevelUpNotify.facility)
  clear_has_facility();
  ::sg::Facility* temp = facility_;
  facility_ = NULL;
  return temp;
}
inline ::sg::Facility* FacilityLevelUpNotify::mutable_facility() {
  set_has_facility();
  if (facility_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Facility>(GetArenaNoVirtual());
    facility_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FacilityLevelUpNotify.facility)
  return facility_;
}
inline void FacilityLevelUpNotify::set_allocated_facility(::sg::Facility* facility) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(facility_);
  }
  if (facility) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(facility)->GetArena();
    if (message_arena != submessage_arena) {
      facility = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, facility, submessage_arena);
    }
    set_has_facility();
  } else {
    clear_has_facility();
  }
  facility_ = facility;
  // @@protoc_insertion_point(field_set_allocated:sg.FacilityLevelUpNotify.facility)
}

// repeated int32 formula_unlock = 2;
inline int FacilityLevelUpNotify::formula_unlock_size() const {
  return formula_unlock_.size();
}
inline void FacilityLevelUpNotify::clear_formula_unlock() {
  formula_unlock_.Clear();
}
inline ::google::protobuf::int32 FacilityLevelUpNotify::formula_unlock(int index) const {
  // @@protoc_insertion_point(field_get:sg.FacilityLevelUpNotify.formula_unlock)
  return formula_unlock_.Get(index);
}
inline void FacilityLevelUpNotify::set_formula_unlock(int index, ::google::protobuf::int32 value) {
  formula_unlock_.Set(index, value);
  // @@protoc_insertion_point(field_set:sg.FacilityLevelUpNotify.formula_unlock)
}
inline void FacilityLevelUpNotify::add_formula_unlock(::google::protobuf::int32 value) {
  formula_unlock_.Add(value);
  // @@protoc_insertion_point(field_add:sg.FacilityLevelUpNotify.formula_unlock)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FacilityLevelUpNotify::formula_unlock() const {
  // @@protoc_insertion_point(field_list:sg.FacilityLevelUpNotify.formula_unlock)
  return formula_unlock_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FacilityLevelUpNotify::mutable_formula_unlock() {
  // @@protoc_insertion_point(field_mutable_list:sg.FacilityLevelUpNotify.formula_unlock)
  return &formula_unlock_;
}

// optional .sg.RegionState ship_state = 4;
inline bool FacilityLevelUpNotify::has_ship_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FacilityLevelUpNotify::set_has_ship_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FacilityLevelUpNotify::clear_has_ship_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::RegionState& FacilityLevelUpNotify::_internal_ship_state() const {
  return *ship_state_;
}
inline const ::sg::RegionState& FacilityLevelUpNotify::ship_state() const {
  const ::sg::RegionState* p = ship_state_;
  // @@protoc_insertion_point(field_get:sg.FacilityLevelUpNotify.ship_state)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::RegionState*>(
      &::sg::_RegionState_default_instance_);
}
inline ::sg::RegionState* FacilityLevelUpNotify::release_ship_state() {
  // @@protoc_insertion_point(field_release:sg.FacilityLevelUpNotify.ship_state)
  clear_has_ship_state();
  ::sg::RegionState* temp = ship_state_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  ship_state_ = NULL;
  return temp;
}
inline ::sg::RegionState* FacilityLevelUpNotify::unsafe_arena_release_ship_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FacilityLevelUpNotify.ship_state)
  clear_has_ship_state();
  ::sg::RegionState* temp = ship_state_;
  ship_state_ = NULL;
  return temp;
}
inline ::sg::RegionState* FacilityLevelUpNotify::mutable_ship_state() {
  set_has_ship_state();
  if (ship_state_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::RegionState>(GetArenaNoVirtual());
    ship_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FacilityLevelUpNotify.ship_state)
  return ship_state_;
}
inline void FacilityLevelUpNotify::set_allocated_ship_state(::sg::RegionState* ship_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ship_state_);
  }
  if (ship_state) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ship_state)->GetArena();
    if (message_arena != submessage_arena) {
      ship_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ship_state, submessage_arena);
    }
    set_has_ship_state();
  } else {
    clear_has_ship_state();
  }
  ship_state_ = ship_state;
  // @@protoc_insertion_point(field_set_allocated:sg.FacilityLevelUpNotify.ship_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::UserFacilityService_FACILITY_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserFacilityService_FACILITY_CMD>() {
  return ::sg::UserFacilityService_FACILITY_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_UserFacility_2eproto
