// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserMap.proto

#include "UserMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_UserMap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GarrisonRoom;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HarvestTime;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapArea;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OccupierData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PirateShip;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WildIslandHarvestLog_HarvestItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WildIsland_Workshop;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapAreaList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapEntryList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerShip;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserMapService_MapRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandHarvestLog;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandHarvestLog_HarvestItemList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandHarvestLog_HarvestLog;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandHarvestLog_HarvestLogList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MapEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_WildIsland;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserMap_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_UserMapService_MapResponse;
}  // namespace protobuf_UserMap_2eproto
namespace sg {
class MapAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapArea>
      _instance;
} _MapArea_default_instance_;
class MapAreaListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapAreaList>
      _instance;
} _MapAreaList_default_instance_;
class PirateShipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PirateShip>
      _instance;
} _PirateShip_default_instance_;
class PlayerShipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerShip>
      _instance;
} _PlayerShip_default_instance_;
class MapEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapEntry>
      _instance;
} _MapEntry_default_instance_;
class MapEntryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapEntryList>
      _instance;
} _MapEntryList_default_instance_;
class OccupierDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OccupierData>
      _instance;
} _OccupierData_default_instance_;
class WildIsland_WorkshopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIsland_Workshop>
      _instance;
} _WildIsland_Workshop_default_instance_;
class WildIsland_WorkshopOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIsland_WorkshopOption>
      _instance;
} _WildIsland_WorkshopOption_default_instance_;
class WildIslandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIsland>
      _instance;
} _WildIsland_default_instance_;
class WildIslandListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIslandList>
      _instance;
} _WildIslandList_default_instance_;
class WildIslandHarvestLog_HarvestItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIslandHarvestLog_HarvestItem>
      _instance;
} _WildIslandHarvestLog_HarvestItem_default_instance_;
class WildIslandHarvestLog_HarvestItemListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIslandHarvestLog_HarvestItemList>
      _instance;
} _WildIslandHarvestLog_HarvestItemList_default_instance_;
class WildIslandHarvestLog_HarvestLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIslandHarvestLog_HarvestLog>
      _instance;
} _WildIslandHarvestLog_HarvestLog_default_instance_;
class WildIslandHarvestLog_HarvestLogListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIslandHarvestLog_HarvestLogList>
      _instance;
} _WildIslandHarvestLog_HarvestLogList_default_instance_;
class WildIslandHarvestLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIslandHarvestLog>
      _instance;
} _WildIslandHarvestLog_default_instance_;
class HarvestTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HarvestTime>
      _instance;
} _HarvestTime_default_instance_;
class GarrisonRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GarrisonRoom>
      _instance;
} _GarrisonRoom_default_instance_;
class UserMapService_MapRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserMapService_MapRequest>
      _instance;
} _UserMapService_MapRequest_default_instance_;
class UserMapService_MapResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserMapService_MapResponse>
      _instance;
} _UserMapService_MapResponse_default_instance_;
class UserMapServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserMapService>
      _instance;
} _UserMapService_default_instance_;
class MapEntryStateNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapEntryStateNotify>
      _instance;
} _MapEntryStateNotify_default_instance_;
class WildIslandStateNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIslandStateNotify>
      _instance;
} _WildIslandStateNotify_default_instance_;
}  // namespace sg
namespace protobuf_UserMap_2eproto {
static void InitDefaultsMapArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MapArea_default_instance_;
    new (ptr) ::sg::MapArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MapArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapArea}, {}};

static void InitDefaultsMapAreaList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MapAreaList_default_instance_;
    new (ptr) ::sg::MapAreaList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MapAreaList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapAreaList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapAreaList}, {
      &protobuf_UserMap_2eproto::scc_info_MapArea.base,}};

static void InitDefaultsPirateShip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PirateShip_default_instance_;
    new (ptr) ::sg::PirateShip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PirateShip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PirateShip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPirateShip}, {}};

static void InitDefaultsPlayerShip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PlayerShip_default_instance_;
    new (ptr) ::sg::PlayerShip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PlayerShip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerShip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerShip}, {
      &protobuf_BaseStruct_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsMapEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MapEntry_default_instance_;
    new (ptr) ::sg::MapEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MapEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MapEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapEntry}, {
      &protobuf_UserMap_2eproto::scc_info_PirateShip.base,
      &protobuf_UserMap_2eproto::scc_info_PlayerShip.base,}};

static void InitDefaultsMapEntryList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MapEntryList_default_instance_;
    new (ptr) ::sg::MapEntryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MapEntryList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapEntryList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapEntryList}, {
      &protobuf_UserMap_2eproto::scc_info_MapEntry.base,}};

static void InitDefaultsOccupierData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_OccupierData_default_instance_;
    new (ptr) ::sg::OccupierData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::OccupierData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OccupierData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOccupierData}, {}};

static void InitDefaultsWildIsland_Workshop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIsland_Workshop_default_instance_;
    new (ptr) ::sg::WildIsland_Workshop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIsland_Workshop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WildIsland_Workshop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWildIsland_Workshop}, {}};

static void InitDefaultsWildIsland_WorkshopOption() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIsland_WorkshopOption_default_instance_;
    new (ptr) ::sg::WildIsland_WorkshopOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIsland_WorkshopOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WildIsland_WorkshopOption =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWildIsland_WorkshopOption}, {}};

static void InitDefaultsWildIsland() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIsland_default_instance_;
    new (ptr) ::sg::WildIsland();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIsland::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WildIsland =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWildIsland}, {
      &protobuf_UserMap_2eproto::scc_info_OccupierData.base,
      &protobuf_UserMap_2eproto::scc_info_WildIsland_Workshop.base,}};

static void InitDefaultsWildIslandList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIslandList_default_instance_;
    new (ptr) ::sg::WildIslandList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIslandList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWildIslandList}, {
      &protobuf_UserMap_2eproto::scc_info_WildIsland.base,}};

static void InitDefaultsWildIslandHarvestLog_HarvestItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIslandHarvestLog_HarvestItem_default_instance_;
    new (ptr) ::sg::WildIslandHarvestLog_HarvestItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIslandHarvestLog_HarvestItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WildIslandHarvestLog_HarvestItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWildIslandHarvestLog_HarvestItem}, {}};

static void InitDefaultsWildIslandHarvestLog_HarvestItemList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIslandHarvestLog_HarvestItemList_default_instance_;
    new (ptr) ::sg::WildIslandHarvestLog_HarvestItemList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIslandHarvestLog_HarvestItemList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandHarvestLog_HarvestItemList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWildIslandHarvestLog_HarvestItemList}, {
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestItem.base,}};

static void InitDefaultsWildIslandHarvestLog_HarvestLog() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIslandHarvestLog_HarvestLog_default_instance_;
    new (ptr) ::sg::WildIslandHarvestLog_HarvestLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIslandHarvestLog_HarvestLog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandHarvestLog_HarvestLog =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWildIslandHarvestLog_HarvestLog}, {
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestItemList.base,}};

static void InitDefaultsWildIslandHarvestLog_HarvestLogList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIslandHarvestLog_HarvestLogList_default_instance_;
    new (ptr) ::sg::WildIslandHarvestLog_HarvestLogList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIslandHarvestLog_HarvestLogList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandHarvestLog_HarvestLogList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWildIslandHarvestLog_HarvestLogList}, {
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestLog.base,}};

static void InitDefaultsWildIslandHarvestLog() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIslandHarvestLog_default_instance_;
    new (ptr) ::sg::WildIslandHarvestLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIslandHarvestLog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandHarvestLog =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWildIslandHarvestLog}, {
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestLogList.base,}};

static void InitDefaultsHarvestTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HarvestTime_default_instance_;
    new (ptr) ::sg::HarvestTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HarvestTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HarvestTime =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHarvestTime}, {}};

static void InitDefaultsGarrisonRoom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GarrisonRoom_default_instance_;
    new (ptr) ::sg::GarrisonRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GarrisonRoom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GarrisonRoom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGarrisonRoom}, {}};

static void InitDefaultsUserMapService_MapRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserMapService_MapRequest_default_instance_;
    new (ptr) ::sg::UserMapService_MapRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserMapService_MapRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserMapService_MapRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserMapService_MapRequest}, {
      &protobuf_UserMap_2eproto::scc_info_GarrisonRoom.base,}};

static void InitDefaultsUserMapService_MapResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserMapService_MapResponse_default_instance_;
    new (ptr) ::sg::UserMapService_MapResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserMapService_MapResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_UserMapService_MapResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsUserMapService_MapResponse}, {
      &protobuf_UserMap_2eproto::scc_info_MapAreaList.base,
      &protobuf_UserMap_2eproto::scc_info_MapEntryList.base,
      &protobuf_UserMap_2eproto::scc_info_WildIslandList.base,
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog.base,
      &protobuf_UserMap_2eproto::scc_info_HarvestTime.base,}};

static void InitDefaultsUserMapService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserMapService_default_instance_;
    new (ptr) ::sg::UserMapService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserMapService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserMapService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserMapService}, {
      &protobuf_UserMap_2eproto::scc_info_UserMapService_MapRequest.base,
      &protobuf_UserMap_2eproto::scc_info_UserMapService_MapResponse.base,}};

static void InitDefaultsMapEntryStateNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MapEntryStateNotify_default_instance_;
    new (ptr) ::sg::MapEntryStateNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MapEntryStateNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapEntryStateNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapEntryStateNotify}, {
      &protobuf_UserMap_2eproto::scc_info_MapEntryList.base,}};

static void InitDefaultsWildIslandStateNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_WildIslandStateNotify_default_instance_;
    new (ptr) ::sg::WildIslandStateNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::WildIslandStateNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WildIslandStateNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWildIslandStateNotify}, {
      &protobuf_UserMap_2eproto::scc_info_WildIslandList.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MapArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapAreaList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PirateShip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerShip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapEntryList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OccupierData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIsland_Workshop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIsland_WorkshopOption.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIsland.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIslandList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIslandHarvestLog_HarvestItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIslandHarvestLog_HarvestItemList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIslandHarvestLog_HarvestLog.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIslandHarvestLog_HarvestLogList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIslandHarvestLog.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HarvestTime.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GarrisonRoom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserMapService_MapRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserMapService_MapResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserMapService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapEntryStateNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIslandStateNotify.base);
}

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapArea, areaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapArea, area_state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapAreaList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapAreaList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapAreaList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PirateShip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PirateShip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PirateShip, shipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PirateShip, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PirateShip, refresh_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PirateShip, fight_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PirateShip, fight_num_max_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerShip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerShip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PlayerShip, player_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, entry_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, passable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, harvest_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, occupier_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, occupier_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, occupier_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, occupier_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, occupier_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, occupy_protect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, occupy_protect_starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, occupy_protect_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, workshop_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, workshop_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, pirate_ship_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, player_ship_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntry, refresh_time_),
  3,
  4,
  7,
  5,
  6,
  9,
  0,
  10,
  11,
  12,
  8,
  14,
  13,
  15,
  16,
  1,
  2,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntryList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntryList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OccupierData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OccupierData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OccupierData, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OccupierData, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OccupierData, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OccupierData, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::OccupierData, occupy_time_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_Workshop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_Workshop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_Workshop, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_Workshop, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_Workshop, gather_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_Workshop, gather_add_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_Workshop, gather_time_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_WorkshopOption, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_WorkshopOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland_WorkshopOption, gather_per_min_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland, island_cfgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland, island_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland, occupier_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland, workshop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIsland, map_data_),
  3,
  4,
  5,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestItem, item_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestItem, item_num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestItemList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestItemList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestLog, harvest_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestLog, item_list_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestLogList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestLogList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog_HarvestLogList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandHarvestLog, harvest_log_list_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarvestTime, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarvestTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarvestTime, harvest_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HarvestTime, harvest_time_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GarrisonRoom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GarrisonRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GarrisonRoom, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GarrisonRoom, garrison_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapRequest, areaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapRequest, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapRequest, garrison_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapRequest, harvest_type_),
  4,
  2,
  1,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapResponse, area_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapResponse, entry_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapResponse, island_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapResponse, harvest_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapResponse, harvest_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService_MapResponse, cfg_harvest_interval_seconds_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserMapService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntryStateNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntryStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MapEntryStateNotify, entry_list_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandStateNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::WildIslandStateNotify, island_list_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::sg::MapArea)},
  { 9, 15, sizeof(::sg::MapAreaList)},
  { 16, 26, sizeof(::sg::PirateShip)},
  { 31, 37, sizeof(::sg::PlayerShip)},
  { 38, 61, sizeof(::sg::MapEntry)},
  { 79, 85, sizeof(::sg::MapEntryList)},
  { 86, 96, sizeof(::sg::OccupierData)},
  { 101, 111, sizeof(::sg::WildIsland_Workshop)},
  { 116, 122, sizeof(::sg::WildIsland_WorkshopOption)},
  { 123, 134, sizeof(::sg::WildIsland)},
  { 140, 146, sizeof(::sg::WildIslandList)},
  { 147, 154, sizeof(::sg::WildIslandHarvestLog_HarvestItem)},
  { 156, 162, sizeof(::sg::WildIslandHarvestLog_HarvestItemList)},
  { 163, 170, sizeof(::sg::WildIslandHarvestLog_HarvestLog)},
  { 172, 178, sizeof(::sg::WildIslandHarvestLog_HarvestLogList)},
  { 179, 185, sizeof(::sg::WildIslandHarvestLog)},
  { 186, 193, sizeof(::sg::HarvestTime)},
  { 195, 202, sizeof(::sg::GarrisonRoom)},
  { 204, 214, sizeof(::sg::UserMapService_MapRequest)},
  { 219, 231, sizeof(::sg::UserMapService_MapResponse)},
  { 238, 245, sizeof(::sg::UserMapService)},
  { 247, 253, sizeof(::sg::MapEntryStateNotify)},
  { 254, 260, sizeof(::sg::WildIslandStateNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MapArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MapAreaList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PirateShip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PlayerShip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MapEntryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_OccupierData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIsland_Workshop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIsland_WorkshopOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIsland_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIslandList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIslandHarvestLog_HarvestItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIslandHarvestLog_HarvestItemList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIslandHarvestLog_HarvestLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIslandHarvestLog_HarvestLogList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIslandHarvestLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HarvestTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GarrisonRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserMapService_MapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserMapService_MapResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserMapService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MapEntryStateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_WildIslandStateNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "UserMap.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rUserMap.proto\022\002sg\032\020BaseStruct.proto\"H\n"
      "\007MapArea\022\016\n\006areaid\030\001 \002(\004\022-\n\narea_state\030\002"
      " \002(\0162\031.sg.MAP_AREA_UNLOCK_STATE\"(\n\013MapAr"
      "eaList\022\031\n\004list\030\001 \003(\0132\013.sg.MapArea\"j\n\nPir"
      "ateShip\022\016\n\006shipid\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\022\024\n"
      "\014refresh_time\030\003 \001(\020\022\021\n\tfight_num\030\004 \001(\005\022\025"
      "\n\rfight_num_max\030\005 \001(\005\"*\n\nPlayerShip\022\034\n\006p"
      "layer\030\001 \002(\0132\014.sg.UserInfo\"\224\004\n\010MapEntry\022\017"
      "\n\007entryid\030\001 \002(\004\022(\n\013entry_state\030\002 \002(\0162\023.s"
      "g.MAP_ENTRY_STATE\022\020\n\010passable\030\003 \001(\010\0220\n\014h"
      "arvest_type\030\004 \001(\0162\032.sg.MAP_ENTRY_HARVEST"
      "_TYPE\022\014\n\004type\030\005 \001(\005\022\025\n\roccupier_uuid\030\013 \001"
      "(\004\022\025\n\roccupier_nick\030\014 \001(\014\022\026\n\016occupier_le"
      "vel\030\r \001(\005\022\024\n\014occupier_exp\030\016 \001(\005\022\025\n\roccup"
      "ier_rank\030\017 \001(\005\022\026\n\016occupy_protect\030\025 \001(\010\022 "
      "\n\030occupy_protect_starttime\030\026 \001(\020\022\036\n\026occu"
      "py_protect_seconds\030\027 \001(\005\022\026\n\016workshop_lev"
      "el\030\037 \001(\005\0226\n\016workshop_state\030  \001(\0162\036.sg.WI"
      "LD_ISLAND_WORKSHOP_STATE\022#\n\013pirate_ship\030"
      ") \001(\0132\016.sg.PirateShip\022#\n\013player_ship\030* \001"
      "(\0132\016.sg.PlayerShip\022\024\n\014refresh_time\030+ \001(\020"
      "\"*\n\014MapEntryList\022\032\n\004list\030\001 \003(\0132\014.sg.MapE"
      "ntry\"\\\n\014OccupierData\022\014\n\004uuid\030\001 \002(\004\022\014\n\004ni"
      "ck\030\002 \001(\014\022\r\n\005level\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005\022\023\n"
      "\013occupy_time\030\005 \001(\020\"\202\003\n\nWildIsland\022\017\n\007ent"
      "ryid\030\001 \002(\004\022\024\n\014island_cfgid\030\002 \002(\005\022+\n\014isla"
      "nd_state\030\003 \002(\0162\025.sg.WILD_ISLAND_STATE\022\'\n"
      "\roccupier_data\030\004 \002(\0132\020.sg.OccupierData\022)"
      "\n\010workshop\030\013 \001(\0132\027.sg.WildIsland.Worksho"
      "p\022\020\n\010map_data\030\014 \001(\014\032\217\001\n\010Workshop\022\r\n\005leve"
      "l\030\001 \002(\005\022-\n\005state\030\002 \002(\0162\036.sg.WILD_ISLAND_"
      "WORKSHOP_STATE\022\026\n\016gather_per_min\030\003 \002(\002\022\030"
      "\n\020gather_add_ratio\030\004 \002(\002\022\023\n\013gather_time\030"
      "\005 \002(\020\032(\n\016WorkshopOption\022\026\n\016gather_per_mi"
      "n\030\001 \002(\002\".\n\016WildIslandList\022\034\n\004list\030\001 \003(\0132"
      "\016.sg.WildIsland\"\372\002\n\024WildIslandHarvestLog"
      "\022A\n\020harvest_log_list\030\001 \001(\0132\'.sg.WildIsla"
      "ndHarvestLog.HarvestLogList\0322\n\013HarvestIt"
      "em\022\021\n\titem_type\030\001 \002(\005\022\020\n\010item_num\030\002 \002(\005\032"
      "E\n\017HarvestItemList\0222\n\004list\030\001 \003(\0132$.sg.Wi"
      "ldIslandHarvestLog.HarvestItem\032_\n\nHarves"
      "tLog\022\024\n\014harvest_time\030\001 \001(\020\022;\n\titem_list\030"
      "\002 \001(\0132(.sg.WildIslandHarvestLog.HarvestI"
      "temList\032C\n\016HarvestLogList\0221\n\004list\030\001 \003(\0132"
      "#.sg.WildIslandHarvestLog.HarvestLog\"U\n\013"
      "HarvestTime\0220\n\014harvest_type\030\001 \002(\0162\032.sg.M"
      "AP_ENTRY_HARVEST_TYPE\022\024\n\014harvest_time\030\002 "
      "\002(\020\"5\n\014GarrisonRoom\022\016\n\006roomid\030\001 \002(\005\022\025\n\rg"
      "arrison_list\030\002 \003(\005\"\367\005\n\016UserMapService\022*\n"
      "\003req\030\001 \001(\0132\035.sg.UserMapService.MapReques"
      "t\022,\n\004resp\030\002 \001(\0132\036.sg.UserMapService.MapR"
      "esponse\032\265\001\n\nMapRequest\022+\n\003cmd\030\001 \002(\0162\036.sg"
      ".UserMapService.MAP_COMMAND\022\016\n\006areaid\030\002 "
      "\001(\005\022\017\n\007entryid\030\003 \001(\004\022\'\n\rgarrison_room\030\004 "
      "\001(\0132\020.sg.GarrisonRoom\0220\n\014harvest_type\030\005 "
      "\001(\0162\032.sg.MAP_ENTRY_HARVEST_TYPE\032\214\002\n\013MapR"
      "esponse\022\016\n\006result\030\001 \002(\005\022\"\n\tarea_list\030\002 \001"
      "(\0132\017.sg.MapAreaList\022$\n\nentry_list\030\003 \001(\0132"
      "\020.sg.MapEntryList\022\'\n\013island_list\030\004 \001(\0132\022"
      ".sg.WildIslandList\022-\n\013harvest_log\030\013 \001(\0132"
      "\030.sg.WildIslandHarvestLog\022%\n\014harvest_tim"
      "e\030\014 \003(\0132\017.sg.HarvestTime\022$\n\034cfg_harvest_"
      "interval_seconds\030\r \001(\005\"\303\001\n\013MAP_COMMAND\022\016"
      "\n\nQUERY_AREA\020\001\022\017\n\013QUERY_ENTRY\020\002\022\033\n\027QUERY"
      "_ENTRY_WILD_ISLAND\020\003\022\017\n\013UNLOCK_AREA\020\004\022\022\n"
      "\016BUILD_WORKSHOP\020\005\022\025\n\021GARRISON_WORKSHOP\020\006"
      "\022\013\n\007HARVEST\020\013\022\026\n\022QUERY_HARVEST_TIME\020\014\022\025\n"
      "\021QUERY_HARVEST_LOG\020\r\";\n\023MapEntryStateNot"
      "ify\022$\n\nentry_list\030\001 \001(\0132\020.sg.MapEntryLis"
      "t\"@\n\025WildIslandStateNotify\022\'\n\013island_lis"
      "t\030\001 \002(\0132\022.sg.WildIslandList*\205\002\n\024MAP_AREA"
      "_UNLOCK_COND\022\035\n\031MAP_AREA_UNLOCK_COND_NON"
      "E\020\000\022\035\n\031MAP_AREA_UNLOCK_COND_SHIP\020\001\022\036\n\032MA"
      "P_AREA_UNLOCK_COND_QUEST\020\002\022$\n MAP_AREA_U"
      "NLOCK_COND_ACHIEVEMENT\020\003\022\036\n\032MAP_AREA_UNL"
      "OCK_COND_LEVEL\020\004\022&\n\"MAP_AREA_UNLOCK_COND"
      "_CAPTAIN_LEVEL\020\005\022!\n\035MAP_AREA_UNLOCK_COND"
      "_HERO_NUM\020\006*W\n\024MAP_AREA_UNLOCK_TYPE\022\035\n\031M"
      "AP_AREA_UNLOCK_TYPE_GOLD\020\001\022 \n\034MAP_AREA_U"
      "NLOCK_TYPE_DIAMOND\020\002*O\n\025MAP_AREA_UNLOCK_"
      "STATE\022\031\n\025MAP_AREA_STATE_LOCKED\020\000\022\033\n\027MAP_"
      "AREA_STATE_UNLOCKED\020\001*\365\002\n\016MAP_ENTRY_TYPE"
      "\022\027\n\023MAP_ENTRY_TYPE_NONE\020\000\022\027\n\023MAP_ENTRY_T"
      "YPE_BORN\020\001\022\031\n\025MAP_ENTRY_TYPE_HARBOR\020\002\022\036\n"
      "\032MAP_ENTRY_TYPE_WILD_ISLAND\020\003\022\036\n\032MAP_ENT"
      "RY_TYPE_PIRATE_SHIP\020\004\022\036\n\032MAP_ENTRY_TYPE_"
      "PLAYER_SHIP\020\005\022\031\n\025MAP_ENTRY_TYPE_TAVERN\020\006"
      "\022!\n\035MAP_ENTRY_TYPE_HUNTING_GROUND\020\007\022!\n\035M"
      "AP_ENTRY_TYPE_FISHING_GROUND\020\010\022\030\n\024MAP_EN"
      "TRY_TYPE_ARENA\020\t\022\035\n\031MAP_ENTRY_TYPE_GHOST"
      "_SHIP\020\n\022\034\n\030MAP_ENTRY_TYPE_MAELSTROM\020\013*L\n"
      "\017MAP_ENTRY_STATE\022\035\n\031MAP_ENTRY_STATE_INVI"
      "SIBLE\020\000\022\032\n\026MAP_ENTRY_STATE_NORMAL\020\001*\206\001\n\031"
      "MAP_ENTRY_OWNERSHIP_STATE\022\"\n\036MAP_ENTRY_O"
      "WNERSHIP_STATE_NONE\020\000\022!\n\035MAP_ENTRY_OWNER"
      "SHIP_STATE_OWN\020\001\022\"\n\036MAP_ENTRY_OWNERSHIP_"
      "STATE_LOST\020\002*\303\001\n\026MAP_ENTRY_HARVEST_TYPE\022"
      "\"\n\036MAP_ENTRY_HARVEST_TYPE_UNKNOWN\020\000\022\037\n\033M"
      "AP_ENTRY_HARVEST_TYPE_WOOD\020\001\022 \n\034MAP_ENTR"
      "Y_HARVEST_TYPE_STONE\020\002\022!\n\035MAP_ENTRY_HARV"
      "EST_TYPE_COPPER\020\003\022\037\n\033MAP_ENTRY_HARVEST_T"
      "YPE_IRON\020\004*\204\001\n\020WILD_ISLAND_TYPE\022\032\n\026WILD_"
      "ISLAND_TYPE_DUMMY\020\000\022\033\n\027WILD_ISLAND_TYPE_"
      "COMMON\020\001\022\033\n\027WILD_ISLAND_TYPE_PIRATE\020\002\022\032\n"
      "\026WILD_ISLAND_TYPE_GROUP\020\003*\214\001\n\021WILD_ISLAN"
      "D_STATE\022\035\n\031WILD_ISLAND_STATE_UNKNOWN\020\000\022\032"
      "\n\026WILD_ISLAND_STATE_OPEN\020\001\022\037\n\033WILD_ISLAN"
      "D_STATE_PROTECTED\020\002\022\033\n\027WILD_ISLAND_STATE"
      "_CLOSE\020\003*\267\001\n\030WILD_ISLAND_GATHER_STATE\022!\n"
      "\035WILD_ISLAND_GATHER_STATE_IDLE\020\000\022(\n$WILD"
      "_ISLAND_GATHER_STATE_GATHER_BUSY\020\001\022(\n$WI"
      "LD_ISLAND_GATHER_STATE_GATHER_OVER\020\002\022$\n "
      "WILD_ISLAND_GATHER_STATE_HARVEST\020\003*i\n\032WI"
      "LD_ISLAND_WORKSHOP_STATE\022#\n\037WILD_ISLAND_"
      "WORKSHOP_STATE_NONE\020\000\022&\n\"WILD_ISLAND_WOR"
      "KSHOP_STATE_WORKING\020\001B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserMap.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_UserMap_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* UserMapService_MAP_COMMAND_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[0];
}
bool UserMapService_MAP_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserMapService_MAP_COMMAND UserMapService::QUERY_AREA;
const UserMapService_MAP_COMMAND UserMapService::QUERY_ENTRY;
const UserMapService_MAP_COMMAND UserMapService::QUERY_ENTRY_WILD_ISLAND;
const UserMapService_MAP_COMMAND UserMapService::UNLOCK_AREA;
const UserMapService_MAP_COMMAND UserMapService::BUILD_WORKSHOP;
const UserMapService_MAP_COMMAND UserMapService::GARRISON_WORKSHOP;
const UserMapService_MAP_COMMAND UserMapService::HARVEST;
const UserMapService_MAP_COMMAND UserMapService::QUERY_HARVEST_TIME;
const UserMapService_MAP_COMMAND UserMapService::QUERY_HARVEST_LOG;
const UserMapService_MAP_COMMAND UserMapService::MAP_COMMAND_MIN;
const UserMapService_MAP_COMMAND UserMapService::MAP_COMMAND_MAX;
const int UserMapService::MAP_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MAP_AREA_UNLOCK_COND_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[1];
}
bool MAP_AREA_UNLOCK_COND_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAP_AREA_UNLOCK_TYPE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[2];
}
bool MAP_AREA_UNLOCK_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAP_AREA_UNLOCK_STATE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[3];
}
bool MAP_AREA_UNLOCK_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAP_ENTRY_TYPE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[4];
}
bool MAP_ENTRY_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAP_ENTRY_STATE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[5];
}
bool MAP_ENTRY_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAP_ENTRY_OWNERSHIP_STATE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[6];
}
bool MAP_ENTRY_OWNERSHIP_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAP_ENTRY_HARVEST_TYPE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[7];
}
bool MAP_ENTRY_HARVEST_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WILD_ISLAND_TYPE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[8];
}
bool WILD_ISLAND_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WILD_ISLAND_STATE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[9];
}
bool WILD_ISLAND_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WILD_ISLAND_GATHER_STATE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[10];
}
bool WILD_ISLAND_GATHER_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WILD_ISLAND_WORKSHOP_STATE_descriptor() {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserMap_2eproto::file_level_enum_descriptors[11];
}
bool WILD_ISLAND_WORKSHOP_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MapArea::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapArea::kAreaidFieldNumber;
const int MapArea::kAreaStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapArea::MapArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_MapArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MapArea)
}
MapArea::MapArea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapArea.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MapArea)
}
MapArea::MapArea(const MapArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&areaid_, &from.areaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_state_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(area_state_));
  // @@protoc_insertion_point(copy_constructor:sg.MapArea)
}

void MapArea::SharedCtor() {
  ::memset(&areaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_state_) -
      reinterpret_cast<char*>(&areaid_)) + sizeof(area_state_));
}

MapArea::~MapArea() {
  // @@protoc_insertion_point(destructor:sg.MapArea)
  SharedDtor();
}

void MapArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void MapArea::ArenaDtor(void* object) {
  MapArea* _this = reinterpret_cast< MapArea* >(object);
  (void)_this;
}
void MapArea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapArea::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapArea& MapArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapArea.base);
  return *internal_default_instance();
}


void MapArea::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&areaid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&area_state_) -
        reinterpret_cast<char*>(&areaid_)) + sizeof(area_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MapArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 areaid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_areaid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &areaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.MAP_AREA_UNLOCK_STATE area_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::MAP_AREA_UNLOCK_STATE_IsValid(value)) {
            set_area_state(static_cast< ::sg::MAP_AREA_UNLOCK_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MapArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MapArea)
  return false;
#undef DO_
}

void MapArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 areaid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->areaid(), output);
  }

  // required .sg.MAP_AREA_UNLOCK_STATE area_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->area_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MapArea)
}

::google::protobuf::uint8* MapArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 areaid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->areaid(), target);
  }

  // required .sg.MAP_AREA_UNLOCK_STATE area_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->area_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MapArea)
  return target;
}

size_t MapArea::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MapArea)
  size_t total_size = 0;

  if (has_areaid()) {
    // required uint64 areaid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->areaid());
  }

  if (has_area_state()) {
    // required .sg.MAP_AREA_UNLOCK_STATE area_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->area_state());
  }

  return total_size;
}
size_t MapArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MapArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 areaid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->areaid());

    // required .sg.MAP_AREA_UNLOCK_STATE area_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->area_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MapArea)
  GOOGLE_DCHECK_NE(&from, this);
  const MapArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MapArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MapArea)
    MergeFrom(*source);
  }
}

void MapArea::MergeFrom(const MapArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MapArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      areaid_ = from.areaid_;
    }
    if (cached_has_bits & 0x00000002u) {
      area_state_ = from.area_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MapArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapArea::CopyFrom(const MapArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MapArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MapArea::Swap(MapArea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapArea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MapArea::UnsafeArenaSwap(MapArea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapArea::InternalSwap(MapArea* other) {
  using std::swap;
  swap(areaid_, other->areaid_);
  swap(area_state_, other->area_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapArea::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapAreaList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapAreaList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapAreaList::MapAreaList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_MapAreaList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MapAreaList)
}
MapAreaList::MapAreaList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapAreaList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MapAreaList)
}
MapAreaList::MapAreaList(const MapAreaList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.MapAreaList)
}

void MapAreaList::SharedCtor() {
}

MapAreaList::~MapAreaList() {
  // @@protoc_insertion_point(destructor:sg.MapAreaList)
  SharedDtor();
}

void MapAreaList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void MapAreaList::ArenaDtor(void* object) {
  MapAreaList* _this = reinterpret_cast< MapAreaList* >(object);
  (void)_this;
}
void MapAreaList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapAreaList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapAreaList::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapAreaList& MapAreaList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapAreaList.base);
  return *internal_default_instance();
}


void MapAreaList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MapAreaList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapAreaList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MapAreaList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.MapArea list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MapAreaList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MapAreaList)
  return false;
#undef DO_
}

void MapAreaList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MapAreaList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.MapArea list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MapAreaList)
}

::google::protobuf::uint8* MapAreaList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MapAreaList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.MapArea list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MapAreaList)
  return target;
}

size_t MapAreaList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MapAreaList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.MapArea list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapAreaList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MapAreaList)
  GOOGLE_DCHECK_NE(&from, this);
  const MapAreaList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapAreaList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MapAreaList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MapAreaList)
    MergeFrom(*source);
  }
}

void MapAreaList::MergeFrom(const MapAreaList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MapAreaList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void MapAreaList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MapAreaList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapAreaList::CopyFrom(const MapAreaList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MapAreaList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapAreaList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void MapAreaList::Swap(MapAreaList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapAreaList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MapAreaList::UnsafeArenaSwap(MapAreaList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapAreaList::InternalSwap(MapAreaList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapAreaList::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PirateShip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PirateShip::kShipidFieldNumber;
const int PirateShip::kTypeFieldNumber;
const int PirateShip::kRefreshTimeFieldNumber;
const int PirateShip::kFightNumFieldNumber;
const int PirateShip::kFightNumMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PirateShip::PirateShip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_PirateShip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PirateShip)
}
PirateShip::PirateShip(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_PirateShip.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PirateShip)
}
PirateShip::PirateShip(const PirateShip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fight_num_max_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(fight_num_max_));
  // @@protoc_insertion_point(copy_constructor:sg.PirateShip)
}

void PirateShip::SharedCtor() {
  ::memset(&shipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fight_num_max_) -
      reinterpret_cast<char*>(&shipid_)) + sizeof(fight_num_max_));
}

PirateShip::~PirateShip() {
  // @@protoc_insertion_point(destructor:sg.PirateShip)
  SharedDtor();
}

void PirateShip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PirateShip::ArenaDtor(void* object) {
  PirateShip* _this = reinterpret_cast< PirateShip* >(object);
  (void)_this;
}
void PirateShip::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PirateShip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PirateShip::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PirateShip& PirateShip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_PirateShip.base);
  return *internal_default_instance();
}


void PirateShip::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PirateShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fight_num_max_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(fight_num_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PirateShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PirateShip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 shipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_shipid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shipid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 refresh_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_refresh_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &refresh_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fight_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_fight_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fight_num_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_fight_num_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_num_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PirateShip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PirateShip)
  return false;
#undef DO_
}

void PirateShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PirateShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 shipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shipid(), output);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional sfixed64 refresh_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->refresh_time(), output);
  }

  // optional int32 fight_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fight_num(), output);
  }

  // optional int32 fight_num_max = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fight_num_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PirateShip)
}

::google::protobuf::uint8* PirateShip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PirateShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 shipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shipid(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional sfixed64 refresh_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->refresh_time(), target);
  }

  // optional int32 fight_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fight_num(), target);
  }

  // optional int32 fight_num_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fight_num_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PirateShip)
  return target;
}

size_t PirateShip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PirateShip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 shipid = 1;
  if (has_shipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shipid());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional sfixed64 refresh_time = 3;
    if (has_refresh_time()) {
      total_size += 1 + 8;
    }

    // optional int32 fight_num = 4;
    if (has_fight_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_num());
    }

    // optional int32 fight_num_max = 5;
    if (has_fight_num_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_num_max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PirateShip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PirateShip)
  GOOGLE_DCHECK_NE(&from, this);
  const PirateShip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PirateShip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PirateShip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PirateShip)
    MergeFrom(*source);
  }
}

void PirateShip::MergeFrom(const PirateShip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PirateShip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      refresh_time_ = from.refresh_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      fight_num_ = from.fight_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      fight_num_max_ = from.fight_num_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PirateShip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PirateShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PirateShip::CopyFrom(const PirateShip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PirateShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PirateShip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PirateShip::Swap(PirateShip* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PirateShip* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PirateShip::UnsafeArenaSwap(PirateShip* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PirateShip::InternalSwap(PirateShip* other) {
  using std::swap;
  swap(shipid_, other->shipid_);
  swap(type_, other->type_);
  swap(refresh_time_, other->refresh_time_);
  swap(fight_num_, other->fight_num_);
  swap(fight_num_max_, other->fight_num_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PirateShip::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerShip::InitAsDefaultInstance() {
  ::sg::_PlayerShip_default_instance_._instance.get_mutable()->player_ = const_cast< ::sg::UserInfo*>(
      ::sg::UserInfo::internal_default_instance());
}
void PlayerShip::unsafe_arena_set_allocated_player(
    ::sg::UserInfo* player) {
  if (GetArenaNoVirtual() == NULL) {
    delete player_;
  }
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerShip.player)
}
void PlayerShip::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerShip::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerShip::PlayerShip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_PlayerShip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PlayerShip)
}
PlayerShip::PlayerShip(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_PlayerShip.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PlayerShip)
}
PlayerShip::PlayerShip(const PlayerShip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::sg::UserInfo(*from.player_);
  } else {
    player_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.PlayerShip)
}

void PlayerShip::SharedCtor() {
  player_ = NULL;
}

PlayerShip::~PlayerShip() {
  // @@protoc_insertion_point(destructor:sg.PlayerShip)
  SharedDtor();
}

void PlayerShip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete player_;
}

void PlayerShip::ArenaDtor(void* object) {
  PlayerShip* _this = reinterpret_cast< PlayerShip* >(object);
  (void)_this;
}
void PlayerShip::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PlayerShip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerShip::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerShip& PlayerShip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_PlayerShip.base);
  return *internal_default_instance();
}


void PlayerShip::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PlayerShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PlayerShip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserInfo player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PlayerShip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PlayerShip)
  return false;
#undef DO_
}

void PlayerShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PlayerShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserInfo player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PlayerShip)
}

::google::protobuf::uint8* PlayerShip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PlayerShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserInfo player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PlayerShip)
  return target;
}

size_t PlayerShip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PlayerShip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserInfo player = 1;
  if (has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerShip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PlayerShip)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerShip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerShip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PlayerShip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PlayerShip)
    MergeFrom(*source);
  }
}

void PlayerShip::MergeFrom(const PlayerShip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PlayerShip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::sg::UserInfo::MergeFrom(from.player());
  }
}

void PlayerShip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PlayerShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerShip::CopyFrom(const PlayerShip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PlayerShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerShip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void PlayerShip::Swap(PlayerShip* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PlayerShip* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PlayerShip::UnsafeArenaSwap(PlayerShip* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PlayerShip::InternalSwap(PlayerShip* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerShip::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapEntry::InitAsDefaultInstance() {
  ::sg::_MapEntry_default_instance_._instance.get_mutable()->pirate_ship_ = const_cast< ::sg::PirateShip*>(
      ::sg::PirateShip::internal_default_instance());
  ::sg::_MapEntry_default_instance_._instance.get_mutable()->player_ship_ = const_cast< ::sg::PlayerShip*>(
      ::sg::PlayerShip::internal_default_instance());
}
void MapEntry::unsafe_arena_set_allocated_pirate_ship(
    ::sg::PirateShip* pirate_ship) {
  if (GetArenaNoVirtual() == NULL) {
    delete pirate_ship_;
  }
  pirate_ship_ = pirate_ship;
  if (pirate_ship) {
    set_has_pirate_ship();
  } else {
    clear_has_pirate_ship();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MapEntry.pirate_ship)
}
void MapEntry::unsafe_arena_set_allocated_player_ship(
    ::sg::PlayerShip* player_ship) {
  if (GetArenaNoVirtual() == NULL) {
    delete player_ship_;
  }
  player_ship_ = player_ship;
  if (player_ship) {
    set_has_player_ship();
  } else {
    clear_has_player_ship();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MapEntry.player_ship)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapEntry::kEntryidFieldNumber;
const int MapEntry::kEntryStateFieldNumber;
const int MapEntry::kPassableFieldNumber;
const int MapEntry::kHarvestTypeFieldNumber;
const int MapEntry::kTypeFieldNumber;
const int MapEntry::kOccupierUuidFieldNumber;
const int MapEntry::kOccupierNickFieldNumber;
const int MapEntry::kOccupierLevelFieldNumber;
const int MapEntry::kOccupierExpFieldNumber;
const int MapEntry::kOccupierRankFieldNumber;
const int MapEntry::kOccupyProtectFieldNumber;
const int MapEntry::kOccupyProtectStarttimeFieldNumber;
const int MapEntry::kOccupyProtectSecondsFieldNumber;
const int MapEntry::kWorkshopLevelFieldNumber;
const int MapEntry::kWorkshopStateFieldNumber;
const int MapEntry::kPirateShipFieldNumber;
const int MapEntry::kPlayerShipFieldNumber;
const int MapEntry::kRefreshTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapEntry::MapEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_MapEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MapEntry)
}
MapEntry::MapEntry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapEntry.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MapEntry)
}
MapEntry::MapEntry(const MapEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  occupier_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_occupier_nick()) {
    occupier_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.occupier_nick(),
      GetArenaNoVirtual());
  }
  if (from.has_pirate_ship()) {
    pirate_ship_ = new ::sg::PirateShip(*from.pirate_ship_);
  } else {
    pirate_ship_ = NULL;
  }
  if (from.has_player_ship()) {
    player_ship_ = new ::sg::PlayerShip(*from.player_ship_);
  } else {
    player_ship_ = NULL;
  }
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_time_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(refresh_time_));
  // @@protoc_insertion_point(copy_constructor:sg.MapEntry)
}

void MapEntry::SharedCtor() {
  occupier_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pirate_ship_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_time_) -
      reinterpret_cast<char*>(&pirate_ship_)) + sizeof(refresh_time_));
}

MapEntry::~MapEntry() {
  // @@protoc_insertion_point(destructor:sg.MapEntry)
  SharedDtor();
}

void MapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  occupier_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pirate_ship_;
  if (this != internal_default_instance()) delete player_ship_;
}

void MapEntry::ArenaDtor(void* object) {
  MapEntry* _this = reinterpret_cast< MapEntry* >(object);
  (void)_this;
}
void MapEntry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapEntry::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapEntry& MapEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapEntry.base);
  return *internal_default_instance();
}


void MapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      occupier_nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pirate_ship_ != NULL);
      pirate_ship_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(player_ship_ != NULL);
      player_ship_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&passable_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(passable_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&occupy_protect_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&workshop_level_) -
        reinterpret_cast<char*>(&occupy_protect_)) + sizeof(workshop_level_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&workshop_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&refresh_time_) -
        reinterpret_cast<char*>(&workshop_state_)) + sizeof(refresh_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MapEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 entryid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.MAP_ENTRY_STATE entry_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::MAP_ENTRY_STATE_IsValid(value)) {
            set_entry_state(static_cast< ::sg::MAP_ENTRY_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool passable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_passable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::MAP_ENTRY_HARVEST_TYPE_IsValid(value)) {
            set_harvest_type(static_cast< ::sg::MAP_ENTRY_HARVEST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 occupier_uuid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_occupier_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &occupier_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes occupier_nick = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_occupier_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupier_level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_occupier_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupier_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupier_exp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_occupier_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupier_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupier_rank = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_occupier_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupier_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool occupy_protect = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_occupy_protect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &occupy_protect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 occupy_protect_starttime = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_occupy_protect_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &occupy_protect_starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupy_protect_seconds = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_occupy_protect_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupy_protect_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 workshop_level = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_workshop_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workshop_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.WILD_ISLAND_WORKSHOP_STATE workshop_state = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::WILD_ISLAND_WORKSHOP_STATE_IsValid(value)) {
            set_workshop_state(static_cast< ::sg::WILD_ISLAND_WORKSHOP_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                32, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PirateShip pirate_ship = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pirate_ship()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PlayerShip player_ship = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_ship()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 refresh_time = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 345 & 0xFF */)) {
          set_has_refresh_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &refresh_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MapEntry)
  return false;
#undef DO_
}

void MapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 entryid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entryid(), output);
  }

  // required .sg.MAP_ENTRY_STATE entry_state = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->entry_state(), output);
  }

  // optional bool passable = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->passable(), output);
  }

  // optional .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->harvest_type(), output);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional uint64 occupier_uuid = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->occupier_uuid(), output);
  }

  // optional bytes occupier_nick = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->occupier_nick(), output);
  }

  // optional int32 occupier_level = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->occupier_level(), output);
  }

  // optional int32 occupier_exp = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->occupier_exp(), output);
  }

  // optional int32 occupier_rank = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->occupier_rank(), output);
  }

  // optional bool occupy_protect = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->occupy_protect(), output);
  }

  // optional sfixed64 occupy_protect_starttime = 22;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(22, this->occupy_protect_starttime(), output);
  }

  // optional int32 occupy_protect_seconds = 23;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->occupy_protect_seconds(), output);
  }

  // optional int32 workshop_level = 31;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->workshop_level(), output);
  }

  // optional .sg.WILD_ISLAND_WORKSHOP_STATE workshop_state = 32;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->workshop_state(), output);
  }

  // optional .sg.PirateShip pirate_ship = 41;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->_internal_pirate_ship(), output);
  }

  // optional .sg.PlayerShip player_ship = 42;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->_internal_player_ship(), output);
  }

  // optional sfixed64 refresh_time = 43;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(43, this->refresh_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MapEntry)
}

::google::protobuf::uint8* MapEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 entryid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entryid(), target);
  }

  // required .sg.MAP_ENTRY_STATE entry_state = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->entry_state(), target);
  }

  // optional bool passable = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->passable(), target);
  }

  // optional .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->harvest_type(), target);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional uint64 occupier_uuid = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->occupier_uuid(), target);
  }

  // optional bytes occupier_nick = 12;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->occupier_nick(), target);
  }

  // optional int32 occupier_level = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->occupier_level(), target);
  }

  // optional int32 occupier_exp = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->occupier_exp(), target);
  }

  // optional int32 occupier_rank = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->occupier_rank(), target);
  }

  // optional bool occupy_protect = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->occupy_protect(), target);
  }

  // optional sfixed64 occupy_protect_starttime = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(22, this->occupy_protect_starttime(), target);
  }

  // optional int32 occupy_protect_seconds = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->occupy_protect_seconds(), target);
  }

  // optional int32 workshop_level = 31;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->workshop_level(), target);
  }

  // optional .sg.WILD_ISLAND_WORKSHOP_STATE workshop_state = 32;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->workshop_state(), target);
  }

  // optional .sg.PirateShip pirate_ship = 41;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->_internal_pirate_ship(), deterministic, target);
  }

  // optional .sg.PlayerShip player_ship = 42;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, this->_internal_player_ship(), deterministic, target);
  }

  // optional sfixed64 refresh_time = 43;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(43, this->refresh_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MapEntry)
  return target;
}

size_t MapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MapEntry)
  size_t total_size = 0;

  if (has_entryid()) {
    // required uint64 entryid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());
  }

  if (has_entry_state()) {
    // required .sg.MAP_ENTRY_STATE entry_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_state());
  }

  return total_size;
}
size_t MapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MapEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required uint64 entryid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());

    // required .sg.MAP_ENTRY_STATE entry_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes occupier_nick = 12;
    if (has_occupier_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->occupier_nick());
    }

    // optional .sg.PirateShip pirate_ship = 41;
    if (has_pirate_ship()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pirate_ship_);
    }

    // optional .sg.PlayerShip player_ship = 42;
    if (has_player_ship()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_ship_);
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 4;
    if (has_harvest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->harvest_type());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool passable = 3;
    if (has_passable()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool occupy_protect = 21;
    if (has_occupy_protect()) {
      total_size += 2 + 1;
    }

    // optional uint64 occupier_uuid = 11;
    if (has_occupier_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->occupier_uuid());
    }

    // optional int32 occupier_level = 13;
    if (has_occupier_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupier_level());
    }

    // optional int32 occupier_exp = 14;
    if (has_occupier_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupier_exp());
    }

    // optional int32 occupier_rank = 15;
    if (has_occupier_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupier_rank());
    }

    // optional int32 occupy_protect_seconds = 23;
    if (has_occupy_protect_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupy_protect_seconds());
    }

    // optional sfixed64 occupy_protect_starttime = 22;
    if (has_occupy_protect_starttime()) {
      total_size += 2 + 8;
    }

    // optional int32 workshop_level = 31;
    if (has_workshop_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workshop_level());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional .sg.WILD_ISLAND_WORKSHOP_STATE workshop_state = 32;
    if (has_workshop_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->workshop_state());
    }

    // optional sfixed64 refresh_time = 43;
    if (has_refresh_time()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MapEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MapEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MapEntry)
    MergeFrom(*source);
  }
}

void MapEntry::MergeFrom(const MapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_occupier_nick(from.occupier_nick());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pirate_ship()->::sg::PirateShip::MergeFrom(from.pirate_ship());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_player_ship()->::sg::PlayerShip::MergeFrom(from.player_ship());
    }
    if (cached_has_bits & 0x00000008u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000010u) {
      entry_state_ = from.entry_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      harvest_type_ = from.harvest_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      passable_ = from.passable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      occupy_protect_ = from.occupy_protect_;
    }
    if (cached_has_bits & 0x00000200u) {
      occupier_uuid_ = from.occupier_uuid_;
    }
    if (cached_has_bits & 0x00000400u) {
      occupier_level_ = from.occupier_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      occupier_exp_ = from.occupier_exp_;
    }
    if (cached_has_bits & 0x00001000u) {
      occupier_rank_ = from.occupier_rank_;
    }
    if (cached_has_bits & 0x00002000u) {
      occupy_protect_seconds_ = from.occupy_protect_seconds_;
    }
    if (cached_has_bits & 0x00004000u) {
      occupy_protect_starttime_ = from.occupy_protect_starttime_;
    }
    if (cached_has_bits & 0x00008000u) {
      workshop_level_ = from.workshop_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      workshop_state_ = from.workshop_state_;
    }
    if (cached_has_bits & 0x00020000u) {
      refresh_time_ = from.refresh_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEntry::CopyFrom(const MapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  if (has_pirate_ship()) {
    if (!this->pirate_ship_->IsInitialized()) return false;
  }
  if (has_player_ship()) {
    if (!this->player_ship_->IsInitialized()) return false;
  }
  return true;
}

void MapEntry::Swap(MapEntry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapEntry* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MapEntry::UnsafeArenaSwap(MapEntry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapEntry::InternalSwap(MapEntry* other) {
  using std::swap;
  occupier_nick_.Swap(&other->occupier_nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pirate_ship_, other->pirate_ship_);
  swap(player_ship_, other->player_ship_);
  swap(entryid_, other->entryid_);
  swap(entry_state_, other->entry_state_);
  swap(harvest_type_, other->harvest_type_);
  swap(type_, other->type_);
  swap(passable_, other->passable_);
  swap(occupy_protect_, other->occupy_protect_);
  swap(occupier_uuid_, other->occupier_uuid_);
  swap(occupier_level_, other->occupier_level_);
  swap(occupier_exp_, other->occupier_exp_);
  swap(occupier_rank_, other->occupier_rank_);
  swap(occupy_protect_seconds_, other->occupy_protect_seconds_);
  swap(occupy_protect_starttime_, other->occupy_protect_starttime_);
  swap(workshop_level_, other->workshop_level_);
  swap(workshop_state_, other->workshop_state_);
  swap(refresh_time_, other->refresh_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapEntry::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapEntryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapEntryList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapEntryList::MapEntryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_MapEntryList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MapEntryList)
}
MapEntryList::MapEntryList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapEntryList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MapEntryList)
}
MapEntryList::MapEntryList(const MapEntryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.MapEntryList)
}

void MapEntryList::SharedCtor() {
}

MapEntryList::~MapEntryList() {
  // @@protoc_insertion_point(destructor:sg.MapEntryList)
  SharedDtor();
}

void MapEntryList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void MapEntryList::ArenaDtor(void* object) {
  MapEntryList* _this = reinterpret_cast< MapEntryList* >(object);
  (void)_this;
}
void MapEntryList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapEntryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapEntryList::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapEntryList& MapEntryList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapEntryList.base);
  return *internal_default_instance();
}


void MapEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MapEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapEntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MapEntryList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.MapEntry list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MapEntryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MapEntryList)
  return false;
#undef DO_
}

void MapEntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MapEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.MapEntry list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MapEntryList)
}

::google::protobuf::uint8* MapEntryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MapEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.MapEntry list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MapEntryList)
  return target;
}

size_t MapEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MapEntryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.MapEntry list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapEntryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MapEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const MapEntryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapEntryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MapEntryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MapEntryList)
    MergeFrom(*source);
  }
}

void MapEntryList::MergeFrom(const MapEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MapEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void MapEntryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MapEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEntryList::CopyFrom(const MapEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MapEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEntryList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void MapEntryList::Swap(MapEntryList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapEntryList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MapEntryList::UnsafeArenaSwap(MapEntryList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapEntryList::InternalSwap(MapEntryList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapEntryList::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OccupierData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OccupierData::kUuidFieldNumber;
const int OccupierData::kNickFieldNumber;
const int OccupierData::kLevelFieldNumber;
const int OccupierData::kRankFieldNumber;
const int OccupierData::kOccupyTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OccupierData::OccupierData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_OccupierData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.OccupierData)
}
OccupierData::OccupierData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_OccupierData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.OccupierData)
}
OccupierData::OccupierData(const OccupierData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupy_time_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(occupy_time_));
  // @@protoc_insertion_point(copy_constructor:sg.OccupierData)
}

void OccupierData::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupy_time_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(occupy_time_));
}

OccupierData::~OccupierData() {
  // @@protoc_insertion_point(destructor:sg.OccupierData)
  SharedDtor();
}

void OccupierData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OccupierData::ArenaDtor(void* object) {
  OccupierData* _this = reinterpret_cast< OccupierData* >(object);
  (void)_this;
}
void OccupierData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OccupierData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OccupierData::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OccupierData& OccupierData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_OccupierData.base);
  return *internal_default_instance();
}


void OccupierData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.OccupierData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nick_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 30u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&occupy_time_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(occupy_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OccupierData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.OccupierData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 occupy_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_occupy_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &occupy_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.OccupierData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.OccupierData)
  return false;
#undef DO_
}

void OccupierData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.OccupierData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional bytes nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nick(), output);
  }

  // optional int32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 rank = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional sfixed64 occupy_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->occupy_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.OccupierData)
}

::google::protobuf::uint8* OccupierData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.OccupierData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uuid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional bytes nick = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nick(), target);
  }

  // optional int32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 rank = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional sfixed64 occupy_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->occupy_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.OccupierData)
  return target;
}

size_t OccupierData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.OccupierData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 uuid = 1;
  if (has_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }
  // optional bytes nick = 2;
  if (has_nick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional sfixed64 occupy_time = 5;
    if (has_occupy_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OccupierData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.OccupierData)
  GOOGLE_DCHECK_NE(&from, this);
  const OccupierData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OccupierData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.OccupierData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.OccupierData)
    MergeFrom(*source);
  }
}

void OccupierData::MergeFrom(const OccupierData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.OccupierData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000002u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000010u) {
      occupy_time_ = from.occupy_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OccupierData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.OccupierData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupierData::CopyFrom(const OccupierData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.OccupierData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupierData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void OccupierData::Swap(OccupierData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OccupierData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OccupierData::UnsafeArenaSwap(OccupierData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OccupierData::InternalSwap(OccupierData* other) {
  using std::swap;
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uuid_, other->uuid_);
  swap(level_, other->level_);
  swap(rank_, other->rank_);
  swap(occupy_time_, other->occupy_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OccupierData::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIsland_Workshop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIsland_Workshop::kLevelFieldNumber;
const int WildIsland_Workshop::kStateFieldNumber;
const int WildIsland_Workshop::kGatherPerMinFieldNumber;
const int WildIsland_Workshop::kGatherAddRatioFieldNumber;
const int WildIsland_Workshop::kGatherTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIsland_Workshop::WildIsland_Workshop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIsland_Workshop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIsland.Workshop)
}
WildIsland_Workshop::WildIsland_Workshop(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIsland_Workshop.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIsland.Workshop)
}
WildIsland_Workshop::WildIsland_Workshop(const WildIsland_Workshop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&gather_time_) -
    reinterpret_cast<char*>(&level_)) + sizeof(gather_time_));
  // @@protoc_insertion_point(copy_constructor:sg.WildIsland.Workshop)
}

void WildIsland_Workshop::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gather_time_) -
      reinterpret_cast<char*>(&level_)) + sizeof(gather_time_));
}

WildIsland_Workshop::~WildIsland_Workshop() {
  // @@protoc_insertion_point(destructor:sg.WildIsland.Workshop)
  SharedDtor();
}

void WildIsland_Workshop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void WildIsland_Workshop::ArenaDtor(void* object) {
  WildIsland_Workshop* _this = reinterpret_cast< WildIsland_Workshop* >(object);
  (void)_this;
}
void WildIsland_Workshop::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIsland_Workshop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIsland_Workshop::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIsland_Workshop& WildIsland_Workshop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIsland_Workshop.base);
  return *internal_default_instance();
}


void WildIsland_Workshop::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIsland.Workshop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gather_time_) -
        reinterpret_cast<char*>(&level_)) + sizeof(gather_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIsland_Workshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIsland.Workshop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.WILD_ISLAND_WORKSHOP_STATE state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::WILD_ISLAND_WORKSHOP_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::WILD_ISLAND_WORKSHOP_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float gather_per_min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_gather_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gather_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float gather_add_ratio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_gather_add_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gather_add_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 gather_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_gather_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &gather_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIsland.Workshop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIsland.Workshop)
  return false;
#undef DO_
}

void WildIsland_Workshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIsland.Workshop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required .sg.WILD_ISLAND_WORKSHOP_STATE state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required float gather_per_min = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gather_per_min(), output);
  }

  // required float gather_add_ratio = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gather_add_ratio(), output);
  }

  // required sfixed64 gather_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->gather_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIsland.Workshop)
}

::google::protobuf::uint8* WildIsland_Workshop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIsland.Workshop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required .sg.WILD_ISLAND_WORKSHOP_STATE state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required float gather_per_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gather_per_min(), target);
  }

  // required float gather_add_ratio = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gather_add_ratio(), target);
  }

  // required sfixed64 gather_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->gather_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIsland.Workshop)
  return target;
}

size_t WildIsland_Workshop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.WildIsland.Workshop)
  size_t total_size = 0;

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_state()) {
    // required .sg.WILD_ISLAND_WORKSHOP_STATE state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_gather_per_min()) {
    // required float gather_per_min = 3;
    total_size += 1 + 4;
  }

  if (has_gather_add_ratio()) {
    // required float gather_add_ratio = 4;
    total_size += 1 + 4;
  }

  if (has_gather_time()) {
    // required sfixed64 gather_time = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t WildIsland_Workshop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIsland.Workshop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required .sg.WILD_ISLAND_WORKSHOP_STATE state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required float gather_per_min = 3;
    total_size += 1 + 4;

    // required float gather_add_ratio = 4;
    total_size += 1 + 4;

    // required sfixed64 gather_time = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIsland_Workshop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIsland.Workshop)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIsland_Workshop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIsland_Workshop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIsland.Workshop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIsland.Workshop)
    MergeFrom(*source);
  }
}

void WildIsland_Workshop::MergeFrom(const WildIsland_Workshop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIsland.Workshop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      gather_per_min_ = from.gather_per_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      gather_add_ratio_ = from.gather_add_ratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      gather_time_ = from.gather_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WildIsland_Workshop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIsland.Workshop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIsland_Workshop::CopyFrom(const WildIsland_Workshop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIsland.Workshop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIsland_Workshop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void WildIsland_Workshop::Swap(WildIsland_Workshop* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIsland_Workshop* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIsland_Workshop::UnsafeArenaSwap(WildIsland_Workshop* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIsland_Workshop::InternalSwap(WildIsland_Workshop* other) {
  using std::swap;
  swap(level_, other->level_);
  swap(state_, other->state_);
  swap(gather_per_min_, other->gather_per_min_);
  swap(gather_add_ratio_, other->gather_add_ratio_);
  swap(gather_time_, other->gather_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIsland_Workshop::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIsland_WorkshopOption::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIsland_WorkshopOption::kGatherPerMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIsland_WorkshopOption::WildIsland_WorkshopOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIsland_WorkshopOption.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIsland.WorkshopOption)
}
WildIsland_WorkshopOption::WildIsland_WorkshopOption(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIsland_WorkshopOption.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIsland.WorkshopOption)
}
WildIsland_WorkshopOption::WildIsland_WorkshopOption(const WildIsland_WorkshopOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gather_per_min_ = from.gather_per_min_;
  // @@protoc_insertion_point(copy_constructor:sg.WildIsland.WorkshopOption)
}

void WildIsland_WorkshopOption::SharedCtor() {
  gather_per_min_ = 0;
}

WildIsland_WorkshopOption::~WildIsland_WorkshopOption() {
  // @@protoc_insertion_point(destructor:sg.WildIsland.WorkshopOption)
  SharedDtor();
}

void WildIsland_WorkshopOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void WildIsland_WorkshopOption::ArenaDtor(void* object) {
  WildIsland_WorkshopOption* _this = reinterpret_cast< WildIsland_WorkshopOption* >(object);
  (void)_this;
}
void WildIsland_WorkshopOption::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIsland_WorkshopOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIsland_WorkshopOption::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIsland_WorkshopOption& WildIsland_WorkshopOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIsland_WorkshopOption.base);
  return *internal_default_instance();
}


void WildIsland_WorkshopOption::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIsland.WorkshopOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gather_per_min_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIsland_WorkshopOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIsland.WorkshopOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float gather_per_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_gather_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gather_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIsland.WorkshopOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIsland.WorkshopOption)
  return false;
#undef DO_
}

void WildIsland_WorkshopOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIsland.WorkshopOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float gather_per_min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gather_per_min(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIsland.WorkshopOption)
}

::google::protobuf::uint8* WildIsland_WorkshopOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIsland.WorkshopOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float gather_per_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gather_per_min(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIsland.WorkshopOption)
  return target;
}

size_t WildIsland_WorkshopOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIsland.WorkshopOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float gather_per_min = 1;
  if (has_gather_per_min()) {
    total_size += 1 + 4;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIsland_WorkshopOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIsland.WorkshopOption)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIsland_WorkshopOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIsland_WorkshopOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIsland.WorkshopOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIsland.WorkshopOption)
    MergeFrom(*source);
  }
}

void WildIsland_WorkshopOption::MergeFrom(const WildIsland_WorkshopOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIsland.WorkshopOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gather_per_min()) {
    set_gather_per_min(from.gather_per_min());
  }
}

void WildIsland_WorkshopOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIsland.WorkshopOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIsland_WorkshopOption::CopyFrom(const WildIsland_WorkshopOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIsland.WorkshopOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIsland_WorkshopOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void WildIsland_WorkshopOption::Swap(WildIsland_WorkshopOption* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIsland_WorkshopOption* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIsland_WorkshopOption::UnsafeArenaSwap(WildIsland_WorkshopOption* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIsland_WorkshopOption::InternalSwap(WildIsland_WorkshopOption* other) {
  using std::swap;
  swap(gather_per_min_, other->gather_per_min_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIsland_WorkshopOption::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIsland::InitAsDefaultInstance() {
  ::sg::_WildIsland_default_instance_._instance.get_mutable()->occupier_data_ = const_cast< ::sg::OccupierData*>(
      ::sg::OccupierData::internal_default_instance());
  ::sg::_WildIsland_default_instance_._instance.get_mutable()->workshop_ = const_cast< ::sg::WildIsland_Workshop*>(
      ::sg::WildIsland_Workshop::internal_default_instance());
}
void WildIsland::unsafe_arena_set_allocated_occupier_data(
    ::sg::OccupierData* occupier_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete occupier_data_;
  }
  occupier_data_ = occupier_data;
  if (occupier_data) {
    set_has_occupier_data();
  } else {
    clear_has_occupier_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.WildIsland.occupier_data)
}
void WildIsland::unsafe_arena_set_allocated_workshop(
    ::sg::WildIsland_Workshop* workshop) {
  if (GetArenaNoVirtual() == NULL) {
    delete workshop_;
  }
  workshop_ = workshop;
  if (workshop) {
    set_has_workshop();
  } else {
    clear_has_workshop();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.WildIsland.workshop)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIsland::kEntryidFieldNumber;
const int WildIsland::kIslandCfgidFieldNumber;
const int WildIsland::kIslandStateFieldNumber;
const int WildIsland::kOccupierDataFieldNumber;
const int WildIsland::kWorkshopFieldNumber;
const int WildIsland::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIsland::WildIsland()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIsland.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIsland)
}
WildIsland::WildIsland(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIsland.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIsland)
}
WildIsland::WildIsland(const WildIsland& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_data()) {
    map_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data(),
      GetArenaNoVirtual());
  }
  if (from.has_occupier_data()) {
    occupier_data_ = new ::sg::OccupierData(*from.occupier_data_);
  } else {
    occupier_data_ = NULL;
  }
  if (from.has_workshop()) {
    workshop_ = new ::sg::WildIsland_Workshop(*from.workshop_);
  } else {
    workshop_ = NULL;
  }
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&island_state_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(island_state_));
  // @@protoc_insertion_point(copy_constructor:sg.WildIsland)
}

void WildIsland::SharedCtor() {
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&occupier_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&island_state_) -
      reinterpret_cast<char*>(&occupier_data_)) + sizeof(island_state_));
}

WildIsland::~WildIsland() {
  // @@protoc_insertion_point(destructor:sg.WildIsland)
  SharedDtor();
}

void WildIsland::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete occupier_data_;
  if (this != internal_default_instance()) delete workshop_;
}

void WildIsland::ArenaDtor(void* object) {
  WildIsland* _this = reinterpret_cast< WildIsland* >(object);
  (void)_this;
}
void WildIsland::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIsland::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIsland::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIsland& WildIsland::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIsland.base);
  return *internal_default_instance();
}


void WildIsland::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      map_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(occupier_data_ != NULL);
      occupier_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(workshop_ != NULL);
      workshop_->Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&island_state_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(island_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIsland::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIsland)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 entryid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 island_cfgid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_island_cfgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &island_cfgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.WILD_ISLAND_STATE island_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::WILD_ISLAND_STATE_IsValid(value)) {
            set_island_state(static_cast< ::sg::WILD_ISLAND_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.OccupierData occupier_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occupier_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.WildIsland.Workshop workshop = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workshop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes map_data = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIsland)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIsland)
  return false;
#undef DO_
}

void WildIsland::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 entryid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entryid(), output);
  }

  // required int32 island_cfgid = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->island_cfgid(), output);
  }

  // required .sg.WILD_ISLAND_STATE island_state = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->island_state(), output);
  }

  // required .sg.OccupierData occupier_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_occupier_data(), output);
  }

  // optional .sg.WildIsland.Workshop workshop = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_workshop(), output);
  }

  // optional bytes map_data = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->map_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIsland)
}

::google::protobuf::uint8* WildIsland::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 entryid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entryid(), target);
  }

  // required int32 island_cfgid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->island_cfgid(), target);
  }

  // required .sg.WILD_ISLAND_STATE island_state = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->island_state(), target);
  }

  // required .sg.OccupierData occupier_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_occupier_data(), deterministic, target);
  }

  // optional .sg.WildIsland.Workshop workshop = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_workshop(), deterministic, target);
  }

  // optional bytes map_data = 12;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->map_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIsland)
  return target;
}

size_t WildIsland::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.WildIsland)
  size_t total_size = 0;

  if (has_occupier_data()) {
    // required .sg.OccupierData occupier_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *occupier_data_);
  }

  if (has_entryid()) {
    // required uint64 entryid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());
  }

  if (has_island_cfgid()) {
    // required int32 island_cfgid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->island_cfgid());
  }

  if (has_island_state()) {
    // required .sg.WILD_ISLAND_STATE island_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->island_state());
  }

  return total_size;
}
size_t WildIsland::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIsland)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003a) ^ 0x0000003a) == 0) {  // All required fields are present.
    // required .sg.OccupierData occupier_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *occupier_data_);

    // required uint64 entryid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());

    // required int32 island_cfgid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->island_cfgid());

    // required .sg.WILD_ISLAND_STATE island_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->island_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes map_data = 12;
  if (has_map_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_data());
  }

  // optional .sg.WildIsland.Workshop workshop = 11;
  if (has_workshop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *workshop_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIsland::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIsland)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIsland* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIsland>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIsland)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIsland)
    MergeFrom(*source);
  }
}

void WildIsland::MergeFrom(const WildIsland& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIsland)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_map_data(from.map_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_occupier_data()->::sg::OccupierData::MergeFrom(from.occupier_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_workshop()->::sg::WildIsland_Workshop::MergeFrom(from.workshop());
    }
    if (cached_has_bits & 0x00000008u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000010u) {
      island_cfgid_ = from.island_cfgid_;
    }
    if (cached_has_bits & 0x00000020u) {
      island_state_ = from.island_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WildIsland::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIsland)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIsland::CopyFrom(const WildIsland& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIsland)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIsland::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003a) != 0x0000003a) return false;
  if (has_occupier_data()) {
    if (!this->occupier_data_->IsInitialized()) return false;
  }
  if (has_workshop()) {
    if (!this->workshop_->IsInitialized()) return false;
  }
  return true;
}

void WildIsland::Swap(WildIsland* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIsland* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIsland::UnsafeArenaSwap(WildIsland* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIsland::InternalSwap(WildIsland* other) {
  using std::swap;
  map_data_.Swap(&other->map_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(occupier_data_, other->occupier_data_);
  swap(workshop_, other->workshop_);
  swap(entryid_, other->entryid_);
  swap(island_cfgid_, other->island_cfgid_);
  swap(island_state_, other->island_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIsland::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIslandList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIslandList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIslandList::WildIslandList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIslandList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIslandList)
}
WildIslandList::WildIslandList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIslandList)
}
WildIslandList::WildIslandList(const WildIslandList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.WildIslandList)
}

void WildIslandList::SharedCtor() {
}

WildIslandList::~WildIslandList() {
  // @@protoc_insertion_point(destructor:sg.WildIslandList)
  SharedDtor();
}

void WildIslandList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void WildIslandList::ArenaDtor(void* object) {
  WildIslandList* _this = reinterpret_cast< WildIslandList* >(object);
  (void)_this;
}
void WildIslandList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIslandList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIslandList::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIslandList& WildIslandList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandList.base);
  return *internal_default_instance();
}


void WildIslandList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIslandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIslandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIslandList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.WildIsland list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIslandList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIslandList)
  return false;
#undef DO_
}

void WildIslandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIslandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.WildIsland list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIslandList)
}

::google::protobuf::uint8* WildIslandList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIslandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.WildIsland list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIslandList)
  return target;
}

size_t WildIslandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIslandList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.WildIsland list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIslandList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIslandList)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIslandList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIslandList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIslandList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIslandList)
    MergeFrom(*source);
  }
}

void WildIslandList::MergeFrom(const WildIslandList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIslandList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void WildIslandList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIslandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIslandList::CopyFrom(const WildIslandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIslandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIslandList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void WildIslandList::Swap(WildIslandList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIslandList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIslandList::UnsafeArenaSwap(WildIslandList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIslandList::InternalSwap(WildIslandList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIslandList::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIslandHarvestLog_HarvestItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIslandHarvestLog_HarvestItem::kItemTypeFieldNumber;
const int WildIslandHarvestLog_HarvestItem::kItemNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIslandHarvestLog_HarvestItem::WildIslandHarvestLog_HarvestItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIslandHarvestLog.HarvestItem)
}
WildIslandHarvestLog_HarvestItem::WildIslandHarvestLog_HarvestItem(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestItem.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIslandHarvestLog.HarvestItem)
}
WildIslandHarvestLog_HarvestItem::WildIslandHarvestLog_HarvestItem(const WildIslandHarvestLog_HarvestItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_type_, &from.item_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_num_) -
    reinterpret_cast<char*>(&item_type_)) + sizeof(item_num_));
  // @@protoc_insertion_point(copy_constructor:sg.WildIslandHarvestLog.HarvestItem)
}

void WildIslandHarvestLog_HarvestItem::SharedCtor() {
  ::memset(&item_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_num_) -
      reinterpret_cast<char*>(&item_type_)) + sizeof(item_num_));
}

WildIslandHarvestLog_HarvestItem::~WildIslandHarvestLog_HarvestItem() {
  // @@protoc_insertion_point(destructor:sg.WildIslandHarvestLog.HarvestItem)
  SharedDtor();
}

void WildIslandHarvestLog_HarvestItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void WildIslandHarvestLog_HarvestItem::ArenaDtor(void* object) {
  WildIslandHarvestLog_HarvestItem* _this = reinterpret_cast< WildIslandHarvestLog_HarvestItem* >(object);
  (void)_this;
}
void WildIslandHarvestLog_HarvestItem::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIslandHarvestLog_HarvestItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIslandHarvestLog_HarvestItem::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIslandHarvestLog_HarvestItem& WildIslandHarvestLog_HarvestItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestItem.base);
  return *internal_default_instance();
}


void WildIslandHarvestLog_HarvestItem::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIslandHarvestLog.HarvestItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&item_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_num_) -
        reinterpret_cast<char*>(&item_type_)) + sizeof(item_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIslandHarvestLog_HarvestItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIslandHarvestLog.HarvestItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_item_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 item_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_item_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIslandHarvestLog.HarvestItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIslandHarvestLog.HarvestItem)
  return false;
#undef DO_
}

void WildIslandHarvestLog_HarvestItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIslandHarvestLog.HarvestItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 item_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_type(), output);
  }

  // required int32 item_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIslandHarvestLog.HarvestItem)
}

::google::protobuf::uint8* WildIslandHarvestLog_HarvestItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIslandHarvestLog.HarvestItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 item_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_type(), target);
  }

  // required int32 item_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIslandHarvestLog.HarvestItem)
  return target;
}

size_t WildIslandHarvestLog_HarvestItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.WildIslandHarvestLog.HarvestItem)
  size_t total_size = 0;

  if (has_item_type()) {
    // required int32 item_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_type());
  }

  if (has_item_num()) {
    // required int32 item_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_num());
  }

  return total_size;
}
size_t WildIslandHarvestLog_HarvestItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIslandHarvestLog.HarvestItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 item_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_type());

    // required int32 item_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIslandHarvestLog_HarvestItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIslandHarvestLog.HarvestItem)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIslandHarvestLog_HarvestItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIslandHarvestLog_HarvestItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIslandHarvestLog.HarvestItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIslandHarvestLog.HarvestItem)
    MergeFrom(*source);
  }
}

void WildIslandHarvestLog_HarvestItem::MergeFrom(const WildIslandHarvestLog_HarvestItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIslandHarvestLog.HarvestItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_num_ = from.item_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WildIslandHarvestLog_HarvestItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIslandHarvestLog.HarvestItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIslandHarvestLog_HarvestItem::CopyFrom(const WildIslandHarvestLog_HarvestItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIslandHarvestLog.HarvestItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIslandHarvestLog_HarvestItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void WildIslandHarvestLog_HarvestItem::Swap(WildIslandHarvestLog_HarvestItem* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIslandHarvestLog_HarvestItem* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIslandHarvestLog_HarvestItem::UnsafeArenaSwap(WildIslandHarvestLog_HarvestItem* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIslandHarvestLog_HarvestItem::InternalSwap(WildIslandHarvestLog_HarvestItem* other) {
  using std::swap;
  swap(item_type_, other->item_type_);
  swap(item_num_, other->item_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIslandHarvestLog_HarvestItem::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIslandHarvestLog_HarvestItemList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIslandHarvestLog_HarvestItemList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIslandHarvestLog_HarvestItemList::WildIslandHarvestLog_HarvestItemList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestItemList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIslandHarvestLog.HarvestItemList)
}
WildIslandHarvestLog_HarvestItemList::WildIslandHarvestLog_HarvestItemList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestItemList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIslandHarvestLog.HarvestItemList)
}
WildIslandHarvestLog_HarvestItemList::WildIslandHarvestLog_HarvestItemList(const WildIslandHarvestLog_HarvestItemList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.WildIslandHarvestLog.HarvestItemList)
}

void WildIslandHarvestLog_HarvestItemList::SharedCtor() {
}

WildIslandHarvestLog_HarvestItemList::~WildIslandHarvestLog_HarvestItemList() {
  // @@protoc_insertion_point(destructor:sg.WildIslandHarvestLog.HarvestItemList)
  SharedDtor();
}

void WildIslandHarvestLog_HarvestItemList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void WildIslandHarvestLog_HarvestItemList::ArenaDtor(void* object) {
  WildIslandHarvestLog_HarvestItemList* _this = reinterpret_cast< WildIslandHarvestLog_HarvestItemList* >(object);
  (void)_this;
}
void WildIslandHarvestLog_HarvestItemList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIslandHarvestLog_HarvestItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIslandHarvestLog_HarvestItemList::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIslandHarvestLog_HarvestItemList& WildIslandHarvestLog_HarvestItemList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestItemList.base);
  return *internal_default_instance();
}


void WildIslandHarvestLog_HarvestItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIslandHarvestLog.HarvestItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIslandHarvestLog_HarvestItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIslandHarvestLog.HarvestItemList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.WildIslandHarvestLog.HarvestItem list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIslandHarvestLog.HarvestItemList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIslandHarvestLog.HarvestItemList)
  return false;
#undef DO_
}

void WildIslandHarvestLog_HarvestItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIslandHarvestLog.HarvestItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.WildIslandHarvestLog.HarvestItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIslandHarvestLog.HarvestItemList)
}

::google::protobuf::uint8* WildIslandHarvestLog_HarvestItemList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIslandHarvestLog.HarvestItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.WildIslandHarvestLog.HarvestItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIslandHarvestLog.HarvestItemList)
  return target;
}

size_t WildIslandHarvestLog_HarvestItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIslandHarvestLog.HarvestItemList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.WildIslandHarvestLog.HarvestItem list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIslandHarvestLog_HarvestItemList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIslandHarvestLog.HarvestItemList)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIslandHarvestLog_HarvestItemList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIslandHarvestLog_HarvestItemList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIslandHarvestLog.HarvestItemList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIslandHarvestLog.HarvestItemList)
    MergeFrom(*source);
  }
}

void WildIslandHarvestLog_HarvestItemList::MergeFrom(const WildIslandHarvestLog_HarvestItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIslandHarvestLog.HarvestItemList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void WildIslandHarvestLog_HarvestItemList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIslandHarvestLog.HarvestItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIslandHarvestLog_HarvestItemList::CopyFrom(const WildIslandHarvestLog_HarvestItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIslandHarvestLog.HarvestItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIslandHarvestLog_HarvestItemList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void WildIslandHarvestLog_HarvestItemList::Swap(WildIslandHarvestLog_HarvestItemList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIslandHarvestLog_HarvestItemList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIslandHarvestLog_HarvestItemList::UnsafeArenaSwap(WildIslandHarvestLog_HarvestItemList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIslandHarvestLog_HarvestItemList::InternalSwap(WildIslandHarvestLog_HarvestItemList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIslandHarvestLog_HarvestItemList::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIslandHarvestLog_HarvestLog::InitAsDefaultInstance() {
  ::sg::_WildIslandHarvestLog_HarvestLog_default_instance_._instance.get_mutable()->item_list_ = const_cast< ::sg::WildIslandHarvestLog_HarvestItemList*>(
      ::sg::WildIslandHarvestLog_HarvestItemList::internal_default_instance());
}
void WildIslandHarvestLog_HarvestLog::unsafe_arena_set_allocated_item_list(
    ::sg::WildIslandHarvestLog_HarvestItemList* item_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete item_list_;
  }
  item_list_ = item_list;
  if (item_list) {
    set_has_item_list();
  } else {
    clear_has_item_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.WildIslandHarvestLog.HarvestLog.item_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIslandHarvestLog_HarvestLog::kHarvestTimeFieldNumber;
const int WildIslandHarvestLog_HarvestLog::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIslandHarvestLog_HarvestLog::WildIslandHarvestLog_HarvestLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestLog.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIslandHarvestLog.HarvestLog)
}
WildIslandHarvestLog_HarvestLog::WildIslandHarvestLog_HarvestLog(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestLog.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIslandHarvestLog.HarvestLog)
}
WildIslandHarvestLog_HarvestLog::WildIslandHarvestLog_HarvestLog(const WildIslandHarvestLog_HarvestLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item_list()) {
    item_list_ = new ::sg::WildIslandHarvestLog_HarvestItemList(*from.item_list_);
  } else {
    item_list_ = NULL;
  }
  harvest_time_ = from.harvest_time_;
  // @@protoc_insertion_point(copy_constructor:sg.WildIslandHarvestLog.HarvestLog)
}

void WildIslandHarvestLog_HarvestLog::SharedCtor() {
  ::memset(&item_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&harvest_time_) -
      reinterpret_cast<char*>(&item_list_)) + sizeof(harvest_time_));
}

WildIslandHarvestLog_HarvestLog::~WildIslandHarvestLog_HarvestLog() {
  // @@protoc_insertion_point(destructor:sg.WildIslandHarvestLog.HarvestLog)
  SharedDtor();
}

void WildIslandHarvestLog_HarvestLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete item_list_;
}

void WildIslandHarvestLog_HarvestLog::ArenaDtor(void* object) {
  WildIslandHarvestLog_HarvestLog* _this = reinterpret_cast< WildIslandHarvestLog_HarvestLog* >(object);
  (void)_this;
}
void WildIslandHarvestLog_HarvestLog::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIslandHarvestLog_HarvestLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIslandHarvestLog_HarvestLog::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIslandHarvestLog_HarvestLog& WildIslandHarvestLog_HarvestLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestLog.base);
  return *internal_default_instance();
}


void WildIslandHarvestLog_HarvestLog::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIslandHarvestLog.HarvestLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_list_ != NULL);
    item_list_->Clear();
  }
  harvest_time_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIslandHarvestLog_HarvestLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIslandHarvestLog.HarvestLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 harvest_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_harvest_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &harvest_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.WildIslandHarvestLog.HarvestItemList item_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIslandHarvestLog.HarvestLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIslandHarvestLog.HarvestLog)
  return false;
#undef DO_
}

void WildIslandHarvestLog_HarvestLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIslandHarvestLog.HarvestLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sfixed64 harvest_time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->harvest_time(), output);
  }

  // optional .sg.WildIslandHarvestLog.HarvestItemList item_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_item_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIslandHarvestLog.HarvestLog)
}

::google::protobuf::uint8* WildIslandHarvestLog_HarvestLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIslandHarvestLog.HarvestLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sfixed64 harvest_time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->harvest_time(), target);
  }

  // optional .sg.WildIslandHarvestLog.HarvestItemList item_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_item_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIslandHarvestLog.HarvestLog)
  return target;
}

size_t WildIslandHarvestLog_HarvestLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIslandHarvestLog.HarvestLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.WildIslandHarvestLog.HarvestItemList item_list = 2;
    if (has_item_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *item_list_);
    }

    // optional sfixed64 harvest_time = 1;
    if (has_harvest_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIslandHarvestLog_HarvestLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIslandHarvestLog.HarvestLog)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIslandHarvestLog_HarvestLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIslandHarvestLog_HarvestLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIslandHarvestLog.HarvestLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIslandHarvestLog.HarvestLog)
    MergeFrom(*source);
  }
}

void WildIslandHarvestLog_HarvestLog::MergeFrom(const WildIslandHarvestLog_HarvestLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIslandHarvestLog.HarvestLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_item_list()->::sg::WildIslandHarvestLog_HarvestItemList::MergeFrom(from.item_list());
    }
    if (cached_has_bits & 0x00000002u) {
      harvest_time_ = from.harvest_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WildIslandHarvestLog_HarvestLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIslandHarvestLog.HarvestLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIslandHarvestLog_HarvestLog::CopyFrom(const WildIslandHarvestLog_HarvestLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIslandHarvestLog.HarvestLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIslandHarvestLog_HarvestLog::IsInitialized() const {
  if (has_item_list()) {
    if (!this->item_list_->IsInitialized()) return false;
  }
  return true;
}

void WildIslandHarvestLog_HarvestLog::Swap(WildIslandHarvestLog_HarvestLog* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIslandHarvestLog_HarvestLog* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIslandHarvestLog_HarvestLog::UnsafeArenaSwap(WildIslandHarvestLog_HarvestLog* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIslandHarvestLog_HarvestLog::InternalSwap(WildIslandHarvestLog_HarvestLog* other) {
  using std::swap;
  swap(item_list_, other->item_list_);
  swap(harvest_time_, other->harvest_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIslandHarvestLog_HarvestLog::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIslandHarvestLog_HarvestLogList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIslandHarvestLog_HarvestLogList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIslandHarvestLog_HarvestLogList::WildIslandHarvestLog_HarvestLogList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestLogList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIslandHarvestLog.HarvestLogList)
}
WildIslandHarvestLog_HarvestLogList::WildIslandHarvestLog_HarvestLogList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestLogList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIslandHarvestLog.HarvestLogList)
}
WildIslandHarvestLog_HarvestLogList::WildIslandHarvestLog_HarvestLogList(const WildIslandHarvestLog_HarvestLogList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.WildIslandHarvestLog.HarvestLogList)
}

void WildIslandHarvestLog_HarvestLogList::SharedCtor() {
}

WildIslandHarvestLog_HarvestLogList::~WildIslandHarvestLog_HarvestLogList() {
  // @@protoc_insertion_point(destructor:sg.WildIslandHarvestLog.HarvestLogList)
  SharedDtor();
}

void WildIslandHarvestLog_HarvestLogList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void WildIslandHarvestLog_HarvestLogList::ArenaDtor(void* object) {
  WildIslandHarvestLog_HarvestLogList* _this = reinterpret_cast< WildIslandHarvestLog_HarvestLogList* >(object);
  (void)_this;
}
void WildIslandHarvestLog_HarvestLogList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIslandHarvestLog_HarvestLogList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIslandHarvestLog_HarvestLogList::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIslandHarvestLog_HarvestLogList& WildIslandHarvestLog_HarvestLogList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog_HarvestLogList.base);
  return *internal_default_instance();
}


void WildIslandHarvestLog_HarvestLogList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIslandHarvestLog.HarvestLogList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIslandHarvestLog_HarvestLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIslandHarvestLog.HarvestLogList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.WildIslandHarvestLog.HarvestLog list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIslandHarvestLog.HarvestLogList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIslandHarvestLog.HarvestLogList)
  return false;
#undef DO_
}

void WildIslandHarvestLog_HarvestLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIslandHarvestLog.HarvestLogList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.WildIslandHarvestLog.HarvestLog list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIslandHarvestLog.HarvestLogList)
}

::google::protobuf::uint8* WildIslandHarvestLog_HarvestLogList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIslandHarvestLog.HarvestLogList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.WildIslandHarvestLog.HarvestLog list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIslandHarvestLog.HarvestLogList)
  return target;
}

size_t WildIslandHarvestLog_HarvestLogList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIslandHarvestLog.HarvestLogList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.WildIslandHarvestLog.HarvestLog list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIslandHarvestLog_HarvestLogList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIslandHarvestLog.HarvestLogList)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIslandHarvestLog_HarvestLogList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIslandHarvestLog_HarvestLogList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIslandHarvestLog.HarvestLogList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIslandHarvestLog.HarvestLogList)
    MergeFrom(*source);
  }
}

void WildIslandHarvestLog_HarvestLogList::MergeFrom(const WildIslandHarvestLog_HarvestLogList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIslandHarvestLog.HarvestLogList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void WildIslandHarvestLog_HarvestLogList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIslandHarvestLog.HarvestLogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIslandHarvestLog_HarvestLogList::CopyFrom(const WildIslandHarvestLog_HarvestLogList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIslandHarvestLog.HarvestLogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIslandHarvestLog_HarvestLogList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void WildIslandHarvestLog_HarvestLogList::Swap(WildIslandHarvestLog_HarvestLogList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIslandHarvestLog_HarvestLogList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIslandHarvestLog_HarvestLogList::UnsafeArenaSwap(WildIslandHarvestLog_HarvestLogList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIslandHarvestLog_HarvestLogList::InternalSwap(WildIslandHarvestLog_HarvestLogList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIslandHarvestLog_HarvestLogList::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIslandHarvestLog::InitAsDefaultInstance() {
  ::sg::_WildIslandHarvestLog_default_instance_._instance.get_mutable()->harvest_log_list_ = const_cast< ::sg::WildIslandHarvestLog_HarvestLogList*>(
      ::sg::WildIslandHarvestLog_HarvestLogList::internal_default_instance());
}
void WildIslandHarvestLog::unsafe_arena_set_allocated_harvest_log_list(
    ::sg::WildIslandHarvestLog_HarvestLogList* harvest_log_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete harvest_log_list_;
  }
  harvest_log_list_ = harvest_log_list;
  if (harvest_log_list) {
    set_has_harvest_log_list();
  } else {
    clear_has_harvest_log_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.WildIslandHarvestLog.harvest_log_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIslandHarvestLog::kHarvestLogListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIslandHarvestLog::WildIslandHarvestLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIslandHarvestLog)
}
WildIslandHarvestLog::WildIslandHarvestLog(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIslandHarvestLog)
}
WildIslandHarvestLog::WildIslandHarvestLog(const WildIslandHarvestLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_harvest_log_list()) {
    harvest_log_list_ = new ::sg::WildIslandHarvestLog_HarvestLogList(*from.harvest_log_list_);
  } else {
    harvest_log_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.WildIslandHarvestLog)
}

void WildIslandHarvestLog::SharedCtor() {
  harvest_log_list_ = NULL;
}

WildIslandHarvestLog::~WildIslandHarvestLog() {
  // @@protoc_insertion_point(destructor:sg.WildIslandHarvestLog)
  SharedDtor();
}

void WildIslandHarvestLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete harvest_log_list_;
}

void WildIslandHarvestLog::ArenaDtor(void* object) {
  WildIslandHarvestLog* _this = reinterpret_cast< WildIslandHarvestLog* >(object);
  (void)_this;
}
void WildIslandHarvestLog::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIslandHarvestLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIslandHarvestLog::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIslandHarvestLog& WildIslandHarvestLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandHarvestLog.base);
  return *internal_default_instance();
}


void WildIslandHarvestLog::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIslandHarvestLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(harvest_log_list_ != NULL);
    harvest_log_list_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIslandHarvestLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIslandHarvestLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.WildIslandHarvestLog.HarvestLogList harvest_log_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_harvest_log_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIslandHarvestLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIslandHarvestLog)
  return false;
#undef DO_
}

void WildIslandHarvestLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIslandHarvestLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.WildIslandHarvestLog.HarvestLogList harvest_log_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_harvest_log_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIslandHarvestLog)
}

::google::protobuf::uint8* WildIslandHarvestLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIslandHarvestLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.WildIslandHarvestLog.HarvestLogList harvest_log_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_harvest_log_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIslandHarvestLog)
  return target;
}

size_t WildIslandHarvestLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIslandHarvestLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.WildIslandHarvestLog.HarvestLogList harvest_log_list = 1;
  if (has_harvest_log_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harvest_log_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIslandHarvestLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIslandHarvestLog)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIslandHarvestLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIslandHarvestLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIslandHarvestLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIslandHarvestLog)
    MergeFrom(*source);
  }
}

void WildIslandHarvestLog::MergeFrom(const WildIslandHarvestLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIslandHarvestLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_harvest_log_list()) {
    mutable_harvest_log_list()->::sg::WildIslandHarvestLog_HarvestLogList::MergeFrom(from.harvest_log_list());
  }
}

void WildIslandHarvestLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIslandHarvestLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIslandHarvestLog::CopyFrom(const WildIslandHarvestLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIslandHarvestLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIslandHarvestLog::IsInitialized() const {
  if (has_harvest_log_list()) {
    if (!this->harvest_log_list_->IsInitialized()) return false;
  }
  return true;
}

void WildIslandHarvestLog::Swap(WildIslandHarvestLog* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIslandHarvestLog* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIslandHarvestLog::UnsafeArenaSwap(WildIslandHarvestLog* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIslandHarvestLog::InternalSwap(WildIslandHarvestLog* other) {
  using std::swap;
  swap(harvest_log_list_, other->harvest_log_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIslandHarvestLog::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HarvestTime::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarvestTime::kHarvestTypeFieldNumber;
const int HarvestTime::kHarvestTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarvestTime::HarvestTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_HarvestTime.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HarvestTime)
}
HarvestTime::HarvestTime(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_HarvestTime.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HarvestTime)
}
HarvestTime::HarvestTime(const HarvestTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&harvest_time_, &from.harvest_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&harvest_type_) -
    reinterpret_cast<char*>(&harvest_time_)) + sizeof(harvest_type_));
  // @@protoc_insertion_point(copy_constructor:sg.HarvestTime)
}

void HarvestTime::SharedCtor() {
  ::memset(&harvest_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&harvest_type_) -
      reinterpret_cast<char*>(&harvest_time_)) + sizeof(harvest_type_));
}

HarvestTime::~HarvestTime() {
  // @@protoc_insertion_point(destructor:sg.HarvestTime)
  SharedDtor();
}

void HarvestTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HarvestTime::ArenaDtor(void* object) {
  HarvestTime* _this = reinterpret_cast< HarvestTime* >(object);
  (void)_this;
}
void HarvestTime::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HarvestTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HarvestTime::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarvestTime& HarvestTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_HarvestTime.base);
  return *internal_default_instance();
}


void HarvestTime::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HarvestTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&harvest_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&harvest_type_) -
        reinterpret_cast<char*>(&harvest_time_)) + sizeof(harvest_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarvestTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HarvestTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::MAP_ENTRY_HARVEST_TYPE_IsValid(value)) {
            set_harvest_type(static_cast< ::sg::MAP_ENTRY_HARVEST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 harvest_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_harvest_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &harvest_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HarvestTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HarvestTime)
  return false;
#undef DO_
}

void HarvestTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HarvestTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->harvest_type(), output);
  }

  // required sfixed64 harvest_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->harvest_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HarvestTime)
}

::google::protobuf::uint8* HarvestTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HarvestTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->harvest_type(), target);
  }

  // required sfixed64 harvest_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->harvest_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HarvestTime)
  return target;
}

size_t HarvestTime::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.HarvestTime)
  size_t total_size = 0;

  if (has_harvest_time()) {
    // required sfixed64 harvest_time = 2;
    total_size += 1 + 8;
  }

  if (has_harvest_type()) {
    // required .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->harvest_type());
  }

  return total_size;
}
size_t HarvestTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HarvestTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sfixed64 harvest_time = 2;
    total_size += 1 + 8;

    // required .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->harvest_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarvestTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HarvestTime)
  GOOGLE_DCHECK_NE(&from, this);
  const HarvestTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarvestTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HarvestTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HarvestTime)
    MergeFrom(*source);
  }
}

void HarvestTime::MergeFrom(const HarvestTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HarvestTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      harvest_time_ = from.harvest_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      harvest_type_ = from.harvest_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarvestTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HarvestTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarvestTime::CopyFrom(const HarvestTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HarvestTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarvestTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HarvestTime::Swap(HarvestTime* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HarvestTime* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HarvestTime::UnsafeArenaSwap(HarvestTime* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HarvestTime::InternalSwap(HarvestTime* other) {
  using std::swap;
  swap(harvest_time_, other->harvest_time_);
  swap(harvest_type_, other->harvest_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HarvestTime::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GarrisonRoom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GarrisonRoom::kRoomidFieldNumber;
const int GarrisonRoom::kGarrisonListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GarrisonRoom::GarrisonRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_GarrisonRoom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GarrisonRoom)
}
GarrisonRoom::GarrisonRoom(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  garrison_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_GarrisonRoom.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GarrisonRoom)
}
GarrisonRoom::GarrisonRoom(const GarrisonRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      garrison_list_(from.garrison_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:sg.GarrisonRoom)
}

void GarrisonRoom::SharedCtor() {
  roomid_ = 0;
}

GarrisonRoom::~GarrisonRoom() {
  // @@protoc_insertion_point(destructor:sg.GarrisonRoom)
  SharedDtor();
}

void GarrisonRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GarrisonRoom::ArenaDtor(void* object) {
  GarrisonRoom* _this = reinterpret_cast< GarrisonRoom* >(object);
  (void)_this;
}
void GarrisonRoom::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GarrisonRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GarrisonRoom::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GarrisonRoom& GarrisonRoom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_GarrisonRoom.base);
  return *internal_default_instance();
}


void GarrisonRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GarrisonRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  garrison_list_.Clear();
  roomid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GarrisonRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GarrisonRoom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 garrison_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_garrison_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_garrison_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GarrisonRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GarrisonRoom)
  return false;
#undef DO_
}

void GarrisonRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GarrisonRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // repeated int32 garrison_list = 2;
  for (int i = 0, n = this->garrison_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->garrison_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GarrisonRoom)
}

::google::protobuf::uint8* GarrisonRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GarrisonRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // repeated int32 garrison_list = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->garrison_list_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GarrisonRoom)
  return target;
}

size_t GarrisonRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GarrisonRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }
  // repeated int32 garrison_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->garrison_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->garrison_list_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GarrisonRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GarrisonRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const GarrisonRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GarrisonRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GarrisonRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GarrisonRoom)
    MergeFrom(*source);
  }
}

void GarrisonRoom::MergeFrom(const GarrisonRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GarrisonRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  garrison_list_.MergeFrom(from.garrison_list_);
  if (from.has_roomid()) {
    set_roomid(from.roomid());
  }
}

void GarrisonRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GarrisonRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarrisonRoom::CopyFrom(const GarrisonRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GarrisonRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarrisonRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GarrisonRoom::Swap(GarrisonRoom* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GarrisonRoom* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GarrisonRoom::UnsafeArenaSwap(GarrisonRoom* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GarrisonRoom::InternalSwap(GarrisonRoom* other) {
  using std::swap;
  garrison_list_.InternalSwap(&other->garrison_list_);
  swap(roomid_, other->roomid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GarrisonRoom::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserMapService_MapRequest::InitAsDefaultInstance() {
  ::sg::_UserMapService_MapRequest_default_instance_._instance.get_mutable()->garrison_room_ = const_cast< ::sg::GarrisonRoom*>(
      ::sg::GarrisonRoom::internal_default_instance());
}
void UserMapService_MapRequest::unsafe_arena_set_allocated_garrison_room(
    ::sg::GarrisonRoom* garrison_room) {
  if (GetArenaNoVirtual() == NULL) {
    delete garrison_room_;
  }
  garrison_room_ = garrison_room;
  if (garrison_room) {
    set_has_garrison_room();
  } else {
    clear_has_garrison_room();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserMapService.MapRequest.garrison_room)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMapService_MapRequest::kCmdFieldNumber;
const int UserMapService_MapRequest::kAreaidFieldNumber;
const int UserMapService_MapRequest::kEntryidFieldNumber;
const int UserMapService_MapRequest::kGarrisonRoomFieldNumber;
const int UserMapService_MapRequest::kHarvestTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMapService_MapRequest::UserMapService_MapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_UserMapService_MapRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserMapService.MapRequest)
}
UserMapService_MapRequest::UserMapService_MapRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_UserMapService_MapRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserMapService.MapRequest)
}
UserMapService_MapRequest::UserMapService_MapRequest(const UserMapService_MapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_garrison_room()) {
    garrison_room_ = new ::sg::GarrisonRoom(*from.garrison_room_);
  } else {
    garrison_room_ = NULL;
  }
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserMapService.MapRequest)
}

void UserMapService_MapRequest::SharedCtor() {
  ::memset(&garrison_room_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&harvest_type_) -
      reinterpret_cast<char*>(&garrison_room_)) + sizeof(harvest_type_));
  cmd_ = 1;
}

UserMapService_MapRequest::~UserMapService_MapRequest() {
  // @@protoc_insertion_point(destructor:sg.UserMapService.MapRequest)
  SharedDtor();
}

void UserMapService_MapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete garrison_room_;
}

void UserMapService_MapRequest::ArenaDtor(void* object) {
  UserMapService_MapRequest* _this = reinterpret_cast< UserMapService_MapRequest* >(object);
  (void)_this;
}
void UserMapService_MapRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserMapService_MapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserMapService_MapRequest::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserMapService_MapRequest& UserMapService_MapRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_UserMapService_MapRequest.base);
  return *internal_default_instance();
}


void UserMapService_MapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserMapService.MapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(garrison_room_ != NULL);
    garrison_room_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&harvest_type_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(harvest_type_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserMapService_MapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserMapService.MapRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserMapService.MAP_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserMapService_MAP_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserMapService_MAP_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 areaid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_areaid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 entryid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GarrisonRoom garrison_room = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_garrison_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::MAP_ENTRY_HARVEST_TYPE_IsValid(value)) {
            set_harvest_type(static_cast< ::sg::MAP_ENTRY_HARVEST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserMapService.MapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserMapService.MapRequest)
  return false;
#undef DO_
}

void UserMapService_MapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserMapService.MapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserMapService.MAP_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 areaid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->areaid(), output);
  }

  // optional uint64 entryid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->entryid(), output);
  }

  // optional .sg.GarrisonRoom garrison_room = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_garrison_room(), output);
  }

  // optional .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->harvest_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserMapService.MapRequest)
}

::google::protobuf::uint8* UserMapService_MapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserMapService.MapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserMapService.MAP_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 areaid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->areaid(), target);
  }

  // optional uint64 entryid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->entryid(), target);
  }

  // optional .sg.GarrisonRoom garrison_room = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_garrison_room(), deterministic, target);
  }

  // optional .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->harvest_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserMapService.MapRequest)
  return target;
}

size_t UserMapService_MapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserMapService.MapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserMapService.MAP_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .sg.GarrisonRoom garrison_room = 4;
    if (has_garrison_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *garrison_room_);
    }

    // optional uint64 entryid = 3;
    if (has_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entryid());
    }

    // optional int32 areaid = 2;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional .sg.MAP_ENTRY_HARVEST_TYPE harvest_type = 5;
    if (has_harvest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->harvest_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMapService_MapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserMapService.MapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMapService_MapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMapService_MapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserMapService.MapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserMapService.MapRequest)
    MergeFrom(*source);
  }
}

void UserMapService_MapRequest::MergeFrom(const UserMapService_MapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserMapService.MapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_garrison_room()->::sg::GarrisonRoom::MergeFrom(from.garrison_room());
    }
    if (cached_has_bits & 0x00000002u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000004u) {
      areaid_ = from.areaid_;
    }
    if (cached_has_bits & 0x00000008u) {
      harvest_type_ = from.harvest_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserMapService_MapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserMapService.MapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMapService_MapRequest::CopyFrom(const UserMapService_MapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserMapService.MapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMapService_MapRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_garrison_room()) {
    if (!this->garrison_room_->IsInitialized()) return false;
  }
  return true;
}

void UserMapService_MapRequest::Swap(UserMapService_MapRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserMapService_MapRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserMapService_MapRequest::UnsafeArenaSwap(UserMapService_MapRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserMapService_MapRequest::InternalSwap(UserMapService_MapRequest* other) {
  using std::swap;
  swap(garrison_room_, other->garrison_room_);
  swap(entryid_, other->entryid_);
  swap(areaid_, other->areaid_);
  swap(harvest_type_, other->harvest_type_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserMapService_MapRequest::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserMapService_MapResponse::InitAsDefaultInstance() {
  ::sg::_UserMapService_MapResponse_default_instance_._instance.get_mutable()->area_list_ = const_cast< ::sg::MapAreaList*>(
      ::sg::MapAreaList::internal_default_instance());
  ::sg::_UserMapService_MapResponse_default_instance_._instance.get_mutable()->entry_list_ = const_cast< ::sg::MapEntryList*>(
      ::sg::MapEntryList::internal_default_instance());
  ::sg::_UserMapService_MapResponse_default_instance_._instance.get_mutable()->island_list_ = const_cast< ::sg::WildIslandList*>(
      ::sg::WildIslandList::internal_default_instance());
  ::sg::_UserMapService_MapResponse_default_instance_._instance.get_mutable()->harvest_log_ = const_cast< ::sg::WildIslandHarvestLog*>(
      ::sg::WildIslandHarvestLog::internal_default_instance());
}
void UserMapService_MapResponse::unsafe_arena_set_allocated_area_list(
    ::sg::MapAreaList* area_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete area_list_;
  }
  area_list_ = area_list;
  if (area_list) {
    set_has_area_list();
  } else {
    clear_has_area_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserMapService.MapResponse.area_list)
}
void UserMapService_MapResponse::unsafe_arena_set_allocated_entry_list(
    ::sg::MapEntryList* entry_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete entry_list_;
  }
  entry_list_ = entry_list;
  if (entry_list) {
    set_has_entry_list();
  } else {
    clear_has_entry_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserMapService.MapResponse.entry_list)
}
void UserMapService_MapResponse::unsafe_arena_set_allocated_island_list(
    ::sg::WildIslandList* island_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete island_list_;
  }
  island_list_ = island_list;
  if (island_list) {
    set_has_island_list();
  } else {
    clear_has_island_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserMapService.MapResponse.island_list)
}
void UserMapService_MapResponse::unsafe_arena_set_allocated_harvest_log(
    ::sg::WildIslandHarvestLog* harvest_log) {
  if (GetArenaNoVirtual() == NULL) {
    delete harvest_log_;
  }
  harvest_log_ = harvest_log;
  if (harvest_log) {
    set_has_harvest_log();
  } else {
    clear_has_harvest_log();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserMapService.MapResponse.harvest_log)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMapService_MapResponse::kResultFieldNumber;
const int UserMapService_MapResponse::kAreaListFieldNumber;
const int UserMapService_MapResponse::kEntryListFieldNumber;
const int UserMapService_MapResponse::kIslandListFieldNumber;
const int UserMapService_MapResponse::kHarvestLogFieldNumber;
const int UserMapService_MapResponse::kHarvestTimeFieldNumber;
const int UserMapService_MapResponse::kCfgHarvestIntervalSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMapService_MapResponse::UserMapService_MapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_UserMapService_MapResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserMapService.MapResponse)
}
UserMapService_MapResponse::UserMapService_MapResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  harvest_time_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_UserMapService_MapResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserMapService.MapResponse)
}
UserMapService_MapResponse::UserMapService_MapResponse(const UserMapService_MapResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      harvest_time_(from.harvest_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_area_list()) {
    area_list_ = new ::sg::MapAreaList(*from.area_list_);
  } else {
    area_list_ = NULL;
  }
  if (from.has_entry_list()) {
    entry_list_ = new ::sg::MapEntryList(*from.entry_list_);
  } else {
    entry_list_ = NULL;
  }
  if (from.has_island_list()) {
    island_list_ = new ::sg::WildIslandList(*from.island_list_);
  } else {
    island_list_ = NULL;
  }
  if (from.has_harvest_log()) {
    harvest_log_ = new ::sg::WildIslandHarvestLog(*from.harvest_log_);
  } else {
    harvest_log_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cfg_harvest_interval_seconds_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cfg_harvest_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:sg.UserMapService.MapResponse)
}

void UserMapService_MapResponse::SharedCtor() {
  ::memset(&area_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cfg_harvest_interval_seconds_) -
      reinterpret_cast<char*>(&area_list_)) + sizeof(cfg_harvest_interval_seconds_));
}

UserMapService_MapResponse::~UserMapService_MapResponse() {
  // @@protoc_insertion_point(destructor:sg.UserMapService.MapResponse)
  SharedDtor();
}

void UserMapService_MapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete area_list_;
  if (this != internal_default_instance()) delete entry_list_;
  if (this != internal_default_instance()) delete island_list_;
  if (this != internal_default_instance()) delete harvest_log_;
}

void UserMapService_MapResponse::ArenaDtor(void* object) {
  UserMapService_MapResponse* _this = reinterpret_cast< UserMapService_MapResponse* >(object);
  (void)_this;
}
void UserMapService_MapResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserMapService_MapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserMapService_MapResponse::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserMapService_MapResponse& UserMapService_MapResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_UserMapService_MapResponse.base);
  return *internal_default_instance();
}


void UserMapService_MapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserMapService.MapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  harvest_time_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(area_list_ != NULL);
      area_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entry_list_ != NULL);
      entry_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(island_list_ != NULL);
      island_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(harvest_log_ != NULL);
      harvest_log_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cfg_harvest_interval_seconds_) -
        reinterpret_cast<char*>(&result_)) + sizeof(cfg_harvest_interval_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserMapService_MapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserMapService.MapResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MapAreaList area_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_area_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MapEntryList entry_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entry_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.WildIslandList island_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_island_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.WildIslandHarvestLog harvest_log = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_harvest_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.HarvestTime harvest_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_harvest_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cfg_harvest_interval_seconds = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_cfg_harvest_interval_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_harvest_interval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserMapService.MapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserMapService.MapResponse)
  return false;
#undef DO_
}

void UserMapService_MapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserMapService.MapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.MapAreaList area_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_area_list(), output);
  }

  // optional .sg.MapEntryList entry_list = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_entry_list(), output);
  }

  // optional .sg.WildIslandList island_list = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_island_list(), output);
  }

  // optional .sg.WildIslandHarvestLog harvest_log = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_harvest_log(), output);
  }

  // repeated .sg.HarvestTime harvest_time = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->harvest_time_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->harvest_time(static_cast<int>(i)),
      output);
  }

  // optional int32 cfg_harvest_interval_seconds = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cfg_harvest_interval_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserMapService.MapResponse)
}

::google::protobuf::uint8* UserMapService_MapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserMapService.MapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.MapAreaList area_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_area_list(), deterministic, target);
  }

  // optional .sg.MapEntryList entry_list = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_entry_list(), deterministic, target);
  }

  // optional .sg.WildIslandList island_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_island_list(), deterministic, target);
  }

  // optional .sg.WildIslandHarvestLog harvest_log = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_harvest_log(), deterministic, target);
  }

  // repeated .sg.HarvestTime harvest_time = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->harvest_time_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->harvest_time(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 cfg_harvest_interval_seconds = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cfg_harvest_interval_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserMapService.MapResponse)
  return target;
}

size_t UserMapService_MapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserMapService.MapResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.HarvestTime harvest_time = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->harvest_time_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->harvest_time(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .sg.MapAreaList area_list = 2;
    if (has_area_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *area_list_);
    }

    // optional .sg.MapEntryList entry_list = 3;
    if (has_entry_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *entry_list_);
    }

    // optional .sg.WildIslandList island_list = 4;
    if (has_island_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *island_list_);
    }

    // optional .sg.WildIslandHarvestLog harvest_log = 11;
    if (has_harvest_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *harvest_log_);
    }

  }
  // optional int32 cfg_harvest_interval_seconds = 13;
  if (has_cfg_harvest_interval_seconds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cfg_harvest_interval_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMapService_MapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserMapService.MapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMapService_MapResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMapService_MapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserMapService.MapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserMapService.MapResponse)
    MergeFrom(*source);
  }
}

void UserMapService_MapResponse::MergeFrom(const UserMapService_MapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserMapService.MapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  harvest_time_.MergeFrom(from.harvest_time_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_area_list()->::sg::MapAreaList::MergeFrom(from.area_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_entry_list()->::sg::MapEntryList::MergeFrom(from.entry_list());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_island_list()->::sg::WildIslandList::MergeFrom(from.island_list());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_harvest_log()->::sg::WildIslandHarvestLog::MergeFrom(from.harvest_log());
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000020u) {
      cfg_harvest_interval_seconds_ = from.cfg_harvest_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserMapService_MapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserMapService.MapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMapService_MapResponse::CopyFrom(const UserMapService_MapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserMapService.MapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMapService_MapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->harvest_time())) return false;
  if (has_area_list()) {
    if (!this->area_list_->IsInitialized()) return false;
  }
  if (has_entry_list()) {
    if (!this->entry_list_->IsInitialized()) return false;
  }
  if (has_island_list()) {
    if (!this->island_list_->IsInitialized()) return false;
  }
  if (has_harvest_log()) {
    if (!this->harvest_log_->IsInitialized()) return false;
  }
  return true;
}

void UserMapService_MapResponse::Swap(UserMapService_MapResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserMapService_MapResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserMapService_MapResponse::UnsafeArenaSwap(UserMapService_MapResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserMapService_MapResponse::InternalSwap(UserMapService_MapResponse* other) {
  using std::swap;
  CastToBase(&harvest_time_)->InternalSwap(CastToBase(&other->harvest_time_));
  swap(area_list_, other->area_list_);
  swap(entry_list_, other->entry_list_);
  swap(island_list_, other->island_list_);
  swap(harvest_log_, other->harvest_log_);
  swap(result_, other->result_);
  swap(cfg_harvest_interval_seconds_, other->cfg_harvest_interval_seconds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserMapService_MapResponse::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserMapService::InitAsDefaultInstance() {
  ::sg::_UserMapService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserMapService_MapRequest*>(
      ::sg::UserMapService_MapRequest::internal_default_instance());
  ::sg::_UserMapService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserMapService_MapResponse*>(
      ::sg::UserMapService_MapResponse::internal_default_instance());
}
void UserMapService::unsafe_arena_set_allocated_req(
    ::sg::UserMapService_MapRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserMapService.req)
}
void UserMapService::unsafe_arena_set_allocated_resp(
    ::sg::UserMapService_MapResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserMapService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMapService::kReqFieldNumber;
const int UserMapService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMapService::UserMapService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_UserMapService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserMapService)
}
UserMapService::UserMapService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_UserMapService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserMapService)
}
UserMapService::UserMapService(const UserMapService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserMapService_MapRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserMapService_MapResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserMapService)
}

void UserMapService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserMapService::~UserMapService() {
  // @@protoc_insertion_point(destructor:sg.UserMapService)
  SharedDtor();
}

void UserMapService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserMapService::ArenaDtor(void* object) {
  UserMapService* _this = reinterpret_cast< UserMapService* >(object);
  (void)_this;
}
void UserMapService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserMapService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserMapService::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserMapService& UserMapService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_UserMapService.base);
  return *internal_default_instance();
}


void UserMapService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserMapService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserMapService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserMapService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserMapService.MapRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserMapService.MapResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserMapService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserMapService)
  return false;
#undef DO_
}

void UserMapService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserMapService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserMapService.MapRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserMapService.MapResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserMapService)
}

::google::protobuf::uint8* UserMapService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserMapService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserMapService.MapRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserMapService.MapResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserMapService)
  return target;
}

size_t UserMapService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserMapService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserMapService.MapRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserMapService.MapResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMapService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserMapService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMapService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMapService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserMapService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserMapService)
    MergeFrom(*source);
  }
}

void UserMapService::MergeFrom(const UserMapService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserMapService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserMapService_MapRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserMapService_MapResponse::MergeFrom(from.resp());
    }
  }
}

void UserMapService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserMapService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMapService::CopyFrom(const UserMapService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserMapService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMapService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserMapService::Swap(UserMapService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserMapService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserMapService::UnsafeArenaSwap(UserMapService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserMapService::InternalSwap(UserMapService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserMapService::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapEntryStateNotify::InitAsDefaultInstance() {
  ::sg::_MapEntryStateNotify_default_instance_._instance.get_mutable()->entry_list_ = const_cast< ::sg::MapEntryList*>(
      ::sg::MapEntryList::internal_default_instance());
}
void MapEntryStateNotify::unsafe_arena_set_allocated_entry_list(
    ::sg::MapEntryList* entry_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete entry_list_;
  }
  entry_list_ = entry_list;
  if (entry_list) {
    set_has_entry_list();
  } else {
    clear_has_entry_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.MapEntryStateNotify.entry_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapEntryStateNotify::kEntryListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapEntryStateNotify::MapEntryStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_MapEntryStateNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MapEntryStateNotify)
}
MapEntryStateNotify::MapEntryStateNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapEntryStateNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MapEntryStateNotify)
}
MapEntryStateNotify::MapEntryStateNotify(const MapEntryStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entry_list()) {
    entry_list_ = new ::sg::MapEntryList(*from.entry_list_);
  } else {
    entry_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.MapEntryStateNotify)
}

void MapEntryStateNotify::SharedCtor() {
  entry_list_ = NULL;
}

MapEntryStateNotify::~MapEntryStateNotify() {
  // @@protoc_insertion_point(destructor:sg.MapEntryStateNotify)
  SharedDtor();
}

void MapEntryStateNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete entry_list_;
}

void MapEntryStateNotify::ArenaDtor(void* object) {
  MapEntryStateNotify* _this = reinterpret_cast< MapEntryStateNotify* >(object);
  (void)_this;
}
void MapEntryStateNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapEntryStateNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapEntryStateNotify::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapEntryStateNotify& MapEntryStateNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_MapEntryStateNotify.base);
  return *internal_default_instance();
}


void MapEntryStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MapEntryStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entry_list_ != NULL);
    entry_list_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapEntryStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MapEntryStateNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.MapEntryList entry_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entry_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MapEntryStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MapEntryStateNotify)
  return false;
#undef DO_
}

void MapEntryStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MapEntryStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MapEntryList entry_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_entry_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MapEntryStateNotify)
}

::google::protobuf::uint8* MapEntryStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MapEntryStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.MapEntryList entry_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_entry_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MapEntryStateNotify)
  return target;
}

size_t MapEntryStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MapEntryStateNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.MapEntryList entry_list = 1;
  if (has_entry_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *entry_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapEntryStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MapEntryStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MapEntryStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapEntryStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MapEntryStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MapEntryStateNotify)
    MergeFrom(*source);
  }
}

void MapEntryStateNotify::MergeFrom(const MapEntryStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MapEntryStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entry_list()) {
    mutable_entry_list()->::sg::MapEntryList::MergeFrom(from.entry_list());
  }
}

void MapEntryStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MapEntryStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEntryStateNotify::CopyFrom(const MapEntryStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MapEntryStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEntryStateNotify::IsInitialized() const {
  if (has_entry_list()) {
    if (!this->entry_list_->IsInitialized()) return false;
  }
  return true;
}

void MapEntryStateNotify::Swap(MapEntryStateNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapEntryStateNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MapEntryStateNotify::UnsafeArenaSwap(MapEntryStateNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapEntryStateNotify::InternalSwap(MapEntryStateNotify* other) {
  using std::swap;
  swap(entry_list_, other->entry_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapEntryStateNotify::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIslandStateNotify::InitAsDefaultInstance() {
  ::sg::_WildIslandStateNotify_default_instance_._instance.get_mutable()->island_list_ = const_cast< ::sg::WildIslandList*>(
      ::sg::WildIslandList::internal_default_instance());
}
void WildIslandStateNotify::unsafe_arena_set_allocated_island_list(
    ::sg::WildIslandList* island_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete island_list_;
  }
  island_list_ = island_list;
  if (island_list) {
    set_has_island_list();
  } else {
    clear_has_island_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.WildIslandStateNotify.island_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIslandStateNotify::kIslandListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIslandStateNotify::WildIslandStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserMap_2eproto::scc_info_WildIslandStateNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.WildIslandStateNotify)
}
WildIslandStateNotify::WildIslandStateNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandStateNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.WildIslandStateNotify)
}
WildIslandStateNotify::WildIslandStateNotify(const WildIslandStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_island_list()) {
    island_list_ = new ::sg::WildIslandList(*from.island_list_);
  } else {
    island_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.WildIslandStateNotify)
}

void WildIslandStateNotify::SharedCtor() {
  island_list_ = NULL;
}

WildIslandStateNotify::~WildIslandStateNotify() {
  // @@protoc_insertion_point(destructor:sg.WildIslandStateNotify)
  SharedDtor();
}

void WildIslandStateNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete island_list_;
}

void WildIslandStateNotify::ArenaDtor(void* object) {
  WildIslandStateNotify* _this = reinterpret_cast< WildIslandStateNotify* >(object);
  (void)_this;
}
void WildIslandStateNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIslandStateNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIslandStateNotify::descriptor() {
  ::protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIslandStateNotify& WildIslandStateNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserMap_2eproto::scc_info_WildIslandStateNotify.base);
  return *internal_default_instance();
}


void WildIslandStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.WildIslandStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(island_list_ != NULL);
    island_list_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIslandStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.WildIslandStateNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.WildIslandList island_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_island_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.WildIslandStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.WildIslandStateNotify)
  return false;
#undef DO_
}

void WildIslandStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.WildIslandStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.WildIslandList island_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_island_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.WildIslandStateNotify)
}

::google::protobuf::uint8* WildIslandStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.WildIslandStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.WildIslandList island_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_island_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.WildIslandStateNotify)
  return target;
}

size_t WildIslandStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.WildIslandStateNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.WildIslandList island_list = 1;
  if (has_island_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *island_list_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIslandStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.WildIslandStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIslandStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIslandStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.WildIslandStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.WildIslandStateNotify)
    MergeFrom(*source);
  }
}

void WildIslandStateNotify::MergeFrom(const WildIslandStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.WildIslandStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_island_list()) {
    mutable_island_list()->::sg::WildIslandList::MergeFrom(from.island_list());
  }
}

void WildIslandStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.WildIslandStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIslandStateNotify::CopyFrom(const WildIslandStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.WildIslandStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIslandStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_island_list()) {
    if (!this->island_list_->IsInitialized()) return false;
  }
  return true;
}

void WildIslandStateNotify::Swap(WildIslandStateNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIslandStateNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIslandStateNotify::UnsafeArenaSwap(WildIslandStateNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIslandStateNotify::InternalSwap(WildIslandStateNotify* other) {
  using std::swap;
  swap(island_list_, other->island_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIslandStateNotify::GetMetadata() const {
  protobuf_UserMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MapArea* Arena::CreateMaybeMessage< ::sg::MapArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MapArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MapAreaList* Arena::CreateMaybeMessage< ::sg::MapAreaList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MapAreaList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PirateShip* Arena::CreateMaybeMessage< ::sg::PirateShip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PirateShip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PlayerShip* Arena::CreateMaybeMessage< ::sg::PlayerShip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PlayerShip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MapEntry* Arena::CreateMaybeMessage< ::sg::MapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MapEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MapEntryList* Arena::CreateMaybeMessage< ::sg::MapEntryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MapEntryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::OccupierData* Arena::CreateMaybeMessage< ::sg::OccupierData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::OccupierData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIsland_Workshop* Arena::CreateMaybeMessage< ::sg::WildIsland_Workshop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIsland_Workshop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIsland_WorkshopOption* Arena::CreateMaybeMessage< ::sg::WildIsland_WorkshopOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIsland_WorkshopOption >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIsland* Arena::CreateMaybeMessage< ::sg::WildIsland >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIsland >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIslandList* Arena::CreateMaybeMessage< ::sg::WildIslandList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIslandList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIslandHarvestLog_HarvestItem* Arena::CreateMaybeMessage< ::sg::WildIslandHarvestLog_HarvestItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIslandHarvestLog_HarvestItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIslandHarvestLog_HarvestItemList* Arena::CreateMaybeMessage< ::sg::WildIslandHarvestLog_HarvestItemList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIslandHarvestLog_HarvestItemList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIslandHarvestLog_HarvestLog* Arena::CreateMaybeMessage< ::sg::WildIslandHarvestLog_HarvestLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIslandHarvestLog_HarvestLog >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIslandHarvestLog_HarvestLogList* Arena::CreateMaybeMessage< ::sg::WildIslandHarvestLog_HarvestLogList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIslandHarvestLog_HarvestLogList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIslandHarvestLog* Arena::CreateMaybeMessage< ::sg::WildIslandHarvestLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIslandHarvestLog >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HarvestTime* Arena::CreateMaybeMessage< ::sg::HarvestTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HarvestTime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GarrisonRoom* Arena::CreateMaybeMessage< ::sg::GarrisonRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GarrisonRoom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserMapService_MapRequest* Arena::CreateMaybeMessage< ::sg::UserMapService_MapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserMapService_MapRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserMapService_MapResponse* Arena::CreateMaybeMessage< ::sg::UserMapService_MapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserMapService_MapResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserMapService* Arena::CreateMaybeMessage< ::sg::UserMapService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserMapService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MapEntryStateNotify* Arena::CreateMaybeMessage< ::sg::MapEntryStateNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MapEntryStateNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::WildIslandStateNotify* Arena::CreateMaybeMessage< ::sg::WildIslandStateNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::WildIslandStateNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
