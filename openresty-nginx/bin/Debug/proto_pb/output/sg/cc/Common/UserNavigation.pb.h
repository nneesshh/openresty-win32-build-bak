// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserNavigation.proto

#ifndef PROTOBUF_INCLUDED_UserNavigation_2eproto
#define PROTOBUF_INCLUDED_UserNavigation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_UserNavigation_2eproto 

namespace protobuf_UserNavigation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_UserNavigation_2eproto
namespace sg {
class FastReachTicketNotify;
class FastReachTicketNotifyDefaultTypeInternal;
extern FastReachTicketNotifyDefaultTypeInternal _FastReachTicketNotify_default_instance_;
class NavigationEvent;
class NavigationEventDefaultTypeInternal;
extern NavigationEventDefaultTypeInternal _NavigationEvent_default_instance_;
class NavigationEventIgnoredNotify;
class NavigationEventIgnoredNotifyDefaultTypeInternal;
extern NavigationEventIgnoredNotifyDefaultTypeInternal _NavigationEventIgnoredNotify_default_instance_;
class NavigationRecord;
class NavigationRecordDefaultTypeInternal;
extern NavigationRecordDefaultTypeInternal _NavigationRecord_default_instance_;
class NavigationState;
class NavigationStateDefaultTypeInternal;
extern NavigationStateDefaultTypeInternal _NavigationState_default_instance_;
class UserNavigationService;
class UserNavigationServiceDefaultTypeInternal;
extern UserNavigationServiceDefaultTypeInternal _UserNavigationService_default_instance_;
class UserNavigationService_UserNavigationRequest;
class UserNavigationService_UserNavigationRequestDefaultTypeInternal;
extern UserNavigationService_UserNavigationRequestDefaultTypeInternal _UserNavigationService_UserNavigationRequest_default_instance_;
class UserNavigationService_UserNavigationResponse;
class UserNavigationService_UserNavigationResponseDefaultTypeInternal;
extern UserNavigationService_UserNavigationResponseDefaultTypeInternal _UserNavigationService_UserNavigationResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::FastReachTicketNotify* Arena::CreateMaybeMessage<::sg::FastReachTicketNotify>(Arena*);
template<> ::sg::NavigationEvent* Arena::CreateMaybeMessage<::sg::NavigationEvent>(Arena*);
template<> ::sg::NavigationEventIgnoredNotify* Arena::CreateMaybeMessage<::sg::NavigationEventIgnoredNotify>(Arena*);
template<> ::sg::NavigationRecord* Arena::CreateMaybeMessage<::sg::NavigationRecord>(Arena*);
template<> ::sg::NavigationState* Arena::CreateMaybeMessage<::sg::NavigationState>(Arena*);
template<> ::sg::UserNavigationService* Arena::CreateMaybeMessage<::sg::UserNavigationService>(Arena*);
template<> ::sg::UserNavigationService_UserNavigationRequest* Arena::CreateMaybeMessage<::sg::UserNavigationService_UserNavigationRequest>(Arena*);
template<> ::sg::UserNavigationService_UserNavigationResponse* Arena::CreateMaybeMessage<::sg::UserNavigationService_UserNavigationResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum UserNavigationService_NAVIGATION_CMD {
  UserNavigationService_NAVIGATION_CMD_QUERY = 1,
  UserNavigationService_NAVIGATION_CMD_START_OFF = 2,
  UserNavigationService_NAVIGATION_CMD_RECORD = 3,
  UserNavigationService_NAVIGATION_CMD_IGNORE_EVENT = 4,
  UserNavigationService_NAVIGATION_CMD_FAST_REACH = 5
};
bool UserNavigationService_NAVIGATION_CMD_IsValid(int value);
const UserNavigationService_NAVIGATION_CMD UserNavigationService_NAVIGATION_CMD_NAVIGATION_CMD_MIN = UserNavigationService_NAVIGATION_CMD_QUERY;
const UserNavigationService_NAVIGATION_CMD UserNavigationService_NAVIGATION_CMD_NAVIGATION_CMD_MAX = UserNavigationService_NAVIGATION_CMD_FAST_REACH;
const int UserNavigationService_NAVIGATION_CMD_NAVIGATION_CMD_ARRAYSIZE = UserNavigationService_NAVIGATION_CMD_NAVIGATION_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserNavigationService_NAVIGATION_CMD_descriptor();
inline const ::std::string& UserNavigationService_NAVIGATION_CMD_Name(UserNavigationService_NAVIGATION_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserNavigationService_NAVIGATION_CMD_descriptor(), value);
}
inline bool UserNavigationService_NAVIGATION_CMD_Parse(
    const ::std::string& name, UserNavigationService_NAVIGATION_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserNavigationService_NAVIGATION_CMD>(
    UserNavigationService_NAVIGATION_CMD_descriptor(), name, value);
}
// ===================================================================

class NavigationEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.NavigationEvent) */ {
 public:
  NavigationEvent();
  virtual ~NavigationEvent();

  NavigationEvent(const NavigationEvent& from);

  inline NavigationEvent& operator=(const NavigationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigationEvent(NavigationEvent&& from) noexcept
    : NavigationEvent() {
    *this = ::std::move(from);
  }

  inline NavigationEvent& operator=(NavigationEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationEvent* internal_default_instance() {
    return reinterpret_cast<const NavigationEvent*>(
               &_NavigationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(NavigationEvent* other);
  void Swap(NavigationEvent* other);
  friend void swap(NavigationEvent& a, NavigationEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigationEvent* New() const final {
    return CreateMaybeMessage<NavigationEvent>(NULL);
  }

  NavigationEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavigationEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavigationEvent& from);
  void MergeFrom(const NavigationEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationEvent* other);
  protected:
  explicit NavigationEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 pos_x = 2;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 2;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // required int32 pos_y = 3;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 3;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // required int32 duration = 4;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 4;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.NavigationEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();
  void set_has_duration();
  void clear_has_duration();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_UserNavigation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NavigationState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.NavigationState) */ {
 public:
  NavigationState();
  virtual ~NavigationState();

  NavigationState(const NavigationState& from);

  inline NavigationState& operator=(const NavigationState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigationState(NavigationState&& from) noexcept
    : NavigationState() {
    *this = ::std::move(from);
  }

  inline NavigationState& operator=(NavigationState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationState* internal_default_instance() {
    return reinterpret_cast<const NavigationState*>(
               &_NavigationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(NavigationState* other);
  void Swap(NavigationState* other);
  friend void swap(NavigationState& a, NavigationState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigationState* New() const final {
    return CreateMaybeMessage<NavigationState>(NULL);
  }

  NavigationState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavigationState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavigationState& from);
  void MergeFrom(const NavigationState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationState* other);
  protected:
  explicit NavigationState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 origin = 2;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 2;
  ::google::protobuf::uint64 origin() const;
  void set_origin(::google::protobuf::uint64 value);

  // required int32 state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 fast_reach_ticket = 4;
  bool has_fast_reach_ticket() const;
  void clear_fast_reach_ticket();
  static const int kFastReachTicketFieldNumber = 4;
  ::google::protobuf::int32 fast_reach_ticket() const;
  void set_fast_reach_ticket(::google::protobuf::int32 value);

  // required uint64 destination = 3;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 3;
  ::google::protobuf::uint64 destination() const;
  void set_destination(::google::protobuf::uint64 value);

  // optional sfixed64 ticket_timestamp = 5;
  bool has_ticket_timestamp() const;
  void clear_ticket_timestamp();
  static const int kTicketTimestampFieldNumber = 5;
  ::google::protobuf::int64 ticket_timestamp() const;
  void set_ticket_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sg.NavigationState)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_origin();
  void clear_has_origin();
  void set_has_destination();
  void clear_has_destination();
  void set_has_fast_reach_ticket();
  void clear_has_fast_reach_ticket();
  void set_has_ticket_timestamp();
  void clear_has_ticket_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 origin_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 fast_reach_ticket_;
  ::google::protobuf::uint64 destination_;
  ::google::protobuf::int64 ticket_timestamp_;
  friend struct ::protobuf_UserNavigation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NavigationRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.NavigationRecord) */ {
 public:
  NavigationRecord();
  virtual ~NavigationRecord();

  NavigationRecord(const NavigationRecord& from);

  inline NavigationRecord& operator=(const NavigationRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigationRecord(NavigationRecord&& from) noexcept
    : NavigationRecord() {
    *this = ::std::move(from);
  }

  inline NavigationRecord& operator=(NavigationRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationRecord* internal_default_instance() {
    return reinterpret_cast<const NavigationRecord*>(
               &_NavigationRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(NavigationRecord* other);
  void Swap(NavigationRecord* other);
  friend void swap(NavigationRecord& a, NavigationRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigationRecord* New() const final {
    return CreateMaybeMessage<NavigationRecord>(NULL);
  }

  NavigationRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavigationRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavigationRecord& from);
  void MergeFrom(const NavigationRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationRecord* other);
  protected:
  explicit NavigationRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed64 recently_visit_time = 2;
  bool has_recently_visit_time() const;
  void clear_recently_visit_time();
  static const int kRecentlyVisitTimeFieldNumber = 2;
  ::google::protobuf::int64 recently_visit_time() const;
  void set_recently_visit_time(::google::protobuf::int64 value);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bool isnew = 3;
  bool has_isnew() const;
  void clear_isnew();
  static const int kIsnewFieldNumber = 3;
  bool isnew() const;
  void set_isnew(bool value);

  // @@protoc_insertion_point(class_scope:sg.NavigationRecord)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_recently_visit_time();
  void clear_has_recently_visit_time();
  void set_has_isnew();
  void clear_has_isnew();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 recently_visit_time_;
  ::google::protobuf::int32 id_;
  bool isnew_;
  friend struct ::protobuf_UserNavigation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNavigationService_UserNavigationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserNavigationService.UserNavigationRequest) */ {
 public:
  UserNavigationService_UserNavigationRequest();
  virtual ~UserNavigationService_UserNavigationRequest();

  UserNavigationService_UserNavigationRequest(const UserNavigationService_UserNavigationRequest& from);

  inline UserNavigationService_UserNavigationRequest& operator=(const UserNavigationService_UserNavigationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNavigationService_UserNavigationRequest(UserNavigationService_UserNavigationRequest&& from) noexcept
    : UserNavigationService_UserNavigationRequest() {
    *this = ::std::move(from);
  }

  inline UserNavigationService_UserNavigationRequest& operator=(UserNavigationService_UserNavigationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNavigationService_UserNavigationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNavigationService_UserNavigationRequest* internal_default_instance() {
    return reinterpret_cast<const UserNavigationService_UserNavigationRequest*>(
               &_UserNavigationService_UserNavigationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UserNavigationService_UserNavigationRequest* other);
  void Swap(UserNavigationService_UserNavigationRequest* other);
  friend void swap(UserNavigationService_UserNavigationRequest& a, UserNavigationService_UserNavigationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNavigationService_UserNavigationRequest* New() const final {
    return CreateMaybeMessage<UserNavigationService_UserNavigationRequest>(NULL);
  }

  UserNavigationService_UserNavigationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNavigationService_UserNavigationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNavigationService_UserNavigationRequest& from);
  void MergeFrom(const UserNavigationService_UserNavigationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNavigationService_UserNavigationRequest* other);
  protected:
  explicit UserNavigationService_UserNavigationRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  ::google::protobuf::uint64 destination() const;
  void set_destination(::google::protobuf::uint64 value);

  // optional int32 pos_x = 3;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 3;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // optional int32 pos_y = 4;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 4;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // required .sg.UserNavigationService.NAVIGATION_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserNavigationService_NAVIGATION_CMD cmd() const;
  void set_cmd(::sg::UserNavigationService_NAVIGATION_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserNavigationService.UserNavigationRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_destination();
  void clear_has_destination();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 destination_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  int cmd_;
  friend struct ::protobuf_UserNavigation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNavigationService_UserNavigationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserNavigationService.UserNavigationResponse) */ {
 public:
  UserNavigationService_UserNavigationResponse();
  virtual ~UserNavigationService_UserNavigationResponse();

  UserNavigationService_UserNavigationResponse(const UserNavigationService_UserNavigationResponse& from);

  inline UserNavigationService_UserNavigationResponse& operator=(const UserNavigationService_UserNavigationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNavigationService_UserNavigationResponse(UserNavigationService_UserNavigationResponse&& from) noexcept
    : UserNavigationService_UserNavigationResponse() {
    *this = ::std::move(from);
  }

  inline UserNavigationService_UserNavigationResponse& operator=(UserNavigationService_UserNavigationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNavigationService_UserNavigationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNavigationService_UserNavigationResponse* internal_default_instance() {
    return reinterpret_cast<const UserNavigationService_UserNavigationResponse*>(
               &_UserNavigationService_UserNavigationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(UserNavigationService_UserNavigationResponse* other);
  void Swap(UserNavigationService_UserNavigationResponse* other);
  friend void swap(UserNavigationService_UserNavigationResponse& a, UserNavigationService_UserNavigationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNavigationService_UserNavigationResponse* New() const final {
    return CreateMaybeMessage<UserNavigationService_UserNavigationResponse>(NULL);
  }

  UserNavigationService_UserNavigationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNavigationService_UserNavigationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNavigationService_UserNavigationResponse& from);
  void MergeFrom(const UserNavigationService_UserNavigationResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNavigationService_UserNavigationResponse* other);
  protected:
  explicit UserNavigationService_UserNavigationResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 path = 3;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 3;
  ::google::protobuf::int32 path(int index) const;
  void set_path(int index, ::google::protobuf::int32 value);
  void add_path(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      path() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_path();

  // repeated .sg.NavigationRecord record = 4;
  int record_size() const;
  void clear_record();
  static const int kRecordFieldNumber = 4;
  ::sg::NavigationRecord* mutable_record(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::NavigationRecord >*
      mutable_record();
  const ::sg::NavigationRecord& record(int index) const;
  ::sg::NavigationRecord* add_record();
  const ::google::protobuf::RepeatedPtrField< ::sg::NavigationRecord >&
      record() const;

  // optional .sg.NavigationState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  private:
  const ::sg::NavigationState& _internal_state() const;
  public:
  const ::sg::NavigationState& state() const;
  ::sg::NavigationState* release_state();
  ::sg::NavigationState* mutable_state();
  void set_allocated_state(::sg::NavigationState* state);
  void unsafe_arena_set_allocated_state(
      ::sg::NavigationState* state);
  ::sg::NavigationState* unsafe_arena_release_state();

  // optional .sg.NavigationEvent now_event = 6;
  bool has_now_event() const;
  void clear_now_event();
  static const int kNowEventFieldNumber = 6;
  private:
  const ::sg::NavigationEvent& _internal_now_event() const;
  public:
  const ::sg::NavigationEvent& now_event() const;
  ::sg::NavigationEvent* release_now_event();
  ::sg::NavigationEvent* mutable_now_event();
  void set_allocated_now_event(::sg::NavigationEvent* now_event);
  void unsafe_arena_set_allocated_now_event(
      ::sg::NavigationEvent* now_event);
  ::sg::NavigationEvent* unsafe_arena_release_now_event();

  // optional .sg.Reward lose = 7;
  bool has_lose() const;
  void clear_lose();
  static const int kLoseFieldNumber = 7;
  private:
  const ::sg::Reward& _internal_lose() const;
  public:
  const ::sg::Reward& lose() const;
  ::sg::Reward* release_lose();
  ::sg::Reward* mutable_lose();
  void set_allocated_lose(::sg::Reward* lose);
  void unsafe_arena_set_allocated_lose(
      ::sg::Reward* lose);
  ::sg::Reward* unsafe_arena_release_lose();

  // optional .sg.UserInfo player = 8;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 8;
  private:
  const ::sg::UserInfo& _internal_player() const;
  public:
  const ::sg::UserInfo& player() const;
  ::sg::UserInfo* release_player();
  ::sg::UserInfo* mutable_player();
  void set_allocated_player(::sg::UserInfo* player);
  void unsafe_arena_set_allocated_player(
      ::sg::UserInfo* player);
  ::sg::UserInfo* unsafe_arena_release_player();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserNavigationService.UserNavigationResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_state();
  void clear_has_state();
  void set_has_now_event();
  void clear_has_now_event();
  void set_has_lose();
  void clear_has_lose();
  void set_has_player();
  void clear_has_player();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > path_;
  ::google::protobuf::RepeatedPtrField< ::sg::NavigationRecord > record_;
  ::sg::NavigationState* state_;
  ::sg::NavigationEvent* now_event_;
  ::sg::Reward* lose_;
  ::sg::UserInfo* player_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_UserNavigation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNavigationService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserNavigationService) */ {
 public:
  UserNavigationService();
  virtual ~UserNavigationService();

  UserNavigationService(const UserNavigationService& from);

  inline UserNavigationService& operator=(const UserNavigationService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNavigationService(UserNavigationService&& from) noexcept
    : UserNavigationService() {
    *this = ::std::move(from);
  }

  inline UserNavigationService& operator=(UserNavigationService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNavigationService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNavigationService* internal_default_instance() {
    return reinterpret_cast<const UserNavigationService*>(
               &_UserNavigationService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(UserNavigationService* other);
  void Swap(UserNavigationService* other);
  friend void swap(UserNavigationService& a, UserNavigationService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNavigationService* New() const final {
    return CreateMaybeMessage<UserNavigationService>(NULL);
  }

  UserNavigationService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNavigationService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNavigationService& from);
  void MergeFrom(const UserNavigationService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNavigationService* other);
  protected:
  explicit UserNavigationService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserNavigationService_UserNavigationRequest UserNavigationRequest;
  typedef UserNavigationService_UserNavigationResponse UserNavigationResponse;

  typedef UserNavigationService_NAVIGATION_CMD NAVIGATION_CMD;
  static const NAVIGATION_CMD QUERY =
    UserNavigationService_NAVIGATION_CMD_QUERY;
  static const NAVIGATION_CMD START_OFF =
    UserNavigationService_NAVIGATION_CMD_START_OFF;
  static const NAVIGATION_CMD RECORD =
    UserNavigationService_NAVIGATION_CMD_RECORD;
  static const NAVIGATION_CMD IGNORE_EVENT =
    UserNavigationService_NAVIGATION_CMD_IGNORE_EVENT;
  static const NAVIGATION_CMD FAST_REACH =
    UserNavigationService_NAVIGATION_CMD_FAST_REACH;
  static inline bool NAVIGATION_CMD_IsValid(int value) {
    return UserNavigationService_NAVIGATION_CMD_IsValid(value);
  }
  static const NAVIGATION_CMD NAVIGATION_CMD_MIN =
    UserNavigationService_NAVIGATION_CMD_NAVIGATION_CMD_MIN;
  static const NAVIGATION_CMD NAVIGATION_CMD_MAX =
    UserNavigationService_NAVIGATION_CMD_NAVIGATION_CMD_MAX;
  static const int NAVIGATION_CMD_ARRAYSIZE =
    UserNavigationService_NAVIGATION_CMD_NAVIGATION_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NAVIGATION_CMD_descriptor() {
    return UserNavigationService_NAVIGATION_CMD_descriptor();
  }
  static inline const ::std::string& NAVIGATION_CMD_Name(NAVIGATION_CMD value) {
    return UserNavigationService_NAVIGATION_CMD_Name(value);
  }
  static inline bool NAVIGATION_CMD_Parse(const ::std::string& name,
      NAVIGATION_CMD* value) {
    return UserNavigationService_NAVIGATION_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserNavigationService.UserNavigationRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserNavigationService_UserNavigationRequest& _internal_req() const;
  public:
  const ::sg::UserNavigationService_UserNavigationRequest& req() const;
  ::sg::UserNavigationService_UserNavigationRequest* release_req();
  ::sg::UserNavigationService_UserNavigationRequest* mutable_req();
  void set_allocated_req(::sg::UserNavigationService_UserNavigationRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserNavigationService_UserNavigationRequest* req);
  ::sg::UserNavigationService_UserNavigationRequest* unsafe_arena_release_req();

  // optional .sg.UserNavigationService.UserNavigationResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserNavigationService_UserNavigationResponse& _internal_resp() const;
  public:
  const ::sg::UserNavigationService_UserNavigationResponse& resp() const;
  ::sg::UserNavigationService_UserNavigationResponse* release_resp();
  ::sg::UserNavigationService_UserNavigationResponse* mutable_resp();
  void set_allocated_resp(::sg::UserNavigationService_UserNavigationResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserNavigationService_UserNavigationResponse* resp);
  ::sg::UserNavigationService_UserNavigationResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserNavigationService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserNavigationService_UserNavigationRequest* req_;
  ::sg::UserNavigationService_UserNavigationResponse* resp_;
  friend struct ::protobuf_UserNavigation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NavigationEventIgnoredNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.NavigationEventIgnoredNotify) */ {
 public:
  NavigationEventIgnoredNotify();
  virtual ~NavigationEventIgnoredNotify();

  NavigationEventIgnoredNotify(const NavigationEventIgnoredNotify& from);

  inline NavigationEventIgnoredNotify& operator=(const NavigationEventIgnoredNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigationEventIgnoredNotify(NavigationEventIgnoredNotify&& from) noexcept
    : NavigationEventIgnoredNotify() {
    *this = ::std::move(from);
  }

  inline NavigationEventIgnoredNotify& operator=(NavigationEventIgnoredNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationEventIgnoredNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationEventIgnoredNotify* internal_default_instance() {
    return reinterpret_cast<const NavigationEventIgnoredNotify*>(
               &_NavigationEventIgnoredNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(NavigationEventIgnoredNotify* other);
  void Swap(NavigationEventIgnoredNotify* other);
  friend void swap(NavigationEventIgnoredNotify& a, NavigationEventIgnoredNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigationEventIgnoredNotify* New() const final {
    return CreateMaybeMessage<NavigationEventIgnoredNotify>(NULL);
  }

  NavigationEventIgnoredNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavigationEventIgnoredNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavigationEventIgnoredNotify& from);
  void MergeFrom(const NavigationEventIgnoredNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationEventIgnoredNotify* other);
  protected:
  explicit NavigationEventIgnoredNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.NavigationEvent event = 1;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  private:
  const ::sg::NavigationEvent& _internal_event() const;
  public:
  const ::sg::NavigationEvent& event() const;
  ::sg::NavigationEvent* release_event();
  ::sg::NavigationEvent* mutable_event();
  void set_allocated_event(::sg::NavigationEvent* event);
  void unsafe_arena_set_allocated_event(
      ::sg::NavigationEvent* event);
  ::sg::NavigationEvent* unsafe_arena_release_event();

  // optional .sg.Reward lose = 2;
  bool has_lose() const;
  void clear_lose();
  static const int kLoseFieldNumber = 2;
  private:
  const ::sg::Reward& _internal_lose() const;
  public:
  const ::sg::Reward& lose() const;
  ::sg::Reward* release_lose();
  ::sg::Reward* mutable_lose();
  void set_allocated_lose(::sg::Reward* lose);
  void unsafe_arena_set_allocated_lose(
      ::sg::Reward* lose);
  ::sg::Reward* unsafe_arena_release_lose();

  // @@protoc_insertion_point(class_scope:sg.NavigationEventIgnoredNotify)
 private:
  void set_has_event();
  void clear_has_event();
  void set_has_lose();
  void clear_has_lose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::NavigationEvent* event_;
  ::sg::Reward* lose_;
  friend struct ::protobuf_UserNavigation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FastReachTicketNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FastReachTicketNotify) */ {
 public:
  FastReachTicketNotify();
  virtual ~FastReachTicketNotify();

  FastReachTicketNotify(const FastReachTicketNotify& from);

  inline FastReachTicketNotify& operator=(const FastReachTicketNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FastReachTicketNotify(FastReachTicketNotify&& from) noexcept
    : FastReachTicketNotify() {
    *this = ::std::move(from);
  }

  inline FastReachTicketNotify& operator=(FastReachTicketNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FastReachTicketNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastReachTicketNotify* internal_default_instance() {
    return reinterpret_cast<const FastReachTicketNotify*>(
               &_FastReachTicketNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(FastReachTicketNotify* other);
  void Swap(FastReachTicketNotify* other);
  friend void swap(FastReachTicketNotify& a, FastReachTicketNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FastReachTicketNotify* New() const final {
    return CreateMaybeMessage<FastReachTicketNotify>(NULL);
  }

  FastReachTicketNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FastReachTicketNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FastReachTicketNotify& from);
  void MergeFrom(const FastReachTicketNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastReachTicketNotify* other);
  protected:
  explicit FastReachTicketNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fast_reach_ticket_num = 1;
  bool has_fast_reach_ticket_num() const;
  void clear_fast_reach_ticket_num();
  static const int kFastReachTicketNumFieldNumber = 1;
  ::google::protobuf::int32 fast_reach_ticket_num() const;
  void set_fast_reach_ticket_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.FastReachTicketNotify)
 private:
  void set_has_fast_reach_ticket_num();
  void clear_has_fast_reach_ticket_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 fast_reach_ticket_num_;
  friend struct ::protobuf_UserNavigation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NavigationEvent

// required int32 id = 1;
inline bool NavigationEvent::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationEvent::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NavigationEvent::id() const {
  // @@protoc_insertion_point(field_get:sg.NavigationEvent.id)
  return id_;
}
inline void NavigationEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationEvent.id)
}

// required int32 pos_x = 2;
inline bool NavigationEvent::has_pos_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavigationEvent::set_has_pos_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavigationEvent::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavigationEvent::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 NavigationEvent::pos_x() const {
  // @@protoc_insertion_point(field_get:sg.NavigationEvent.pos_x)
  return pos_x_;
}
inline void NavigationEvent::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationEvent.pos_x)
}

// required int32 pos_y = 3;
inline bool NavigationEvent::has_pos_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NavigationEvent::set_has_pos_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NavigationEvent::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NavigationEvent::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 NavigationEvent::pos_y() const {
  // @@protoc_insertion_point(field_get:sg.NavigationEvent.pos_y)
  return pos_y_;
}
inline void NavigationEvent::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationEvent.pos_y)
}

// required int32 duration = 4;
inline bool NavigationEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NavigationEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NavigationEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NavigationEvent::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 NavigationEvent::duration() const {
  // @@protoc_insertion_point(field_get:sg.NavigationEvent.duration)
  return duration_;
}
inline void NavigationEvent::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationEvent.duration)
}

// optional int32 state = 5;
inline bool NavigationEvent::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NavigationEvent::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NavigationEvent::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NavigationEvent::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 NavigationEvent::state() const {
  // @@protoc_insertion_point(field_get:sg.NavigationEvent.state)
  return state_;
}
inline void NavigationEvent::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationEvent.state)
}

// -------------------------------------------------------------------

// NavigationState

// required int32 state = 1;
inline bool NavigationState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavigationState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavigationState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavigationState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 NavigationState::state() const {
  // @@protoc_insertion_point(field_get:sg.NavigationState.state)
  return state_;
}
inline void NavigationState::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationState.state)
}

// required uint64 origin = 2;
inline bool NavigationState::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationState::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationState::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationState::clear_origin() {
  origin_ = GOOGLE_ULONGLONG(0);
  clear_has_origin();
}
inline ::google::protobuf::uint64 NavigationState::origin() const {
  // @@protoc_insertion_point(field_get:sg.NavigationState.origin)
  return origin_;
}
inline void NavigationState::set_origin(::google::protobuf::uint64 value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationState.origin)
}

// required uint64 destination = 3;
inline bool NavigationState::has_destination() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NavigationState::set_has_destination() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NavigationState::clear_has_destination() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NavigationState::clear_destination() {
  destination_ = GOOGLE_ULONGLONG(0);
  clear_has_destination();
}
inline ::google::protobuf::uint64 NavigationState::destination() const {
  // @@protoc_insertion_point(field_get:sg.NavigationState.destination)
  return destination_;
}
inline void NavigationState::set_destination(::google::protobuf::uint64 value) {
  set_has_destination();
  destination_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationState.destination)
}

// optional int32 fast_reach_ticket = 4;
inline bool NavigationState::has_fast_reach_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NavigationState::set_has_fast_reach_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NavigationState::clear_has_fast_reach_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NavigationState::clear_fast_reach_ticket() {
  fast_reach_ticket_ = 0;
  clear_has_fast_reach_ticket();
}
inline ::google::protobuf::int32 NavigationState::fast_reach_ticket() const {
  // @@protoc_insertion_point(field_get:sg.NavigationState.fast_reach_ticket)
  return fast_reach_ticket_;
}
inline void NavigationState::set_fast_reach_ticket(::google::protobuf::int32 value) {
  set_has_fast_reach_ticket();
  fast_reach_ticket_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationState.fast_reach_ticket)
}

// optional sfixed64 ticket_timestamp = 5;
inline bool NavigationState::has_ticket_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NavigationState::set_has_ticket_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NavigationState::clear_has_ticket_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NavigationState::clear_ticket_timestamp() {
  ticket_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_ticket_timestamp();
}
inline ::google::protobuf::int64 NavigationState::ticket_timestamp() const {
  // @@protoc_insertion_point(field_get:sg.NavigationState.ticket_timestamp)
  return ticket_timestamp_;
}
inline void NavigationState::set_ticket_timestamp(::google::protobuf::int64 value) {
  set_has_ticket_timestamp();
  ticket_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationState.ticket_timestamp)
}

// -------------------------------------------------------------------

// NavigationRecord

// required int32 id = 1;
inline bool NavigationRecord::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavigationRecord::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavigationRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavigationRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NavigationRecord::id() const {
  // @@protoc_insertion_point(field_get:sg.NavigationRecord.id)
  return id_;
}
inline void NavigationRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationRecord.id)
}

// required sfixed64 recently_visit_time = 2;
inline bool NavigationRecord::has_recently_visit_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationRecord::set_has_recently_visit_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationRecord::clear_has_recently_visit_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationRecord::clear_recently_visit_time() {
  recently_visit_time_ = GOOGLE_LONGLONG(0);
  clear_has_recently_visit_time();
}
inline ::google::protobuf::int64 NavigationRecord::recently_visit_time() const {
  // @@protoc_insertion_point(field_get:sg.NavigationRecord.recently_visit_time)
  return recently_visit_time_;
}
inline void NavigationRecord::set_recently_visit_time(::google::protobuf::int64 value) {
  set_has_recently_visit_time();
  recently_visit_time_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationRecord.recently_visit_time)
}

// optional bool isnew = 3;
inline bool NavigationRecord::has_isnew() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NavigationRecord::set_has_isnew() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NavigationRecord::clear_has_isnew() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NavigationRecord::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
inline bool NavigationRecord::isnew() const {
  // @@protoc_insertion_point(field_get:sg.NavigationRecord.isnew)
  return isnew_;
}
inline void NavigationRecord::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
  // @@protoc_insertion_point(field_set:sg.NavigationRecord.isnew)
}

// -------------------------------------------------------------------

// UserNavigationService_UserNavigationRequest

// required .sg.UserNavigationService.NAVIGATION_CMD cmd = 1;
inline bool UserNavigationService_UserNavigationRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserNavigationService_UserNavigationRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserNavigationService_UserNavigationRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserNavigationService_UserNavigationRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserNavigationService_NAVIGATION_CMD UserNavigationService_UserNavigationRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationRequest.cmd)
  return static_cast< ::sg::UserNavigationService_NAVIGATION_CMD >(cmd_);
}
inline void UserNavigationService_UserNavigationRequest::set_cmd(::sg::UserNavigationService_NAVIGATION_CMD value) {
  assert(::sg::UserNavigationService_NAVIGATION_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserNavigationService.UserNavigationRequest.cmd)
}

// optional uint64 destination = 2;
inline bool UserNavigationService_UserNavigationRequest::has_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNavigationService_UserNavigationRequest::set_has_destination() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNavigationService_UserNavigationRequest::clear_has_destination() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNavigationService_UserNavigationRequest::clear_destination() {
  destination_ = GOOGLE_ULONGLONG(0);
  clear_has_destination();
}
inline ::google::protobuf::uint64 UserNavigationService_UserNavigationRequest::destination() const {
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationRequest.destination)
  return destination_;
}
inline void UserNavigationService_UserNavigationRequest::set_destination(::google::protobuf::uint64 value) {
  set_has_destination();
  destination_ = value;
  // @@protoc_insertion_point(field_set:sg.UserNavigationService.UserNavigationRequest.destination)
}

// optional int32 pos_x = 3;
inline bool UserNavigationService_UserNavigationRequest::has_pos_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserNavigationService_UserNavigationRequest::set_has_pos_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserNavigationService_UserNavigationRequest::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserNavigationService_UserNavigationRequest::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 UserNavigationService_UserNavigationRequest::pos_x() const {
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationRequest.pos_x)
  return pos_x_;
}
inline void UserNavigationService_UserNavigationRequest::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:sg.UserNavigationService.UserNavigationRequest.pos_x)
}

// optional int32 pos_y = 4;
inline bool UserNavigationService_UserNavigationRequest::has_pos_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserNavigationService_UserNavigationRequest::set_has_pos_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserNavigationService_UserNavigationRequest::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserNavigationService_UserNavigationRequest::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 UserNavigationService_UserNavigationRequest::pos_y() const {
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationRequest.pos_y)
  return pos_y_;
}
inline void UserNavigationService_UserNavigationRequest::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:sg.UserNavigationService.UserNavigationRequest.pos_y)
}

// -------------------------------------------------------------------

// UserNavigationService_UserNavigationResponse

// required int32 result = 1;
inline bool UserNavigationService_UserNavigationResponse::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserNavigationService_UserNavigationResponse::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserNavigationService_UserNavigationResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserNavigationService_UserNavigationResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserNavigationService_UserNavigationResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationResponse.result)
  return result_;
}
inline void UserNavigationService_UserNavigationResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserNavigationService.UserNavigationResponse.result)
}

// optional .sg.NavigationState state = 2;
inline bool UserNavigationService_UserNavigationResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNavigationService_UserNavigationResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNavigationService_UserNavigationResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNavigationService_UserNavigationResponse::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
inline const ::sg::NavigationState& UserNavigationService_UserNavigationResponse::_internal_state() const {
  return *state_;
}
inline const ::sg::NavigationState& UserNavigationService_UserNavigationResponse::state() const {
  const ::sg::NavigationState* p = state_;
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationResponse.state)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::NavigationState*>(
      &::sg::_NavigationState_default_instance_);
}
inline ::sg::NavigationState* UserNavigationService_UserNavigationResponse::release_state() {
  // @@protoc_insertion_point(field_release:sg.UserNavigationService.UserNavigationResponse.state)
  clear_has_state();
  ::sg::NavigationState* temp = state_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  state_ = NULL;
  return temp;
}
inline ::sg::NavigationState* UserNavigationService_UserNavigationResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserNavigationService.UserNavigationResponse.state)
  clear_has_state();
  ::sg::NavigationState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::sg::NavigationState* UserNavigationService_UserNavigationResponse::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::NavigationState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserNavigationService.UserNavigationResponse.state)
  return state_;
}
inline void UserNavigationService_UserNavigationResponse::set_allocated_state(::sg::NavigationState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:sg.UserNavigationService.UserNavigationResponse.state)
}

// repeated int32 path = 3;
inline int UserNavigationService_UserNavigationResponse::path_size() const {
  return path_.size();
}
inline void UserNavigationService_UserNavigationResponse::clear_path() {
  path_.Clear();
}
inline ::google::protobuf::int32 UserNavigationService_UserNavigationResponse::path(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationResponse.path)
  return path_.Get(index);
}
inline void UserNavigationService_UserNavigationResponse::set_path(int index, ::google::protobuf::int32 value) {
  path_.Set(index, value);
  // @@protoc_insertion_point(field_set:sg.UserNavigationService.UserNavigationResponse.path)
}
inline void UserNavigationService_UserNavigationResponse::add_path(::google::protobuf::int32 value) {
  path_.Add(value);
  // @@protoc_insertion_point(field_add:sg.UserNavigationService.UserNavigationResponse.path)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserNavigationService_UserNavigationResponse::path() const {
  // @@protoc_insertion_point(field_list:sg.UserNavigationService.UserNavigationResponse.path)
  return path_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserNavigationService_UserNavigationResponse::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserNavigationService.UserNavigationResponse.path)
  return &path_;
}

// repeated .sg.NavigationRecord record = 4;
inline int UserNavigationService_UserNavigationResponse::record_size() const {
  return record_.size();
}
inline void UserNavigationService_UserNavigationResponse::clear_record() {
  record_.Clear();
}
inline ::sg::NavigationRecord* UserNavigationService_UserNavigationResponse::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserNavigationService.UserNavigationResponse.record)
  return record_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::NavigationRecord >*
UserNavigationService_UserNavigationResponse::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserNavigationService.UserNavigationResponse.record)
  return &record_;
}
inline const ::sg::NavigationRecord& UserNavigationService_UserNavigationResponse::record(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationResponse.record)
  return record_.Get(index);
}
inline ::sg::NavigationRecord* UserNavigationService_UserNavigationResponse::add_record() {
  // @@protoc_insertion_point(field_add:sg.UserNavigationService.UserNavigationResponse.record)
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::NavigationRecord >&
UserNavigationService_UserNavigationResponse::record() const {
  // @@protoc_insertion_point(field_list:sg.UserNavigationService.UserNavigationResponse.record)
  return record_;
}

// optional .sg.NavigationEvent now_event = 6;
inline bool UserNavigationService_UserNavigationResponse::has_now_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserNavigationService_UserNavigationResponse::set_has_now_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserNavigationService_UserNavigationResponse::clear_has_now_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserNavigationService_UserNavigationResponse::clear_now_event() {
  if (now_event_ != NULL) now_event_->Clear();
  clear_has_now_event();
}
inline const ::sg::NavigationEvent& UserNavigationService_UserNavigationResponse::_internal_now_event() const {
  return *now_event_;
}
inline const ::sg::NavigationEvent& UserNavigationService_UserNavigationResponse::now_event() const {
  const ::sg::NavigationEvent* p = now_event_;
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationResponse.now_event)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::NavigationEvent*>(
      &::sg::_NavigationEvent_default_instance_);
}
inline ::sg::NavigationEvent* UserNavigationService_UserNavigationResponse::release_now_event() {
  // @@protoc_insertion_point(field_release:sg.UserNavigationService.UserNavigationResponse.now_event)
  clear_has_now_event();
  ::sg::NavigationEvent* temp = now_event_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  now_event_ = NULL;
  return temp;
}
inline ::sg::NavigationEvent* UserNavigationService_UserNavigationResponse::unsafe_arena_release_now_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserNavigationService.UserNavigationResponse.now_event)
  clear_has_now_event();
  ::sg::NavigationEvent* temp = now_event_;
  now_event_ = NULL;
  return temp;
}
inline ::sg::NavigationEvent* UserNavigationService_UserNavigationResponse::mutable_now_event() {
  set_has_now_event();
  if (now_event_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::NavigationEvent>(GetArenaNoVirtual());
    now_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserNavigationService.UserNavigationResponse.now_event)
  return now_event_;
}
inline void UserNavigationService_UserNavigationResponse::set_allocated_now_event(::sg::NavigationEvent* now_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete now_event_;
  }
  if (now_event) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(now_event);
    if (message_arena != submessage_arena) {
      now_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, now_event, submessage_arena);
    }
    set_has_now_event();
  } else {
    clear_has_now_event();
  }
  now_event_ = now_event;
  // @@protoc_insertion_point(field_set_allocated:sg.UserNavigationService.UserNavigationResponse.now_event)
}

// optional .sg.Reward lose = 7;
inline bool UserNavigationService_UserNavigationResponse::has_lose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserNavigationService_UserNavigationResponse::set_has_lose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserNavigationService_UserNavigationResponse::clear_has_lose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sg::Reward& UserNavigationService_UserNavigationResponse::_internal_lose() const {
  return *lose_;
}
inline const ::sg::Reward& UserNavigationService_UserNavigationResponse::lose() const {
  const ::sg::Reward* p = lose_;
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationResponse.lose)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* UserNavigationService_UserNavigationResponse::release_lose() {
  // @@protoc_insertion_point(field_release:sg.UserNavigationService.UserNavigationResponse.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* UserNavigationService_UserNavigationResponse::unsafe_arena_release_lose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserNavigationService.UserNavigationResponse.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* UserNavigationService_UserNavigationResponse::mutable_lose() {
  set_has_lose();
  if (lose_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    lose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserNavigationService.UserNavigationResponse.lose)
  return lose_;
}
inline void UserNavigationService_UserNavigationResponse::set_allocated_lose(::sg::Reward* lose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lose_);
  }
  if (lose) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lose)->GetArena();
    if (message_arena != submessage_arena) {
      lose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lose, submessage_arena);
    }
    set_has_lose();
  } else {
    clear_has_lose();
  }
  lose_ = lose;
  // @@protoc_insertion_point(field_set_allocated:sg.UserNavigationService.UserNavigationResponse.lose)
}

// optional .sg.UserInfo player = 8;
inline bool UserNavigationService_UserNavigationResponse::has_player() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserNavigationService_UserNavigationResponse::set_has_player() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserNavigationService_UserNavigationResponse::clear_has_player() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sg::UserInfo& UserNavigationService_UserNavigationResponse::_internal_player() const {
  return *player_;
}
inline const ::sg::UserInfo& UserNavigationService_UserNavigationResponse::player() const {
  const ::sg::UserInfo* p = player_;
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.UserNavigationResponse.player)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserInfo*>(
      &::sg::_UserInfo_default_instance_);
}
inline ::sg::UserInfo* UserNavigationService_UserNavigationResponse::release_player() {
  // @@protoc_insertion_point(field_release:sg.UserNavigationService.UserNavigationResponse.player)
  clear_has_player();
  ::sg::UserInfo* temp = player_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  player_ = NULL;
  return temp;
}
inline ::sg::UserInfo* UserNavigationService_UserNavigationResponse::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserNavigationService.UserNavigationResponse.player)
  clear_has_player();
  ::sg::UserInfo* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::sg::UserInfo* UserNavigationService_UserNavigationResponse::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserInfo>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserNavigationService.UserNavigationResponse.player)
  return player_;
}
inline void UserNavigationService_UserNavigationResponse::set_allocated_player(::sg::UserInfo* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_);
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(player)->GetArena();
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:sg.UserNavigationService.UserNavigationResponse.player)
}

// -------------------------------------------------------------------

// UserNavigationService

// optional .sg.UserNavigationService.UserNavigationRequest req = 1;
inline bool UserNavigationService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNavigationService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNavigationService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNavigationService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserNavigationService_UserNavigationRequest& UserNavigationService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserNavigationService_UserNavigationRequest& UserNavigationService::req() const {
  const ::sg::UserNavigationService_UserNavigationRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserNavigationService_UserNavigationRequest*>(
      &::sg::_UserNavigationService_UserNavigationRequest_default_instance_);
}
inline ::sg::UserNavigationService_UserNavigationRequest* UserNavigationService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserNavigationService.req)
  clear_has_req();
  ::sg::UserNavigationService_UserNavigationRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserNavigationService_UserNavigationRequest* UserNavigationService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserNavigationService.req)
  clear_has_req();
  ::sg::UserNavigationService_UserNavigationRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserNavigationService_UserNavigationRequest* UserNavigationService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserNavigationService_UserNavigationRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserNavigationService.req)
  return req_;
}
inline void UserNavigationService::set_allocated_req(::sg::UserNavigationService_UserNavigationRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserNavigationService.req)
}

// optional .sg.UserNavigationService.UserNavigationResponse resp = 2;
inline bool UserNavigationService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserNavigationService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserNavigationService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserNavigationService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserNavigationService_UserNavigationResponse& UserNavigationService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserNavigationService_UserNavigationResponse& UserNavigationService::resp() const {
  const ::sg::UserNavigationService_UserNavigationResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserNavigationService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserNavigationService_UserNavigationResponse*>(
      &::sg::_UserNavigationService_UserNavigationResponse_default_instance_);
}
inline ::sg::UserNavigationService_UserNavigationResponse* UserNavigationService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserNavigationService.resp)
  clear_has_resp();
  ::sg::UserNavigationService_UserNavigationResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserNavigationService_UserNavigationResponse* UserNavigationService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserNavigationService.resp)
  clear_has_resp();
  ::sg::UserNavigationService_UserNavigationResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserNavigationService_UserNavigationResponse* UserNavigationService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserNavigationService_UserNavigationResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserNavigationService.resp)
  return resp_;
}
inline void UserNavigationService::set_allocated_resp(::sg::UserNavigationService_UserNavigationResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserNavigationService.resp)
}

// -------------------------------------------------------------------

// NavigationEventIgnoredNotify

// optional .sg.NavigationEvent event = 1;
inline bool NavigationEventIgnoredNotify::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationEventIgnoredNotify::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationEventIgnoredNotify::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationEventIgnoredNotify::clear_event() {
  if (event_ != NULL) event_->Clear();
  clear_has_event();
}
inline const ::sg::NavigationEvent& NavigationEventIgnoredNotify::_internal_event() const {
  return *event_;
}
inline const ::sg::NavigationEvent& NavigationEventIgnoredNotify::event() const {
  const ::sg::NavigationEvent* p = event_;
  // @@protoc_insertion_point(field_get:sg.NavigationEventIgnoredNotify.event)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::NavigationEvent*>(
      &::sg::_NavigationEvent_default_instance_);
}
inline ::sg::NavigationEvent* NavigationEventIgnoredNotify::release_event() {
  // @@protoc_insertion_point(field_release:sg.NavigationEventIgnoredNotify.event)
  clear_has_event();
  ::sg::NavigationEvent* temp = event_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  event_ = NULL;
  return temp;
}
inline ::sg::NavigationEvent* NavigationEventIgnoredNotify::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.NavigationEventIgnoredNotify.event)
  clear_has_event();
  ::sg::NavigationEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::sg::NavigationEvent* NavigationEventIgnoredNotify::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::NavigationEvent>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.NavigationEventIgnoredNotify.event)
  return event_;
}
inline void NavigationEventIgnoredNotify::set_allocated_event(::sg::NavigationEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_;
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
  } else {
    clear_has_event();
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:sg.NavigationEventIgnoredNotify.event)
}

// optional .sg.Reward lose = 2;
inline bool NavigationEventIgnoredNotify::has_lose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavigationEventIgnoredNotify::set_has_lose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavigationEventIgnoredNotify::clear_has_lose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sg::Reward& NavigationEventIgnoredNotify::_internal_lose() const {
  return *lose_;
}
inline const ::sg::Reward& NavigationEventIgnoredNotify::lose() const {
  const ::sg::Reward* p = lose_;
  // @@protoc_insertion_point(field_get:sg.NavigationEventIgnoredNotify.lose)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* NavigationEventIgnoredNotify::release_lose() {
  // @@protoc_insertion_point(field_release:sg.NavigationEventIgnoredNotify.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* NavigationEventIgnoredNotify::unsafe_arena_release_lose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.NavigationEventIgnoredNotify.lose)
  clear_has_lose();
  ::sg::Reward* temp = lose_;
  lose_ = NULL;
  return temp;
}
inline ::sg::Reward* NavigationEventIgnoredNotify::mutable_lose() {
  set_has_lose();
  if (lose_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    lose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.NavigationEventIgnoredNotify.lose)
  return lose_;
}
inline void NavigationEventIgnoredNotify::set_allocated_lose(::sg::Reward* lose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lose_);
  }
  if (lose) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lose)->GetArena();
    if (message_arena != submessage_arena) {
      lose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lose, submessage_arena);
    }
    set_has_lose();
  } else {
    clear_has_lose();
  }
  lose_ = lose;
  // @@protoc_insertion_point(field_set_allocated:sg.NavigationEventIgnoredNotify.lose)
}

// -------------------------------------------------------------------

// FastReachTicketNotify

// optional int32 fast_reach_ticket_num = 1;
inline bool FastReachTicketNotify::has_fast_reach_ticket_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FastReachTicketNotify::set_has_fast_reach_ticket_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FastReachTicketNotify::clear_has_fast_reach_ticket_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FastReachTicketNotify::clear_fast_reach_ticket_num() {
  fast_reach_ticket_num_ = 0;
  clear_has_fast_reach_ticket_num();
}
inline ::google::protobuf::int32 FastReachTicketNotify::fast_reach_ticket_num() const {
  // @@protoc_insertion_point(field_get:sg.FastReachTicketNotify.fast_reach_ticket_num)
  return fast_reach_ticket_num_;
}
inline void FastReachTicketNotify::set_fast_reach_ticket_num(::google::protobuf::int32 value) {
  set_has_fast_reach_ticket_num();
  fast_reach_ticket_num_ = value;
  // @@protoc_insertion_point(field_set:sg.FastReachTicketNotify.fast_reach_ticket_num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::UserNavigationService_NAVIGATION_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserNavigationService_NAVIGATION_CMD>() {
  return ::sg::UserNavigationService_NAVIGATION_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_UserNavigation_2eproto
