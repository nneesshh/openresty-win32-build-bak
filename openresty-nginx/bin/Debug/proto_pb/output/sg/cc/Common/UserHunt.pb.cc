// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserHunt.proto

#include "UserHunt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Mail_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Mail_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ItemDropList;
}  // namespace protobuf_Mail_2eproto
namespace protobuf_UserHunt_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHunt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HuntGroundInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHunt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HuntPrey;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHunt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserHuntService_HuntRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHunt_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HuntPreyDrop;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHunt_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HuntPreyDropList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHunt_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HuntPreyList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_UserHunt_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_UserHuntService_HuntResponse;
}  // namespace protobuf_UserHunt_2eproto
namespace sg {
class HuntGroundInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuntGroundInfo>
      _instance;
} _HuntGroundInfo_default_instance_;
class HuntPreyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuntPrey>
      _instance;
} _HuntPrey_default_instance_;
class HuntPreyListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuntPreyList>
      _instance;
} _HuntPreyList_default_instance_;
class HuntPreyDropDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuntPreyDrop>
      _instance;
} _HuntPreyDrop_default_instance_;
class HuntPreyDropListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuntPreyDropList>
      _instance;
} _HuntPreyDropList_default_instance_;
class UserHuntService_HuntRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHuntService_HuntRequest>
      _instance;
} _UserHuntService_HuntRequest_default_instance_;
class UserHuntService_HuntResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHuntService_HuntResponse>
      _instance;
} _UserHuntService_HuntResponse_default_instance_;
class UserHuntServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHuntService>
      _instance;
} _UserHuntService_default_instance_;
class HuntGroundStateNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuntGroundStateNotify>
      _instance;
} _HuntGroundStateNotify_default_instance_;
class HuntPreyStateNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuntPreyStateNotify>
      _instance;
} _HuntPreyStateNotify_default_instance_;
}  // namespace sg
namespace protobuf_UserHunt_2eproto {
static void InitDefaultsHuntGroundInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HuntGroundInfo_default_instance_;
    new (ptr) ::sg::HuntGroundInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HuntGroundInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HuntGroundInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHuntGroundInfo}, {}};

static void InitDefaultsHuntPrey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HuntPrey_default_instance_;
    new (ptr) ::sg::HuntPrey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HuntPrey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HuntPrey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHuntPrey}, {}};

static void InitDefaultsHuntPreyList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HuntPreyList_default_instance_;
    new (ptr) ::sg::HuntPreyList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HuntPreyList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HuntPreyList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHuntPreyList}, {
      &protobuf_UserHunt_2eproto::scc_info_HuntPrey.base,}};

static void InitDefaultsHuntPreyDrop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HuntPreyDrop_default_instance_;
    new (ptr) ::sg::HuntPreyDrop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HuntPreyDrop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HuntPreyDrop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHuntPreyDrop}, {
      &protobuf_Mail_2eproto::scc_info_ItemDropList.base,}};

static void InitDefaultsHuntPreyDropList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HuntPreyDropList_default_instance_;
    new (ptr) ::sg::HuntPreyDropList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HuntPreyDropList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HuntPreyDropList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHuntPreyDropList}, {
      &protobuf_UserHunt_2eproto::scc_info_HuntPreyDrop.base,}};

static void InitDefaultsUserHuntService_HuntRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserHuntService_HuntRequest_default_instance_;
    new (ptr) ::sg::UserHuntService_HuntRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserHuntService_HuntRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserHuntService_HuntRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserHuntService_HuntRequest}, {}};

static void InitDefaultsUserHuntService_HuntResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserHuntService_HuntResponse_default_instance_;
    new (ptr) ::sg::UserHuntService_HuntResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserHuntService_HuntResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UserHuntService_HuntResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUserHuntService_HuntResponse}, {
      &protobuf_UserHunt_2eproto::scc_info_HuntPreyList.base,
      &protobuf_UserHunt_2eproto::scc_info_HuntGroundInfo.base,
      &protobuf_UserHunt_2eproto::scc_info_HuntPreyDropList.base,}};

static void InitDefaultsUserHuntService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserHuntService_default_instance_;
    new (ptr) ::sg::UserHuntService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserHuntService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserHuntService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserHuntService}, {
      &protobuf_UserHunt_2eproto::scc_info_UserHuntService_HuntRequest.base,
      &protobuf_UserHunt_2eproto::scc_info_UserHuntService_HuntResponse.base,}};

static void InitDefaultsHuntGroundStateNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HuntGroundStateNotify_default_instance_;
    new (ptr) ::sg::HuntGroundStateNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HuntGroundStateNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HuntGroundStateNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHuntGroundStateNotify}, {
      &protobuf_UserHunt_2eproto::scc_info_HuntGroundInfo.base,}};

static void InitDefaultsHuntPreyStateNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_HuntPreyStateNotify_default_instance_;
    new (ptr) ::sg::HuntPreyStateNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::HuntPreyStateNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HuntPreyStateNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHuntPreyStateNotify}, {
      &protobuf_UserHunt_2eproto::scc_info_HuntPreyList.base,
      &protobuf_Mail_2eproto::scc_info_ItemDropList.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HuntGroundInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HuntPrey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HuntPreyList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HuntPreyDrop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HuntPreyDropList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHuntService_HuntRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHuntService_HuntResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHuntService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HuntGroundStateNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HuntPreyStateNotify.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, groundid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, hunt_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, hunt_recover_starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, hunt_recover_cd_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, hunt_recover_add_ratio1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, hunt_recover_add_ratio2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, hunt_recover_add_ratio3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, prey_hunt_num_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundInfo, growtime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPrey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPrey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPrey, preyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPrey, prey_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPrey, cfgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPrey, cfg_groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPrey, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPrey, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPrey, optime_),
  0,
  1,
  2,
  3,
  6,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyDrop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyDrop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyDrop, preyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyDrop, drop_item_list_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyDropList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyDropList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyDropList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntRequest, hunt_groundid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntRequest, trapid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntRequest, preyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntRequest, toolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntRequest, fishid_list_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntResponse, prey_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntResponse, ground_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService_HuntResponse, prey_drop_list_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserHuntService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundStateNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntGroundStateNotify, ground_info_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyStateNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyStateNotify, groundid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyStateNotify, prey_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::HuntPreyStateNotify, prey_drop_item_list_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::sg::HuntGroundInfo)},
  { 25, 37, sizeof(::sg::HuntPrey)},
  { 44, 50, sizeof(::sg::HuntPreyList)},
  { 51, 58, sizeof(::sg::HuntPreyDrop)},
  { 60, 66, sizeof(::sg::HuntPreyDropList)},
  { 67, 78, sizeof(::sg::UserHuntService_HuntRequest)},
  { 84, 93, sizeof(::sg::UserHuntService_HuntResponse)},
  { 97, 104, sizeof(::sg::UserHuntService)},
  { 106, 112, sizeof(::sg::HuntGroundStateNotify)},
  { 113, 121, sizeof(::sg::HuntPreyStateNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HuntGroundInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HuntPrey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HuntPreyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HuntPreyDrop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HuntPreyDropList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserHuntService_HuntRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserHuntService_HuntResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserHuntService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HuntGroundStateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_HuntPreyStateNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "UserHunt.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016UserHunt.proto\022\002sg\032\nMail.proto\"\253\002\n\016Hun"
      "tGroundInfo\022\020\n\010groundid\030\001 \002(\004\022$\n\005state\030\002"
      " \001(\0162\025.sg.HUNT_GROUND_STATE\022\020\n\010hunt_num\030"
      "\003 \001(\005\022\036\n\026hunt_recover_starttime\030\004 \001(\020\022\037\n"
      "\027hunt_recover_cd_seconds\030\005 \001(\005\022\037\n\027hunt_r"
      "ecover_add_ratio1\030\006 \001(\002\022\037\n\027hunt_recover_"
      "add_ratio2\030\007 \001(\002\022\037\n\027hunt_recover_add_rat"
      "io3\030\010 \001(\002\022\031\n\021prey_hunt_num_max\030\013 \001(\005\022\020\n\010"
      "growtime\030\014 \001(\020\"\237\002\n\010HuntPrey\022\016\n\006preyid\030\001 "
      "\002(\005\022%\n\tprey_type\030\002 \001(\0162\022.sg.HUNT_PREY_TY"
      "PE\022\r\n\005cfgid\030\003 \001(\004\022\023\n\013cfg_groupid\030\004 \001(\005\022&"
      "\n\005state\030\005 \001(\0162\027.sg.HuntPrey.PREY_STATE\022\017"
      "\n\007seconds\030\006 \001(\005\022\016\n\006optime\030\025 \001(\020\"o\n\nPREY_"
      "STATE\022\026\n\tTO_DELETE\020\377\377\377\377\377\377\377\377\377\001\022\010\n\004IDLE\020\000\022"
      "\014\n\010CAPTURED\020\001\022\013\n\007ESCAPED\020\002\022\014\n\010STRUGGLE\020\003"
      "\022\t\n\005FIGHT\020\004\022\013\n\007RETREAT\020\005\"*\n\014HuntPreyList"
      "\022\032\n\004list\030\001 \003(\0132\014.sg.HuntPrey\"H\n\014HuntPrey"
      "Drop\022\016\n\006preyid\030\001 \001(\005\022(\n\016drop_item_list\030\002"
      " \001(\0132\020.sg.ItemDropList\"2\n\020HuntPreyDropLi"
      "st\022\036\n\004list\030\001 \003(\0132\020.sg.HuntPreyDrop\"\216\004\n\017U"
      "serHuntService\022,\n\003req\030\001 \001(\0132\037.sg.UserHun"
      "tService.HuntRequest\022.\n\004resp\030\002 \001(\0132 .sg."
      "UserHuntService.HuntResponse\032\230\001\n\013HuntReq"
      "uest\022-\n\003cmd\030\001 \002(\0162 .sg.UserHuntService.H"
      "UNT_COMMAND\022\025\n\rhunt_groundid\030\002 \001(\004\022\016\n\006tr"
      "apid\030\003 \001(\005\022\016\n\006preyid\030\004 \001(\005\022\016\n\006toolid\030\005 \001"
      "(\005\022\023\n\013fishid_list\030\006 \003(\005\032\232\001\n\014HuntResponse"
      "\022\016\n\006result\030\001 \002(\005\022#\n\tprey_list\030\002 \001(\0132\020.sg"
      ".HuntPreyList\022\'\n\013ground_info\030\003 \001(\0132\022.sg."
      "HuntGroundInfo\022,\n\016prey_drop_list\030\004 \001(\0132\024"
      ".sg.HuntPreyDropList\"e\n\014HUNT_COMMAND\022\t\n\005"
      "QUERY\020\001\022\t\n\005ENTER\020\002\022\010\n\004TRAP\020\003\022\017\n\013FISHING_"
      "NET\020\004\022\017\n\013FISHING_ROD\020\005\022\023\n\017FISHING_HARPOO"
      "N\020\006\"@\n\025HuntGroundStateNotify\022\'\n\013ground_i"
      "nfo\030\001 \002(\0132\022.sg.HuntGroundInfo\"{\n\023HuntPre"
      "yStateNotify\022\020\n\010groundid\030\001 \002(\004\022#\n\tprey_l"
      "ist\030\002 \002(\0132\020.sg.HuntPreyList\022-\n\023prey_drop"
      "_item_list\030\013 \001(\0132\020.sg.ItemDropList*K\n\020HU"
      "NT_GROUND_TYPE\022\031\n\025HUNT_GROUND_TYPE_TRAP\020"
      "\001\022\034\n\030HUNT_GROUND_TYPE_FISHING\020\002*x\n\021HUNT_"
      "GROUND_STATE\022\035\n\031HUNT_GROUND_STATE_DISABL"
      "E\020\000\022!\n\035HUNT_GROUND_STATE_ENABLE_PART\020\001\022!"
      "\n\035HUNT_GROUND_STATE_ENABLE_FULL\020\002*_\n\016HUN"
      "T_PREY_TYPE\022\032\n\026HUNT_PREY_TYPE_UNKNOWN\020\000\022"
      "\030\n\024HUNT_PREY_TYPE_BEAST\020\001\022\027\n\023HUNT_PREY_T"
      "YPE_FISH\020\002B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1815);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserHunt.proto", &protobuf_RegisterTypes);
  ::protobuf_Mail_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_UserHunt_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* HuntPrey_PREY_STATE_descriptor() {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHunt_2eproto::file_level_enum_descriptors[0];
}
bool HuntPrey_PREY_STATE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HuntPrey_PREY_STATE HuntPrey::TO_DELETE;
const HuntPrey_PREY_STATE HuntPrey::IDLE;
const HuntPrey_PREY_STATE HuntPrey::CAPTURED;
const HuntPrey_PREY_STATE HuntPrey::ESCAPED;
const HuntPrey_PREY_STATE HuntPrey::STRUGGLE;
const HuntPrey_PREY_STATE HuntPrey::FIGHT;
const HuntPrey_PREY_STATE HuntPrey::RETREAT;
const HuntPrey_PREY_STATE HuntPrey::PREY_STATE_MIN;
const HuntPrey_PREY_STATE HuntPrey::PREY_STATE_MAX;
const int HuntPrey::PREY_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserHuntService_HUNT_COMMAND_descriptor() {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHunt_2eproto::file_level_enum_descriptors[1];
}
bool UserHuntService_HUNT_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserHuntService_HUNT_COMMAND UserHuntService::QUERY;
const UserHuntService_HUNT_COMMAND UserHuntService::ENTER;
const UserHuntService_HUNT_COMMAND UserHuntService::TRAP;
const UserHuntService_HUNT_COMMAND UserHuntService::FISHING_NET;
const UserHuntService_HUNT_COMMAND UserHuntService::FISHING_ROD;
const UserHuntService_HUNT_COMMAND UserHuntService::FISHING_HARPOON;
const UserHuntService_HUNT_COMMAND UserHuntService::HUNT_COMMAND_MIN;
const UserHuntService_HUNT_COMMAND UserHuntService::HUNT_COMMAND_MAX;
const int UserHuntService::HUNT_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HUNT_GROUND_TYPE_descriptor() {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHunt_2eproto::file_level_enum_descriptors[2];
}
bool HUNT_GROUND_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HUNT_GROUND_STATE_descriptor() {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHunt_2eproto::file_level_enum_descriptors[3];
}
bool HUNT_GROUND_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HUNT_PREY_TYPE_descriptor() {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserHunt_2eproto::file_level_enum_descriptors[4];
}
bool HUNT_PREY_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void HuntGroundInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntGroundInfo::kGroundidFieldNumber;
const int HuntGroundInfo::kStateFieldNumber;
const int HuntGroundInfo::kHuntNumFieldNumber;
const int HuntGroundInfo::kHuntRecoverStarttimeFieldNumber;
const int HuntGroundInfo::kHuntRecoverCdSecondsFieldNumber;
const int HuntGroundInfo::kHuntRecoverAddRatio1FieldNumber;
const int HuntGroundInfo::kHuntRecoverAddRatio2FieldNumber;
const int HuntGroundInfo::kHuntRecoverAddRatio3FieldNumber;
const int HuntGroundInfo::kPreyHuntNumMaxFieldNumber;
const int HuntGroundInfo::kGrowtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntGroundInfo::HuntGroundInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_HuntGroundInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HuntGroundInfo)
}
HuntGroundInfo::HuntGroundInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntGroundInfo.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HuntGroundInfo)
}
HuntGroundInfo::HuntGroundInfo(const HuntGroundInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&groundid_, &from.groundid_,
    static_cast<size_t>(reinterpret_cast<char*>(&growtime_) -
    reinterpret_cast<char*>(&groundid_)) + sizeof(growtime_));
  // @@protoc_insertion_point(copy_constructor:sg.HuntGroundInfo)
}

void HuntGroundInfo::SharedCtor() {
  ::memset(&groundid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&growtime_) -
      reinterpret_cast<char*>(&groundid_)) + sizeof(growtime_));
}

HuntGroundInfo::~HuntGroundInfo() {
  // @@protoc_insertion_point(destructor:sg.HuntGroundInfo)
  SharedDtor();
}

void HuntGroundInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HuntGroundInfo::ArenaDtor(void* object) {
  HuntGroundInfo* _this = reinterpret_cast< HuntGroundInfo* >(object);
  (void)_this;
}
void HuntGroundInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HuntGroundInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HuntGroundInfo::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntGroundInfo& HuntGroundInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntGroundInfo.base);
  return *internal_default_instance();
}


void HuntGroundInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HuntGroundInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&groundid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hunt_recover_add_ratio3_) -
        reinterpret_cast<char*>(&groundid_)) + sizeof(hunt_recover_add_ratio3_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&prey_hunt_num_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&growtime_) -
        reinterpret_cast<char*>(&prey_hunt_num_max_)) + sizeof(growtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuntGroundInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HuntGroundInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groundid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_groundid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groundid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HUNT_GROUND_STATE state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::HUNT_GROUND_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::HUNT_GROUND_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hunt_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_hunt_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hunt_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 hunt_recover_starttime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_hunt_recover_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &hunt_recover_starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hunt_recover_cd_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_hunt_recover_cd_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hunt_recover_cd_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hunt_recover_add_ratio1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_hunt_recover_add_ratio1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hunt_recover_add_ratio1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hunt_recover_add_ratio2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_hunt_recover_add_ratio2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hunt_recover_add_ratio2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hunt_recover_add_ratio3 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_hunt_recover_add_ratio3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hunt_recover_add_ratio3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 prey_hunt_num_max = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_prey_hunt_num_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prey_hunt_num_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 growtime = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_growtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &growtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HuntGroundInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HuntGroundInfo)
  return false;
#undef DO_
}

void HuntGroundInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HuntGroundInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groundid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groundid(), output);
  }

  // optional .sg.HUNT_GROUND_STATE state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional int32 hunt_num = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hunt_num(), output);
  }

  // optional sfixed64 hunt_recover_starttime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->hunt_recover_starttime(), output);
  }

  // optional int32 hunt_recover_cd_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hunt_recover_cd_seconds(), output);
  }

  // optional float hunt_recover_add_ratio1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->hunt_recover_add_ratio1(), output);
  }

  // optional float hunt_recover_add_ratio2 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->hunt_recover_add_ratio2(), output);
  }

  // optional float hunt_recover_add_ratio3 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->hunt_recover_add_ratio3(), output);
  }

  // optional int32 prey_hunt_num_max = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->prey_hunt_num_max(), output);
  }

  // optional sfixed64 growtime = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->growtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HuntGroundInfo)
}

::google::protobuf::uint8* HuntGroundInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HuntGroundInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groundid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groundid(), target);
  }

  // optional .sg.HUNT_GROUND_STATE state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional int32 hunt_num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hunt_num(), target);
  }

  // optional sfixed64 hunt_recover_starttime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->hunt_recover_starttime(), target);
  }

  // optional int32 hunt_recover_cd_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hunt_recover_cd_seconds(), target);
  }

  // optional float hunt_recover_add_ratio1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->hunt_recover_add_ratio1(), target);
  }

  // optional float hunt_recover_add_ratio2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->hunt_recover_add_ratio2(), target);
  }

  // optional float hunt_recover_add_ratio3 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->hunt_recover_add_ratio3(), target);
  }

  // optional int32 prey_hunt_num_max = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->prey_hunt_num_max(), target);
  }

  // optional sfixed64 growtime = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->growtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HuntGroundInfo)
  return target;
}

size_t HuntGroundInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HuntGroundInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 groundid = 1;
  if (has_groundid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional .sg.HUNT_GROUND_STATE state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 hunt_num = 3;
    if (has_hunt_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hunt_num());
    }

    // optional sfixed64 hunt_recover_starttime = 4;
    if (has_hunt_recover_starttime()) {
      total_size += 1 + 8;
    }

    // optional int32 hunt_recover_cd_seconds = 5;
    if (has_hunt_recover_cd_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hunt_recover_cd_seconds());
    }

    // optional float hunt_recover_add_ratio1 = 6;
    if (has_hunt_recover_add_ratio1()) {
      total_size += 1 + 4;
    }

    // optional float hunt_recover_add_ratio2 = 7;
    if (has_hunt_recover_add_ratio2()) {
      total_size += 1 + 4;
    }

    // optional float hunt_recover_add_ratio3 = 8;
    if (has_hunt_recover_add_ratio3()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 prey_hunt_num_max = 11;
    if (has_prey_hunt_num_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prey_hunt_num_max());
    }

    // optional sfixed64 growtime = 12;
    if (has_growtime()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuntGroundInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HuntGroundInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntGroundInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntGroundInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HuntGroundInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HuntGroundInfo)
    MergeFrom(*source);
  }
}

void HuntGroundInfo::MergeFrom(const HuntGroundInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HuntGroundInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      groundid_ = from.groundid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      hunt_num_ = from.hunt_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      hunt_recover_starttime_ = from.hunt_recover_starttime_;
    }
    if (cached_has_bits & 0x00000010u) {
      hunt_recover_cd_seconds_ = from.hunt_recover_cd_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      hunt_recover_add_ratio1_ = from.hunt_recover_add_ratio1_;
    }
    if (cached_has_bits & 0x00000040u) {
      hunt_recover_add_ratio2_ = from.hunt_recover_add_ratio2_;
    }
    if (cached_has_bits & 0x00000080u) {
      hunt_recover_add_ratio3_ = from.hunt_recover_add_ratio3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      prey_hunt_num_max_ = from.prey_hunt_num_max_;
    }
    if (cached_has_bits & 0x00000200u) {
      growtime_ = from.growtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HuntGroundInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HuntGroundInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntGroundInfo::CopyFrom(const HuntGroundInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HuntGroundInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntGroundInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HuntGroundInfo::Swap(HuntGroundInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HuntGroundInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HuntGroundInfo::UnsafeArenaSwap(HuntGroundInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HuntGroundInfo::InternalSwap(HuntGroundInfo* other) {
  using std::swap;
  swap(groundid_, other->groundid_);
  swap(state_, other->state_);
  swap(hunt_num_, other->hunt_num_);
  swap(hunt_recover_starttime_, other->hunt_recover_starttime_);
  swap(hunt_recover_cd_seconds_, other->hunt_recover_cd_seconds_);
  swap(hunt_recover_add_ratio1_, other->hunt_recover_add_ratio1_);
  swap(hunt_recover_add_ratio2_, other->hunt_recover_add_ratio2_);
  swap(hunt_recover_add_ratio3_, other->hunt_recover_add_ratio3_);
  swap(prey_hunt_num_max_, other->prey_hunt_num_max_);
  swap(growtime_, other->growtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HuntGroundInfo::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HuntPrey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntPrey::kPreyidFieldNumber;
const int HuntPrey::kPreyTypeFieldNumber;
const int HuntPrey::kCfgidFieldNumber;
const int HuntPrey::kCfgGroupidFieldNumber;
const int HuntPrey::kStateFieldNumber;
const int HuntPrey::kSecondsFieldNumber;
const int HuntPrey::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntPrey::HuntPrey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_HuntPrey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HuntPrey)
}
HuntPrey::HuntPrey(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPrey.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HuntPrey)
}
HuntPrey::HuntPrey(const HuntPrey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&preyid_, &from.preyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&preyid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.HuntPrey)
}

void HuntPrey::SharedCtor() {
  ::memset(&preyid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&preyid_)) + sizeof(optime_));
  state_ = -1;
}

HuntPrey::~HuntPrey() {
  // @@protoc_insertion_point(destructor:sg.HuntPrey)
  SharedDtor();
}

void HuntPrey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HuntPrey::ArenaDtor(void* object) {
  HuntPrey* _this = reinterpret_cast< HuntPrey* >(object);
  (void)_this;
}
void HuntPrey::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HuntPrey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HuntPrey::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntPrey& HuntPrey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPrey.base);
  return *internal_default_instance();
}


void HuntPrey::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HuntPrey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&preyid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&preyid_)) + sizeof(optime_));
    state_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuntPrey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HuntPrey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 preyid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_preyid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preyid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HUNT_PREY_TYPE prey_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::HUNT_PREY_TYPE_IsValid(value)) {
            set_prey_type(static_cast< ::sg::HUNT_PREY_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cfgid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cfgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cfg_groupid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cfg_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HuntPrey.PREY_STATE state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::HuntPrey_PREY_STATE_IsValid(value)) {
            set_state(static_cast< ::sg::HuntPrey_PREY_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 optime = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HuntPrey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HuntPrey)
  return false;
#undef DO_
}

void HuntPrey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HuntPrey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 preyid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->preyid(), output);
  }

  // optional .sg.HUNT_PREY_TYPE prey_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->prey_type(), output);
  }

  // optional uint64 cfgid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cfgid(), output);
  }

  // optional int32 cfg_groupid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cfg_groupid(), output);
  }

  // optional .sg.HuntPrey.PREY_STATE state = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional int32 seconds = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seconds(), output);
  }

  // optional sfixed64 optime = 21;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(21, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HuntPrey)
}

::google::protobuf::uint8* HuntPrey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HuntPrey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 preyid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->preyid(), target);
  }

  // optional .sg.HUNT_PREY_TYPE prey_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->prey_type(), target);
  }

  // optional uint64 cfgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cfgid(), target);
  }

  // optional int32 cfg_groupid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cfg_groupid(), target);
  }

  // optional .sg.HuntPrey.PREY_STATE state = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // optional int32 seconds = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seconds(), target);
  }

  // optional sfixed64 optime = 21;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(21, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HuntPrey)
  return target;
}

size_t HuntPrey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HuntPrey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 preyid = 1;
  if (has_preyid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->preyid());
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional .sg.HUNT_PREY_TYPE prey_type = 2;
    if (has_prey_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prey_type());
    }

    // optional uint64 cfgid = 3;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cfgid());
    }

    // optional int32 cfg_groupid = 4;
    if (has_cfg_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfg_groupid());
    }

    // optional int32 seconds = 6;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // optional sfixed64 optime = 21;
    if (has_optime()) {
      total_size += 2 + 8;
    }

    // optional .sg.HuntPrey.PREY_STATE state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuntPrey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HuntPrey)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntPrey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntPrey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HuntPrey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HuntPrey)
    MergeFrom(*source);
  }
}

void HuntPrey::MergeFrom(const HuntPrey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HuntPrey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      preyid_ = from.preyid_;
    }
    if (cached_has_bits & 0x00000002u) {
      prey_type_ = from.prey_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      cfgid_ = from.cfgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      cfg_groupid_ = from.cfg_groupid_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      optime_ = from.optime_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HuntPrey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HuntPrey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntPrey::CopyFrom(const HuntPrey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HuntPrey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntPrey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HuntPrey::Swap(HuntPrey* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HuntPrey* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HuntPrey::UnsafeArenaSwap(HuntPrey* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HuntPrey::InternalSwap(HuntPrey* other) {
  using std::swap;
  swap(preyid_, other->preyid_);
  swap(prey_type_, other->prey_type_);
  swap(cfgid_, other->cfgid_);
  swap(cfg_groupid_, other->cfg_groupid_);
  swap(seconds_, other->seconds_);
  swap(optime_, other->optime_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HuntPrey::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HuntPreyList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntPreyList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntPreyList::HuntPreyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_HuntPreyList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HuntPreyList)
}
HuntPreyList::HuntPreyList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPreyList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HuntPreyList)
}
HuntPreyList::HuntPreyList(const HuntPreyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.HuntPreyList)
}

void HuntPreyList::SharedCtor() {
}

HuntPreyList::~HuntPreyList() {
  // @@protoc_insertion_point(destructor:sg.HuntPreyList)
  SharedDtor();
}

void HuntPreyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HuntPreyList::ArenaDtor(void* object) {
  HuntPreyList* _this = reinterpret_cast< HuntPreyList* >(object);
  (void)_this;
}
void HuntPreyList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HuntPreyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HuntPreyList::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntPreyList& HuntPreyList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPreyList.base);
  return *internal_default_instance();
}


void HuntPreyList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HuntPreyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuntPreyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HuntPreyList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.HuntPrey list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HuntPreyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HuntPreyList)
  return false;
#undef DO_
}

void HuntPreyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HuntPreyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HuntPrey list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HuntPreyList)
}

::google::protobuf::uint8* HuntPreyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HuntPreyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HuntPrey list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HuntPreyList)
  return target;
}

size_t HuntPreyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HuntPreyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.HuntPrey list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuntPreyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HuntPreyList)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntPreyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntPreyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HuntPreyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HuntPreyList)
    MergeFrom(*source);
  }
}

void HuntPreyList::MergeFrom(const HuntPreyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HuntPreyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void HuntPreyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HuntPreyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntPreyList::CopyFrom(const HuntPreyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HuntPreyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntPreyList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void HuntPreyList::Swap(HuntPreyList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HuntPreyList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HuntPreyList::UnsafeArenaSwap(HuntPreyList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HuntPreyList::InternalSwap(HuntPreyList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HuntPreyList::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HuntPreyDrop::InitAsDefaultInstance() {
  ::sg::_HuntPreyDrop_default_instance_._instance.get_mutable()->drop_item_list_ = const_cast< ::sg::ItemDropList*>(
      ::sg::ItemDropList::internal_default_instance());
}
void HuntPreyDrop::unsafe_arena_set_allocated_drop_item_list(
    ::sg::ItemDropList* drop_item_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete drop_item_list_;
  }
  drop_item_list_ = drop_item_list;
  if (drop_item_list) {
    set_has_drop_item_list();
  } else {
    clear_has_drop_item_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HuntPreyDrop.drop_item_list)
}
void HuntPreyDrop::clear_drop_item_list() {
  if (drop_item_list_ != NULL) drop_item_list_->Clear();
  clear_has_drop_item_list();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntPreyDrop::kPreyidFieldNumber;
const int HuntPreyDrop::kDropItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntPreyDrop::HuntPreyDrop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_HuntPreyDrop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HuntPreyDrop)
}
HuntPreyDrop::HuntPreyDrop(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPreyDrop.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HuntPreyDrop)
}
HuntPreyDrop::HuntPreyDrop(const HuntPreyDrop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drop_item_list()) {
    drop_item_list_ = new ::sg::ItemDropList(*from.drop_item_list_);
  } else {
    drop_item_list_ = NULL;
  }
  preyid_ = from.preyid_;
  // @@protoc_insertion_point(copy_constructor:sg.HuntPreyDrop)
}

void HuntPreyDrop::SharedCtor() {
  ::memset(&drop_item_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preyid_) -
      reinterpret_cast<char*>(&drop_item_list_)) + sizeof(preyid_));
}

HuntPreyDrop::~HuntPreyDrop() {
  // @@protoc_insertion_point(destructor:sg.HuntPreyDrop)
  SharedDtor();
}

void HuntPreyDrop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete drop_item_list_;
}

void HuntPreyDrop::ArenaDtor(void* object) {
  HuntPreyDrop* _this = reinterpret_cast< HuntPreyDrop* >(object);
  (void)_this;
}
void HuntPreyDrop::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HuntPreyDrop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HuntPreyDrop::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntPreyDrop& HuntPreyDrop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPreyDrop.base);
  return *internal_default_instance();
}


void HuntPreyDrop::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HuntPreyDrop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(drop_item_list_ != NULL);
    drop_item_list_->Clear();
  }
  preyid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuntPreyDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HuntPreyDrop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 preyid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_preyid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preyid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.ItemDropList drop_item_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HuntPreyDrop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HuntPreyDrop)
  return false;
#undef DO_
}

void HuntPreyDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HuntPreyDrop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 preyid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->preyid(), output);
  }

  // optional .sg.ItemDropList drop_item_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_drop_item_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HuntPreyDrop)
}

::google::protobuf::uint8* HuntPreyDrop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HuntPreyDrop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 preyid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->preyid(), target);
  }

  // optional .sg.ItemDropList drop_item_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_drop_item_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HuntPreyDrop)
  return target;
}

size_t HuntPreyDrop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HuntPreyDrop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.ItemDropList drop_item_list = 2;
    if (has_drop_item_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *drop_item_list_);
    }

    // optional int32 preyid = 1;
    if (has_preyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preyid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuntPreyDrop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HuntPreyDrop)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntPreyDrop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntPreyDrop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HuntPreyDrop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HuntPreyDrop)
    MergeFrom(*source);
  }
}

void HuntPreyDrop::MergeFrom(const HuntPreyDrop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HuntPreyDrop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_drop_item_list()->::sg::ItemDropList::MergeFrom(from.drop_item_list());
    }
    if (cached_has_bits & 0x00000002u) {
      preyid_ = from.preyid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HuntPreyDrop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HuntPreyDrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntPreyDrop::CopyFrom(const HuntPreyDrop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HuntPreyDrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntPreyDrop::IsInitialized() const {
  if (has_drop_item_list()) {
    if (!this->drop_item_list_->IsInitialized()) return false;
  }
  return true;
}

void HuntPreyDrop::Swap(HuntPreyDrop* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HuntPreyDrop* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HuntPreyDrop::UnsafeArenaSwap(HuntPreyDrop* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HuntPreyDrop::InternalSwap(HuntPreyDrop* other) {
  using std::swap;
  swap(drop_item_list_, other->drop_item_list_);
  swap(preyid_, other->preyid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HuntPreyDrop::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HuntPreyDropList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntPreyDropList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntPreyDropList::HuntPreyDropList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_HuntPreyDropList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HuntPreyDropList)
}
HuntPreyDropList::HuntPreyDropList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPreyDropList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HuntPreyDropList)
}
HuntPreyDropList::HuntPreyDropList(const HuntPreyDropList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sg.HuntPreyDropList)
}

void HuntPreyDropList::SharedCtor() {
}

HuntPreyDropList::~HuntPreyDropList() {
  // @@protoc_insertion_point(destructor:sg.HuntPreyDropList)
  SharedDtor();
}

void HuntPreyDropList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void HuntPreyDropList::ArenaDtor(void* object) {
  HuntPreyDropList* _this = reinterpret_cast< HuntPreyDropList* >(object);
  (void)_this;
}
void HuntPreyDropList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HuntPreyDropList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HuntPreyDropList::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntPreyDropList& HuntPreyDropList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPreyDropList.base);
  return *internal_default_instance();
}


void HuntPreyDropList::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HuntPreyDropList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuntPreyDropList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HuntPreyDropList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.HuntPreyDrop list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HuntPreyDropList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HuntPreyDropList)
  return false;
#undef DO_
}

void HuntPreyDropList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HuntPreyDropList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HuntPreyDrop list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HuntPreyDropList)
}

::google::protobuf::uint8* HuntPreyDropList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HuntPreyDropList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.HuntPreyDrop list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HuntPreyDropList)
  return target;
}

size_t HuntPreyDropList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HuntPreyDropList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.HuntPreyDrop list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuntPreyDropList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HuntPreyDropList)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntPreyDropList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntPreyDropList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HuntPreyDropList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HuntPreyDropList)
    MergeFrom(*source);
  }
}

void HuntPreyDropList::MergeFrom(const HuntPreyDropList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HuntPreyDropList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void HuntPreyDropList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HuntPreyDropList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntPreyDropList::CopyFrom(const HuntPreyDropList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HuntPreyDropList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntPreyDropList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void HuntPreyDropList::Swap(HuntPreyDropList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HuntPreyDropList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HuntPreyDropList::UnsafeArenaSwap(HuntPreyDropList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HuntPreyDropList::InternalSwap(HuntPreyDropList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HuntPreyDropList::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHuntService_HuntRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHuntService_HuntRequest::kCmdFieldNumber;
const int UserHuntService_HuntRequest::kHuntGroundidFieldNumber;
const int UserHuntService_HuntRequest::kTrapidFieldNumber;
const int UserHuntService_HuntRequest::kPreyidFieldNumber;
const int UserHuntService_HuntRequest::kToolidFieldNumber;
const int UserHuntService_HuntRequest::kFishidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHuntService_HuntRequest::UserHuntService_HuntRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_UserHuntService_HuntRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserHuntService.HuntRequest)
}
UserHuntService_HuntRequest::UserHuntService_HuntRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  fishid_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_UserHuntService_HuntRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserHuntService.HuntRequest)
}
UserHuntService_HuntRequest::UserHuntService_HuntRequest(const UserHuntService_HuntRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fishid_list_(from.fishid_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hunt_groundid_, &from.hunt_groundid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&hunt_groundid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserHuntService.HuntRequest)
}

void UserHuntService_HuntRequest::SharedCtor() {
  ::memset(&hunt_groundid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&toolid_) -
      reinterpret_cast<char*>(&hunt_groundid_)) + sizeof(toolid_));
  cmd_ = 1;
}

UserHuntService_HuntRequest::~UserHuntService_HuntRequest() {
  // @@protoc_insertion_point(destructor:sg.UserHuntService.HuntRequest)
  SharedDtor();
}

void UserHuntService_HuntRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserHuntService_HuntRequest::ArenaDtor(void* object) {
  UserHuntService_HuntRequest* _this = reinterpret_cast< UserHuntService_HuntRequest* >(object);
  (void)_this;
}
void UserHuntService_HuntRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHuntService_HuntRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHuntService_HuntRequest::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHuntService_HuntRequest& UserHuntService_HuntRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_UserHuntService_HuntRequest.base);
  return *internal_default_instance();
}


void UserHuntService_HuntRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserHuntService.HuntRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fishid_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&hunt_groundid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&toolid_) -
        reinterpret_cast<char*>(&hunt_groundid_)) + sizeof(toolid_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHuntService_HuntRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserHuntService.HuntRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserHuntService.HUNT_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserHuntService_HUNT_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserHuntService_HUNT_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hunt_groundid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hunt_groundid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hunt_groundid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trapid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_trapid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trapid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 preyid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_preyid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preyid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 toolid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_toolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fishid_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_fishid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fishid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserHuntService.HuntRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserHuntService.HuntRequest)
  return false;
#undef DO_
}

void UserHuntService_HuntRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserHuntService.HuntRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserHuntService.HUNT_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint64 hunt_groundid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hunt_groundid(), output);
  }

  // optional int32 trapid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trapid(), output);
  }

  // optional int32 preyid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->preyid(), output);
  }

  // optional int32 toolid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->toolid(), output);
  }

  // repeated int32 fishid_list = 6;
  for (int i = 0, n = this->fishid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->fishid_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserHuntService.HuntRequest)
}

::google::protobuf::uint8* UserHuntService_HuntRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserHuntService.HuntRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserHuntService.HUNT_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint64 hunt_groundid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hunt_groundid(), target);
  }

  // optional int32 trapid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trapid(), target);
  }

  // optional int32 preyid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->preyid(), target);
  }

  // optional int32 toolid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->toolid(), target);
  }

  // repeated int32 fishid_list = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->fishid_list_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserHuntService.HuntRequest)
  return target;
}

size_t UserHuntService_HuntRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserHuntService.HuntRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserHuntService.HUNT_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated int32 fishid_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fishid_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->fishid_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 hunt_groundid = 2;
    if (has_hunt_groundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hunt_groundid());
    }

    // optional int32 trapid = 3;
    if (has_trapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trapid());
    }

    // optional int32 preyid = 4;
    if (has_preyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preyid());
    }

    // optional int32 toolid = 5;
    if (has_toolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toolid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHuntService_HuntRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserHuntService.HuntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHuntService_HuntRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHuntService_HuntRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserHuntService.HuntRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserHuntService.HuntRequest)
    MergeFrom(*source);
  }
}

void UserHuntService_HuntRequest::MergeFrom(const UserHuntService_HuntRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserHuntService.HuntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fishid_list_.MergeFrom(from.fishid_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      hunt_groundid_ = from.hunt_groundid_;
    }
    if (cached_has_bits & 0x00000002u) {
      trapid_ = from.trapid_;
    }
    if (cached_has_bits & 0x00000004u) {
      preyid_ = from.preyid_;
    }
    if (cached_has_bits & 0x00000008u) {
      toolid_ = from.toolid_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHuntService_HuntRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserHuntService.HuntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHuntService_HuntRequest::CopyFrom(const UserHuntService_HuntRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserHuntService.HuntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHuntService_HuntRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void UserHuntService_HuntRequest::Swap(UserHuntService_HuntRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHuntService_HuntRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHuntService_HuntRequest::UnsafeArenaSwap(UserHuntService_HuntRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHuntService_HuntRequest::InternalSwap(UserHuntService_HuntRequest* other) {
  using std::swap;
  fishid_list_.InternalSwap(&other->fishid_list_);
  swap(hunt_groundid_, other->hunt_groundid_);
  swap(trapid_, other->trapid_);
  swap(preyid_, other->preyid_);
  swap(toolid_, other->toolid_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHuntService_HuntRequest::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHuntService_HuntResponse::InitAsDefaultInstance() {
  ::sg::_UserHuntService_HuntResponse_default_instance_._instance.get_mutable()->prey_list_ = const_cast< ::sg::HuntPreyList*>(
      ::sg::HuntPreyList::internal_default_instance());
  ::sg::_UserHuntService_HuntResponse_default_instance_._instance.get_mutable()->ground_info_ = const_cast< ::sg::HuntGroundInfo*>(
      ::sg::HuntGroundInfo::internal_default_instance());
  ::sg::_UserHuntService_HuntResponse_default_instance_._instance.get_mutable()->prey_drop_list_ = const_cast< ::sg::HuntPreyDropList*>(
      ::sg::HuntPreyDropList::internal_default_instance());
}
void UserHuntService_HuntResponse::unsafe_arena_set_allocated_prey_list(
    ::sg::HuntPreyList* prey_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete prey_list_;
  }
  prey_list_ = prey_list;
  if (prey_list) {
    set_has_prey_list();
  } else {
    clear_has_prey_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHuntService.HuntResponse.prey_list)
}
void UserHuntService_HuntResponse::unsafe_arena_set_allocated_ground_info(
    ::sg::HuntGroundInfo* ground_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete ground_info_;
  }
  ground_info_ = ground_info;
  if (ground_info) {
    set_has_ground_info();
  } else {
    clear_has_ground_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHuntService.HuntResponse.ground_info)
}
void UserHuntService_HuntResponse::unsafe_arena_set_allocated_prey_drop_list(
    ::sg::HuntPreyDropList* prey_drop_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete prey_drop_list_;
  }
  prey_drop_list_ = prey_drop_list;
  if (prey_drop_list) {
    set_has_prey_drop_list();
  } else {
    clear_has_prey_drop_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHuntService.HuntResponse.prey_drop_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHuntService_HuntResponse::kResultFieldNumber;
const int UserHuntService_HuntResponse::kPreyListFieldNumber;
const int UserHuntService_HuntResponse::kGroundInfoFieldNumber;
const int UserHuntService_HuntResponse::kPreyDropListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHuntService_HuntResponse::UserHuntService_HuntResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_UserHuntService_HuntResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserHuntService.HuntResponse)
}
UserHuntService_HuntResponse::UserHuntService_HuntResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_UserHuntService_HuntResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserHuntService.HuntResponse)
}
UserHuntService_HuntResponse::UserHuntService_HuntResponse(const UserHuntService_HuntResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prey_list()) {
    prey_list_ = new ::sg::HuntPreyList(*from.prey_list_);
  } else {
    prey_list_ = NULL;
  }
  if (from.has_ground_info()) {
    ground_info_ = new ::sg::HuntGroundInfo(*from.ground_info_);
  } else {
    ground_info_ = NULL;
  }
  if (from.has_prey_drop_list()) {
    prey_drop_list_ = new ::sg::HuntPreyDropList(*from.prey_drop_list_);
  } else {
    prey_drop_list_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.UserHuntService.HuntResponse)
}

void UserHuntService_HuntResponse::SharedCtor() {
  ::memset(&prey_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&prey_list_)) + sizeof(result_));
}

UserHuntService_HuntResponse::~UserHuntService_HuntResponse() {
  // @@protoc_insertion_point(destructor:sg.UserHuntService.HuntResponse)
  SharedDtor();
}

void UserHuntService_HuntResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete prey_list_;
  if (this != internal_default_instance()) delete ground_info_;
  if (this != internal_default_instance()) delete prey_drop_list_;
}

void UserHuntService_HuntResponse::ArenaDtor(void* object) {
  UserHuntService_HuntResponse* _this = reinterpret_cast< UserHuntService_HuntResponse* >(object);
  (void)_this;
}
void UserHuntService_HuntResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHuntService_HuntResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHuntService_HuntResponse::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHuntService_HuntResponse& UserHuntService_HuntResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_UserHuntService_HuntResponse.base);
  return *internal_default_instance();
}


void UserHuntService_HuntResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserHuntService.HuntResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(prey_list_ != NULL);
      prey_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ground_info_ != NULL);
      ground_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(prey_drop_list_ != NULL);
      prey_drop_list_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHuntService_HuntResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserHuntService.HuntResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HuntPreyList prey_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prey_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HuntGroundInfo ground_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ground_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.HuntPreyDropList prey_drop_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prey_drop_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserHuntService.HuntResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserHuntService.HuntResponse)
  return false;
#undef DO_
}

void UserHuntService_HuntResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserHuntService.HuntResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.HuntPreyList prey_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_prey_list(), output);
  }

  // optional .sg.HuntGroundInfo ground_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ground_info(), output);
  }

  // optional .sg.HuntPreyDropList prey_drop_list = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_prey_drop_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserHuntService.HuntResponse)
}

::google::protobuf::uint8* UserHuntService_HuntResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserHuntService.HuntResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.HuntPreyList prey_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_prey_list(), deterministic, target);
  }

  // optional .sg.HuntGroundInfo ground_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ground_info(), deterministic, target);
  }

  // optional .sg.HuntPreyDropList prey_drop_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_prey_drop_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserHuntService.HuntResponse)
  return target;
}

size_t UserHuntService_HuntResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserHuntService.HuntResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .sg.HuntPreyList prey_list = 2;
    if (has_prey_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prey_list_);
    }

    // optional .sg.HuntGroundInfo ground_info = 3;
    if (has_ground_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ground_info_);
    }

    // optional .sg.HuntPreyDropList prey_drop_list = 4;
    if (has_prey_drop_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prey_drop_list_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHuntService_HuntResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserHuntService.HuntResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHuntService_HuntResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHuntService_HuntResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserHuntService.HuntResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserHuntService.HuntResponse)
    MergeFrom(*source);
  }
}

void UserHuntService_HuntResponse::MergeFrom(const UserHuntService_HuntResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserHuntService.HuntResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_prey_list()->::sg::HuntPreyList::MergeFrom(from.prey_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ground_info()->::sg::HuntGroundInfo::MergeFrom(from.ground_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_prey_drop_list()->::sg::HuntPreyDropList::MergeFrom(from.prey_drop_list());
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHuntService_HuntResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserHuntService.HuntResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHuntService_HuntResponse::CopyFrom(const UserHuntService_HuntResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserHuntService.HuntResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHuntService_HuntResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_prey_list()) {
    if (!this->prey_list_->IsInitialized()) return false;
  }
  if (has_ground_info()) {
    if (!this->ground_info_->IsInitialized()) return false;
  }
  if (has_prey_drop_list()) {
    if (!this->prey_drop_list_->IsInitialized()) return false;
  }
  return true;
}

void UserHuntService_HuntResponse::Swap(UserHuntService_HuntResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHuntService_HuntResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHuntService_HuntResponse::UnsafeArenaSwap(UserHuntService_HuntResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHuntService_HuntResponse::InternalSwap(UserHuntService_HuntResponse* other) {
  using std::swap;
  swap(prey_list_, other->prey_list_);
  swap(ground_info_, other->ground_info_);
  swap(prey_drop_list_, other->prey_drop_list_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHuntService_HuntResponse::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHuntService::InitAsDefaultInstance() {
  ::sg::_UserHuntService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserHuntService_HuntRequest*>(
      ::sg::UserHuntService_HuntRequest::internal_default_instance());
  ::sg::_UserHuntService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserHuntService_HuntResponse*>(
      ::sg::UserHuntService_HuntResponse::internal_default_instance());
}
void UserHuntService::unsafe_arena_set_allocated_req(
    ::sg::UserHuntService_HuntRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHuntService.req)
}
void UserHuntService::unsafe_arena_set_allocated_resp(
    ::sg::UserHuntService_HuntResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserHuntService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHuntService::kReqFieldNumber;
const int UserHuntService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHuntService::UserHuntService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_UserHuntService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserHuntService)
}
UserHuntService::UserHuntService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_UserHuntService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserHuntService)
}
UserHuntService::UserHuntService(const UserHuntService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserHuntService_HuntRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserHuntService_HuntResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserHuntService)
}

void UserHuntService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserHuntService::~UserHuntService() {
  // @@protoc_insertion_point(destructor:sg.UserHuntService)
  SharedDtor();
}

void UserHuntService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserHuntService::ArenaDtor(void* object) {
  UserHuntService* _this = reinterpret_cast< UserHuntService* >(object);
  (void)_this;
}
void UserHuntService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHuntService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHuntService::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHuntService& UserHuntService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_UserHuntService.base);
  return *internal_default_instance();
}


void UserHuntService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserHuntService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHuntService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserHuntService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserHuntService.HuntRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserHuntService.HuntResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserHuntService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserHuntService)
  return false;
#undef DO_
}

void UserHuntService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserHuntService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserHuntService.HuntRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserHuntService.HuntResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserHuntService)
}

::google::protobuf::uint8* UserHuntService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserHuntService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserHuntService.HuntRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserHuntService.HuntResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserHuntService)
  return target;
}

size_t UserHuntService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserHuntService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserHuntService.HuntRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserHuntService.HuntResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHuntService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserHuntService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHuntService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHuntService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserHuntService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserHuntService)
    MergeFrom(*source);
  }
}

void UserHuntService::MergeFrom(const UserHuntService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserHuntService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserHuntService_HuntRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserHuntService_HuntResponse::MergeFrom(from.resp());
    }
  }
}

void UserHuntService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserHuntService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHuntService::CopyFrom(const UserHuntService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserHuntService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHuntService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserHuntService::Swap(UserHuntService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHuntService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHuntService::UnsafeArenaSwap(UserHuntService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHuntService::InternalSwap(UserHuntService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHuntService::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HuntGroundStateNotify::InitAsDefaultInstance() {
  ::sg::_HuntGroundStateNotify_default_instance_._instance.get_mutable()->ground_info_ = const_cast< ::sg::HuntGroundInfo*>(
      ::sg::HuntGroundInfo::internal_default_instance());
}
void HuntGroundStateNotify::unsafe_arena_set_allocated_ground_info(
    ::sg::HuntGroundInfo* ground_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete ground_info_;
  }
  ground_info_ = ground_info;
  if (ground_info) {
    set_has_ground_info();
  } else {
    clear_has_ground_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HuntGroundStateNotify.ground_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntGroundStateNotify::kGroundInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntGroundStateNotify::HuntGroundStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_HuntGroundStateNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HuntGroundStateNotify)
}
HuntGroundStateNotify::HuntGroundStateNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntGroundStateNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HuntGroundStateNotify)
}
HuntGroundStateNotify::HuntGroundStateNotify(const HuntGroundStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ground_info()) {
    ground_info_ = new ::sg::HuntGroundInfo(*from.ground_info_);
  } else {
    ground_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.HuntGroundStateNotify)
}

void HuntGroundStateNotify::SharedCtor() {
  ground_info_ = NULL;
}

HuntGroundStateNotify::~HuntGroundStateNotify() {
  // @@protoc_insertion_point(destructor:sg.HuntGroundStateNotify)
  SharedDtor();
}

void HuntGroundStateNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete ground_info_;
}

void HuntGroundStateNotify::ArenaDtor(void* object) {
  HuntGroundStateNotify* _this = reinterpret_cast< HuntGroundStateNotify* >(object);
  (void)_this;
}
void HuntGroundStateNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HuntGroundStateNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HuntGroundStateNotify::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntGroundStateNotify& HuntGroundStateNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntGroundStateNotify.base);
  return *internal_default_instance();
}


void HuntGroundStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HuntGroundStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ground_info_ != NULL);
    ground_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuntGroundStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HuntGroundStateNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.HuntGroundInfo ground_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ground_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HuntGroundStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HuntGroundStateNotify)
  return false;
#undef DO_
}

void HuntGroundStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HuntGroundStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.HuntGroundInfo ground_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ground_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HuntGroundStateNotify)
}

::google::protobuf::uint8* HuntGroundStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HuntGroundStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.HuntGroundInfo ground_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ground_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HuntGroundStateNotify)
  return target;
}

size_t HuntGroundStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HuntGroundStateNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.HuntGroundInfo ground_info = 1;
  if (has_ground_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ground_info_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuntGroundStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HuntGroundStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntGroundStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntGroundStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HuntGroundStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HuntGroundStateNotify)
    MergeFrom(*source);
  }
}

void HuntGroundStateNotify::MergeFrom(const HuntGroundStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HuntGroundStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ground_info()) {
    mutable_ground_info()->::sg::HuntGroundInfo::MergeFrom(from.ground_info());
  }
}

void HuntGroundStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HuntGroundStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntGroundStateNotify::CopyFrom(const HuntGroundStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HuntGroundStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntGroundStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_ground_info()) {
    if (!this->ground_info_->IsInitialized()) return false;
  }
  return true;
}

void HuntGroundStateNotify::Swap(HuntGroundStateNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HuntGroundStateNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HuntGroundStateNotify::UnsafeArenaSwap(HuntGroundStateNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HuntGroundStateNotify::InternalSwap(HuntGroundStateNotify* other) {
  using std::swap;
  swap(ground_info_, other->ground_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HuntGroundStateNotify::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HuntPreyStateNotify::InitAsDefaultInstance() {
  ::sg::_HuntPreyStateNotify_default_instance_._instance.get_mutable()->prey_list_ = const_cast< ::sg::HuntPreyList*>(
      ::sg::HuntPreyList::internal_default_instance());
  ::sg::_HuntPreyStateNotify_default_instance_._instance.get_mutable()->prey_drop_item_list_ = const_cast< ::sg::ItemDropList*>(
      ::sg::ItemDropList::internal_default_instance());
}
void HuntPreyStateNotify::unsafe_arena_set_allocated_prey_list(
    ::sg::HuntPreyList* prey_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete prey_list_;
  }
  prey_list_ = prey_list;
  if (prey_list) {
    set_has_prey_list();
  } else {
    clear_has_prey_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HuntPreyStateNotify.prey_list)
}
void HuntPreyStateNotify::unsafe_arena_set_allocated_prey_drop_item_list(
    ::sg::ItemDropList* prey_drop_item_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete prey_drop_item_list_;
  }
  prey_drop_item_list_ = prey_drop_item_list;
  if (prey_drop_item_list) {
    set_has_prey_drop_item_list();
  } else {
    clear_has_prey_drop_item_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.HuntPreyStateNotify.prey_drop_item_list)
}
void HuntPreyStateNotify::clear_prey_drop_item_list() {
  if (prey_drop_item_list_ != NULL) prey_drop_item_list_->Clear();
  clear_has_prey_drop_item_list();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntPreyStateNotify::kGroundidFieldNumber;
const int HuntPreyStateNotify::kPreyListFieldNumber;
const int HuntPreyStateNotify::kPreyDropItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntPreyStateNotify::HuntPreyStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_UserHunt_2eproto::scc_info_HuntPreyStateNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.HuntPreyStateNotify)
}
HuntPreyStateNotify::HuntPreyStateNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPreyStateNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.HuntPreyStateNotify)
}
HuntPreyStateNotify::HuntPreyStateNotify(const HuntPreyStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prey_list()) {
    prey_list_ = new ::sg::HuntPreyList(*from.prey_list_);
  } else {
    prey_list_ = NULL;
  }
  if (from.has_prey_drop_item_list()) {
    prey_drop_item_list_ = new ::sg::ItemDropList(*from.prey_drop_item_list_);
  } else {
    prey_drop_item_list_ = NULL;
  }
  groundid_ = from.groundid_;
  // @@protoc_insertion_point(copy_constructor:sg.HuntPreyStateNotify)
}

void HuntPreyStateNotify::SharedCtor() {
  ::memset(&prey_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groundid_) -
      reinterpret_cast<char*>(&prey_list_)) + sizeof(groundid_));
}

HuntPreyStateNotify::~HuntPreyStateNotify() {
  // @@protoc_insertion_point(destructor:sg.HuntPreyStateNotify)
  SharedDtor();
}

void HuntPreyStateNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete prey_list_;
  if (this != internal_default_instance()) delete prey_drop_item_list_;
}

void HuntPreyStateNotify::ArenaDtor(void* object) {
  HuntPreyStateNotify* _this = reinterpret_cast< HuntPreyStateNotify* >(object);
  (void)_this;
}
void HuntPreyStateNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HuntPreyStateNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HuntPreyStateNotify::descriptor() {
  ::protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntPreyStateNotify& HuntPreyStateNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_UserHunt_2eproto::scc_info_HuntPreyStateNotify.base);
  return *internal_default_instance();
}


void HuntPreyStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.HuntPreyStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(prey_list_ != NULL);
      prey_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prey_drop_item_list_ != NULL);
      prey_drop_item_list_->Clear();
    }
  }
  groundid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuntPreyStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.HuntPreyStateNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groundid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_groundid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groundid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.HuntPreyList prey_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prey_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.ItemDropList prey_drop_item_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prey_drop_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.HuntPreyStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.HuntPreyStateNotify)
  return false;
#undef DO_
}

void HuntPreyStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.HuntPreyStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groundid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groundid(), output);
  }

  // required .sg.HuntPreyList prey_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_prey_list(), output);
  }

  // optional .sg.ItemDropList prey_drop_item_list = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_prey_drop_item_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.HuntPreyStateNotify)
}

::google::protobuf::uint8* HuntPreyStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.HuntPreyStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groundid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groundid(), target);
  }

  // required .sg.HuntPreyList prey_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_prey_list(), deterministic, target);
  }

  // optional .sg.ItemDropList prey_drop_item_list = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_prey_drop_item_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.HuntPreyStateNotify)
  return target;
}

size_t HuntPreyStateNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.HuntPreyStateNotify)
  size_t total_size = 0;

  if (has_prey_list()) {
    // required .sg.HuntPreyList prey_list = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prey_list_);
  }

  if (has_groundid()) {
    // required uint64 groundid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());
  }

  return total_size;
}
size_t HuntPreyStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.HuntPreyStateNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .sg.HuntPreyList prey_list = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prey_list_);

    // required uint64 groundid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .sg.ItemDropList prey_drop_item_list = 11;
  if (has_prey_drop_item_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prey_drop_item_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuntPreyStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.HuntPreyStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntPreyStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntPreyStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.HuntPreyStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.HuntPreyStateNotify)
    MergeFrom(*source);
  }
}

void HuntPreyStateNotify::MergeFrom(const HuntPreyStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.HuntPreyStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_prey_list()->::sg::HuntPreyList::MergeFrom(from.prey_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_prey_drop_item_list()->::sg::ItemDropList::MergeFrom(from.prey_drop_item_list());
    }
    if (cached_has_bits & 0x00000004u) {
      groundid_ = from.groundid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HuntPreyStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.HuntPreyStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntPreyStateNotify::CopyFrom(const HuntPreyStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.HuntPreyStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntPreyStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (has_prey_list()) {
    if (!this->prey_list_->IsInitialized()) return false;
  }
  if (has_prey_drop_item_list()) {
    if (!this->prey_drop_item_list_->IsInitialized()) return false;
  }
  return true;
}

void HuntPreyStateNotify::Swap(HuntPreyStateNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HuntPreyStateNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void HuntPreyStateNotify::UnsafeArenaSwap(HuntPreyStateNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HuntPreyStateNotify::InternalSwap(HuntPreyStateNotify* other) {
  using std::swap;
  swap(prey_list_, other->prey_list_);
  swap(prey_drop_item_list_, other->prey_drop_item_list_);
  swap(groundid_, other->groundid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HuntPreyStateNotify::GetMetadata() const {
  protobuf_UserHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_UserHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HuntGroundInfo* Arena::CreateMaybeMessage< ::sg::HuntGroundInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HuntGroundInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HuntPrey* Arena::CreateMaybeMessage< ::sg::HuntPrey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HuntPrey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HuntPreyList* Arena::CreateMaybeMessage< ::sg::HuntPreyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HuntPreyList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HuntPreyDrop* Arena::CreateMaybeMessage< ::sg::HuntPreyDrop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HuntPreyDrop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HuntPreyDropList* Arena::CreateMaybeMessage< ::sg::HuntPreyDropList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HuntPreyDropList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserHuntService_HuntRequest* Arena::CreateMaybeMessage< ::sg::UserHuntService_HuntRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserHuntService_HuntRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserHuntService_HuntResponse* Arena::CreateMaybeMessage< ::sg::UserHuntService_HuntResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserHuntService_HuntResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserHuntService* Arena::CreateMaybeMessage< ::sg::UserHuntService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserHuntService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HuntGroundStateNotify* Arena::CreateMaybeMessage< ::sg::HuntGroundStateNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HuntGroundStateNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::HuntPreyStateNotify* Arena::CreateMaybeMessage< ::sg::HuntPreyStateNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::HuntPreyStateNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
