// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserBean.proto

#ifndef PROTOBUF_INCLUDED_UserBean_2eproto
#define PROTOBUF_INCLUDED_UserBean_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_UserBean_2eproto 

namespace protobuf_UserBean_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[24];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_UserBean_2eproto
namespace sg {
class AccountLoginService;
class AccountLoginServiceDefaultTypeInternal;
extern AccountLoginServiceDefaultTypeInternal _AccountLoginService_default_instance_;
class AccountLoginService_LoginRequest;
class AccountLoginService_LoginRequestDefaultTypeInternal;
extern AccountLoginService_LoginRequestDefaultTypeInternal _AccountLoginService_LoginRequest_default_instance_;
class AccountLoginService_LoginResponse;
class AccountLoginService_LoginResponseDefaultTypeInternal;
extern AccountLoginService_LoginResponseDefaultTypeInternal _AccountLoginService_LoginResponse_default_instance_;
class AccountReloginService;
class AccountReloginServiceDefaultTypeInternal;
extern AccountReloginServiceDefaultTypeInternal _AccountReloginService_default_instance_;
class AccountReloginService_ReloginRequest;
class AccountReloginService_ReloginRequestDefaultTypeInternal;
extern AccountReloginService_ReloginRequestDefaultTypeInternal _AccountReloginService_ReloginRequest_default_instance_;
class AccountReloginService_ReloginResponse;
class AccountReloginService_ReloginResponseDefaultTypeInternal;
extern AccountReloginService_ReloginResponseDefaultTypeInternal _AccountReloginService_ReloginResponse_default_instance_;
class ErrorNo;
class ErrorNoDefaultTypeInternal;
extern ErrorNoDefaultTypeInternal _ErrorNo_default_instance_;
class FastRegisterAccountService;
class FastRegisterAccountServiceDefaultTypeInternal;
extern FastRegisterAccountServiceDefaultTypeInternal _FastRegisterAccountService_default_instance_;
class FastRegisterAccountService_RegisterRequest;
class FastRegisterAccountService_RegisterRequestDefaultTypeInternal;
extern FastRegisterAccountService_RegisterRequestDefaultTypeInternal _FastRegisterAccountService_RegisterRequest_default_instance_;
class FastRegisterAccountService_RegisterResponse;
class FastRegisterAccountService_RegisterResponseDefaultTypeInternal;
extern FastRegisterAccountService_RegisterResponseDefaultTypeInternal _FastRegisterAccountService_RegisterResponse_default_instance_;
class PlayerJoinService;
class PlayerJoinServiceDefaultTypeInternal;
extern PlayerJoinServiceDefaultTypeInternal _PlayerJoinService_default_instance_;
class PlayerJoinService_JoinRequest;
class PlayerJoinService_JoinRequestDefaultTypeInternal;
extern PlayerJoinService_JoinRequestDefaultTypeInternal _PlayerJoinService_JoinRequest_default_instance_;
class PlayerJoinService_JoinResponse;
class PlayerJoinService_JoinResponseDefaultTypeInternal;
extern PlayerJoinService_JoinResponseDefaultTypeInternal _PlayerJoinService_JoinResponse_default_instance_;
class RegisterAccountService;
class RegisterAccountServiceDefaultTypeInternal;
extern RegisterAccountServiceDefaultTypeInternal _RegisterAccountService_default_instance_;
class RegisterAccountService_RegisterRequest;
class RegisterAccountService_RegisterRequestDefaultTypeInternal;
extern RegisterAccountService_RegisterRequestDefaultTypeInternal _RegisterAccountService_RegisterRequest_default_instance_;
class RegisterAccountService_RegisterResponse;
class RegisterAccountService_RegisterResponseDefaultTypeInternal;
extern RegisterAccountService_RegisterResponseDefaultTypeInternal _RegisterAccountService_RegisterResponse_default_instance_;
class UserAttrService;
class UserAttrServiceDefaultTypeInternal;
extern UserAttrServiceDefaultTypeInternal _UserAttrService_default_instance_;
class UserAttrService_UserAttrRequest;
class UserAttrService_UserAttrRequestDefaultTypeInternal;
extern UserAttrService_UserAttrRequestDefaultTypeInternal _UserAttrService_UserAttrRequest_default_instance_;
class UserAttrService_UserAttrResponse;
class UserAttrService_UserAttrResponseDefaultTypeInternal;
extern UserAttrService_UserAttrResponseDefaultTypeInternal _UserAttrService_UserAttrResponse_default_instance_;
class UserAttribute;
class UserAttributeDefaultTypeInternal;
extern UserAttributeDefaultTypeInternal _UserAttribute_default_instance_;
class UserLevelUpNotify;
class UserLevelUpNotifyDefaultTypeInternal;
extern UserLevelUpNotifyDefaultTypeInternal _UserLevelUpNotify_default_instance_;
class UserStateService;
class UserStateServiceDefaultTypeInternal;
extern UserStateServiceDefaultTypeInternal _UserStateService_default_instance_;
class UserStateService_UserStateRequest;
class UserStateService_UserStateRequestDefaultTypeInternal;
extern UserStateService_UserStateRequestDefaultTypeInternal _UserStateService_UserStateRequest_default_instance_;
class UserStateService_UserStateResponse;
class UserStateService_UserStateResponseDefaultTypeInternal;
extern UserStateService_UserStateResponseDefaultTypeInternal _UserStateService_UserStateResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::AccountLoginService* Arena::CreateMaybeMessage<::sg::AccountLoginService>(Arena*);
template<> ::sg::AccountLoginService_LoginRequest* Arena::CreateMaybeMessage<::sg::AccountLoginService_LoginRequest>(Arena*);
template<> ::sg::AccountLoginService_LoginResponse* Arena::CreateMaybeMessage<::sg::AccountLoginService_LoginResponse>(Arena*);
template<> ::sg::AccountReloginService* Arena::CreateMaybeMessage<::sg::AccountReloginService>(Arena*);
template<> ::sg::AccountReloginService_ReloginRequest* Arena::CreateMaybeMessage<::sg::AccountReloginService_ReloginRequest>(Arena*);
template<> ::sg::AccountReloginService_ReloginResponse* Arena::CreateMaybeMessage<::sg::AccountReloginService_ReloginResponse>(Arena*);
template<> ::sg::ErrorNo* Arena::CreateMaybeMessage<::sg::ErrorNo>(Arena*);
template<> ::sg::FastRegisterAccountService* Arena::CreateMaybeMessage<::sg::FastRegisterAccountService>(Arena*);
template<> ::sg::FastRegisterAccountService_RegisterRequest* Arena::CreateMaybeMessage<::sg::FastRegisterAccountService_RegisterRequest>(Arena*);
template<> ::sg::FastRegisterAccountService_RegisterResponse* Arena::CreateMaybeMessage<::sg::FastRegisterAccountService_RegisterResponse>(Arena*);
template<> ::sg::PlayerJoinService* Arena::CreateMaybeMessage<::sg::PlayerJoinService>(Arena*);
template<> ::sg::PlayerJoinService_JoinRequest* Arena::CreateMaybeMessage<::sg::PlayerJoinService_JoinRequest>(Arena*);
template<> ::sg::PlayerJoinService_JoinResponse* Arena::CreateMaybeMessage<::sg::PlayerJoinService_JoinResponse>(Arena*);
template<> ::sg::RegisterAccountService* Arena::CreateMaybeMessage<::sg::RegisterAccountService>(Arena*);
template<> ::sg::RegisterAccountService_RegisterRequest* Arena::CreateMaybeMessage<::sg::RegisterAccountService_RegisterRequest>(Arena*);
template<> ::sg::RegisterAccountService_RegisterResponse* Arena::CreateMaybeMessage<::sg::RegisterAccountService_RegisterResponse>(Arena*);
template<> ::sg::UserAttrService* Arena::CreateMaybeMessage<::sg::UserAttrService>(Arena*);
template<> ::sg::UserAttrService_UserAttrRequest* Arena::CreateMaybeMessage<::sg::UserAttrService_UserAttrRequest>(Arena*);
template<> ::sg::UserAttrService_UserAttrResponse* Arena::CreateMaybeMessage<::sg::UserAttrService_UserAttrResponse>(Arena*);
template<> ::sg::UserAttribute* Arena::CreateMaybeMessage<::sg::UserAttribute>(Arena*);
template<> ::sg::UserLevelUpNotify* Arena::CreateMaybeMessage<::sg::UserLevelUpNotify>(Arena*);
template<> ::sg::UserStateService* Arena::CreateMaybeMessage<::sg::UserStateService>(Arena*);
template<> ::sg::UserStateService_UserStateRequest* Arena::CreateMaybeMessage<::sg::UserStateService_UserStateRequest>(Arena*);
template<> ::sg::UserStateService_UserStateResponse* Arena::CreateMaybeMessage<::sg::UserStateService_UserStateResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum ErrorNo_ERROR_NO {
  ErrorNo_ERROR_NO_RELOGIN = -9000
};
bool ErrorNo_ERROR_NO_IsValid(int value);
const ErrorNo_ERROR_NO ErrorNo_ERROR_NO_ERROR_NO_MIN = ErrorNo_ERROR_NO_RELOGIN;
const ErrorNo_ERROR_NO ErrorNo_ERROR_NO_ERROR_NO_MAX = ErrorNo_ERROR_NO_RELOGIN;
const int ErrorNo_ERROR_NO_ERROR_NO_ARRAYSIZE = ErrorNo_ERROR_NO_ERROR_NO_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorNo_ERROR_NO_descriptor();
inline const ::std::string& ErrorNo_ERROR_NO_Name(ErrorNo_ERROR_NO value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorNo_ERROR_NO_descriptor(), value);
}
inline bool ErrorNo_ERROR_NO_Parse(
    const ::std::string& name, ErrorNo_ERROR_NO* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorNo_ERROR_NO>(
    ErrorNo_ERROR_NO_descriptor(), name, value);
}
enum RegisterAccountService_RESULT {
  RegisterAccountService_RESULT_OK = 0,
  RegisterAccountService_RESULT_UID_OR_PWD_TOO_SHORT = -1,
  RegisterAccountService_RESULT_UID_ALREADY_EXISTS = -2,
  RegisterAccountService_RESULT_UID_MUST_START_WITH_A_LETTER = -3,
  RegisterAccountService_RESULT_EMAIL_INVALID = -4
};
bool RegisterAccountService_RESULT_IsValid(int value);
const RegisterAccountService_RESULT RegisterAccountService_RESULT_RESULT_MIN = RegisterAccountService_RESULT_EMAIL_INVALID;
const RegisterAccountService_RESULT RegisterAccountService_RESULT_RESULT_MAX = RegisterAccountService_RESULT_OK;
const int RegisterAccountService_RESULT_RESULT_ARRAYSIZE = RegisterAccountService_RESULT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegisterAccountService_RESULT_descriptor();
inline const ::std::string& RegisterAccountService_RESULT_Name(RegisterAccountService_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegisterAccountService_RESULT_descriptor(), value);
}
inline bool RegisterAccountService_RESULT_Parse(
    const ::std::string& name, RegisterAccountService_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegisterAccountService_RESULT>(
    RegisterAccountService_RESULT_descriptor(), name, value);
}
enum AccountLoginService_RESULT {
  AccountLoginService_RESULT_OK = 0,
  AccountLoginService_RESULT_UID_OR_PWD_IS_NOT_VALID = -1,
  AccountLoginService_RESULT_USER_ASSETS_LOAD_FAILED = -2,
  AccountLoginService_RESULT_TOO_MANY_REQUEST = -3
};
bool AccountLoginService_RESULT_IsValid(int value);
const AccountLoginService_RESULT AccountLoginService_RESULT_RESULT_MIN = AccountLoginService_RESULT_TOO_MANY_REQUEST;
const AccountLoginService_RESULT AccountLoginService_RESULT_RESULT_MAX = AccountLoginService_RESULT_OK;
const int AccountLoginService_RESULT_RESULT_ARRAYSIZE = AccountLoginService_RESULT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccountLoginService_RESULT_descriptor();
inline const ::std::string& AccountLoginService_RESULT_Name(AccountLoginService_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccountLoginService_RESULT_descriptor(), value);
}
inline bool AccountLoginService_RESULT_Parse(
    const ::std::string& name, AccountLoginService_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountLoginService_RESULT>(
    AccountLoginService_RESULT_descriptor(), name, value);
}
enum AccountReloginService_RESULT {
  AccountReloginService_RESULT_OK = 0,
  AccountReloginService_RESULT_FAILED = 1
};
bool AccountReloginService_RESULT_IsValid(int value);
const AccountReloginService_RESULT AccountReloginService_RESULT_RESULT_MIN = AccountReloginService_RESULT_OK;
const AccountReloginService_RESULT AccountReloginService_RESULT_RESULT_MAX = AccountReloginService_RESULT_FAILED;
const int AccountReloginService_RESULT_RESULT_ARRAYSIZE = AccountReloginService_RESULT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccountReloginService_RESULT_descriptor();
inline const ::std::string& AccountReloginService_RESULT_Name(AccountReloginService_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccountReloginService_RESULT_descriptor(), value);
}
inline bool AccountReloginService_RESULT_Parse(
    const ::std::string& name, AccountReloginService_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountReloginService_RESULT>(
    AccountReloginService_RESULT_descriptor(), name, value);
}
enum PlayerJoinService_RESULT {
  PlayerJoinService_RESULT_OK = 0,
  PlayerJoinService_RESULT_FAILED = 1
};
bool PlayerJoinService_RESULT_IsValid(int value);
const PlayerJoinService_RESULT PlayerJoinService_RESULT_RESULT_MIN = PlayerJoinService_RESULT_OK;
const PlayerJoinService_RESULT PlayerJoinService_RESULT_RESULT_MAX = PlayerJoinService_RESULT_FAILED;
const int PlayerJoinService_RESULT_RESULT_ARRAYSIZE = PlayerJoinService_RESULT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerJoinService_RESULT_descriptor();
inline const ::std::string& PlayerJoinService_RESULT_Name(PlayerJoinService_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerJoinService_RESULT_descriptor(), value);
}
inline bool PlayerJoinService_RESULT_Parse(
    const ::std::string& name, PlayerJoinService_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerJoinService_RESULT>(
    PlayerJoinService_RESULT_descriptor(), name, value);
}
enum UserAttrService_USER_CMD {
  UserAttrService_USER_CMD_QUERY = 1,
  UserAttrService_USER_CMD_RENAME = 2,
  UserAttrService_USER_CMD_CHANGE_PORTRAIT = 3,
  UserAttrService_USER_CMD_WRITE_SIGNATURE = 4,
  UserAttrService_USER_CMD_CHANGE_PORTRAIT_FRAME = 5
};
bool UserAttrService_USER_CMD_IsValid(int value);
const UserAttrService_USER_CMD UserAttrService_USER_CMD_USER_CMD_MIN = UserAttrService_USER_CMD_QUERY;
const UserAttrService_USER_CMD UserAttrService_USER_CMD_USER_CMD_MAX = UserAttrService_USER_CMD_CHANGE_PORTRAIT_FRAME;
const int UserAttrService_USER_CMD_USER_CMD_ARRAYSIZE = UserAttrService_USER_CMD_USER_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserAttrService_USER_CMD_descriptor();
inline const ::std::string& UserAttrService_USER_CMD_Name(UserAttrService_USER_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserAttrService_USER_CMD_descriptor(), value);
}
inline bool UserAttrService_USER_CMD_Parse(
    const ::std::string& name, UserAttrService_USER_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserAttrService_USER_CMD>(
    UserAttrService_USER_CMD_descriptor(), name, value);
}
enum UserStateService_CMD {
  UserStateService_CMD_QUERY = 1,
  UserStateService_CMD_CHANGE_GUIDE = 2
};
bool UserStateService_CMD_IsValid(int value);
const UserStateService_CMD UserStateService_CMD_CMD_MIN = UserStateService_CMD_QUERY;
const UserStateService_CMD UserStateService_CMD_CMD_MAX = UserStateService_CMD_CHANGE_GUIDE;
const int UserStateService_CMD_CMD_ARRAYSIZE = UserStateService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserStateService_CMD_descriptor();
inline const ::std::string& UserStateService_CMD_Name(UserStateService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserStateService_CMD_descriptor(), value);
}
inline bool UserStateService_CMD_Parse(
    const ::std::string& name, UserStateService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserStateService_CMD>(
    UserStateService_CMD_descriptor(), name, value);
}
// ===================================================================

class ErrorNo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ErrorNo) */ {
 public:
  ErrorNo();
  virtual ~ErrorNo();

  ErrorNo(const ErrorNo& from);

  inline ErrorNo& operator=(const ErrorNo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorNo(ErrorNo&& from) noexcept
    : ErrorNo() {
    *this = ::std::move(from);
  }

  inline ErrorNo& operator=(ErrorNo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorNo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorNo* internal_default_instance() {
    return reinterpret_cast<const ErrorNo*>(
               &_ErrorNo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ErrorNo* other);
  void Swap(ErrorNo* other);
  friend void swap(ErrorNo& a, ErrorNo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorNo* New() const final {
    return CreateMaybeMessage<ErrorNo>(NULL);
  }

  ErrorNo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorNo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorNo& from);
  void MergeFrom(const ErrorNo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorNo* other);
  protected:
  explicit ErrorNo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ErrorNo_ERROR_NO ERROR_NO;
  static const ERROR_NO RELOGIN =
    ErrorNo_ERROR_NO_RELOGIN;
  static inline bool ERROR_NO_IsValid(int value) {
    return ErrorNo_ERROR_NO_IsValid(value);
  }
  static const ERROR_NO ERROR_NO_MIN =
    ErrorNo_ERROR_NO_ERROR_NO_MIN;
  static const ERROR_NO ERROR_NO_MAX =
    ErrorNo_ERROR_NO_ERROR_NO_MAX;
  static const int ERROR_NO_ARRAYSIZE =
    ErrorNo_ERROR_NO_ERROR_NO_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ERROR_NO_descriptor() {
    return ErrorNo_ERROR_NO_descriptor();
  }
  static inline const ::std::string& ERROR_NO_Name(ERROR_NO value) {
    return ErrorNo_ERROR_NO_Name(value);
  }
  static inline bool ERROR_NO_Parse(const ::std::string& name,
      ERROR_NO* value) {
    return ErrorNo_ERROR_NO_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_desc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc(
      ::std::string* desc);

  // required int32 error_no = 1;
  bool has_error_no() const;
  void clear_error_no();
  static const int kErrorNoFieldNumber = 1;
  ::google::protobuf::int32 error_no() const;
  void set_error_no(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.ErrorNo)
 private:
  void set_has_error_no();
  void clear_has_error_no();
  void set_has_desc();
  void clear_has_desc();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::int32 error_no_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterAccountService_RegisterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.RegisterAccountService.RegisterRequest) */ {
 public:
  RegisterAccountService_RegisterRequest();
  virtual ~RegisterAccountService_RegisterRequest();

  RegisterAccountService_RegisterRequest(const RegisterAccountService_RegisterRequest& from);

  inline RegisterAccountService_RegisterRequest& operator=(const RegisterAccountService_RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterAccountService_RegisterRequest(RegisterAccountService_RegisterRequest&& from) noexcept
    : RegisterAccountService_RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterAccountService_RegisterRequest& operator=(RegisterAccountService_RegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterAccountService_RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountService_RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountService_RegisterRequest*>(
               &_RegisterAccountService_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(RegisterAccountService_RegisterRequest* other);
  void Swap(RegisterAccountService_RegisterRequest* other);
  friend void swap(RegisterAccountService_RegisterRequest& a, RegisterAccountService_RegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountService_RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterAccountService_RegisterRequest>(NULL);
  }

  RegisterAccountService_RegisterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountService_RegisterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterAccountService_RegisterRequest& from);
  void MergeFrom(const RegisterAccountService_RegisterRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountService_RegisterRequest* other);
  protected:
  explicit RegisterAccountService_RegisterRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const void* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_uid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      ::std::string* uid);

  // required bytes pwd = 2;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pwd();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pwd(
      ::std::string* pwd);

  // required bytes nick = 3;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required bytes email = 4;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const void* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_email();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      ::std::string* email);

  // @@protoc_insertion_point(class_scope:sg.RegisterAccountService.RegisterRequest)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_nick();
  void clear_has_nick();
  void set_has_email();
  void clear_has_email();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterAccountService_RegisterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.RegisterAccountService.RegisterResponse) */ {
 public:
  RegisterAccountService_RegisterResponse();
  virtual ~RegisterAccountService_RegisterResponse();

  RegisterAccountService_RegisterResponse(const RegisterAccountService_RegisterResponse& from);

  inline RegisterAccountService_RegisterResponse& operator=(const RegisterAccountService_RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterAccountService_RegisterResponse(RegisterAccountService_RegisterResponse&& from) noexcept
    : RegisterAccountService_RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterAccountService_RegisterResponse& operator=(RegisterAccountService_RegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterAccountService_RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountService_RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountService_RegisterResponse*>(
               &_RegisterAccountService_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(RegisterAccountService_RegisterResponse* other);
  void Swap(RegisterAccountService_RegisterResponse* other);
  friend void swap(RegisterAccountService_RegisterResponse& a, RegisterAccountService_RegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountService_RegisterResponse* New() const final {
    return CreateMaybeMessage<RegisterAccountService_RegisterResponse>(NULL);
  }

  RegisterAccountService_RegisterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountService_RegisterResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterAccountService_RegisterResponse& from);
  void MergeFrom(const RegisterAccountService_RegisterResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountService_RegisterResponse* other);
  protected:
  explicit RegisterAccountService_RegisterResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.RegisterAccountService.RESULT result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::sg::RegisterAccountService_RESULT result() const;
  void set_result(::sg::RegisterAccountService_RESULT value);

  // @@protoc_insertion_point(class_scope:sg.RegisterAccountService.RegisterResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterAccountService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.RegisterAccountService) */ {
 public:
  RegisterAccountService();
  virtual ~RegisterAccountService();

  RegisterAccountService(const RegisterAccountService& from);

  inline RegisterAccountService& operator=(const RegisterAccountService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterAccountService(RegisterAccountService&& from) noexcept
    : RegisterAccountService() {
    *this = ::std::move(from);
  }

  inline RegisterAccountService& operator=(RegisterAccountService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterAccountService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountService* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountService*>(
               &_RegisterAccountService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(RegisterAccountService* other);
  void Swap(RegisterAccountService* other);
  friend void swap(RegisterAccountService& a, RegisterAccountService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountService* New() const final {
    return CreateMaybeMessage<RegisterAccountService>(NULL);
  }

  RegisterAccountService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterAccountService& from);
  void MergeFrom(const RegisterAccountService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountService* other);
  protected:
  explicit RegisterAccountService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegisterAccountService_RegisterRequest RegisterRequest;
  typedef RegisterAccountService_RegisterResponse RegisterResponse;

  typedef RegisterAccountService_RESULT RESULT;
  static const RESULT OK =
    RegisterAccountService_RESULT_OK;
  static const RESULT UID_OR_PWD_TOO_SHORT =
    RegisterAccountService_RESULT_UID_OR_PWD_TOO_SHORT;
  static const RESULT UID_ALREADY_EXISTS =
    RegisterAccountService_RESULT_UID_ALREADY_EXISTS;
  static const RESULT UID_MUST_START_WITH_A_LETTER =
    RegisterAccountService_RESULT_UID_MUST_START_WITH_A_LETTER;
  static const RESULT EMAIL_INVALID =
    RegisterAccountService_RESULT_EMAIL_INVALID;
  static inline bool RESULT_IsValid(int value) {
    return RegisterAccountService_RESULT_IsValid(value);
  }
  static const RESULT RESULT_MIN =
    RegisterAccountService_RESULT_RESULT_MIN;
  static const RESULT RESULT_MAX =
    RegisterAccountService_RESULT_RESULT_MAX;
  static const int RESULT_ARRAYSIZE =
    RegisterAccountService_RESULT_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_descriptor() {
    return RegisterAccountService_RESULT_descriptor();
  }
  static inline const ::std::string& RESULT_Name(RESULT value) {
    return RegisterAccountService_RESULT_Name(value);
  }
  static inline bool RESULT_Parse(const ::std::string& name,
      RESULT* value) {
    return RegisterAccountService_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.RegisterAccountService.RegisterRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::RegisterAccountService_RegisterRequest& _internal_req() const;
  public:
  const ::sg::RegisterAccountService_RegisterRequest& req() const;
  ::sg::RegisterAccountService_RegisterRequest* release_req();
  ::sg::RegisterAccountService_RegisterRequest* mutable_req();
  void set_allocated_req(::sg::RegisterAccountService_RegisterRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::RegisterAccountService_RegisterRequest* req);
  ::sg::RegisterAccountService_RegisterRequest* unsafe_arena_release_req();

  // optional .sg.RegisterAccountService.RegisterResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::RegisterAccountService_RegisterResponse& _internal_resp() const;
  public:
  const ::sg::RegisterAccountService_RegisterResponse& resp() const;
  ::sg::RegisterAccountService_RegisterResponse* release_resp();
  ::sg::RegisterAccountService_RegisterResponse* mutable_resp();
  void set_allocated_resp(::sg::RegisterAccountService_RegisterResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::RegisterAccountService_RegisterResponse* resp);
  ::sg::RegisterAccountService_RegisterResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.RegisterAccountService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::RegisterAccountService_RegisterRequest* req_;
  ::sg::RegisterAccountService_RegisterResponse* resp_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FastRegisterAccountService_RegisterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FastRegisterAccountService.RegisterRequest) */ {
 public:
  FastRegisterAccountService_RegisterRequest();
  virtual ~FastRegisterAccountService_RegisterRequest();

  FastRegisterAccountService_RegisterRequest(const FastRegisterAccountService_RegisterRequest& from);

  inline FastRegisterAccountService_RegisterRequest& operator=(const FastRegisterAccountService_RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FastRegisterAccountService_RegisterRequest(FastRegisterAccountService_RegisterRequest&& from) noexcept
    : FastRegisterAccountService_RegisterRequest() {
    *this = ::std::move(from);
  }

  inline FastRegisterAccountService_RegisterRequest& operator=(FastRegisterAccountService_RegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FastRegisterAccountService_RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastRegisterAccountService_RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const FastRegisterAccountService_RegisterRequest*>(
               &_FastRegisterAccountService_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(FastRegisterAccountService_RegisterRequest* other);
  void Swap(FastRegisterAccountService_RegisterRequest* other);
  friend void swap(FastRegisterAccountService_RegisterRequest& a, FastRegisterAccountService_RegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FastRegisterAccountService_RegisterRequest* New() const final {
    return CreateMaybeMessage<FastRegisterAccountService_RegisterRequest>(NULL);
  }

  FastRegisterAccountService_RegisterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FastRegisterAccountService_RegisterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FastRegisterAccountService_RegisterRequest& from);
  void MergeFrom(const FastRegisterAccountService_RegisterRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastRegisterAccountService_RegisterRequest* other);
  protected:
  explicit FastRegisterAccountService_RegisterRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sg.FastRegisterAccountService.RegisterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FastRegisterAccountService_RegisterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FastRegisterAccountService.RegisterResponse) */ {
 public:
  FastRegisterAccountService_RegisterResponse();
  virtual ~FastRegisterAccountService_RegisterResponse();

  FastRegisterAccountService_RegisterResponse(const FastRegisterAccountService_RegisterResponse& from);

  inline FastRegisterAccountService_RegisterResponse& operator=(const FastRegisterAccountService_RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FastRegisterAccountService_RegisterResponse(FastRegisterAccountService_RegisterResponse&& from) noexcept
    : FastRegisterAccountService_RegisterResponse() {
    *this = ::std::move(from);
  }

  inline FastRegisterAccountService_RegisterResponse& operator=(FastRegisterAccountService_RegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FastRegisterAccountService_RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastRegisterAccountService_RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const FastRegisterAccountService_RegisterResponse*>(
               &_FastRegisterAccountService_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(FastRegisterAccountService_RegisterResponse* other);
  void Swap(FastRegisterAccountService_RegisterResponse* other);
  friend void swap(FastRegisterAccountService_RegisterResponse& a, FastRegisterAccountService_RegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FastRegisterAccountService_RegisterResponse* New() const final {
    return CreateMaybeMessage<FastRegisterAccountService_RegisterResponse>(NULL);
  }

  FastRegisterAccountService_RegisterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FastRegisterAccountService_RegisterResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FastRegisterAccountService_RegisterResponse& from);
  void MergeFrom(const FastRegisterAccountService_RegisterResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastRegisterAccountService_RegisterResponse* other);
  protected:
  explicit FastRegisterAccountService_RegisterResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const void* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_uid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      ::std::string* uid);

  // required bytes pwd = 2;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pwd();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pwd(
      ::std::string* pwd);

  // required bytes nick = 3;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required bytes email = 4;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const void* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_email();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      ::std::string* email);

  // @@protoc_insertion_point(class_scope:sg.FastRegisterAccountService.RegisterResponse)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_nick();
  void clear_has_nick();
  void set_has_email();
  void clear_has_email();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FastRegisterAccountService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.FastRegisterAccountService) */ {
 public:
  FastRegisterAccountService();
  virtual ~FastRegisterAccountService();

  FastRegisterAccountService(const FastRegisterAccountService& from);

  inline FastRegisterAccountService& operator=(const FastRegisterAccountService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FastRegisterAccountService(FastRegisterAccountService&& from) noexcept
    : FastRegisterAccountService() {
    *this = ::std::move(from);
  }

  inline FastRegisterAccountService& operator=(FastRegisterAccountService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FastRegisterAccountService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastRegisterAccountService* internal_default_instance() {
    return reinterpret_cast<const FastRegisterAccountService*>(
               &_FastRegisterAccountService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(FastRegisterAccountService* other);
  void Swap(FastRegisterAccountService* other);
  friend void swap(FastRegisterAccountService& a, FastRegisterAccountService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FastRegisterAccountService* New() const final {
    return CreateMaybeMessage<FastRegisterAccountService>(NULL);
  }

  FastRegisterAccountService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FastRegisterAccountService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FastRegisterAccountService& from);
  void MergeFrom(const FastRegisterAccountService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastRegisterAccountService* other);
  protected:
  explicit FastRegisterAccountService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FastRegisterAccountService_RegisterRequest RegisterRequest;
  typedef FastRegisterAccountService_RegisterResponse RegisterResponse;

  // accessors -------------------------------------------------------

  // optional .sg.FastRegisterAccountService.RegisterRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::FastRegisterAccountService_RegisterRequest& _internal_req() const;
  public:
  const ::sg::FastRegisterAccountService_RegisterRequest& req() const;
  ::sg::FastRegisterAccountService_RegisterRequest* release_req();
  ::sg::FastRegisterAccountService_RegisterRequest* mutable_req();
  void set_allocated_req(::sg::FastRegisterAccountService_RegisterRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::FastRegisterAccountService_RegisterRequest* req);
  ::sg::FastRegisterAccountService_RegisterRequest* unsafe_arena_release_req();

  // optional .sg.FastRegisterAccountService.RegisterResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::FastRegisterAccountService_RegisterResponse& _internal_resp() const;
  public:
  const ::sg::FastRegisterAccountService_RegisterResponse& resp() const;
  ::sg::FastRegisterAccountService_RegisterResponse* release_resp();
  ::sg::FastRegisterAccountService_RegisterResponse* mutable_resp();
  void set_allocated_resp(::sg::FastRegisterAccountService_RegisterResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::FastRegisterAccountService_RegisterResponse* resp);
  ::sg::FastRegisterAccountService_RegisterResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.FastRegisterAccountService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::FastRegisterAccountService_RegisterRequest* req_;
  ::sg::FastRegisterAccountService_RegisterResponse* resp_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountLoginService_LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.AccountLoginService.LoginRequest) */ {
 public:
  AccountLoginService_LoginRequest();
  virtual ~AccountLoginService_LoginRequest();

  AccountLoginService_LoginRequest(const AccountLoginService_LoginRequest& from);

  inline AccountLoginService_LoginRequest& operator=(const AccountLoginService_LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountLoginService_LoginRequest(AccountLoginService_LoginRequest&& from) noexcept
    : AccountLoginService_LoginRequest() {
    *this = ::std::move(from);
  }

  inline AccountLoginService_LoginRequest& operator=(AccountLoginService_LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLoginService_LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountLoginService_LoginRequest* internal_default_instance() {
    return reinterpret_cast<const AccountLoginService_LoginRequest*>(
               &_AccountLoginService_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(AccountLoginService_LoginRequest* other);
  void Swap(AccountLoginService_LoginRequest* other);
  friend void swap(AccountLoginService_LoginRequest& a, AccountLoginService_LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountLoginService_LoginRequest* New() const final {
    return CreateMaybeMessage<AccountLoginService_LoginRequest>(NULL);
  }

  AccountLoginService_LoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountLoginService_LoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountLoginService_LoginRequest& from);
  void MergeFrom(const AccountLoginService_LoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginService_LoginRequest* other);
  protected:
  explicit AccountLoginService_LoginRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const void* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_uid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      ::std::string* uid);

  // required bytes pwd = 2;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pwd();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pwd(
      ::std::string* pwd);

  // @@protoc_insertion_point(class_scope:sg.AccountLoginService.LoginRequest)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_pwd();
  void clear_has_pwd();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountLoginService_LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.AccountLoginService.LoginResponse) */ {
 public:
  AccountLoginService_LoginResponse();
  virtual ~AccountLoginService_LoginResponse();

  AccountLoginService_LoginResponse(const AccountLoginService_LoginResponse& from);

  inline AccountLoginService_LoginResponse& operator=(const AccountLoginService_LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountLoginService_LoginResponse(AccountLoginService_LoginResponse&& from) noexcept
    : AccountLoginService_LoginResponse() {
    *this = ::std::move(from);
  }

  inline AccountLoginService_LoginResponse& operator=(AccountLoginService_LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLoginService_LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountLoginService_LoginResponse* internal_default_instance() {
    return reinterpret_cast<const AccountLoginService_LoginResponse*>(
               &_AccountLoginService_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(AccountLoginService_LoginResponse* other);
  void Swap(AccountLoginService_LoginResponse* other);
  friend void swap(AccountLoginService_LoginResponse& a, AccountLoginService_LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountLoginService_LoginResponse* New() const final {
    return CreateMaybeMessage<AccountLoginService_LoginResponse>(NULL);
  }

  AccountLoginService_LoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountLoginService_LoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountLoginService_LoginResponse& from);
  void MergeFrom(const AccountLoginService_LoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginService_LoginResponse* other);
  protected:
  explicit AccountLoginService_LoginResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 2;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  ::google::protobuf::uint64 uuid() const;
  void set_uuid(::google::protobuf::uint64 value);

  // required .sg.AccountLoginService.RESULT result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::sg::AccountLoginService_RESULT result() const;
  void set_result(::sg::AccountLoginService_RESULT value);

  // @@protoc_insertion_point(class_scope:sg.AccountLoginService.LoginResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_uuid();
  void clear_has_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 uuid_;
  int result_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountLoginService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.AccountLoginService) */ {
 public:
  AccountLoginService();
  virtual ~AccountLoginService();

  AccountLoginService(const AccountLoginService& from);

  inline AccountLoginService& operator=(const AccountLoginService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountLoginService(AccountLoginService&& from) noexcept
    : AccountLoginService() {
    *this = ::std::move(from);
  }

  inline AccountLoginService& operator=(AccountLoginService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLoginService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountLoginService* internal_default_instance() {
    return reinterpret_cast<const AccountLoginService*>(
               &_AccountLoginService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(AccountLoginService* other);
  void Swap(AccountLoginService* other);
  friend void swap(AccountLoginService& a, AccountLoginService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountLoginService* New() const final {
    return CreateMaybeMessage<AccountLoginService>(NULL);
  }

  AccountLoginService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountLoginService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountLoginService& from);
  void MergeFrom(const AccountLoginService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginService* other);
  protected:
  explicit AccountLoginService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AccountLoginService_LoginRequest LoginRequest;
  typedef AccountLoginService_LoginResponse LoginResponse;

  typedef AccountLoginService_RESULT RESULT;
  static const RESULT OK =
    AccountLoginService_RESULT_OK;
  static const RESULT UID_OR_PWD_IS_NOT_VALID =
    AccountLoginService_RESULT_UID_OR_PWD_IS_NOT_VALID;
  static const RESULT USER_ASSETS_LOAD_FAILED =
    AccountLoginService_RESULT_USER_ASSETS_LOAD_FAILED;
  static const RESULT TOO_MANY_REQUEST =
    AccountLoginService_RESULT_TOO_MANY_REQUEST;
  static inline bool RESULT_IsValid(int value) {
    return AccountLoginService_RESULT_IsValid(value);
  }
  static const RESULT RESULT_MIN =
    AccountLoginService_RESULT_RESULT_MIN;
  static const RESULT RESULT_MAX =
    AccountLoginService_RESULT_RESULT_MAX;
  static const int RESULT_ARRAYSIZE =
    AccountLoginService_RESULT_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_descriptor() {
    return AccountLoginService_RESULT_descriptor();
  }
  static inline const ::std::string& RESULT_Name(RESULT value) {
    return AccountLoginService_RESULT_Name(value);
  }
  static inline bool RESULT_Parse(const ::std::string& name,
      RESULT* value) {
    return AccountLoginService_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.AccountLoginService.LoginRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::AccountLoginService_LoginRequest& _internal_req() const;
  public:
  const ::sg::AccountLoginService_LoginRequest& req() const;
  ::sg::AccountLoginService_LoginRequest* release_req();
  ::sg::AccountLoginService_LoginRequest* mutable_req();
  void set_allocated_req(::sg::AccountLoginService_LoginRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::AccountLoginService_LoginRequest* req);
  ::sg::AccountLoginService_LoginRequest* unsafe_arena_release_req();

  // optional .sg.AccountLoginService.LoginResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::AccountLoginService_LoginResponse& _internal_resp() const;
  public:
  const ::sg::AccountLoginService_LoginResponse& resp() const;
  ::sg::AccountLoginService_LoginResponse* release_resp();
  ::sg::AccountLoginService_LoginResponse* mutable_resp();
  void set_allocated_resp(::sg::AccountLoginService_LoginResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::AccountLoginService_LoginResponse* resp);
  ::sg::AccountLoginService_LoginResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.AccountLoginService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::AccountLoginService_LoginRequest* req_;
  ::sg::AccountLoginService_LoginResponse* resp_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountReloginService_ReloginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.AccountReloginService.ReloginRequest) */ {
 public:
  AccountReloginService_ReloginRequest();
  virtual ~AccountReloginService_ReloginRequest();

  AccountReloginService_ReloginRequest(const AccountReloginService_ReloginRequest& from);

  inline AccountReloginService_ReloginRequest& operator=(const AccountReloginService_ReloginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountReloginService_ReloginRequest(AccountReloginService_ReloginRequest&& from) noexcept
    : AccountReloginService_ReloginRequest() {
    *this = ::std::move(from);
  }

  inline AccountReloginService_ReloginRequest& operator=(AccountReloginService_ReloginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountReloginService_ReloginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountReloginService_ReloginRequest* internal_default_instance() {
    return reinterpret_cast<const AccountReloginService_ReloginRequest*>(
               &_AccountReloginService_ReloginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(AccountReloginService_ReloginRequest* other);
  void Swap(AccountReloginService_ReloginRequest* other);
  friend void swap(AccountReloginService_ReloginRequest& a, AccountReloginService_ReloginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountReloginService_ReloginRequest* New() const final {
    return CreateMaybeMessage<AccountReloginService_ReloginRequest>(NULL);
  }

  AccountReloginService_ReloginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountReloginService_ReloginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountReloginService_ReloginRequest& from);
  void MergeFrom(const AccountReloginService_ReloginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountReloginService_ReloginRequest* other);
  protected:
  explicit AccountReloginService_ReloginRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const void* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_uid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      ::std::string* uid);

  // required bytes pwd = 2;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pwd();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pwd(
      ::std::string* pwd);

  // @@protoc_insertion_point(class_scope:sg.AccountReloginService.ReloginRequest)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_pwd();
  void clear_has_pwd();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountReloginService_ReloginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.AccountReloginService.ReloginResponse) */ {
 public:
  AccountReloginService_ReloginResponse();
  virtual ~AccountReloginService_ReloginResponse();

  AccountReloginService_ReloginResponse(const AccountReloginService_ReloginResponse& from);

  inline AccountReloginService_ReloginResponse& operator=(const AccountReloginService_ReloginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountReloginService_ReloginResponse(AccountReloginService_ReloginResponse&& from) noexcept
    : AccountReloginService_ReloginResponse() {
    *this = ::std::move(from);
  }

  inline AccountReloginService_ReloginResponse& operator=(AccountReloginService_ReloginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountReloginService_ReloginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountReloginService_ReloginResponse* internal_default_instance() {
    return reinterpret_cast<const AccountReloginService_ReloginResponse*>(
               &_AccountReloginService_ReloginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(AccountReloginService_ReloginResponse* other);
  void Swap(AccountReloginService_ReloginResponse* other);
  friend void swap(AccountReloginService_ReloginResponse& a, AccountReloginService_ReloginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountReloginService_ReloginResponse* New() const final {
    return CreateMaybeMessage<AccountReloginService_ReloginResponse>(NULL);
  }

  AccountReloginService_ReloginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountReloginService_ReloginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountReloginService_ReloginResponse& from);
  void MergeFrom(const AccountReloginService_ReloginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountReloginService_ReloginResponse* other);
  protected:
  explicit AccountReloginService_ReloginResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 2;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  ::google::protobuf::uint64 uuid() const;
  void set_uuid(::google::protobuf::uint64 value);

  // required .sg.AccountReloginService.RESULT result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::sg::AccountReloginService_RESULT result() const;
  void set_result(::sg::AccountReloginService_RESULT value);

  // @@protoc_insertion_point(class_scope:sg.AccountReloginService.ReloginResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_uuid();
  void clear_has_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 uuid_;
  int result_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountReloginService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.AccountReloginService) */ {
 public:
  AccountReloginService();
  virtual ~AccountReloginService();

  AccountReloginService(const AccountReloginService& from);

  inline AccountReloginService& operator=(const AccountReloginService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountReloginService(AccountReloginService&& from) noexcept
    : AccountReloginService() {
    *this = ::std::move(from);
  }

  inline AccountReloginService& operator=(AccountReloginService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountReloginService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountReloginService* internal_default_instance() {
    return reinterpret_cast<const AccountReloginService*>(
               &_AccountReloginService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(AccountReloginService* other);
  void Swap(AccountReloginService* other);
  friend void swap(AccountReloginService& a, AccountReloginService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountReloginService* New() const final {
    return CreateMaybeMessage<AccountReloginService>(NULL);
  }

  AccountReloginService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountReloginService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountReloginService& from);
  void MergeFrom(const AccountReloginService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountReloginService* other);
  protected:
  explicit AccountReloginService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AccountReloginService_ReloginRequest ReloginRequest;
  typedef AccountReloginService_ReloginResponse ReloginResponse;

  typedef AccountReloginService_RESULT RESULT;
  static const RESULT OK =
    AccountReloginService_RESULT_OK;
  static const RESULT FAILED =
    AccountReloginService_RESULT_FAILED;
  static inline bool RESULT_IsValid(int value) {
    return AccountReloginService_RESULT_IsValid(value);
  }
  static const RESULT RESULT_MIN =
    AccountReloginService_RESULT_RESULT_MIN;
  static const RESULT RESULT_MAX =
    AccountReloginService_RESULT_RESULT_MAX;
  static const int RESULT_ARRAYSIZE =
    AccountReloginService_RESULT_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_descriptor() {
    return AccountReloginService_RESULT_descriptor();
  }
  static inline const ::std::string& RESULT_Name(RESULT value) {
    return AccountReloginService_RESULT_Name(value);
  }
  static inline bool RESULT_Parse(const ::std::string& name,
      RESULT* value) {
    return AccountReloginService_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.AccountReloginService.ReloginRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::AccountReloginService_ReloginRequest& _internal_req() const;
  public:
  const ::sg::AccountReloginService_ReloginRequest& req() const;
  ::sg::AccountReloginService_ReloginRequest* release_req();
  ::sg::AccountReloginService_ReloginRequest* mutable_req();
  void set_allocated_req(::sg::AccountReloginService_ReloginRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::AccountReloginService_ReloginRequest* req);
  ::sg::AccountReloginService_ReloginRequest* unsafe_arena_release_req();

  // optional .sg.AccountReloginService.ReloginResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::AccountReloginService_ReloginResponse& _internal_resp() const;
  public:
  const ::sg::AccountReloginService_ReloginResponse& resp() const;
  ::sg::AccountReloginService_ReloginResponse* release_resp();
  ::sg::AccountReloginService_ReloginResponse* mutable_resp();
  void set_allocated_resp(::sg::AccountReloginService_ReloginResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::AccountReloginService_ReloginResponse* resp);
  ::sg::AccountReloginService_ReloginResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.AccountReloginService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::AccountReloginService_ReloginRequest* req_;
  ::sg::AccountReloginService_ReloginResponse* resp_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerJoinService_JoinRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PlayerJoinService.JoinRequest) */ {
 public:
  PlayerJoinService_JoinRequest();
  virtual ~PlayerJoinService_JoinRequest();

  PlayerJoinService_JoinRequest(const PlayerJoinService_JoinRequest& from);

  inline PlayerJoinService_JoinRequest& operator=(const PlayerJoinService_JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerJoinService_JoinRequest(PlayerJoinService_JoinRequest&& from) noexcept
    : PlayerJoinService_JoinRequest() {
    *this = ::std::move(from);
  }

  inline PlayerJoinService_JoinRequest& operator=(PlayerJoinService_JoinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerJoinService_JoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoinService_JoinRequest* internal_default_instance() {
    return reinterpret_cast<const PlayerJoinService_JoinRequest*>(
               &_PlayerJoinService_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(PlayerJoinService_JoinRequest* other);
  void Swap(PlayerJoinService_JoinRequest* other);
  friend void swap(PlayerJoinService_JoinRequest& a, PlayerJoinService_JoinRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoinService_JoinRequest* New() const final {
    return CreateMaybeMessage<PlayerJoinService_JoinRequest>(NULL);
  }

  PlayerJoinService_JoinRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerJoinService_JoinRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerJoinService_JoinRequest& from);
  void MergeFrom(const PlayerJoinService_JoinRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerJoinService_JoinRequest* other);
  protected:
  explicit PlayerJoinService_JoinRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const void* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_uid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      ::std::string* uid);

  // required bytes nick = 2;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // @@protoc_insertion_point(class_scope:sg.PlayerJoinService.JoinRequest)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_nick();
  void clear_has_nick();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerJoinService_JoinResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PlayerJoinService.JoinResponse) */ {
 public:
  PlayerJoinService_JoinResponse();
  virtual ~PlayerJoinService_JoinResponse();

  PlayerJoinService_JoinResponse(const PlayerJoinService_JoinResponse& from);

  inline PlayerJoinService_JoinResponse& operator=(const PlayerJoinService_JoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerJoinService_JoinResponse(PlayerJoinService_JoinResponse&& from) noexcept
    : PlayerJoinService_JoinResponse() {
    *this = ::std::move(from);
  }

  inline PlayerJoinService_JoinResponse& operator=(PlayerJoinService_JoinResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerJoinService_JoinResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoinService_JoinResponse* internal_default_instance() {
    return reinterpret_cast<const PlayerJoinService_JoinResponse*>(
               &_PlayerJoinService_JoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(PlayerJoinService_JoinResponse* other);
  void Swap(PlayerJoinService_JoinResponse* other);
  friend void swap(PlayerJoinService_JoinResponse& a, PlayerJoinService_JoinResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoinService_JoinResponse* New() const final {
    return CreateMaybeMessage<PlayerJoinService_JoinResponse>(NULL);
  }

  PlayerJoinService_JoinResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerJoinService_JoinResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerJoinService_JoinResponse& from);
  void MergeFrom(const PlayerJoinService_JoinResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerJoinService_JoinResponse* other);
  protected:
  explicit PlayerJoinService_JoinResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.PlayerJoinService.RESULT result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::sg::PlayerJoinService_RESULT result() const;
  void set_result(::sg::PlayerJoinService_RESULT value);

  // @@protoc_insertion_point(class_scope:sg.PlayerJoinService.JoinResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerJoinService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PlayerJoinService) */ {
 public:
  PlayerJoinService();
  virtual ~PlayerJoinService();

  PlayerJoinService(const PlayerJoinService& from);

  inline PlayerJoinService& operator=(const PlayerJoinService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerJoinService(PlayerJoinService&& from) noexcept
    : PlayerJoinService() {
    *this = ::std::move(from);
  }

  inline PlayerJoinService& operator=(PlayerJoinService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerJoinService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoinService* internal_default_instance() {
    return reinterpret_cast<const PlayerJoinService*>(
               &_PlayerJoinService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(PlayerJoinService* other);
  void Swap(PlayerJoinService* other);
  friend void swap(PlayerJoinService& a, PlayerJoinService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoinService* New() const final {
    return CreateMaybeMessage<PlayerJoinService>(NULL);
  }

  PlayerJoinService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerJoinService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerJoinService& from);
  void MergeFrom(const PlayerJoinService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerJoinService* other);
  protected:
  explicit PlayerJoinService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerJoinService_JoinRequest JoinRequest;
  typedef PlayerJoinService_JoinResponse JoinResponse;

  typedef PlayerJoinService_RESULT RESULT;
  static const RESULT OK =
    PlayerJoinService_RESULT_OK;
  static const RESULT FAILED =
    PlayerJoinService_RESULT_FAILED;
  static inline bool RESULT_IsValid(int value) {
    return PlayerJoinService_RESULT_IsValid(value);
  }
  static const RESULT RESULT_MIN =
    PlayerJoinService_RESULT_RESULT_MIN;
  static const RESULT RESULT_MAX =
    PlayerJoinService_RESULT_RESULT_MAX;
  static const int RESULT_ARRAYSIZE =
    PlayerJoinService_RESULT_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_descriptor() {
    return PlayerJoinService_RESULT_descriptor();
  }
  static inline const ::std::string& RESULT_Name(RESULT value) {
    return PlayerJoinService_RESULT_Name(value);
  }
  static inline bool RESULT_Parse(const ::std::string& name,
      RESULT* value) {
    return PlayerJoinService_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.PlayerJoinService.JoinRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::PlayerJoinService_JoinRequest& _internal_req() const;
  public:
  const ::sg::PlayerJoinService_JoinRequest& req() const;
  ::sg::PlayerJoinService_JoinRequest* release_req();
  ::sg::PlayerJoinService_JoinRequest* mutable_req();
  void set_allocated_req(::sg::PlayerJoinService_JoinRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::PlayerJoinService_JoinRequest* req);
  ::sg::PlayerJoinService_JoinRequest* unsafe_arena_release_req();

  // optional .sg.PlayerJoinService.JoinResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::PlayerJoinService_JoinResponse& _internal_resp() const;
  public:
  const ::sg::PlayerJoinService_JoinResponse& resp() const;
  ::sg::PlayerJoinService_JoinResponse* release_resp();
  ::sg::PlayerJoinService_JoinResponse* mutable_resp();
  void set_allocated_resp(::sg::PlayerJoinService_JoinResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::PlayerJoinService_JoinResponse* resp);
  ::sg::PlayerJoinService_JoinResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.PlayerJoinService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::PlayerJoinService_JoinRequest* req_;
  ::sg::PlayerJoinService_JoinResponse* resp_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserAttribute) */ {
 public:
  UserAttribute();
  virtual ~UserAttribute();

  UserAttribute(const UserAttribute& from);

  inline UserAttribute& operator=(const UserAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAttribute(UserAttribute&& from) noexcept
    : UserAttribute() {
    *this = ::std::move(from);
  }

  inline UserAttribute& operator=(UserAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAttribute* internal_default_instance() {
    return reinterpret_cast<const UserAttribute*>(
               &_UserAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(UserAttribute* other);
  void Swap(UserAttribute* other);
  friend void swap(UserAttribute& a, UserAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAttribute* New() const final {
    return CreateMaybeMessage<UserAttribute>(NULL);
  }

  UserAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAttribute& from);
  void MergeFrom(const UserAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAttribute* other);
  protected:
  explicit UserAttribute(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes nick = 4;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 4;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required bytes signature = 6;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 6;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_signature();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      ::std::string* signature);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 exp = 3;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 3;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // required int32 portrait = 5;
  bool has_portrait() const;
  void clear_portrait();
  static const int kPortraitFieldNumber = 5;
  ::google::protobuf::int32 portrait() const;
  void set_portrait(::google::protobuf::int32 value);

  // optional int32 portrait_frame = 8;
  bool has_portrait_frame() const;
  void clear_portrait_frame();
  static const int kPortraitFrameFieldNumber = 8;
  ::google::protobuf::int32 portrait_frame() const;
  void set_portrait_frame(::google::protobuf::int32 value);

  // optional sfixed64 last_rename_time = 7;
  bool has_last_rename_time() const;
  void clear_last_rename_time();
  static const int kLastRenameTimeFieldNumber = 7;
  ::google::protobuf::int64 last_rename_time() const;
  void set_last_rename_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sg.UserAttribute)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_level();
  void clear_has_level();
  void set_has_exp();
  void clear_has_exp();
  void set_has_nick();
  void clear_has_nick();
  void set_has_portrait();
  void clear_has_portrait();
  void set_has_signature();
  void clear_has_signature();
  void set_has_last_rename_time();
  void clear_has_last_rename_time();
  void set_has_portrait_frame();
  void clear_has_portrait_frame();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 portrait_;
  ::google::protobuf::int32 portrait_frame_;
  ::google::protobuf::int64 last_rename_time_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAttrService_UserAttrRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserAttrService.UserAttrRequest) */ {
 public:
  UserAttrService_UserAttrRequest();
  virtual ~UserAttrService_UserAttrRequest();

  UserAttrService_UserAttrRequest(const UserAttrService_UserAttrRequest& from);

  inline UserAttrService_UserAttrRequest& operator=(const UserAttrService_UserAttrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAttrService_UserAttrRequest(UserAttrService_UserAttrRequest&& from) noexcept
    : UserAttrService_UserAttrRequest() {
    *this = ::std::move(from);
  }

  inline UserAttrService_UserAttrRequest& operator=(UserAttrService_UserAttrRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAttrService_UserAttrRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAttrService_UserAttrRequest* internal_default_instance() {
    return reinterpret_cast<const UserAttrService_UserAttrRequest*>(
               &_UserAttrService_UserAttrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(UserAttrService_UserAttrRequest* other);
  void Swap(UserAttrService_UserAttrRequest* other);
  friend void swap(UserAttrService_UserAttrRequest& a, UserAttrService_UserAttrRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAttrService_UserAttrRequest* New() const final {
    return CreateMaybeMessage<UserAttrService_UserAttrRequest>(NULL);
  }

  UserAttrService_UserAttrRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAttrService_UserAttrRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAttrService_UserAttrRequest& from);
  void MergeFrom(const UserAttrService_UserAttrRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAttrService_UserAttrRequest* other);
  protected:
  explicit UserAttrService_UserAttrRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes new_name = 2;
  bool has_new_name() const;
  void clear_new_name();
  static const int kNewNameFieldNumber = 2;
  const ::std::string& new_name() const;
  void set_new_name(const ::std::string& value);
  #if LANG_CXX11
  void set_new_name(::std::string&& value);
  #endif
  void set_new_name(const char* value);
  void set_new_name(const void* value, size_t size);
  ::std::string* mutable_new_name();
  ::std::string* release_new_name();
  void set_allocated_new_name(::std::string* new_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_new_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_name(
      ::std::string* new_name);

  // optional bytes new_signature = 4;
  bool has_new_signature() const;
  void clear_new_signature();
  static const int kNewSignatureFieldNumber = 4;
  const ::std::string& new_signature() const;
  void set_new_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_new_signature(::std::string&& value);
  #endif
  void set_new_signature(const char* value);
  void set_new_signature(const void* value, size_t size);
  ::std::string* mutable_new_signature();
  ::std::string* release_new_signature();
  void set_allocated_new_signature(::std::string* new_signature);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_new_signature();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_signature(
      ::std::string* new_signature);

  // optional int32 new_portrait = 3;
  bool has_new_portrait() const;
  void clear_new_portrait();
  static const int kNewPortraitFieldNumber = 3;
  ::google::protobuf::int32 new_portrait() const;
  void set_new_portrait(::google::protobuf::int32 value);

  // optional int32 new_frame = 5;
  bool has_new_frame() const;
  void clear_new_frame();
  static const int kNewFrameFieldNumber = 5;
  ::google::protobuf::int32 new_frame() const;
  void set_new_frame(::google::protobuf::int32 value);

  // required .sg.UserAttrService.USER_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserAttrService_USER_CMD cmd() const;
  void set_cmd(::sg::UserAttrService_USER_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserAttrService.UserAttrRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_new_name();
  void clear_has_new_name();
  void set_has_new_portrait();
  void clear_has_new_portrait();
  void set_has_new_signature();
  void clear_has_new_signature();
  void set_has_new_frame();
  void clear_has_new_frame();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr new_name_;
  ::google::protobuf::internal::ArenaStringPtr new_signature_;
  ::google::protobuf::int32 new_portrait_;
  ::google::protobuf::int32 new_frame_;
  int cmd_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAttrService_UserAttrResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserAttrService.UserAttrResponse) */ {
 public:
  UserAttrService_UserAttrResponse();
  virtual ~UserAttrService_UserAttrResponse();

  UserAttrService_UserAttrResponse(const UserAttrService_UserAttrResponse& from);

  inline UserAttrService_UserAttrResponse& operator=(const UserAttrService_UserAttrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAttrService_UserAttrResponse(UserAttrService_UserAttrResponse&& from) noexcept
    : UserAttrService_UserAttrResponse() {
    *this = ::std::move(from);
  }

  inline UserAttrService_UserAttrResponse& operator=(UserAttrService_UserAttrResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAttrService_UserAttrResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAttrService_UserAttrResponse* internal_default_instance() {
    return reinterpret_cast<const UserAttrService_UserAttrResponse*>(
               &_UserAttrService_UserAttrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(UserAttrService_UserAttrResponse* other);
  void Swap(UserAttrService_UserAttrResponse* other);
  friend void swap(UserAttrService_UserAttrResponse& a, UserAttrService_UserAttrResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAttrService_UserAttrResponse* New() const final {
    return CreateMaybeMessage<UserAttrService_UserAttrResponse>(NULL);
  }

  UserAttrService_UserAttrResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAttrService_UserAttrResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAttrService_UserAttrResponse& from);
  void MergeFrom(const UserAttrService_UserAttrResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAttrService_UserAttrResponse* other);
  protected:
  explicit UserAttrService_UserAttrResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.UserAttribute user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  private:
  const ::sg::UserAttribute& _internal_user() const;
  public:
  const ::sg::UserAttribute& user() const;
  ::sg::UserAttribute* release_user();
  ::sg::UserAttribute* mutable_user();
  void set_allocated_user(::sg::UserAttribute* user);
  void unsafe_arena_set_allocated_user(
      ::sg::UserAttribute* user);
  ::sg::UserAttribute* unsafe_arena_release_user();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserAttrService.UserAttrResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_user();
  void clear_has_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserAttribute* user_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAttrService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserAttrService) */ {
 public:
  UserAttrService();
  virtual ~UserAttrService();

  UserAttrService(const UserAttrService& from);

  inline UserAttrService& operator=(const UserAttrService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAttrService(UserAttrService&& from) noexcept
    : UserAttrService() {
    *this = ::std::move(from);
  }

  inline UserAttrService& operator=(UserAttrService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAttrService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAttrService* internal_default_instance() {
    return reinterpret_cast<const UserAttrService*>(
               &_UserAttrService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(UserAttrService* other);
  void Swap(UserAttrService* other);
  friend void swap(UserAttrService& a, UserAttrService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAttrService* New() const final {
    return CreateMaybeMessage<UserAttrService>(NULL);
  }

  UserAttrService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAttrService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAttrService& from);
  void MergeFrom(const UserAttrService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAttrService* other);
  protected:
  explicit UserAttrService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserAttrService_UserAttrRequest UserAttrRequest;
  typedef UserAttrService_UserAttrResponse UserAttrResponse;

  typedef UserAttrService_USER_CMD USER_CMD;
  static const USER_CMD QUERY =
    UserAttrService_USER_CMD_QUERY;
  static const USER_CMD RENAME =
    UserAttrService_USER_CMD_RENAME;
  static const USER_CMD CHANGE_PORTRAIT =
    UserAttrService_USER_CMD_CHANGE_PORTRAIT;
  static const USER_CMD WRITE_SIGNATURE =
    UserAttrService_USER_CMD_WRITE_SIGNATURE;
  static const USER_CMD CHANGE_PORTRAIT_FRAME =
    UserAttrService_USER_CMD_CHANGE_PORTRAIT_FRAME;
  static inline bool USER_CMD_IsValid(int value) {
    return UserAttrService_USER_CMD_IsValid(value);
  }
  static const USER_CMD USER_CMD_MIN =
    UserAttrService_USER_CMD_USER_CMD_MIN;
  static const USER_CMD USER_CMD_MAX =
    UserAttrService_USER_CMD_USER_CMD_MAX;
  static const int USER_CMD_ARRAYSIZE =
    UserAttrService_USER_CMD_USER_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  USER_CMD_descriptor() {
    return UserAttrService_USER_CMD_descriptor();
  }
  static inline const ::std::string& USER_CMD_Name(USER_CMD value) {
    return UserAttrService_USER_CMD_Name(value);
  }
  static inline bool USER_CMD_Parse(const ::std::string& name,
      USER_CMD* value) {
    return UserAttrService_USER_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserAttrService.UserAttrRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserAttrService_UserAttrRequest& _internal_req() const;
  public:
  const ::sg::UserAttrService_UserAttrRequest& req() const;
  ::sg::UserAttrService_UserAttrRequest* release_req();
  ::sg::UserAttrService_UserAttrRequest* mutable_req();
  void set_allocated_req(::sg::UserAttrService_UserAttrRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserAttrService_UserAttrRequest* req);
  ::sg::UserAttrService_UserAttrRequest* unsafe_arena_release_req();

  // optional .sg.UserAttrService.UserAttrResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserAttrService_UserAttrResponse& _internal_resp() const;
  public:
  const ::sg::UserAttrService_UserAttrResponse& resp() const;
  ::sg::UserAttrService_UserAttrResponse* release_resp();
  ::sg::UserAttrService_UserAttrResponse* mutable_resp();
  void set_allocated_resp(::sg::UserAttrService_UserAttrResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserAttrService_UserAttrResponse* resp);
  ::sg::UserAttrService_UserAttrResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserAttrService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserAttrService_UserAttrRequest* req_;
  ::sg::UserAttrService_UserAttrResponse* resp_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLevelUpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserLevelUpNotify) */ {
 public:
  UserLevelUpNotify();
  virtual ~UserLevelUpNotify();

  UserLevelUpNotify(const UserLevelUpNotify& from);

  inline UserLevelUpNotify& operator=(const UserLevelUpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLevelUpNotify(UserLevelUpNotify&& from) noexcept
    : UserLevelUpNotify() {
    *this = ::std::move(from);
  }

  inline UserLevelUpNotify& operator=(UserLevelUpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLevelUpNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLevelUpNotify* internal_default_instance() {
    return reinterpret_cast<const UserLevelUpNotify*>(
               &_UserLevelUpNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(UserLevelUpNotify* other);
  void Swap(UserLevelUpNotify* other);
  friend void swap(UserLevelUpNotify& a, UserLevelUpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLevelUpNotify* New() const final {
    return CreateMaybeMessage<UserLevelUpNotify>(NULL);
  }

  UserLevelUpNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLevelUpNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLevelUpNotify& from);
  void MergeFrom(const UserLevelUpNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLevelUpNotify* other);
  protected:
  explicit UserLevelUpNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.Reward reward = 3;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 3;
  private:
  const ::sg::Reward& _internal_reward() const;
  public:
  const ::sg::Reward& reward() const;
  ::sg::Reward* release_reward();
  ::sg::Reward* mutable_reward();
  void set_allocated_reward(::sg::Reward* reward);
  void unsafe_arena_set_allocated_reward(
      ::sg::Reward* reward);
  ::sg::Reward* unsafe_arena_release_reward();

  // required int32 level = 1;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 exp = 2;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 2;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserLevelUpNotify)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_exp();
  void clear_has_exp();
  void set_has_reward();
  void clear_has_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::Reward* reward_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserStateService_UserStateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserStateService.UserStateRequest) */ {
 public:
  UserStateService_UserStateRequest();
  virtual ~UserStateService_UserStateRequest();

  UserStateService_UserStateRequest(const UserStateService_UserStateRequest& from);

  inline UserStateService_UserStateRequest& operator=(const UserStateService_UserStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserStateService_UserStateRequest(UserStateService_UserStateRequest&& from) noexcept
    : UserStateService_UserStateRequest() {
    *this = ::std::move(from);
  }

  inline UserStateService_UserStateRequest& operator=(UserStateService_UserStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStateService_UserStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStateService_UserStateRequest* internal_default_instance() {
    return reinterpret_cast<const UserStateService_UserStateRequest*>(
               &_UserStateService_UserStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(UserStateService_UserStateRequest* other);
  void Swap(UserStateService_UserStateRequest* other);
  friend void swap(UserStateService_UserStateRequest& a, UserStateService_UserStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserStateService_UserStateRequest* New() const final {
    return CreateMaybeMessage<UserStateService_UserStateRequest>(NULL);
  }

  UserStateService_UserStateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserStateService_UserStateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserStateService_UserStateRequest& from);
  void MergeFrom(const UserStateService_UserStateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserStateService_UserStateRequest* other);
  protected:
  explicit UserStateService_UserStateRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes new_guide_val = 2;
  bool has_new_guide_val() const;
  void clear_new_guide_val();
  static const int kNewGuideValFieldNumber = 2;
  const ::std::string& new_guide_val() const;
  void set_new_guide_val(const ::std::string& value);
  #if LANG_CXX11
  void set_new_guide_val(::std::string&& value);
  #endif
  void set_new_guide_val(const char* value);
  void set_new_guide_val(const void* value, size_t size);
  ::std::string* mutable_new_guide_val();
  ::std::string* release_new_guide_val();
  void set_allocated_new_guide_val(::std::string* new_guide_val);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_new_guide_val();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_guide_val(
      ::std::string* new_guide_val);

  // required .sg.UserStateService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserStateService_CMD cmd() const;
  void set_cmd(::sg::UserStateService_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserStateService.UserStateRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_new_guide_val();
  void clear_has_new_guide_val();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr new_guide_val_;
  int cmd_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserStateService_UserStateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserStateService.UserStateResponse) */ {
 public:
  UserStateService_UserStateResponse();
  virtual ~UserStateService_UserStateResponse();

  UserStateService_UserStateResponse(const UserStateService_UserStateResponse& from);

  inline UserStateService_UserStateResponse& operator=(const UserStateService_UserStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserStateService_UserStateResponse(UserStateService_UserStateResponse&& from) noexcept
    : UserStateService_UserStateResponse() {
    *this = ::std::move(from);
  }

  inline UserStateService_UserStateResponse& operator=(UserStateService_UserStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStateService_UserStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStateService_UserStateResponse* internal_default_instance() {
    return reinterpret_cast<const UserStateService_UserStateResponse*>(
               &_UserStateService_UserStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(UserStateService_UserStateResponse* other);
  void Swap(UserStateService_UserStateResponse* other);
  friend void swap(UserStateService_UserStateResponse& a, UserStateService_UserStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserStateService_UserStateResponse* New() const final {
    return CreateMaybeMessage<UserStateService_UserStateResponse>(NULL);
  }

  UserStateService_UserStateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserStateService_UserStateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserStateService_UserStateResponse& from);
  void MergeFrom(const UserStateService_UserStateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserStateService_UserStateResponse* other);
  protected:
  explicit UserStateService_UserStateResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.UserState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  private:
  const ::sg::UserState& _internal_state() const;
  public:
  const ::sg::UserState& state() const;
  ::sg::UserState* release_state();
  ::sg::UserState* mutable_state();
  void set_allocated_state(::sg::UserState* state);
  void unsafe_arena_set_allocated_state(
      ::sg::UserState* state);
  ::sg::UserState* unsafe_arena_release_state();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserStateService.UserStateResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserState* state_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserStateService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserStateService) */ {
 public:
  UserStateService();
  virtual ~UserStateService();

  UserStateService(const UserStateService& from);

  inline UserStateService& operator=(const UserStateService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserStateService(UserStateService&& from) noexcept
    : UserStateService() {
    *this = ::std::move(from);
  }

  inline UserStateService& operator=(UserStateService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStateService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStateService* internal_default_instance() {
    return reinterpret_cast<const UserStateService*>(
               &_UserStateService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(UserStateService* other);
  void Swap(UserStateService* other);
  friend void swap(UserStateService& a, UserStateService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserStateService* New() const final {
    return CreateMaybeMessage<UserStateService>(NULL);
  }

  UserStateService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserStateService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserStateService& from);
  void MergeFrom(const UserStateService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserStateService* other);
  protected:
  explicit UserStateService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserStateService_UserStateRequest UserStateRequest;
  typedef UserStateService_UserStateResponse UserStateResponse;

  typedef UserStateService_CMD CMD;
  static const CMD QUERY =
    UserStateService_CMD_QUERY;
  static const CMD CHANGE_GUIDE =
    UserStateService_CMD_CHANGE_GUIDE;
  static inline bool CMD_IsValid(int value) {
    return UserStateService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    UserStateService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    UserStateService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    UserStateService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return UserStateService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return UserStateService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return UserStateService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserStateService.UserStateRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserStateService_UserStateRequest& _internal_req() const;
  public:
  const ::sg::UserStateService_UserStateRequest& req() const;
  ::sg::UserStateService_UserStateRequest* release_req();
  ::sg::UserStateService_UserStateRequest* mutable_req();
  void set_allocated_req(::sg::UserStateService_UserStateRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserStateService_UserStateRequest* req);
  ::sg::UserStateService_UserStateRequest* unsafe_arena_release_req();

  // optional .sg.UserStateService.UserStateResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserStateService_UserStateResponse& _internal_resp() const;
  public:
  const ::sg::UserStateService_UserStateResponse& resp() const;
  ::sg::UserStateService_UserStateResponse* release_resp();
  ::sg::UserStateService_UserStateResponse* mutable_resp();
  void set_allocated_resp(::sg::UserStateService_UserStateResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserStateService_UserStateResponse* resp);
  ::sg::UserStateService_UserStateResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserStateService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserStateService_UserStateRequest* req_;
  ::sg::UserStateService_UserStateResponse* resp_;
  friend struct ::protobuf_UserBean_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorNo

// required int32 error_no = 1;
inline bool ErrorNo::has_error_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorNo::set_has_error_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorNo::clear_has_error_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorNo::clear_error_no() {
  error_no_ = 0;
  clear_has_error_no();
}
inline ::google::protobuf::int32 ErrorNo::error_no() const {
  // @@protoc_insertion_point(field_get:sg.ErrorNo.error_no)
  return error_no_;
}
inline void ErrorNo::set_error_no(::google::protobuf::int32 value) {
  set_has_error_no();
  error_no_ = value;
  // @@protoc_insertion_point(field_set:sg.ErrorNo.error_no)
}

// required bytes desc = 2;
inline bool ErrorNo::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorNo::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorNo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorNo::clear_desc() {
  desc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_desc();
}
inline const ::std::string& ErrorNo::desc() const {
  // @@protoc_insertion_point(field_get:sg.ErrorNo.desc)
  return desc_.Get();
}
inline void ErrorNo::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.ErrorNo.desc)
}
#if LANG_CXX11
inline void ErrorNo::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.ErrorNo.desc)
}
#endif
inline void ErrorNo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.ErrorNo.desc)
}
inline void ErrorNo::set_desc(const void* value,
    size_t size) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.ErrorNo.desc)
}
inline ::std::string* ErrorNo::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:sg.ErrorNo.desc)
  return desc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ErrorNo::release_desc() {
  // @@protoc_insertion_point(field_release:sg.ErrorNo.desc)
  if (!has_desc()) {
    return NULL;
  }
  clear_has_desc();
  return desc_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ErrorNo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.ErrorNo.desc)
}
inline ::std::string* ErrorNo::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.ErrorNo.desc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_desc();
  return desc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ErrorNo::unsafe_arena_set_allocated_desc(
    ::std::string* desc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      desc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.ErrorNo.desc)
}

// -------------------------------------------------------------------

// RegisterAccountService_RegisterRequest

// required bytes uid = 1;
inline bool RegisterAccountService_RegisterRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterAccountService_RegisterRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterAccountService_RegisterRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterAccountService_RegisterRequest::clear_uid() {
  uid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_uid();
}
inline const ::std::string& RegisterAccountService_RegisterRequest::uid() const {
  // @@protoc_insertion_point(field_get:sg.RegisterAccountService.RegisterRequest.uid)
  return uid_.Get();
}
inline void RegisterAccountService_RegisterRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.RegisterAccountService.RegisterRequest.uid)
}
#if LANG_CXX11
inline void RegisterAccountService_RegisterRequest::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.RegisterAccountService.RegisterRequest.uid)
}
#endif
inline void RegisterAccountService_RegisterRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.RegisterAccountService.RegisterRequest.uid)
}
inline void RegisterAccountService_RegisterRequest::set_uid(const void* value,
    size_t size) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.RegisterAccountService.RegisterRequest.uid)
}
inline ::std::string* RegisterAccountService_RegisterRequest::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:sg.RegisterAccountService.RegisterRequest.uid)
  return uid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RegisterAccountService_RegisterRequest::release_uid() {
  // @@protoc_insertion_point(field_release:sg.RegisterAccountService.RegisterRequest.uid)
  if (!has_uid()) {
    return NULL;
  }
  clear_has_uid();
  return uid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RegisterAccountService_RegisterRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.RegisterAccountService.RegisterRequest.uid)
}
inline ::std::string* RegisterAccountService_RegisterRequest::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.RegisterAccountService.RegisterRequest.uid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_uid();
  return uid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RegisterAccountService_RegisterRequest::unsafe_arena_set_allocated_uid(
    ::std::string* uid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      uid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.RegisterAccountService.RegisterRequest.uid)
}

// required bytes pwd = 2;
inline bool RegisterAccountService_RegisterRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterAccountService_RegisterRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterAccountService_RegisterRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterAccountService_RegisterRequest::clear_pwd() {
  pwd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pwd();
}
inline const ::std::string& RegisterAccountService_RegisterRequest::pwd() const {
  // @@protoc_insertion_point(field_get:sg.RegisterAccountService.RegisterRequest.pwd)
  return pwd_.Get();
}
inline void RegisterAccountService_RegisterRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.RegisterAccountService.RegisterRequest.pwd)
}
#if LANG_CXX11
inline void RegisterAccountService_RegisterRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.RegisterAccountService.RegisterRequest.pwd)
}
#endif
inline void RegisterAccountService_RegisterRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.RegisterAccountService.RegisterRequest.pwd)
}
inline void RegisterAccountService_RegisterRequest::set_pwd(const void* value,
    size_t size) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.RegisterAccountService.RegisterRequest.pwd)
}
inline ::std::string* RegisterAccountService_RegisterRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:sg.RegisterAccountService.RegisterRequest.pwd)
  return pwd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RegisterAccountService_RegisterRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:sg.RegisterAccountService.RegisterRequest.pwd)
  if (!has_pwd()) {
    return NULL;
  }
  clear_has_pwd();
  return pwd_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RegisterAccountService_RegisterRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.RegisterAccountService.RegisterRequest.pwd)
}
inline ::std::string* RegisterAccountService_RegisterRequest::unsafe_arena_release_pwd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.RegisterAccountService.RegisterRequest.pwd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pwd();
  return pwd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RegisterAccountService_RegisterRequest::unsafe_arena_set_allocated_pwd(
    ::std::string* pwd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pwd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.RegisterAccountService.RegisterRequest.pwd)
}

// required bytes nick = 3;
inline bool RegisterAccountService_RegisterRequest::has_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterAccountService_RegisterRequest::set_has_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterAccountService_RegisterRequest::clear_has_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterAccountService_RegisterRequest::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& RegisterAccountService_RegisterRequest::nick() const {
  // @@protoc_insertion_point(field_get:sg.RegisterAccountService.RegisterRequest.nick)
  return nick_.Get();
}
inline void RegisterAccountService_RegisterRequest::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.RegisterAccountService.RegisterRequest.nick)
}
#if LANG_CXX11
inline void RegisterAccountService_RegisterRequest::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.RegisterAccountService.RegisterRequest.nick)
}
#endif
inline void RegisterAccountService_RegisterRequest::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.RegisterAccountService.RegisterRequest.nick)
}
inline void RegisterAccountService_RegisterRequest::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.RegisterAccountService.RegisterRequest.nick)
}
inline ::std::string* RegisterAccountService_RegisterRequest::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:sg.RegisterAccountService.RegisterRequest.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RegisterAccountService_RegisterRequest::release_nick() {
  // @@protoc_insertion_point(field_release:sg.RegisterAccountService.RegisterRequest.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RegisterAccountService_RegisterRequest::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.RegisterAccountService.RegisterRequest.nick)
}
inline ::std::string* RegisterAccountService_RegisterRequest::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.RegisterAccountService.RegisterRequest.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RegisterAccountService_RegisterRequest::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.RegisterAccountService.RegisterRequest.nick)
}

// required bytes email = 4;
inline bool RegisterAccountService_RegisterRequest::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterAccountService_RegisterRequest::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterAccountService_RegisterRequest::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterAccountService_RegisterRequest::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_email();
}
inline const ::std::string& RegisterAccountService_RegisterRequest::email() const {
  // @@protoc_insertion_point(field_get:sg.RegisterAccountService.RegisterRequest.email)
  return email_.Get();
}
inline void RegisterAccountService_RegisterRequest::set_email(const ::std::string& value) {
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.RegisterAccountService.RegisterRequest.email)
}
#if LANG_CXX11
inline void RegisterAccountService_RegisterRequest::set_email(::std::string&& value) {
  set_has_email();
  email_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.RegisterAccountService.RegisterRequest.email)
}
#endif
inline void RegisterAccountService_RegisterRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.RegisterAccountService.RegisterRequest.email)
}
inline void RegisterAccountService_RegisterRequest::set_email(const void* value,
    size_t size) {
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.RegisterAccountService.RegisterRequest.email)
}
inline ::std::string* RegisterAccountService_RegisterRequest::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:sg.RegisterAccountService.RegisterRequest.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RegisterAccountService_RegisterRequest::release_email() {
  // @@protoc_insertion_point(field_release:sg.RegisterAccountService.RegisterRequest.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RegisterAccountService_RegisterRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.RegisterAccountService.RegisterRequest.email)
}
inline ::std::string* RegisterAccountService_RegisterRequest::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.RegisterAccountService.RegisterRequest.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_email();
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RegisterAccountService_RegisterRequest::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.RegisterAccountService.RegisterRequest.email)
}

// -------------------------------------------------------------------

// RegisterAccountService_RegisterResponse

// required .sg.RegisterAccountService.RESULT result = 1;
inline bool RegisterAccountService_RegisterResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterAccountService_RegisterResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterAccountService_RegisterResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterAccountService_RegisterResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::sg::RegisterAccountService_RESULT RegisterAccountService_RegisterResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.RegisterAccountService.RegisterResponse.result)
  return static_cast< ::sg::RegisterAccountService_RESULT >(result_);
}
inline void RegisterAccountService_RegisterResponse::set_result(::sg::RegisterAccountService_RESULT value) {
  assert(::sg::RegisterAccountService_RESULT_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.RegisterAccountService.RegisterResponse.result)
}

// -------------------------------------------------------------------

// RegisterAccountService

// optional .sg.RegisterAccountService.RegisterRequest req = 1;
inline bool RegisterAccountService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterAccountService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterAccountService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterAccountService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::RegisterAccountService_RegisterRequest& RegisterAccountService::_internal_req() const {
  return *req_;
}
inline const ::sg::RegisterAccountService_RegisterRequest& RegisterAccountService::req() const {
  const ::sg::RegisterAccountService_RegisterRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.RegisterAccountService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::RegisterAccountService_RegisterRequest*>(
      &::sg::_RegisterAccountService_RegisterRequest_default_instance_);
}
inline ::sg::RegisterAccountService_RegisterRequest* RegisterAccountService::release_req() {
  // @@protoc_insertion_point(field_release:sg.RegisterAccountService.req)
  clear_has_req();
  ::sg::RegisterAccountService_RegisterRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::RegisterAccountService_RegisterRequest* RegisterAccountService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.RegisterAccountService.req)
  clear_has_req();
  ::sg::RegisterAccountService_RegisterRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::RegisterAccountService_RegisterRequest* RegisterAccountService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::RegisterAccountService_RegisterRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.RegisterAccountService.req)
  return req_;
}
inline void RegisterAccountService::set_allocated_req(::sg::RegisterAccountService_RegisterRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.RegisterAccountService.req)
}

// optional .sg.RegisterAccountService.RegisterResponse resp = 2;
inline bool RegisterAccountService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterAccountService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterAccountService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterAccountService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::RegisterAccountService_RegisterResponse& RegisterAccountService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::RegisterAccountService_RegisterResponse& RegisterAccountService::resp() const {
  const ::sg::RegisterAccountService_RegisterResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.RegisterAccountService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::RegisterAccountService_RegisterResponse*>(
      &::sg::_RegisterAccountService_RegisterResponse_default_instance_);
}
inline ::sg::RegisterAccountService_RegisterResponse* RegisterAccountService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.RegisterAccountService.resp)
  clear_has_resp();
  ::sg::RegisterAccountService_RegisterResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::RegisterAccountService_RegisterResponse* RegisterAccountService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.RegisterAccountService.resp)
  clear_has_resp();
  ::sg::RegisterAccountService_RegisterResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::RegisterAccountService_RegisterResponse* RegisterAccountService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::RegisterAccountService_RegisterResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.RegisterAccountService.resp)
  return resp_;
}
inline void RegisterAccountService::set_allocated_resp(::sg::RegisterAccountService_RegisterResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.RegisterAccountService.resp)
}

// -------------------------------------------------------------------

// FastRegisterAccountService_RegisterRequest

// -------------------------------------------------------------------

// FastRegisterAccountService_RegisterResponse

// required bytes uid = 1;
inline bool FastRegisterAccountService_RegisterResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FastRegisterAccountService_RegisterResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FastRegisterAccountService_RegisterResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FastRegisterAccountService_RegisterResponse::clear_uid() {
  uid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_uid();
}
inline const ::std::string& FastRegisterAccountService_RegisterResponse::uid() const {
  // @@protoc_insertion_point(field_get:sg.FastRegisterAccountService.RegisterResponse.uid)
  return uid_.Get();
}
inline void FastRegisterAccountService_RegisterResponse::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.FastRegisterAccountService.RegisterResponse.uid)
}
#if LANG_CXX11
inline void FastRegisterAccountService_RegisterResponse::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.FastRegisterAccountService.RegisterResponse.uid)
}
#endif
inline void FastRegisterAccountService_RegisterResponse::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.FastRegisterAccountService.RegisterResponse.uid)
}
inline void FastRegisterAccountService_RegisterResponse::set_uid(const void* value,
    size_t size) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.FastRegisterAccountService.RegisterResponse.uid)
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:sg.FastRegisterAccountService.RegisterResponse.uid)
  return uid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::release_uid() {
  // @@protoc_insertion_point(field_release:sg.FastRegisterAccountService.RegisterResponse.uid)
  if (!has_uid()) {
    return NULL;
  }
  clear_has_uid();
  return uid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void FastRegisterAccountService_RegisterResponse::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.FastRegisterAccountService.RegisterResponse.uid)
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FastRegisterAccountService.RegisterResponse.uid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_uid();
  return uid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FastRegisterAccountService_RegisterResponse::unsafe_arena_set_allocated_uid(
    ::std::string* uid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      uid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FastRegisterAccountService.RegisterResponse.uid)
}

// required bytes pwd = 2;
inline bool FastRegisterAccountService_RegisterResponse::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FastRegisterAccountService_RegisterResponse::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FastRegisterAccountService_RegisterResponse::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FastRegisterAccountService_RegisterResponse::clear_pwd() {
  pwd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pwd();
}
inline const ::std::string& FastRegisterAccountService_RegisterResponse::pwd() const {
  // @@protoc_insertion_point(field_get:sg.FastRegisterAccountService.RegisterResponse.pwd)
  return pwd_.Get();
}
inline void FastRegisterAccountService_RegisterResponse::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.FastRegisterAccountService.RegisterResponse.pwd)
}
#if LANG_CXX11
inline void FastRegisterAccountService_RegisterResponse::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.FastRegisterAccountService.RegisterResponse.pwd)
}
#endif
inline void FastRegisterAccountService_RegisterResponse::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.FastRegisterAccountService.RegisterResponse.pwd)
}
inline void FastRegisterAccountService_RegisterResponse::set_pwd(const void* value,
    size_t size) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.FastRegisterAccountService.RegisterResponse.pwd)
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:sg.FastRegisterAccountService.RegisterResponse.pwd)
  return pwd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::release_pwd() {
  // @@protoc_insertion_point(field_release:sg.FastRegisterAccountService.RegisterResponse.pwd)
  if (!has_pwd()) {
    return NULL;
  }
  clear_has_pwd();
  return pwd_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void FastRegisterAccountService_RegisterResponse::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.FastRegisterAccountService.RegisterResponse.pwd)
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::unsafe_arena_release_pwd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FastRegisterAccountService.RegisterResponse.pwd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pwd();
  return pwd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FastRegisterAccountService_RegisterResponse::unsafe_arena_set_allocated_pwd(
    ::std::string* pwd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pwd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FastRegisterAccountService.RegisterResponse.pwd)
}

// required bytes nick = 3;
inline bool FastRegisterAccountService_RegisterResponse::has_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FastRegisterAccountService_RegisterResponse::set_has_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FastRegisterAccountService_RegisterResponse::clear_has_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FastRegisterAccountService_RegisterResponse::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& FastRegisterAccountService_RegisterResponse::nick() const {
  // @@protoc_insertion_point(field_get:sg.FastRegisterAccountService.RegisterResponse.nick)
  return nick_.Get();
}
inline void FastRegisterAccountService_RegisterResponse::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.FastRegisterAccountService.RegisterResponse.nick)
}
#if LANG_CXX11
inline void FastRegisterAccountService_RegisterResponse::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.FastRegisterAccountService.RegisterResponse.nick)
}
#endif
inline void FastRegisterAccountService_RegisterResponse::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.FastRegisterAccountService.RegisterResponse.nick)
}
inline void FastRegisterAccountService_RegisterResponse::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.FastRegisterAccountService.RegisterResponse.nick)
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:sg.FastRegisterAccountService.RegisterResponse.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::release_nick() {
  // @@protoc_insertion_point(field_release:sg.FastRegisterAccountService.RegisterResponse.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void FastRegisterAccountService_RegisterResponse::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.FastRegisterAccountService.RegisterResponse.nick)
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FastRegisterAccountService.RegisterResponse.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FastRegisterAccountService_RegisterResponse::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FastRegisterAccountService.RegisterResponse.nick)
}

// required bytes email = 4;
inline bool FastRegisterAccountService_RegisterResponse::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FastRegisterAccountService_RegisterResponse::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FastRegisterAccountService_RegisterResponse::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FastRegisterAccountService_RegisterResponse::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_email();
}
inline const ::std::string& FastRegisterAccountService_RegisterResponse::email() const {
  // @@protoc_insertion_point(field_get:sg.FastRegisterAccountService.RegisterResponse.email)
  return email_.Get();
}
inline void FastRegisterAccountService_RegisterResponse::set_email(const ::std::string& value) {
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.FastRegisterAccountService.RegisterResponse.email)
}
#if LANG_CXX11
inline void FastRegisterAccountService_RegisterResponse::set_email(::std::string&& value) {
  set_has_email();
  email_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.FastRegisterAccountService.RegisterResponse.email)
}
#endif
inline void FastRegisterAccountService_RegisterResponse::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.FastRegisterAccountService.RegisterResponse.email)
}
inline void FastRegisterAccountService_RegisterResponse::set_email(const void* value,
    size_t size) {
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.FastRegisterAccountService.RegisterResponse.email)
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:sg.FastRegisterAccountService.RegisterResponse.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::release_email() {
  // @@protoc_insertion_point(field_release:sg.FastRegisterAccountService.RegisterResponse.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void FastRegisterAccountService_RegisterResponse::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.FastRegisterAccountService.RegisterResponse.email)
}
inline ::std::string* FastRegisterAccountService_RegisterResponse::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FastRegisterAccountService.RegisterResponse.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_email();
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FastRegisterAccountService_RegisterResponse::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.FastRegisterAccountService.RegisterResponse.email)
}

// -------------------------------------------------------------------

// FastRegisterAccountService

// optional .sg.FastRegisterAccountService.RegisterRequest req = 1;
inline bool FastRegisterAccountService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FastRegisterAccountService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FastRegisterAccountService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FastRegisterAccountService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::FastRegisterAccountService_RegisterRequest& FastRegisterAccountService::_internal_req() const {
  return *req_;
}
inline const ::sg::FastRegisterAccountService_RegisterRequest& FastRegisterAccountService::req() const {
  const ::sg::FastRegisterAccountService_RegisterRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.FastRegisterAccountService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::FastRegisterAccountService_RegisterRequest*>(
      &::sg::_FastRegisterAccountService_RegisterRequest_default_instance_);
}
inline ::sg::FastRegisterAccountService_RegisterRequest* FastRegisterAccountService::release_req() {
  // @@protoc_insertion_point(field_release:sg.FastRegisterAccountService.req)
  clear_has_req();
  ::sg::FastRegisterAccountService_RegisterRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::FastRegisterAccountService_RegisterRequest* FastRegisterAccountService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FastRegisterAccountService.req)
  clear_has_req();
  ::sg::FastRegisterAccountService_RegisterRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::FastRegisterAccountService_RegisterRequest* FastRegisterAccountService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::FastRegisterAccountService_RegisterRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FastRegisterAccountService.req)
  return req_;
}
inline void FastRegisterAccountService::set_allocated_req(::sg::FastRegisterAccountService_RegisterRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.FastRegisterAccountService.req)
}

// optional .sg.FastRegisterAccountService.RegisterResponse resp = 2;
inline bool FastRegisterAccountService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FastRegisterAccountService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FastRegisterAccountService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FastRegisterAccountService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::FastRegisterAccountService_RegisterResponse& FastRegisterAccountService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::FastRegisterAccountService_RegisterResponse& FastRegisterAccountService::resp() const {
  const ::sg::FastRegisterAccountService_RegisterResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.FastRegisterAccountService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::FastRegisterAccountService_RegisterResponse*>(
      &::sg::_FastRegisterAccountService_RegisterResponse_default_instance_);
}
inline ::sg::FastRegisterAccountService_RegisterResponse* FastRegisterAccountService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.FastRegisterAccountService.resp)
  clear_has_resp();
  ::sg::FastRegisterAccountService_RegisterResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::FastRegisterAccountService_RegisterResponse* FastRegisterAccountService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.FastRegisterAccountService.resp)
  clear_has_resp();
  ::sg::FastRegisterAccountService_RegisterResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::FastRegisterAccountService_RegisterResponse* FastRegisterAccountService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::FastRegisterAccountService_RegisterResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.FastRegisterAccountService.resp)
  return resp_;
}
inline void FastRegisterAccountService::set_allocated_resp(::sg::FastRegisterAccountService_RegisterResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.FastRegisterAccountService.resp)
}

// -------------------------------------------------------------------

// AccountLoginService_LoginRequest

// required bytes uid = 1;
inline bool AccountLoginService_LoginRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLoginService_LoginRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLoginService_LoginRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLoginService_LoginRequest::clear_uid() {
  uid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_uid();
}
inline const ::std::string& AccountLoginService_LoginRequest::uid() const {
  // @@protoc_insertion_point(field_get:sg.AccountLoginService.LoginRequest.uid)
  return uid_.Get();
}
inline void AccountLoginService_LoginRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.AccountLoginService.LoginRequest.uid)
}
#if LANG_CXX11
inline void AccountLoginService_LoginRequest::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.AccountLoginService.LoginRequest.uid)
}
#endif
inline void AccountLoginService_LoginRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.AccountLoginService.LoginRequest.uid)
}
inline void AccountLoginService_LoginRequest::set_uid(const void* value,
    size_t size) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.AccountLoginService.LoginRequest.uid)
}
inline ::std::string* AccountLoginService_LoginRequest::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:sg.AccountLoginService.LoginRequest.uid)
  return uid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccountLoginService_LoginRequest::release_uid() {
  // @@protoc_insertion_point(field_release:sg.AccountLoginService.LoginRequest.uid)
  if (!has_uid()) {
    return NULL;
  }
  clear_has_uid();
  return uid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void AccountLoginService_LoginRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.AccountLoginService.LoginRequest.uid)
}
inline ::std::string* AccountLoginService_LoginRequest::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.AccountLoginService.LoginRequest.uid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_uid();
  return uid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AccountLoginService_LoginRequest::unsafe_arena_set_allocated_uid(
    ::std::string* uid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      uid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.AccountLoginService.LoginRequest.uid)
}

// required bytes pwd = 2;
inline bool AccountLoginService_LoginRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountLoginService_LoginRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountLoginService_LoginRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountLoginService_LoginRequest::clear_pwd() {
  pwd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pwd();
}
inline const ::std::string& AccountLoginService_LoginRequest::pwd() const {
  // @@protoc_insertion_point(field_get:sg.AccountLoginService.LoginRequest.pwd)
  return pwd_.Get();
}
inline void AccountLoginService_LoginRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.AccountLoginService.LoginRequest.pwd)
}
#if LANG_CXX11
inline void AccountLoginService_LoginRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.AccountLoginService.LoginRequest.pwd)
}
#endif
inline void AccountLoginService_LoginRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.AccountLoginService.LoginRequest.pwd)
}
inline void AccountLoginService_LoginRequest::set_pwd(const void* value,
    size_t size) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.AccountLoginService.LoginRequest.pwd)
}
inline ::std::string* AccountLoginService_LoginRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:sg.AccountLoginService.LoginRequest.pwd)
  return pwd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccountLoginService_LoginRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:sg.AccountLoginService.LoginRequest.pwd)
  if (!has_pwd()) {
    return NULL;
  }
  clear_has_pwd();
  return pwd_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void AccountLoginService_LoginRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.AccountLoginService.LoginRequest.pwd)
}
inline ::std::string* AccountLoginService_LoginRequest::unsafe_arena_release_pwd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.AccountLoginService.LoginRequest.pwd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pwd();
  return pwd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AccountLoginService_LoginRequest::unsafe_arena_set_allocated_pwd(
    ::std::string* pwd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pwd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.AccountLoginService.LoginRequest.pwd)
}

// -------------------------------------------------------------------

// AccountLoginService_LoginResponse

// required .sg.AccountLoginService.RESULT result = 1;
inline bool AccountLoginService_LoginResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountLoginService_LoginResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountLoginService_LoginResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountLoginService_LoginResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::sg::AccountLoginService_RESULT AccountLoginService_LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.AccountLoginService.LoginResponse.result)
  return static_cast< ::sg::AccountLoginService_RESULT >(result_);
}
inline void AccountLoginService_LoginResponse::set_result(::sg::AccountLoginService_RESULT value) {
  assert(::sg::AccountLoginService_RESULT_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.AccountLoginService.LoginResponse.result)
}

// optional uint64 uuid = 2;
inline bool AccountLoginService_LoginResponse::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLoginService_LoginResponse::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLoginService_LoginResponse::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLoginService_LoginResponse::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 AccountLoginService_LoginResponse::uuid() const {
  // @@protoc_insertion_point(field_get:sg.AccountLoginService.LoginResponse.uuid)
  return uuid_;
}
inline void AccountLoginService_LoginResponse::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
  // @@protoc_insertion_point(field_set:sg.AccountLoginService.LoginResponse.uuid)
}

// -------------------------------------------------------------------

// AccountLoginService

// optional .sg.AccountLoginService.LoginRequest req = 1;
inline bool AccountLoginService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLoginService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLoginService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLoginService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::AccountLoginService_LoginRequest& AccountLoginService::_internal_req() const {
  return *req_;
}
inline const ::sg::AccountLoginService_LoginRequest& AccountLoginService::req() const {
  const ::sg::AccountLoginService_LoginRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.AccountLoginService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::AccountLoginService_LoginRequest*>(
      &::sg::_AccountLoginService_LoginRequest_default_instance_);
}
inline ::sg::AccountLoginService_LoginRequest* AccountLoginService::release_req() {
  // @@protoc_insertion_point(field_release:sg.AccountLoginService.req)
  clear_has_req();
  ::sg::AccountLoginService_LoginRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::AccountLoginService_LoginRequest* AccountLoginService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.AccountLoginService.req)
  clear_has_req();
  ::sg::AccountLoginService_LoginRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::AccountLoginService_LoginRequest* AccountLoginService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::AccountLoginService_LoginRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.AccountLoginService.req)
  return req_;
}
inline void AccountLoginService::set_allocated_req(::sg::AccountLoginService_LoginRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.AccountLoginService.req)
}

// optional .sg.AccountLoginService.LoginResponse resp = 2;
inline bool AccountLoginService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountLoginService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountLoginService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountLoginService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::AccountLoginService_LoginResponse& AccountLoginService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::AccountLoginService_LoginResponse& AccountLoginService::resp() const {
  const ::sg::AccountLoginService_LoginResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.AccountLoginService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::AccountLoginService_LoginResponse*>(
      &::sg::_AccountLoginService_LoginResponse_default_instance_);
}
inline ::sg::AccountLoginService_LoginResponse* AccountLoginService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.AccountLoginService.resp)
  clear_has_resp();
  ::sg::AccountLoginService_LoginResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::AccountLoginService_LoginResponse* AccountLoginService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.AccountLoginService.resp)
  clear_has_resp();
  ::sg::AccountLoginService_LoginResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::AccountLoginService_LoginResponse* AccountLoginService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::AccountLoginService_LoginResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.AccountLoginService.resp)
  return resp_;
}
inline void AccountLoginService::set_allocated_resp(::sg::AccountLoginService_LoginResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.AccountLoginService.resp)
}

// -------------------------------------------------------------------

// AccountReloginService_ReloginRequest

// required bytes uid = 1;
inline bool AccountReloginService_ReloginRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountReloginService_ReloginRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountReloginService_ReloginRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountReloginService_ReloginRequest::clear_uid() {
  uid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_uid();
}
inline const ::std::string& AccountReloginService_ReloginRequest::uid() const {
  // @@protoc_insertion_point(field_get:sg.AccountReloginService.ReloginRequest.uid)
  return uid_.Get();
}
inline void AccountReloginService_ReloginRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.AccountReloginService.ReloginRequest.uid)
}
#if LANG_CXX11
inline void AccountReloginService_ReloginRequest::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.AccountReloginService.ReloginRequest.uid)
}
#endif
inline void AccountReloginService_ReloginRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.AccountReloginService.ReloginRequest.uid)
}
inline void AccountReloginService_ReloginRequest::set_uid(const void* value,
    size_t size) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.AccountReloginService.ReloginRequest.uid)
}
inline ::std::string* AccountReloginService_ReloginRequest::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:sg.AccountReloginService.ReloginRequest.uid)
  return uid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccountReloginService_ReloginRequest::release_uid() {
  // @@protoc_insertion_point(field_release:sg.AccountReloginService.ReloginRequest.uid)
  if (!has_uid()) {
    return NULL;
  }
  clear_has_uid();
  return uid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void AccountReloginService_ReloginRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.AccountReloginService.ReloginRequest.uid)
}
inline ::std::string* AccountReloginService_ReloginRequest::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.AccountReloginService.ReloginRequest.uid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_uid();
  return uid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AccountReloginService_ReloginRequest::unsafe_arena_set_allocated_uid(
    ::std::string* uid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      uid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.AccountReloginService.ReloginRequest.uid)
}

// required bytes pwd = 2;
inline bool AccountReloginService_ReloginRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountReloginService_ReloginRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountReloginService_ReloginRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountReloginService_ReloginRequest::clear_pwd() {
  pwd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pwd();
}
inline const ::std::string& AccountReloginService_ReloginRequest::pwd() const {
  // @@protoc_insertion_point(field_get:sg.AccountReloginService.ReloginRequest.pwd)
  return pwd_.Get();
}
inline void AccountReloginService_ReloginRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.AccountReloginService.ReloginRequest.pwd)
}
#if LANG_CXX11
inline void AccountReloginService_ReloginRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.AccountReloginService.ReloginRequest.pwd)
}
#endif
inline void AccountReloginService_ReloginRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.AccountReloginService.ReloginRequest.pwd)
}
inline void AccountReloginService_ReloginRequest::set_pwd(const void* value,
    size_t size) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.AccountReloginService.ReloginRequest.pwd)
}
inline ::std::string* AccountReloginService_ReloginRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:sg.AccountReloginService.ReloginRequest.pwd)
  return pwd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccountReloginService_ReloginRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:sg.AccountReloginService.ReloginRequest.pwd)
  if (!has_pwd()) {
    return NULL;
  }
  clear_has_pwd();
  return pwd_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void AccountReloginService_ReloginRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.AccountReloginService.ReloginRequest.pwd)
}
inline ::std::string* AccountReloginService_ReloginRequest::unsafe_arena_release_pwd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.AccountReloginService.ReloginRequest.pwd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pwd();
  return pwd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AccountReloginService_ReloginRequest::unsafe_arena_set_allocated_pwd(
    ::std::string* pwd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pwd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.AccountReloginService.ReloginRequest.pwd)
}

// -------------------------------------------------------------------

// AccountReloginService_ReloginResponse

// required .sg.AccountReloginService.RESULT result = 1;
inline bool AccountReloginService_ReloginResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountReloginService_ReloginResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountReloginService_ReloginResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountReloginService_ReloginResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::sg::AccountReloginService_RESULT AccountReloginService_ReloginResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.AccountReloginService.ReloginResponse.result)
  return static_cast< ::sg::AccountReloginService_RESULT >(result_);
}
inline void AccountReloginService_ReloginResponse::set_result(::sg::AccountReloginService_RESULT value) {
  assert(::sg::AccountReloginService_RESULT_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.AccountReloginService.ReloginResponse.result)
}

// optional uint64 uuid = 2;
inline bool AccountReloginService_ReloginResponse::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountReloginService_ReloginResponse::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountReloginService_ReloginResponse::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountReloginService_ReloginResponse::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 AccountReloginService_ReloginResponse::uuid() const {
  // @@protoc_insertion_point(field_get:sg.AccountReloginService.ReloginResponse.uuid)
  return uuid_;
}
inline void AccountReloginService_ReloginResponse::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
  // @@protoc_insertion_point(field_set:sg.AccountReloginService.ReloginResponse.uuid)
}

// -------------------------------------------------------------------

// AccountReloginService

// optional .sg.AccountReloginService.ReloginRequest req = 1;
inline bool AccountReloginService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountReloginService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountReloginService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountReloginService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::AccountReloginService_ReloginRequest& AccountReloginService::_internal_req() const {
  return *req_;
}
inline const ::sg::AccountReloginService_ReloginRequest& AccountReloginService::req() const {
  const ::sg::AccountReloginService_ReloginRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.AccountReloginService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::AccountReloginService_ReloginRequest*>(
      &::sg::_AccountReloginService_ReloginRequest_default_instance_);
}
inline ::sg::AccountReloginService_ReloginRequest* AccountReloginService::release_req() {
  // @@protoc_insertion_point(field_release:sg.AccountReloginService.req)
  clear_has_req();
  ::sg::AccountReloginService_ReloginRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::AccountReloginService_ReloginRequest* AccountReloginService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.AccountReloginService.req)
  clear_has_req();
  ::sg::AccountReloginService_ReloginRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::AccountReloginService_ReloginRequest* AccountReloginService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::AccountReloginService_ReloginRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.AccountReloginService.req)
  return req_;
}
inline void AccountReloginService::set_allocated_req(::sg::AccountReloginService_ReloginRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.AccountReloginService.req)
}

// optional .sg.AccountReloginService.ReloginResponse resp = 2;
inline bool AccountReloginService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountReloginService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountReloginService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountReloginService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::AccountReloginService_ReloginResponse& AccountReloginService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::AccountReloginService_ReloginResponse& AccountReloginService::resp() const {
  const ::sg::AccountReloginService_ReloginResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.AccountReloginService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::AccountReloginService_ReloginResponse*>(
      &::sg::_AccountReloginService_ReloginResponse_default_instance_);
}
inline ::sg::AccountReloginService_ReloginResponse* AccountReloginService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.AccountReloginService.resp)
  clear_has_resp();
  ::sg::AccountReloginService_ReloginResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::AccountReloginService_ReloginResponse* AccountReloginService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.AccountReloginService.resp)
  clear_has_resp();
  ::sg::AccountReloginService_ReloginResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::AccountReloginService_ReloginResponse* AccountReloginService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::AccountReloginService_ReloginResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.AccountReloginService.resp)
  return resp_;
}
inline void AccountReloginService::set_allocated_resp(::sg::AccountReloginService_ReloginResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.AccountReloginService.resp)
}

// -------------------------------------------------------------------

// PlayerJoinService_JoinRequest

// required bytes uid = 1;
inline bool PlayerJoinService_JoinRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerJoinService_JoinRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerJoinService_JoinRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerJoinService_JoinRequest::clear_uid() {
  uid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_uid();
}
inline const ::std::string& PlayerJoinService_JoinRequest::uid() const {
  // @@protoc_insertion_point(field_get:sg.PlayerJoinService.JoinRequest.uid)
  return uid_.Get();
}
inline void PlayerJoinService_JoinRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.PlayerJoinService.JoinRequest.uid)
}
#if LANG_CXX11
inline void PlayerJoinService_JoinRequest::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.PlayerJoinService.JoinRequest.uid)
}
#endif
inline void PlayerJoinService_JoinRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.PlayerJoinService.JoinRequest.uid)
}
inline void PlayerJoinService_JoinRequest::set_uid(const void* value,
    size_t size) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.PlayerJoinService.JoinRequest.uid)
}
inline ::std::string* PlayerJoinService_JoinRequest::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:sg.PlayerJoinService.JoinRequest.uid)
  return uid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerJoinService_JoinRequest::release_uid() {
  // @@protoc_insertion_point(field_release:sg.PlayerJoinService.JoinRequest.uid)
  if (!has_uid()) {
    return NULL;
  }
  clear_has_uid();
  return uid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerJoinService_JoinRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerJoinService.JoinRequest.uid)
}
inline ::std::string* PlayerJoinService_JoinRequest::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerJoinService.JoinRequest.uid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_uid();
  return uid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerJoinService_JoinRequest::unsafe_arena_set_allocated_uid(
    ::std::string* uid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      uid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerJoinService.JoinRequest.uid)
}

// required bytes nick = 2;
inline bool PlayerJoinService_JoinRequest::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerJoinService_JoinRequest::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerJoinService_JoinRequest::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerJoinService_JoinRequest::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& PlayerJoinService_JoinRequest::nick() const {
  // @@protoc_insertion_point(field_get:sg.PlayerJoinService.JoinRequest.nick)
  return nick_.Get();
}
inline void PlayerJoinService_JoinRequest::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.PlayerJoinService.JoinRequest.nick)
}
#if LANG_CXX11
inline void PlayerJoinService_JoinRequest::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.PlayerJoinService.JoinRequest.nick)
}
#endif
inline void PlayerJoinService_JoinRequest::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.PlayerJoinService.JoinRequest.nick)
}
inline void PlayerJoinService_JoinRequest::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.PlayerJoinService.JoinRequest.nick)
}
inline ::std::string* PlayerJoinService_JoinRequest::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:sg.PlayerJoinService.JoinRequest.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerJoinService_JoinRequest::release_nick() {
  // @@protoc_insertion_point(field_release:sg.PlayerJoinService.JoinRequest.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerJoinService_JoinRequest::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerJoinService.JoinRequest.nick)
}
inline ::std::string* PlayerJoinService_JoinRequest::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerJoinService.JoinRequest.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerJoinService_JoinRequest::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PlayerJoinService.JoinRequest.nick)
}

// -------------------------------------------------------------------

// PlayerJoinService_JoinResponse

// required .sg.PlayerJoinService.RESULT result = 1;
inline bool PlayerJoinService_JoinResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerJoinService_JoinResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerJoinService_JoinResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerJoinService_JoinResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::sg::PlayerJoinService_RESULT PlayerJoinService_JoinResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.PlayerJoinService.JoinResponse.result)
  return static_cast< ::sg::PlayerJoinService_RESULT >(result_);
}
inline void PlayerJoinService_JoinResponse::set_result(::sg::PlayerJoinService_RESULT value) {
  assert(::sg::PlayerJoinService_RESULT_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.PlayerJoinService.JoinResponse.result)
}

// -------------------------------------------------------------------

// PlayerJoinService

// optional .sg.PlayerJoinService.JoinRequest req = 1;
inline bool PlayerJoinService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerJoinService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerJoinService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerJoinService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::PlayerJoinService_JoinRequest& PlayerJoinService::_internal_req() const {
  return *req_;
}
inline const ::sg::PlayerJoinService_JoinRequest& PlayerJoinService::req() const {
  const ::sg::PlayerJoinService_JoinRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.PlayerJoinService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PlayerJoinService_JoinRequest*>(
      &::sg::_PlayerJoinService_JoinRequest_default_instance_);
}
inline ::sg::PlayerJoinService_JoinRequest* PlayerJoinService::release_req() {
  // @@protoc_insertion_point(field_release:sg.PlayerJoinService.req)
  clear_has_req();
  ::sg::PlayerJoinService_JoinRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::PlayerJoinService_JoinRequest* PlayerJoinService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerJoinService.req)
  clear_has_req();
  ::sg::PlayerJoinService_JoinRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::PlayerJoinService_JoinRequest* PlayerJoinService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PlayerJoinService_JoinRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerJoinService.req)
  return req_;
}
inline void PlayerJoinService::set_allocated_req(::sg::PlayerJoinService_JoinRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerJoinService.req)
}

// optional .sg.PlayerJoinService.JoinResponse resp = 2;
inline bool PlayerJoinService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerJoinService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerJoinService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerJoinService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::PlayerJoinService_JoinResponse& PlayerJoinService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::PlayerJoinService_JoinResponse& PlayerJoinService::resp() const {
  const ::sg::PlayerJoinService_JoinResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.PlayerJoinService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PlayerJoinService_JoinResponse*>(
      &::sg::_PlayerJoinService_JoinResponse_default_instance_);
}
inline ::sg::PlayerJoinService_JoinResponse* PlayerJoinService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.PlayerJoinService.resp)
  clear_has_resp();
  ::sg::PlayerJoinService_JoinResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::PlayerJoinService_JoinResponse* PlayerJoinService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PlayerJoinService.resp)
  clear_has_resp();
  ::sg::PlayerJoinService_JoinResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::PlayerJoinService_JoinResponse* PlayerJoinService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PlayerJoinService_JoinResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PlayerJoinService.resp)
  return resp_;
}
inline void PlayerJoinService::set_allocated_resp(::sg::PlayerJoinService_JoinResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.PlayerJoinService.resp)
}

// -------------------------------------------------------------------

// UserAttribute

// required bytes userid = 1;
inline bool UserAttribute::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAttribute::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAttribute::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAttribute::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserAttribute::userid() const {
  // @@protoc_insertion_point(field_get:sg.UserAttribute.userid)
  return userid_.Get();
}
inline void UserAttribute::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.UserAttribute.userid)
}
#if LANG_CXX11
inline void UserAttribute::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.UserAttribute.userid)
}
#endif
inline void UserAttribute::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.UserAttribute.userid)
}
inline void UserAttribute::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.UserAttribute.userid)
}
inline ::std::string* UserAttribute::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:sg.UserAttribute.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAttribute::release_userid() {
  // @@protoc_insertion_point(field_release:sg.UserAttribute.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAttribute::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.UserAttribute.userid)
}
inline ::std::string* UserAttribute::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAttribute.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAttribute::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserAttribute.userid)
}

// required int32 level = 2;
inline bool UserAttribute::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserAttribute::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserAttribute::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserAttribute::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserAttribute::level() const {
  // @@protoc_insertion_point(field_get:sg.UserAttribute.level)
  return level_;
}
inline void UserAttribute::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAttribute.level)
}

// required int32 exp = 3;
inline bool UserAttribute::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserAttribute::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserAttribute::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserAttribute::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 UserAttribute::exp() const {
  // @@protoc_insertion_point(field_get:sg.UserAttribute.exp)
  return exp_;
}
inline void UserAttribute::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAttribute.exp)
}

// required bytes nick = 4;
inline bool UserAttribute::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAttribute::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAttribute::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAttribute::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& UserAttribute::nick() const {
  // @@protoc_insertion_point(field_get:sg.UserAttribute.nick)
  return nick_.Get();
}
inline void UserAttribute::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.UserAttribute.nick)
}
#if LANG_CXX11
inline void UserAttribute::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.UserAttribute.nick)
}
#endif
inline void UserAttribute::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.UserAttribute.nick)
}
inline void UserAttribute::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.UserAttribute.nick)
}
inline ::std::string* UserAttribute::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:sg.UserAttribute.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAttribute::release_nick() {
  // @@protoc_insertion_point(field_release:sg.UserAttribute.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAttribute::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.UserAttribute.nick)
}
inline ::std::string* UserAttribute::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAttribute.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAttribute::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserAttribute.nick)
}

// required int32 portrait = 5;
inline bool UserAttribute::has_portrait() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserAttribute::set_has_portrait() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserAttribute::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserAttribute::clear_portrait() {
  portrait_ = 0;
  clear_has_portrait();
}
inline ::google::protobuf::int32 UserAttribute::portrait() const {
  // @@protoc_insertion_point(field_get:sg.UserAttribute.portrait)
  return portrait_;
}
inline void UserAttribute::set_portrait(::google::protobuf::int32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAttribute.portrait)
}

// required bytes signature = 6;
inline bool UserAttribute::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserAttribute::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserAttribute::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserAttribute::clear_signature() {
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_signature();
}
inline const ::std::string& UserAttribute::signature() const {
  // @@protoc_insertion_point(field_get:sg.UserAttribute.signature)
  return signature_.Get();
}
inline void UserAttribute::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.UserAttribute.signature)
}
#if LANG_CXX11
inline void UserAttribute::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.UserAttribute.signature)
}
#endif
inline void UserAttribute::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.UserAttribute.signature)
}
inline void UserAttribute::set_signature(const void* value,
    size_t size) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.UserAttribute.signature)
}
inline ::std::string* UserAttribute::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:sg.UserAttribute.signature)
  return signature_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAttribute::release_signature() {
  // @@protoc_insertion_point(field_release:sg.UserAttribute.signature)
  if (!has_signature()) {
    return NULL;
  }
  clear_has_signature();
  return signature_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAttribute::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.UserAttribute.signature)
}
inline ::std::string* UserAttribute::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAttribute.signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_signature();
  return signature_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAttribute::unsafe_arena_set_allocated_signature(
    ::std::string* signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserAttribute.signature)
}

// optional sfixed64 last_rename_time = 7;
inline bool UserAttribute::has_last_rename_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserAttribute::set_has_last_rename_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserAttribute::clear_has_last_rename_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserAttribute::clear_last_rename_time() {
  last_rename_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_rename_time();
}
inline ::google::protobuf::int64 UserAttribute::last_rename_time() const {
  // @@protoc_insertion_point(field_get:sg.UserAttribute.last_rename_time)
  return last_rename_time_;
}
inline void UserAttribute::set_last_rename_time(::google::protobuf::int64 value) {
  set_has_last_rename_time();
  last_rename_time_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAttribute.last_rename_time)
}

// optional int32 portrait_frame = 8;
inline bool UserAttribute::has_portrait_frame() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserAttribute::set_has_portrait_frame() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserAttribute::clear_has_portrait_frame() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserAttribute::clear_portrait_frame() {
  portrait_frame_ = 0;
  clear_has_portrait_frame();
}
inline ::google::protobuf::int32 UserAttribute::portrait_frame() const {
  // @@protoc_insertion_point(field_get:sg.UserAttribute.portrait_frame)
  return portrait_frame_;
}
inline void UserAttribute::set_portrait_frame(::google::protobuf::int32 value) {
  set_has_portrait_frame();
  portrait_frame_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAttribute.portrait_frame)
}

// -------------------------------------------------------------------

// UserAttrService_UserAttrRequest

// required .sg.UserAttrService.USER_CMD cmd = 1;
inline bool UserAttrService_UserAttrRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserAttrService_UserAttrRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserAttrService_UserAttrRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserAttrService_UserAttrRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserAttrService_USER_CMD UserAttrService_UserAttrRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserAttrService.UserAttrRequest.cmd)
  return static_cast< ::sg::UserAttrService_USER_CMD >(cmd_);
}
inline void UserAttrService_UserAttrRequest::set_cmd(::sg::UserAttrService_USER_CMD value) {
  assert(::sg::UserAttrService_USER_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAttrService.UserAttrRequest.cmd)
}

// optional bytes new_name = 2;
inline bool UserAttrService_UserAttrRequest::has_new_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAttrService_UserAttrRequest::set_has_new_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAttrService_UserAttrRequest::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAttrService_UserAttrRequest::clear_new_name() {
  new_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_new_name();
}
inline const ::std::string& UserAttrService_UserAttrRequest::new_name() const {
  // @@protoc_insertion_point(field_get:sg.UserAttrService.UserAttrRequest.new_name)
  return new_name_.Get();
}
inline void UserAttrService_UserAttrRequest::set_new_name(const ::std::string& value) {
  set_has_new_name();
  new_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.UserAttrService.UserAttrRequest.new_name)
}
#if LANG_CXX11
inline void UserAttrService_UserAttrRequest::set_new_name(::std::string&& value) {
  set_has_new_name();
  new_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.UserAttrService.UserAttrRequest.new_name)
}
#endif
inline void UserAttrService_UserAttrRequest::set_new_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_name();
  new_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.UserAttrService.UserAttrRequest.new_name)
}
inline void UserAttrService_UserAttrRequest::set_new_name(const void* value,
    size_t size) {
  set_has_new_name();
  new_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.UserAttrService.UserAttrRequest.new_name)
}
inline ::std::string* UserAttrService_UserAttrRequest::mutable_new_name() {
  set_has_new_name();
  // @@protoc_insertion_point(field_mutable:sg.UserAttrService.UserAttrRequest.new_name)
  return new_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAttrService_UserAttrRequest::release_new_name() {
  // @@protoc_insertion_point(field_release:sg.UserAttrService.UserAttrRequest.new_name)
  if (!has_new_name()) {
    return NULL;
  }
  clear_has_new_name();
  return new_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAttrService_UserAttrRequest::set_allocated_new_name(::std::string* new_name) {
  if (new_name != NULL) {
    set_has_new_name();
  } else {
    clear_has_new_name();
  }
  new_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.UserAttrService.UserAttrRequest.new_name)
}
inline ::std::string* UserAttrService_UserAttrRequest::unsafe_arena_release_new_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAttrService.UserAttrRequest.new_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_new_name();
  return new_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAttrService_UserAttrRequest::unsafe_arena_set_allocated_new_name(
    ::std::string* new_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (new_name != NULL) {
    set_has_new_name();
  } else {
    clear_has_new_name();
  }
  new_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      new_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserAttrService.UserAttrRequest.new_name)
}

// optional int32 new_portrait = 3;
inline bool UserAttrService_UserAttrRequest::has_new_portrait() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserAttrService_UserAttrRequest::set_has_new_portrait() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserAttrService_UserAttrRequest::clear_has_new_portrait() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserAttrService_UserAttrRequest::clear_new_portrait() {
  new_portrait_ = 0;
  clear_has_new_portrait();
}
inline ::google::protobuf::int32 UserAttrService_UserAttrRequest::new_portrait() const {
  // @@protoc_insertion_point(field_get:sg.UserAttrService.UserAttrRequest.new_portrait)
  return new_portrait_;
}
inline void UserAttrService_UserAttrRequest::set_new_portrait(::google::protobuf::int32 value) {
  set_has_new_portrait();
  new_portrait_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAttrService.UserAttrRequest.new_portrait)
}

// optional bytes new_signature = 4;
inline bool UserAttrService_UserAttrRequest::has_new_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAttrService_UserAttrRequest::set_has_new_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAttrService_UserAttrRequest::clear_has_new_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAttrService_UserAttrRequest::clear_new_signature() {
  new_signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_new_signature();
}
inline const ::std::string& UserAttrService_UserAttrRequest::new_signature() const {
  // @@protoc_insertion_point(field_get:sg.UserAttrService.UserAttrRequest.new_signature)
  return new_signature_.Get();
}
inline void UserAttrService_UserAttrRequest::set_new_signature(const ::std::string& value) {
  set_has_new_signature();
  new_signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.UserAttrService.UserAttrRequest.new_signature)
}
#if LANG_CXX11
inline void UserAttrService_UserAttrRequest::set_new_signature(::std::string&& value) {
  set_has_new_signature();
  new_signature_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.UserAttrService.UserAttrRequest.new_signature)
}
#endif
inline void UserAttrService_UserAttrRequest::set_new_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_signature();
  new_signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.UserAttrService.UserAttrRequest.new_signature)
}
inline void UserAttrService_UserAttrRequest::set_new_signature(const void* value,
    size_t size) {
  set_has_new_signature();
  new_signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.UserAttrService.UserAttrRequest.new_signature)
}
inline ::std::string* UserAttrService_UserAttrRequest::mutable_new_signature() {
  set_has_new_signature();
  // @@protoc_insertion_point(field_mutable:sg.UserAttrService.UserAttrRequest.new_signature)
  return new_signature_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAttrService_UserAttrRequest::release_new_signature() {
  // @@protoc_insertion_point(field_release:sg.UserAttrService.UserAttrRequest.new_signature)
  if (!has_new_signature()) {
    return NULL;
  }
  clear_has_new_signature();
  return new_signature_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAttrService_UserAttrRequest::set_allocated_new_signature(::std::string* new_signature) {
  if (new_signature != NULL) {
    set_has_new_signature();
  } else {
    clear_has_new_signature();
  }
  new_signature_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.UserAttrService.UserAttrRequest.new_signature)
}
inline ::std::string* UserAttrService_UserAttrRequest::unsafe_arena_release_new_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAttrService.UserAttrRequest.new_signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_new_signature();
  return new_signature_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAttrService_UserAttrRequest::unsafe_arena_set_allocated_new_signature(
    ::std::string* new_signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (new_signature != NULL) {
    set_has_new_signature();
  } else {
    clear_has_new_signature();
  }
  new_signature_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      new_signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserAttrService.UserAttrRequest.new_signature)
}

// optional int32 new_frame = 5;
inline bool UserAttrService_UserAttrRequest::has_new_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserAttrService_UserAttrRequest::set_has_new_frame() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserAttrService_UserAttrRequest::clear_has_new_frame() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserAttrService_UserAttrRequest::clear_new_frame() {
  new_frame_ = 0;
  clear_has_new_frame();
}
inline ::google::protobuf::int32 UserAttrService_UserAttrRequest::new_frame() const {
  // @@protoc_insertion_point(field_get:sg.UserAttrService.UserAttrRequest.new_frame)
  return new_frame_;
}
inline void UserAttrService_UserAttrRequest::set_new_frame(::google::protobuf::int32 value) {
  set_has_new_frame();
  new_frame_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAttrService.UserAttrRequest.new_frame)
}

// -------------------------------------------------------------------

// UserAttrService_UserAttrResponse

// required int32 result = 1;
inline bool UserAttrService_UserAttrResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAttrService_UserAttrResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAttrService_UserAttrResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAttrService_UserAttrResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserAttrService_UserAttrResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserAttrService.UserAttrResponse.result)
  return result_;
}
inline void UserAttrService_UserAttrResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAttrService.UserAttrResponse.result)
}

// optional .sg.UserAttribute user = 2;
inline bool UserAttrService_UserAttrResponse::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAttrService_UserAttrResponse::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAttrService_UserAttrResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAttrService_UserAttrResponse::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
inline const ::sg::UserAttribute& UserAttrService_UserAttrResponse::_internal_user() const {
  return *user_;
}
inline const ::sg::UserAttribute& UserAttrService_UserAttrResponse::user() const {
  const ::sg::UserAttribute* p = user_;
  // @@protoc_insertion_point(field_get:sg.UserAttrService.UserAttrResponse.user)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserAttribute*>(
      &::sg::_UserAttribute_default_instance_);
}
inline ::sg::UserAttribute* UserAttrService_UserAttrResponse::release_user() {
  // @@protoc_insertion_point(field_release:sg.UserAttrService.UserAttrResponse.user)
  clear_has_user();
  ::sg::UserAttribute* temp = user_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  user_ = NULL;
  return temp;
}
inline ::sg::UserAttribute* UserAttrService_UserAttrResponse::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAttrService.UserAttrResponse.user)
  clear_has_user();
  ::sg::UserAttribute* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::sg::UserAttribute* UserAttrService_UserAttrResponse::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserAttribute>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserAttrService.UserAttrResponse.user)
  return user_;
}
inline void UserAttrService_UserAttrResponse::set_allocated_user(::sg::UserAttribute* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
  } else {
    clear_has_user();
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:sg.UserAttrService.UserAttrResponse.user)
}

// -------------------------------------------------------------------

// UserAttrService

// optional .sg.UserAttrService.UserAttrRequest req = 1;
inline bool UserAttrService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAttrService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAttrService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAttrService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserAttrService_UserAttrRequest& UserAttrService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserAttrService_UserAttrRequest& UserAttrService::req() const {
  const ::sg::UserAttrService_UserAttrRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserAttrService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserAttrService_UserAttrRequest*>(
      &::sg::_UserAttrService_UserAttrRequest_default_instance_);
}
inline ::sg::UserAttrService_UserAttrRequest* UserAttrService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserAttrService.req)
  clear_has_req();
  ::sg::UserAttrService_UserAttrRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserAttrService_UserAttrRequest* UserAttrService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAttrService.req)
  clear_has_req();
  ::sg::UserAttrService_UserAttrRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserAttrService_UserAttrRequest* UserAttrService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserAttrService_UserAttrRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserAttrService.req)
  return req_;
}
inline void UserAttrService::set_allocated_req(::sg::UserAttrService_UserAttrRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserAttrService.req)
}

// optional .sg.UserAttrService.UserAttrResponse resp = 2;
inline bool UserAttrService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAttrService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAttrService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAttrService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserAttrService_UserAttrResponse& UserAttrService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserAttrService_UserAttrResponse& UserAttrService::resp() const {
  const ::sg::UserAttrService_UserAttrResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserAttrService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserAttrService_UserAttrResponse*>(
      &::sg::_UserAttrService_UserAttrResponse_default_instance_);
}
inline ::sg::UserAttrService_UserAttrResponse* UserAttrService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserAttrService.resp)
  clear_has_resp();
  ::sg::UserAttrService_UserAttrResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserAttrService_UserAttrResponse* UserAttrService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAttrService.resp)
  clear_has_resp();
  ::sg::UserAttrService_UserAttrResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserAttrService_UserAttrResponse* UserAttrService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserAttrService_UserAttrResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserAttrService.resp)
  return resp_;
}
inline void UserAttrService::set_allocated_resp(::sg::UserAttrService_UserAttrResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserAttrService.resp)
}

// -------------------------------------------------------------------

// UserLevelUpNotify

// required int32 level = 1;
inline bool UserLevelUpNotify::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLevelUpNotify::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLevelUpNotify::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLevelUpNotify::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserLevelUpNotify::level() const {
  // @@protoc_insertion_point(field_get:sg.UserLevelUpNotify.level)
  return level_;
}
inline void UserLevelUpNotify::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:sg.UserLevelUpNotify.level)
}

// required int32 exp = 2;
inline bool UserLevelUpNotify::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLevelUpNotify::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLevelUpNotify::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLevelUpNotify::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 UserLevelUpNotify::exp() const {
  // @@protoc_insertion_point(field_get:sg.UserLevelUpNotify.exp)
  return exp_;
}
inline void UserLevelUpNotify::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:sg.UserLevelUpNotify.exp)
}

// optional .sg.Reward reward = 3;
inline bool UserLevelUpNotify::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLevelUpNotify::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLevelUpNotify::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Reward& UserLevelUpNotify::_internal_reward() const {
  return *reward_;
}
inline const ::sg::Reward& UserLevelUpNotify::reward() const {
  const ::sg::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:sg.UserLevelUpNotify.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* UserLevelUpNotify::release_reward() {
  // @@protoc_insertion_point(field_release:sg.UserLevelUpNotify.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserLevelUpNotify::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserLevelUpNotify.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserLevelUpNotify::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserLevelUpNotify.reward)
  return reward_;
}
inline void UserLevelUpNotify::set_allocated_reward(::sg::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reward_);
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reward)->GetArena();
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:sg.UserLevelUpNotify.reward)
}

// -------------------------------------------------------------------

// UserStateService_UserStateRequest

// required .sg.UserStateService.CMD cmd = 1;
inline bool UserStateService_UserStateRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStateService_UserStateRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserStateService_UserStateRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserStateService_UserStateRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserStateService_CMD UserStateService_UserStateRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserStateService.UserStateRequest.cmd)
  return static_cast< ::sg::UserStateService_CMD >(cmd_);
}
inline void UserStateService_UserStateRequest::set_cmd(::sg::UserStateService_CMD value) {
  assert(::sg::UserStateService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserStateService.UserStateRequest.cmd)
}

// optional bytes new_guide_val = 2;
inline bool UserStateService_UserStateRequest::has_new_guide_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStateService_UserStateRequest::set_has_new_guide_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStateService_UserStateRequest::clear_has_new_guide_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserStateService_UserStateRequest::clear_new_guide_val() {
  new_guide_val_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_new_guide_val();
}
inline const ::std::string& UserStateService_UserStateRequest::new_guide_val() const {
  // @@protoc_insertion_point(field_get:sg.UserStateService.UserStateRequest.new_guide_val)
  return new_guide_val_.Get();
}
inline void UserStateService_UserStateRequest::set_new_guide_val(const ::std::string& value) {
  set_has_new_guide_val();
  new_guide_val_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.UserStateService.UserStateRequest.new_guide_val)
}
#if LANG_CXX11
inline void UserStateService_UserStateRequest::set_new_guide_val(::std::string&& value) {
  set_has_new_guide_val();
  new_guide_val_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.UserStateService.UserStateRequest.new_guide_val)
}
#endif
inline void UserStateService_UserStateRequest::set_new_guide_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_guide_val();
  new_guide_val_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.UserStateService.UserStateRequest.new_guide_val)
}
inline void UserStateService_UserStateRequest::set_new_guide_val(const void* value,
    size_t size) {
  set_has_new_guide_val();
  new_guide_val_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.UserStateService.UserStateRequest.new_guide_val)
}
inline ::std::string* UserStateService_UserStateRequest::mutable_new_guide_val() {
  set_has_new_guide_val();
  // @@protoc_insertion_point(field_mutable:sg.UserStateService.UserStateRequest.new_guide_val)
  return new_guide_val_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserStateService_UserStateRequest::release_new_guide_val() {
  // @@protoc_insertion_point(field_release:sg.UserStateService.UserStateRequest.new_guide_val)
  if (!has_new_guide_val()) {
    return NULL;
  }
  clear_has_new_guide_val();
  return new_guide_val_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserStateService_UserStateRequest::set_allocated_new_guide_val(::std::string* new_guide_val) {
  if (new_guide_val != NULL) {
    set_has_new_guide_val();
  } else {
    clear_has_new_guide_val();
  }
  new_guide_val_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_guide_val,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.UserStateService.UserStateRequest.new_guide_val)
}
inline ::std::string* UserStateService_UserStateRequest::unsafe_arena_release_new_guide_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserStateService.UserStateRequest.new_guide_val)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_new_guide_val();
  return new_guide_val_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserStateService_UserStateRequest::unsafe_arena_set_allocated_new_guide_val(
    ::std::string* new_guide_val) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (new_guide_val != NULL) {
    set_has_new_guide_val();
  } else {
    clear_has_new_guide_val();
  }
  new_guide_val_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      new_guide_val, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserStateService.UserStateRequest.new_guide_val)
}

// -------------------------------------------------------------------

// UserStateService_UserStateResponse

// required int32 result = 1;
inline bool UserStateService_UserStateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStateService_UserStateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserStateService_UserStateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserStateService_UserStateResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserStateService_UserStateResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserStateService.UserStateResponse.result)
  return result_;
}
inline void UserStateService_UserStateResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserStateService.UserStateResponse.result)
}

// optional .sg.UserState state = 2;
inline bool UserStateService_UserStateResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStateService_UserStateResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStateService_UserStateResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::UserState& UserStateService_UserStateResponse::_internal_state() const {
  return *state_;
}
inline const ::sg::UserState& UserStateService_UserStateResponse::state() const {
  const ::sg::UserState* p = state_;
  // @@protoc_insertion_point(field_get:sg.UserStateService.UserStateResponse.state)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserState*>(
      &::sg::_UserState_default_instance_);
}
inline ::sg::UserState* UserStateService_UserStateResponse::release_state() {
  // @@protoc_insertion_point(field_release:sg.UserStateService.UserStateResponse.state)
  clear_has_state();
  ::sg::UserState* temp = state_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  state_ = NULL;
  return temp;
}
inline ::sg::UserState* UserStateService_UserStateResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserStateService.UserStateResponse.state)
  clear_has_state();
  ::sg::UserState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::sg::UserState* UserStateService_UserStateResponse::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserStateService.UserStateResponse.state)
  return state_;
}
inline void UserStateService_UserStateResponse::set_allocated_state(::sg::UserState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:sg.UserStateService.UserStateResponse.state)
}

// -------------------------------------------------------------------

// UserStateService

// optional .sg.UserStateService.UserStateRequest req = 1;
inline bool UserStateService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStateService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStateService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserStateService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserStateService_UserStateRequest& UserStateService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserStateService_UserStateRequest& UserStateService::req() const {
  const ::sg::UserStateService_UserStateRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserStateService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserStateService_UserStateRequest*>(
      &::sg::_UserStateService_UserStateRequest_default_instance_);
}
inline ::sg::UserStateService_UserStateRequest* UserStateService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserStateService.req)
  clear_has_req();
  ::sg::UserStateService_UserStateRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserStateService_UserStateRequest* UserStateService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserStateService.req)
  clear_has_req();
  ::sg::UserStateService_UserStateRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserStateService_UserStateRequest* UserStateService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserStateService_UserStateRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserStateService.req)
  return req_;
}
inline void UserStateService::set_allocated_req(::sg::UserStateService_UserStateRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserStateService.req)
}

// optional .sg.UserStateService.UserStateResponse resp = 2;
inline bool UserStateService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStateService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserStateService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserStateService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserStateService_UserStateResponse& UserStateService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserStateService_UserStateResponse& UserStateService::resp() const {
  const ::sg::UserStateService_UserStateResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserStateService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserStateService_UserStateResponse*>(
      &::sg::_UserStateService_UserStateResponse_default_instance_);
}
inline ::sg::UserStateService_UserStateResponse* UserStateService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserStateService.resp)
  clear_has_resp();
  ::sg::UserStateService_UserStateResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserStateService_UserStateResponse* UserStateService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserStateService.resp)
  clear_has_resp();
  ::sg::UserStateService_UserStateResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserStateService_UserStateResponse* UserStateService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserStateService_UserStateResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserStateService.resp)
  return resp_;
}
inline void UserStateService::set_allocated_resp(::sg::UserStateService_UserStateResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserStateService.resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::ErrorNo_ERROR_NO> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::ErrorNo_ERROR_NO>() {
  return ::sg::ErrorNo_ERROR_NO_descriptor();
}
template <> struct is_proto_enum< ::sg::RegisterAccountService_RESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::RegisterAccountService_RESULT>() {
  return ::sg::RegisterAccountService_RESULT_descriptor();
}
template <> struct is_proto_enum< ::sg::AccountLoginService_RESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::AccountLoginService_RESULT>() {
  return ::sg::AccountLoginService_RESULT_descriptor();
}
template <> struct is_proto_enum< ::sg::AccountReloginService_RESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::AccountReloginService_RESULT>() {
  return ::sg::AccountReloginService_RESULT_descriptor();
}
template <> struct is_proto_enum< ::sg::PlayerJoinService_RESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::PlayerJoinService_RESULT>() {
  return ::sg::PlayerJoinService_RESULT_descriptor();
}
template <> struct is_proto_enum< ::sg::UserAttrService_USER_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserAttrService_USER_CMD>() {
  return ::sg::UserAttrService_USER_CMD_descriptor();
}
template <> struct is_proto_enum< ::sg::UserStateService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserStateService_CMD>() {
  return ::sg::UserStateService_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_UserBean_2eproto
