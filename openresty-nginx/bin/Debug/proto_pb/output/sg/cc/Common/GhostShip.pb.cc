// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GhostShip.proto

#include "GhostShip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_float;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_GhostShip_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GhostShip_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GhostStage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GhostShip_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GhostShipService_GhostShipRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GhostShip_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GhostStageBattleData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GhostShip_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserInformationInGhostShip;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GhostShip_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_GhostShipService_GhostShipResponse;
}  // namespace protobuf_GhostShip_2eproto
namespace protobuf_PVE_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Enemy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_SailorInDungeon;
}  // namespace protobuf_PVE_2eproto
namespace sg {
class GhostStageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GhostStage>
      _instance;
} _GhostStage_default_instance_;
class GhostStageBattleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GhostStageBattleData>
      _instance;
} _GhostStageBattleData_default_instance_;
class UserInformationInGhostShipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserInformationInGhostShip>
      _instance;
} _UserInformationInGhostShip_default_instance_;
class GhostShipService_GhostShipRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GhostShipService_GhostShipRequest>
      _instance;
} _GhostShipService_GhostShipRequest_default_instance_;
class GhostShipService_GhostShipResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GhostShipService_GhostShipResponse>
      _instance;
} _GhostShipService_GhostShipResponse_default_instance_;
class GhostShipServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GhostShipService>
      _instance;
} _GhostShipService_default_instance_;
}  // namespace sg
namespace protobuf_GhostShip_2eproto {
static void InitDefaultsGhostStage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GhostStage_default_instance_;
    new (ptr) ::sg::GhostStage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GhostStage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GhostStage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGhostStage}, {}};

static void InitDefaultsGhostStageBattleData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GhostStageBattleData_default_instance_;
    new (ptr) ::sg::GhostStageBattleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GhostStageBattleData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GhostStageBattleData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGhostStageBattleData}, {
      &protobuf_PVE_2eproto::scc_info_Enemy.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base,}};

static void InitDefaultsUserInformationInGhostShip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserInformationInGhostShip_default_instance_;
    new (ptr) ::sg::UserInformationInGhostShip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserInformationInGhostShip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserInformationInGhostShip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserInformationInGhostShip}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base,
      &protobuf_PVE_2eproto::scc_info_SailorInDungeon.base,}};

static void InitDefaultsGhostShipService_GhostShipRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GhostShipService_GhostShipRequest_default_instance_;
    new (ptr) ::sg::GhostShipService_GhostShipRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GhostShipService_GhostShipRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GhostShipService_GhostShipRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGhostShipService_GhostShipRequest}, {
      &protobuf_PVE_2eproto::scc_info_SailorInDungeon.base,
      &protobuf_PVE_2eproto::scc_info_Enemy.base,}};

static void InitDefaultsGhostShipService_GhostShipResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GhostShipService_GhostShipResponse_default_instance_;
    new (ptr) ::sg::GhostShipService_GhostShipResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GhostShipService_GhostShipResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_GhostShipService_GhostShipResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsGhostShipService_GhostShipResponse}, {
      &protobuf_GhostShip_2eproto::scc_info_UserInformationInGhostShip.base,
      &protobuf_GhostShip_2eproto::scc_info_GhostStage.base,
      &protobuf_GhostShip_2eproto::scc_info_GhostStageBattleData.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsGhostShipService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GhostShipService_default_instance_;
    new (ptr) ::sg::GhostShipService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GhostShipService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GhostShipService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGhostShipService}, {
      &protobuf_GhostShip_2eproto::scc_info_GhostShipService_GhostShipRequest.base,
      &protobuf_GhostShip_2eproto::scc_info_GhostShipService_GhostShipResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GhostStage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GhostStageBattleData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserInformationInGhostShip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GhostShipService_GhostShipRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GhostShipService_GhostShipResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GhostShipService.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStage, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStage, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStage, level_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStageBattleData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStageBattleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStageBattleData, map_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStageBattleData, enemys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostStageBattleData, buff_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInformationInGhostShip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInformationInGhostShip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInformationInGhostShip, reset_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInformationInGhostShip, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInformationInGhostShip, buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInformationInGhostShip, my_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInformationInGhostShip, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInformationInGhostShip, max_reset_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserInformationInGhostShip, reset_cost_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipRequest, stage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipRequest, choice_sailors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipRequest, my_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipRequest, enemys_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipResponse, user_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipResponse, stages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipResponse, battle_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipResponse, get_buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipResponse, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService_GhostShipResponse, battle_result_),
  4,
  0,
  ~0u,
  1,
  2,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GhostShipService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::sg::GhostStage)},
  { 15, 23, sizeof(::sg::GhostStageBattleData)},
  { 26, 38, sizeof(::sg::UserInformationInGhostShip)},
  { 45, 55, sizeof(::sg::GhostShipService_GhostShipRequest)},
  { 60, 72, sizeof(::sg::GhostShipService_GhostShipResponse)},
  { 79, 86, sizeof(::sg::GhostShipService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GhostStage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GhostStageBattleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserInformationInGhostShip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GhostShipService_GhostShipRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GhostShipService_GhostShipResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GhostShipService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "GhostShip.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017GhostShip.proto\022\002sg\032\020BaseStruct.proto\032"
      "\tPVE.proto\"R\n\nGhostStage\022\n\n\002id\030\001 \002(\005\022\r\n\005"
      "state\030\002 \002(\005\022\014\n\004type\030\003 \002(\005\022\014\n\004name\030\004 \001(\014\022"
      "\r\n\005level\030\005 \001(\005\"h\n\024GhostStageBattleData\022\020"
      "\n\010map_data\030\001 \001(\014\022\031\n\006enemys\030\002 \003(\0132\t.sg.En"
      "emy\022#\n\004buff\030\003 \003(\0132\025.sg.pb_pair_int_float"
      "\"\306\001\n\032UserInformationInGhostShip\022\023\n\013reset"
      "_times\030\001 \002(\005\022\r\n\005state\030\002 \002(\005\022#\n\004buff\030\003 \003("
      "\0132\025.sg.pb_pair_int_float\022$\n\007my_team\030\004 \003("
      "\0132\023.sg.SailorInDungeon\022\014\n\004rank\030\005 \001(\005\022\027\n\017"
      "max_reset_times\030\006 \001(\005\022\022\n\nreset_cost\030\007 \001("
      "\005\"\202\005\n\020GhostShipService\0222\n\003req\030\001 \001(\0132%.sg"
      ".GhostShipService.GhostShipRequest\0224\n\004re"
      "sp\030\002 \001(\0132&.sg.GhostShipService.GhostShip"
      "Response\032\244\001\n\020GhostShipRequest\022%\n\003cmd\030\001 \002"
      "(\0162\030.sg.GhostShipService.CMD\022\020\n\010stage_id"
      "\030\002 \001(\005\022\026\n\016choice_sailors\030\003 \003(\005\022$\n\007my_tea"
      "m\030\004 \003(\0132\023.sg.SailorInDungeon\022\031\n\006enemys\030\005"
      " \003(\0132\t.sg.Enemy\032\201\002\n\021GhostShipResponse\022\016\n"
      "\006result\030\001 \002(\005\0221\n\tuser_info\030\002 \001(\0132\036.sg.Us"
      "erInformationInGhostShip\022\036\n\006stages\030\003 \003(\013"
      "2\016.sg.GhostStage\022-\n\013battle_data\030\004 \001(\0132\030."
      "sg.GhostStageBattleData\022\'\n\010get_buff\030\005 \001("
      "\0132\025.sg.pb_pair_int_float\022\032\n\006reward\030\006 \001(\013"
      "2\n.sg.Reward\022\025\n\rbattle_result\030\007 \001(\005\"Y\n\003C"
      "MD\022\t\n\005QUERY\020\001\022\t\n\005READY\020\002\022\n\n\006ATTACK\020\003\022\010\n\004"
      "OVER\020\004\022\t\n\005RESET\020\005\022\013\n\007PREVIEW\020\006\022\016\n\nGET_RE"
      "WARD\020\007B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1091);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GhostShip.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
  ::protobuf_PVE_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_GhostShip_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* GhostShipService_CMD_descriptor() {
  protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GhostShip_2eproto::file_level_enum_descriptors[0];
}
bool GhostShipService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GhostShipService_CMD GhostShipService::QUERY;
const GhostShipService_CMD GhostShipService::READY;
const GhostShipService_CMD GhostShipService::ATTACK;
const GhostShipService_CMD GhostShipService::OVER;
const GhostShipService_CMD GhostShipService::RESET;
const GhostShipService_CMD GhostShipService::PREVIEW;
const GhostShipService_CMD GhostShipService::GET_REWARD;
const GhostShipService_CMD GhostShipService::CMD_MIN;
const GhostShipService_CMD GhostShipService::CMD_MAX;
const int GhostShipService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void GhostStage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GhostStage::kIdFieldNumber;
const int GhostStage::kStateFieldNumber;
const int GhostStage::kTypeFieldNumber;
const int GhostStage::kNameFieldNumber;
const int GhostStage::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GhostStage::GhostStage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GhostShip_2eproto::scc_info_GhostStage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GhostStage)
}
GhostStage::GhostStage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostStage.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GhostStage)
}
GhostStage::GhostStage(const GhostStage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:sg.GhostStage)
}

void GhostStage::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
}

GhostStage::~GhostStage() {
  // @@protoc_insertion_point(destructor:sg.GhostStage)
  SharedDtor();
}

void GhostStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GhostStage::ArenaDtor(void* object) {
  GhostStage* _this = reinterpret_cast< GhostStage* >(object);
  (void)_this;
}
void GhostStage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GhostStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GhostStage::descriptor() {
  ::protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GhostStage& GhostStage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostStage.base);
  return *internal_default_instance();
}


void GhostStage::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GhostStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 30u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&id_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GhostStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GhostStage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GhostStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GhostStage)
  return false;
#undef DO_
}

void GhostStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GhostStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional bytes name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->name(), output);
  }

  // optional int32 level = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GhostStage)
}

::google::protobuf::uint8* GhostStage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GhostStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional bytes name = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional int32 level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GhostStage)
  return target;
}

size_t GhostStage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.GhostStage)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t GhostStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GhostStage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes name = 4;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // optional int32 level = 5;
  if (has_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GhostStage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GhostStage)
  GOOGLE_DCHECK_NE(&from, this);
  const GhostStage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GhostStage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GhostStage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GhostStage)
    MergeFrom(*source);
  }
}

void GhostStage::MergeFrom(const GhostStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GhostStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GhostStage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GhostStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostStage::CopyFrom(const GhostStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GhostStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void GhostStage::Swap(GhostStage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GhostStage* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GhostStage::UnsafeArenaSwap(GhostStage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GhostStage::InternalSwap(GhostStage* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(type_, other->type_);
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GhostStage::GetMetadata() const {
  protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GhostStageBattleData::InitAsDefaultInstance() {
}
void GhostStageBattleData::clear_enemys() {
  enemys_.Clear();
}
void GhostStageBattleData::clear_buff() {
  buff_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GhostStageBattleData::kMapDataFieldNumber;
const int GhostStageBattleData::kEnemysFieldNumber;
const int GhostStageBattleData::kBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GhostStageBattleData::GhostStageBattleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GhostShip_2eproto::scc_info_GhostStageBattleData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GhostStageBattleData)
}
GhostStageBattleData::GhostStageBattleData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  enemys_(arena),
  buff_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostStageBattleData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GhostStageBattleData)
}
GhostStageBattleData::GhostStageBattleData(const GhostStageBattleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      enemys_(from.enemys_),
      buff_(from.buff_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_data()) {
    map_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:sg.GhostStageBattleData)
}

void GhostStageBattleData::SharedCtor() {
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GhostStageBattleData::~GhostStageBattleData() {
  // @@protoc_insertion_point(destructor:sg.GhostStageBattleData)
  SharedDtor();
}

void GhostStageBattleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GhostStageBattleData::ArenaDtor(void* object) {
  GhostStageBattleData* _this = reinterpret_cast< GhostStageBattleData* >(object);
  (void)_this;
}
void GhostStageBattleData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GhostStageBattleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GhostStageBattleData::descriptor() {
  ::protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GhostStageBattleData& GhostStageBattleData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostStageBattleData.base);
  return *internal_default_instance();
}


void GhostStageBattleData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GhostStageBattleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enemys_.Clear();
  buff_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    map_data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GhostStageBattleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GhostStageBattleData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes map_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Enemy enemys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_enemys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_float buff = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GhostStageBattleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GhostStageBattleData)
  return false;
#undef DO_
}

void GhostStageBattleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GhostStageBattleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes map_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_data(), output);
  }

  // repeated .sg.Enemy enemys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->enemys(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_float buff = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->buff(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GhostStageBattleData)
}

::google::protobuf::uint8* GhostStageBattleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GhostStageBattleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes map_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_data(), target);
  }

  // repeated .sg.Enemy enemys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->enemys(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_float buff = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->buff(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GhostStageBattleData)
  return target;
}

size_t GhostStageBattleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GhostStageBattleData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.Enemy enemys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->enemys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->enemys(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_float buff = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->buff_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buff(static_cast<int>(i)));
    }
  }

  // optional bytes map_data = 1;
  if (has_map_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GhostStageBattleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GhostStageBattleData)
  GOOGLE_DCHECK_NE(&from, this);
  const GhostStageBattleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GhostStageBattleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GhostStageBattleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GhostStageBattleData)
    MergeFrom(*source);
  }
}

void GhostStageBattleData::MergeFrom(const GhostStageBattleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GhostStageBattleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enemys_.MergeFrom(from.enemys_);
  buff_.MergeFrom(from.buff_);
  if (from.has_map_data()) {
    set_map_data(from.map_data());
  }
}

void GhostStageBattleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GhostStageBattleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostStageBattleData::CopyFrom(const GhostStageBattleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GhostStageBattleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostStageBattleData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->enemys())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->buff())) return false;
  return true;
}

void GhostStageBattleData::Swap(GhostStageBattleData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GhostStageBattleData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GhostStageBattleData::UnsafeArenaSwap(GhostStageBattleData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GhostStageBattleData::InternalSwap(GhostStageBattleData* other) {
  using std::swap;
  CastToBase(&enemys_)->InternalSwap(CastToBase(&other->enemys_));
  CastToBase(&buff_)->InternalSwap(CastToBase(&other->buff_));
  map_data_.Swap(&other->map_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GhostStageBattleData::GetMetadata() const {
  protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserInformationInGhostShip::InitAsDefaultInstance() {
}
void UserInformationInGhostShip::clear_buff() {
  buff_.Clear();
}
void UserInformationInGhostShip::clear_my_team() {
  my_team_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInformationInGhostShip::kResetTimesFieldNumber;
const int UserInformationInGhostShip::kStateFieldNumber;
const int UserInformationInGhostShip::kBuffFieldNumber;
const int UserInformationInGhostShip::kMyTeamFieldNumber;
const int UserInformationInGhostShip::kRankFieldNumber;
const int UserInformationInGhostShip::kMaxResetTimesFieldNumber;
const int UserInformationInGhostShip::kResetCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInformationInGhostShip::UserInformationInGhostShip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GhostShip_2eproto::scc_info_UserInformationInGhostShip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserInformationInGhostShip)
}
UserInformationInGhostShip::UserInformationInGhostShip(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  buff_(arena),
  my_team_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_UserInformationInGhostShip.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserInformationInGhostShip)
}
UserInformationInGhostShip::UserInformationInGhostShip(const UserInformationInGhostShip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      buff_(from.buff_),
      my_team_(from.my_team_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reset_times_, &from.reset_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_cost_) -
    reinterpret_cast<char*>(&reset_times_)) + sizeof(reset_cost_));
  // @@protoc_insertion_point(copy_constructor:sg.UserInformationInGhostShip)
}

void UserInformationInGhostShip::SharedCtor() {
  ::memset(&reset_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_cost_) -
      reinterpret_cast<char*>(&reset_times_)) + sizeof(reset_cost_));
}

UserInformationInGhostShip::~UserInformationInGhostShip() {
  // @@protoc_insertion_point(destructor:sg.UserInformationInGhostShip)
  SharedDtor();
}

void UserInformationInGhostShip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserInformationInGhostShip::ArenaDtor(void* object) {
  UserInformationInGhostShip* _this = reinterpret_cast< UserInformationInGhostShip* >(object);
  (void)_this;
}
void UserInformationInGhostShip::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserInformationInGhostShip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserInformationInGhostShip::descriptor() {
  ::protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInformationInGhostShip& UserInformationInGhostShip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_UserInformationInGhostShip.base);
  return *internal_default_instance();
}


void UserInformationInGhostShip::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserInformationInGhostShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_.Clear();
  my_team_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&reset_times_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reset_cost_) -
        reinterpret_cast<char*>(&reset_times_)) + sizeof(reset_cost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserInformationInGhostShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserInformationInGhostShip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reset_times = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reset_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_float buff = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SailorInDungeon my_team = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_my_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rank = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_reset_times = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_max_reset_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_reset_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reset_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_reset_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserInformationInGhostShip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserInformationInGhostShip)
  return false;
#undef DO_
}

void UserInformationInGhostShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserInformationInGhostShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 reset_times = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reset_times(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // repeated .sg.pb_pair_int_float buff = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->buff(static_cast<int>(i)),
      output);
  }

  // repeated .sg.SailorInDungeon my_team = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_team_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->my_team(static_cast<int>(i)),
      output);
  }

  // optional int32 rank = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  // optional int32 max_reset_times = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_reset_times(), output);
  }

  // optional int32 reset_cost = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reset_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserInformationInGhostShip)
}

::google::protobuf::uint8* UserInformationInGhostShip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserInformationInGhostShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 reset_times = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reset_times(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // repeated .sg.pb_pair_int_float buff = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->buff(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.SailorInDungeon my_team = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_team_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->my_team(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 rank = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  // optional int32 max_reset_times = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_reset_times(), target);
  }

  // optional int32 reset_cost = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reset_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserInformationInGhostShip)
  return target;
}

size_t UserInformationInGhostShip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.UserInformationInGhostShip)
  size_t total_size = 0;

  if (has_reset_times()) {
    // required int32 reset_times = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reset_times());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t UserInformationInGhostShip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserInformationInGhostShip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 reset_times = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reset_times());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.pb_pair_int_float buff = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->buff_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buff(static_cast<int>(i)));
    }
  }

  // repeated .sg.SailorInDungeon my_team = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->my_team_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->my_team(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 max_reset_times = 6;
    if (has_max_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_reset_times());
    }

    // optional int32 reset_cost = 7;
    if (has_reset_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset_cost());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInformationInGhostShip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserInformationInGhostShip)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInformationInGhostShip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInformationInGhostShip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserInformationInGhostShip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserInformationInGhostShip)
    MergeFrom(*source);
  }
}

void UserInformationInGhostShip::MergeFrom(const UserInformationInGhostShip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserInformationInGhostShip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buff_.MergeFrom(from.buff_);
  my_team_.MergeFrom(from.my_team_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      reset_times_ = from.reset_times_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_reset_times_ = from.max_reset_times_;
    }
    if (cached_has_bits & 0x00000010u) {
      reset_cost_ = from.reset_cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserInformationInGhostShip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserInformationInGhostShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInformationInGhostShip::CopyFrom(const UserInformationInGhostShip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserInformationInGhostShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInformationInGhostShip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->buff())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->my_team())) return false;
  return true;
}

void UserInformationInGhostShip::Swap(UserInformationInGhostShip* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserInformationInGhostShip* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserInformationInGhostShip::UnsafeArenaSwap(UserInformationInGhostShip* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserInformationInGhostShip::InternalSwap(UserInformationInGhostShip* other) {
  using std::swap;
  CastToBase(&buff_)->InternalSwap(CastToBase(&other->buff_));
  CastToBase(&my_team_)->InternalSwap(CastToBase(&other->my_team_));
  swap(reset_times_, other->reset_times_);
  swap(state_, other->state_);
  swap(rank_, other->rank_);
  swap(max_reset_times_, other->max_reset_times_);
  swap(reset_cost_, other->reset_cost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserInformationInGhostShip::GetMetadata() const {
  protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GhostShipService_GhostShipRequest::InitAsDefaultInstance() {
}
void GhostShipService_GhostShipRequest::clear_my_team() {
  my_team_.Clear();
}
void GhostShipService_GhostShipRequest::clear_enemys() {
  enemys_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GhostShipService_GhostShipRequest::kCmdFieldNumber;
const int GhostShipService_GhostShipRequest::kStageIdFieldNumber;
const int GhostShipService_GhostShipRequest::kChoiceSailorsFieldNumber;
const int GhostShipService_GhostShipRequest::kMyTeamFieldNumber;
const int GhostShipService_GhostShipRequest::kEnemysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GhostShipService_GhostShipRequest::GhostShipService_GhostShipRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GhostShip_2eproto::scc_info_GhostShipService_GhostShipRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GhostShipService.GhostShipRequest)
}
GhostShipService_GhostShipRequest::GhostShipService_GhostShipRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  choice_sailors_(arena),
  my_team_(arena),
  enemys_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostShipService_GhostShipRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GhostShipService.GhostShipRequest)
}
GhostShipService_GhostShipRequest::GhostShipService_GhostShipRequest(const GhostShipService_GhostShipRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      choice_sailors_(from.choice_sailors_),
      my_team_(from.my_team_),
      enemys_(from.enemys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_id_, &from.stage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&stage_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.GhostShipService.GhostShipRequest)
}

void GhostShipService_GhostShipRequest::SharedCtor() {
  stage_id_ = 0;
  cmd_ = 1;
}

GhostShipService_GhostShipRequest::~GhostShipService_GhostShipRequest() {
  // @@protoc_insertion_point(destructor:sg.GhostShipService.GhostShipRequest)
  SharedDtor();
}

void GhostShipService_GhostShipRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GhostShipService_GhostShipRequest::ArenaDtor(void* object) {
  GhostShipService_GhostShipRequest* _this = reinterpret_cast< GhostShipService_GhostShipRequest* >(object);
  (void)_this;
}
void GhostShipService_GhostShipRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GhostShipService_GhostShipRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GhostShipService_GhostShipRequest::descriptor() {
  ::protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GhostShipService_GhostShipRequest& GhostShipService_GhostShipRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostShipService_GhostShipRequest.base);
  return *internal_default_instance();
}


void GhostShipService_GhostShipRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GhostShipService.GhostShipRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choice_sailors_.Clear();
  my_team_.Clear();
  enemys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    stage_id_ = 0;
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GhostShipService_GhostShipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GhostShipService.GhostShipRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.GhostShipService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GhostShipService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::GhostShipService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stage_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stage_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 choice_sailors = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_choice_sailors())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_choice_sailors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SailorInDungeon my_team = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_my_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Enemy enemys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_enemys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GhostShipService.GhostShipRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GhostShipService.GhostShipRequest)
  return false;
#undef DO_
}

void GhostShipService_GhostShipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GhostShipService.GhostShipRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GhostShipService.CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 stage_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage_id(), output);
  }

  // repeated int32 choice_sailors = 3;
  for (int i = 0, n = this->choice_sailors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->choice_sailors(i), output);
  }

  // repeated .sg.SailorInDungeon my_team = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_team_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->my_team(static_cast<int>(i)),
      output);
  }

  // repeated .sg.Enemy enemys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->enemys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GhostShipService.GhostShipRequest)
}

::google::protobuf::uint8* GhostShipService_GhostShipRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GhostShipService.GhostShipRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GhostShipService.CMD cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 stage_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage_id(), target);
  }

  // repeated int32 choice_sailors = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->choice_sailors_, target);

  // repeated .sg.SailorInDungeon my_team = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->my_team_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->my_team(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.Enemy enemys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->enemys(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GhostShipService.GhostShipRequest)
  return target;
}

size_t GhostShipService_GhostShipRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GhostShipService.GhostShipRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.GhostShipService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated int32 choice_sailors = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->choice_sailors_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->choice_sailors_size());
    total_size += data_size;
  }

  // repeated .sg.SailorInDungeon my_team = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->my_team_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->my_team(static_cast<int>(i)));
    }
  }

  // repeated .sg.Enemy enemys = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->enemys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->enemys(static_cast<int>(i)));
    }
  }

  // optional int32 stage_id = 2;
  if (has_stage_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stage_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GhostShipService_GhostShipRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GhostShipService.GhostShipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GhostShipService_GhostShipRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GhostShipService_GhostShipRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GhostShipService.GhostShipRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GhostShipService.GhostShipRequest)
    MergeFrom(*source);
  }
}

void GhostShipService_GhostShipRequest::MergeFrom(const GhostShipService_GhostShipRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GhostShipService.GhostShipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choice_sailors_.MergeFrom(from.choice_sailors_);
  my_team_.MergeFrom(from.my_team_);
  enemys_.MergeFrom(from.enemys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stage_id_ = from.stage_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GhostShipService_GhostShipRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GhostShipService.GhostShipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostShipService_GhostShipRequest::CopyFrom(const GhostShipService_GhostShipRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GhostShipService.GhostShipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostShipService_GhostShipRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->my_team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->enemys())) return false;
  return true;
}

void GhostShipService_GhostShipRequest::Swap(GhostShipService_GhostShipRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GhostShipService_GhostShipRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GhostShipService_GhostShipRequest::UnsafeArenaSwap(GhostShipService_GhostShipRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GhostShipService_GhostShipRequest::InternalSwap(GhostShipService_GhostShipRequest* other) {
  using std::swap;
  choice_sailors_.InternalSwap(&other->choice_sailors_);
  CastToBase(&my_team_)->InternalSwap(CastToBase(&other->my_team_));
  CastToBase(&enemys_)->InternalSwap(CastToBase(&other->enemys_));
  swap(stage_id_, other->stage_id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GhostShipService_GhostShipRequest::GetMetadata() const {
  protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GhostShipService_GhostShipResponse::InitAsDefaultInstance() {
  ::sg::_GhostShipService_GhostShipResponse_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::sg::UserInformationInGhostShip*>(
      ::sg::UserInformationInGhostShip::internal_default_instance());
  ::sg::_GhostShipService_GhostShipResponse_default_instance_._instance.get_mutable()->battle_data_ = const_cast< ::sg::GhostStageBattleData*>(
      ::sg::GhostStageBattleData::internal_default_instance());
  ::sg::_GhostShipService_GhostShipResponse_default_instance_._instance.get_mutable()->get_buff_ = const_cast< ::sg::pb_pair_int_float*>(
      ::sg::pb_pair_int_float::internal_default_instance());
  ::sg::_GhostShipService_GhostShipResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void GhostShipService_GhostShipResponse::unsafe_arena_set_allocated_user_info(
    ::sg::UserInformationInGhostShip* user_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_info_;
  }
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GhostShipService.GhostShipResponse.user_info)
}
void GhostShipService_GhostShipResponse::unsafe_arena_set_allocated_battle_data(
    ::sg::GhostStageBattleData* battle_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete battle_data_;
  }
  battle_data_ = battle_data;
  if (battle_data) {
    set_has_battle_data();
  } else {
    clear_has_battle_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GhostShipService.GhostShipResponse.battle_data)
}
void GhostShipService_GhostShipResponse::unsafe_arena_set_allocated_get_buff(
    ::sg::pb_pair_int_float* get_buff) {
  if (GetArenaNoVirtual() == NULL) {
    delete get_buff_;
  }
  get_buff_ = get_buff;
  if (get_buff) {
    set_has_get_buff();
  } else {
    clear_has_get_buff();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GhostShipService.GhostShipResponse.get_buff)
}
void GhostShipService_GhostShipResponse::clear_get_buff() {
  if (get_buff_ != NULL) get_buff_->Clear();
  clear_has_get_buff();
}
void GhostShipService_GhostShipResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GhostShipService.GhostShipResponse.reward)
}
void GhostShipService_GhostShipResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GhostShipService_GhostShipResponse::kResultFieldNumber;
const int GhostShipService_GhostShipResponse::kUserInfoFieldNumber;
const int GhostShipService_GhostShipResponse::kStagesFieldNumber;
const int GhostShipService_GhostShipResponse::kBattleDataFieldNumber;
const int GhostShipService_GhostShipResponse::kGetBuffFieldNumber;
const int GhostShipService_GhostShipResponse::kRewardFieldNumber;
const int GhostShipService_GhostShipResponse::kBattleResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GhostShipService_GhostShipResponse::GhostShipService_GhostShipResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GhostShip_2eproto::scc_info_GhostShipService_GhostShipResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GhostShipService.GhostShipResponse)
}
GhostShipService_GhostShipResponse::GhostShipService_GhostShipResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  stages_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostShipService_GhostShipResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GhostShipService.GhostShipResponse)
}
GhostShipService_GhostShipResponse::GhostShipService_GhostShipResponse(const GhostShipService_GhostShipResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stages_(from.stages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_info()) {
    user_info_ = new ::sg::UserInformationInGhostShip(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  if (from.has_battle_data()) {
    battle_data_ = new ::sg::GhostStageBattleData(*from.battle_data_);
  } else {
    battle_data_ = NULL;
  }
  if (from.has_get_buff()) {
    get_buff_ = new ::sg::pb_pair_int_float(*from.get_buff_);
  } else {
    get_buff_ = NULL;
  }
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&battle_result_) -
    reinterpret_cast<char*>(&result_)) + sizeof(battle_result_));
  // @@protoc_insertion_point(copy_constructor:sg.GhostShipService.GhostShipResponse)
}

void GhostShipService_GhostShipResponse::SharedCtor() {
  ::memset(&user_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battle_result_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(battle_result_));
}

GhostShipService_GhostShipResponse::~GhostShipService_GhostShipResponse() {
  // @@protoc_insertion_point(destructor:sg.GhostShipService.GhostShipResponse)
  SharedDtor();
}

void GhostShipService_GhostShipResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete battle_data_;
  if (this != internal_default_instance()) delete get_buff_;
  if (this != internal_default_instance()) delete reward_;
}

void GhostShipService_GhostShipResponse::ArenaDtor(void* object) {
  GhostShipService_GhostShipResponse* _this = reinterpret_cast< GhostShipService_GhostShipResponse* >(object);
  (void)_this;
}
void GhostShipService_GhostShipResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GhostShipService_GhostShipResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GhostShipService_GhostShipResponse::descriptor() {
  ::protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GhostShipService_GhostShipResponse& GhostShipService_GhostShipResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostShipService_GhostShipResponse.base);
  return *internal_default_instance();
}


void GhostShipService_GhostShipResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GhostShipService.GhostShipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_info_ != NULL);
      user_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(battle_data_ != NULL);
      battle_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(get_buff_ != NULL);
      get_buff_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reward_ != NULL);
      reward_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&battle_result_) -
        reinterpret_cast<char*>(&result_)) + sizeof(battle_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GhostShipService_GhostShipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GhostShipService.GhostShipResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserInformationInGhostShip user_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.GhostStage stages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GhostStageBattleData battle_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_battle_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.pb_pair_int_float get_buff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 battle_result = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_battle_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GhostShipService.GhostShipResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GhostShipService.GhostShipResponse)
  return false;
#undef DO_
}

void GhostShipService_GhostShipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GhostShipService.GhostShipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.UserInformationInGhostShip user_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_user_info(), output);
  }

  // repeated .sg.GhostStage stages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->stages(static_cast<int>(i)),
      output);
  }

  // optional .sg.GhostStageBattleData battle_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_battle_data(), output);
  }

  // optional .sg.pb_pair_int_float get_buff = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_get_buff(), output);
  }

  // optional .sg.Reward reward = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_reward(), output);
  }

  // optional int32 battle_result = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->battle_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GhostShipService.GhostShipResponse)
}

::google::protobuf::uint8* GhostShipService_GhostShipResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GhostShipService.GhostShipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.UserInformationInGhostShip user_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_user_info(), deterministic, target);
  }

  // repeated .sg.GhostStage stages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->stages(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.GhostStageBattleData battle_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_battle_data(), deterministic, target);
  }

  // optional .sg.pb_pair_int_float get_buff = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_get_buff(), deterministic, target);
  }

  // optional .sg.Reward reward = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_reward(), deterministic, target);
  }

  // optional int32 battle_result = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->battle_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GhostShipService.GhostShipResponse)
  return target;
}

size_t GhostShipService_GhostShipResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GhostShipService.GhostShipResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.GhostStage stages = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stages(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .sg.UserInformationInGhostShip user_info = 2;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_info_);
    }

    // optional .sg.GhostStageBattleData battle_data = 4;
    if (has_battle_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *battle_data_);
    }

    // optional .sg.pb_pair_int_float get_buff = 5;
    if (has_get_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_buff_);
    }

    // optional .sg.Reward reward = 6;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reward_);
    }

  }
  // optional int32 battle_result = 7;
  if (has_battle_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battle_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GhostShipService_GhostShipResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GhostShipService.GhostShipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GhostShipService_GhostShipResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GhostShipService_GhostShipResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GhostShipService.GhostShipResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GhostShipService.GhostShipResponse)
    MergeFrom(*source);
  }
}

void GhostShipService_GhostShipResponse::MergeFrom(const GhostShipService_GhostShipResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GhostShipService.GhostShipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stages_.MergeFrom(from.stages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user_info()->::sg::UserInformationInGhostShip::MergeFrom(from.user_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_battle_data()->::sg::GhostStageBattleData::MergeFrom(from.battle_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_get_buff()->::sg::pb_pair_int_float::MergeFrom(from.get_buff());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000020u) {
      battle_result_ = from.battle_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GhostShipService_GhostShipResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GhostShipService.GhostShipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostShipService_GhostShipResponse::CopyFrom(const GhostShipService_GhostShipResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GhostShipService.GhostShipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostShipService_GhostShipResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stages())) return false;
  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  if (has_battle_data()) {
    if (!this->battle_data_->IsInitialized()) return false;
  }
  if (has_get_buff()) {
    if (!this->get_buff_->IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void GhostShipService_GhostShipResponse::Swap(GhostShipService_GhostShipResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GhostShipService_GhostShipResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GhostShipService_GhostShipResponse::UnsafeArenaSwap(GhostShipService_GhostShipResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GhostShipService_GhostShipResponse::InternalSwap(GhostShipService_GhostShipResponse* other) {
  using std::swap;
  CastToBase(&stages_)->InternalSwap(CastToBase(&other->stages_));
  swap(user_info_, other->user_info_);
  swap(battle_data_, other->battle_data_);
  swap(get_buff_, other->get_buff_);
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(battle_result_, other->battle_result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GhostShipService_GhostShipResponse::GetMetadata() const {
  protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GhostShipService::InitAsDefaultInstance() {
  ::sg::_GhostShipService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::GhostShipService_GhostShipRequest*>(
      ::sg::GhostShipService_GhostShipRequest::internal_default_instance());
  ::sg::_GhostShipService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::GhostShipService_GhostShipResponse*>(
      ::sg::GhostShipService_GhostShipResponse::internal_default_instance());
}
void GhostShipService::unsafe_arena_set_allocated_req(
    ::sg::GhostShipService_GhostShipRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GhostShipService.req)
}
void GhostShipService::unsafe_arena_set_allocated_resp(
    ::sg::GhostShipService_GhostShipResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GhostShipService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GhostShipService::kReqFieldNumber;
const int GhostShipService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GhostShipService::GhostShipService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GhostShip_2eproto::scc_info_GhostShipService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GhostShipService)
}
GhostShipService::GhostShipService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostShipService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GhostShipService)
}
GhostShipService::GhostShipService(const GhostShipService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::GhostShipService_GhostShipRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::GhostShipService_GhostShipResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.GhostShipService)
}

void GhostShipService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

GhostShipService::~GhostShipService() {
  // @@protoc_insertion_point(destructor:sg.GhostShipService)
  SharedDtor();
}

void GhostShipService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void GhostShipService::ArenaDtor(void* object) {
  GhostShipService* _this = reinterpret_cast< GhostShipService* >(object);
  (void)_this;
}
void GhostShipService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GhostShipService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GhostShipService::descriptor() {
  ::protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GhostShipService& GhostShipService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GhostShip_2eproto::scc_info_GhostShipService.base);
  return *internal_default_instance();
}


void GhostShipService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GhostShipService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GhostShipService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GhostShipService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.GhostShipService.GhostShipRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GhostShipService.GhostShipResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GhostShipService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GhostShipService)
  return false;
#undef DO_
}

void GhostShipService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GhostShipService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.GhostShipService.GhostShipRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.GhostShipService.GhostShipResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GhostShipService)
}

::google::protobuf::uint8* GhostShipService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GhostShipService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.GhostShipService.GhostShipRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.GhostShipService.GhostShipResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GhostShipService)
  return target;
}

size_t GhostShipService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GhostShipService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.GhostShipService.GhostShipRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.GhostShipService.GhostShipResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GhostShipService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GhostShipService)
  GOOGLE_DCHECK_NE(&from, this);
  const GhostShipService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GhostShipService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GhostShipService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GhostShipService)
    MergeFrom(*source);
  }
}

void GhostShipService::MergeFrom(const GhostShipService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GhostShipService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::GhostShipService_GhostShipRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::GhostShipService_GhostShipResponse::MergeFrom(from.resp());
    }
  }
}

void GhostShipService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GhostShipService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostShipService::CopyFrom(const GhostShipService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GhostShipService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostShipService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void GhostShipService::Swap(GhostShipService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GhostShipService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GhostShipService::UnsafeArenaSwap(GhostShipService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GhostShipService::InternalSwap(GhostShipService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GhostShipService::GetMetadata() const {
  protobuf_GhostShip_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GhostShip_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GhostStage* Arena::CreateMaybeMessage< ::sg::GhostStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GhostStage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GhostStageBattleData* Arena::CreateMaybeMessage< ::sg::GhostStageBattleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GhostStageBattleData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserInformationInGhostShip* Arena::CreateMaybeMessage< ::sg::UserInformationInGhostShip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserInformationInGhostShip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GhostShipService_GhostShipRequest* Arena::CreateMaybeMessage< ::sg::GhostShipService_GhostShipRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GhostShipService_GhostShipRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GhostShipService_GhostShipResponse* Arena::CreateMaybeMessage< ::sg::GhostShipService_GhostShipResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GhostShipService_GhostShipResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GhostShipService* Arena::CreateMaybeMessage< ::sg::GhostShipService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GhostShipService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
