// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PVPBattle.proto

#ifndef PROTOBUF_INCLUDED_PVPBattle_2eproto
#define PROTOBUF_INCLUDED_PVPBattle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PVPBattle_2eproto 

namespace protobuf_PVPBattle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_PVPBattle_2eproto
namespace sg {
class ControllerOperation;
class ControllerOperationDefaultTypeInternal;
extern ControllerOperationDefaultTypeInternal _ControllerOperation_default_instance_;
class PVPBattleControlNotify;
class PVPBattleControlNotifyDefaultTypeInternal;
extern PVPBattleControlNotifyDefaultTypeInternal _PVPBattleControlNotify_default_instance_;
class PVPBattleOverNotify;
class PVPBattleOverNotifyDefaultTypeInternal;
extern PVPBattleOverNotifyDefaultTypeInternal _PVPBattleOverNotify_default_instance_;
class PVPBattleRequest;
class PVPBattleRequestDefaultTypeInternal;
extern PVPBattleRequestDefaultTypeInternal _PVPBattleRequest_default_instance_;
class PVPBattleStartNotify;
class PVPBattleStartNotifyDefaultTypeInternal;
extern PVPBattleStartNotifyDefaultTypeInternal _PVPBattleStartNotify_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::ControllerOperation* Arena::CreateMaybeMessage<::sg::ControllerOperation>(Arena*);
template<> ::sg::PVPBattleControlNotify* Arena::CreateMaybeMessage<::sg::PVPBattleControlNotify>(Arena*);
template<> ::sg::PVPBattleOverNotify* Arena::CreateMaybeMessage<::sg::PVPBattleOverNotify>(Arena*);
template<> ::sg::PVPBattleRequest* Arena::CreateMaybeMessage<::sg::PVPBattleRequest>(Arena*);
template<> ::sg::PVPBattleStartNotify* Arena::CreateMaybeMessage<::sg::PVPBattleStartNotify>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum PVP_BATTLE_CMD {
  READY = 1,
  CONTROL = 2,
  OVER = 3
};
bool PVP_BATTLE_CMD_IsValid(int value);
const PVP_BATTLE_CMD PVP_BATTLE_CMD_MIN = READY;
const PVP_BATTLE_CMD PVP_BATTLE_CMD_MAX = OVER;
const int PVP_BATTLE_CMD_ARRAYSIZE = PVP_BATTLE_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* PVP_BATTLE_CMD_descriptor();
inline const ::std::string& PVP_BATTLE_CMD_Name(PVP_BATTLE_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    PVP_BATTLE_CMD_descriptor(), value);
}
inline bool PVP_BATTLE_CMD_Parse(
    const ::std::string& name, PVP_BATTLE_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PVP_BATTLE_CMD>(
    PVP_BATTLE_CMD_descriptor(), name, value);
}
// ===================================================================

class ControllerOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.ControllerOperation) */ {
 public:
  ControllerOperation();
  virtual ~ControllerOperation();

  ControllerOperation(const ControllerOperation& from);

  inline ControllerOperation& operator=(const ControllerOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerOperation(ControllerOperation&& from) noexcept
    : ControllerOperation() {
    *this = ::std::move(from);
  }

  inline ControllerOperation& operator=(ControllerOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerOperation* internal_default_instance() {
    return reinterpret_cast<const ControllerOperation*>(
               &_ControllerOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ControllerOperation* other);
  void Swap(ControllerOperation* other);
  friend void swap(ControllerOperation& a, ControllerOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerOperation* New() const final {
    return CreateMaybeMessage<ControllerOperation>(NULL);
  }

  ControllerOperation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerOperation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerOperation& from);
  void MergeFrom(const ControllerOperation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerOperation* other);
  protected:
  explicit ControllerOperation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // required int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional float timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  float timestamp() const;
  void set_timestamp(float value);

  // @@protoc_insertion_point(class_scope:sg.ControllerOperation)
 private:
  void set_has_index();
  void clear_has_index();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 index_;
  float timestamp_;
  friend struct ::protobuf_PVPBattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPBattleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPBattleRequest) */ {
 public:
  PVPBattleRequest();
  virtual ~PVPBattleRequest();

  PVPBattleRequest(const PVPBattleRequest& from);

  inline PVPBattleRequest& operator=(const PVPBattleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPBattleRequest(PVPBattleRequest&& from) noexcept
    : PVPBattleRequest() {
    *this = ::std::move(from);
  }

  inline PVPBattleRequest& operator=(PVPBattleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPBattleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPBattleRequest* internal_default_instance() {
    return reinterpret_cast<const PVPBattleRequest*>(
               &_PVPBattleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(PVPBattleRequest* other);
  void Swap(PVPBattleRequest* other);
  friend void swap(PVPBattleRequest& a, PVPBattleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPBattleRequest* New() const final {
    return CreateMaybeMessage<PVPBattleRequest>(NULL);
  }

  PVPBattleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPBattleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPBattleRequest& from);
  void MergeFrom(const PVPBattleRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPBattleRequest* other);
  protected:
  explicit PVPBattleRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.ControllerOperation operation = 3;
  int operation_size() const;
  void clear_operation();
  static const int kOperationFieldNumber = 3;
  ::sg::ControllerOperation* mutable_operation(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation >*
      mutable_operation();
  const ::sg::ControllerOperation& operation(int index) const;
  ::sg::ControllerOperation* add_operation();
  const ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation >&
      operation() const;

  // optional int32 battle_result = 2;
  bool has_battle_result() const;
  void clear_battle_result();
  static const int kBattleResultFieldNumber = 2;
  ::google::protobuf::int32 battle_result() const;
  void set_battle_result(::google::protobuf::int32 value);

  // required .sg.PVP_BATTLE_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::PVP_BATTLE_CMD cmd() const;
  void set_cmd(::sg::PVP_BATTLE_CMD value);

  // @@protoc_insertion_point(class_scope:sg.PVPBattleRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_battle_result();
  void clear_has_battle_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation > operation_;
  ::google::protobuf::int32 battle_result_;
  int cmd_;
  friend struct ::protobuf_PVPBattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPBattleStartNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPBattleStartNotify) */ {
 public:
  PVPBattleStartNotify();
  virtual ~PVPBattleStartNotify();

  PVPBattleStartNotify(const PVPBattleStartNotify& from);

  inline PVPBattleStartNotify& operator=(const PVPBattleStartNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPBattleStartNotify(PVPBattleStartNotify&& from) noexcept
    : PVPBattleStartNotify() {
    *this = ::std::move(from);
  }

  inline PVPBattleStartNotify& operator=(PVPBattleStartNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPBattleStartNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPBattleStartNotify* internal_default_instance() {
    return reinterpret_cast<const PVPBattleStartNotify*>(
               &_PVPBattleStartNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(PVPBattleStartNotify* other);
  void Swap(PVPBattleStartNotify* other);
  friend void swap(PVPBattleStartNotify& a, PVPBattleStartNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPBattleStartNotify* New() const final {
    return CreateMaybeMessage<PVPBattleStartNotify>(NULL);
  }

  PVPBattleStartNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPBattleStartNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPBattleStartNotify& from);
  void MergeFrom(const PVPBattleStartNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPBattleStartNotify* other);
  protected:
  explicit PVPBattleStartNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 random_seed = 2;
  bool has_random_seed() const;
  void clear_random_seed();
  static const int kRandomSeedFieldNumber = 2;
  ::google::protobuf::uint64 random_seed() const;
  void set_random_seed(::google::protobuf::uint64 value);

  // required int32 frame_index = 1;
  bool has_frame_index() const;
  void clear_frame_index();
  static const int kFrameIndexFieldNumber = 1;
  ::google::protobuf::int32 frame_index() const;
  void set_frame_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PVPBattleStartNotify)
 private:
  void set_has_frame_index();
  void clear_has_frame_index();
  void set_has_random_seed();
  void clear_has_random_seed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 random_seed_;
  ::google::protobuf::int32 frame_index_;
  friend struct ::protobuf_PVPBattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPBattleControlNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPBattleControlNotify) */ {
 public:
  PVPBattleControlNotify();
  virtual ~PVPBattleControlNotify();

  PVPBattleControlNotify(const PVPBattleControlNotify& from);

  inline PVPBattleControlNotify& operator=(const PVPBattleControlNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPBattleControlNotify(PVPBattleControlNotify&& from) noexcept
    : PVPBattleControlNotify() {
    *this = ::std::move(from);
  }

  inline PVPBattleControlNotify& operator=(PVPBattleControlNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPBattleControlNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPBattleControlNotify* internal_default_instance() {
    return reinterpret_cast<const PVPBattleControlNotify*>(
               &_PVPBattleControlNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(PVPBattleControlNotify* other);
  void Swap(PVPBattleControlNotify* other);
  friend void swap(PVPBattleControlNotify& a, PVPBattleControlNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPBattleControlNotify* New() const final {
    return CreateMaybeMessage<PVPBattleControlNotify>(NULL);
  }

  PVPBattleControlNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPBattleControlNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPBattleControlNotify& from);
  void MergeFrom(const PVPBattleControlNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPBattleControlNotify* other);
  protected:
  explicit PVPBattleControlNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.ControllerOperation operations = 3;
  int operations_size() const;
  void clear_operations();
  static const int kOperationsFieldNumber = 3;
  ::sg::ControllerOperation* mutable_operations(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation >*
      mutable_operations();
  const ::sg::ControllerOperation& operations(int index) const;
  ::sg::ControllerOperation* add_operations();
  const ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation >&
      operations() const;

  // required int32 frame_index = 1;
  bool has_frame_index() const;
  void clear_frame_index();
  static const int kFrameIndexFieldNumber = 1;
  ::google::protobuf::int32 frame_index() const;
  void set_frame_index(::google::protobuf::int32 value);

  // required float time_now = 2;
  bool has_time_now() const;
  void clear_time_now();
  static const int kTimeNowFieldNumber = 2;
  float time_now() const;
  void set_time_now(float value);

  // @@protoc_insertion_point(class_scope:sg.PVPBattleControlNotify)
 private:
  void set_has_frame_index();
  void clear_has_frame_index();
  void set_has_time_now();
  void clear_has_time_now();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation > operations_;
  ::google::protobuf::int32 frame_index_;
  float time_now_;
  friend struct ::protobuf_PVPBattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPBattleOverNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPBattleOverNotify) */ {
 public:
  PVPBattleOverNotify();
  virtual ~PVPBattleOverNotify();

  PVPBattleOverNotify(const PVPBattleOverNotify& from);

  inline PVPBattleOverNotify& operator=(const PVPBattleOverNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPBattleOverNotify(PVPBattleOverNotify&& from) noexcept
    : PVPBattleOverNotify() {
    *this = ::std::move(from);
  }

  inline PVPBattleOverNotify& operator=(PVPBattleOverNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPBattleOverNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPBattleOverNotify* internal_default_instance() {
    return reinterpret_cast<const PVPBattleOverNotify*>(
               &_PVPBattleOverNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(PVPBattleOverNotify* other);
  void Swap(PVPBattleOverNotify* other);
  friend void swap(PVPBattleOverNotify& a, PVPBattleOverNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPBattleOverNotify* New() const final {
    return CreateMaybeMessage<PVPBattleOverNotify>(NULL);
  }

  PVPBattleOverNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPBattleOverNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPBattleOverNotify& from);
  void MergeFrom(const PVPBattleOverNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPBattleOverNotify* other);
  protected:
  explicit PVPBattleOverNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sg.Reward reward = 3;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 3;
  private:
  const ::sg::Reward& _internal_reward() const;
  public:
  const ::sg::Reward& reward() const;
  ::sg::Reward* release_reward();
  ::sg::Reward* mutable_reward();
  void set_allocated_reward(::sg::Reward* reward);
  void unsafe_arena_set_allocated_reward(
      ::sg::Reward* reward);
  ::sg::Reward* unsafe_arena_release_reward();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PVPBattleOverNotify)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_score();
  void clear_has_score();
  void set_has_reward();
  void clear_has_reward();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::Reward* reward_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 score_;
  friend struct ::protobuf_PVPBattle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControllerOperation

// required int32 index = 1;
inline bool ControllerOperation::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControllerOperation::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControllerOperation::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControllerOperation::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ControllerOperation::index() const {
  // @@protoc_insertion_point(field_get:sg.ControllerOperation.index)
  return index_;
}
inline void ControllerOperation::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:sg.ControllerOperation.index)
}

// optional float timestamp = 2;
inline bool ControllerOperation::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControllerOperation::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControllerOperation::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControllerOperation::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline float ControllerOperation::timestamp() const {
  // @@protoc_insertion_point(field_get:sg.ControllerOperation.timestamp)
  return timestamp_;
}
inline void ControllerOperation::set_timestamp(float value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.ControllerOperation.timestamp)
}

// optional bytes data = 4;
inline bool ControllerOperation::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllerOperation::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControllerOperation::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControllerOperation::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
inline const ::std::string& ControllerOperation::data() const {
  // @@protoc_insertion_point(field_get:sg.ControllerOperation.data)
  return data_.Get();
}
inline void ControllerOperation::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.ControllerOperation.data)
}
#if LANG_CXX11
inline void ControllerOperation::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.ControllerOperation.data)
}
#endif
inline void ControllerOperation::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.ControllerOperation.data)
}
inline void ControllerOperation::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.ControllerOperation.data)
}
inline ::std::string* ControllerOperation::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:sg.ControllerOperation.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ControllerOperation::release_data() {
  // @@protoc_insertion_point(field_release:sg.ControllerOperation.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ControllerOperation::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.ControllerOperation.data)
}
inline ::std::string* ControllerOperation::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.ControllerOperation.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ControllerOperation::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.ControllerOperation.data)
}

// -------------------------------------------------------------------

// PVPBattleRequest

// required .sg.PVP_BATTLE_CMD cmd = 1;
inline bool PVPBattleRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPBattleRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPBattleRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPBattleRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::PVP_BATTLE_CMD PVPBattleRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleRequest.cmd)
  return static_cast< ::sg::PVP_BATTLE_CMD >(cmd_);
}
inline void PVPBattleRequest::set_cmd(::sg::PVP_BATTLE_CMD value) {
  assert(::sg::PVP_BATTLE_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPBattleRequest.cmd)
}

// optional int32 battle_result = 2;
inline bool PVPBattleRequest::has_battle_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPBattleRequest::set_has_battle_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPBattleRequest::clear_has_battle_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPBattleRequest::clear_battle_result() {
  battle_result_ = 0;
  clear_has_battle_result();
}
inline ::google::protobuf::int32 PVPBattleRequest::battle_result() const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleRequest.battle_result)
  return battle_result_;
}
inline void PVPBattleRequest::set_battle_result(::google::protobuf::int32 value) {
  set_has_battle_result();
  battle_result_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPBattleRequest.battle_result)
}

// repeated .sg.ControllerOperation operation = 3;
inline int PVPBattleRequest::operation_size() const {
  return operation_.size();
}
inline void PVPBattleRequest::clear_operation() {
  operation_.Clear();
}
inline ::sg::ControllerOperation* PVPBattleRequest::mutable_operation(int index) {
  // @@protoc_insertion_point(field_mutable:sg.PVPBattleRequest.operation)
  return operation_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation >*
PVPBattleRequest::mutable_operation() {
  // @@protoc_insertion_point(field_mutable_list:sg.PVPBattleRequest.operation)
  return &operation_;
}
inline const ::sg::ControllerOperation& PVPBattleRequest::operation(int index) const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleRequest.operation)
  return operation_.Get(index);
}
inline ::sg::ControllerOperation* PVPBattleRequest::add_operation() {
  // @@protoc_insertion_point(field_add:sg.PVPBattleRequest.operation)
  return operation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation >&
PVPBattleRequest::operation() const {
  // @@protoc_insertion_point(field_list:sg.PVPBattleRequest.operation)
  return operation_;
}

// -------------------------------------------------------------------

// PVPBattleStartNotify

// required int32 frame_index = 1;
inline bool PVPBattleStartNotify::has_frame_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPBattleStartNotify::set_has_frame_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPBattleStartNotify::clear_has_frame_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPBattleStartNotify::clear_frame_index() {
  frame_index_ = 0;
  clear_has_frame_index();
}
inline ::google::protobuf::int32 PVPBattleStartNotify::frame_index() const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleStartNotify.frame_index)
  return frame_index_;
}
inline void PVPBattleStartNotify::set_frame_index(::google::protobuf::int32 value) {
  set_has_frame_index();
  frame_index_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPBattleStartNotify.frame_index)
}

// optional uint64 random_seed = 2;
inline bool PVPBattleStartNotify::has_random_seed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPBattleStartNotify::set_has_random_seed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPBattleStartNotify::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPBattleStartNotify::clear_random_seed() {
  random_seed_ = GOOGLE_ULONGLONG(0);
  clear_has_random_seed();
}
inline ::google::protobuf::uint64 PVPBattleStartNotify::random_seed() const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleStartNotify.random_seed)
  return random_seed_;
}
inline void PVPBattleStartNotify::set_random_seed(::google::protobuf::uint64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPBattleStartNotify.random_seed)
}

// -------------------------------------------------------------------

// PVPBattleControlNotify

// required int32 frame_index = 1;
inline bool PVPBattleControlNotify::has_frame_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPBattleControlNotify::set_has_frame_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPBattleControlNotify::clear_has_frame_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPBattleControlNotify::clear_frame_index() {
  frame_index_ = 0;
  clear_has_frame_index();
}
inline ::google::protobuf::int32 PVPBattleControlNotify::frame_index() const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleControlNotify.frame_index)
  return frame_index_;
}
inline void PVPBattleControlNotify::set_frame_index(::google::protobuf::int32 value) {
  set_has_frame_index();
  frame_index_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPBattleControlNotify.frame_index)
}

// required float time_now = 2;
inline bool PVPBattleControlNotify::has_time_now() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPBattleControlNotify::set_has_time_now() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPBattleControlNotify::clear_has_time_now() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPBattleControlNotify::clear_time_now() {
  time_now_ = 0;
  clear_has_time_now();
}
inline float PVPBattleControlNotify::time_now() const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleControlNotify.time_now)
  return time_now_;
}
inline void PVPBattleControlNotify::set_time_now(float value) {
  set_has_time_now();
  time_now_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPBattleControlNotify.time_now)
}

// repeated .sg.ControllerOperation operations = 3;
inline int PVPBattleControlNotify::operations_size() const {
  return operations_.size();
}
inline void PVPBattleControlNotify::clear_operations() {
  operations_.Clear();
}
inline ::sg::ControllerOperation* PVPBattleControlNotify::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:sg.PVPBattleControlNotify.operations)
  return operations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation >*
PVPBattleControlNotify::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:sg.PVPBattleControlNotify.operations)
  return &operations_;
}
inline const ::sg::ControllerOperation& PVPBattleControlNotify::operations(int index) const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleControlNotify.operations)
  return operations_.Get(index);
}
inline ::sg::ControllerOperation* PVPBattleControlNotify::add_operations() {
  // @@protoc_insertion_point(field_add:sg.PVPBattleControlNotify.operations)
  return operations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::ControllerOperation >&
PVPBattleControlNotify::operations() const {
  // @@protoc_insertion_point(field_list:sg.PVPBattleControlNotify.operations)
  return operations_;
}

// -------------------------------------------------------------------

// PVPBattleOverNotify

// required int32 result = 1;
inline bool PVPBattleOverNotify::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPBattleOverNotify::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPBattleOverNotify::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPBattleOverNotify::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PVPBattleOverNotify::result() const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleOverNotify.result)
  return result_;
}
inline void PVPBattleOverNotify::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPBattleOverNotify.result)
}

// optional int32 score = 2;
inline bool PVPBattleOverNotify::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPBattleOverNotify::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPBattleOverNotify::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPBattleOverNotify::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 PVPBattleOverNotify::score() const {
  // @@protoc_insertion_point(field_get:sg.PVPBattleOverNotify.score)
  return score_;
}
inline void PVPBattleOverNotify::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPBattleOverNotify.score)
}

// optional .sg.Reward reward = 3;
inline bool PVPBattleOverNotify::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPBattleOverNotify::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPBattleOverNotify::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Reward& PVPBattleOverNotify::_internal_reward() const {
  return *reward_;
}
inline const ::sg::Reward& PVPBattleOverNotify::reward() const {
  const ::sg::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:sg.PVPBattleOverNotify.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* PVPBattleOverNotify::release_reward() {
  // @@protoc_insertion_point(field_release:sg.PVPBattleOverNotify.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* PVPBattleOverNotify::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PVPBattleOverNotify.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* PVPBattleOverNotify::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PVPBattleOverNotify.reward)
  return reward_;
}
inline void PVPBattleOverNotify::set_allocated_reward(::sg::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reward_);
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reward)->GetArena();
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:sg.PVPBattleOverNotify.reward)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::PVP_BATTLE_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::PVP_BATTLE_CMD>() {
  return ::sg::PVP_BATTLE_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PVPBattle_2eproto
