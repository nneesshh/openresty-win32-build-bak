// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PVE.proto

#include "PVE.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SailorTalent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int64_int;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_float;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int_int;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_string_int;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Equip;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Sailor;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_PVE_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DungeonElement_Exchange_Exchange_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DungeonEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DungeonInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FightManual;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserDungeonInformation_ElementCount;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserDungeonOperation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserDungeonService_UserDungeonRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DungeonAltar_Relic;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DungeonContent_PathBranch;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DungeonElement_Exchange;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ElementProperty;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ElementProperty_RoomData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PveFacility;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ShipData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DungeonAltar;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DungeonElement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ElementProperty_RoomData_RoomEffect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Enemy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserTeamData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DungeonContent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_MonsterInDungeon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_UserDungeonInformation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_UserDungeonService_UserDungeonResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_PVEBattleService_PVEBattleResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_SailorInDungeon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_PVEBattleService_PVEBattleRequest;
}  // namespace protobuf_PVE_2eproto
namespace sg {
class SailorInDungeonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SailorInDungeon>
      _instance;
} _SailorInDungeon_default_instance_;
class MonsterInDungeonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MonsterInDungeon>
      _instance;
} _MonsterInDungeon_default_instance_;
class EnemyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Enemy>
      _instance;
} _Enemy_default_instance_;
class DungeonAltar_RelicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DungeonAltar_Relic>
      _instance;
} _DungeonAltar_Relic_default_instance_;
class DungeonAltarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DungeonAltar>
      _instance;
} _DungeonAltar_default_instance_;
class ElementProperty_RoomData_RoomEffectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ElementProperty_RoomData_RoomEffect>
      _instance;
} _ElementProperty_RoomData_RoomEffect_default_instance_;
class ElementProperty_RoomDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ElementProperty_RoomData>
      _instance;
} _ElementProperty_RoomData_default_instance_;
class ElementPropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ElementProperty>
      _instance;
} _ElementProperty_default_instance_;
class FightManualDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FightManual>
      _instance;
} _FightManual_default_instance_;
class DungeonElement_Exchange_Exchange_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DungeonElement_Exchange_Exchange_Item>
      _instance;
} _DungeonElement_Exchange_Exchange_Item_default_instance_;
class DungeonElement_ExchangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DungeonElement_Exchange>
      _instance;
} _DungeonElement_Exchange_default_instance_;
class DungeonElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DungeonElement>
      _instance;
} _DungeonElement_default_instance_;
class DungeonContent_PathBranchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DungeonContent_PathBranch>
      _instance;
} _DungeonContent_PathBranch_default_instance_;
class DungeonContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DungeonContent>
      _instance;
} _DungeonContent_default_instance_;
class UserTeamDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserTeamData>
      _instance;
} _UserTeamData_default_instance_;
class UserDungeonInformation_ElementCountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDungeonInformation_ElementCount>
      _instance;
} _UserDungeonInformation_ElementCount_default_instance_;
class UserDungeonInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDungeonInformation>
      _instance;
} _UserDungeonInformation_default_instance_;
class UserDungeonOperationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDungeonOperation>
      _instance;
} _UserDungeonOperation_default_instance_;
class DungeonEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DungeonEvent>
      _instance;
} _DungeonEvent_default_instance_;
class ShipDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShipData>
      _instance;
} _ShipData_default_instance_;
class PveFacilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PveFacility>
      _instance;
} _PveFacility_default_instance_;
class PveMapDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PveMapData>
      _instance;
} _PveMapData_default_instance_;
class PvePlayerMapDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvePlayerMapData>
      _instance;
} _PvePlayerMapData_default_instance_;
class PveDefenderDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PveDefenderData>
      _instance;
} _PveDefenderData_default_instance_;
class PVEBattleService_PVEBattleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVEBattleService_PVEBattleRequest>
      _instance;
} _PVEBattleService_PVEBattleRequest_default_instance_;
class PVEBattleService_PVEBattleResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVEBattleService_PVEBattleResponse>
      _instance;
} _PVEBattleService_PVEBattleResponse_default_instance_;
class PVEBattleServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVEBattleService>
      _instance;
} _PVEBattleService_default_instance_;
class DungeonInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DungeonInfo>
      _instance;
} _DungeonInfo_default_instance_;
class UserDungeonService_UserDungeonRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDungeonService_UserDungeonRequest>
      _instance;
} _UserDungeonService_UserDungeonRequest_default_instance_;
class UserDungeonService_UserDungeonResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDungeonService_UserDungeonResponse>
      _instance;
} _UserDungeonService_UserDungeonResponse_default_instance_;
class UserDungeonServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDungeonService>
      _instance;
} _UserDungeonService_default_instance_;
}  // namespace sg
namespace protobuf_PVE_2eproto {
static void InitDefaultsSailorInDungeon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SailorInDungeon_default_instance_;
    new (ptr) ::sg::SailorInDungeon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SailorInDungeon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_SailorInDungeon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSailorInDungeon}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_string_int.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int64_int.base,
      &protobuf_BaseStruct_2eproto::scc_info_SailorTalent.base,}};

static void InitDefaultsMonsterInDungeon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_MonsterInDungeon_default_instance_;
    new (ptr) ::sg::MonsterInDungeon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::MonsterInDungeon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MonsterInDungeon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMonsterInDungeon}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_float.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int64_int.base,}};

static void InitDefaultsEnemy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Enemy_default_instance_;
    new (ptr) ::sg::Enemy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Enemy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Enemy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEnemy}, {
      &protobuf_PVE_2eproto::scc_info_SailorInDungeon.base,
      &protobuf_PVE_2eproto::scc_info_MonsterInDungeon.base,}};

static void InitDefaultsDungeonAltar_Relic() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DungeonAltar_Relic_default_instance_;
    new (ptr) ::sg::DungeonAltar_Relic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DungeonAltar_Relic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DungeonAltar_Relic =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDungeonAltar_Relic}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,}};

static void InitDefaultsDungeonAltar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DungeonAltar_default_instance_;
    new (ptr) ::sg::DungeonAltar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DungeonAltar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DungeonAltar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDungeonAltar}, {
      &protobuf_PVE_2eproto::scc_info_DungeonAltar_Relic.base,
      &protobuf_PVE_2eproto::scc_info_MonsterInDungeon.base,}};

static void InitDefaultsElementProperty_RoomData_RoomEffect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_ElementProperty_RoomData_RoomEffect_default_instance_;
    new (ptr) ::sg::ElementProperty_RoomData_RoomEffect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::ElementProperty_RoomData_RoomEffect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ElementProperty_RoomData_RoomEffect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsElementProperty_RoomData_RoomEffect}, {
      &protobuf_BaseStruct_2eproto::scc_info_Item.base,
      &protobuf_BaseStruct_2eproto::scc_info_Equip.base,}};

static void InitDefaultsElementProperty_RoomData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_ElementProperty_RoomData_default_instance_;
    new (ptr) ::sg::ElementProperty_RoomData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::ElementProperty_RoomData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ElementProperty_RoomData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsElementProperty_RoomData}, {
      &protobuf_PVE_2eproto::scc_info_ElementProperty_RoomData_RoomEffect.base,}};

static void InitDefaultsElementProperty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_ElementProperty_default_instance_;
    new (ptr) ::sg::ElementProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::ElementProperty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ElementProperty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsElementProperty}, {
      &protobuf_PVE_2eproto::scc_info_ElementProperty_RoomData.base,}};

static void InitDefaultsFightManual() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_FightManual_default_instance_;
    new (ptr) ::sg::FightManual();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::FightManual::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FightManual =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFightManual}, {}};

static void InitDefaultsDungeonElement_Exchange_Exchange_Item() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DungeonElement_Exchange_Exchange_Item_default_instance_;
    new (ptr) ::sg::DungeonElement_Exchange_Exchange_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DungeonElement_Exchange_Exchange_Item::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DungeonElement_Exchange_Exchange_Item =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDungeonElement_Exchange_Exchange_Item}, {}};

static void InitDefaultsDungeonElement_Exchange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DungeonElement_Exchange_default_instance_;
    new (ptr) ::sg::DungeonElement_Exchange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DungeonElement_Exchange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DungeonElement_Exchange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDungeonElement_Exchange}, {
      &protobuf_PVE_2eproto::scc_info_DungeonElement_Exchange_Exchange_Item.base,}};

static void InitDefaultsDungeonElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DungeonElement_default_instance_;
    new (ptr) ::sg::DungeonElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DungeonElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DungeonElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDungeonElement}, {
      &protobuf_PVE_2eproto::scc_info_ElementProperty.base,
      &protobuf_PVE_2eproto::scc_info_DungeonElement_Exchange.base,}};

static void InitDefaultsDungeonContent_PathBranch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DungeonContent_PathBranch_default_instance_;
    new (ptr) ::sg::DungeonContent_PathBranch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DungeonContent_PathBranch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DungeonContent_PathBranch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDungeonContent_PathBranch}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,}};

static void InitDefaultsDungeonContent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DungeonContent_default_instance_;
    new (ptr) ::sg::DungeonContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DungeonContent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DungeonContent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDungeonContent}, {
      &protobuf_PVE_2eproto::scc_info_DungeonElement.base,
      &protobuf_PVE_2eproto::scc_info_DungeonContent_PathBranch.base,
      &protobuf_PVE_2eproto::scc_info_Enemy.base,}};

static void InitDefaultsUserTeamData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserTeamData_default_instance_;
    new (ptr) ::sg::UserTeamData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserTeamData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserTeamData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserTeamData}, {
      &protobuf_PVE_2eproto::scc_info_SailorInDungeon.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,}};

static void InitDefaultsUserDungeonInformation_ElementCount() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserDungeonInformation_ElementCount_default_instance_;
    new (ptr) ::sg::UserDungeonInformation_ElementCount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserDungeonInformation_ElementCount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserDungeonInformation_ElementCount =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserDungeonInformation_ElementCount}, {}};

static void InitDefaultsUserDungeonInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserDungeonInformation_default_instance_;
    new (ptr) ::sg::UserDungeonInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserDungeonInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_UserDungeonInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsUserDungeonInformation}, {
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,
      &protobuf_PVE_2eproto::scc_info_MonsterInDungeon.base,
      &protobuf_PVE_2eproto::scc_info_DungeonAltar.base,
      &protobuf_PVE_2eproto::scc_info_UserDungeonInformation_ElementCount.base,}};

static void InitDefaultsUserDungeonOperation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserDungeonOperation_default_instance_;
    new (ptr) ::sg::UserDungeonOperation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserDungeonOperation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserDungeonOperation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserDungeonOperation}, {}};

static void InitDefaultsDungeonEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DungeonEvent_default_instance_;
    new (ptr) ::sg::DungeonEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DungeonEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DungeonEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDungeonEvent}, {}};

static void InitDefaultsShipData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_ShipData_default_instance_;
    new (ptr) ::sg::ShipData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::ShipData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ShipData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsShipData}, {
      &protobuf_BaseStruct_2eproto::scc_info_Sailor.base,}};

static void InitDefaultsPveFacility() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PveFacility_default_instance_;
    new (ptr) ::sg::PveFacility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PveFacility::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PveFacility =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPveFacility}, {
      &protobuf_BaseStruct_2eproto::scc_info_Item.base,}};

static void InitDefaultsPveMapData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PveMapData_default_instance_;
    new (ptr) ::sg::PveMapData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PveMapData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PveMapData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPveMapData}, {
      &protobuf_PVE_2eproto::scc_info_PveFacility.base,}};

static void InitDefaultsPvePlayerMapData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PvePlayerMapData_default_instance_;
    new (ptr) ::sg::PvePlayerMapData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PvePlayerMapData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PvePlayerMapData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPvePlayerMapData}, {
      &protobuf_PVE_2eproto::scc_info_ShipData.base,
      &protobuf_PVE_2eproto::scc_info_PveFacility.base,}};

static void InitDefaultsPveDefenderData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PveDefenderData_default_instance_;
    new (ptr) ::sg::PveDefenderData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PveDefenderData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PveDefenderData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPveDefenderData}, {
      &protobuf_BaseStruct_2eproto::scc_info_Sailor.base,}};

static void InitDefaultsPVEBattleService_PVEBattleRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVEBattleService_PVEBattleRequest_default_instance_;
    new (ptr) ::sg::PVEBattleService_PVEBattleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVEBattleService_PVEBattleRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_PVEBattleService_PVEBattleRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsPVEBattleService_PVEBattleRequest}, {
      &protobuf_PVE_2eproto::scc_info_UserDungeonOperation.base,
      &protobuf_PVE_2eproto::scc_info_SailorInDungeon.base,
      &protobuf_PVE_2eproto::scc_info_FightManual.base,
      &protobuf_PVE_2eproto::scc_info_MonsterInDungeon.base,
      &protobuf_PVE_2eproto::scc_info_Enemy.base,
      &protobuf_PVE_2eproto::scc_info_DungeonAltar.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,}};

static void InitDefaultsPVEBattleService_PVEBattleResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVEBattleService_PVEBattleResponse_default_instance_;
    new (ptr) ::sg::PVEBattleService_PVEBattleResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVEBattleService_PVEBattleResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_PVEBattleService_PVEBattleResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPVEBattleService_PVEBattleResponse}, {
      &protobuf_PVE_2eproto::scc_info_DungeonContent.base,
      &protobuf_PVE_2eproto::scc_info_UserDungeonInformation.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,
      &protobuf_PVE_2eproto::scc_info_FightManual.base,
      &protobuf_PVE_2eproto::scc_info_UserTeamData.base,}};

static void InitDefaultsPVEBattleService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVEBattleService_default_instance_;
    new (ptr) ::sg::PVEBattleService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVEBattleService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PVEBattleService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPVEBattleService}, {
      &protobuf_PVE_2eproto::scc_info_PVEBattleService_PVEBattleRequest.base,
      &protobuf_PVE_2eproto::scc_info_PVEBattleService_PVEBattleResponse.base,}};

static void InitDefaultsDungeonInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_DungeonInfo_default_instance_;
    new (ptr) ::sg::DungeonInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::DungeonInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DungeonInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDungeonInfo}, {}};

static void InitDefaultsUserDungeonService_UserDungeonRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserDungeonService_UserDungeonRequest_default_instance_;
    new (ptr) ::sg::UserDungeonService_UserDungeonRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserDungeonService_UserDungeonRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserDungeonService_UserDungeonRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserDungeonService_UserDungeonRequest}, {}};

static void InitDefaultsUserDungeonService_UserDungeonResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserDungeonService_UserDungeonResponse_default_instance_;
    new (ptr) ::sg::UserDungeonService_UserDungeonResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserDungeonService_UserDungeonResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_UserDungeonService_UserDungeonResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsUserDungeonService_UserDungeonResponse}, {
      &protobuf_PVE_2eproto::scc_info_DungeonEvent.base,
      &protobuf_PVE_2eproto::scc_info_DungeonInfo.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int_int.base,}};

static void InitDefaultsUserDungeonService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserDungeonService_default_instance_;
    new (ptr) ::sg::UserDungeonService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserDungeonService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserDungeonService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserDungeonService}, {
      &protobuf_PVE_2eproto::scc_info_UserDungeonService_UserDungeonRequest.base,
      &protobuf_PVE_2eproto::scc_info_UserDungeonService_UserDungeonResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SailorInDungeon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MonsterInDungeon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Enemy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DungeonAltar_Relic.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DungeonAltar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ElementProperty_RoomData_RoomEffect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ElementProperty_RoomData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ElementProperty.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FightManual.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DungeonElement_Exchange_Exchange_Item.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DungeonElement_Exchange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DungeonElement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DungeonContent_PathBranch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DungeonContent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserTeamData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDungeonInformation_ElementCount.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDungeonInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDungeonOperation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DungeonEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShipData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PveFacility.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PveMapData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvePlayerMapData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PveDefenderData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVEBattleService_PVEBattleRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVEBattleService_PVEBattleResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVEBattleService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DungeonInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDungeonService_UserDungeonRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDungeonService_UserDungeonResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDungeonService.base);
}

::google::protobuf::Metadata file_level_metadata[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, fight_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, special_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, talent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, hp_remain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, place_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SailorInDungeon, hunger_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::MonsterInDungeon, hp_remain_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Enemy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Enemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Enemy, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Enemy, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Enemy, seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Enemy, sailor_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Enemy, monster_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Enemy, contain_elements_),
  2,
  3,
  4,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar_Relic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar_Relic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar_Relic, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar_Relic, skills_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar, relic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonAltar, monster_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData_RoomEffect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData_RoomEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData_RoomEffect, enter_effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData_RoomEffect, effect_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData_RoomEffect, effect_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData_RoomEffect, effect_value_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData_RoomEffect, contain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData_RoomEffect, equips_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty_RoomData, effects_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, lock_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, change_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, trigger_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, clean_up_reward_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, belong_facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, map_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, unlock_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, locked_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, trigger_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, room_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ElementProperty, state_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  13,
  ~0u,
  14,
  1,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FightManual, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FightManual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FightManual, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::FightManual, typeid__),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange_Exchange_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange_Exchange_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange_Exchange_Item, item_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange_Exchange_Item, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange_Exchange_Item, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange_Exchange_Item, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange_Exchange_Item, value_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement_Exchange, get_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement, property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement, exchange_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonElement, elements_),
  1,
  2,
  4,
  3,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent_PathBranch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent_PathBranch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent_PathBranch, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent_PathBranch, layer_change_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, now_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, monster_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, elements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, path_choice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, real_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonContent, enemys_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTeamData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTeamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTeamData, user_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTeamData, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserTeamData, talents_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation_ElementCount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation_ElementCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation_ElementCount, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation_ElementCount, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation_ElementCount, num_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, revive_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, talents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, packages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, saved_npc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, saved_customers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, triggered_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, occupation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, secret_room_distribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, layer_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, friendly_monsters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, altars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonInformation, element_count_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonOperation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonOperation, operation_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonOperation, target_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonOperation, operation_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonOperation, data_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonEvent, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonEvent, finish_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonEvent, require_value_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipData, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipData, ship_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipData, rooms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipData, ship_tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipData, facilitys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ShipData, sailors_),
  0,
  4,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveFacility, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveFacility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveFacility, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveFacility, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveFacility, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveFacility, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveFacility, contain_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveMapData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveMapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveMapData, model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveMapData, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveMapData, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveMapData, rooms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveMapData, map_tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveMapData, facilitys_),
  2,
  3,
  4,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PvePlayerMapData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PvePlayerMapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PvePlayerMapData, shipdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PvePlayerMapData, facilitys_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveDefenderData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveDefenderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveDefenderData, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PveDefenderData, defend_team_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, used_sailor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, operation_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, team_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, battle_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, destory_facilitys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, path_choice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, hunt_animal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, enemy_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, treasure_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, pve_model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, new_manual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, debug_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, monsters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, enemys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, altars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleRequest, take_items_),
  8,
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, cost_viality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, user_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, pve_map_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, map_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, found_manual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, saved_npc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, saved_customer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, lose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, finish_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService_PVEBattleResponse, user_team_),
  7,
  1,
  8,
  2,
  3,
  9,
  10,
  0,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVEBattleService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonInfo, clear_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonInfo, max_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonInfo, reward_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonInfo, daily_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::DungeonInfo, open_chest_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonRequest, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonRequest, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonRequest, layer_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonResponse, events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonResponse, dungeons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonResponse, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonResponse, cost_viality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService_UserDungeonResponse, saved_customer_),
  1,
  ~0u,
  ~0u,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserDungeonService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::sg::SailorInDungeon)},
  { 35, 48, sizeof(::sg::MonsterInDungeon)},
  { 56, 67, sizeof(::sg::Enemy)},
  { 73, 80, sizeof(::sg::DungeonAltar_Relic)},
  { 82, 91, sizeof(::sg::DungeonAltar)},
  { 95, 106, sizeof(::sg::ElementProperty_RoomData_RoomEffect)},
  { 112, 121, sizeof(::sg::ElementProperty_RoomData)},
  { 125, 147, sizeof(::sg::ElementProperty)},
  { 164, 171, sizeof(::sg::FightManual)},
  { 173, 183, sizeof(::sg::DungeonElement_Exchange_Exchange_Item)},
  { 188, 198, sizeof(::sg::DungeonElement_Exchange)},
  { 203, 215, sizeof(::sg::DungeonElement)},
  { 222, 229, sizeof(::sg::DungeonContent_PathBranch)},
  { 231, 244, sizeof(::sg::DungeonContent)},
  { 252, 260, sizeof(::sg::UserTeamData)},
  { 263, 271, sizeof(::sg::UserDungeonInformation_ElementCount)},
  { 274, 291, sizeof(::sg::UserDungeonInformation)},
  { 303, 312, sizeof(::sg::UserDungeonOperation)},
  { 316, 325, sizeof(::sg::DungeonEvent)},
  { 329, 340, sizeof(::sg::ShipData)},
  { 346, 356, sizeof(::sg::PveFacility)},
  { 361, 372, sizeof(::sg::PveMapData)},
  { 378, 385, sizeof(::sg::PvePlayerMapData)},
  { 387, 394, sizeof(::sg::PveDefenderData)},
  { 396, 419, sizeof(::sg::PVEBattleService_PVEBattleRequest)},
  { 437, 456, sizeof(::sg::PVEBattleService_PVEBattleResponse)},
  { 470, 477, sizeof(::sg::PVEBattleService)},
  { 479, 491, sizeof(::sg::DungeonInfo)},
  { 498, 507, sizeof(::sg::UserDungeonService_UserDungeonRequest)},
  { 511, 522, sizeof(::sg::UserDungeonService_UserDungeonResponse)},
  { 528, 535, sizeof(::sg::UserDungeonService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SailorInDungeon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_MonsterInDungeon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Enemy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DungeonAltar_Relic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DungeonAltar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_ElementProperty_RoomData_RoomEffect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_ElementProperty_RoomData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_ElementProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_FightManual_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DungeonElement_Exchange_Exchange_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DungeonElement_Exchange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DungeonElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DungeonContent_PathBranch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DungeonContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserTeamData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserDungeonInformation_ElementCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserDungeonInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserDungeonOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DungeonEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_ShipData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PveFacility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PveMapData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PvePlayerMapData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PveDefenderData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVEBattleService_PVEBattleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVEBattleService_PVEBattleResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVEBattleService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_DungeonInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserDungeonService_UserDungeonRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserDungeonService_UserDungeonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserDungeonService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "PVE.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tPVE.proto\022\002sg\032\020BaseStruct.proto\"\222\003\n\017Sa"
      "ilorInDungeon\022\n\n\002id\030\001 \002(\005\022\016\n\006typeid\030\002 \002("
      "\005\022\r\n\005state\030\003 \002(\005\022\r\n\005index\030\004 \002(\005\022\r\n\005level"
      "\030\005 \002(\005\022\014\n\004star\030\006 \002(\005\022(\n\tattribute\030\007 \003(\0132"
      "\025.sg.pb_pair_int_float\022!\n\004buff\030\010 \003(\0132\023.s"
      "g.pb_pair_int_int\022.\n\017fight_attribute\030\t \003"
      "(\0132\025.sg.pb_pair_int_float\0221\n\021special_att"
      "ribute\030\n \003(\0132\026.sg.pb_pair_string_int\022$\n\005"
      "skill\030\013 \003(\0132\025.sg.pb_pair_int64_int\022 \n\006ta"
      "lent\030\014 \001(\0132\020.sg.SailorTalent\022\021\n\thp_remai"
      "n\030\r \001(\002\022\r\n\005place\030\016 \001(\005\022\016\n\006hunger\030\017 \001(\005\"\322"
      "\001\n\020MonsterInDungeon\022\n\n\002id\030\001 \002(\005\022\016\n\006typei"
      "d\030\002 \002(\005\022\r\n\005state\030\003 \002(\005\022\r\n\005level\030\004 \002(\005\022(\n"
      "\tattribute\030\007 \003(\0132\025.sg.pb_pair_int_float\022"
      "!\n\004buff\030\010 \003(\0132\023.sg.pb_pair_int_int\022$\n\005sk"
      "ill\030\013 \003(\0132\025.sg.pb_pair_int64_int\022\021\n\thp_r"
      "emain\030\r \001(\002\"\237\001\n\005Enemy\022\n\n\002id\030\001 \002(\005\022\014\n\004typ"
      "e\030\002 \002(\005\022\014\n\004seat\030\003 \001(\005\022(\n\013sailor_data\030\004 \001"
      "(\0132\023.sg.SailorInDungeon\022*\n\014monster_data\030"
      "\005 \001(\0132\024.sg.MonsterInDungeon\022\030\n\020contain_e"
      "lements\030\006 \003(\005\"\271\001\n\014DungeonAltar\022\016\n\006typeid"
      "\030\001 \002(\005\022\r\n\005state\030\002 \002(\005\022%\n\005relic\030\003 \001(\0132\026.s"
      "g.DungeonAltar.Relic\022%\n\007monster\030\004 \001(\0132\024."
      "sg.MonsterInDungeon\032<\n\005Relic\022\016\n\006typeid\030\001"
      " \002(\005\022#\n\006skills\030\002 \003(\0132\023.sg.pb_pair_int_in"
      "t\"\201\005\n\017ElementProperty\022\r\n\005index\030\001 \001(\005\022\013\n\003"
      "num\030\002 \001(\005\022\013\n\003exp\030\003 \001(\005\022\r\n\005pos_x\030\004 \001(\005\022\r\n"
      "\005pos_y\030\005 \001(\005\022\017\n\007lock_id\030\006 \001(\005\022\017\n\007room_id"
      "\030\007 \001(\005\022\024\n\014change_model\030\010 \001(\005\022\022\n\ntrigger_"
      "id\030\t \001(\005\022\033\n\023clean_up_reward_tag\030\n \001(\005\022\027\n"
      "\017belong_facility\030\013 \001(\005\022\020\n\010map_data\030\014 \001(\014"
      "\022\023\n\013unlock_room\030\r \001(\005\022\023\n\013locked_room\030\016 \003"
      "(\005\022\025\n\rtrigger_event\030\017 \001(\003\022/\n\troom_data\030\020"
      " \001(\0132\034.sg.ElementProperty.RoomData\022\r\n\005st"
      "ate\030\021 \001(\005\032\221\002\n\010RoomData\022\016\n\006roomid\030\001 \002(\005\022\014"
      "\n\004type\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\0228\n\007effects\030\004"
      " \003(\0132\'.sg.ElementProperty.RoomData.RoomE"
      "ffect\032\235\001\n\nRoomEffect\022\024\n\014enter_effect\030\001 \001"
      "(\005\022\021\n\teffect_id\030\002 \001(\005\022\024\n\014effect_value\030\003 "
      "\001(\005\022\032\n\022effect_value_ratio\030\004 \001(\002\022\031\n\007conta"
      "in\030\005 \003(\0132\010.sg.Item\022\031\n\006equips\030\006 \003(\0132\t.sg."
      "Equip\"+\n\013FightManual\022\014\n\004type\030\001 \002(\005\022\016\n\006ty"
      "peid\030\002 \003(\005\"\300\003\n\016DungeonElement\022\n\n\002id\030\001 \002("
      "\005\022\020\n\010owner_id\030\002 \002(\005\022\014\n\004type\030\003 \002(\005\022\017\n\007typ"
      "eid_\030\004 \002(\003\022%\n\010property\030\005 \001(\0132\023.sg.Elemen"
      "tProperty\0222\n\rexchange_list\030\006 \003(\0132\033.sg.Du"
      "ngeonElement.Exchange\022\020\n\010elements\030\007 \003(\005\032"
      "\203\002\n\010Exchange\022\n\n\002id\030\001 \002(\005\022\016\n\006typeid\030\002 \002(\005"
      "\022\r\n\005index\030\003 \002(\005\0227\n\004cost\030\004 \003(\0132).sg.Dunge"
      "onElement.Exchange.Exchange_Item\0226\n\003get\030"
      "\005 \003(\0132).sg.DungeonElement.Exchange.Excha"
      "nge_Item\032[\n\rExchange_Item\022\021\n\titem_type\030\001"
      " \002(\005\022\n\n\002id\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\016\n\006typeid"
      "\030\004 \001(\004\022\r\n\005value\030\005 \001(\004\"\251\002\n\016DungeonContent"
      "\022\021\n\tnow_layer\030\001 \002(\005\022\r\n\005style\030\002 \002(\005\022\025\n\rmo"
      "nster_level\030\003 \002(\005\022$\n\010elements\030\004 \003(\0132\022.sg"
      ".DungeonElement\0222\n\013path_choice\030\005 \003(\0132\035.s"
      "g.DungeonContent.PathBranch\022\022\n\nreal_laye"
      "r\030\006 \001(\005\022\020\n\010model_id\030\007 \001(\005\022\031\n\006enemys\030\010 \003("
      "\0132\t.sg.Enemy\032C\n\nPathBranch\022\n\n\002id\030\001 \002(\005\022)"
      "\n\014layer_change\030\002 \003(\0132\023.sg.pb_pair_int_in"
      "t\"k\n\014UserTeamData\022\022\n\nuser_level\030\001 \002(\005\022!\n"
      "\004team\030\002 \003(\0132\023.sg.SailorInDungeon\022$\n\007tale"
      "nts\030\003 \003(\0132\023.sg.pb_pair_int_int\"\202\004\n\026UserD"
      "ungeonInformation\022\024\n\014revive_times\030\001 \001(\005\022"
      "$\n\007talents\030\003 \003(\0132\023.sg.pb_pair_int_int\022%\n"
      "\010packages\030\004 \003(\0132\023.sg.pb_pair_int_int\022\021\n\t"
      "saved_npc\030\005 \003(\003\022\027\n\017saved_customers\030\006 \003(\003"
      "\022\027\n\017triggered_event\030\007 \003(\003\022\022\n\noccupation\030"
      "\010 \001(\005\0223\n\026secret_room_distribute\030\t \003(\0132\023."
      "sg.pb_pair_int_int\022)\n\014layer_change\030\n \003(\013"
      "2\023.sg.pb_pair_int_int\022/\n\021friendly_monste"
      "rs\030\013 \003(\0132\024.sg.MonsterInDungeon\022 \n\006altars"
      "\030\014 \003(\0132\020.sg.DungeonAltar\022>\n\relement_coun"
      "t\030\r \003(\0132\'.sg.UserDungeonInformation.Elem"
      "entCount\0329\n\014ElementCount\022\014\n\004type\030\001 \002(\005\022\016"
      "\n\006typeid\030\002 \002(\005\022\013\n\003num\030\003 \002(\005\"m\n\024UserDunge"
      "onOperation\022\026\n\016operation_type\030\001 \002(\005\022\026\n\016t"
      "arget_element\030\002 \001(\005\022\027\n\017operation_param\030\003"
      " \001(\005\022\014\n\004data\030\004 \001(\014\"V\n\014DungeonEvent\022\n\n\002id"
      "\030\001 \002(\005\022\r\n\005state\030\002 \002(\005\022\024\n\014finish_value\030\003 "
      "\002(\005\022\025\n\rrequire_value\030\004 \001(\005\"\201\001\n\010ShipData\022"
      "\016\n\006userid\030\001 \002(\014\022\022\n\nship_model\030\002 \002(\005\022\r\n\005r"
      "ooms\030\003 \001(\014\022\022\n\nship_tiles\030\004 \001(\014\022\021\n\tfacili"
      "tys\030\005 \002(\014\022\033\n\007sailors\030\006 \003(\0132\n.sg.Sailor\"Z"
      "\n\013PveFacility\022\n\n\002id\030\001 \002(\005\022\016\n\006typeid\030\002 \002("
      "\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\031\n\007contain\030\005 \003(\013"
      "2\010.sg.Item\"\203\001\n\nPveMapData\022\020\n\010model_id\030\002 "
      "\002(\005\022\r\n\005width\030\003 \002(\005\022\016\n\006height\030\004 \002(\005\022\r\n\005ro"
      "oms\030\005 \001(\014\022\021\n\tmap_tiles\030\006 \001(\014\022\"\n\tfacility"
      "s\030\007 \003(\0132\017.sg.PveFacility\"V\n\020PvePlayerMap"
      "Data\022\036\n\010shipdata\030\001 \002(\0132\014.sg.ShipData\022\"\n\t"
      "facilitys\030\002 \003(\0132\017.sg.PveFacility\"B\n\017PveD"
      "efenderData\022\016\n\006userid\030\001 \002(\014\022\037\n\013defend_te"
      "am\030\002 \003(\0132\n.sg.Sailor\"\333\014\n\020PVEBattleServic"
      "e\0222\n\003req\030\001 \001(\0132%.sg.PVEBattleService.PVE"
      "BattleRequest\0224\n\004resp\030\002 \001(\0132&.sg.PVEBatt"
      "leService.PVEBattleResponse\032\243\004\n\020PVEBattl"
      "eRequest\022)\n\003cmd\030\001 \002(\0162\034.sg.PVEBattleServ"
      "ice.PVE_CMD\022\021\n\ttarget_id\030\003 \001(\004\022\023\n\013used_s"
      "ailor\030\004 \003(\005\0220\n\016operation_list\030\005 \003(\0132\030.sg"
      ".UserDungeonOperation\022\'\n\nteam_state\030\006 \003("
      "\0132\023.sg.SailorInDungeon\022\025\n\rbattle_result\030"
      "\007 \001(\005\022\031\n\021destory_facilitys\030\010 \003(\005\022\023\n\013path"
      "_choice\030\t \001(\005\022\023\n\013hunt_animal\030\n \001(\005\022\024\n\014en"
      "emy_typeid\030\013 \001(\005\022\023\n\013treasure_id\030\014 \001(\005\022\024\n"
      "\014pve_model_id\030\r \001(\005\022#\n\nnew_manual\030\016 \003(\0132"
      "\017.sg.FightManual\022\021\n\tdebug_tag\030\017 \001(\010\022&\n\010m"
      "onsters\030\020 \003(\0132\024.sg.MonsterInDungeon\022\031\n\006e"
      "nemys\030\021 \003(\0132\t.sg.Enemy\022 \n\006altars\030\022 \003(\0132\020"
      ".sg.DungeonAltar\022\'\n\ntake_items\030\023 \003(\0132\023.s"
      "g.pb_pair_int_int\032\231\003\n\021PVEBattleResponse\022"
      "\016\n\006result\030\001 \002(\005\022#\n\007content\030\002 \001(\0132\022.sg.Du"
      "ngeonContent\022\024\n\014cost_viality\030\003 \001(\005\022-\n\tus"
      "er_info\030\004 \001(\0132\032.sg.UserDungeonInformatio"
      "n\022\032\n\006reward\030\005 \001(\0132\n.sg.Reward\022\022\n\ndungeon"
      "_id\030\006 \001(\005\022\024\n\014pve_map_type\030\007 \001(\005\022\020\n\010map_d"
      "ata\030\010 \001(\014\022%\n\014found_manual\030\t \003(\0132\017.sg.Fig"
      "htManual\022\021\n\tsaved_npc\030\n \003(\003\022\026\n\016saved_cus"
      "tomer\030\013 \003(\003\022\030\n\004lose\030\014 \001(\0132\n.sg.Reward\022!\n"
      "\rfinish_reward\030\r \001(\0132\n.sg.Reward\022#\n\tuser"
      "_team\030\016 \001(\0132\020.sg.UserTeamData\"\232\004\n\007PVE_CM"
      "D\022\t\n\005START\020\001\022\013\n\007TO_NEXT\020\002\022\010\n\004OVER\020\003\022\013\n\007R"
      "ESTORE\020\004\022\020\n\014ATTACK_ENTRY\020\005\022\017\n\013ATTACK_OVE"
      "R\020\006\022\023\n\017CHECK_CAN_FIGHT\020\007\022\016\n\nHUNT_START\020\010"
      "\022\r\n\tHUNT_OVER\020\t\022\031\n\025TREASURE_BATTLE_START"
      "\020\n\022\030\n\024TREASURE_BATTLE_OVER\020\013\022\026\n\022QUERY_FI"
      "GHT_MANUAL\020\014\022\n\n\006REVIVE\020\r\022\026\n\022ATTACK_MODEL"
      "_START\020\016\022\025\n\021ATTACK_MODEL_OVER\020\017\022\024\n\020SHIP_"
      "EVENT_START\020\020\022\023\n\017SHIP_EVENT_OVER\020\021\022\032\n\026NA"
      "VIGATION_EVENT_START\020\022\022\032\n\026NAVIGATION_EVE"
      "NT_DOING\020\023\022\031\n\025NAVIGATION_EVENT_OVER\020\024\022\031\n"
      "\025MAELSTROM_EVENT_START\020\025\022\031\n\025MAELSTROM_EV"
      "ENT_DOING\020\026\022\030\n\024MAELSTROM_EVENT_OVER\020\027\022\016\n"
      "\nOPEN_CHEST\020\030\022\020\n\014INVADE_START\020\031\022\021\n\rREVEN"
      "GE_START\020\032\"\222\001\n\013DungeonInfo\022\n\n\002id\030\001 \002(\005\022\r"
      "\n\005state\030\002 \002(\005\022\023\n\013clear_times\030\003 \001(\005\022\021\n\tma"
      "x_layer\030\004 \001(\005\022\027\n\017reward_received\030\005 \003(\005\022\023"
      "\n\013daily_times\030\006 \001(\005\022\022\n\nopen_chest\030\007 \003(\005\""
      "\351\004\n\022UserDungeonService\0226\n\003req\030\001 \001(\0132).sg"
      ".UserDungeonService.UserDungeonRequest\0228"
      "\n\004resp\030\002 \001(\0132*.sg.UserDungeonService.Use"
      "rDungeonResponse\032z\n\022UserDungeonRequest\022/"
      "\n\003cmd\030\001 \002(\0162\".sg.UserDungeonService.DUNG"
      "EON_CMD\022\022\n\ndungeon_id\030\002 \001(\005\022\020\n\010event_id\030"
      "\003 \001(\005\022\r\n\005layer\030\004 \001(\005\032\311\001\n\023UserDungeonResp"
      "onse\022\016\n\006result\030\001 \002(\005\022 \n\006events\030\002 \003(\0132\020.s"
      "g.DungeonEvent\022!\n\010dungeons\030\003 \003(\0132\017.sg.Du"
      "ngeonInfo\022\032\n\006reward\030\004 \001(\0132\n.sg.Reward\022\024\n"
      "\014cost_viality\030\005 \001(\005\022+\n\016saved_customer\030\006 "
      "\003(\0132\023.sg.pb_pair_int_int\"\230\001\n\013DUNGEON_CMD"
      "\022\017\n\013QUERY_EVENT\020\001\022\021\n\rQUERY_DUNGEON\020\002\022\017\n\013"
      "FAST_FINISH\020\003\022\024\n\020GET_EVENT_REWARD\020\004\022\024\n\020G"
      "ET_FINAL_REWARD\020\005\022\022\n\016UNLOCK_DUNGEON\020\006\022\024\n"
      "\020GET_LAYER_REWARD\020\007*\254\001\n\025DUNGEON_SPECIAL_"
      "EVENT\022 \n\034DSE_CLEAR_ITEM_ON_THE_GROUND\020\001\022"
      "\024\n\020DSE_CHANGE_MODEL\020\002\022\024\n\020DSE_LAYER_CHANG"
      "E\020\003\022\031\n\025DSE_ENTER_SECRET_ROOM\020\004\022\023\n\017DSE_UN"
      "LOCK_ROOM\020\005\022\025\n\021DSE_EVENT_TRIGGER\020\006*:\n\021PV"
      "E_BATTLE_RESULT\022\022\n\016BATTLE_SUCCESS\020\001\022\021\n\rB"
      "ATTLE_FAILED\020\002*~\n\rDUNGEON_STATE\022\030\n\024DUNGE"
      "ON_STATE_LOCKED\020\001\022\032\n\026DUNGEON_STATE_UNLOC"
      "KED\020\002\022\033\n\027DUNGEON_STATE_NO_REWARD\020\003\022\032\n\026DU"
      "NGEON_STATE_FINISHED\020\004B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6547);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PVE.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_PVE_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* PVEBattleService_PVE_CMD_descriptor() {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PVE_2eproto::file_level_enum_descriptors[0];
}
bool PVEBattleService_PVE_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PVEBattleService_PVE_CMD PVEBattleService::START;
const PVEBattleService_PVE_CMD PVEBattleService::TO_NEXT;
const PVEBattleService_PVE_CMD PVEBattleService::OVER;
const PVEBattleService_PVE_CMD PVEBattleService::RESTORE;
const PVEBattleService_PVE_CMD PVEBattleService::ATTACK_ENTRY;
const PVEBattleService_PVE_CMD PVEBattleService::ATTACK_OVER;
const PVEBattleService_PVE_CMD PVEBattleService::CHECK_CAN_FIGHT;
const PVEBattleService_PVE_CMD PVEBattleService::HUNT_START;
const PVEBattleService_PVE_CMD PVEBattleService::HUNT_OVER;
const PVEBattleService_PVE_CMD PVEBattleService::TREASURE_BATTLE_START;
const PVEBattleService_PVE_CMD PVEBattleService::TREASURE_BATTLE_OVER;
const PVEBattleService_PVE_CMD PVEBattleService::QUERY_FIGHT_MANUAL;
const PVEBattleService_PVE_CMD PVEBattleService::REVIVE;
const PVEBattleService_PVE_CMD PVEBattleService::ATTACK_MODEL_START;
const PVEBattleService_PVE_CMD PVEBattleService::ATTACK_MODEL_OVER;
const PVEBattleService_PVE_CMD PVEBattleService::SHIP_EVENT_START;
const PVEBattleService_PVE_CMD PVEBattleService::SHIP_EVENT_OVER;
const PVEBattleService_PVE_CMD PVEBattleService::NAVIGATION_EVENT_START;
const PVEBattleService_PVE_CMD PVEBattleService::NAVIGATION_EVENT_DOING;
const PVEBattleService_PVE_CMD PVEBattleService::NAVIGATION_EVENT_OVER;
const PVEBattleService_PVE_CMD PVEBattleService::MAELSTROM_EVENT_START;
const PVEBattleService_PVE_CMD PVEBattleService::MAELSTROM_EVENT_DOING;
const PVEBattleService_PVE_CMD PVEBattleService::MAELSTROM_EVENT_OVER;
const PVEBattleService_PVE_CMD PVEBattleService::OPEN_CHEST;
const PVEBattleService_PVE_CMD PVEBattleService::INVADE_START;
const PVEBattleService_PVE_CMD PVEBattleService::REVENGE_START;
const PVEBattleService_PVE_CMD PVEBattleService::PVE_CMD_MIN;
const PVEBattleService_PVE_CMD PVEBattleService::PVE_CMD_MAX;
const int PVEBattleService::PVE_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserDungeonService_DUNGEON_CMD_descriptor() {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PVE_2eproto::file_level_enum_descriptors[1];
}
bool UserDungeonService_DUNGEON_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserDungeonService_DUNGEON_CMD UserDungeonService::QUERY_EVENT;
const UserDungeonService_DUNGEON_CMD UserDungeonService::QUERY_DUNGEON;
const UserDungeonService_DUNGEON_CMD UserDungeonService::FAST_FINISH;
const UserDungeonService_DUNGEON_CMD UserDungeonService::GET_EVENT_REWARD;
const UserDungeonService_DUNGEON_CMD UserDungeonService::GET_FINAL_REWARD;
const UserDungeonService_DUNGEON_CMD UserDungeonService::UNLOCK_DUNGEON;
const UserDungeonService_DUNGEON_CMD UserDungeonService::GET_LAYER_REWARD;
const UserDungeonService_DUNGEON_CMD UserDungeonService::DUNGEON_CMD_MIN;
const UserDungeonService_DUNGEON_CMD UserDungeonService::DUNGEON_CMD_MAX;
const int UserDungeonService::DUNGEON_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DUNGEON_SPECIAL_EVENT_descriptor() {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PVE_2eproto::file_level_enum_descriptors[2];
}
bool DUNGEON_SPECIAL_EVENT_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PVE_BATTLE_RESULT_descriptor() {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PVE_2eproto::file_level_enum_descriptors[3];
}
bool PVE_BATTLE_RESULT_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DUNGEON_STATE_descriptor() {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PVE_2eproto::file_level_enum_descriptors[4];
}
bool DUNGEON_STATE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SailorInDungeon::InitAsDefaultInstance() {
  ::sg::_SailorInDungeon_default_instance_._instance.get_mutable()->talent_ = const_cast< ::sg::SailorTalent*>(
      ::sg::SailorTalent::internal_default_instance());
}
void SailorInDungeon::clear_attribute() {
  attribute_.Clear();
}
void SailorInDungeon::clear_buff() {
  buff_.Clear();
}
void SailorInDungeon::clear_fight_attribute() {
  fight_attribute_.Clear();
}
void SailorInDungeon::clear_special_attribute() {
  special_attribute_.Clear();
}
void SailorInDungeon::clear_skill() {
  skill_.Clear();
}
void SailorInDungeon::unsafe_arena_set_allocated_talent(
    ::sg::SailorTalent* talent) {
  if (GetArenaNoVirtual() == NULL) {
    delete talent_;
  }
  talent_ = talent;
  if (talent) {
    set_has_talent();
  } else {
    clear_has_talent();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.SailorInDungeon.talent)
}
void SailorInDungeon::clear_talent() {
  if (talent_ != NULL) talent_->Clear();
  clear_has_talent();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SailorInDungeon::kIdFieldNumber;
const int SailorInDungeon::kTypeidFieldNumber;
const int SailorInDungeon::kStateFieldNumber;
const int SailorInDungeon::kIndexFieldNumber;
const int SailorInDungeon::kLevelFieldNumber;
const int SailorInDungeon::kStarFieldNumber;
const int SailorInDungeon::kAttributeFieldNumber;
const int SailorInDungeon::kBuffFieldNumber;
const int SailorInDungeon::kFightAttributeFieldNumber;
const int SailorInDungeon::kSpecialAttributeFieldNumber;
const int SailorInDungeon::kSkillFieldNumber;
const int SailorInDungeon::kTalentFieldNumber;
const int SailorInDungeon::kHpRemainFieldNumber;
const int SailorInDungeon::kPlaceFieldNumber;
const int SailorInDungeon::kHungerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SailorInDungeon::SailorInDungeon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_SailorInDungeon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SailorInDungeon)
}
SailorInDungeon::SailorInDungeon(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attribute_(arena),
  buff_(arena),
  fight_attribute_(arena),
  special_attribute_(arena),
  skill_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_SailorInDungeon.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SailorInDungeon)
}
SailorInDungeon::SailorInDungeon(const SailorInDungeon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      buff_(from.buff_),
      fight_attribute_(from.fight_attribute_),
      special_attribute_(from.special_attribute_),
      skill_(from.skill_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_talent()) {
    talent_ = new ::sg::SailorTalent(*from.talent_);
  } else {
    talent_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hunger_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hunger_));
  // @@protoc_insertion_point(copy_constructor:sg.SailorInDungeon)
}

void SailorInDungeon::SharedCtor() {
  ::memset(&talent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hunger_) -
      reinterpret_cast<char*>(&talent_)) + sizeof(hunger_));
}

SailorInDungeon::~SailorInDungeon() {
  // @@protoc_insertion_point(destructor:sg.SailorInDungeon)
  SharedDtor();
}

void SailorInDungeon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete talent_;
}

void SailorInDungeon::ArenaDtor(void* object) {
  SailorInDungeon* _this = reinterpret_cast< SailorInDungeon* >(object);
  (void)_this;
}
void SailorInDungeon::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SailorInDungeon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SailorInDungeon::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SailorInDungeon& SailorInDungeon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_SailorInDungeon.base);
  return *internal_default_instance();
}


void SailorInDungeon::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SailorInDungeon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  buff_.Clear();
  fight_attribute_.Clear();
  special_attribute_.Clear();
  skill_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(talent_ != NULL);
    talent_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hp_remain_) -
        reinterpret_cast<char*>(&id_)) + sizeof(hp_remain_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&place_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hunger_) -
        reinterpret_cast<char*>(&place_)) + sizeof(hunger_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SailorInDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SailorInDungeon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_float attribute = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int buff = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_float fight_attribute = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fight_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_string_int special_attribute = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_special_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int64_int skill = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.SailorTalent talent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_talent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hp_remain = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_hp_remain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hp_remain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 place = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_place();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hunger = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_hunger();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hunger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SailorInDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SailorInDungeon)
  return false;
#undef DO_
}

void SailorInDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SailorInDungeon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // required int32 index = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required int32 star = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->star(), output);
  }

  // repeated .sg.pb_pair_int_float attribute = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->attribute(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_int buff = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->buff(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_float fight_attribute = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fight_attribute_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->fight_attribute(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_string_int special_attribute = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->special_attribute_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->special_attribute(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int64_int skill = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->skill(static_cast<int>(i)),
      output);
  }

  // optional .sg.SailorTalent talent = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_talent(), output);
  }

  // optional float hp_remain = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->hp_remain(), output);
  }

  // optional int32 place = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->place(), output);
  }

  // optional int32 hunger = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hunger(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SailorInDungeon)
}

::google::protobuf::uint8* SailorInDungeon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SailorInDungeon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // required int32 index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required int32 star = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->star(), target);
  }

  // repeated .sg.pb_pair_int_float attribute = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->attribute(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_int buff = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->buff(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_float fight_attribute = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fight_attribute_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->fight_attribute(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_string_int special_attribute = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->special_attribute_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->special_attribute(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int64_int skill = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->skill(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.SailorTalent talent = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_talent(), deterministic, target);
  }

  // optional float hp_remain = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->hp_remain(), target);
  }

  // optional int32 place = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->place(), target);
  }

  // optional int32 hunger = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hunger(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SailorInDungeon)
  return target;
}

size_t SailorInDungeon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.SailorInDungeon)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_state()) {
    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_index()) {
    // required int32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_level()) {
    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_star()) {
    // required int32 star = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  return total_size;
}
size_t SailorInDungeon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SailorInDungeon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007e) ^ 0x0000007e) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 star = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.pb_pair_int_float attribute = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int buff = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->buff_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buff(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_float fight_attribute = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->fight_attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fight_attribute(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_string_int special_attribute = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->special_attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->special_attribute(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int64_int skill = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->skill_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->skill(static_cast<int>(i)));
    }
  }

  // optional .sg.SailorTalent talent = 12;
  if (has_talent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *talent_);
  }

  // optional float hp_remain = 13;
  if (has_hp_remain()) {
    total_size += 1 + 4;
  }

  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 place = 14;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

    // optional int32 hunger = 15;
    if (has_hunger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hunger());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SailorInDungeon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SailorInDungeon)
  GOOGLE_DCHECK_NE(&from, this);
  const SailorInDungeon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SailorInDungeon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SailorInDungeon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SailorInDungeon)
    MergeFrom(*source);
  }
}

void SailorInDungeon::MergeFrom(const SailorInDungeon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SailorInDungeon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  buff_.MergeFrom(from.buff_);
  fight_attribute_.MergeFrom(from.fight_attribute_);
  special_attribute_.MergeFrom(from.special_attribute_);
  skill_.MergeFrom(from.skill_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_talent()->::sg::SailorTalent::MergeFrom(from.talent());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000080u) {
      hp_remain_ = from.hp_remain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      place_ = from.place_;
    }
    if (cached_has_bits & 0x00000200u) {
      hunger_ = from.hunger_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SailorInDungeon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SailorInDungeon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SailorInDungeon::CopyFrom(const SailorInDungeon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SailorInDungeon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SailorInDungeon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attribute())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->buff())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fight_attribute())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->special_attribute())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skill())) return false;
  if (has_talent()) {
    if (!this->talent_->IsInitialized()) return false;
  }
  return true;
}

void SailorInDungeon::Swap(SailorInDungeon* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SailorInDungeon* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SailorInDungeon::UnsafeArenaSwap(SailorInDungeon* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SailorInDungeon::InternalSwap(SailorInDungeon* other) {
  using std::swap;
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
  CastToBase(&buff_)->InternalSwap(CastToBase(&other->buff_));
  CastToBase(&fight_attribute_)->InternalSwap(CastToBase(&other->fight_attribute_));
  CastToBase(&special_attribute_)->InternalSwap(CastToBase(&other->special_attribute_));
  CastToBase(&skill_)->InternalSwap(CastToBase(&other->skill_));
  swap(talent_, other->talent_);
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(state_, other->state_);
  swap(index_, other->index_);
  swap(level_, other->level_);
  swap(star_, other->star_);
  swap(hp_remain_, other->hp_remain_);
  swap(place_, other->place_);
  swap(hunger_, other->hunger_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SailorInDungeon::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MonsterInDungeon::InitAsDefaultInstance() {
}
void MonsterInDungeon::clear_attribute() {
  attribute_.Clear();
}
void MonsterInDungeon::clear_buff() {
  buff_.Clear();
}
void MonsterInDungeon::clear_skill() {
  skill_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonsterInDungeon::kIdFieldNumber;
const int MonsterInDungeon::kTypeidFieldNumber;
const int MonsterInDungeon::kStateFieldNumber;
const int MonsterInDungeon::kLevelFieldNumber;
const int MonsterInDungeon::kAttributeFieldNumber;
const int MonsterInDungeon::kBuffFieldNumber;
const int MonsterInDungeon::kSkillFieldNumber;
const int MonsterInDungeon::kHpRemainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonsterInDungeon::MonsterInDungeon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_MonsterInDungeon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.MonsterInDungeon)
}
MonsterInDungeon::MonsterInDungeon(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attribute_(arena),
  buff_(arena),
  skill_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_MonsterInDungeon.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.MonsterInDungeon)
}
MonsterInDungeon::MonsterInDungeon(const MonsterInDungeon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      buff_(from.buff_),
      skill_(from.skill_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_remain_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hp_remain_));
  // @@protoc_insertion_point(copy_constructor:sg.MonsterInDungeon)
}

void MonsterInDungeon::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_remain_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hp_remain_));
}

MonsterInDungeon::~MonsterInDungeon() {
  // @@protoc_insertion_point(destructor:sg.MonsterInDungeon)
  SharedDtor();
}

void MonsterInDungeon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void MonsterInDungeon::ArenaDtor(void* object) {
  MonsterInDungeon* _this = reinterpret_cast< MonsterInDungeon* >(object);
  (void)_this;
}
void MonsterInDungeon::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MonsterInDungeon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MonsterInDungeon::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MonsterInDungeon& MonsterInDungeon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_MonsterInDungeon.base);
  return *internal_default_instance();
}


void MonsterInDungeon::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.MonsterInDungeon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  buff_.Clear();
  skill_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hp_remain_) -
        reinterpret_cast<char*>(&id_)) + sizeof(hp_remain_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MonsterInDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.MonsterInDungeon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_float attribute = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int buff = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int64_int skill = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hp_remain = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_hp_remain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hp_remain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.MonsterInDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.MonsterInDungeon)
  return false;
#undef DO_
}

void MonsterInDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.MonsterInDungeon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // required int32 level = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // repeated .sg.pb_pair_int_float attribute = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->attribute(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_int buff = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->buff(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int64_int skill = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->skill(static_cast<int>(i)),
      output);
  }

  // optional float hp_remain = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->hp_remain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.MonsterInDungeon)
}

::google::protobuf::uint8* MonsterInDungeon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.MonsterInDungeon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // required int32 level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // repeated .sg.pb_pair_int_float attribute = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->attribute(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_int buff = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->buff(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int64_int skill = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->skill(static_cast<int>(i)), deterministic, target);
  }

  // optional float hp_remain = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->hp_remain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.MonsterInDungeon)
  return target;
}

size_t MonsterInDungeon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.MonsterInDungeon)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_state()) {
    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_level()) {
    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t MonsterInDungeon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.MonsterInDungeon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.pb_pair_int_float attribute = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int buff = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->buff_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buff(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int64_int skill = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->skill_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->skill(static_cast<int>(i)));
    }
  }

  // optional float hp_remain = 13;
  if (has_hp_remain()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonsterInDungeon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.MonsterInDungeon)
  GOOGLE_DCHECK_NE(&from, this);
  const MonsterInDungeon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MonsterInDungeon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.MonsterInDungeon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.MonsterInDungeon)
    MergeFrom(*source);
  }
}

void MonsterInDungeon::MergeFrom(const MonsterInDungeon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.MonsterInDungeon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  buff_.MergeFrom(from.buff_);
  skill_.MergeFrom(from.skill_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      hp_remain_ = from.hp_remain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MonsterInDungeon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.MonsterInDungeon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterInDungeon::CopyFrom(const MonsterInDungeon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.MonsterInDungeon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterInDungeon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attribute())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->buff())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skill())) return false;
  return true;
}

void MonsterInDungeon::Swap(MonsterInDungeon* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MonsterInDungeon* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MonsterInDungeon::UnsafeArenaSwap(MonsterInDungeon* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MonsterInDungeon::InternalSwap(MonsterInDungeon* other) {
  using std::swap;
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
  CastToBase(&buff_)->InternalSwap(CastToBase(&other->buff_));
  CastToBase(&skill_)->InternalSwap(CastToBase(&other->skill_));
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(state_, other->state_);
  swap(level_, other->level_);
  swap(hp_remain_, other->hp_remain_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MonsterInDungeon::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Enemy::InitAsDefaultInstance() {
  ::sg::_Enemy_default_instance_._instance.get_mutable()->sailor_data_ = const_cast< ::sg::SailorInDungeon*>(
      ::sg::SailorInDungeon::internal_default_instance());
  ::sg::_Enemy_default_instance_._instance.get_mutable()->monster_data_ = const_cast< ::sg::MonsterInDungeon*>(
      ::sg::MonsterInDungeon::internal_default_instance());
}
void Enemy::unsafe_arena_set_allocated_sailor_data(
    ::sg::SailorInDungeon* sailor_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete sailor_data_;
  }
  sailor_data_ = sailor_data;
  if (sailor_data) {
    set_has_sailor_data();
  } else {
    clear_has_sailor_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.Enemy.sailor_data)
}
void Enemy::unsafe_arena_set_allocated_monster_data(
    ::sg::MonsterInDungeon* monster_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete monster_data_;
  }
  monster_data_ = monster_data;
  if (monster_data) {
    set_has_monster_data();
  } else {
    clear_has_monster_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.Enemy.monster_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Enemy::kIdFieldNumber;
const int Enemy::kTypeFieldNumber;
const int Enemy::kSeatFieldNumber;
const int Enemy::kSailorDataFieldNumber;
const int Enemy::kMonsterDataFieldNumber;
const int Enemy::kContainElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Enemy::Enemy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_Enemy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Enemy)
}
Enemy::Enemy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  contain_elements_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_Enemy.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Enemy)
}
Enemy::Enemy(const Enemy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      contain_elements_(from.contain_elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sailor_data()) {
    sailor_data_ = new ::sg::SailorInDungeon(*from.sailor_data_);
  } else {
    sailor_data_ = NULL;
  }
  if (from.has_monster_data()) {
    monster_data_ = new ::sg::MonsterInDungeon(*from.monster_data_);
  } else {
    monster_data_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seat_) -
    reinterpret_cast<char*>(&id_)) + sizeof(seat_));
  // @@protoc_insertion_point(copy_constructor:sg.Enemy)
}

void Enemy::SharedCtor() {
  ::memset(&sailor_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seat_) -
      reinterpret_cast<char*>(&sailor_data_)) + sizeof(seat_));
}

Enemy::~Enemy() {
  // @@protoc_insertion_point(destructor:sg.Enemy)
  SharedDtor();
}

void Enemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete sailor_data_;
  if (this != internal_default_instance()) delete monster_data_;
}

void Enemy::ArenaDtor(void* object) {
  Enemy* _this = reinterpret_cast< Enemy* >(object);
  (void)_this;
}
void Enemy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Enemy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Enemy::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Enemy& Enemy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_Enemy.base);
  return *internal_default_instance();
}


void Enemy::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Enemy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contain_elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sailor_data_ != NULL);
      sailor_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(monster_data_ != NULL);
      monster_data_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seat_) -
        reinterpret_cast<char*>(&id_)) + sizeof(seat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Enemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Enemy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_seat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.SailorInDungeon sailor_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sailor_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MonsterInDungeon monster_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monster_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 contain_elements = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_contain_elements())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_contain_elements())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Enemy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Enemy)
  return false;
#undef DO_
}

void Enemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Enemy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 seat = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  // optional .sg.SailorInDungeon sailor_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_sailor_data(), output);
  }

  // optional .sg.MonsterInDungeon monster_data = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_monster_data(), output);
  }

  // repeated int32 contain_elements = 6;
  for (int i = 0, n = this->contain_elements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->contain_elements(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Enemy)
}

::google::protobuf::uint8* Enemy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Enemy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 seat = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat(), target);
  }

  // optional .sg.SailorInDungeon sailor_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_sailor_data(), deterministic, target);
  }

  // optional .sg.MonsterInDungeon monster_data = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_monster_data(), deterministic, target);
  }

  // repeated int32 contain_elements = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->contain_elements_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Enemy)
  return target;
}

size_t Enemy::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Enemy)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t Enemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Enemy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 contain_elements = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->contain_elements_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->contain_elements_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.SailorInDungeon sailor_data = 4;
    if (has_sailor_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sailor_data_);
    }

    // optional .sg.MonsterInDungeon monster_data = 5;
    if (has_monster_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *monster_data_);
    }

  }
  // optional int32 seat = 3;
  if (has_seat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Enemy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Enemy)
  GOOGLE_DCHECK_NE(&from, this);
  const Enemy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Enemy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Enemy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Enemy)
    MergeFrom(*source);
  }
}

void Enemy::MergeFrom(const Enemy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Enemy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contain_elements_.MergeFrom(from.contain_elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sailor_data()->::sg::SailorInDungeon::MergeFrom(from.sailor_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_monster_data()->::sg::MonsterInDungeon::MergeFrom(from.monster_data());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      seat_ = from.seat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Enemy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Enemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Enemy::CopyFrom(const Enemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Enemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enemy::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_sailor_data()) {
    if (!this->sailor_data_->IsInitialized()) return false;
  }
  if (has_monster_data()) {
    if (!this->monster_data_->IsInitialized()) return false;
  }
  return true;
}

void Enemy::Swap(Enemy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Enemy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Enemy::UnsafeArenaSwap(Enemy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Enemy::InternalSwap(Enemy* other) {
  using std::swap;
  contain_elements_.InternalSwap(&other->contain_elements_);
  swap(sailor_data_, other->sailor_data_);
  swap(monster_data_, other->monster_data_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(seat_, other->seat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Enemy::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DungeonAltar_Relic::InitAsDefaultInstance() {
}
void DungeonAltar_Relic::clear_skills() {
  skills_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonAltar_Relic::kTypeidFieldNumber;
const int DungeonAltar_Relic::kSkillsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonAltar_Relic::DungeonAltar_Relic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_DungeonAltar_Relic.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DungeonAltar.Relic)
}
DungeonAltar_Relic::DungeonAltar_Relic(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  skills_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonAltar_Relic.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DungeonAltar.Relic)
}
DungeonAltar_Relic::DungeonAltar_Relic(const DungeonAltar_Relic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typeid__ = from.typeid__;
  // @@protoc_insertion_point(copy_constructor:sg.DungeonAltar.Relic)
}

void DungeonAltar_Relic::SharedCtor() {
  typeid__ = 0;
}

DungeonAltar_Relic::~DungeonAltar_Relic() {
  // @@protoc_insertion_point(destructor:sg.DungeonAltar.Relic)
  SharedDtor();
}

void DungeonAltar_Relic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DungeonAltar_Relic::ArenaDtor(void* object) {
  DungeonAltar_Relic* _this = reinterpret_cast< DungeonAltar_Relic* >(object);
  (void)_this;
}
void DungeonAltar_Relic::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DungeonAltar_Relic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DungeonAltar_Relic::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonAltar_Relic& DungeonAltar_Relic::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonAltar_Relic.base);
  return *internal_default_instance();
}


void DungeonAltar_Relic::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DungeonAltar.Relic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skills_.Clear();
  typeid__ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonAltar_Relic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DungeonAltar.Relic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 typeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int skills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DungeonAltar.Relic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DungeonAltar.Relic)
  return false;
#undef DO_
}

void DungeonAltar_Relic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DungeonAltar.Relic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // repeated .sg.pb_pair_int_int skills = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skills_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->skills(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DungeonAltar.Relic)
}

::google::protobuf::uint8* DungeonAltar_Relic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DungeonAltar.Relic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // repeated .sg.pb_pair_int_int skills = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skills_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->skills(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DungeonAltar.Relic)
  return target;
}

size_t DungeonAltar_Relic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DungeonAltar.Relic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 typeid = 1;
  if (has_typeid_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }
  // repeated .sg.pb_pair_int_int skills = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->skills_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->skills(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonAltar_Relic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DungeonAltar.Relic)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonAltar_Relic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonAltar_Relic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DungeonAltar.Relic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DungeonAltar.Relic)
    MergeFrom(*source);
  }
}

void DungeonAltar_Relic::MergeFrom(const DungeonAltar_Relic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DungeonAltar.Relic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skills_.MergeFrom(from.skills_);
  if (from.has_typeid_()) {
    set_typeid_(from.typeid_());
  }
}

void DungeonAltar_Relic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DungeonAltar.Relic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonAltar_Relic::CopyFrom(const DungeonAltar_Relic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DungeonAltar.Relic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonAltar_Relic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skills())) return false;
  return true;
}

void DungeonAltar_Relic::Swap(DungeonAltar_Relic* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DungeonAltar_Relic* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DungeonAltar_Relic::UnsafeArenaSwap(DungeonAltar_Relic* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DungeonAltar_Relic::InternalSwap(DungeonAltar_Relic* other) {
  using std::swap;
  CastToBase(&skills_)->InternalSwap(CastToBase(&other->skills_));
  swap(typeid__, other->typeid__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DungeonAltar_Relic::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DungeonAltar::InitAsDefaultInstance() {
  ::sg::_DungeonAltar_default_instance_._instance.get_mutable()->relic_ = const_cast< ::sg::DungeonAltar_Relic*>(
      ::sg::DungeonAltar_Relic::internal_default_instance());
  ::sg::_DungeonAltar_default_instance_._instance.get_mutable()->monster_ = const_cast< ::sg::MonsterInDungeon*>(
      ::sg::MonsterInDungeon::internal_default_instance());
}
void DungeonAltar::unsafe_arena_set_allocated_relic(
    ::sg::DungeonAltar_Relic* relic) {
  if (GetArenaNoVirtual() == NULL) {
    delete relic_;
  }
  relic_ = relic;
  if (relic) {
    set_has_relic();
  } else {
    clear_has_relic();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.DungeonAltar.relic)
}
void DungeonAltar::unsafe_arena_set_allocated_monster(
    ::sg::MonsterInDungeon* monster) {
  if (GetArenaNoVirtual() == NULL) {
    delete monster_;
  }
  monster_ = monster;
  if (monster) {
    set_has_monster();
  } else {
    clear_has_monster();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.DungeonAltar.monster)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonAltar::kTypeidFieldNumber;
const int DungeonAltar::kStateFieldNumber;
const int DungeonAltar::kRelicFieldNumber;
const int DungeonAltar::kMonsterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonAltar::DungeonAltar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_DungeonAltar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DungeonAltar)
}
DungeonAltar::DungeonAltar(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonAltar.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DungeonAltar)
}
DungeonAltar::DungeonAltar(const DungeonAltar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relic()) {
    relic_ = new ::sg::DungeonAltar_Relic(*from.relic_);
  } else {
    relic_ = NULL;
  }
  if (from.has_monster()) {
    monster_ = new ::sg::MonsterInDungeon(*from.monster_);
  } else {
    monster_ = NULL;
  }
  ::memcpy(&typeid__, &from.typeid__,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&typeid__)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.DungeonAltar)
}

void DungeonAltar::SharedCtor() {
  ::memset(&relic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&relic_)) + sizeof(state_));
}

DungeonAltar::~DungeonAltar() {
  // @@protoc_insertion_point(destructor:sg.DungeonAltar)
  SharedDtor();
}

void DungeonAltar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete relic_;
  if (this != internal_default_instance()) delete monster_;
}

void DungeonAltar::ArenaDtor(void* object) {
  DungeonAltar* _this = reinterpret_cast< DungeonAltar* >(object);
  (void)_this;
}
void DungeonAltar::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DungeonAltar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DungeonAltar::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonAltar& DungeonAltar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonAltar.base);
  return *internal_default_instance();
}


void DungeonAltar::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DungeonAltar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(relic_ != NULL);
      relic_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(monster_ != NULL);
      monster_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&typeid__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&typeid__)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonAltar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DungeonAltar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 typeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.DungeonAltar.Relic relic = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.MonsterInDungeon monster = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DungeonAltar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DungeonAltar)
  return false;
#undef DO_
}

void DungeonAltar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DungeonAltar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional .sg.DungeonAltar.Relic relic = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_relic(), output);
  }

  // optional .sg.MonsterInDungeon monster = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_monster(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DungeonAltar)
}

::google::protobuf::uint8* DungeonAltar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DungeonAltar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional .sg.DungeonAltar.Relic relic = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_relic(), deterministic, target);
  }

  // optional .sg.MonsterInDungeon monster = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_monster(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DungeonAltar)
  return target;
}

size_t DungeonAltar::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.DungeonAltar)
  size_t total_size = 0;

  if (has_typeid_()) {
    // required int32 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t DungeonAltar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DungeonAltar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.DungeonAltar.Relic relic = 3;
    if (has_relic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *relic_);
    }

    // optional .sg.MonsterInDungeon monster = 4;
    if (has_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *monster_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonAltar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DungeonAltar)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonAltar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonAltar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DungeonAltar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DungeonAltar)
    MergeFrom(*source);
  }
}

void DungeonAltar::MergeFrom(const DungeonAltar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DungeonAltar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_relic()->::sg::DungeonAltar_Relic::MergeFrom(from.relic());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_monster()->::sg::MonsterInDungeon::MergeFrom(from.monster());
    }
    if (cached_has_bits & 0x00000004u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonAltar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DungeonAltar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonAltar::CopyFrom(const DungeonAltar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DungeonAltar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonAltar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_relic()) {
    if (!this->relic_->IsInitialized()) return false;
  }
  if (has_monster()) {
    if (!this->monster_->IsInitialized()) return false;
  }
  return true;
}

void DungeonAltar::Swap(DungeonAltar* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DungeonAltar* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DungeonAltar::UnsafeArenaSwap(DungeonAltar* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DungeonAltar::InternalSwap(DungeonAltar* other) {
  using std::swap;
  swap(relic_, other->relic_);
  swap(monster_, other->monster_);
  swap(typeid__, other->typeid__);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DungeonAltar::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ElementProperty_RoomData_RoomEffect::InitAsDefaultInstance() {
}
void ElementProperty_RoomData_RoomEffect::clear_contain() {
  contain_.Clear();
}
void ElementProperty_RoomData_RoomEffect::clear_equips() {
  equips_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementProperty_RoomData_RoomEffect::kEnterEffectFieldNumber;
const int ElementProperty_RoomData_RoomEffect::kEffectIdFieldNumber;
const int ElementProperty_RoomData_RoomEffect::kEffectValueFieldNumber;
const int ElementProperty_RoomData_RoomEffect::kEffectValueRatioFieldNumber;
const int ElementProperty_RoomData_RoomEffect::kContainFieldNumber;
const int ElementProperty_RoomData_RoomEffect::kEquipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementProperty_RoomData_RoomEffect::ElementProperty_RoomData_RoomEffect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_ElementProperty_RoomData_RoomEffect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.ElementProperty.RoomData.RoomEffect)
}
ElementProperty_RoomData_RoomEffect::ElementProperty_RoomData_RoomEffect(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  contain_(arena),
  equips_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_ElementProperty_RoomData_RoomEffect.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.ElementProperty.RoomData.RoomEffect)
}
ElementProperty_RoomData_RoomEffect::ElementProperty_RoomData_RoomEffect(const ElementProperty_RoomData_RoomEffect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      contain_(from.contain_),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enter_effect_, &from.enter_effect_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_value_ratio_) -
    reinterpret_cast<char*>(&enter_effect_)) + sizeof(effect_value_ratio_));
  // @@protoc_insertion_point(copy_constructor:sg.ElementProperty.RoomData.RoomEffect)
}

void ElementProperty_RoomData_RoomEffect::SharedCtor() {
  ::memset(&enter_effect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_value_ratio_) -
      reinterpret_cast<char*>(&enter_effect_)) + sizeof(effect_value_ratio_));
}

ElementProperty_RoomData_RoomEffect::~ElementProperty_RoomData_RoomEffect() {
  // @@protoc_insertion_point(destructor:sg.ElementProperty.RoomData.RoomEffect)
  SharedDtor();
}

void ElementProperty_RoomData_RoomEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ElementProperty_RoomData_RoomEffect::ArenaDtor(void* object) {
  ElementProperty_RoomData_RoomEffect* _this = reinterpret_cast< ElementProperty_RoomData_RoomEffect* >(object);
  (void)_this;
}
void ElementProperty_RoomData_RoomEffect::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ElementProperty_RoomData_RoomEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ElementProperty_RoomData_RoomEffect::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ElementProperty_RoomData_RoomEffect& ElementProperty_RoomData_RoomEffect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_ElementProperty_RoomData_RoomEffect.base);
  return *internal_default_instance();
}


void ElementProperty_RoomData_RoomEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.ElementProperty.RoomData.RoomEffect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contain_.Clear();
  equips_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&enter_effect_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effect_value_ratio_) -
        reinterpret_cast<char*>(&enter_effect_)) + sizeof(effect_value_ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ElementProperty_RoomData_RoomEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.ElementProperty.RoomData.RoomEffect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enter_effect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enter_effect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_effect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 effect_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_effect_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 effect_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_effect_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float effect_value_ratio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_effect_value_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_value_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Item contain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_contain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Equip equips = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.ElementProperty.RoomData.RoomEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.ElementProperty.RoomData.RoomEffect)
  return false;
#undef DO_
}

void ElementProperty_RoomData_RoomEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.ElementProperty.RoomData.RoomEffect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 enter_effect = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enter_effect(), output);
  }

  // optional int32 effect_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effect_id(), output);
  }

  // optional int32 effect_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->effect_value(), output);
  }

  // optional float effect_value_ratio = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->effect_value_ratio(), output);
  }

  // repeated .sg.Item contain = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contain_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->contain(static_cast<int>(i)),
      output);
  }

  // repeated .sg.Equip equips = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->equips(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.ElementProperty.RoomData.RoomEffect)
}

::google::protobuf::uint8* ElementProperty_RoomData_RoomEffect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.ElementProperty.RoomData.RoomEffect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 enter_effect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enter_effect(), target);
  }

  // optional int32 effect_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effect_id(), target);
  }

  // optional int32 effect_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->effect_value(), target);
  }

  // optional float effect_value_ratio = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->effect_value_ratio(), target);
  }

  // repeated .sg.Item contain = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contain_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->contain(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.Equip equips = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->equips(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.ElementProperty.RoomData.RoomEffect)
  return target;
}

size_t ElementProperty_RoomData_RoomEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.ElementProperty.RoomData.RoomEffect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.Item contain = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->contain_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->contain(static_cast<int>(i)));
    }
  }

  // repeated .sg.Equip equips = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->equips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equips(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 enter_effect = 1;
    if (has_enter_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_effect());
    }

    // optional int32 effect_id = 2;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_id());
    }

    // optional int32 effect_value = 3;
    if (has_effect_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_value());
    }

    // optional float effect_value_ratio = 4;
    if (has_effect_value_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementProperty_RoomData_RoomEffect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.ElementProperty.RoomData.RoomEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementProperty_RoomData_RoomEffect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElementProperty_RoomData_RoomEffect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.ElementProperty.RoomData.RoomEffect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.ElementProperty.RoomData.RoomEffect)
    MergeFrom(*source);
  }
}

void ElementProperty_RoomData_RoomEffect::MergeFrom(const ElementProperty_RoomData_RoomEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.ElementProperty.RoomData.RoomEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contain_.MergeFrom(from.contain_);
  equips_.MergeFrom(from.equips_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      enter_effect_ = from.enter_effect_;
    }
    if (cached_has_bits & 0x00000002u) {
      effect_id_ = from.effect_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      effect_value_ = from.effect_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      effect_value_ratio_ = from.effect_value_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ElementProperty_RoomData_RoomEffect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.ElementProperty.RoomData.RoomEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementProperty_RoomData_RoomEffect::CopyFrom(const ElementProperty_RoomData_RoomEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.ElementProperty.RoomData.RoomEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementProperty_RoomData_RoomEffect::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->contain())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equips())) return false;
  return true;
}

void ElementProperty_RoomData_RoomEffect::Swap(ElementProperty_RoomData_RoomEffect* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ElementProperty_RoomData_RoomEffect* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ElementProperty_RoomData_RoomEffect::UnsafeArenaSwap(ElementProperty_RoomData_RoomEffect* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ElementProperty_RoomData_RoomEffect::InternalSwap(ElementProperty_RoomData_RoomEffect* other) {
  using std::swap;
  CastToBase(&contain_)->InternalSwap(CastToBase(&other->contain_));
  CastToBase(&equips_)->InternalSwap(CastToBase(&other->equips_));
  swap(enter_effect_, other->enter_effect_);
  swap(effect_id_, other->effect_id_);
  swap(effect_value_, other->effect_value_);
  swap(effect_value_ratio_, other->effect_value_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ElementProperty_RoomData_RoomEffect::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ElementProperty_RoomData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementProperty_RoomData::kRoomidFieldNumber;
const int ElementProperty_RoomData::kTypeFieldNumber;
const int ElementProperty_RoomData::kStateFieldNumber;
const int ElementProperty_RoomData::kEffectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementProperty_RoomData::ElementProperty_RoomData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_ElementProperty_RoomData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.ElementProperty.RoomData)
}
ElementProperty_RoomData::ElementProperty_RoomData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  effects_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_ElementProperty_RoomData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.ElementProperty.RoomData)
}
ElementProperty_RoomData::ElementProperty_RoomData(const ElementProperty_RoomData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.ElementProperty.RoomData)
}

void ElementProperty_RoomData::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(state_));
}

ElementProperty_RoomData::~ElementProperty_RoomData() {
  // @@protoc_insertion_point(destructor:sg.ElementProperty.RoomData)
  SharedDtor();
}

void ElementProperty_RoomData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ElementProperty_RoomData::ArenaDtor(void* object) {
  ElementProperty_RoomData* _this = reinterpret_cast< ElementProperty_RoomData* >(object);
  (void)_this;
}
void ElementProperty_RoomData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ElementProperty_RoomData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ElementProperty_RoomData::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ElementProperty_RoomData& ElementProperty_RoomData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_ElementProperty_RoomData.base);
  return *internal_default_instance();
}


void ElementProperty_RoomData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.ElementProperty.RoomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&roomid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&roomid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ElementProperty_RoomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.ElementProperty.RoomData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.ElementProperty.RoomData.RoomEffect effects = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.ElementProperty.RoomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.ElementProperty.RoomData)
  return false;
#undef DO_
}

void ElementProperty_RoomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.ElementProperty.RoomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // repeated .sg.ElementProperty.RoomData.RoomEffect effects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->effects(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.ElementProperty.RoomData)
}

::google::protobuf::uint8* ElementProperty_RoomData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.ElementProperty.RoomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // repeated .sg.ElementProperty.RoomData.RoomEffect effects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->effects(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.ElementProperty.RoomData)
  return target;
}

size_t ElementProperty_RoomData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.ElementProperty.RoomData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }
  // repeated .sg.ElementProperty.RoomData.RoomEffect effects = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->effects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effects(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementProperty_RoomData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.ElementProperty.RoomData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementProperty_RoomData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElementProperty_RoomData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.ElementProperty.RoomData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.ElementProperty.RoomData)
    MergeFrom(*source);
  }
}

void ElementProperty_RoomData::MergeFrom(const ElementProperty_RoomData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.ElementProperty.RoomData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effects_.MergeFrom(from.effects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ElementProperty_RoomData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.ElementProperty.RoomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementProperty_RoomData::CopyFrom(const ElementProperty_RoomData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.ElementProperty.RoomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementProperty_RoomData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->effects())) return false;
  return true;
}

void ElementProperty_RoomData::Swap(ElementProperty_RoomData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ElementProperty_RoomData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ElementProperty_RoomData::UnsafeArenaSwap(ElementProperty_RoomData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ElementProperty_RoomData::InternalSwap(ElementProperty_RoomData* other) {
  using std::swap;
  CastToBase(&effects_)->InternalSwap(CastToBase(&other->effects_));
  swap(roomid_, other->roomid_);
  swap(type_, other->type_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ElementProperty_RoomData::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ElementProperty::InitAsDefaultInstance() {
  ::sg::_ElementProperty_default_instance_._instance.get_mutable()->room_data_ = const_cast< ::sg::ElementProperty_RoomData*>(
      ::sg::ElementProperty_RoomData::internal_default_instance());
}
void ElementProperty::unsafe_arena_set_allocated_room_data(
    ::sg::ElementProperty_RoomData* room_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete room_data_;
  }
  room_data_ = room_data;
  if (room_data) {
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.ElementProperty.room_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementProperty::kIndexFieldNumber;
const int ElementProperty::kNumFieldNumber;
const int ElementProperty::kExpFieldNumber;
const int ElementProperty::kPosXFieldNumber;
const int ElementProperty::kPosYFieldNumber;
const int ElementProperty::kLockIdFieldNumber;
const int ElementProperty::kRoomIdFieldNumber;
const int ElementProperty::kChangeModelFieldNumber;
const int ElementProperty::kTriggerIdFieldNumber;
const int ElementProperty::kCleanUpRewardTagFieldNumber;
const int ElementProperty::kBelongFacilityFieldNumber;
const int ElementProperty::kMapDataFieldNumber;
const int ElementProperty::kUnlockRoomFieldNumber;
const int ElementProperty::kLockedRoomFieldNumber;
const int ElementProperty::kTriggerEventFieldNumber;
const int ElementProperty::kRoomDataFieldNumber;
const int ElementProperty::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementProperty::ElementProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_ElementProperty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.ElementProperty)
}
ElementProperty::ElementProperty(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  locked_room_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_ElementProperty.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.ElementProperty)
}
ElementProperty::ElementProperty(const ElementProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      locked_room_(from.locked_room_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_data()) {
    map_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data(),
      GetArenaNoVirtual());
  }
  if (from.has_room_data()) {
    room_data_ = new ::sg::ElementProperty_RoomData(*from.room_data_);
  } else {
    room_data_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&index_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sg.ElementProperty)
}

void ElementProperty::SharedCtor() {
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&room_data_)) + sizeof(state_));
}

ElementProperty::~ElementProperty() {
  // @@protoc_insertion_point(destructor:sg.ElementProperty)
  SharedDtor();
}

void ElementProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete room_data_;
}

void ElementProperty::ArenaDtor(void* object) {
  ElementProperty* _this = reinterpret_cast< ElementProperty* >(object);
  (void)_this;
}
void ElementProperty::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ElementProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ElementProperty::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ElementProperty& ElementProperty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_ElementProperty.base);
  return *internal_default_instance();
}


void ElementProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.ElementProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locked_room_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      map_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(room_data_ != NULL);
      room_data_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lock_id_) -
        reinterpret_cast<char*>(&index_)) + sizeof(lock_id_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&room_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&room_id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ElementProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.ElementProperty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lock_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_lock_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 room_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_room_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 change_model = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_change_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trigger_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_trigger_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clean_up_reward_tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_clean_up_reward_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clean_up_reward_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 belong_facility = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_belong_facility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belong_facility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes map_data = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unlock_room = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_unlock_room();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_room_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 locked_room = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112u, input, this->mutable_locked_room())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_locked_room())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trigger_event = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_trigger_event();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_event_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.ElementProperty.RoomData room_data = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.ElementProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.ElementProperty)
  return false;
#undef DO_
}

void ElementProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.ElementProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 num = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 exp = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 pos_x = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_x(), output);
  }

  // optional int32 pos_y = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_y(), output);
  }

  // optional int32 lock_id = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lock_id(), output);
  }

  // optional int32 room_id = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->room_id(), output);
  }

  // optional int32 change_model = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->change_model(), output);
  }

  // optional int32 trigger_id = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->trigger_id(), output);
  }

  // optional int32 clean_up_reward_tag = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->clean_up_reward_tag(), output);
  }

  // optional int32 belong_facility = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->belong_facility(), output);
  }

  // optional bytes map_data = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->map_data(), output);
  }

  // optional int32 unlock_room = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->unlock_room(), output);
  }

  // repeated int32 locked_room = 14;
  for (int i = 0, n = this->locked_room_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->locked_room(i), output);
  }

  // optional int64 trigger_event = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->trigger_event(), output);
  }

  // optional .sg.ElementProperty.RoomData room_data = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_room_data(), output);
  }

  // optional int32 state = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.ElementProperty)
}

::google::protobuf::uint8* ElementProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.ElementProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 num = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 exp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 pos_x = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_x(), target);
  }

  // optional int32 pos_y = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_y(), target);
  }

  // optional int32 lock_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lock_id(), target);
  }

  // optional int32 room_id = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->room_id(), target);
  }

  // optional int32 change_model = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->change_model(), target);
  }

  // optional int32 trigger_id = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->trigger_id(), target);
  }

  // optional int32 clean_up_reward_tag = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->clean_up_reward_tag(), target);
  }

  // optional int32 belong_facility = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->belong_facility(), target);
  }

  // optional bytes map_data = 12;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->map_data(), target);
  }

  // optional int32 unlock_room = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->unlock_room(), target);
  }

  // repeated int32 locked_room = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(14, this->locked_room_, target);

  // optional int64 trigger_event = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->trigger_event(), target);
  }

  // optional .sg.ElementProperty.RoomData room_data = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_room_data(), deterministic, target);
  }

  // optional int32 state = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.ElementProperty)
  return target;
}

size_t ElementProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.ElementProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 locked_room = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->locked_room_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->locked_room_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes map_data = 12;
    if (has_map_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_data());
    }

    // optional .sg.ElementProperty.RoomData room_data = 16;
    if (has_room_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *room_data_);
    }

    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 pos_x = 4;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 5;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 lock_id = 6;
    if (has_lock_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 room_id = 7;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 change_model = 8;
    if (has_change_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_model());
    }

    // optional int32 trigger_id = 9;
    if (has_trigger_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_id());
    }

    // optional int32 clean_up_reward_tag = 10;
    if (has_clean_up_reward_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clean_up_reward_tag());
    }

    // optional int32 belong_facility = 11;
    if (has_belong_facility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->belong_facility());
    }

    // optional int32 unlock_room = 13;
    if (has_unlock_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock_room());
    }

    // optional int64 trigger_event = 15;
    if (has_trigger_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trigger_event());
    }

    // optional int32 state = 17;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.ElementProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElementProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.ElementProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.ElementProperty)
    MergeFrom(*source);
  }
}

void ElementProperty::MergeFrom(const ElementProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.ElementProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locked_room_.MergeFrom(from.locked_room_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_map_data(from.map_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_room_data()->::sg::ElementProperty_RoomData::MergeFrom(from.room_data());
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000010u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      lock_id_ = from.lock_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      change_model_ = from.change_model_;
    }
    if (cached_has_bits & 0x00000400u) {
      trigger_id_ = from.trigger_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      clean_up_reward_tag_ = from.clean_up_reward_tag_;
    }
    if (cached_has_bits & 0x00001000u) {
      belong_facility_ = from.belong_facility_;
    }
    if (cached_has_bits & 0x00002000u) {
      unlock_room_ = from.unlock_room_;
    }
    if (cached_has_bits & 0x00004000u) {
      trigger_event_ = from.trigger_event_;
    }
    if (cached_has_bits & 0x00008000u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ElementProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.ElementProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementProperty::CopyFrom(const ElementProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.ElementProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementProperty::IsInitialized() const {
  if (has_room_data()) {
    if (!this->room_data_->IsInitialized()) return false;
  }
  return true;
}

void ElementProperty::Swap(ElementProperty* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ElementProperty* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ElementProperty::UnsafeArenaSwap(ElementProperty* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ElementProperty::InternalSwap(ElementProperty* other) {
  using std::swap;
  locked_room_.InternalSwap(&other->locked_room_);
  map_data_.Swap(&other->map_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(room_data_, other->room_data_);
  swap(index_, other->index_);
  swap(num_, other->num_);
  swap(exp_, other->exp_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(lock_id_, other->lock_id_);
  swap(room_id_, other->room_id_);
  swap(change_model_, other->change_model_);
  swap(trigger_id_, other->trigger_id_);
  swap(clean_up_reward_tag_, other->clean_up_reward_tag_);
  swap(belong_facility_, other->belong_facility_);
  swap(unlock_room_, other->unlock_room_);
  swap(trigger_event_, other->trigger_event_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ElementProperty::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FightManual::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightManual::kTypeFieldNumber;
const int FightManual::kTypeidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightManual::FightManual()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_FightManual.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.FightManual)
}
FightManual::FightManual(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  typeid__(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_FightManual.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.FightManual)
}
FightManual::FightManual(const FightManual& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      typeid__(from.typeid__) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sg.FightManual)
}

void FightManual::SharedCtor() {
  type_ = 0;
}

FightManual::~FightManual() {
  // @@protoc_insertion_point(destructor:sg.FightManual)
  SharedDtor();
}

void FightManual::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FightManual::ArenaDtor(void* object) {
  FightManual* _this = reinterpret_cast< FightManual* >(object);
  (void)_this;
}
void FightManual::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FightManual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FightManual::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightManual& FightManual::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_FightManual.base);
  return *internal_default_instance();
}


void FightManual::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.FightManual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  typeid__.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightManual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.FightManual)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_typeid_())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_typeid_())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.FightManual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.FightManual)
  return false;
#undef DO_
}

void FightManual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.FightManual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 typeid = 2;
  for (int i = 0, n = this->typeid__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->typeid_(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.FightManual)
}

::google::protobuf::uint8* FightManual::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.FightManual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 typeid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->typeid__, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.FightManual)
  return target;
}

size_t FightManual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.FightManual)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }
  // repeated int32 typeid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->typeid__);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->typeid__size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FightManual::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.FightManual)
  GOOGLE_DCHECK_NE(&from, this);
  const FightManual* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightManual>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.FightManual)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.FightManual)
    MergeFrom(*source);
  }
}

void FightManual::MergeFrom(const FightManual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.FightManual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  typeid__.MergeFrom(from.typeid__);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void FightManual::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.FightManual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightManual::CopyFrom(const FightManual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.FightManual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightManual::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FightManual::Swap(FightManual* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FightManual* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FightManual::UnsafeArenaSwap(FightManual* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FightManual::InternalSwap(FightManual* other) {
  using std::swap;
  typeid__.InternalSwap(&other->typeid__);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FightManual::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DungeonElement_Exchange_Exchange_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonElement_Exchange_Exchange_Item::kItemTypeFieldNumber;
const int DungeonElement_Exchange_Exchange_Item::kIdFieldNumber;
const int DungeonElement_Exchange_Exchange_Item::kTypeFieldNumber;
const int DungeonElement_Exchange_Exchange_Item::kTypeidFieldNumber;
const int DungeonElement_Exchange_Exchange_Item::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonElement_Exchange_Exchange_Item::DungeonElement_Exchange_Exchange_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_DungeonElement_Exchange_Exchange_Item.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DungeonElement.Exchange.Exchange_Item)
}
DungeonElement_Exchange_Exchange_Item::DungeonElement_Exchange_Exchange_Item(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonElement_Exchange_Exchange_Item.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DungeonElement.Exchange.Exchange_Item)
}
DungeonElement_Exchange_Exchange_Item::DungeonElement_Exchange_Exchange_Item(const DungeonElement_Exchange_Exchange_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_type_, &from.item_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&item_type_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sg.DungeonElement.Exchange.Exchange_Item)
}

void DungeonElement_Exchange_Exchange_Item::SharedCtor() {
  ::memset(&item_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&item_type_)) + sizeof(type_));
}

DungeonElement_Exchange_Exchange_Item::~DungeonElement_Exchange_Exchange_Item() {
  // @@protoc_insertion_point(destructor:sg.DungeonElement.Exchange.Exchange_Item)
  SharedDtor();
}

void DungeonElement_Exchange_Exchange_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DungeonElement_Exchange_Exchange_Item::ArenaDtor(void* object) {
  DungeonElement_Exchange_Exchange_Item* _this = reinterpret_cast< DungeonElement_Exchange_Exchange_Item* >(object);
  (void)_this;
}
void DungeonElement_Exchange_Exchange_Item::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DungeonElement_Exchange_Exchange_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DungeonElement_Exchange_Exchange_Item::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonElement_Exchange_Exchange_Item& DungeonElement_Exchange_Exchange_Item::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonElement_Exchange_Exchange_Item.base);
  return *internal_default_instance();
}


void DungeonElement_Exchange_Exchange_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DungeonElement.Exchange.Exchange_Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&item_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&item_type_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonElement_Exchange_Exchange_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DungeonElement.Exchange.Exchange_Item)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_item_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 typeid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DungeonElement.Exchange.Exchange_Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DungeonElement.Exchange.Exchange_Item)
  return false;
#undef DO_
}

void DungeonElement_Exchange_Exchange_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DungeonElement.Exchange.Exchange_Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 item_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_type(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional uint64 typeid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->typeid_(), output);
  }

  // optional uint64 value = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DungeonElement.Exchange.Exchange_Item)
}

::google::protobuf::uint8* DungeonElement_Exchange_Exchange_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DungeonElement.Exchange.Exchange_Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 item_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_type(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional uint64 typeid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->typeid_(), target);
  }

  // optional uint64 value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DungeonElement.Exchange.Exchange_Item)
  return target;
}

size_t DungeonElement_Exchange_Exchange_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DungeonElement.Exchange.Exchange_Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 item_type = 1;
  if (has_item_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_type());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 typeid = 4;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->typeid_());
    }

    // optional uint64 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonElement_Exchange_Exchange_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DungeonElement.Exchange.Exchange_Item)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonElement_Exchange_Exchange_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonElement_Exchange_Exchange_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DungeonElement.Exchange.Exchange_Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DungeonElement.Exchange.Exchange_Item)
    MergeFrom(*source);
  }
}

void DungeonElement_Exchange_Exchange_Item::MergeFrom(const DungeonElement_Exchange_Exchange_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DungeonElement.Exchange.Exchange_Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonElement_Exchange_Exchange_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DungeonElement.Exchange.Exchange_Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonElement_Exchange_Exchange_Item::CopyFrom(const DungeonElement_Exchange_Exchange_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DungeonElement.Exchange.Exchange_Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonElement_Exchange_Exchange_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DungeonElement_Exchange_Exchange_Item::Swap(DungeonElement_Exchange_Exchange_Item* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DungeonElement_Exchange_Exchange_Item* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DungeonElement_Exchange_Exchange_Item::UnsafeArenaSwap(DungeonElement_Exchange_Exchange_Item* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DungeonElement_Exchange_Exchange_Item::InternalSwap(DungeonElement_Exchange_Exchange_Item* other) {
  using std::swap;
  swap(item_type_, other->item_type_);
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(value_, other->value_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DungeonElement_Exchange_Exchange_Item::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DungeonElement_Exchange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonElement_Exchange::kIdFieldNumber;
const int DungeonElement_Exchange::kTypeidFieldNumber;
const int DungeonElement_Exchange::kIndexFieldNumber;
const int DungeonElement_Exchange::kCostFieldNumber;
const int DungeonElement_Exchange::kGetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonElement_Exchange::DungeonElement_Exchange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_DungeonElement_Exchange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DungeonElement.Exchange)
}
DungeonElement_Exchange::DungeonElement_Exchange(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  cost_(arena),
  get_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonElement_Exchange.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DungeonElement.Exchange)
}
DungeonElement_Exchange::DungeonElement_Exchange(const DungeonElement_Exchange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cost_(from.cost_),
      get_(from.get_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:sg.DungeonElement.Exchange)
}

void DungeonElement_Exchange::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&id_)) + sizeof(index_));
}

DungeonElement_Exchange::~DungeonElement_Exchange() {
  // @@protoc_insertion_point(destructor:sg.DungeonElement.Exchange)
  SharedDtor();
}

void DungeonElement_Exchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DungeonElement_Exchange::ArenaDtor(void* object) {
  DungeonElement_Exchange* _this = reinterpret_cast< DungeonElement_Exchange* >(object);
  (void)_this;
}
void DungeonElement_Exchange::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DungeonElement_Exchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DungeonElement_Exchange::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonElement_Exchange& DungeonElement_Exchange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonElement_Exchange.base);
  return *internal_default_instance();
}


void DungeonElement_Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DungeonElement.Exchange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_.Clear();
  get_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&id_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonElement_Exchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DungeonElement.Exchange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.DungeonElement.Exchange.Exchange_Item cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.DungeonElement.Exchange.Exchange_Item get = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DungeonElement.Exchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DungeonElement.Exchange)
  return false;
#undef DO_
}

void DungeonElement_Exchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DungeonElement.Exchange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // required int32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // repeated .sg.DungeonElement.Exchange.Exchange_Item cost = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cost_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->cost(static_cast<int>(i)),
      output);
  }

  // repeated .sg.DungeonElement.Exchange.Exchange_Item get = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->get_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->get(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DungeonElement.Exchange)
}

::google::protobuf::uint8* DungeonElement_Exchange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DungeonElement.Exchange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // required int32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // repeated .sg.DungeonElement.Exchange.Exchange_Item cost = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cost_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->cost(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.DungeonElement.Exchange.Exchange_Item get = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->get_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->get(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DungeonElement.Exchange)
  return target;
}

size_t DungeonElement_Exchange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.DungeonElement.Exchange)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_index()) {
    // required int32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  return total_size;
}
size_t DungeonElement_Exchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DungeonElement.Exchange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.DungeonElement.Exchange.Exchange_Item cost = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->cost_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cost(static_cast<int>(i)));
    }
  }

  // repeated .sg.DungeonElement.Exchange.Exchange_Item get = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->get_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->get(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonElement_Exchange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DungeonElement.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonElement_Exchange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonElement_Exchange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DungeonElement.Exchange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DungeonElement.Exchange)
    MergeFrom(*source);
  }
}

void DungeonElement_Exchange::MergeFrom(const DungeonElement_Exchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DungeonElement.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_.MergeFrom(from.cost_);
  get_.MergeFrom(from.get_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonElement_Exchange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DungeonElement.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonElement_Exchange::CopyFrom(const DungeonElement_Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DungeonElement.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonElement_Exchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cost())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->get())) return false;
  return true;
}

void DungeonElement_Exchange::Swap(DungeonElement_Exchange* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DungeonElement_Exchange* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DungeonElement_Exchange::UnsafeArenaSwap(DungeonElement_Exchange* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DungeonElement_Exchange::InternalSwap(DungeonElement_Exchange* other) {
  using std::swap;
  CastToBase(&cost_)->InternalSwap(CastToBase(&other->cost_));
  CastToBase(&get_)->InternalSwap(CastToBase(&other->get_));
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DungeonElement_Exchange::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DungeonElement::InitAsDefaultInstance() {
  ::sg::_DungeonElement_default_instance_._instance.get_mutable()->property_ = const_cast< ::sg::ElementProperty*>(
      ::sg::ElementProperty::internal_default_instance());
}
void DungeonElement::unsafe_arena_set_allocated_property(
    ::sg::ElementProperty* property) {
  if (GetArenaNoVirtual() == NULL) {
    delete property_;
  }
  property_ = property;
  if (property) {
    set_has_property();
  } else {
    clear_has_property();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.DungeonElement.property)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonElement::kIdFieldNumber;
const int DungeonElement::kOwnerIdFieldNumber;
const int DungeonElement::kTypeFieldNumber;
const int DungeonElement::kTypeidFieldNumber;
const int DungeonElement::kPropertyFieldNumber;
const int DungeonElement::kExchangeListFieldNumber;
const int DungeonElement::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonElement::DungeonElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_DungeonElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DungeonElement)
}
DungeonElement::DungeonElement(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  exchange_list_(arena),
  elements_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonElement.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DungeonElement)
}
DungeonElement::DungeonElement(const DungeonElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      exchange_list_(from.exchange_list_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property()) {
    property_ = new ::sg::ElementProperty(*from.property_);
  } else {
    property_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sg.DungeonElement)
}

void DungeonElement::SharedCtor() {
  ::memset(&property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&property_)) + sizeof(type_));
}

DungeonElement::~DungeonElement() {
  // @@protoc_insertion_point(destructor:sg.DungeonElement)
  SharedDtor();
}

void DungeonElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete property_;
}

void DungeonElement::ArenaDtor(void* object) {
  DungeonElement* _this = reinterpret_cast< DungeonElement* >(object);
  (void)_this;
}
void DungeonElement::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DungeonElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DungeonElement::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonElement& DungeonElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonElement.base);
  return *internal_default_instance();
}


void DungeonElement::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DungeonElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_list_.Clear();
  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(property_ != NULL);
    property_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DungeonElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 owner_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 typeid_ = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.ElementProperty property = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.DungeonElement.Exchange exchange_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_exchange_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 elements = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_elements())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_elements())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DungeonElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DungeonElement)
  return false;
#undef DO_
}

void DungeonElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DungeonElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 owner_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->owner_id(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int64 typeid_ = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->typeid_(), output);
  }

  // optional .sg.ElementProperty property = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_property(), output);
  }

  // repeated .sg.DungeonElement.Exchange exchange_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exchange_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->exchange_list(static_cast<int>(i)),
      output);
  }

  // repeated int32 elements = 7;
  for (int i = 0, n = this->elements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->elements(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DungeonElement)
}

::google::protobuf::uint8* DungeonElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DungeonElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 owner_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->owner_id(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int64 typeid_ = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->typeid_(), target);
  }

  // optional .sg.ElementProperty property = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_property(), deterministic, target);
  }

  // repeated .sg.DungeonElement.Exchange exchange_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exchange_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->exchange_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 elements = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(7, this->elements_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DungeonElement)
  return target;
}

size_t DungeonElement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.DungeonElement)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_owner_id()) {
    // required int32 owner_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_id());
  }

  if (has_typeid_()) {
    // required int64 typeid_ = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->typeid_());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t DungeonElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DungeonElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 owner_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_id());

    // required int64 typeid_ = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->typeid_());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.DungeonElement.Exchange exchange_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->exchange_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exchange_list(static_cast<int>(i)));
    }
  }

  // repeated int32 elements = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->elements_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->elements_size());
    total_size += data_size;
  }

  // optional .sg.ElementProperty property = 5;
  if (has_property()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DungeonElement)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DungeonElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DungeonElement)
    MergeFrom(*source);
  }
}

void DungeonElement::MergeFrom(const DungeonElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DungeonElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exchange_list_.MergeFrom(from.exchange_list_);
  elements_.MergeFrom(from.elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_property()->::sg::ElementProperty::MergeFrom(from.property());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DungeonElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonElement::CopyFrom(const DungeonElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DungeonElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->exchange_list())) return false;
  if (has_property()) {
    if (!this->property_->IsInitialized()) return false;
  }
  return true;
}

void DungeonElement::Swap(DungeonElement* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DungeonElement* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DungeonElement::UnsafeArenaSwap(DungeonElement* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DungeonElement::InternalSwap(DungeonElement* other) {
  using std::swap;
  CastToBase(&exchange_list_)->InternalSwap(CastToBase(&other->exchange_list_));
  elements_.InternalSwap(&other->elements_);
  swap(property_, other->property_);
  swap(id_, other->id_);
  swap(owner_id_, other->owner_id_);
  swap(typeid__, other->typeid__);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DungeonElement::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DungeonContent_PathBranch::InitAsDefaultInstance() {
}
void DungeonContent_PathBranch::clear_layer_change() {
  layer_change_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonContent_PathBranch::kIdFieldNumber;
const int DungeonContent_PathBranch::kLayerChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonContent_PathBranch::DungeonContent_PathBranch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_DungeonContent_PathBranch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DungeonContent.PathBranch)
}
DungeonContent_PathBranch::DungeonContent_PathBranch(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  layer_change_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonContent_PathBranch.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DungeonContent.PathBranch)
}
DungeonContent_PathBranch::DungeonContent_PathBranch(const DungeonContent_PathBranch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      layer_change_(from.layer_change_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sg.DungeonContent.PathBranch)
}

void DungeonContent_PathBranch::SharedCtor() {
  id_ = 0;
}

DungeonContent_PathBranch::~DungeonContent_PathBranch() {
  // @@protoc_insertion_point(destructor:sg.DungeonContent.PathBranch)
  SharedDtor();
}

void DungeonContent_PathBranch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DungeonContent_PathBranch::ArenaDtor(void* object) {
  DungeonContent_PathBranch* _this = reinterpret_cast< DungeonContent_PathBranch* >(object);
  (void)_this;
}
void DungeonContent_PathBranch::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DungeonContent_PathBranch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DungeonContent_PathBranch::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonContent_PathBranch& DungeonContent_PathBranch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonContent_PathBranch.base);
  return *internal_default_instance();
}


void DungeonContent_PathBranch::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DungeonContent.PathBranch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_change_.Clear();
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonContent_PathBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DungeonContent.PathBranch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int layer_change = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_layer_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DungeonContent.PathBranch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DungeonContent.PathBranch)
  return false;
#undef DO_
}

void DungeonContent_PathBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DungeonContent.PathBranch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .sg.pb_pair_int_int layer_change = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layer_change_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->layer_change(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DungeonContent.PathBranch)
}

::google::protobuf::uint8* DungeonContent_PathBranch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DungeonContent.PathBranch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .sg.pb_pair_int_int layer_change = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layer_change_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->layer_change(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DungeonContent.PathBranch)
  return target;
}

size_t DungeonContent_PathBranch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DungeonContent.PathBranch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // repeated .sg.pb_pair_int_int layer_change = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->layer_change_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->layer_change(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonContent_PathBranch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DungeonContent.PathBranch)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonContent_PathBranch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonContent_PathBranch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DungeonContent.PathBranch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DungeonContent.PathBranch)
    MergeFrom(*source);
  }
}

void DungeonContent_PathBranch::MergeFrom(const DungeonContent_PathBranch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DungeonContent.PathBranch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_change_.MergeFrom(from.layer_change_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void DungeonContent_PathBranch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DungeonContent.PathBranch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonContent_PathBranch::CopyFrom(const DungeonContent_PathBranch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DungeonContent.PathBranch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonContent_PathBranch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->layer_change())) return false;
  return true;
}

void DungeonContent_PathBranch::Swap(DungeonContent_PathBranch* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DungeonContent_PathBranch* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DungeonContent_PathBranch::UnsafeArenaSwap(DungeonContent_PathBranch* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DungeonContent_PathBranch::InternalSwap(DungeonContent_PathBranch* other) {
  using std::swap;
  CastToBase(&layer_change_)->InternalSwap(CastToBase(&other->layer_change_));
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DungeonContent_PathBranch::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DungeonContent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonContent::kNowLayerFieldNumber;
const int DungeonContent::kStyleFieldNumber;
const int DungeonContent::kMonsterLevelFieldNumber;
const int DungeonContent::kElementsFieldNumber;
const int DungeonContent::kPathChoiceFieldNumber;
const int DungeonContent::kRealLayerFieldNumber;
const int DungeonContent::kModelIdFieldNumber;
const int DungeonContent::kEnemysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonContent::DungeonContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_DungeonContent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DungeonContent)
}
DungeonContent::DungeonContent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  elements_(arena),
  path_choice_(arena),
  enemys_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonContent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DungeonContent)
}
DungeonContent::DungeonContent(const DungeonContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      elements_(from.elements_),
      path_choice_(from.path_choice_),
      enemys_(from.enemys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&now_layer_, &from.now_layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_id_) -
    reinterpret_cast<char*>(&now_layer_)) + sizeof(model_id_));
  // @@protoc_insertion_point(copy_constructor:sg.DungeonContent)
}

void DungeonContent::SharedCtor() {
  ::memset(&now_layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&now_layer_)) + sizeof(model_id_));
}

DungeonContent::~DungeonContent() {
  // @@protoc_insertion_point(destructor:sg.DungeonContent)
  SharedDtor();
}

void DungeonContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DungeonContent::ArenaDtor(void* object) {
  DungeonContent* _this = reinterpret_cast< DungeonContent* >(object);
  (void)_this;
}
void DungeonContent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DungeonContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DungeonContent::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonContent& DungeonContent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonContent.base);
  return *internal_default_instance();
}


void DungeonContent::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DungeonContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  path_choice_.Clear();
  enemys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&now_layer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_id_) -
        reinterpret_cast<char*>(&now_layer_)) + sizeof(model_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DungeonContent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 now_layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_now_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 style = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 monster_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_monster_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.DungeonElement elements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.DungeonContent.PathBranch path_choice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path_choice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 real_layer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_real_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 model_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_model_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Enemy enemys = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_enemys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DungeonContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DungeonContent)
  return false;
#undef DO_
}

void DungeonContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DungeonContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 now_layer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->now_layer(), output);
  }

  // required int32 style = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->style(), output);
  }

  // required int32 monster_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monster_level(), output);
  }

  // repeated .sg.DungeonElement elements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->elements(static_cast<int>(i)),
      output);
  }

  // repeated .sg.DungeonContent.PathBranch path_choice = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_choice_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->path_choice(static_cast<int>(i)),
      output);
  }

  // optional int32 real_layer = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->real_layer(), output);
  }

  // optional int32 model_id = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->model_id(), output);
  }

  // repeated .sg.Enemy enemys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->enemys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DungeonContent)
}

::google::protobuf::uint8* DungeonContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DungeonContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 now_layer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->now_layer(), target);
  }

  // required int32 style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->style(), target);
  }

  // required int32 monster_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monster_level(), target);
  }

  // repeated .sg.DungeonElement elements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->elements(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.DungeonContent.PathBranch path_choice = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_choice_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->path_choice(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 real_layer = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->real_layer(), target);
  }

  // optional int32 model_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->model_id(), target);
  }

  // repeated .sg.Enemy enemys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->enemys(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DungeonContent)
  return target;
}

size_t DungeonContent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.DungeonContent)
  size_t total_size = 0;

  if (has_now_layer()) {
    // required int32 now_layer = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->now_layer());
  }

  if (has_style()) {
    // required int32 style = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->style());
  }

  if (has_monster_level()) {
    // required int32 monster_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->monster_level());
  }

  return total_size;
}
size_t DungeonContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DungeonContent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 now_layer = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->now_layer());

    // required int32 style = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->style());

    // required int32 monster_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->monster_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.DungeonElement elements = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->elements(static_cast<int>(i)));
    }
  }

  // repeated .sg.DungeonContent.PathBranch path_choice = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->path_choice_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_choice(static_cast<int>(i)));
    }
  }

  // repeated .sg.Enemy enemys = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->enemys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->enemys(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional int32 real_layer = 6;
    if (has_real_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_layer());
    }

    // optional int32 model_id = 7;
    if (has_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DungeonContent)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DungeonContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DungeonContent)
    MergeFrom(*source);
  }
}

void DungeonContent::MergeFrom(const DungeonContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DungeonContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  path_choice_.MergeFrom(from.path_choice_);
  enemys_.MergeFrom(from.enemys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      now_layer_ = from.now_layer_;
    }
    if (cached_has_bits & 0x00000002u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000004u) {
      monster_level_ = from.monster_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      real_layer_ = from.real_layer_;
    }
    if (cached_has_bits & 0x00000010u) {
      model_id_ = from.model_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DungeonContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonContent::CopyFrom(const DungeonContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DungeonContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->elements())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->path_choice())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->enemys())) return false;
  return true;
}

void DungeonContent::Swap(DungeonContent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DungeonContent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DungeonContent::UnsafeArenaSwap(DungeonContent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DungeonContent::InternalSwap(DungeonContent* other) {
  using std::swap;
  CastToBase(&elements_)->InternalSwap(CastToBase(&other->elements_));
  CastToBase(&path_choice_)->InternalSwap(CastToBase(&other->path_choice_));
  CastToBase(&enemys_)->InternalSwap(CastToBase(&other->enemys_));
  swap(now_layer_, other->now_layer_);
  swap(style_, other->style_);
  swap(monster_level_, other->monster_level_);
  swap(real_layer_, other->real_layer_);
  swap(model_id_, other->model_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DungeonContent::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserTeamData::InitAsDefaultInstance() {
}
void UserTeamData::clear_talents() {
  talents_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTeamData::kUserLevelFieldNumber;
const int UserTeamData::kTeamFieldNumber;
const int UserTeamData::kTalentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTeamData::UserTeamData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_UserTeamData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserTeamData)
}
UserTeamData::UserTeamData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  team_(arena),
  talents_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserTeamData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserTeamData)
}
UserTeamData::UserTeamData(const UserTeamData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      team_(from.team_),
      talents_(from.talents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_level_ = from.user_level_;
  // @@protoc_insertion_point(copy_constructor:sg.UserTeamData)
}

void UserTeamData::SharedCtor() {
  user_level_ = 0;
}

UserTeamData::~UserTeamData() {
  // @@protoc_insertion_point(destructor:sg.UserTeamData)
  SharedDtor();
}

void UserTeamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserTeamData::ArenaDtor(void* object) {
  UserTeamData* _this = reinterpret_cast< UserTeamData* >(object);
  (void)_this;
}
void UserTeamData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserTeamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserTeamData::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserTeamData& UserTeamData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserTeamData.base);
  return *internal_default_instance();
}


void UserTeamData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserTeamData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_.Clear();
  talents_.Clear();
  user_level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserTeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserTeamData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SailorInDungeon team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int talents = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_talents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserTeamData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserTeamData)
  return false;
#undef DO_
}

void UserTeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserTeamData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 user_level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_level(), output);
  }

  // repeated .sg.SailorInDungeon team = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->team(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_int talents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->talents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->talents(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserTeamData)
}

::google::protobuf::uint8* UserTeamData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserTeamData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 user_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_level(), target);
  }

  // repeated .sg.SailorInDungeon team = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->team(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_int talents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->talents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->talents(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserTeamData)
  return target;
}

size_t UserTeamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserTeamData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 user_level = 1;
  if (has_user_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_level());
  }
  // repeated .sg.SailorInDungeon team = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->team_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int talents = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->talents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->talents(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTeamData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserTeamData)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTeamData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserTeamData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserTeamData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserTeamData)
    MergeFrom(*source);
  }
}

void UserTeamData::MergeFrom(const UserTeamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserTeamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_.MergeFrom(from.team_);
  talents_.MergeFrom(from.talents_);
  if (from.has_user_level()) {
    set_user_level(from.user_level());
  }
}

void UserTeamData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserTeamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTeamData::CopyFrom(const UserTeamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserTeamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTeamData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->talents())) return false;
  return true;
}

void UserTeamData::Swap(UserTeamData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserTeamData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserTeamData::UnsafeArenaSwap(UserTeamData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserTeamData::InternalSwap(UserTeamData* other) {
  using std::swap;
  CastToBase(&team_)->InternalSwap(CastToBase(&other->team_));
  CastToBase(&talents_)->InternalSwap(CastToBase(&other->talents_));
  swap(user_level_, other->user_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserTeamData::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDungeonInformation_ElementCount::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDungeonInformation_ElementCount::kTypeFieldNumber;
const int UserDungeonInformation_ElementCount::kTypeidFieldNumber;
const int UserDungeonInformation_ElementCount::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDungeonInformation_ElementCount::UserDungeonInformation_ElementCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_UserDungeonInformation_ElementCount.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserDungeonInformation.ElementCount)
}
UserDungeonInformation_ElementCount::UserDungeonInformation_ElementCount(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonInformation_ElementCount.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserDungeonInformation.ElementCount)
}
UserDungeonInformation_ElementCount::UserDungeonInformation_ElementCount(const UserDungeonInformation_ElementCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&type_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:sg.UserDungeonInformation.ElementCount)
}

void UserDungeonInformation_ElementCount::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_));
}

UserDungeonInformation_ElementCount::~UserDungeonInformation_ElementCount() {
  // @@protoc_insertion_point(destructor:sg.UserDungeonInformation.ElementCount)
  SharedDtor();
}

void UserDungeonInformation_ElementCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserDungeonInformation_ElementCount::ArenaDtor(void* object) {
  UserDungeonInformation_ElementCount* _this = reinterpret_cast< UserDungeonInformation_ElementCount* >(object);
  (void)_this;
}
void UserDungeonInformation_ElementCount::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserDungeonInformation_ElementCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDungeonInformation_ElementCount::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDungeonInformation_ElementCount& UserDungeonInformation_ElementCount::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonInformation_ElementCount.base);
  return *internal_default_instance();
}


void UserDungeonInformation_ElementCount::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserDungeonInformation.ElementCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&type_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDungeonInformation_ElementCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserDungeonInformation.ElementCount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserDungeonInformation.ElementCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserDungeonInformation.ElementCount)
  return false;
#undef DO_
}

void UserDungeonInformation_ElementCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserDungeonInformation.ElementCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // required int32 num = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserDungeonInformation.ElementCount)
}

::google::protobuf::uint8* UserDungeonInformation_ElementCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserDungeonInformation.ElementCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // required int32 num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserDungeonInformation.ElementCount)
  return target;
}

size_t UserDungeonInformation_ElementCount::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.UserDungeonInformation.ElementCount)
  size_t total_size = 0;

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_typeid_()) {
    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_num()) {
    // required int32 num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  return total_size;
}
size_t UserDungeonInformation_ElementCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserDungeonInformation.ElementCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDungeonInformation_ElementCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserDungeonInformation.ElementCount)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDungeonInformation_ElementCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDungeonInformation_ElementCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserDungeonInformation.ElementCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserDungeonInformation.ElementCount)
    MergeFrom(*source);
  }
}

void UserDungeonInformation_ElementCount::MergeFrom(const UserDungeonInformation_ElementCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserDungeonInformation.ElementCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDungeonInformation_ElementCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserDungeonInformation.ElementCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDungeonInformation_ElementCount::CopyFrom(const UserDungeonInformation_ElementCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserDungeonInformation.ElementCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDungeonInformation_ElementCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UserDungeonInformation_ElementCount::Swap(UserDungeonInformation_ElementCount* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserDungeonInformation_ElementCount* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserDungeonInformation_ElementCount::UnsafeArenaSwap(UserDungeonInformation_ElementCount* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserDungeonInformation_ElementCount::InternalSwap(UserDungeonInformation_ElementCount* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(typeid__, other->typeid__);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDungeonInformation_ElementCount::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDungeonInformation::InitAsDefaultInstance() {
}
void UserDungeonInformation::clear_talents() {
  talents_.Clear();
}
void UserDungeonInformation::clear_packages() {
  packages_.Clear();
}
void UserDungeonInformation::clear_secret_room_distribute() {
  secret_room_distribute_.Clear();
}
void UserDungeonInformation::clear_layer_change() {
  layer_change_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDungeonInformation::kReviveTimesFieldNumber;
const int UserDungeonInformation::kTalentsFieldNumber;
const int UserDungeonInformation::kPackagesFieldNumber;
const int UserDungeonInformation::kSavedNpcFieldNumber;
const int UserDungeonInformation::kSavedCustomersFieldNumber;
const int UserDungeonInformation::kTriggeredEventFieldNumber;
const int UserDungeonInformation::kOccupationFieldNumber;
const int UserDungeonInformation::kSecretRoomDistributeFieldNumber;
const int UserDungeonInformation::kLayerChangeFieldNumber;
const int UserDungeonInformation::kFriendlyMonstersFieldNumber;
const int UserDungeonInformation::kAltarsFieldNumber;
const int UserDungeonInformation::kElementCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDungeonInformation::UserDungeonInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_UserDungeonInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserDungeonInformation)
}
UserDungeonInformation::UserDungeonInformation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  talents_(arena),
  packages_(arena),
  saved_npc_(arena),
  saved_customers_(arena),
  triggered_event_(arena),
  secret_room_distribute_(arena),
  layer_change_(arena),
  friendly_monsters_(arena),
  altars_(arena),
  element_count_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonInformation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserDungeonInformation)
}
UserDungeonInformation::UserDungeonInformation(const UserDungeonInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      talents_(from.talents_),
      packages_(from.packages_),
      saved_npc_(from.saved_npc_),
      saved_customers_(from.saved_customers_),
      triggered_event_(from.triggered_event_),
      secret_room_distribute_(from.secret_room_distribute_),
      layer_change_(from.layer_change_),
      friendly_monsters_(from.friendly_monsters_),
      altars_(from.altars_),
      element_count_(from.element_count_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&revive_times_, &from.revive_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupation_) -
    reinterpret_cast<char*>(&revive_times_)) + sizeof(occupation_));
  // @@protoc_insertion_point(copy_constructor:sg.UserDungeonInformation)
}

void UserDungeonInformation::SharedCtor() {
  ::memset(&revive_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupation_) -
      reinterpret_cast<char*>(&revive_times_)) + sizeof(occupation_));
}

UserDungeonInformation::~UserDungeonInformation() {
  // @@protoc_insertion_point(destructor:sg.UserDungeonInformation)
  SharedDtor();
}

void UserDungeonInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserDungeonInformation::ArenaDtor(void* object) {
  UserDungeonInformation* _this = reinterpret_cast< UserDungeonInformation* >(object);
  (void)_this;
}
void UserDungeonInformation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserDungeonInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDungeonInformation::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDungeonInformation& UserDungeonInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonInformation.base);
  return *internal_default_instance();
}


void UserDungeonInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserDungeonInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  talents_.Clear();
  packages_.Clear();
  saved_npc_.Clear();
  saved_customers_.Clear();
  triggered_event_.Clear();
  secret_room_distribute_.Clear();
  layer_change_.Clear();
  friendly_monsters_.Clear();
  altars_.Clear();
  element_count_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&revive_times_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&occupation_) -
        reinterpret_cast<char*>(&revive_times_)) + sizeof(occupation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDungeonInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserDungeonInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 revive_times = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_revive_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revive_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int talents = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_talents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int packages = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 saved_npc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40u, input, this->mutable_saved_npc())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_saved_npc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 saved_customers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_saved_customers())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_saved_customers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 triggered_event = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56u, input, this->mutable_triggered_event())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_triggered_event())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_occupation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int secret_room_distribute = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_secret_room_distribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int layer_change = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_layer_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.MonsterInDungeon friendly_monsters = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_friendly_monsters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.DungeonAltar altars = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_altars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.UserDungeonInformation.ElementCount element_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_element_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserDungeonInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserDungeonInformation)
  return false;
#undef DO_
}

void UserDungeonInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserDungeonInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 revive_times = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->revive_times(), output);
  }

  // repeated .sg.pb_pair_int_int talents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->talents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->talents(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_int packages = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->packages(static_cast<int>(i)),
      output);
  }

  // repeated int64 saved_npc = 5;
  for (int i = 0, n = this->saved_npc_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->saved_npc(i), output);
  }

  // repeated int64 saved_customers = 6;
  for (int i = 0, n = this->saved_customers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->saved_customers(i), output);
  }

  // repeated int64 triggered_event = 7;
  for (int i = 0, n = this->triggered_event_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->triggered_event(i), output);
  }

  // optional int32 occupation = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->occupation(), output);
  }

  // repeated .sg.pb_pair_int_int secret_room_distribute = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->secret_room_distribute_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->secret_room_distribute(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_int layer_change = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layer_change_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->layer_change(static_cast<int>(i)),
      output);
  }

  // repeated .sg.MonsterInDungeon friendly_monsters = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friendly_monsters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->friendly_monsters(static_cast<int>(i)),
      output);
  }

  // repeated .sg.DungeonAltar altars = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->altars_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->altars(static_cast<int>(i)),
      output);
  }

  // repeated .sg.UserDungeonInformation.ElementCount element_count = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_count_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->element_count(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserDungeonInformation)
}

::google::protobuf::uint8* UserDungeonInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserDungeonInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 revive_times = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->revive_times(), target);
  }

  // repeated .sg.pb_pair_int_int talents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->talents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->talents(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_int packages = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->packages(static_cast<int>(i)), deterministic, target);
  }

  // repeated int64 saved_npc = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(5, this->saved_npc_, target);

  // repeated int64 saved_customers = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(6, this->saved_customers_, target);

  // repeated int64 triggered_event = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(7, this->triggered_event_, target);

  // optional int32 occupation = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->occupation(), target);
  }

  // repeated .sg.pb_pair_int_int secret_room_distribute = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->secret_room_distribute_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->secret_room_distribute(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_int layer_change = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layer_change_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->layer_change(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.MonsterInDungeon friendly_monsters = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friendly_monsters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->friendly_monsters(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.DungeonAltar altars = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->altars_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->altars(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.UserDungeonInformation.ElementCount element_count = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_count_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->element_count(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserDungeonInformation)
  return target;
}

size_t UserDungeonInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserDungeonInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.pb_pair_int_int talents = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->talents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->talents(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int packages = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->packages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->packages(static_cast<int>(i)));
    }
  }

  // repeated int64 saved_npc = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->saved_npc_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->saved_npc_size());
    total_size += data_size;
  }

  // repeated int64 saved_customers = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->saved_customers_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->saved_customers_size());
    total_size += data_size;
  }

  // repeated int64 triggered_event = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->triggered_event_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->triggered_event_size());
    total_size += data_size;
  }

  // repeated .sg.pb_pair_int_int secret_room_distribute = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->secret_room_distribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->secret_room_distribute(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int layer_change = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->layer_change_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->layer_change(static_cast<int>(i)));
    }
  }

  // repeated .sg.MonsterInDungeon friendly_monsters = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->friendly_monsters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->friendly_monsters(static_cast<int>(i)));
    }
  }

  // repeated .sg.DungeonAltar altars = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->altars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->altars(static_cast<int>(i)));
    }
  }

  // repeated .sg.UserDungeonInformation.ElementCount element_count = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->element_count_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->element_count(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 revive_times = 1;
    if (has_revive_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revive_times());
    }

    // optional int32 occupation = 8;
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDungeonInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserDungeonInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDungeonInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDungeonInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserDungeonInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserDungeonInformation)
    MergeFrom(*source);
  }
}

void UserDungeonInformation::MergeFrom(const UserDungeonInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserDungeonInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  talents_.MergeFrom(from.talents_);
  packages_.MergeFrom(from.packages_);
  saved_npc_.MergeFrom(from.saved_npc_);
  saved_customers_.MergeFrom(from.saved_customers_);
  triggered_event_.MergeFrom(from.triggered_event_);
  secret_room_distribute_.MergeFrom(from.secret_room_distribute_);
  layer_change_.MergeFrom(from.layer_change_);
  friendly_monsters_.MergeFrom(from.friendly_monsters_);
  altars_.MergeFrom(from.altars_);
  element_count_.MergeFrom(from.element_count_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      revive_times_ = from.revive_times_;
    }
    if (cached_has_bits & 0x00000002u) {
      occupation_ = from.occupation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDungeonInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserDungeonInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDungeonInformation::CopyFrom(const UserDungeonInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserDungeonInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDungeonInformation::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->talents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->packages())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->secret_room_distribute())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->layer_change())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->friendly_monsters())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->altars())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->element_count())) return false;
  return true;
}

void UserDungeonInformation::Swap(UserDungeonInformation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserDungeonInformation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserDungeonInformation::UnsafeArenaSwap(UserDungeonInformation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserDungeonInformation::InternalSwap(UserDungeonInformation* other) {
  using std::swap;
  CastToBase(&talents_)->InternalSwap(CastToBase(&other->talents_));
  CastToBase(&packages_)->InternalSwap(CastToBase(&other->packages_));
  saved_npc_.InternalSwap(&other->saved_npc_);
  saved_customers_.InternalSwap(&other->saved_customers_);
  triggered_event_.InternalSwap(&other->triggered_event_);
  CastToBase(&secret_room_distribute_)->InternalSwap(CastToBase(&other->secret_room_distribute_));
  CastToBase(&layer_change_)->InternalSwap(CastToBase(&other->layer_change_));
  CastToBase(&friendly_monsters_)->InternalSwap(CastToBase(&other->friendly_monsters_));
  CastToBase(&altars_)->InternalSwap(CastToBase(&other->altars_));
  CastToBase(&element_count_)->InternalSwap(CastToBase(&other->element_count_));
  swap(revive_times_, other->revive_times_);
  swap(occupation_, other->occupation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDungeonInformation::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDungeonOperation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDungeonOperation::kOperationTypeFieldNumber;
const int UserDungeonOperation::kTargetElementFieldNumber;
const int UserDungeonOperation::kOperationParamFieldNumber;
const int UserDungeonOperation::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDungeonOperation::UserDungeonOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_UserDungeonOperation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserDungeonOperation)
}
UserDungeonOperation::UserDungeonOperation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonOperation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserDungeonOperation)
}
UserDungeonOperation::UserDungeonOperation(const UserDungeonOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&operation_type_, &from.operation_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_param_) -
    reinterpret_cast<char*>(&operation_type_)) + sizeof(operation_param_));
  // @@protoc_insertion_point(copy_constructor:sg.UserDungeonOperation)
}

void UserDungeonOperation::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&operation_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_param_) -
      reinterpret_cast<char*>(&operation_type_)) + sizeof(operation_param_));
}

UserDungeonOperation::~UserDungeonOperation() {
  // @@protoc_insertion_point(destructor:sg.UserDungeonOperation)
  SharedDtor();
}

void UserDungeonOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserDungeonOperation::ArenaDtor(void* object) {
  UserDungeonOperation* _this = reinterpret_cast< UserDungeonOperation* >(object);
  (void)_this;
}
void UserDungeonOperation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserDungeonOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDungeonOperation::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDungeonOperation& UserDungeonOperation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonOperation.base);
  return *internal_default_instance();
}


void UserDungeonOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserDungeonOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&operation_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operation_param_) -
        reinterpret_cast<char*>(&operation_type_)) + sizeof(operation_param_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDungeonOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserDungeonOperation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 operation_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_operation_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_element = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target_element();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_element_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 operation_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_operation_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserDungeonOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserDungeonOperation)
  return false;
#undef DO_
}

void UserDungeonOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserDungeonOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 operation_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operation_type(), output);
  }

  // optional int32 target_element = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_element(), output);
  }

  // optional int32 operation_param = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operation_param(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserDungeonOperation)
}

::google::protobuf::uint8* UserDungeonOperation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserDungeonOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 operation_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operation_type(), target);
  }

  // optional int32 target_element = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_element(), target);
  }

  // optional int32 operation_param = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operation_param(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserDungeonOperation)
  return target;
}

size_t UserDungeonOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserDungeonOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 operation_type = 1;
  if (has_operation_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operation_type());
  }
  // optional bytes data = 4;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional int32 target_element = 2;
    if (has_target_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_element());
    }

    // optional int32 operation_param = 3;
    if (has_operation_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation_param());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDungeonOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserDungeonOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDungeonOperation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDungeonOperation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserDungeonOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserDungeonOperation)
    MergeFrom(*source);
  }
}

void UserDungeonOperation::MergeFrom(const UserDungeonOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserDungeonOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_data(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      operation_type_ = from.operation_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_element_ = from.target_element_;
    }
    if (cached_has_bits & 0x00000008u) {
      operation_param_ = from.operation_param_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDungeonOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserDungeonOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDungeonOperation::CopyFrom(const UserDungeonOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserDungeonOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDungeonOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void UserDungeonOperation::Swap(UserDungeonOperation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserDungeonOperation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserDungeonOperation::UnsafeArenaSwap(UserDungeonOperation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserDungeonOperation::InternalSwap(UserDungeonOperation* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operation_type_, other->operation_type_);
  swap(target_element_, other->target_element_);
  swap(operation_param_, other->operation_param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDungeonOperation::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DungeonEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonEvent::kIdFieldNumber;
const int DungeonEvent::kStateFieldNumber;
const int DungeonEvent::kFinishValueFieldNumber;
const int DungeonEvent::kRequireValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonEvent::DungeonEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_DungeonEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DungeonEvent)
}
DungeonEvent::DungeonEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DungeonEvent)
}
DungeonEvent::DungeonEvent(const DungeonEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(require_value_));
  // @@protoc_insertion_point(copy_constructor:sg.DungeonEvent)
}

void DungeonEvent::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(require_value_));
}

DungeonEvent::~DungeonEvent() {
  // @@protoc_insertion_point(destructor:sg.DungeonEvent)
  SharedDtor();
}

void DungeonEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DungeonEvent::ArenaDtor(void* object) {
  DungeonEvent* _this = reinterpret_cast< DungeonEvent* >(object);
  (void)_this;
}
void DungeonEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DungeonEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DungeonEvent::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonEvent& DungeonEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonEvent.base);
  return *internal_default_instance();
}


void DungeonEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DungeonEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_value_) -
        reinterpret_cast<char*>(&id_)) + sizeof(require_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DungeonEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 finish_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_finish_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 require_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_require_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DungeonEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DungeonEvent)
  return false;
#undef DO_
}

void DungeonEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DungeonEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required int32 finish_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finish_value(), output);
  }

  // optional int32 require_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->require_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DungeonEvent)
}

::google::protobuf::uint8* DungeonEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DungeonEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required int32 finish_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finish_value(), target);
  }

  // optional int32 require_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->require_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DungeonEvent)
  return target;
}

size_t DungeonEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.DungeonEvent)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_finish_value()) {
    // required int32 finish_value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->finish_value());
  }

  return total_size;
}
size_t DungeonEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DungeonEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 finish_value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->finish_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 require_value = 4;
  if (has_require_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DungeonEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DungeonEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DungeonEvent)
    MergeFrom(*source);
  }
}

void DungeonEvent::MergeFrom(const DungeonEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DungeonEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      finish_value_ = from.finish_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      require_value_ = from.require_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DungeonEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonEvent::CopyFrom(const DungeonEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DungeonEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DungeonEvent::Swap(DungeonEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DungeonEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DungeonEvent::UnsafeArenaSwap(DungeonEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DungeonEvent::InternalSwap(DungeonEvent* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(finish_value_, other->finish_value_);
  swap(require_value_, other->require_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DungeonEvent::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShipData::InitAsDefaultInstance() {
}
void ShipData::clear_sailors() {
  sailors_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShipData::kUseridFieldNumber;
const int ShipData::kShipModelFieldNumber;
const int ShipData::kRoomsFieldNumber;
const int ShipData::kShipTilesFieldNumber;
const int ShipData::kFacilitysFieldNumber;
const int ShipData::kSailorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShipData::ShipData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_ShipData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.ShipData)
}
ShipData::ShipData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sailors_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_ShipData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.ShipData)
}
ShipData::ShipData(const ShipData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sailors_(from.sailors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  rooms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rooms()) {
    rooms_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rooms(),
      GetArenaNoVirtual());
  }
  ship_tiles_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ship_tiles()) {
    ship_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ship_tiles(),
      GetArenaNoVirtual());
  }
  facilitys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_facilitys()) {
    facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facilitys(),
      GetArenaNoVirtual());
  }
  ship_model_ = from.ship_model_;
  // @@protoc_insertion_point(copy_constructor:sg.ShipData)
}

void ShipData::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rooms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_tiles_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facilitys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_model_ = 0;
}

ShipData::~ShipData() {
  // @@protoc_insertion_point(destructor:sg.ShipData)
  SharedDtor();
}

void ShipData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rooms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_tiles_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facilitys_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShipData::ArenaDtor(void* object) {
  ShipData* _this = reinterpret_cast< ShipData* >(object);
  (void)_this;
}
void ShipData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ShipData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShipData::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShipData& ShipData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_ShipData.base);
  return *internal_default_instance();
}


void ShipData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.ShipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sailors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      userid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      rooms_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ship_tiles_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      facilitys_.ClearNonDefaultToEmpty();
    }
  }
  ship_model_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.ShipData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ship_model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ship_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rooms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ship_tiles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ship_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes facilitys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_facilitys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Sailor sailors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sailors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.ShipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.ShipData)
  return false;
#undef DO_
}

void ShipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.ShipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 ship_model = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ship_model(), output);
  }

  // optional bytes rooms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->rooms(), output);
  }

  // optional bytes ship_tiles = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ship_tiles(), output);
  }

  // required bytes facilitys = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->facilitys(), output);
  }

  // repeated .sg.Sailor sailors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->sailors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.ShipData)
}

::google::protobuf::uint8* ShipData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.ShipData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 ship_model = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ship_model(), target);
  }

  // optional bytes rooms = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rooms(), target);
  }

  // optional bytes ship_tiles = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ship_tiles(), target);
  }

  // required bytes facilitys = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->facilitys(), target);
  }

  // repeated .sg.Sailor sailors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->sailors(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.ShipData)
  return target;
}

size_t ShipData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.ShipData)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_facilitys()) {
    // required bytes facilitys = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->facilitys());
  }

  if (has_ship_model()) {
    // required int32 ship_model = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ship_model());
  }

  return total_size;
}
size_t ShipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.ShipData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required bytes facilitys = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->facilitys());

    // required int32 ship_model = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ship_model());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.Sailor sailors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->sailors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sailors(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes rooms = 3;
    if (has_rooms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rooms());
    }

    // optional bytes ship_tiles = 4;
    if (has_ship_tiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ship_tiles());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShipData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.ShipData)
  GOOGLE_DCHECK_NE(&from, this);
  const ShipData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShipData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.ShipData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.ShipData)
    MergeFrom(*source);
  }
}

void ShipData::MergeFrom(const ShipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.ShipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sailors_.MergeFrom(from.sailors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_rooms(from.rooms());
    }
    if (cached_has_bits & 0x00000004u) {
      set_ship_tiles(from.ship_tiles());
    }
    if (cached_has_bits & 0x00000008u) {
      set_facilitys(from.facilitys());
    }
    if (cached_has_bits & 0x00000010u) {
      ship_model_ = from.ship_model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShipData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.ShipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipData::CopyFrom(const ShipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.ShipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sailors())) return false;
  return true;
}

void ShipData::Swap(ShipData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ShipData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ShipData::UnsafeArenaSwap(ShipData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ShipData::InternalSwap(ShipData* other) {
  using std::swap;
  CastToBase(&sailors_)->InternalSwap(CastToBase(&other->sailors_));
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rooms_.Swap(&other->rooms_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ship_tiles_.Swap(&other->ship_tiles_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  facilitys_.Swap(&other->facilitys_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ship_model_, other->ship_model_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShipData::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PveFacility::InitAsDefaultInstance() {
}
void PveFacility::clear_contain() {
  contain_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PveFacility::kIdFieldNumber;
const int PveFacility::kTypeidFieldNumber;
const int PveFacility::kXFieldNumber;
const int PveFacility::kYFieldNumber;
const int PveFacility::kContainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PveFacility::PveFacility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_PveFacility.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PveFacility)
}
PveFacility::PveFacility(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  contain_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PveFacility.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PveFacility)
}
PveFacility::PveFacility(const PveFacility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      contain_(from.contain_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:sg.PveFacility)
}

void PveFacility::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
}

PveFacility::~PveFacility() {
  // @@protoc_insertion_point(destructor:sg.PveFacility)
  SharedDtor();
}

void PveFacility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PveFacility::ArenaDtor(void* object) {
  PveFacility* _this = reinterpret_cast< PveFacility* >(object);
  (void)_this;
}
void PveFacility::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PveFacility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PveFacility::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PveFacility& PveFacility::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PveFacility.base);
  return *internal_default_instance();
}


void PveFacility::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PveFacility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&id_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PveFacility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PveFacility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Item contain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_contain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PveFacility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PveFacility)
  return false;
#undef DO_
}

void PveFacility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PveFacility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // optional int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // repeated .sg.Item contain = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contain_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->contain(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PveFacility)
}

::google::protobuf::uint8* PveFacility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PveFacility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 typeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // optional int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  // repeated .sg.Item contain = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contain_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->contain(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PveFacility)
  return target;
}

size_t PveFacility::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.PveFacility)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  return total_size;
}
size_t PveFacility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PveFacility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.Item contain = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->contain_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->contain(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PveFacility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PveFacility)
  GOOGLE_DCHECK_NE(&from, this);
  const PveFacility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PveFacility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PveFacility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PveFacility)
    MergeFrom(*source);
  }
}

void PveFacility::MergeFrom(const PveFacility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PveFacility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contain_.MergeFrom(from.contain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PveFacility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PveFacility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PveFacility::CopyFrom(const PveFacility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PveFacility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveFacility::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->contain())) return false;
  return true;
}

void PveFacility::Swap(PveFacility* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PveFacility* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PveFacility::UnsafeArenaSwap(PveFacility* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PveFacility::InternalSwap(PveFacility* other) {
  using std::swap;
  CastToBase(&contain_)->InternalSwap(CastToBase(&other->contain_));
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PveFacility::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PveMapData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PveMapData::kModelIdFieldNumber;
const int PveMapData::kWidthFieldNumber;
const int PveMapData::kHeightFieldNumber;
const int PveMapData::kRoomsFieldNumber;
const int PveMapData::kMapTilesFieldNumber;
const int PveMapData::kFacilitysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PveMapData::PveMapData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_PveMapData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PveMapData)
}
PveMapData::PveMapData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  facilitys_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PveMapData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PveMapData)
}
PveMapData::PveMapData(const PveMapData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      facilitys_(from.facilitys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rooms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rooms()) {
    rooms_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rooms(),
      GetArenaNoVirtual());
  }
  map_tiles_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_tiles()) {
    map_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_tiles(),
      GetArenaNoVirtual());
  }
  ::memcpy(&model_id_, &from.model_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&model_id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:sg.PveMapData)
}

void PveMapData::SharedCtor() {
  rooms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_tiles_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&model_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&model_id_)) + sizeof(height_));
}

PveMapData::~PveMapData() {
  // @@protoc_insertion_point(destructor:sg.PveMapData)
  SharedDtor();
}

void PveMapData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  rooms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_tiles_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PveMapData::ArenaDtor(void* object) {
  PveMapData* _this = reinterpret_cast< PveMapData* >(object);
  (void)_this;
}
void PveMapData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PveMapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PveMapData::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PveMapData& PveMapData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PveMapData.base);
  return *internal_default_instance();
}


void PveMapData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PveMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facilitys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      rooms_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_tiles_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&model_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&model_id_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PveMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PveMapData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 model_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_model_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rooms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes map_tiles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.PveFacility facilitys = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_facilitys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PveMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PveMapData)
  return false;
#undef DO_
}

void PveMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PveMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 model_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->model_id(), output);
  }

  // required int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // required int32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional bytes rooms = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->rooms(), output);
  }

  // optional bytes map_tiles = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->map_tiles(), output);
  }

  // repeated .sg.PveFacility facilitys = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->facilitys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PveMapData)
}

::google::protobuf::uint8* PveMapData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PveMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 model_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->model_id(), target);
  }

  // required int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // required int32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional bytes rooms = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rooms(), target);
  }

  // optional bytes map_tiles = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->map_tiles(), target);
  }

  // repeated .sg.PveFacility facilitys = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->facilitys(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PveMapData)
  return target;
}

size_t PveMapData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.PveMapData)
  size_t total_size = 0;

  if (has_model_id()) {
    // required int32 model_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  if (has_width()) {
    // required int32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  return total_size;
}
size_t PveMapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PveMapData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required int32 model_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());

    // required int32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.PveFacility facilitys = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->facilitys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->facilitys(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes rooms = 5;
    if (has_rooms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rooms());
    }

    // optional bytes map_tiles = 6;
    if (has_map_tiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_tiles());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PveMapData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PveMapData)
  GOOGLE_DCHECK_NE(&from, this);
  const PveMapData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PveMapData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PveMapData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PveMapData)
    MergeFrom(*source);
  }
}

void PveMapData::MergeFrom(const PveMapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PveMapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  facilitys_.MergeFrom(from.facilitys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_rooms(from.rooms());
    }
    if (cached_has_bits & 0x00000002u) {
      set_map_tiles(from.map_tiles());
    }
    if (cached_has_bits & 0x00000004u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PveMapData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PveMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PveMapData::CopyFrom(const PveMapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PveMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveMapData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->facilitys())) return false;
  return true;
}

void PveMapData::Swap(PveMapData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PveMapData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PveMapData::UnsafeArenaSwap(PveMapData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PveMapData::InternalSwap(PveMapData* other) {
  using std::swap;
  CastToBase(&facilitys_)->InternalSwap(CastToBase(&other->facilitys_));
  rooms_.Swap(&other->rooms_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_tiles_.Swap(&other->map_tiles_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(model_id_, other->model_id_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PveMapData::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvePlayerMapData::InitAsDefaultInstance() {
  ::sg::_PvePlayerMapData_default_instance_._instance.get_mutable()->shipdata_ = const_cast< ::sg::ShipData*>(
      ::sg::ShipData::internal_default_instance());
}
void PvePlayerMapData::unsafe_arena_set_allocated_shipdata(
    ::sg::ShipData* shipdata) {
  if (GetArenaNoVirtual() == NULL) {
    delete shipdata_;
  }
  shipdata_ = shipdata;
  if (shipdata) {
    set_has_shipdata();
  } else {
    clear_has_shipdata();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PvePlayerMapData.shipdata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvePlayerMapData::kShipdataFieldNumber;
const int PvePlayerMapData::kFacilitysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvePlayerMapData::PvePlayerMapData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_PvePlayerMapData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PvePlayerMapData)
}
PvePlayerMapData::PvePlayerMapData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  facilitys_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PvePlayerMapData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PvePlayerMapData)
}
PvePlayerMapData::PvePlayerMapData(const PvePlayerMapData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      facilitys_(from.facilitys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shipdata()) {
    shipdata_ = new ::sg::ShipData(*from.shipdata_);
  } else {
    shipdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.PvePlayerMapData)
}

void PvePlayerMapData::SharedCtor() {
  shipdata_ = NULL;
}

PvePlayerMapData::~PvePlayerMapData() {
  // @@protoc_insertion_point(destructor:sg.PvePlayerMapData)
  SharedDtor();
}

void PvePlayerMapData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete shipdata_;
}

void PvePlayerMapData::ArenaDtor(void* object) {
  PvePlayerMapData* _this = reinterpret_cast< PvePlayerMapData* >(object);
  (void)_this;
}
void PvePlayerMapData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvePlayerMapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvePlayerMapData::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvePlayerMapData& PvePlayerMapData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PvePlayerMapData.base);
  return *internal_default_instance();
}


void PvePlayerMapData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PvePlayerMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facilitys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shipdata_ != NULL);
    shipdata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvePlayerMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PvePlayerMapData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.ShipData shipdata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shipdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.PveFacility facilitys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_facilitys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PvePlayerMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PvePlayerMapData)
  return false;
#undef DO_
}

void PvePlayerMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PvePlayerMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.ShipData shipdata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_shipdata(), output);
  }

  // repeated .sg.PveFacility facilitys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->facilitys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PvePlayerMapData)
}

::google::protobuf::uint8* PvePlayerMapData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PvePlayerMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.ShipData shipdata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_shipdata(), deterministic, target);
  }

  // repeated .sg.PveFacility facilitys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facilitys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->facilitys(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PvePlayerMapData)
  return target;
}

size_t PvePlayerMapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PvePlayerMapData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.ShipData shipdata = 1;
  if (has_shipdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shipdata_);
  }
  // repeated .sg.PveFacility facilitys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->facilitys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->facilitys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvePlayerMapData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PvePlayerMapData)
  GOOGLE_DCHECK_NE(&from, this);
  const PvePlayerMapData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvePlayerMapData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PvePlayerMapData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PvePlayerMapData)
    MergeFrom(*source);
  }
}

void PvePlayerMapData::MergeFrom(const PvePlayerMapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PvePlayerMapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  facilitys_.MergeFrom(from.facilitys_);
  if (from.has_shipdata()) {
    mutable_shipdata()->::sg::ShipData::MergeFrom(from.shipdata());
  }
}

void PvePlayerMapData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PvePlayerMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvePlayerMapData::CopyFrom(const PvePlayerMapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PvePlayerMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvePlayerMapData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->facilitys())) return false;
  if (has_shipdata()) {
    if (!this->shipdata_->IsInitialized()) return false;
  }
  return true;
}

void PvePlayerMapData::Swap(PvePlayerMapData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvePlayerMapData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvePlayerMapData::UnsafeArenaSwap(PvePlayerMapData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvePlayerMapData::InternalSwap(PvePlayerMapData* other) {
  using std::swap;
  CastToBase(&facilitys_)->InternalSwap(CastToBase(&other->facilitys_));
  swap(shipdata_, other->shipdata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvePlayerMapData::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PveDefenderData::InitAsDefaultInstance() {
}
void PveDefenderData::clear_defend_team() {
  defend_team_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PveDefenderData::kUseridFieldNumber;
const int PveDefenderData::kDefendTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PveDefenderData::PveDefenderData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_PveDefenderData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PveDefenderData)
}
PveDefenderData::PveDefenderData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  defend_team_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PveDefenderData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PveDefenderData)
}
PveDefenderData::PveDefenderData(const PveDefenderData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      defend_team_(from.defend_team_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:sg.PveDefenderData)
}

void PveDefenderData::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PveDefenderData::~PveDefenderData() {
  // @@protoc_insertion_point(destructor:sg.PveDefenderData)
  SharedDtor();
}

void PveDefenderData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PveDefenderData::ArenaDtor(void* object) {
  PveDefenderData* _this = reinterpret_cast< PveDefenderData* >(object);
  (void)_this;
}
void PveDefenderData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PveDefenderData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PveDefenderData::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PveDefenderData& PveDefenderData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PveDefenderData.base);
  return *internal_default_instance();
}


void PveDefenderData::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PveDefenderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defend_team_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PveDefenderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PveDefenderData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Sailor defend_team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_defend_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PveDefenderData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PveDefenderData)
  return false;
#undef DO_
}

void PveDefenderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PveDefenderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // repeated .sg.Sailor defend_team = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->defend_team_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->defend_team(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PveDefenderData)
}

::google::protobuf::uint8* PveDefenderData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PveDefenderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // repeated .sg.Sailor defend_team = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->defend_team_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->defend_team(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PveDefenderData)
  return target;
}

size_t PveDefenderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PveDefenderData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes userid = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }
  // repeated .sg.Sailor defend_team = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->defend_team_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->defend_team(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PveDefenderData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PveDefenderData)
  GOOGLE_DCHECK_NE(&from, this);
  const PveDefenderData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PveDefenderData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PveDefenderData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PveDefenderData)
    MergeFrom(*source);
  }
}

void PveDefenderData::MergeFrom(const PveDefenderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PveDefenderData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defend_team_.MergeFrom(from.defend_team_);
  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void PveDefenderData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PveDefenderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PveDefenderData::CopyFrom(const PveDefenderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PveDefenderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveDefenderData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->defend_team())) return false;
  return true;
}

void PveDefenderData::Swap(PveDefenderData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PveDefenderData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PveDefenderData::UnsafeArenaSwap(PveDefenderData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PveDefenderData::InternalSwap(PveDefenderData* other) {
  using std::swap;
  CastToBase(&defend_team_)->InternalSwap(CastToBase(&other->defend_team_));
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PveDefenderData::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVEBattleService_PVEBattleRequest::InitAsDefaultInstance() {
}
void PVEBattleService_PVEBattleRequest::clear_take_items() {
  take_items_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVEBattleService_PVEBattleRequest::kCmdFieldNumber;
const int PVEBattleService_PVEBattleRequest::kTargetIdFieldNumber;
const int PVEBattleService_PVEBattleRequest::kUsedSailorFieldNumber;
const int PVEBattleService_PVEBattleRequest::kOperationListFieldNumber;
const int PVEBattleService_PVEBattleRequest::kTeamStateFieldNumber;
const int PVEBattleService_PVEBattleRequest::kBattleResultFieldNumber;
const int PVEBattleService_PVEBattleRequest::kDestoryFacilitysFieldNumber;
const int PVEBattleService_PVEBattleRequest::kPathChoiceFieldNumber;
const int PVEBattleService_PVEBattleRequest::kHuntAnimalFieldNumber;
const int PVEBattleService_PVEBattleRequest::kEnemyTypeidFieldNumber;
const int PVEBattleService_PVEBattleRequest::kTreasureIdFieldNumber;
const int PVEBattleService_PVEBattleRequest::kPveModelIdFieldNumber;
const int PVEBattleService_PVEBattleRequest::kNewManualFieldNumber;
const int PVEBattleService_PVEBattleRequest::kDebugTagFieldNumber;
const int PVEBattleService_PVEBattleRequest::kMonstersFieldNumber;
const int PVEBattleService_PVEBattleRequest::kEnemysFieldNumber;
const int PVEBattleService_PVEBattleRequest::kAltarsFieldNumber;
const int PVEBattleService_PVEBattleRequest::kTakeItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVEBattleService_PVEBattleRequest::PVEBattleService_PVEBattleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_PVEBattleService_PVEBattleRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVEBattleService.PVEBattleRequest)
}
PVEBattleService_PVEBattleRequest::PVEBattleService_PVEBattleRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  used_sailor_(arena),
  operation_list_(arena),
  team_state_(arena),
  destory_facilitys_(arena),
  new_manual_(arena),
  monsters_(arena),
  enemys_(arena),
  altars_(arena),
  take_items_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PVEBattleService_PVEBattleRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVEBattleService.PVEBattleRequest)
}
PVEBattleService_PVEBattleRequest::PVEBattleService_PVEBattleRequest(const PVEBattleService_PVEBattleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      used_sailor_(from.used_sailor_),
      operation_list_(from.operation_list_),
      team_state_(from.team_state_),
      destory_facilitys_(from.destory_facilitys_),
      new_manual_(from.new_manual_),
      monsters_(from.monsters_),
      enemys_(from.enemys_),
      altars_(from.altars_),
      take_items_(from.take_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.PVEBattleService.PVEBattleRequest)
}

void PVEBattleService_PVEBattleRequest::SharedCtor() {
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_tag_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(debug_tag_));
  cmd_ = 1;
}

PVEBattleService_PVEBattleRequest::~PVEBattleService_PVEBattleRequest() {
  // @@protoc_insertion_point(destructor:sg.PVEBattleService.PVEBattleRequest)
  SharedDtor();
}

void PVEBattleService_PVEBattleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PVEBattleService_PVEBattleRequest::ArenaDtor(void* object) {
  PVEBattleService_PVEBattleRequest* _this = reinterpret_cast< PVEBattleService_PVEBattleRequest* >(object);
  (void)_this;
}
void PVEBattleService_PVEBattleRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVEBattleService_PVEBattleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVEBattleService_PVEBattleRequest::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVEBattleService_PVEBattleRequest& PVEBattleService_PVEBattleRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PVEBattleService_PVEBattleRequest.base);
  return *internal_default_instance();
}


void PVEBattleService_PVEBattleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVEBattleService.PVEBattleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  used_sailor_.Clear();
  operation_list_.Clear();
  team_state_.Clear();
  destory_facilitys_.Clear();
  new_manual_.Clear();
  monsters_.Clear();
  enemys_.Clear();
  altars_.Clear();
  take_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&target_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_tag_) -
        reinterpret_cast<char*>(&target_id_)) + sizeof(debug_tag_));
  }
  cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVEBattleService_PVEBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVEBattleService.PVEBattleRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.PVEBattleService.PVE_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::PVEBattleService_PVE_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::PVEBattleService_PVE_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 target_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 used_sailor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_used_sailor())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_used_sailor())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.UserDungeonOperation operation_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_operation_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SailorInDungeon team_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 battle_result = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_battle_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 destory_facilitys = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_destory_facilitys())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_destory_facilitys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 path_choice = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_path_choice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &path_choice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hunt_animal = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_hunt_animal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hunt_animal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 enemy_typeid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_enemy_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 treasure_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_treasure_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pve_model_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_pve_model_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pve_model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.FightManual new_manual = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_new_manual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_tag = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_debug_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.MonsterInDungeon monsters = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_monsters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Enemy enemys = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_enemys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.DungeonAltar altars = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_altars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int take_items = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_take_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVEBattleService.PVEBattleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVEBattleService.PVEBattleRequest)
  return false;
#undef DO_
}

void PVEBattleService_PVEBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVEBattleService.PVEBattleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PVEBattleService.PVE_CMD cmd = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint64 target_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_id(), output);
  }

  // repeated int32 used_sailor = 4;
  for (int i = 0, n = this->used_sailor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->used_sailor(i), output);
  }

  // repeated .sg.UserDungeonOperation operation_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operation_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->operation_list(static_cast<int>(i)),
      output);
  }

  // repeated .sg.SailorInDungeon team_state = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->team_state(static_cast<int>(i)),
      output);
  }

  // optional int32 battle_result = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->battle_result(), output);
  }

  // repeated int32 destory_facilitys = 8;
  for (int i = 0, n = this->destory_facilitys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->destory_facilitys(i), output);
  }

  // optional int32 path_choice = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->path_choice(), output);
  }

  // optional int32 hunt_animal = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hunt_animal(), output);
  }

  // optional int32 enemy_typeid = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->enemy_typeid(), output);
  }

  // optional int32 treasure_id = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->treasure_id(), output);
  }

  // optional int32 pve_model_id = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pve_model_id(), output);
  }

  // repeated .sg.FightManual new_manual = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->new_manual_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->new_manual(static_cast<int>(i)),
      output);
  }

  // optional bool debug_tag = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->debug_tag(), output);
  }

  // repeated .sg.MonsterInDungeon monsters = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monsters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->monsters(static_cast<int>(i)),
      output);
  }

  // repeated .sg.Enemy enemys = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->enemys(static_cast<int>(i)),
      output);
  }

  // repeated .sg.DungeonAltar altars = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->altars_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->altars(static_cast<int>(i)),
      output);
  }

  // repeated .sg.pb_pair_int_int take_items = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->take_items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVEBattleService.PVEBattleRequest)
}

::google::protobuf::uint8* PVEBattleService_PVEBattleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVEBattleService.PVEBattleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PVEBattleService.PVE_CMD cmd = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint64 target_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_id(), target);
  }

  // repeated int32 used_sailor = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->used_sailor_, target);

  // repeated .sg.UserDungeonOperation operation_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operation_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->operation_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.SailorInDungeon team_state = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->team_state(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 battle_result = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->battle_result(), target);
  }

  // repeated int32 destory_facilitys = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->destory_facilitys_, target);

  // optional int32 path_choice = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->path_choice(), target);
  }

  // optional int32 hunt_animal = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hunt_animal(), target);
  }

  // optional int32 enemy_typeid = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->enemy_typeid(), target);
  }

  // optional int32 treasure_id = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->treasure_id(), target);
  }

  // optional int32 pve_model_id = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pve_model_id(), target);
  }

  // repeated .sg.FightManual new_manual = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->new_manual_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->new_manual(static_cast<int>(i)), deterministic, target);
  }

  // optional bool debug_tag = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->debug_tag(), target);
  }

  // repeated .sg.MonsterInDungeon monsters = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monsters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->monsters(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.Enemy enemys = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enemys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->enemys(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.DungeonAltar altars = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->altars_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->altars(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.pb_pair_int_int take_items = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->take_items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVEBattleService.PVEBattleRequest)
  return target;
}

size_t PVEBattleService_PVEBattleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVEBattleService.PVEBattleRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.PVEBattleService.PVE_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated int32 used_sailor = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->used_sailor_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->used_sailor_size());
    total_size += data_size;
  }

  // repeated .sg.UserDungeonOperation operation_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->operation_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->operation_list(static_cast<int>(i)));
    }
  }

  // repeated .sg.SailorInDungeon team_state = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->team_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_state(static_cast<int>(i)));
    }
  }

  // repeated int32 destory_facilitys = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->destory_facilitys_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->destory_facilitys_size());
    total_size += data_size;
  }

  // repeated .sg.FightManual new_manual = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->new_manual_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->new_manual(static_cast<int>(i)));
    }
  }

  // repeated .sg.MonsterInDungeon monsters = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->monsters_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->monsters(static_cast<int>(i)));
    }
  }

  // repeated .sg.Enemy enemys = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->enemys_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->enemys(static_cast<int>(i)));
    }
  }

  // repeated .sg.DungeonAltar altars = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->altars_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->altars(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int take_items = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->take_items_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->take_items(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional int32 battle_result = 7;
    if (has_battle_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_result());
    }

    // optional int32 path_choice = 9;
    if (has_path_choice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->path_choice());
    }

    // optional int32 hunt_animal = 10;
    if (has_hunt_animal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hunt_animal());
    }

    // optional int32 enemy_typeid = 11;
    if (has_enemy_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_typeid());
    }

    // optional int32 treasure_id = 12;
    if (has_treasure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_id());
    }

    // optional int32 pve_model_id = 13;
    if (has_pve_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pve_model_id());
    }

    // optional bool debug_tag = 15;
    if (has_debug_tag()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVEBattleService_PVEBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVEBattleService.PVEBattleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PVEBattleService_PVEBattleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVEBattleService_PVEBattleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVEBattleService.PVEBattleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVEBattleService.PVEBattleRequest)
    MergeFrom(*source);
  }
}

void PVEBattleService_PVEBattleRequest::MergeFrom(const PVEBattleService_PVEBattleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVEBattleService.PVEBattleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  used_sailor_.MergeFrom(from.used_sailor_);
  operation_list_.MergeFrom(from.operation_list_);
  team_state_.MergeFrom(from.team_state_);
  destory_facilitys_.MergeFrom(from.destory_facilitys_);
  new_manual_.MergeFrom(from.new_manual_);
  monsters_.MergeFrom(from.monsters_);
  enemys_.MergeFrom(from.enemys_);
  altars_.MergeFrom(from.altars_);
  take_items_.MergeFrom(from.take_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      target_id_ = from.target_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      battle_result_ = from.battle_result_;
    }
    if (cached_has_bits & 0x00000004u) {
      path_choice_ = from.path_choice_;
    }
    if (cached_has_bits & 0x00000008u) {
      hunt_animal_ = from.hunt_animal_;
    }
    if (cached_has_bits & 0x00000010u) {
      enemy_typeid_ = from.enemy_typeid_;
    }
    if (cached_has_bits & 0x00000020u) {
      treasure_id_ = from.treasure_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      pve_model_id_ = from.pve_model_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      debug_tag_ = from.debug_tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_cmd(from.cmd());
  }
}

void PVEBattleService_PVEBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVEBattleService.PVEBattleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVEBattleService_PVEBattleRequest::CopyFrom(const PVEBattleService_PVEBattleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVEBattleService.PVEBattleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVEBattleService_PVEBattleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->operation_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->team_state())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->new_manual())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->monsters())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->enemys())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->altars())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->take_items())) return false;
  return true;
}

void PVEBattleService_PVEBattleRequest::Swap(PVEBattleService_PVEBattleRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVEBattleService_PVEBattleRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVEBattleService_PVEBattleRequest::UnsafeArenaSwap(PVEBattleService_PVEBattleRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVEBattleService_PVEBattleRequest::InternalSwap(PVEBattleService_PVEBattleRequest* other) {
  using std::swap;
  used_sailor_.InternalSwap(&other->used_sailor_);
  CastToBase(&operation_list_)->InternalSwap(CastToBase(&other->operation_list_));
  CastToBase(&team_state_)->InternalSwap(CastToBase(&other->team_state_));
  destory_facilitys_.InternalSwap(&other->destory_facilitys_);
  CastToBase(&new_manual_)->InternalSwap(CastToBase(&other->new_manual_));
  CastToBase(&monsters_)->InternalSwap(CastToBase(&other->monsters_));
  CastToBase(&enemys_)->InternalSwap(CastToBase(&other->enemys_));
  CastToBase(&altars_)->InternalSwap(CastToBase(&other->altars_));
  CastToBase(&take_items_)->InternalSwap(CastToBase(&other->take_items_));
  swap(target_id_, other->target_id_);
  swap(battle_result_, other->battle_result_);
  swap(path_choice_, other->path_choice_);
  swap(hunt_animal_, other->hunt_animal_);
  swap(enemy_typeid_, other->enemy_typeid_);
  swap(treasure_id_, other->treasure_id_);
  swap(pve_model_id_, other->pve_model_id_);
  swap(debug_tag_, other->debug_tag_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVEBattleService_PVEBattleRequest::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVEBattleService_PVEBattleResponse::InitAsDefaultInstance() {
  ::sg::_PVEBattleService_PVEBattleResponse_default_instance_._instance.get_mutable()->content_ = const_cast< ::sg::DungeonContent*>(
      ::sg::DungeonContent::internal_default_instance());
  ::sg::_PVEBattleService_PVEBattleResponse_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::sg::UserDungeonInformation*>(
      ::sg::UserDungeonInformation::internal_default_instance());
  ::sg::_PVEBattleService_PVEBattleResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
  ::sg::_PVEBattleService_PVEBattleResponse_default_instance_._instance.get_mutable()->lose_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
  ::sg::_PVEBattleService_PVEBattleResponse_default_instance_._instance.get_mutable()->finish_reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
  ::sg::_PVEBattleService_PVEBattleResponse_default_instance_._instance.get_mutable()->user_team_ = const_cast< ::sg::UserTeamData*>(
      ::sg::UserTeamData::internal_default_instance());
}
void PVEBattleService_PVEBattleResponse::unsafe_arena_set_allocated_content(
    ::sg::DungeonContent* content) {
  if (GetArenaNoVirtual() == NULL) {
    delete content_;
  }
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVEBattleService.PVEBattleResponse.content)
}
void PVEBattleService_PVEBattleResponse::unsafe_arena_set_allocated_user_info(
    ::sg::UserDungeonInformation* user_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_info_;
  }
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVEBattleService.PVEBattleResponse.user_info)
}
void PVEBattleService_PVEBattleResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVEBattleService.PVEBattleResponse.reward)
}
void PVEBattleService_PVEBattleResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
void PVEBattleService_PVEBattleResponse::unsafe_arena_set_allocated_lose(
    ::sg::Reward* lose) {
  if (GetArenaNoVirtual() == NULL) {
    delete lose_;
  }
  lose_ = lose;
  if (lose) {
    set_has_lose();
  } else {
    clear_has_lose();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVEBattleService.PVEBattleResponse.lose)
}
void PVEBattleService_PVEBattleResponse::clear_lose() {
  if (lose_ != NULL) lose_->Clear();
  clear_has_lose();
}
void PVEBattleService_PVEBattleResponse::unsafe_arena_set_allocated_finish_reward(
    ::sg::Reward* finish_reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete finish_reward_;
  }
  finish_reward_ = finish_reward;
  if (finish_reward) {
    set_has_finish_reward();
  } else {
    clear_has_finish_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVEBattleService.PVEBattleResponse.finish_reward)
}
void PVEBattleService_PVEBattleResponse::clear_finish_reward() {
  if (finish_reward_ != NULL) finish_reward_->Clear();
  clear_has_finish_reward();
}
void PVEBattleService_PVEBattleResponse::unsafe_arena_set_allocated_user_team(
    ::sg::UserTeamData* user_team) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_team_;
  }
  user_team_ = user_team;
  if (user_team) {
    set_has_user_team();
  } else {
    clear_has_user_team();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVEBattleService.PVEBattleResponse.user_team)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVEBattleService_PVEBattleResponse::kResultFieldNumber;
const int PVEBattleService_PVEBattleResponse::kContentFieldNumber;
const int PVEBattleService_PVEBattleResponse::kCostVialityFieldNumber;
const int PVEBattleService_PVEBattleResponse::kUserInfoFieldNumber;
const int PVEBattleService_PVEBattleResponse::kRewardFieldNumber;
const int PVEBattleService_PVEBattleResponse::kDungeonIdFieldNumber;
const int PVEBattleService_PVEBattleResponse::kPveMapTypeFieldNumber;
const int PVEBattleService_PVEBattleResponse::kMapDataFieldNumber;
const int PVEBattleService_PVEBattleResponse::kFoundManualFieldNumber;
const int PVEBattleService_PVEBattleResponse::kSavedNpcFieldNumber;
const int PVEBattleService_PVEBattleResponse::kSavedCustomerFieldNumber;
const int PVEBattleService_PVEBattleResponse::kLoseFieldNumber;
const int PVEBattleService_PVEBattleResponse::kFinishRewardFieldNumber;
const int PVEBattleService_PVEBattleResponse::kUserTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVEBattleService_PVEBattleResponse::PVEBattleService_PVEBattleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_PVEBattleService_PVEBattleResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVEBattleService.PVEBattleResponse)
}
PVEBattleService_PVEBattleResponse::PVEBattleService_PVEBattleResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  found_manual_(arena),
  saved_npc_(arena),
  saved_customer_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PVEBattleService_PVEBattleResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVEBattleService.PVEBattleResponse)
}
PVEBattleService_PVEBattleResponse::PVEBattleService_PVEBattleResponse(const PVEBattleService_PVEBattleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      found_manual_(from.found_manual_),
      saved_npc_(from.saved_npc_),
      saved_customer_(from.saved_customer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_data()) {
    map_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data(),
      GetArenaNoVirtual());
  }
  if (from.has_content()) {
    content_ = new ::sg::DungeonContent(*from.content_);
  } else {
    content_ = NULL;
  }
  if (from.has_user_info()) {
    user_info_ = new ::sg::UserDungeonInformation(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  if (from.has_lose()) {
    lose_ = new ::sg::Reward(*from.lose_);
  } else {
    lose_ = NULL;
  }
  if (from.has_finish_reward()) {
    finish_reward_ = new ::sg::Reward(*from.finish_reward_);
  } else {
    finish_reward_ = NULL;
  }
  if (from.has_user_team()) {
    user_team_ = new ::sg::UserTeamData(*from.user_team_);
  } else {
    user_team_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&pve_map_type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(pve_map_type_));
  // @@protoc_insertion_point(copy_constructor:sg.PVEBattleService.PVEBattleResponse)
}

void PVEBattleService_PVEBattleResponse::SharedCtor() {
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pve_map_type_) -
      reinterpret_cast<char*>(&content_)) + sizeof(pve_map_type_));
}

PVEBattleService_PVEBattleResponse::~PVEBattleService_PVEBattleResponse() {
  // @@protoc_insertion_point(destructor:sg.PVEBattleService.PVEBattleResponse)
  SharedDtor();
}

void PVEBattleService_PVEBattleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_;
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete reward_;
  if (this != internal_default_instance()) delete lose_;
  if (this != internal_default_instance()) delete finish_reward_;
  if (this != internal_default_instance()) delete user_team_;
}

void PVEBattleService_PVEBattleResponse::ArenaDtor(void* object) {
  PVEBattleService_PVEBattleResponse* _this = reinterpret_cast< PVEBattleService_PVEBattleResponse* >(object);
  (void)_this;
}
void PVEBattleService_PVEBattleResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVEBattleService_PVEBattleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVEBattleService_PVEBattleResponse::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVEBattleService_PVEBattleResponse& PVEBattleService_PVEBattleResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PVEBattleService_PVEBattleResponse.base);
  return *internal_default_instance();
}


void PVEBattleService_PVEBattleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVEBattleService.PVEBattleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  found_manual_.Clear();
  saved_npc_.Clear();
  saved_customer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      map_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(content_ != NULL);
      content_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(user_info_ != NULL);
      user_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reward_ != NULL);
      reward_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(lose_ != NULL);
      lose_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(finish_reward_ != NULL);
      finish_reward_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(user_team_ != NULL);
      user_team_->Clear();
    }
  }
  result_ = 0;
  if (cached_has_bits & 1792u) {
    ::memset(&cost_viality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pve_map_type_) -
        reinterpret_cast<char*>(&cost_viality_)) + sizeof(pve_map_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVEBattleService_PVEBattleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVEBattleService.PVEBattleResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.DungeonContent content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cost_viality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cost_viality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_viality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserDungeonInformation user_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dungeon_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_dungeon_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pve_map_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_pve_map_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pve_map_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes map_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.FightManual found_manual = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_found_manual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 saved_npc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80u, input, this->mutable_saved_npc())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_saved_npc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 saved_customer = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 88u, input, this->mutable_saved_customer())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_saved_customer())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward lose = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward finish_reward = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_finish_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserTeamData user_team = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVEBattleService.PVEBattleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVEBattleService.PVEBattleResponse)
  return false;
#undef DO_
}

void PVEBattleService_PVEBattleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVEBattleService.PVEBattleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sg.DungeonContent content = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_content(), output);
  }

  // optional int32 cost_viality = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost_viality(), output);
  }

  // optional .sg.UserDungeonInformation user_info = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_user_info(), output);
  }

  // optional .sg.Reward reward = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_reward(), output);
  }

  // optional int32 dungeon_id = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dungeon_id(), output);
  }

  // optional int32 pve_map_type = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pve_map_type(), output);
  }

  // optional bytes map_data = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->map_data(), output);
  }

  // repeated .sg.FightManual found_manual = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->found_manual_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->found_manual(static_cast<int>(i)),
      output);
  }

  // repeated int64 saved_npc = 10;
  for (int i = 0, n = this->saved_npc_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->saved_npc(i), output);
  }

  // repeated int64 saved_customer = 11;
  for (int i = 0, n = this->saved_customer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      11, this->saved_customer(i), output);
  }

  // optional .sg.Reward lose = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_lose(), output);
  }

  // optional .sg.Reward finish_reward = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_finish_reward(), output);
  }

  // optional .sg.UserTeamData user_team = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_user_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVEBattleService.PVEBattleResponse)
}

::google::protobuf::uint8* PVEBattleService_PVEBattleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVEBattleService.PVEBattleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sg.DungeonContent content = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_content(), deterministic, target);
  }

  // optional int32 cost_viality = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost_viality(), target);
  }

  // optional .sg.UserDungeonInformation user_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_user_info(), deterministic, target);
  }

  // optional .sg.Reward reward = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_reward(), deterministic, target);
  }

  // optional int32 dungeon_id = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dungeon_id(), target);
  }

  // optional int32 pve_map_type = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pve_map_type(), target);
  }

  // optional bytes map_data = 8;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->map_data(), target);
  }

  // repeated .sg.FightManual found_manual = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->found_manual_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->found_manual(static_cast<int>(i)), deterministic, target);
  }

  // repeated int64 saved_npc = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(10, this->saved_npc_, target);

  // repeated int64 saved_customer = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(11, this->saved_customer_, target);

  // optional .sg.Reward lose = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_lose(), deterministic, target);
  }

  // optional .sg.Reward finish_reward = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_finish_reward(), deterministic, target);
  }

  // optional .sg.UserTeamData user_team = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_user_team(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVEBattleService.PVEBattleResponse)
  return target;
}

size_t PVEBattleService_PVEBattleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVEBattleService.PVEBattleResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.FightManual found_manual = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->found_manual_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->found_manual(static_cast<int>(i)));
    }
  }

  // repeated int64 saved_npc = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->saved_npc_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->saved_npc_size());
    total_size += data_size;
  }

  // repeated int64 saved_customer = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->saved_customer_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->saved_customer_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes map_data = 8;
    if (has_map_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_data());
    }

    // optional .sg.DungeonContent content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_);
    }

    // optional .sg.UserDungeonInformation user_info = 4;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_info_);
    }

    // optional .sg.Reward reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reward_);
    }

    // optional .sg.Reward lose = 12;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lose_);
    }

    // optional .sg.Reward finish_reward = 13;
    if (has_finish_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *finish_reward_);
    }

    // optional .sg.UserTeamData user_team = 14;
    if (has_user_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_team_);
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 cost_viality = 3;
    if (has_cost_viality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_viality());
    }

    // optional int32 dungeon_id = 6;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

    // optional int32 pve_map_type = 7;
    if (has_pve_map_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pve_map_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVEBattleService_PVEBattleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVEBattleService.PVEBattleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PVEBattleService_PVEBattleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVEBattleService_PVEBattleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVEBattleService.PVEBattleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVEBattleService.PVEBattleResponse)
    MergeFrom(*source);
  }
}

void PVEBattleService_PVEBattleResponse::MergeFrom(const PVEBattleService_PVEBattleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVEBattleService.PVEBattleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  found_manual_.MergeFrom(from.found_manual_);
  saved_npc_.MergeFrom(from.saved_npc_);
  saved_customer_.MergeFrom(from.saved_customer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_map_data(from.map_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_content()->::sg::DungeonContent::MergeFrom(from.content());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_user_info()->::sg::UserDungeonInformation::MergeFrom(from.user_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_lose()->::sg::Reward::MergeFrom(from.lose());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_finish_reward()->::sg::Reward::MergeFrom(from.finish_reward());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_user_team()->::sg::UserTeamData::MergeFrom(from.user_team());
    }
    if (cached_has_bits & 0x00000080u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      cost_viality_ = from.cost_viality_;
    }
    if (cached_has_bits & 0x00000200u) {
      dungeon_id_ = from.dungeon_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      pve_map_type_ = from.pve_map_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVEBattleService_PVEBattleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVEBattleService.PVEBattleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVEBattleService_PVEBattleResponse::CopyFrom(const PVEBattleService_PVEBattleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVEBattleService.PVEBattleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVEBattleService_PVEBattleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->found_manual())) return false;
  if (has_content()) {
    if (!this->content_->IsInitialized()) return false;
  }
  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  if (has_lose()) {
    if (!this->lose_->IsInitialized()) return false;
  }
  if (has_finish_reward()) {
    if (!this->finish_reward_->IsInitialized()) return false;
  }
  if (has_user_team()) {
    if (!this->user_team_->IsInitialized()) return false;
  }
  return true;
}

void PVEBattleService_PVEBattleResponse::Swap(PVEBattleService_PVEBattleResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVEBattleService_PVEBattleResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVEBattleService_PVEBattleResponse::UnsafeArenaSwap(PVEBattleService_PVEBattleResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVEBattleService_PVEBattleResponse::InternalSwap(PVEBattleService_PVEBattleResponse* other) {
  using std::swap;
  CastToBase(&found_manual_)->InternalSwap(CastToBase(&other->found_manual_));
  saved_npc_.InternalSwap(&other->saved_npc_);
  saved_customer_.InternalSwap(&other->saved_customer_);
  map_data_.Swap(&other->map_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_, other->content_);
  swap(user_info_, other->user_info_);
  swap(reward_, other->reward_);
  swap(lose_, other->lose_);
  swap(finish_reward_, other->finish_reward_);
  swap(user_team_, other->user_team_);
  swap(result_, other->result_);
  swap(cost_viality_, other->cost_viality_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(pve_map_type_, other->pve_map_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVEBattleService_PVEBattleResponse::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVEBattleService::InitAsDefaultInstance() {
  ::sg::_PVEBattleService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::PVEBattleService_PVEBattleRequest*>(
      ::sg::PVEBattleService_PVEBattleRequest::internal_default_instance());
  ::sg::_PVEBattleService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::PVEBattleService_PVEBattleResponse*>(
      ::sg::PVEBattleService_PVEBattleResponse::internal_default_instance());
}
void PVEBattleService::unsafe_arena_set_allocated_req(
    ::sg::PVEBattleService_PVEBattleRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVEBattleService.req)
}
void PVEBattleService::unsafe_arena_set_allocated_resp(
    ::sg::PVEBattleService_PVEBattleResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVEBattleService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVEBattleService::kReqFieldNumber;
const int PVEBattleService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVEBattleService::PVEBattleService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_PVEBattleService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVEBattleService)
}
PVEBattleService::PVEBattleService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PVEBattleService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVEBattleService)
}
PVEBattleService::PVEBattleService(const PVEBattleService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::PVEBattleService_PVEBattleRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::PVEBattleService_PVEBattleResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.PVEBattleService)
}

void PVEBattleService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

PVEBattleService::~PVEBattleService() {
  // @@protoc_insertion_point(destructor:sg.PVEBattleService)
  SharedDtor();
}

void PVEBattleService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void PVEBattleService::ArenaDtor(void* object) {
  PVEBattleService* _this = reinterpret_cast< PVEBattleService* >(object);
  (void)_this;
}
void PVEBattleService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVEBattleService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVEBattleService::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVEBattleService& PVEBattleService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_PVEBattleService.base);
  return *internal_default_instance();
}


void PVEBattleService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVEBattleService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVEBattleService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVEBattleService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.PVEBattleService.PVEBattleRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PVEBattleService.PVEBattleResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVEBattleService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVEBattleService)
  return false;
#undef DO_
}

void PVEBattleService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVEBattleService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.PVEBattleService.PVEBattleRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.PVEBattleService.PVEBattleResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVEBattleService)
}

::google::protobuf::uint8* PVEBattleService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVEBattleService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.PVEBattleService.PVEBattleRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.PVEBattleService.PVEBattleResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVEBattleService)
  return target;
}

size_t PVEBattleService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVEBattleService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.PVEBattleService.PVEBattleRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.PVEBattleService.PVEBattleResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVEBattleService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVEBattleService)
  GOOGLE_DCHECK_NE(&from, this);
  const PVEBattleService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVEBattleService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVEBattleService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVEBattleService)
    MergeFrom(*source);
  }
}

void PVEBattleService::MergeFrom(const PVEBattleService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVEBattleService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::PVEBattleService_PVEBattleRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::PVEBattleService_PVEBattleResponse::MergeFrom(from.resp());
    }
  }
}

void PVEBattleService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVEBattleService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVEBattleService::CopyFrom(const PVEBattleService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVEBattleService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVEBattleService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void PVEBattleService::Swap(PVEBattleService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVEBattleService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVEBattleService::UnsafeArenaSwap(PVEBattleService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVEBattleService::InternalSwap(PVEBattleService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVEBattleService::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DungeonInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonInfo::kIdFieldNumber;
const int DungeonInfo::kStateFieldNumber;
const int DungeonInfo::kClearTimesFieldNumber;
const int DungeonInfo::kMaxLayerFieldNumber;
const int DungeonInfo::kRewardReceivedFieldNumber;
const int DungeonInfo::kDailyTimesFieldNumber;
const int DungeonInfo::kOpenChestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonInfo::DungeonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_DungeonInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.DungeonInfo)
}
DungeonInfo::DungeonInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reward_received_(arena),
  open_chest_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonInfo.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.DungeonInfo)
}
DungeonInfo::DungeonInfo(const DungeonInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      reward_received_(from.reward_received_),
      open_chest_(from.open_chest_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&daily_times_) -
    reinterpret_cast<char*>(&id_)) + sizeof(daily_times_));
  // @@protoc_insertion_point(copy_constructor:sg.DungeonInfo)
}

void DungeonInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&daily_times_) -
      reinterpret_cast<char*>(&id_)) + sizeof(daily_times_));
}

DungeonInfo::~DungeonInfo() {
  // @@protoc_insertion_point(destructor:sg.DungeonInfo)
  SharedDtor();
}

void DungeonInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DungeonInfo::ArenaDtor(void* object) {
  DungeonInfo* _this = reinterpret_cast< DungeonInfo* >(object);
  (void)_this;
}
void DungeonInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DungeonInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DungeonInfo::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonInfo& DungeonInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_DungeonInfo.base);
  return *internal_default_instance();
}


void DungeonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.DungeonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_received_.Clear();
  open_chest_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&daily_times_) -
        reinterpret_cast<char*>(&id_)) + sizeof(daily_times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.DungeonInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clear_times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clear_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_layer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 reward_received = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_reward_received())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward_received())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 daily_times = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_daily_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 open_chest = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_open_chest())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_chest())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.DungeonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.DungeonInfo)
  return false;
#undef DO_
}

void DungeonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.DungeonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 clear_times = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clear_times(), output);
  }

  // optional int32 max_layer = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_layer(), output);
  }

  // repeated int32 reward_received = 5;
  for (int i = 0, n = this->reward_received_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->reward_received(i), output);
  }

  // optional int32 daily_times = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->daily_times(), output);
  }

  // repeated int32 open_chest = 7;
  for (int i = 0, n = this->open_chest_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->open_chest(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.DungeonInfo)
}

::google::protobuf::uint8* DungeonInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.DungeonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 clear_times = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clear_times(), target);
  }

  // optional int32 max_layer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_layer(), target);
  }

  // repeated int32 reward_received = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->reward_received_, target);

  // optional int32 daily_times = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->daily_times(), target);
  }

  // repeated int32 open_chest = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(7, this->open_chest_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.DungeonInfo)
  return target;
}

size_t DungeonInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.DungeonInfo)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t DungeonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.DungeonInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 reward_received = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->reward_received_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->reward_received_size());
    total_size += data_size;
  }

  // repeated int32 open_chest = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->open_chest_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->open_chest_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional int32 clear_times = 3;
    if (has_clear_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_times());
    }

    // optional int32 max_layer = 4;
    if (has_max_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_layer());
    }

    // optional int32 daily_times = 6;
    if (has_daily_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_times());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.DungeonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.DungeonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.DungeonInfo)
    MergeFrom(*source);
  }
}

void DungeonInfo::MergeFrom(const DungeonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.DungeonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_received_.MergeFrom(from.reward_received_);
  open_chest_.MergeFrom(from.open_chest_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_times_ = from.clear_times_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_layer_ = from.max_layer_;
    }
    if (cached_has_bits & 0x00000010u) {
      daily_times_ = from.daily_times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.DungeonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonInfo::CopyFrom(const DungeonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.DungeonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DungeonInfo::Swap(DungeonInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DungeonInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DungeonInfo::UnsafeArenaSwap(DungeonInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DungeonInfo::InternalSwap(DungeonInfo* other) {
  using std::swap;
  reward_received_.InternalSwap(&other->reward_received_);
  open_chest_.InternalSwap(&other->open_chest_);
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(clear_times_, other->clear_times_);
  swap(max_layer_, other->max_layer_);
  swap(daily_times_, other->daily_times_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DungeonInfo::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDungeonService_UserDungeonRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDungeonService_UserDungeonRequest::kCmdFieldNumber;
const int UserDungeonService_UserDungeonRequest::kDungeonIdFieldNumber;
const int UserDungeonService_UserDungeonRequest::kEventIdFieldNumber;
const int UserDungeonService_UserDungeonRequest::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDungeonService_UserDungeonRequest::UserDungeonService_UserDungeonRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_UserDungeonService_UserDungeonRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserDungeonService.UserDungeonRequest)
}
UserDungeonService_UserDungeonRequest::UserDungeonService_UserDungeonRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonService_UserDungeonRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserDungeonService.UserDungeonRequest)
}
UserDungeonService_UserDungeonRequest::UserDungeonService_UserDungeonRequest(const UserDungeonService_UserDungeonRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.UserDungeonService.UserDungeonRequest)
}

void UserDungeonService_UserDungeonRequest::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(layer_));
  cmd_ = 1;
}

UserDungeonService_UserDungeonRequest::~UserDungeonService_UserDungeonRequest() {
  // @@protoc_insertion_point(destructor:sg.UserDungeonService.UserDungeonRequest)
  SharedDtor();
}

void UserDungeonService_UserDungeonRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserDungeonService_UserDungeonRequest::ArenaDtor(void* object) {
  UserDungeonService_UserDungeonRequest* _this = reinterpret_cast< UserDungeonService_UserDungeonRequest* >(object);
  (void)_this;
}
void UserDungeonService_UserDungeonRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserDungeonService_UserDungeonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDungeonService_UserDungeonRequest::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDungeonService_UserDungeonRequest& UserDungeonService_UserDungeonRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonService_UserDungeonRequest.base);
  return *internal_default_instance();
}


void UserDungeonService_UserDungeonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserDungeonService.UserDungeonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&dungeon_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&layer_) -
        reinterpret_cast<char*>(&dungeon_id_)) + sizeof(layer_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDungeonService_UserDungeonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserDungeonService.UserDungeonRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserDungeonService.DUNGEON_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserDungeonService_DUNGEON_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserDungeonService_DUNGEON_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dungeon_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dungeon_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 layer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserDungeonService.UserDungeonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserDungeonService.UserDungeonRequest)
  return false;
#undef DO_
}

void UserDungeonService_UserDungeonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserDungeonService.UserDungeonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserDungeonService.DUNGEON_CMD cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 dungeon_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dungeon_id(), output);
  }

  // optional int32 event_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_id(), output);
  }

  // optional int32 layer = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserDungeonService.UserDungeonRequest)
}

::google::protobuf::uint8* UserDungeonService_UserDungeonRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserDungeonService.UserDungeonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserDungeonService.DUNGEON_CMD cmd = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 dungeon_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dungeon_id(), target);
  }

  // optional int32 event_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_id(), target);
  }

  // optional int32 layer = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserDungeonService.UserDungeonRequest)
  return target;
}

size_t UserDungeonService_UserDungeonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserDungeonService.UserDungeonRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserDungeonService.DUNGEON_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 dungeon_id = 2;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

    // optional int32 event_id = 3;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDungeonService_UserDungeonRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserDungeonService.UserDungeonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDungeonService_UserDungeonRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDungeonService_UserDungeonRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserDungeonService.UserDungeonRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserDungeonService.UserDungeonRequest)
    MergeFrom(*source);
  }
}

void UserDungeonService_UserDungeonRequest::MergeFrom(const UserDungeonService_UserDungeonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserDungeonService.UserDungeonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      dungeon_id_ = from.dungeon_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      layer_ = from.layer_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDungeonService_UserDungeonRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserDungeonService.UserDungeonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDungeonService_UserDungeonRequest::CopyFrom(const UserDungeonService_UserDungeonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserDungeonService.UserDungeonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDungeonService_UserDungeonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void UserDungeonService_UserDungeonRequest::Swap(UserDungeonService_UserDungeonRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserDungeonService_UserDungeonRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserDungeonService_UserDungeonRequest::UnsafeArenaSwap(UserDungeonService_UserDungeonRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserDungeonService_UserDungeonRequest::InternalSwap(UserDungeonService_UserDungeonRequest* other) {
  using std::swap;
  swap(dungeon_id_, other->dungeon_id_);
  swap(event_id_, other->event_id_);
  swap(layer_, other->layer_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDungeonService_UserDungeonRequest::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDungeonService_UserDungeonResponse::InitAsDefaultInstance() {
  ::sg::_UserDungeonService_UserDungeonResponse_default_instance_._instance.get_mutable()->reward_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void UserDungeonService_UserDungeonResponse::unsafe_arena_set_allocated_reward(
    ::sg::Reward* reward) {
  if (GetArenaNoVirtual() == NULL) {
    delete reward_;
  }
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserDungeonService.UserDungeonResponse.reward)
}
void UserDungeonService_UserDungeonResponse::clear_reward() {
  if (reward_ != NULL) reward_->Clear();
  clear_has_reward();
}
void UserDungeonService_UserDungeonResponse::clear_saved_customer() {
  saved_customer_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDungeonService_UserDungeonResponse::kResultFieldNumber;
const int UserDungeonService_UserDungeonResponse::kEventsFieldNumber;
const int UserDungeonService_UserDungeonResponse::kDungeonsFieldNumber;
const int UserDungeonService_UserDungeonResponse::kRewardFieldNumber;
const int UserDungeonService_UserDungeonResponse::kCostVialityFieldNumber;
const int UserDungeonService_UserDungeonResponse::kSavedCustomerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDungeonService_UserDungeonResponse::UserDungeonService_UserDungeonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_UserDungeonService_UserDungeonResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserDungeonService.UserDungeonResponse)
}
UserDungeonService_UserDungeonResponse::UserDungeonService_UserDungeonResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  events_(arena),
  dungeons_(arena),
  saved_customer_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonService_UserDungeonResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserDungeonService.UserDungeonResponse)
}
UserDungeonService_UserDungeonResponse::UserDungeonService_UserDungeonResponse(const UserDungeonService_UserDungeonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      events_(from.events_),
      dungeons_(from.dungeons_),
      saved_customer_(from.saved_customer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reward()) {
    reward_ = new ::sg::Reward(*from.reward_);
  } else {
    reward_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_viality_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cost_viality_));
  // @@protoc_insertion_point(copy_constructor:sg.UserDungeonService.UserDungeonResponse)
}

void UserDungeonService_UserDungeonResponse::SharedCtor() {
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_viality_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(cost_viality_));
}

UserDungeonService_UserDungeonResponse::~UserDungeonService_UserDungeonResponse() {
  // @@protoc_insertion_point(destructor:sg.UserDungeonService.UserDungeonResponse)
  SharedDtor();
}

void UserDungeonService_UserDungeonResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete reward_;
}

void UserDungeonService_UserDungeonResponse::ArenaDtor(void* object) {
  UserDungeonService_UserDungeonResponse* _this = reinterpret_cast< UserDungeonService_UserDungeonResponse* >(object);
  (void)_this;
}
void UserDungeonService_UserDungeonResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserDungeonService_UserDungeonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDungeonService_UserDungeonResponse::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDungeonService_UserDungeonResponse& UserDungeonService_UserDungeonResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonService_UserDungeonResponse.base);
  return *internal_default_instance();
}


void UserDungeonService_UserDungeonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserDungeonService.UserDungeonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  dungeons_.Clear();
  saved_customer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reward_ != NULL);
    reward_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cost_viality_) -
        reinterpret_cast<char*>(&result_)) + sizeof(cost_viality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDungeonService_UserDungeonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserDungeonService.UserDungeonResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.DungeonEvent events = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.DungeonInfo dungeons = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dungeons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward reward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cost_viality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cost_viality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_viality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.pb_pair_int_int saved_customer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_saved_customer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserDungeonService.UserDungeonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserDungeonService.UserDungeonResponse)
  return false;
#undef DO_
}

void UserDungeonService_UserDungeonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserDungeonService.UserDungeonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.DungeonEvent events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->events(static_cast<int>(i)),
      output);
  }

  // repeated .sg.DungeonInfo dungeons = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->dungeons(static_cast<int>(i)),
      output);
  }

  // optional .sg.Reward reward = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_reward(), output);
  }

  // optional int32 cost_viality = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cost_viality(), output);
  }

  // repeated .sg.pb_pair_int_int saved_customer = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->saved_customer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->saved_customer(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserDungeonService.UserDungeonResponse)
}

::google::protobuf::uint8* UserDungeonService_UserDungeonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserDungeonService.UserDungeonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.DungeonEvent events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->events(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sg.DungeonInfo dungeons = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->dungeons(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.Reward reward = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_reward(), deterministic, target);
  }

  // optional int32 cost_viality = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cost_viality(), target);
  }

  // repeated .sg.pb_pair_int_int saved_customer = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->saved_customer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->saved_customer(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserDungeonService.UserDungeonResponse)
  return target;
}

size_t UserDungeonService_UserDungeonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserDungeonService.UserDungeonResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.DungeonEvent events = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // repeated .sg.DungeonInfo dungeons = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dungeons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dungeons(static_cast<int>(i)));
    }
  }

  // repeated .sg.pb_pair_int_int saved_customer = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->saved_customer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->saved_customer(static_cast<int>(i)));
    }
  }

  // optional .sg.Reward reward = 4;
  if (has_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // optional int32 cost_viality = 5;
  if (has_cost_viality()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost_viality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDungeonService_UserDungeonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserDungeonService.UserDungeonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDungeonService_UserDungeonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDungeonService_UserDungeonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserDungeonService.UserDungeonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserDungeonService.UserDungeonResponse)
    MergeFrom(*source);
  }
}

void UserDungeonService_UserDungeonResponse::MergeFrom(const UserDungeonService_UserDungeonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserDungeonService.UserDungeonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  dungeons_.MergeFrom(from.dungeons_);
  saved_customer_.MergeFrom(from.saved_customer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reward()->::sg::Reward::MergeFrom(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      cost_viality_ = from.cost_viality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDungeonService_UserDungeonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserDungeonService.UserDungeonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDungeonService_UserDungeonResponse::CopyFrom(const UserDungeonService_UserDungeonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserDungeonService.UserDungeonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDungeonService_UserDungeonResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dungeons())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->saved_customer())) return false;
  if (has_reward()) {
    if (!this->reward_->IsInitialized()) return false;
  }
  return true;
}

void UserDungeonService_UserDungeonResponse::Swap(UserDungeonService_UserDungeonResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserDungeonService_UserDungeonResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserDungeonService_UserDungeonResponse::UnsafeArenaSwap(UserDungeonService_UserDungeonResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserDungeonService_UserDungeonResponse::InternalSwap(UserDungeonService_UserDungeonResponse* other) {
  using std::swap;
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  CastToBase(&dungeons_)->InternalSwap(CastToBase(&other->dungeons_));
  CastToBase(&saved_customer_)->InternalSwap(CastToBase(&other->saved_customer_));
  swap(reward_, other->reward_);
  swap(result_, other->result_);
  swap(cost_viality_, other->cost_viality_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDungeonService_UserDungeonResponse::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDungeonService::InitAsDefaultInstance() {
  ::sg::_UserDungeonService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserDungeonService_UserDungeonRequest*>(
      ::sg::UserDungeonService_UserDungeonRequest::internal_default_instance());
  ::sg::_UserDungeonService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserDungeonService_UserDungeonResponse*>(
      ::sg::UserDungeonService_UserDungeonResponse::internal_default_instance());
}
void UserDungeonService::unsafe_arena_set_allocated_req(
    ::sg::UserDungeonService_UserDungeonRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserDungeonService.req)
}
void UserDungeonService::unsafe_arena_set_allocated_resp(
    ::sg::UserDungeonService_UserDungeonResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserDungeonService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDungeonService::kReqFieldNumber;
const int UserDungeonService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDungeonService::UserDungeonService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVE_2eproto::scc_info_UserDungeonService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserDungeonService)
}
UserDungeonService::UserDungeonService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserDungeonService)
}
UserDungeonService::UserDungeonService(const UserDungeonService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserDungeonService_UserDungeonRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserDungeonService_UserDungeonResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserDungeonService)
}

void UserDungeonService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserDungeonService::~UserDungeonService() {
  // @@protoc_insertion_point(destructor:sg.UserDungeonService)
  SharedDtor();
}

void UserDungeonService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserDungeonService::ArenaDtor(void* object) {
  UserDungeonService* _this = reinterpret_cast< UserDungeonService* >(object);
  (void)_this;
}
void UserDungeonService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserDungeonService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDungeonService::descriptor() {
  ::protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDungeonService& UserDungeonService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVE_2eproto::scc_info_UserDungeonService.base);
  return *internal_default_instance();
}


void UserDungeonService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserDungeonService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDungeonService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserDungeonService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserDungeonService.UserDungeonRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserDungeonService.UserDungeonResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserDungeonService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserDungeonService)
  return false;
#undef DO_
}

void UserDungeonService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserDungeonService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserDungeonService.UserDungeonRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserDungeonService.UserDungeonResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserDungeonService)
}

::google::protobuf::uint8* UserDungeonService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserDungeonService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserDungeonService.UserDungeonRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserDungeonService.UserDungeonResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserDungeonService)
  return target;
}

size_t UserDungeonService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserDungeonService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserDungeonService.UserDungeonRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserDungeonService.UserDungeonResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDungeonService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserDungeonService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDungeonService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDungeonService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserDungeonService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserDungeonService)
    MergeFrom(*source);
  }
}

void UserDungeonService::MergeFrom(const UserDungeonService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserDungeonService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserDungeonService_UserDungeonRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserDungeonService_UserDungeonResponse::MergeFrom(from.resp());
    }
  }
}

void UserDungeonService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserDungeonService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDungeonService::CopyFrom(const UserDungeonService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserDungeonService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDungeonService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserDungeonService::Swap(UserDungeonService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserDungeonService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserDungeonService::UnsafeArenaSwap(UserDungeonService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserDungeonService::InternalSwap(UserDungeonService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDungeonService::GetMetadata() const {
  protobuf_PVE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SailorInDungeon* Arena::CreateMaybeMessage< ::sg::SailorInDungeon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SailorInDungeon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::MonsterInDungeon* Arena::CreateMaybeMessage< ::sg::MonsterInDungeon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::MonsterInDungeon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Enemy* Arena::CreateMaybeMessage< ::sg::Enemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Enemy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DungeonAltar_Relic* Arena::CreateMaybeMessage< ::sg::DungeonAltar_Relic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DungeonAltar_Relic >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DungeonAltar* Arena::CreateMaybeMessage< ::sg::DungeonAltar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DungeonAltar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::ElementProperty_RoomData_RoomEffect* Arena::CreateMaybeMessage< ::sg::ElementProperty_RoomData_RoomEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::ElementProperty_RoomData_RoomEffect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::ElementProperty_RoomData* Arena::CreateMaybeMessage< ::sg::ElementProperty_RoomData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::ElementProperty_RoomData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::ElementProperty* Arena::CreateMaybeMessage< ::sg::ElementProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::ElementProperty >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::FightManual* Arena::CreateMaybeMessage< ::sg::FightManual >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::FightManual >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DungeonElement_Exchange_Exchange_Item* Arena::CreateMaybeMessage< ::sg::DungeonElement_Exchange_Exchange_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DungeonElement_Exchange_Exchange_Item >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DungeonElement_Exchange* Arena::CreateMaybeMessage< ::sg::DungeonElement_Exchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DungeonElement_Exchange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DungeonElement* Arena::CreateMaybeMessage< ::sg::DungeonElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DungeonElement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DungeonContent_PathBranch* Arena::CreateMaybeMessage< ::sg::DungeonContent_PathBranch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DungeonContent_PathBranch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DungeonContent* Arena::CreateMaybeMessage< ::sg::DungeonContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DungeonContent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserTeamData* Arena::CreateMaybeMessage< ::sg::UserTeamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserTeamData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserDungeonInformation_ElementCount* Arena::CreateMaybeMessage< ::sg::UserDungeonInformation_ElementCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserDungeonInformation_ElementCount >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserDungeonInformation* Arena::CreateMaybeMessage< ::sg::UserDungeonInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserDungeonInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserDungeonOperation* Arena::CreateMaybeMessage< ::sg::UserDungeonOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserDungeonOperation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DungeonEvent* Arena::CreateMaybeMessage< ::sg::DungeonEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DungeonEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::ShipData* Arena::CreateMaybeMessage< ::sg::ShipData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::ShipData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PveFacility* Arena::CreateMaybeMessage< ::sg::PveFacility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PveFacility >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PveMapData* Arena::CreateMaybeMessage< ::sg::PveMapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PveMapData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PvePlayerMapData* Arena::CreateMaybeMessage< ::sg::PvePlayerMapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PvePlayerMapData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PveDefenderData* Arena::CreateMaybeMessage< ::sg::PveDefenderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PveDefenderData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVEBattleService_PVEBattleRequest* Arena::CreateMaybeMessage< ::sg::PVEBattleService_PVEBattleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVEBattleService_PVEBattleRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVEBattleService_PVEBattleResponse* Arena::CreateMaybeMessage< ::sg::PVEBattleService_PVEBattleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVEBattleService_PVEBattleResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVEBattleService* Arena::CreateMaybeMessage< ::sg::PVEBattleService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVEBattleService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::DungeonInfo* Arena::CreateMaybeMessage< ::sg::DungeonInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::DungeonInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserDungeonService_UserDungeonRequest* Arena::CreateMaybeMessage< ::sg::UserDungeonService_UserDungeonRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserDungeonService_UserDungeonRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserDungeonService_UserDungeonResponse* Arena::CreateMaybeMessage< ::sg::UserDungeonService_UserDungeonResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserDungeonService_UserDungeonResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserDungeonService* Arena::CreateMaybeMessage< ::sg::UserDungeonService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserDungeonService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
