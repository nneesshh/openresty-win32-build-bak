// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Achievement.proto

#ifndef PROTOBUF_INCLUDED_Achievement_2eproto
#define PROTOBUF_INCLUDED_Achievement_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Achievement_2eproto 

namespace protobuf_Achievement_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Achievement_2eproto
namespace sg {
class Achievement;
class AchievementDefaultTypeInternal;
extern AchievementDefaultTypeInternal _Achievement_default_instance_;
class AchievementNotify;
class AchievementNotifyDefaultTypeInternal;
extern AchievementNotifyDefaultTypeInternal _AchievementNotify_default_instance_;
class UserAchievementService;
class UserAchievementServiceDefaultTypeInternal;
extern UserAchievementServiceDefaultTypeInternal _UserAchievementService_default_instance_;
class UserAchievementService_UserAchievementRequest;
class UserAchievementService_UserAchievementRequestDefaultTypeInternal;
extern UserAchievementService_UserAchievementRequestDefaultTypeInternal _UserAchievementService_UserAchievementRequest_default_instance_;
class UserAchievementService_UserAchievementResponse;
class UserAchievementService_UserAchievementResponseDefaultTypeInternal;
extern UserAchievementService_UserAchievementResponseDefaultTypeInternal _UserAchievementService_UserAchievementResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::Achievement* Arena::CreateMaybeMessage<::sg::Achievement>(Arena*);
template<> ::sg::AchievementNotify* Arena::CreateMaybeMessage<::sg::AchievementNotify>(Arena*);
template<> ::sg::UserAchievementService* Arena::CreateMaybeMessage<::sg::UserAchievementService>(Arena*);
template<> ::sg::UserAchievementService_UserAchievementRequest* Arena::CreateMaybeMessage<::sg::UserAchievementService_UserAchievementRequest>(Arena*);
template<> ::sg::UserAchievementService_UserAchievementResponse* Arena::CreateMaybeMessage<::sg::UserAchievementService_UserAchievementResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum UserAchievementService_CMD {
  UserAchievementService_CMD_QUERY = 1,
  UserAchievementService_CMD_GET_REWARD = 2
};
bool UserAchievementService_CMD_IsValid(int value);
const UserAchievementService_CMD UserAchievementService_CMD_CMD_MIN = UserAchievementService_CMD_QUERY;
const UserAchievementService_CMD UserAchievementService_CMD_CMD_MAX = UserAchievementService_CMD_GET_REWARD;
const int UserAchievementService_CMD_CMD_ARRAYSIZE = UserAchievementService_CMD_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserAchievementService_CMD_descriptor();
inline const ::std::string& UserAchievementService_CMD_Name(UserAchievementService_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserAchievementService_CMD_descriptor(), value);
}
inline bool UserAchievementService_CMD_Parse(
    const ::std::string& name, UserAchievementService_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserAchievementService_CMD>(
    UserAchievementService_CMD_descriptor(), name, value);
}
// ===================================================================

class Achievement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.Achievement) */ {
 public:
  Achievement();
  virtual ~Achievement();

  Achievement(const Achievement& from);

  inline Achievement& operator=(const Achievement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Achievement(Achievement&& from) noexcept
    : Achievement() {
    *this = ::std::move(from);
  }

  inline Achievement& operator=(Achievement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Achievement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Achievement* internal_default_instance() {
    return reinterpret_cast<const Achievement*>(
               &_Achievement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Achievement* other);
  void Swap(Achievement* other);
  friend void swap(Achievement& a, Achievement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Achievement* New() const final {
    return CreateMaybeMessage<Achievement>(NULL);
  }

  Achievement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Achievement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Achievement& from);
  void MergeFrom(const Achievement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Achievement* other);
  protected:
  explicit Achievement(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 finish_value = 2;
  bool has_finish_value() const;
  void clear_finish_value();
  static const int kFinishValueFieldNumber = 2;
  ::google::protobuf::int64 finish_value() const;
  void set_finish_value(::google::protobuf::int64 value);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 phase = 3;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::google::protobuf::int32 phase() const;
  void set_phase(::google::protobuf::int32 value);

  // required int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.Achievement)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_finish_value();
  void clear_has_finish_value();
  void set_has_phase();
  void clear_has_phase();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 finish_value_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 phase_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_Achievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAchievementService_UserAchievementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserAchievementService.UserAchievementRequest) */ {
 public:
  UserAchievementService_UserAchievementRequest();
  virtual ~UserAchievementService_UserAchievementRequest();

  UserAchievementService_UserAchievementRequest(const UserAchievementService_UserAchievementRequest& from);

  inline UserAchievementService_UserAchievementRequest& operator=(const UserAchievementService_UserAchievementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAchievementService_UserAchievementRequest(UserAchievementService_UserAchievementRequest&& from) noexcept
    : UserAchievementService_UserAchievementRequest() {
    *this = ::std::move(from);
  }

  inline UserAchievementService_UserAchievementRequest& operator=(UserAchievementService_UserAchievementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAchievementService_UserAchievementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAchievementService_UserAchievementRequest* internal_default_instance() {
    return reinterpret_cast<const UserAchievementService_UserAchievementRequest*>(
               &_UserAchievementService_UserAchievementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(UserAchievementService_UserAchievementRequest* other);
  void Swap(UserAchievementService_UserAchievementRequest* other);
  friend void swap(UserAchievementService_UserAchievementRequest& a, UserAchievementService_UserAchievementRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAchievementService_UserAchievementRequest* New() const final {
    return CreateMaybeMessage<UserAchievementService_UserAchievementRequest>(NULL);
  }

  UserAchievementService_UserAchievementRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAchievementService_UserAchievementRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAchievementService_UserAchievementRequest& from);
  void MergeFrom(const UserAchievementService_UserAchievementRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAchievementService_UserAchievementRequest* other);
  protected:
  explicit UserAchievementService_UserAchievementRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required .sg.UserAchievementService.CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::UserAchievementService_CMD cmd() const;
  void set_cmd(::sg::UserAchievementService_CMD value);

  // @@protoc_insertion_point(class_scope:sg.UserAchievementService.UserAchievementRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  int cmd_;
  friend struct ::protobuf_Achievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAchievementService_UserAchievementResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserAchievementService.UserAchievementResponse) */ {
 public:
  UserAchievementService_UserAchievementResponse();
  virtual ~UserAchievementService_UserAchievementResponse();

  UserAchievementService_UserAchievementResponse(const UserAchievementService_UserAchievementResponse& from);

  inline UserAchievementService_UserAchievementResponse& operator=(const UserAchievementService_UserAchievementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAchievementService_UserAchievementResponse(UserAchievementService_UserAchievementResponse&& from) noexcept
    : UserAchievementService_UserAchievementResponse() {
    *this = ::std::move(from);
  }

  inline UserAchievementService_UserAchievementResponse& operator=(UserAchievementService_UserAchievementResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAchievementService_UserAchievementResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAchievementService_UserAchievementResponse* internal_default_instance() {
    return reinterpret_cast<const UserAchievementService_UserAchievementResponse*>(
               &_UserAchievementService_UserAchievementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(UserAchievementService_UserAchievementResponse* other);
  void Swap(UserAchievementService_UserAchievementResponse* other);
  friend void swap(UserAchievementService_UserAchievementResponse& a, UserAchievementService_UserAchievementResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAchievementService_UserAchievementResponse* New() const final {
    return CreateMaybeMessage<UserAchievementService_UserAchievementResponse>(NULL);
  }

  UserAchievementService_UserAchievementResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAchievementService_UserAchievementResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAchievementService_UserAchievementResponse& from);
  void MergeFrom(const UserAchievementService_UserAchievementResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAchievementService_UserAchievementResponse* other);
  protected:
  explicit UserAchievementService_UserAchievementResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.Achievement achievement_list = 2;
  int achievement_list_size() const;
  void clear_achievement_list();
  static const int kAchievementListFieldNumber = 2;
  ::sg::Achievement* mutable_achievement_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::Achievement >*
      mutable_achievement_list();
  const ::sg::Achievement& achievement_list(int index) const;
  ::sg::Achievement* add_achievement_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::Achievement >&
      achievement_list() const;

  // optional .sg.Reward reward = 4;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 4;
  private:
  const ::sg::Reward& _internal_reward() const;
  public:
  const ::sg::Reward& reward() const;
  ::sg::Reward* release_reward();
  ::sg::Reward* mutable_reward();
  void set_allocated_reward(::sg::Reward* reward);
  void unsafe_arena_set_allocated_reward(
      ::sg::Reward* reward);
  ::sg::Reward* unsafe_arena_release_reward();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional int32 achievement_point = 3;
  bool has_achievement_point() const;
  void clear_achievement_point();
  static const int kAchievementPointFieldNumber = 3;
  ::google::protobuf::int32 achievement_point() const;
  void set_achievement_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.UserAchievementService.UserAchievementResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_achievement_point();
  void clear_has_achievement_point();
  void set_has_reward();
  void clear_has_reward();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::Achievement > achievement_list_;
  ::sg::Reward* reward_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 achievement_point_;
  friend struct ::protobuf_Achievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAchievementService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.UserAchievementService) */ {
 public:
  UserAchievementService();
  virtual ~UserAchievementService();

  UserAchievementService(const UserAchievementService& from);

  inline UserAchievementService& operator=(const UserAchievementService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAchievementService(UserAchievementService&& from) noexcept
    : UserAchievementService() {
    *this = ::std::move(from);
  }

  inline UserAchievementService& operator=(UserAchievementService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAchievementService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAchievementService* internal_default_instance() {
    return reinterpret_cast<const UserAchievementService*>(
               &_UserAchievementService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UserAchievementService* other);
  void Swap(UserAchievementService* other);
  friend void swap(UserAchievementService& a, UserAchievementService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAchievementService* New() const final {
    return CreateMaybeMessage<UserAchievementService>(NULL);
  }

  UserAchievementService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAchievementService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAchievementService& from);
  void MergeFrom(const UserAchievementService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAchievementService* other);
  protected:
  explicit UserAchievementService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserAchievementService_UserAchievementRequest UserAchievementRequest;
  typedef UserAchievementService_UserAchievementResponse UserAchievementResponse;

  typedef UserAchievementService_CMD CMD;
  static const CMD QUERY =
    UserAchievementService_CMD_QUERY;
  static const CMD GET_REWARD =
    UserAchievementService_CMD_GET_REWARD;
  static inline bool CMD_IsValid(int value) {
    return UserAchievementService_CMD_IsValid(value);
  }
  static const CMD CMD_MIN =
    UserAchievementService_CMD_CMD_MIN;
  static const CMD CMD_MAX =
    UserAchievementService_CMD_CMD_MAX;
  static const int CMD_ARRAYSIZE =
    UserAchievementService_CMD_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CMD_descriptor() {
    return UserAchievementService_CMD_descriptor();
  }
  static inline const ::std::string& CMD_Name(CMD value) {
    return UserAchievementService_CMD_Name(value);
  }
  static inline bool CMD_Parse(const ::std::string& name,
      CMD* value) {
    return UserAchievementService_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.UserAchievementService.UserAchievementRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::UserAchievementService_UserAchievementRequest& _internal_req() const;
  public:
  const ::sg::UserAchievementService_UserAchievementRequest& req() const;
  ::sg::UserAchievementService_UserAchievementRequest* release_req();
  ::sg::UserAchievementService_UserAchievementRequest* mutable_req();
  void set_allocated_req(::sg::UserAchievementService_UserAchievementRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::UserAchievementService_UserAchievementRequest* req);
  ::sg::UserAchievementService_UserAchievementRequest* unsafe_arena_release_req();

  // optional .sg.UserAchievementService.UserAchievementResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::UserAchievementService_UserAchievementResponse& _internal_resp() const;
  public:
  const ::sg::UserAchievementService_UserAchievementResponse& resp() const;
  ::sg::UserAchievementService_UserAchievementResponse* release_resp();
  ::sg::UserAchievementService_UserAchievementResponse* mutable_resp();
  void set_allocated_resp(::sg::UserAchievementService_UserAchievementResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::UserAchievementService_UserAchievementResponse* resp);
  ::sg::UserAchievementService_UserAchievementResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.UserAchievementService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserAchievementService_UserAchievementRequest* req_;
  ::sg::UserAchievementService_UserAchievementResponse* resp_;
  friend struct ::protobuf_Achievement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AchievementNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.AchievementNotify) */ {
 public:
  AchievementNotify();
  virtual ~AchievementNotify();

  AchievementNotify(const AchievementNotify& from);

  inline AchievementNotify& operator=(const AchievementNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AchievementNotify(AchievementNotify&& from) noexcept
    : AchievementNotify() {
    *this = ::std::move(from);
  }

  inline AchievementNotify& operator=(AchievementNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AchievementNotify* internal_default_instance() {
    return reinterpret_cast<const AchievementNotify*>(
               &_AchievementNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(AchievementNotify* other);
  void Swap(AchievementNotify* other);
  friend void swap(AchievementNotify& a, AchievementNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AchievementNotify* New() const final {
    return CreateMaybeMessage<AchievementNotify>(NULL);
  }

  AchievementNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AchievementNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AchievementNotify& from);
  void MergeFrom(const AchievementNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AchievementNotify* other);
  protected:
  explicit AchievementNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.Achievement achievement = 1;
  bool has_achievement() const;
  void clear_achievement();
  static const int kAchievementFieldNumber = 1;
  private:
  const ::sg::Achievement& _internal_achievement() const;
  public:
  const ::sg::Achievement& achievement() const;
  ::sg::Achievement* release_achievement();
  ::sg::Achievement* mutable_achievement();
  void set_allocated_achievement(::sg::Achievement* achievement);
  void unsafe_arena_set_allocated_achievement(
      ::sg::Achievement* achievement);
  ::sg::Achievement* unsafe_arena_release_achievement();

  // @@protoc_insertion_point(class_scope:sg.AchievementNotify)
 private:
  void set_has_achievement();
  void clear_has_achievement();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::Achievement* achievement_;
  friend struct ::protobuf_Achievement_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Achievement

// required int32 id = 1;
inline bool Achievement::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Achievement::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Achievement::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Achievement::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Achievement::id() const {
  // @@protoc_insertion_point(field_get:sg.Achievement.id)
  return id_;
}
inline void Achievement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.Achievement.id)
}

// required int64 finish_value = 2;
inline bool Achievement::has_finish_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Achievement::set_has_finish_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Achievement::clear_has_finish_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Achievement::clear_finish_value() {
  finish_value_ = GOOGLE_LONGLONG(0);
  clear_has_finish_value();
}
inline ::google::protobuf::int64 Achievement::finish_value() const {
  // @@protoc_insertion_point(field_get:sg.Achievement.finish_value)
  return finish_value_;
}
inline void Achievement::set_finish_value(::google::protobuf::int64 value) {
  set_has_finish_value();
  finish_value_ = value;
  // @@protoc_insertion_point(field_set:sg.Achievement.finish_value)
}

// required int32 phase = 3;
inline bool Achievement::has_phase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Achievement::set_has_phase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Achievement::clear_has_phase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Achievement::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 Achievement::phase() const {
  // @@protoc_insertion_point(field_get:sg.Achievement.phase)
  return phase_;
}
inline void Achievement::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:sg.Achievement.phase)
}

// required int32 state = 4;
inline bool Achievement::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Achievement::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Achievement::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Achievement::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Achievement::state() const {
  // @@protoc_insertion_point(field_get:sg.Achievement.state)
  return state_;
}
inline void Achievement::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:sg.Achievement.state)
}

// -------------------------------------------------------------------

// UserAchievementService_UserAchievementRequest

// required .sg.UserAchievementService.CMD cmd = 1;
inline bool UserAchievementService_UserAchievementRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAchievementService_UserAchievementRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAchievementService_UserAchievementRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAchievementService_UserAchievementRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::UserAchievementService_CMD UserAchievementService_UserAchievementRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.UserAchievementService.UserAchievementRequest.cmd)
  return static_cast< ::sg::UserAchievementService_CMD >(cmd_);
}
inline void UserAchievementService_UserAchievementRequest::set_cmd(::sg::UserAchievementService_CMD value) {
  assert(::sg::UserAchievementService_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAchievementService.UserAchievementRequest.cmd)
}

// optional int32 id = 2;
inline bool UserAchievementService_UserAchievementRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAchievementService_UserAchievementRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAchievementService_UserAchievementRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAchievementService_UserAchievementRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserAchievementService_UserAchievementRequest::id() const {
  // @@protoc_insertion_point(field_get:sg.UserAchievementService.UserAchievementRequest.id)
  return id_;
}
inline void UserAchievementService_UserAchievementRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAchievementService.UserAchievementRequest.id)
}

// -------------------------------------------------------------------

// UserAchievementService_UserAchievementResponse

// required int32 result = 1;
inline bool UserAchievementService_UserAchievementResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAchievementService_UserAchievementResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAchievementService_UserAchievementResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAchievementService_UserAchievementResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserAchievementService_UserAchievementResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.UserAchievementService.UserAchievementResponse.result)
  return result_;
}
inline void UserAchievementService_UserAchievementResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAchievementService.UserAchievementResponse.result)
}

// repeated .sg.Achievement achievement_list = 2;
inline int UserAchievementService_UserAchievementResponse::achievement_list_size() const {
  return achievement_list_.size();
}
inline void UserAchievementService_UserAchievementResponse::clear_achievement_list() {
  achievement_list_.Clear();
}
inline ::sg::Achievement* UserAchievementService_UserAchievementResponse::mutable_achievement_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.UserAchievementService.UserAchievementResponse.achievement_list)
  return achievement_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::Achievement >*
UserAchievementService_UserAchievementResponse::mutable_achievement_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.UserAchievementService.UserAchievementResponse.achievement_list)
  return &achievement_list_;
}
inline const ::sg::Achievement& UserAchievementService_UserAchievementResponse::achievement_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.UserAchievementService.UserAchievementResponse.achievement_list)
  return achievement_list_.Get(index);
}
inline ::sg::Achievement* UserAchievementService_UserAchievementResponse::add_achievement_list() {
  // @@protoc_insertion_point(field_add:sg.UserAchievementService.UserAchievementResponse.achievement_list)
  return achievement_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::Achievement >&
UserAchievementService_UserAchievementResponse::achievement_list() const {
  // @@protoc_insertion_point(field_list:sg.UserAchievementService.UserAchievementResponse.achievement_list)
  return achievement_list_;
}

// optional int32 achievement_point = 3;
inline bool UserAchievementService_UserAchievementResponse::has_achievement_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserAchievementService_UserAchievementResponse::set_has_achievement_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserAchievementService_UserAchievementResponse::clear_has_achievement_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserAchievementService_UserAchievementResponse::clear_achievement_point() {
  achievement_point_ = 0;
  clear_has_achievement_point();
}
inline ::google::protobuf::int32 UserAchievementService_UserAchievementResponse::achievement_point() const {
  // @@protoc_insertion_point(field_get:sg.UserAchievementService.UserAchievementResponse.achievement_point)
  return achievement_point_;
}
inline void UserAchievementService_UserAchievementResponse::set_achievement_point(::google::protobuf::int32 value) {
  set_has_achievement_point();
  achievement_point_ = value;
  // @@protoc_insertion_point(field_set:sg.UserAchievementService.UserAchievementResponse.achievement_point)
}

// optional .sg.Reward reward = 4;
inline bool UserAchievementService_UserAchievementResponse::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAchievementService_UserAchievementResponse::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAchievementService_UserAchievementResponse::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::Reward& UserAchievementService_UserAchievementResponse::_internal_reward() const {
  return *reward_;
}
inline const ::sg::Reward& UserAchievementService_UserAchievementResponse::reward() const {
  const ::sg::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:sg.UserAchievementService.UserAchievementResponse.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Reward*>(
      &::sg::_Reward_default_instance_);
}
inline ::sg::Reward* UserAchievementService_UserAchievementResponse::release_reward() {
  // @@protoc_insertion_point(field_release:sg.UserAchievementService.UserAchievementResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserAchievementService_UserAchievementResponse::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAchievementService.UserAchievementResponse.reward)
  clear_has_reward();
  ::sg::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::sg::Reward* UserAchievementService_UserAchievementResponse::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Reward>(GetArenaNoVirtual());
    reward_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserAchievementService.UserAchievementResponse.reward)
  return reward_;
}
inline void UserAchievementService_UserAchievementResponse::set_allocated_reward(::sg::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reward_);
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reward)->GetArena();
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:sg.UserAchievementService.UserAchievementResponse.reward)
}

// -------------------------------------------------------------------

// UserAchievementService

// optional .sg.UserAchievementService.UserAchievementRequest req = 1;
inline bool UserAchievementService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAchievementService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAchievementService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAchievementService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::UserAchievementService_UserAchievementRequest& UserAchievementService::_internal_req() const {
  return *req_;
}
inline const ::sg::UserAchievementService_UserAchievementRequest& UserAchievementService::req() const {
  const ::sg::UserAchievementService_UserAchievementRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.UserAchievementService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserAchievementService_UserAchievementRequest*>(
      &::sg::_UserAchievementService_UserAchievementRequest_default_instance_);
}
inline ::sg::UserAchievementService_UserAchievementRequest* UserAchievementService::release_req() {
  // @@protoc_insertion_point(field_release:sg.UserAchievementService.req)
  clear_has_req();
  ::sg::UserAchievementService_UserAchievementRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::UserAchievementService_UserAchievementRequest* UserAchievementService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAchievementService.req)
  clear_has_req();
  ::sg::UserAchievementService_UserAchievementRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::UserAchievementService_UserAchievementRequest* UserAchievementService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserAchievementService_UserAchievementRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserAchievementService.req)
  return req_;
}
inline void UserAchievementService::set_allocated_req(::sg::UserAchievementService_UserAchievementRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.UserAchievementService.req)
}

// optional .sg.UserAchievementService.UserAchievementResponse resp = 2;
inline bool UserAchievementService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAchievementService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAchievementService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAchievementService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::UserAchievementService_UserAchievementResponse& UserAchievementService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::UserAchievementService_UserAchievementResponse& UserAchievementService::resp() const {
  const ::sg::UserAchievementService_UserAchievementResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.UserAchievementService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserAchievementService_UserAchievementResponse*>(
      &::sg::_UserAchievementService_UserAchievementResponse_default_instance_);
}
inline ::sg::UserAchievementService_UserAchievementResponse* UserAchievementService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.UserAchievementService.resp)
  clear_has_resp();
  ::sg::UserAchievementService_UserAchievementResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::UserAchievementService_UserAchievementResponse* UserAchievementService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.UserAchievementService.resp)
  clear_has_resp();
  ::sg::UserAchievementService_UserAchievementResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::UserAchievementService_UserAchievementResponse* UserAchievementService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserAchievementService_UserAchievementResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.UserAchievementService.resp)
  return resp_;
}
inline void UserAchievementService::set_allocated_resp(::sg::UserAchievementService_UserAchievementResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.UserAchievementService.resp)
}

// -------------------------------------------------------------------

// AchievementNotify

// required .sg.Achievement achievement = 1;
inline bool AchievementNotify::has_achievement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchievementNotify::set_has_achievement() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchievementNotify::clear_has_achievement() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchievementNotify::clear_achievement() {
  if (achievement_ != NULL) achievement_->Clear();
  clear_has_achievement();
}
inline const ::sg::Achievement& AchievementNotify::_internal_achievement() const {
  return *achievement_;
}
inline const ::sg::Achievement& AchievementNotify::achievement() const {
  const ::sg::Achievement* p = achievement_;
  // @@protoc_insertion_point(field_get:sg.AchievementNotify.achievement)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::Achievement*>(
      &::sg::_Achievement_default_instance_);
}
inline ::sg::Achievement* AchievementNotify::release_achievement() {
  // @@protoc_insertion_point(field_release:sg.AchievementNotify.achievement)
  clear_has_achievement();
  ::sg::Achievement* temp = achievement_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  achievement_ = NULL;
  return temp;
}
inline ::sg::Achievement* AchievementNotify::unsafe_arena_release_achievement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.AchievementNotify.achievement)
  clear_has_achievement();
  ::sg::Achievement* temp = achievement_;
  achievement_ = NULL;
  return temp;
}
inline ::sg::Achievement* AchievementNotify::mutable_achievement() {
  set_has_achievement();
  if (achievement_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::Achievement>(GetArenaNoVirtual());
    achievement_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.AchievementNotify.achievement)
  return achievement_;
}
inline void AchievementNotify::set_allocated_achievement(::sg::Achievement* achievement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete achievement_;
  }
  if (achievement) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(achievement);
    if (message_arena != submessage_arena) {
      achievement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, achievement, submessage_arena);
    }
    set_has_achievement();
  } else {
    clear_has_achievement();
  }
  achievement_ = achievement;
  // @@protoc_insertion_point(field_set_allocated:sg.AchievementNotify.achievement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::UserAchievementService_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::UserAchievementService_CMD>() {
  return ::sg::UserAchievementService_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Achievement_2eproto
