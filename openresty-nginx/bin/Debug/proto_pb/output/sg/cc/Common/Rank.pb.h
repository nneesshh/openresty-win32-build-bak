// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rank.proto

#ifndef PROTOBUF_INCLUDED_Rank_2eproto
#define PROTOBUF_INCLUDED_Rank_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BaseStruct.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Rank_2eproto 

namespace protobuf_Rank_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Rank_2eproto
namespace sg {
class PVPRankState;
class PVPRankStateDefaultTypeInternal;
extern PVPRankStateDefaultTypeInternal _PVPRankState_default_instance_;
class PVPRankingData;
class PVPRankingDataDefaultTypeInternal;
extern PVPRankingDataDefaultTypeInternal _PVPRankingData_default_instance_;
class PVPRecord;
class PVPRecordDefaultTypeInternal;
extern PVPRecordDefaultTypeInternal _PVPRecord_default_instance_;
class PVPRecord_SailorData;
class PVPRecord_SailorDataDefaultTypeInternal;
extern PVPRecord_SailorDataDefaultTypeInternal _PVPRecord_SailorData_default_instance_;
class RankService;
class RankServiceDefaultTypeInternal;
extern RankServiceDefaultTypeInternal _RankService_default_instance_;
class RankService_RankRequest;
class RankService_RankRequestDefaultTypeInternal;
extern RankService_RankRequestDefaultTypeInternal _RankService_RankRequest_default_instance_;
class RankService_RankResponse;
class RankService_RankResponseDefaultTypeInternal;
extern RankService_RankResponseDefaultTypeInternal _RankService_RankResponse_default_instance_;
}  // namespace sg
namespace google {
namespace protobuf {
template<> ::sg::PVPRankState* Arena::CreateMaybeMessage<::sg::PVPRankState>(Arena*);
template<> ::sg::PVPRankingData* Arena::CreateMaybeMessage<::sg::PVPRankingData>(Arena*);
template<> ::sg::PVPRecord* Arena::CreateMaybeMessage<::sg::PVPRecord>(Arena*);
template<> ::sg::PVPRecord_SailorData* Arena::CreateMaybeMessage<::sg::PVPRecord_SailorData>(Arena*);
template<> ::sg::RankService* Arena::CreateMaybeMessage<::sg::RankService>(Arena*);
template<> ::sg::RankService_RankRequest* Arena::CreateMaybeMessage<::sg::RankService_RankRequest>(Arena*);
template<> ::sg::RankService_RankResponse* Arena::CreateMaybeMessage<::sg::RankService_RankResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sg {

enum RankService_RANK_CMD {
  RankService_RANK_CMD_QUERY = 1,
  RankService_RANK_CMD_QUERY_SELF = 2,
  RankService_RANK_CMD_QUERY_RECORD = 3
};
bool RankService_RANK_CMD_IsValid(int value);
const RankService_RANK_CMD RankService_RANK_CMD_RANK_CMD_MIN = RankService_RANK_CMD_QUERY;
const RankService_RANK_CMD RankService_RANK_CMD_RANK_CMD_MAX = RankService_RANK_CMD_QUERY_RECORD;
const int RankService_RANK_CMD_RANK_CMD_ARRAYSIZE = RankService_RANK_CMD_RANK_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* RankService_RANK_CMD_descriptor();
inline const ::std::string& RankService_RANK_CMD_Name(RankService_RANK_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    RankService_RANK_CMD_descriptor(), value);
}
inline bool RankService_RANK_CMD_Parse(
    const ::std::string& name, RankService_RANK_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RankService_RANK_CMD>(
    RankService_RANK_CMD_descriptor(), name, value);
}
enum RANK_LIST_TYPE {
  PVP_RANKING = 1
};
bool RANK_LIST_TYPE_IsValid(int value);
const RANK_LIST_TYPE RANK_LIST_TYPE_MIN = PVP_RANKING;
const RANK_LIST_TYPE RANK_LIST_TYPE_MAX = PVP_RANKING;
const int RANK_LIST_TYPE_ARRAYSIZE = RANK_LIST_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* RANK_LIST_TYPE_descriptor();
inline const ::std::string& RANK_LIST_TYPE_Name(RANK_LIST_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    RANK_LIST_TYPE_descriptor(), value);
}
inline bool RANK_LIST_TYPE_Parse(
    const ::std::string& name, RANK_LIST_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RANK_LIST_TYPE>(
    RANK_LIST_TYPE_descriptor(), name, value);
}
// ===================================================================

class PVPRankState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPRankState) */ {
 public:
  PVPRankState();
  virtual ~PVPRankState();

  PVPRankState(const PVPRankState& from);

  inline PVPRankState& operator=(const PVPRankState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPRankState(PVPRankState&& from) noexcept
    : PVPRankState() {
    *this = ::std::move(from);
  }

  inline PVPRankState& operator=(PVPRankState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPRankState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPRankState* internal_default_instance() {
    return reinterpret_cast<const PVPRankState*>(
               &_PVPRankState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(PVPRankState* other);
  void Swap(PVPRankState* other);
  friend void swap(PVPRankState& a, PVPRankState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPRankState* New() const final {
    return CreateMaybeMessage<PVPRankState>(NULL);
  }

  PVPRankState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPRankState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPRankState& from);
  void MergeFrom(const PVPRankState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPRankState* other);
  protected:
  explicit PVPRankState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 win = 1;
  bool has_win() const;
  void clear_win();
  static const int kWinFieldNumber = 1;
  ::google::protobuf::int32 win() const;
  void set_win(::google::protobuf::int32 value);

  // optional int32 lose = 2;
  bool has_lose() const;
  void clear_lose();
  static const int kLoseFieldNumber = 2;
  ::google::protobuf::int32 lose() const;
  void set_lose(::google::protobuf::int32 value);

  // optional int32 ranking = 3;
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 3;
  ::google::protobuf::int32 ranking() const;
  void set_ranking(::google::protobuf::int32 value);

  // optional int32 ranking_score = 4;
  bool has_ranking_score() const;
  void clear_ranking_score();
  static const int kRankingScoreFieldNumber = 4;
  ::google::protobuf::int32 ranking_score() const;
  void set_ranking_score(::google::protobuf::int32 value);

  // optional float ranking_ratio = 5;
  bool has_ranking_ratio() const;
  void clear_ranking_ratio();
  static const int kRankingRatioFieldNumber = 5;
  float ranking_ratio() const;
  void set_ranking_ratio(float value);

  // @@protoc_insertion_point(class_scope:sg.PVPRankState)
 private:
  void set_has_win();
  void clear_has_win();
  void set_has_lose();
  void clear_has_lose();
  void set_has_ranking();
  void clear_has_ranking();
  void set_has_ranking_score();
  void clear_has_ranking_score();
  void set_has_ranking_ratio();
  void clear_has_ranking_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 lose_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 ranking_score_;
  float ranking_ratio_;
  friend struct ::protobuf_Rank_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPRankingData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPRankingData) */ {
 public:
  PVPRankingData();
  virtual ~PVPRankingData();

  PVPRankingData(const PVPRankingData& from);

  inline PVPRankingData& operator=(const PVPRankingData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPRankingData(PVPRankingData&& from) noexcept
    : PVPRankingData() {
    *this = ::std::move(from);
  }

  inline PVPRankingData& operator=(PVPRankingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPRankingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPRankingData* internal_default_instance() {
    return reinterpret_cast<const PVPRankingData*>(
               &_PVPRankingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(PVPRankingData* other);
  void Swap(PVPRankingData* other);
  friend void swap(PVPRankingData& a, PVPRankingData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPRankingData* New() const final {
    return CreateMaybeMessage<PVPRankingData>(NULL);
  }

  PVPRankingData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPRankingData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPRankingData& from);
  void MergeFrom(const PVPRankingData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPRankingData* other);
  protected:
  explicit PVPRankingData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.UserInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  private:
  const ::sg::UserInfo& _internal_info() const;
  public:
  const ::sg::UserInfo& info() const;
  ::sg::UserInfo* release_info();
  ::sg::UserInfo* mutable_info();
  void set_allocated_info(::sg::UserInfo* info);
  void unsafe_arena_set_allocated_info(
      ::sg::UserInfo* info);
  ::sg::UserInfo* unsafe_arena_release_info();

  // required int32 ranking_score = 2;
  bool has_ranking_score() const;
  void clear_ranking_score();
  static const int kRankingScoreFieldNumber = 2;
  ::google::protobuf::int32 ranking_score() const;
  void set_ranking_score(::google::protobuf::int32 value);

  // required int32 ranking = 3;
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 3;
  ::google::protobuf::int32 ranking() const;
  void set_ranking(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PVPRankingData)
 private:
  void set_has_info();
  void clear_has_info();
  void set_has_ranking_score();
  void clear_has_ranking_score();
  void set_has_ranking();
  void clear_has_ranking();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::UserInfo* info_;
  ::google::protobuf::int32 ranking_score_;
  ::google::protobuf::int32 ranking_;
  friend struct ::protobuf_Rank_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPRecord_SailorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPRecord.SailorData) */ {
 public:
  PVPRecord_SailorData();
  virtual ~PVPRecord_SailorData();

  PVPRecord_SailorData(const PVPRecord_SailorData& from);

  inline PVPRecord_SailorData& operator=(const PVPRecord_SailorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPRecord_SailorData(PVPRecord_SailorData&& from) noexcept
    : PVPRecord_SailorData() {
    *this = ::std::move(from);
  }

  inline PVPRecord_SailorData& operator=(PVPRecord_SailorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPRecord_SailorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPRecord_SailorData* internal_default_instance() {
    return reinterpret_cast<const PVPRecord_SailorData*>(
               &_PVPRecord_SailorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(PVPRecord_SailorData* other);
  void Swap(PVPRecord_SailorData* other);
  friend void swap(PVPRecord_SailorData& a, PVPRecord_SailorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPRecord_SailorData* New() const final {
    return CreateMaybeMessage<PVPRecord_SailorData>(NULL);
  }

  PVPRecord_SailorData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPRecord_SailorData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPRecord_SailorData& from);
  void MergeFrom(const PVPRecord_SailorData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPRecord_SailorData* other);
  protected:
  explicit PVPRecord_SailorData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 1;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 star = 3;
  bool has_star() const;
  void clear_star();
  static const int kStarFieldNumber = 3;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PVPRecord.SailorData)
 private:
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_level();
  void clear_has_level();
  void set_has_star();
  void clear_has_star();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 star_;
  friend struct ::protobuf_Rank_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVPRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.PVPRecord) */ {
 public:
  PVPRecord();
  virtual ~PVPRecord();

  PVPRecord(const PVPRecord& from);

  inline PVPRecord& operator=(const PVPRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPRecord(PVPRecord&& from) noexcept
    : PVPRecord() {
    *this = ::std::move(from);
  }

  inline PVPRecord& operator=(PVPRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPRecord* internal_default_instance() {
    return reinterpret_cast<const PVPRecord*>(
               &_PVPRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(PVPRecord* other);
  void Swap(PVPRecord* other);
  friend void swap(PVPRecord& a, PVPRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPRecord* New() const final {
    return CreateMaybeMessage<PVPRecord>(NULL);
  }

  PVPRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPRecord& from);
  void MergeFrom(const PVPRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPRecord* other);
  protected:
  explicit PVPRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PVPRecord_SailorData SailorData;

  // accessors -------------------------------------------------------

  // repeated .sg.PVPRecord.SailorData team_data = 3;
  int team_data_size() const;
  void clear_team_data();
  static const int kTeamDataFieldNumber = 3;
  ::sg::PVPRecord_SailorData* mutable_team_data(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData >*
      mutable_team_data();
  const ::sg::PVPRecord_SailorData& team_data(int index) const;
  ::sg::PVPRecord_SailorData* add_team_data();
  const ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData >&
      team_data() const;

  // repeated .sg.PVPRecord.SailorData enemy_data = 4;
  int enemy_data_size() const;
  void clear_enemy_data();
  static const int kEnemyDataFieldNumber = 4;
  ::sg::PVPRecord_SailorData* mutable_enemy_data(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData >*
      mutable_enemy_data();
  const ::sg::PVPRecord_SailorData& enemy_data(int index) const;
  ::sg::PVPRecord_SailorData* add_enemy_data();
  const ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData >&
      enemy_data() const;

  // required bytes player_nick = 1;
  bool has_player_nick() const;
  void clear_player_nick();
  static const int kPlayerNickFieldNumber = 1;
  const ::std::string& player_nick() const;
  void set_player_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_player_nick(::std::string&& value);
  #endif
  void set_player_nick(const char* value);
  void set_player_nick(const void* value, size_t size);
  ::std::string* mutable_player_nick();
  ::std::string* release_player_nick();
  void set_allocated_player_nick(::std::string* player_nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_player_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player_nick(
      ::std::string* player_nick);

  // required int32 player_level = 2;
  bool has_player_level() const;
  void clear_player_level();
  static const int kPlayerLevelFieldNumber = 2;
  ::google::protobuf::int32 player_level() const;
  void set_player_level(::google::protobuf::int32 value);

  // required int32 result = 6;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 6;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 change_score = 7;
  bool has_change_score() const;
  void clear_change_score();
  static const int kChangeScoreFieldNumber = 7;
  ::google::protobuf::int32 change_score() const;
  void set_change_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.PVPRecord)
 private:
  void set_has_player_nick();
  void clear_has_player_nick();
  void set_has_player_level();
  void clear_has_player_level();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_result();
  void clear_has_result();
  void set_has_change_score();
  void clear_has_change_score();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData > team_data_;
  ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData > enemy_data_;
  ::google::protobuf::internal::ArenaStringPtr player_nick_;
  ::google::protobuf::int32 player_level_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 change_score_;
  friend struct ::protobuf_Rank_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankService_RankRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.RankService.RankRequest) */ {
 public:
  RankService_RankRequest();
  virtual ~RankService_RankRequest();

  RankService_RankRequest(const RankService_RankRequest& from);

  inline RankService_RankRequest& operator=(const RankService_RankRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankService_RankRequest(RankService_RankRequest&& from) noexcept
    : RankService_RankRequest() {
    *this = ::std::move(from);
  }

  inline RankService_RankRequest& operator=(RankService_RankRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankService_RankRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankService_RankRequest* internal_default_instance() {
    return reinterpret_cast<const RankService_RankRequest*>(
               &_RankService_RankRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(RankService_RankRequest* other);
  void Swap(RankService_RankRequest* other);
  friend void swap(RankService_RankRequest& a, RankService_RankRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankService_RankRequest* New() const final {
    return CreateMaybeMessage<RankService_RankRequest>(NULL);
  }

  RankService_RankRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankService_RankRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankService_RankRequest& from);
  void MergeFrom(const RankService_RankRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankService_RankRequest* other);
  protected:
  explicit RankService_RankRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sg.RankService.RANK_CMD cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::sg::RankService_RANK_CMD cmd() const;
  void set_cmd(::sg::RankService_RANK_CMD value);

  // optional .sg.RANK_LIST_TYPE type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::sg::RANK_LIST_TYPE type() const;
  void set_type(::sg::RANK_LIST_TYPE value);

  // @@protoc_insertion_point(class_scope:sg.RankService.RankRequest)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int cmd_;
  int type_;
  friend struct ::protobuf_Rank_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankService_RankResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.RankService.RankResponse) */ {
 public:
  RankService_RankResponse();
  virtual ~RankService_RankResponse();

  RankService_RankResponse(const RankService_RankResponse& from);

  inline RankService_RankResponse& operator=(const RankService_RankResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankService_RankResponse(RankService_RankResponse&& from) noexcept
    : RankService_RankResponse() {
    *this = ::std::move(from);
  }

  inline RankService_RankResponse& operator=(RankService_RankResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankService_RankResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankService_RankResponse* internal_default_instance() {
    return reinterpret_cast<const RankService_RankResponse*>(
               &_RankService_RankResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(RankService_RankResponse* other);
  void Swap(RankService_RankResponse* other);
  friend void swap(RankService_RankResponse& a, RankService_RankResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankService_RankResponse* New() const final {
    return CreateMaybeMessage<RankService_RankResponse>(NULL);
  }

  RankService_RankResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankService_RankResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankService_RankResponse& from);
  void MergeFrom(const RankService_RankResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankService_RankResponse* other);
  protected:
  explicit RankService_RankResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sg.PVPRankingData roles = 3;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 3;
  ::sg::PVPRankingData* mutable_roles(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::PVPRankingData >*
      mutable_roles();
  const ::sg::PVPRankingData& roles(int index) const;
  ::sg::PVPRankingData* add_roles();
  const ::google::protobuf::RepeatedPtrField< ::sg::PVPRankingData >&
      roles() const;

  // repeated .sg.PVPRecord record_list = 4;
  int record_list_size() const;
  void clear_record_list();
  static const int kRecordListFieldNumber = 4;
  ::sg::PVPRecord* mutable_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord >*
      mutable_record_list();
  const ::sg::PVPRecord& record_list(int index) const;
  ::sg::PVPRecord* add_record_list();
  const ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord >&
      record_list() const;

  // optional .sg.PVPRankState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  private:
  const ::sg::PVPRankState& _internal_state() const;
  public:
  const ::sg::PVPRankState& state() const;
  ::sg::PVPRankState* release_state();
  ::sg::PVPRankState* mutable_state();
  void set_allocated_state(::sg::PVPRankState* state);
  void unsafe_arena_set_allocated_state(
      ::sg::PVPRankState* state);
  ::sg::PVPRankState* unsafe_arena_release_state();

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sg.RankService.RankResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sg::PVPRankingData > roles_;
  ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord > record_list_;
  ::sg::PVPRankState* state_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_Rank_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sg.RankService) */ {
 public:
  RankService();
  virtual ~RankService();

  RankService(const RankService& from);

  inline RankService& operator=(const RankService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankService(RankService&& from) noexcept
    : RankService() {
    *this = ::std::move(from);
  }

  inline RankService& operator=(RankService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankService* internal_default_instance() {
    return reinterpret_cast<const RankService*>(
               &_RankService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(RankService* other);
  void Swap(RankService* other);
  friend void swap(RankService& a, RankService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankService* New() const final {
    return CreateMaybeMessage<RankService>(NULL);
  }

  RankService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankService& from);
  void MergeFrom(const RankService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankService* other);
  protected:
  explicit RankService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RankService_RankRequest RankRequest;
  typedef RankService_RankResponse RankResponse;

  typedef RankService_RANK_CMD RANK_CMD;
  static const RANK_CMD QUERY =
    RankService_RANK_CMD_QUERY;
  static const RANK_CMD QUERY_SELF =
    RankService_RANK_CMD_QUERY_SELF;
  static const RANK_CMD QUERY_RECORD =
    RankService_RANK_CMD_QUERY_RECORD;
  static inline bool RANK_CMD_IsValid(int value) {
    return RankService_RANK_CMD_IsValid(value);
  }
  static const RANK_CMD RANK_CMD_MIN =
    RankService_RANK_CMD_RANK_CMD_MIN;
  static const RANK_CMD RANK_CMD_MAX =
    RankService_RANK_CMD_RANK_CMD_MAX;
  static const int RANK_CMD_ARRAYSIZE =
    RankService_RANK_CMD_RANK_CMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RANK_CMD_descriptor() {
    return RankService_RANK_CMD_descriptor();
  }
  static inline const ::std::string& RANK_CMD_Name(RANK_CMD value) {
    return RankService_RANK_CMD_Name(value);
  }
  static inline bool RANK_CMD_Parse(const ::std::string& name,
      RANK_CMD* value) {
    return RankService_RANK_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sg.RankService.RankRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::sg::RankService_RankRequest& _internal_req() const;
  public:
  const ::sg::RankService_RankRequest& req() const;
  ::sg::RankService_RankRequest* release_req();
  ::sg::RankService_RankRequest* mutable_req();
  void set_allocated_req(::sg::RankService_RankRequest* req);
  void unsafe_arena_set_allocated_req(
      ::sg::RankService_RankRequest* req);
  ::sg::RankService_RankRequest* unsafe_arena_release_req();

  // optional .sg.RankService.RankResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::sg::RankService_RankResponse& _internal_resp() const;
  public:
  const ::sg::RankService_RankResponse& resp() const;
  ::sg::RankService_RankResponse* release_resp();
  ::sg::RankService_RankResponse* mutable_resp();
  void set_allocated_resp(::sg::RankService_RankResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::sg::RankService_RankResponse* resp);
  ::sg::RankService_RankResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:sg.RankService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::sg::RankService_RankRequest* req_;
  ::sg::RankService_RankResponse* resp_;
  friend struct ::protobuf_Rank_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PVPRankState

// optional int32 win = 1;
inline bool PVPRankState::has_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPRankState::set_has_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPRankState::clear_has_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPRankState::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 PVPRankState::win() const {
  // @@protoc_insertion_point(field_get:sg.PVPRankState.win)
  return win_;
}
inline void PVPRankState::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRankState.win)
}

// optional int32 lose = 2;
inline bool PVPRankState::has_lose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPRankState::set_has_lose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPRankState::clear_has_lose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPRankState::clear_lose() {
  lose_ = 0;
  clear_has_lose();
}
inline ::google::protobuf::int32 PVPRankState::lose() const {
  // @@protoc_insertion_point(field_get:sg.PVPRankState.lose)
  return lose_;
}
inline void PVPRankState::set_lose(::google::protobuf::int32 value) {
  set_has_lose();
  lose_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRankState.lose)
}

// optional int32 ranking = 3;
inline bool PVPRankState::has_ranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPRankState::set_has_ranking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPRankState::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPRankState::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 PVPRankState::ranking() const {
  // @@protoc_insertion_point(field_get:sg.PVPRankState.ranking)
  return ranking_;
}
inline void PVPRankState::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRankState.ranking)
}

// optional int32 ranking_score = 4;
inline bool PVPRankState::has_ranking_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PVPRankState::set_has_ranking_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PVPRankState::clear_has_ranking_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PVPRankState::clear_ranking_score() {
  ranking_score_ = 0;
  clear_has_ranking_score();
}
inline ::google::protobuf::int32 PVPRankState::ranking_score() const {
  // @@protoc_insertion_point(field_get:sg.PVPRankState.ranking_score)
  return ranking_score_;
}
inline void PVPRankState::set_ranking_score(::google::protobuf::int32 value) {
  set_has_ranking_score();
  ranking_score_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRankState.ranking_score)
}

// optional float ranking_ratio = 5;
inline bool PVPRankState::has_ranking_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PVPRankState::set_has_ranking_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PVPRankState::clear_has_ranking_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PVPRankState::clear_ranking_ratio() {
  ranking_ratio_ = 0;
  clear_has_ranking_ratio();
}
inline float PVPRankState::ranking_ratio() const {
  // @@protoc_insertion_point(field_get:sg.PVPRankState.ranking_ratio)
  return ranking_ratio_;
}
inline void PVPRankState::set_ranking_ratio(float value) {
  set_has_ranking_ratio();
  ranking_ratio_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRankState.ranking_ratio)
}

// -------------------------------------------------------------------

// PVPRankingData

// required .sg.UserInfo info = 1;
inline bool PVPRankingData::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPRankingData::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPRankingData::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sg::UserInfo& PVPRankingData::_internal_info() const {
  return *info_;
}
inline const ::sg::UserInfo& PVPRankingData::info() const {
  const ::sg::UserInfo* p = info_;
  // @@protoc_insertion_point(field_get:sg.PVPRankingData.info)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::UserInfo*>(
      &::sg::_UserInfo_default_instance_);
}
inline ::sg::UserInfo* PVPRankingData::release_info() {
  // @@protoc_insertion_point(field_release:sg.PVPRankingData.info)
  clear_has_info();
  ::sg::UserInfo* temp = info_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  info_ = NULL;
  return temp;
}
inline ::sg::UserInfo* PVPRankingData::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PVPRankingData.info)
  clear_has_info();
  ::sg::UserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::sg::UserInfo* PVPRankingData::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::UserInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.PVPRankingData.info)
  return info_;
}
inline void PVPRankingData::set_allocated_info(::sg::UserInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_);
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(info)->GetArena();
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
  } else {
    clear_has_info();
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:sg.PVPRankingData.info)
}

// required int32 ranking_score = 2;
inline bool PVPRankingData::has_ranking_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPRankingData::set_has_ranking_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPRankingData::clear_has_ranking_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPRankingData::clear_ranking_score() {
  ranking_score_ = 0;
  clear_has_ranking_score();
}
inline ::google::protobuf::int32 PVPRankingData::ranking_score() const {
  // @@protoc_insertion_point(field_get:sg.PVPRankingData.ranking_score)
  return ranking_score_;
}
inline void PVPRankingData::set_ranking_score(::google::protobuf::int32 value) {
  set_has_ranking_score();
  ranking_score_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRankingData.ranking_score)
}

// required int32 ranking = 3;
inline bool PVPRankingData::has_ranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPRankingData::set_has_ranking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPRankingData::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPRankingData::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 PVPRankingData::ranking() const {
  // @@protoc_insertion_point(field_get:sg.PVPRankingData.ranking)
  return ranking_;
}
inline void PVPRankingData::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRankingData.ranking)
}

// -------------------------------------------------------------------

// PVPRecord_SailorData

// required int32 typeid = 1;
inline bool PVPRecord_SailorData::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPRecord_SailorData::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPRecord_SailorData::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPRecord_SailorData::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 PVPRecord_SailorData::typeid_() const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.SailorData.typeid)
  return typeid__;
}
inline void PVPRecord_SailorData::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRecord.SailorData.typeid)
}

// required int32 level = 2;
inline bool PVPRecord_SailorData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPRecord_SailorData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPRecord_SailorData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPRecord_SailorData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PVPRecord_SailorData::level() const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.SailorData.level)
  return level_;
}
inline void PVPRecord_SailorData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRecord.SailorData.level)
}

// required int32 star = 3;
inline bool PVPRecord_SailorData::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPRecord_SailorData::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPRecord_SailorData::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPRecord_SailorData::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 PVPRecord_SailorData::star() const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.SailorData.star)
  return star_;
}
inline void PVPRecord_SailorData::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRecord.SailorData.star)
}

// -------------------------------------------------------------------

// PVPRecord

// required bytes player_nick = 1;
inline bool PVPRecord::has_player_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPRecord::set_has_player_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPRecord::clear_has_player_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPRecord::clear_player_nick() {
  player_nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_player_nick();
}
inline const ::std::string& PVPRecord::player_nick() const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.player_nick)
  return player_nick_.Get();
}
inline void PVPRecord::set_player_nick(const ::std::string& value) {
  set_has_player_nick();
  player_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sg.PVPRecord.player_nick)
}
#if LANG_CXX11
inline void PVPRecord::set_player_nick(::std::string&& value) {
  set_has_player_nick();
  player_nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sg.PVPRecord.player_nick)
}
#endif
inline void PVPRecord::set_player_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_nick();
  player_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sg.PVPRecord.player_nick)
}
inline void PVPRecord::set_player_nick(const void* value,
    size_t size) {
  set_has_player_nick();
  player_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sg.PVPRecord.player_nick)
}
inline ::std::string* PVPRecord::mutable_player_nick() {
  set_has_player_nick();
  // @@protoc_insertion_point(field_mutable:sg.PVPRecord.player_nick)
  return player_nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PVPRecord::release_player_nick() {
  // @@protoc_insertion_point(field_release:sg.PVPRecord.player_nick)
  if (!has_player_nick()) {
    return NULL;
  }
  clear_has_player_nick();
  return player_nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PVPRecord::set_allocated_player_nick(::std::string* player_nick) {
  if (player_nick != NULL) {
    set_has_player_nick();
  } else {
    clear_has_player_nick();
  }
  player_nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sg.PVPRecord.player_nick)
}
inline ::std::string* PVPRecord::unsafe_arena_release_player_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.PVPRecord.player_nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_player_nick();
  return player_nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PVPRecord::unsafe_arena_set_allocated_player_nick(
    ::std::string* player_nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (player_nick != NULL) {
    set_has_player_nick();
  } else {
    clear_has_player_nick();
  }
  player_nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      player_nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVPRecord.player_nick)
}

// required int32 player_level = 2;
inline bool PVPRecord::has_player_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPRecord::set_has_player_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPRecord::clear_has_player_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPRecord::clear_player_level() {
  player_level_ = 0;
  clear_has_player_level();
}
inline ::google::protobuf::int32 PVPRecord::player_level() const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.player_level)
  return player_level_;
}
inline void PVPRecord::set_player_level(::google::protobuf::int32 value) {
  set_has_player_level();
  player_level_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRecord.player_level)
}

// repeated .sg.PVPRecord.SailorData team_data = 3;
inline int PVPRecord::team_data_size() const {
  return team_data_.size();
}
inline void PVPRecord::clear_team_data() {
  team_data_.Clear();
}
inline ::sg::PVPRecord_SailorData* PVPRecord::mutable_team_data(int index) {
  // @@protoc_insertion_point(field_mutable:sg.PVPRecord.team_data)
  return team_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData >*
PVPRecord::mutable_team_data() {
  // @@protoc_insertion_point(field_mutable_list:sg.PVPRecord.team_data)
  return &team_data_;
}
inline const ::sg::PVPRecord_SailorData& PVPRecord::team_data(int index) const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.team_data)
  return team_data_.Get(index);
}
inline ::sg::PVPRecord_SailorData* PVPRecord::add_team_data() {
  // @@protoc_insertion_point(field_add:sg.PVPRecord.team_data)
  return team_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData >&
PVPRecord::team_data() const {
  // @@protoc_insertion_point(field_list:sg.PVPRecord.team_data)
  return team_data_;
}

// repeated .sg.PVPRecord.SailorData enemy_data = 4;
inline int PVPRecord::enemy_data_size() const {
  return enemy_data_.size();
}
inline void PVPRecord::clear_enemy_data() {
  enemy_data_.Clear();
}
inline ::sg::PVPRecord_SailorData* PVPRecord::mutable_enemy_data(int index) {
  // @@protoc_insertion_point(field_mutable:sg.PVPRecord.enemy_data)
  return enemy_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData >*
PVPRecord::mutable_enemy_data() {
  // @@protoc_insertion_point(field_mutable_list:sg.PVPRecord.enemy_data)
  return &enemy_data_;
}
inline const ::sg::PVPRecord_SailorData& PVPRecord::enemy_data(int index) const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.enemy_data)
  return enemy_data_.Get(index);
}
inline ::sg::PVPRecord_SailorData* PVPRecord::add_enemy_data() {
  // @@protoc_insertion_point(field_add:sg.PVPRecord.enemy_data)
  return enemy_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord_SailorData >&
PVPRecord::enemy_data() const {
  // @@protoc_insertion_point(field_list:sg.PVPRecord.enemy_data)
  return enemy_data_;
}

// required sfixed64 timestamp = 5;
inline bool PVPRecord::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PVPRecord::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PVPRecord::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PVPRecord::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 PVPRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.timestamp)
  return timestamp_;
}
inline void PVPRecord::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRecord.timestamp)
}

// required int32 result = 6;
inline bool PVPRecord::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPRecord::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPRecord::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPRecord::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PVPRecord::result() const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.result)
  return result_;
}
inline void PVPRecord::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRecord.result)
}

// required int32 change_score = 7;
inline bool PVPRecord::has_change_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PVPRecord::set_has_change_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PVPRecord::clear_has_change_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PVPRecord::clear_change_score() {
  change_score_ = 0;
  clear_has_change_score();
}
inline ::google::protobuf::int32 PVPRecord::change_score() const {
  // @@protoc_insertion_point(field_get:sg.PVPRecord.change_score)
  return change_score_;
}
inline void PVPRecord::set_change_score(::google::protobuf::int32 value) {
  set_has_change_score();
  change_score_ = value;
  // @@protoc_insertion_point(field_set:sg.PVPRecord.change_score)
}

// -------------------------------------------------------------------

// RankService_RankRequest

// required .sg.RankService.RANK_CMD cmd = 1;
inline bool RankService_RankRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankService_RankRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankService_RankRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankService_RankRequest::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::sg::RankService_RANK_CMD RankService_RankRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sg.RankService.RankRequest.cmd)
  return static_cast< ::sg::RankService_RANK_CMD >(cmd_);
}
inline void RankService_RankRequest::set_cmd(::sg::RankService_RANK_CMD value) {
  assert(::sg::RankService_RANK_CMD_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sg.RankService.RankRequest.cmd)
}

// optional .sg.RANK_LIST_TYPE type = 2;
inline bool RankService_RankRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankService_RankRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankService_RankRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankService_RankRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::sg::RANK_LIST_TYPE RankService_RankRequest::type() const {
  // @@protoc_insertion_point(field_get:sg.RankService.RankRequest.type)
  return static_cast< ::sg::RANK_LIST_TYPE >(type_);
}
inline void RankService_RankRequest::set_type(::sg::RANK_LIST_TYPE value) {
  assert(::sg::RANK_LIST_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sg.RankService.RankRequest.type)
}

// -------------------------------------------------------------------

// RankService_RankResponse

// required int32 result = 1;
inline bool RankService_RankResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankService_RankResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankService_RankResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankService_RankResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RankService_RankResponse::result() const {
  // @@protoc_insertion_point(field_get:sg.RankService.RankResponse.result)
  return result_;
}
inline void RankService_RankResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sg.RankService.RankResponse.result)
}

// optional .sg.PVPRankState state = 2;
inline bool RankService_RankResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankService_RankResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankService_RankResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankService_RankResponse::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
inline const ::sg::PVPRankState& RankService_RankResponse::_internal_state() const {
  return *state_;
}
inline const ::sg::PVPRankState& RankService_RankResponse::state() const {
  const ::sg::PVPRankState* p = state_;
  // @@protoc_insertion_point(field_get:sg.RankService.RankResponse.state)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::PVPRankState*>(
      &::sg::_PVPRankState_default_instance_);
}
inline ::sg::PVPRankState* RankService_RankResponse::release_state() {
  // @@protoc_insertion_point(field_release:sg.RankService.RankResponse.state)
  clear_has_state();
  ::sg::PVPRankState* temp = state_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  state_ = NULL;
  return temp;
}
inline ::sg::PVPRankState* RankService_RankResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.RankService.RankResponse.state)
  clear_has_state();
  ::sg::PVPRankState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::sg::PVPRankState* RankService_RankResponse::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::PVPRankState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.RankService.RankResponse.state)
  return state_;
}
inline void RankService_RankResponse::set_allocated_state(::sg::PVPRankState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:sg.RankService.RankResponse.state)
}

// repeated .sg.PVPRankingData roles = 3;
inline int RankService_RankResponse::roles_size() const {
  return roles_.size();
}
inline void RankService_RankResponse::clear_roles() {
  roles_.Clear();
}
inline ::sg::PVPRankingData* RankService_RankResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:sg.RankService.RankResponse.roles)
  return roles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::PVPRankingData >*
RankService_RankResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:sg.RankService.RankResponse.roles)
  return &roles_;
}
inline const ::sg::PVPRankingData& RankService_RankResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:sg.RankService.RankResponse.roles)
  return roles_.Get(index);
}
inline ::sg::PVPRankingData* RankService_RankResponse::add_roles() {
  // @@protoc_insertion_point(field_add:sg.RankService.RankResponse.roles)
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::PVPRankingData >&
RankService_RankResponse::roles() const {
  // @@protoc_insertion_point(field_list:sg.RankService.RankResponse.roles)
  return roles_;
}

// repeated .sg.PVPRecord record_list = 4;
inline int RankService_RankResponse::record_list_size() const {
  return record_list_.size();
}
inline void RankService_RankResponse::clear_record_list() {
  record_list_.Clear();
}
inline ::sg::PVPRecord* RankService_RankResponse::mutable_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:sg.RankService.RankResponse.record_list)
  return record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord >*
RankService_RankResponse::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable_list:sg.RankService.RankResponse.record_list)
  return &record_list_;
}
inline const ::sg::PVPRecord& RankService_RankResponse::record_list(int index) const {
  // @@protoc_insertion_point(field_get:sg.RankService.RankResponse.record_list)
  return record_list_.Get(index);
}
inline ::sg::PVPRecord* RankService_RankResponse::add_record_list() {
  // @@protoc_insertion_point(field_add:sg.RankService.RankResponse.record_list)
  return record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sg::PVPRecord >&
RankService_RankResponse::record_list() const {
  // @@protoc_insertion_point(field_list:sg.RankService.RankResponse.record_list)
  return record_list_;
}

// -------------------------------------------------------------------

// RankService

// optional .sg.RankService.RankRequest req = 1;
inline bool RankService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::sg::RankService_RankRequest& RankService::_internal_req() const {
  return *req_;
}
inline const ::sg::RankService_RankRequest& RankService::req() const {
  const ::sg::RankService_RankRequest* p = req_;
  // @@protoc_insertion_point(field_get:sg.RankService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::RankService_RankRequest*>(
      &::sg::_RankService_RankRequest_default_instance_);
}
inline ::sg::RankService_RankRequest* RankService::release_req() {
  // @@protoc_insertion_point(field_release:sg.RankService.req)
  clear_has_req();
  ::sg::RankService_RankRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::sg::RankService_RankRequest* RankService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.RankService.req)
  clear_has_req();
  ::sg::RankService_RankRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::sg::RankService_RankRequest* RankService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::RankService_RankRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.RankService.req)
  return req_;
}
inline void RankService::set_allocated_req(::sg::RankService_RankRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:sg.RankService.req)
}

// optional .sg.RankService.RankResponse resp = 2;
inline bool RankService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::sg::RankService_RankResponse& RankService::_internal_resp() const {
  return *resp_;
}
inline const ::sg::RankService_RankResponse& RankService::resp() const {
  const ::sg::RankService_RankResponse* p = resp_;
  // @@protoc_insertion_point(field_get:sg.RankService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::sg::RankService_RankResponse*>(
      &::sg::_RankService_RankResponse_default_instance_);
}
inline ::sg::RankService_RankResponse* RankService::release_resp() {
  // @@protoc_insertion_point(field_release:sg.RankService.resp)
  clear_has_resp();
  ::sg::RankService_RankResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::sg::RankService_RankResponse* RankService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sg.RankService.resp)
  clear_has_resp();
  ::sg::RankService_RankResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::sg::RankService_RankResponse* RankService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::sg::RankService_RankResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sg.RankService.resp)
  return resp_;
}
inline void RankService::set_allocated_resp(::sg::RankService_RankResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:sg.RankService.resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sg::RankService_RANK_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::RankService_RANK_CMD>() {
  return ::sg::RankService_RANK_CMD_descriptor();
}
template <> struct is_proto_enum< ::sg::RANK_LIST_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sg::RANK_LIST_TYPE>() {
  return ::sg::RANK_LIST_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Rank_2eproto
