// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PVPMatch.proto

#include "PVPMatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Sailor;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_PVE_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVE_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_SailorInDungeon;
}  // namespace protobuf_PVE_2eproto
namespace protobuf_PVPMatch_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVPMatch_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PVPMatchService_PVPMatchRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVPMatch_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserPVPState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PVPMatch_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PVPMatchService_PVPMatchResponse;
}  // namespace protobuf_PVPMatch_2eproto
namespace sg {
class ControllerInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerInformation>
      _instance;
} _ControllerInformation_default_instance_;
class UserPVPStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserPVPState>
      _instance;
} _UserPVPState_default_instance_;
class PVPMatchService_PVPMatchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPMatchService_PVPMatchRequest>
      _instance;
} _PVPMatchService_PVPMatchRequest_default_instance_;
class PVPMatchService_PVPMatchResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPMatchService_PVPMatchResponse>
      _instance;
} _PVPMatchService_PVPMatchResponse_default_instance_;
class PVPMatchServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPMatchService>
      _instance;
} _PVPMatchService_default_instance_;
class NewTicketNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewTicketNotify>
      _instance;
} _NewTicketNotify_default_instance_;
class RoundOverNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoundOverNotify>
      _instance;
} _RoundOverNotify_default_instance_;
class SingleMatchedNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleMatchedNotify>
      _instance;
} _SingleMatchedNotify_default_instance_;
}  // namespace sg
namespace protobuf_PVPMatch_2eproto {
static void InitDefaultsControllerInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_ControllerInformation_default_instance_;
    new (ptr) ::sg::ControllerInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::ControllerInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerInformation}, {
      &protobuf_BaseStruct_2eproto::scc_info_Sailor.base,}};

static void InitDefaultsUserPVPState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserPVPState_default_instance_;
    new (ptr) ::sg::UserPVPState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserPVPState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserPVPState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserPVPState}, {}};

static void InitDefaultsPVPMatchService_PVPMatchRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPMatchService_PVPMatchRequest_default_instance_;
    new (ptr) ::sg::PVPMatchService_PVPMatchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPMatchService_PVPMatchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PVPMatchService_PVPMatchRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPVPMatchService_PVPMatchRequest}, {}};

static void InitDefaultsPVPMatchService_PVPMatchResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPMatchService_PVPMatchResponse_default_instance_;
    new (ptr) ::sg::PVPMatchService_PVPMatchResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPMatchService_PVPMatchResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PVPMatchService_PVPMatchResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPVPMatchService_PVPMatchResponse}, {
      &protobuf_PVE_2eproto::scc_info_SailorInDungeon.base,
      &protobuf_PVPMatch_2eproto::scc_info_UserPVPState.base,}};

static void InitDefaultsPVPMatchService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_PVPMatchService_default_instance_;
    new (ptr) ::sg::PVPMatchService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::PVPMatchService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PVPMatchService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPVPMatchService}, {
      &protobuf_PVPMatch_2eproto::scc_info_PVPMatchService_PVPMatchRequest.base,
      &protobuf_PVPMatch_2eproto::scc_info_PVPMatchService_PVPMatchResponse.base,}};

static void InitDefaultsNewTicketNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_NewTicketNotify_default_instance_;
    new (ptr) ::sg::NewTicketNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::NewTicketNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewTicketNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewTicketNotify}, {
      &protobuf_BaseStruct_2eproto::scc_info_Item.base,}};

static void InitDefaultsRoundOverNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_RoundOverNotify_default_instance_;
    new (ptr) ::sg::RoundOverNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::RoundOverNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoundOverNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoundOverNotify}, {}};

static void InitDefaultsSingleMatchedNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_SingleMatchedNotify_default_instance_;
    new (ptr) ::sg::SingleMatchedNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::SingleMatchedNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SingleMatchedNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSingleMatchedNotify}, {
      &protobuf_PVE_2eproto::scc_info_SailorInDungeon.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserPVPState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPMatchService_PVPMatchRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPMatchService_PVPMatchResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPMatchService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewTicketNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoundOverNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SingleMatchedNotify.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ControllerInformation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ControllerInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ControllerInformation, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::ControllerInformation, sailors_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserPVPState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserPVPState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserPVPState, remain_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserPVPState, combo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserPVPState, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserPVPState, round_start_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService_PVPMatchRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService_PVPMatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService_PVPMatchRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService_PVPMatchRequest, team_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService_PVPMatchResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService_PVPMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService_PVPMatchResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService_PVPMatchResponse, self_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService_PVPMatchResponse, state_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::PVPMatchService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NewTicketNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NewTicketNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::NewTicketNotify, ticket_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RoundOverNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RoundOverNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::RoundOverNotify, sign_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SingleMatchedNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SingleMatchedNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SingleMatchedNotify, field_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SingleMatchedNotify, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SingleMatchedNotify, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SingleMatchedNotify, portrait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SingleMatchedNotify, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SingleMatchedNotify, ranking_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::SingleMatchedNotify, team_),
  2,
  3,
  0,
  4,
  1,
  5,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::sg::ControllerInformation)},
  { 9, 18, sizeof(::sg::UserPVPState)},
  { 22, 29, sizeof(::sg::PVPMatchService_PVPMatchRequest)},
  { 31, 39, sizeof(::sg::PVPMatchService_PVPMatchResponse)},
  { 42, 49, sizeof(::sg::PVPMatchService)},
  { 51, 57, sizeof(::sg::NewTicketNotify)},
  { 58, 64, sizeof(::sg::RoundOverNotify)},
  { 65, 77, sizeof(::sg::SingleMatchedNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_ControllerInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserPVPState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPMatchService_PVPMatchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPMatchService_PVPMatchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_PVPMatchService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_NewTicketNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_RoundOverNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_SingleMatchedNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "PVPMatch.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016PVPMatch.proto\022\002sg\032\020BaseStruct.proto\032\t"
      "PVE.proto\"C\n\025ControllerInformation\022\r\n\005in"
      "dex\030\001 \002(\005\022\033\n\007sailors\030\002 \003(\0132\n.sg.Sailor\"["
      "\n\014UserPVPState\022\024\n\014remain_times\030\001 \001(\005\022\r\n\005"
      "combo\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\020\022\023\n\013round_"
      "start\030\004 \001(\020\"\212\003\n\017PVPMatchService\0220\n\003req\030\001"
      " \001(\0132#.sg.PVPMatchService.PVPMatchReques"
      "t\0222\n\004resp\030\002 \001(\0132$.sg.PVPMatchService.PVP"
      "MatchResponse\032K\n\017PVPMatchRequest\022*\n\003cmd\030"
      "\001 \002(\0162\035.sg.PVPMatchService.MATCH_CMD\022\014\n\004"
      "team\030\002 \003(\005\032k\n\020PVPMatchResponse\022\016\n\006result"
      "\030\001 \002(\005\022&\n\tself_team\030\002 \003(\0132\023.sg.SailorInD"
      "ungeon\022\037\n\005state\030\003 \001(\0132\020.sg.UserPVPState\""
      "W\n\tMATCH_CMD\022\t\n\005QUERY\020\001\022\r\n\tNEW_ROUND\020\002\022\020"
      "\n\014SINGLE_MATCH\020\003\022\022\n\016MULTIPLE_MATCH\020\004\022\n\n\006"
      "CANCEL\020\005\"+\n\017NewTicketNotify\022\030\n\006ticket\030\001 "
      "\001(\0132\010.sg.Item\"\037\n\017RoundOverNotify\022\014\n\004sign"
      "\030\001 \001(\005\"\243\001\n\023SingleMatchedNotify\022\020\n\010field_"
      "id\030\001 \002(\004\022\r\n\005level\030\002 \002(\005\022\014\n\004nick\030\003 \002(\014\022\020\n"
      "\010portrait\030\004 \002(\005\022\021\n\tsignature\030\005 \002(\014\022\025\n\rra"
      "nking_score\030\006 \001(\005\022!\n\004team\030\007 \003(\0132\023.sg.Sai"
      "lorInDungeonB\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 857);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PVPMatch.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
  ::protobuf_PVE_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_PVPMatch_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* PVPMatchService_MATCH_CMD_descriptor() {
  protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PVPMatch_2eproto::file_level_enum_descriptors[0];
}
bool PVPMatchService_MATCH_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PVPMatchService_MATCH_CMD PVPMatchService::QUERY;
const PVPMatchService_MATCH_CMD PVPMatchService::NEW_ROUND;
const PVPMatchService_MATCH_CMD PVPMatchService::SINGLE_MATCH;
const PVPMatchService_MATCH_CMD PVPMatchService::MULTIPLE_MATCH;
const PVPMatchService_MATCH_CMD PVPMatchService::CANCEL;
const PVPMatchService_MATCH_CMD PVPMatchService::MATCH_CMD_MIN;
const PVPMatchService_MATCH_CMD PVPMatchService::MATCH_CMD_MAX;
const int PVPMatchService::MATCH_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ControllerInformation::InitAsDefaultInstance() {
}
void ControllerInformation::clear_sailors() {
  sailors_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerInformation::kIndexFieldNumber;
const int ControllerInformation::kSailorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerInformation::ControllerInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPMatch_2eproto::scc_info_ControllerInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.ControllerInformation)
}
ControllerInformation::ControllerInformation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sailors_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_ControllerInformation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.ControllerInformation)
}
ControllerInformation::ControllerInformation(const ControllerInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sailors_(from.sailors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:sg.ControllerInformation)
}

void ControllerInformation::SharedCtor() {
  index_ = 0;
}

ControllerInformation::~ControllerInformation() {
  // @@protoc_insertion_point(destructor:sg.ControllerInformation)
  SharedDtor();
}

void ControllerInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ControllerInformation::ArenaDtor(void* object) {
  ControllerInformation* _this = reinterpret_cast< ControllerInformation* >(object);
  (void)_this;
}
void ControllerInformation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ControllerInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerInformation::descriptor() {
  ::protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerInformation& ControllerInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_ControllerInformation.base);
  return *internal_default_instance();
}


void ControllerInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.ControllerInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sailors_.Clear();
  index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.ControllerInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Sailor sailors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sailors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.ControllerInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.ControllerInformation)
  return false;
#undef DO_
}

void ControllerInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.ControllerInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated .sg.Sailor sailors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sailors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.ControllerInformation)
}

::google::protobuf::uint8* ControllerInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.ControllerInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated .sg.Sailor sailors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sailors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sailors(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.ControllerInformation)
  return target;
}

size_t ControllerInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.ControllerInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 index = 1;
  if (has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }
  // repeated .sg.Sailor sailors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sailors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sailors(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.ControllerInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.ControllerInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.ControllerInformation)
    MergeFrom(*source);
  }
}

void ControllerInformation::MergeFrom(const ControllerInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.ControllerInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sailors_.MergeFrom(from.sailors_);
  if (from.has_index()) {
    set_index(from.index());
  }
}

void ControllerInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.ControllerInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerInformation::CopyFrom(const ControllerInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.ControllerInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sailors())) return false;
  return true;
}

void ControllerInformation::Swap(ControllerInformation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ControllerInformation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ControllerInformation::UnsafeArenaSwap(ControllerInformation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ControllerInformation::InternalSwap(ControllerInformation* other) {
  using std::swap;
  CastToBase(&sailors_)->InternalSwap(CastToBase(&other->sailors_));
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerInformation::GetMetadata() const {
  protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserPVPState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPVPState::kRemainTimesFieldNumber;
const int UserPVPState::kComboFieldNumber;
const int UserPVPState::kTimestampFieldNumber;
const int UserPVPState::kRoundStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPVPState::UserPVPState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPMatch_2eproto::scc_info_UserPVPState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserPVPState)
}
UserPVPState::UserPVPState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_UserPVPState.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserPVPState)
}
UserPVPState::UserPVPState(const UserPVPState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remain_times_, &from.remain_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_start_) -
    reinterpret_cast<char*>(&remain_times_)) + sizeof(round_start_));
  // @@protoc_insertion_point(copy_constructor:sg.UserPVPState)
}

void UserPVPState::SharedCtor() {
  ::memset(&remain_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_start_) -
      reinterpret_cast<char*>(&remain_times_)) + sizeof(round_start_));
}

UserPVPState::~UserPVPState() {
  // @@protoc_insertion_point(destructor:sg.UserPVPState)
  SharedDtor();
}

void UserPVPState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserPVPState::ArenaDtor(void* object) {
  UserPVPState* _this = reinterpret_cast< UserPVPState* >(object);
  (void)_this;
}
void UserPVPState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserPVPState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserPVPState::descriptor() {
  ::protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserPVPState& UserPVPState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_UserPVPState.base);
  return *internal_default_instance();
}


void UserPVPState::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserPVPState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&remain_times_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&round_start_) -
        reinterpret_cast<char*>(&remain_times_)) + sizeof(round_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserPVPState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserPVPState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 remain_times = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_remain_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 combo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_combo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 round_start = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_round_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &round_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserPVPState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserPVPState)
  return false;
#undef DO_
}

void UserPVPState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserPVPState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 remain_times = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->remain_times(), output);
  }

  // optional int32 combo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->combo(), output);
  }

  // optional sfixed64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->timestamp(), output);
  }

  // optional sfixed64 round_start = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->round_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserPVPState)
}

::google::protobuf::uint8* UserPVPState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserPVPState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 remain_times = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remain_times(), target);
  }

  // optional int32 combo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->combo(), target);
  }

  // optional sfixed64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->timestamp(), target);
  }

  // optional sfixed64 round_start = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->round_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserPVPState)
  return target;
}

size_t UserPVPState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserPVPState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 remain_times = 1;
    if (has_remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_times());
    }

    // optional int32 combo = 2;
    if (has_combo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combo());
    }

    // optional sfixed64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 round_start = 4;
    if (has_round_start()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPVPState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserPVPState)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPVPState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPVPState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserPVPState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserPVPState)
    MergeFrom(*source);
  }
}

void UserPVPState::MergeFrom(const UserPVPState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserPVPState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      remain_times_ = from.remain_times_;
    }
    if (cached_has_bits & 0x00000002u) {
      combo_ = from.combo_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      round_start_ = from.round_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserPVPState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserPVPState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPVPState::CopyFrom(const UserPVPState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserPVPState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPVPState::IsInitialized() const {
  return true;
}

void UserPVPState::Swap(UserPVPState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserPVPState* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserPVPState::UnsafeArenaSwap(UserPVPState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserPVPState::InternalSwap(UserPVPState* other) {
  using std::swap;
  swap(remain_times_, other->remain_times_);
  swap(combo_, other->combo_);
  swap(timestamp_, other->timestamp_);
  swap(round_start_, other->round_start_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserPVPState::GetMetadata() const {
  protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPMatchService_PVPMatchRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPMatchService_PVPMatchRequest::kCmdFieldNumber;
const int PVPMatchService_PVPMatchRequest::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPMatchService_PVPMatchRequest::PVPMatchService_PVPMatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPMatch_2eproto::scc_info_PVPMatchService_PVPMatchRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPMatchService.PVPMatchRequest)
}
PVPMatchService_PVPMatchRequest::PVPMatchService_PVPMatchRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  team_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_PVPMatchService_PVPMatchRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPMatchService.PVPMatchRequest)
}
PVPMatchService_PVPMatchRequest::PVPMatchService_PVPMatchRequest(const PVPMatchService_PVPMatchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      team_(from.team_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:sg.PVPMatchService.PVPMatchRequest)
}

void PVPMatchService_PVPMatchRequest::SharedCtor() {
  cmd_ = 1;
}

PVPMatchService_PVPMatchRequest::~PVPMatchService_PVPMatchRequest() {
  // @@protoc_insertion_point(destructor:sg.PVPMatchService.PVPMatchRequest)
  SharedDtor();
}

void PVPMatchService_PVPMatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PVPMatchService_PVPMatchRequest::ArenaDtor(void* object) {
  PVPMatchService_PVPMatchRequest* _this = reinterpret_cast< PVPMatchService_PVPMatchRequest* >(object);
  (void)_this;
}
void PVPMatchService_PVPMatchRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPMatchService_PVPMatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPMatchService_PVPMatchRequest::descriptor() {
  ::protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPMatchService_PVPMatchRequest& PVPMatchService_PVPMatchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_PVPMatchService_PVPMatchRequest.base);
  return *internal_default_instance();
}


void PVPMatchService_PVPMatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPMatchService.PVPMatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_.Clear();
  cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPMatchService_PVPMatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPMatchService.PVPMatchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.PVPMatchService.MATCH_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::PVPMatchService_MATCH_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::PVPMatchService_MATCH_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_team())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_team())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPMatchService.PVPMatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPMatchService.PVPMatchRequest)
  return false;
#undef DO_
}

void PVPMatchService_PVPMatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPMatchService.PVPMatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PVPMatchService.MATCH_CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // repeated int32 team = 2;
  for (int i = 0, n = this->team_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->team(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPMatchService.PVPMatchRequest)
}

::google::protobuf::uint8* PVPMatchService_PVPMatchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPMatchService.PVPMatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.PVPMatchService.MATCH_CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // repeated int32 team = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->team_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPMatchService.PVPMatchRequest)
  return target;
}

size_t PVPMatchService_PVPMatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPMatchService.PVPMatchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.PVPMatchService.MATCH_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated int32 team = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->team_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->team_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPMatchService_PVPMatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPMatchService.PVPMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPMatchService_PVPMatchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPMatchService_PVPMatchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPMatchService.PVPMatchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPMatchService.PVPMatchRequest)
    MergeFrom(*source);
  }
}

void PVPMatchService_PVPMatchRequest::MergeFrom(const PVPMatchService_PVPMatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPMatchService.PVPMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_.MergeFrom(from.team_);
  if (from.has_cmd()) {
    set_cmd(from.cmd());
  }
}

void PVPMatchService_PVPMatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPMatchService.PVPMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPMatchService_PVPMatchRequest::CopyFrom(const PVPMatchService_PVPMatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPMatchService.PVPMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPMatchService_PVPMatchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PVPMatchService_PVPMatchRequest::Swap(PVPMatchService_PVPMatchRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPMatchService_PVPMatchRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPMatchService_PVPMatchRequest::UnsafeArenaSwap(PVPMatchService_PVPMatchRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPMatchService_PVPMatchRequest::InternalSwap(PVPMatchService_PVPMatchRequest* other) {
  using std::swap;
  team_.InternalSwap(&other->team_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPMatchService_PVPMatchRequest::GetMetadata() const {
  protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPMatchService_PVPMatchResponse::InitAsDefaultInstance() {
  ::sg::_PVPMatchService_PVPMatchResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::sg::UserPVPState*>(
      ::sg::UserPVPState::internal_default_instance());
}
void PVPMatchService_PVPMatchResponse::clear_self_team() {
  self_team_.Clear();
}
void PVPMatchService_PVPMatchResponse::unsafe_arena_set_allocated_state(
    ::sg::UserPVPState* state) {
  if (GetArenaNoVirtual() == NULL) {
    delete state_;
  }
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVPMatchService.PVPMatchResponse.state)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPMatchService_PVPMatchResponse::kResultFieldNumber;
const int PVPMatchService_PVPMatchResponse::kSelfTeamFieldNumber;
const int PVPMatchService_PVPMatchResponse::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPMatchService_PVPMatchResponse::PVPMatchService_PVPMatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPMatch_2eproto::scc_info_PVPMatchService_PVPMatchResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPMatchService.PVPMatchResponse)
}
PVPMatchService_PVPMatchResponse::PVPMatchService_PVPMatchResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  self_team_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_PVPMatchService_PVPMatchResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPMatchService.PVPMatchResponse)
}
PVPMatchService_PVPMatchResponse::PVPMatchService_PVPMatchResponse(const PVPMatchService_PVPMatchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      self_team_(from.self_team_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::sg::UserPVPState(*from.state_);
  } else {
    state_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.PVPMatchService.PVPMatchResponse)
}

void PVPMatchService_PVPMatchResponse::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&state_)) + sizeof(result_));
}

PVPMatchService_PVPMatchResponse::~PVPMatchService_PVPMatchResponse() {
  // @@protoc_insertion_point(destructor:sg.PVPMatchService.PVPMatchResponse)
  SharedDtor();
}

void PVPMatchService_PVPMatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete state_;
}

void PVPMatchService_PVPMatchResponse::ArenaDtor(void* object) {
  PVPMatchService_PVPMatchResponse* _this = reinterpret_cast< PVPMatchService_PVPMatchResponse* >(object);
  (void)_this;
}
void PVPMatchService_PVPMatchResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPMatchService_PVPMatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPMatchService_PVPMatchResponse::descriptor() {
  ::protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPMatchService_PVPMatchResponse& PVPMatchService_PVPMatchResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_PVPMatchService_PVPMatchResponse.base);
  return *internal_default_instance();
}


void PVPMatchService_PVPMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPMatchService.PVPMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  self_team_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPMatchService_PVPMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPMatchService.PVPMatchResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SailorInDungeon self_team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_self_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserPVPState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPMatchService.PVPMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPMatchService.PVPMatchResponse)
  return false;
#undef DO_
}

void PVPMatchService_PVPMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPMatchService.PVPMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.SailorInDungeon self_team = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->self_team_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->self_team(static_cast<int>(i)),
      output);
  }

  // optional .sg.UserPVPState state = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPMatchService.PVPMatchResponse)
}

::google::protobuf::uint8* PVPMatchService_PVPMatchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPMatchService.PVPMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.SailorInDungeon self_team = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->self_team_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->self_team(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.UserPVPState state = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_state(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPMatchService.PVPMatchResponse)
  return target;
}

size_t PVPMatchService_PVPMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPMatchService.PVPMatchResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.SailorInDungeon self_team = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->self_team_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->self_team(static_cast<int>(i)));
    }
  }

  // optional .sg.UserPVPState state = 3;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPMatchService_PVPMatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPMatchService.PVPMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPMatchService_PVPMatchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPMatchService_PVPMatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPMatchService.PVPMatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPMatchService.PVPMatchResponse)
    MergeFrom(*source);
  }
}

void PVPMatchService_PVPMatchResponse::MergeFrom(const PVPMatchService_PVPMatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPMatchService.PVPMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  self_team_.MergeFrom(from.self_team_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::sg::UserPVPState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPMatchService_PVPMatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPMatchService.PVPMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPMatchService_PVPMatchResponse::CopyFrom(const PVPMatchService_PVPMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPMatchService.PVPMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPMatchService_PVPMatchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->self_team())) return false;
  return true;
}

void PVPMatchService_PVPMatchResponse::Swap(PVPMatchService_PVPMatchResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPMatchService_PVPMatchResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPMatchService_PVPMatchResponse::UnsafeArenaSwap(PVPMatchService_PVPMatchResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPMatchService_PVPMatchResponse::InternalSwap(PVPMatchService_PVPMatchResponse* other) {
  using std::swap;
  CastToBase(&self_team_)->InternalSwap(CastToBase(&other->self_team_));
  swap(state_, other->state_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPMatchService_PVPMatchResponse::GetMetadata() const {
  protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPMatchService::InitAsDefaultInstance() {
  ::sg::_PVPMatchService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::PVPMatchService_PVPMatchRequest*>(
      ::sg::PVPMatchService_PVPMatchRequest::internal_default_instance());
  ::sg::_PVPMatchService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::PVPMatchService_PVPMatchResponse*>(
      ::sg::PVPMatchService_PVPMatchResponse::internal_default_instance());
}
void PVPMatchService::unsafe_arena_set_allocated_req(
    ::sg::PVPMatchService_PVPMatchRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVPMatchService.req)
}
void PVPMatchService::unsafe_arena_set_allocated_resp(
    ::sg::PVPMatchService_PVPMatchResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.PVPMatchService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPMatchService::kReqFieldNumber;
const int PVPMatchService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPMatchService::PVPMatchService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPMatch_2eproto::scc_info_PVPMatchService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.PVPMatchService)
}
PVPMatchService::PVPMatchService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_PVPMatchService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.PVPMatchService)
}
PVPMatchService::PVPMatchService(const PVPMatchService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::PVPMatchService_PVPMatchRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::PVPMatchService_PVPMatchResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.PVPMatchService)
}

void PVPMatchService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

PVPMatchService::~PVPMatchService() {
  // @@protoc_insertion_point(destructor:sg.PVPMatchService)
  SharedDtor();
}

void PVPMatchService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void PVPMatchService::ArenaDtor(void* object) {
  PVPMatchService* _this = reinterpret_cast< PVPMatchService* >(object);
  (void)_this;
}
void PVPMatchService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PVPMatchService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPMatchService::descriptor() {
  ::protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPMatchService& PVPMatchService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_PVPMatchService.base);
  return *internal_default_instance();
}


void PVPMatchService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.PVPMatchService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPMatchService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.PVPMatchService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.PVPMatchService.PVPMatchRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.PVPMatchService.PVPMatchResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.PVPMatchService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.PVPMatchService)
  return false;
#undef DO_
}

void PVPMatchService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.PVPMatchService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.PVPMatchService.PVPMatchRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.PVPMatchService.PVPMatchResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.PVPMatchService)
}

::google::protobuf::uint8* PVPMatchService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.PVPMatchService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.PVPMatchService.PVPMatchRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.PVPMatchService.PVPMatchResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.PVPMatchService)
  return target;
}

size_t PVPMatchService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.PVPMatchService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.PVPMatchService.PVPMatchRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.PVPMatchService.PVPMatchResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPMatchService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.PVPMatchService)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPMatchService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPMatchService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.PVPMatchService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.PVPMatchService)
    MergeFrom(*source);
  }
}

void PVPMatchService::MergeFrom(const PVPMatchService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.PVPMatchService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::PVPMatchService_PVPMatchRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::PVPMatchService_PVPMatchResponse::MergeFrom(from.resp());
    }
  }
}

void PVPMatchService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.PVPMatchService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPMatchService::CopyFrom(const PVPMatchService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.PVPMatchService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPMatchService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void PVPMatchService::Swap(PVPMatchService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PVPMatchService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PVPMatchService::UnsafeArenaSwap(PVPMatchService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PVPMatchService::InternalSwap(PVPMatchService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPMatchService::GetMetadata() const {
  protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewTicketNotify::InitAsDefaultInstance() {
  ::sg::_NewTicketNotify_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::sg::Item*>(
      ::sg::Item::internal_default_instance());
}
void NewTicketNotify::unsafe_arena_set_allocated_ticket(
    ::sg::Item* ticket) {
  if (GetArenaNoVirtual() == NULL) {
    delete ticket_;
  }
  ticket_ = ticket;
  if (ticket) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.NewTicketNotify.ticket)
}
void NewTicketNotify::clear_ticket() {
  if (ticket_ != NULL) ticket_->Clear();
  clear_has_ticket();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewTicketNotify::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewTicketNotify::NewTicketNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPMatch_2eproto::scc_info_NewTicketNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.NewTicketNotify)
}
NewTicketNotify::NewTicketNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_NewTicketNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.NewTicketNotify)
}
NewTicketNotify::NewTicketNotify(const NewTicketNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ticket()) {
    ticket_ = new ::sg::Item(*from.ticket_);
  } else {
    ticket_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.NewTicketNotify)
}

void NewTicketNotify::SharedCtor() {
  ticket_ = NULL;
}

NewTicketNotify::~NewTicketNotify() {
  // @@protoc_insertion_point(destructor:sg.NewTicketNotify)
  SharedDtor();
}

void NewTicketNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete ticket_;
}

void NewTicketNotify::ArenaDtor(void* object) {
  NewTicketNotify* _this = reinterpret_cast< NewTicketNotify* >(object);
  (void)_this;
}
void NewTicketNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NewTicketNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewTicketNotify::descriptor() {
  ::protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewTicketNotify& NewTicketNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_NewTicketNotify.base);
  return *internal_default_instance();
}


void NewTicketNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.NewTicketNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ticket_ != NULL);
    ticket_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewTicketNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.NewTicketNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.Item ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.NewTicketNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.NewTicketNotify)
  return false;
#undef DO_
}

void NewTicketNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.NewTicketNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.Item ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.NewTicketNotify)
}

::google::protobuf::uint8* NewTicketNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.NewTicketNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.Item ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ticket(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.NewTicketNotify)
  return target;
}

size_t NewTicketNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.NewTicketNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .sg.Item ticket = 1;
  if (has_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewTicketNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.NewTicketNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const NewTicketNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewTicketNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.NewTicketNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.NewTicketNotify)
    MergeFrom(*source);
  }
}

void NewTicketNotify::MergeFrom(const NewTicketNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.NewTicketNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ticket()) {
    mutable_ticket()->::sg::Item::MergeFrom(from.ticket());
  }
}

void NewTicketNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.NewTicketNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewTicketNotify::CopyFrom(const NewTicketNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.NewTicketNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTicketNotify::IsInitialized() const {
  if (has_ticket()) {
    if (!this->ticket_->IsInitialized()) return false;
  }
  return true;
}

void NewTicketNotify::Swap(NewTicketNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NewTicketNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NewTicketNotify::UnsafeArenaSwap(NewTicketNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NewTicketNotify::InternalSwap(NewTicketNotify* other) {
  using std::swap;
  swap(ticket_, other->ticket_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewTicketNotify::GetMetadata() const {
  protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoundOverNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundOverNotify::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundOverNotify::RoundOverNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPMatch_2eproto::scc_info_RoundOverNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.RoundOverNotify)
}
RoundOverNotify::RoundOverNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_RoundOverNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.RoundOverNotify)
}
RoundOverNotify::RoundOverNotify(const RoundOverNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_ = from.sign_;
  // @@protoc_insertion_point(copy_constructor:sg.RoundOverNotify)
}

void RoundOverNotify::SharedCtor() {
  sign_ = 0;
}

RoundOverNotify::~RoundOverNotify() {
  // @@protoc_insertion_point(destructor:sg.RoundOverNotify)
  SharedDtor();
}

void RoundOverNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void RoundOverNotify::ArenaDtor(void* object) {
  RoundOverNotify* _this = reinterpret_cast< RoundOverNotify* >(object);
  (void)_this;
}
void RoundOverNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RoundOverNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoundOverNotify::descriptor() {
  ::protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoundOverNotify& RoundOverNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_RoundOverNotify.base);
  return *internal_default_instance();
}


void RoundOverNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.RoundOverNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sign_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoundOverNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.RoundOverNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sign = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sign();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.RoundOverNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.RoundOverNotify)
  return false;
#undef DO_
}

void RoundOverNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.RoundOverNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sign = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sign(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.RoundOverNotify)
}

::google::protobuf::uint8* RoundOverNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.RoundOverNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sign = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sign(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.RoundOverNotify)
  return target;
}

size_t RoundOverNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.RoundOverNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 sign = 1;
  if (has_sign()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sign());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundOverNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.RoundOverNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundOverNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoundOverNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.RoundOverNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.RoundOverNotify)
    MergeFrom(*source);
  }
}

void RoundOverNotify::MergeFrom(const RoundOverNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.RoundOverNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sign()) {
    set_sign(from.sign());
  }
}

void RoundOverNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.RoundOverNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundOverNotify::CopyFrom(const RoundOverNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.RoundOverNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundOverNotify::IsInitialized() const {
  return true;
}

void RoundOverNotify::Swap(RoundOverNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RoundOverNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RoundOverNotify::UnsafeArenaSwap(RoundOverNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RoundOverNotify::InternalSwap(RoundOverNotify* other) {
  using std::swap;
  swap(sign_, other->sign_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoundOverNotify::GetMetadata() const {
  protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleMatchedNotify::InitAsDefaultInstance() {
}
void SingleMatchedNotify::clear_team() {
  team_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleMatchedNotify::kFieldIdFieldNumber;
const int SingleMatchedNotify::kLevelFieldNumber;
const int SingleMatchedNotify::kNickFieldNumber;
const int SingleMatchedNotify::kPortraitFieldNumber;
const int SingleMatchedNotify::kSignatureFieldNumber;
const int SingleMatchedNotify::kRankingScoreFieldNumber;
const int SingleMatchedNotify::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleMatchedNotify::SingleMatchedNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PVPMatch_2eproto::scc_info_SingleMatchedNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.SingleMatchedNotify)
}
SingleMatchedNotify::SingleMatchedNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  team_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_SingleMatchedNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.SingleMatchedNotify)
}
SingleMatchedNotify::SingleMatchedNotify(const SingleMatchedNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      team_(from.team_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature(),
      GetArenaNoVirtual());
  }
  ::memcpy(&field_id_, &from.field_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ranking_score_) -
    reinterpret_cast<char*>(&field_id_)) + sizeof(ranking_score_));
  // @@protoc_insertion_point(copy_constructor:sg.SingleMatchedNotify)
}

void SingleMatchedNotify::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&field_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ranking_score_) -
      reinterpret_cast<char*>(&field_id_)) + sizeof(ranking_score_));
}

SingleMatchedNotify::~SingleMatchedNotify() {
  // @@protoc_insertion_point(destructor:sg.SingleMatchedNotify)
  SharedDtor();
}

void SingleMatchedNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleMatchedNotify::ArenaDtor(void* object) {
  SingleMatchedNotify* _this = reinterpret_cast< SingleMatchedNotify* >(object);
  (void)_this;
}
void SingleMatchedNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SingleMatchedNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SingleMatchedNotify::descriptor() {
  ::protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleMatchedNotify& SingleMatchedNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PVPMatch_2eproto::scc_info_SingleMatchedNotify.base);
  return *internal_default_instance();
}


void SingleMatchedNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.SingleMatchedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&field_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ranking_score_) -
        reinterpret_cast<char*>(&field_id_)) + sizeof(ranking_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SingleMatchedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.SingleMatchedNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 field_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_field_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &field_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 portrait = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_portrait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portrait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ranking_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ranking_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.SailorInDungeon team = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.SingleMatchedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.SingleMatchedNotify)
  return false;
#undef DO_
}

void SingleMatchedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.SingleMatchedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 field_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->field_id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nick(), output);
  }

  // required int32 portrait = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->portrait(), output);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->signature(), output);
  }

  // optional int32 ranking_score = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ranking_score(), output);
  }

  // repeated .sg.SailorInDungeon team = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->team(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.SingleMatchedNotify)
}

::google::protobuf::uint8* SingleMatchedNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.SingleMatchedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 field_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->field_id(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick(), target);
  }

  // required int32 portrait = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->portrait(), target);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->signature(), target);
  }

  // optional int32 ranking_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ranking_score(), target);
  }

  // repeated .sg.SailorInDungeon team = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->team(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.SingleMatchedNotify)
  return target;
}

size_t SingleMatchedNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.SingleMatchedNotify)
  size_t total_size = 0;

  if (has_nick()) {
    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (has_signature()) {
    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  if (has_field_id()) {
    // required uint64 field_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->field_id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_portrait()) {
    // required int32 portrait = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrait());
  }

  return total_size;
}
size_t SingleMatchedNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.SingleMatchedNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());

    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());

    // required uint64 field_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->field_id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 portrait = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portrait());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .sg.SailorInDungeon team = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->team_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team(static_cast<int>(i)));
    }
  }

  // optional int32 ranking_score = 6;
  if (has_ranking_score()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ranking_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleMatchedNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.SingleMatchedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleMatchedNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleMatchedNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.SingleMatchedNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.SingleMatchedNotify)
    MergeFrom(*source);
  }
}

void SingleMatchedNotify::MergeFrom(const SingleMatchedNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.SingleMatchedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_.MergeFrom(from.team_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000002u) {
      set_signature(from.signature());
    }
    if (cached_has_bits & 0x00000004u) {
      field_id_ = from.field_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      portrait_ = from.portrait_;
    }
    if (cached_has_bits & 0x00000020u) {
      ranking_score_ = from.ranking_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SingleMatchedNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.SingleMatchedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleMatchedNotify::CopyFrom(const SingleMatchedNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.SingleMatchedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleMatchedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->team())) return false;
  return true;
}

void SingleMatchedNotify::Swap(SingleMatchedNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SingleMatchedNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SingleMatchedNotify::UnsafeArenaSwap(SingleMatchedNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SingleMatchedNotify::InternalSwap(SingleMatchedNotify* other) {
  using std::swap;
  CastToBase(&team_)->InternalSwap(CastToBase(&other->team_));
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_id_, other->field_id_);
  swap(level_, other->level_);
  swap(portrait_, other->portrait_);
  swap(ranking_score_, other->ranking_score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SingleMatchedNotify::GetMetadata() const {
  protobuf_PVPMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PVPMatch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::ControllerInformation* Arena::CreateMaybeMessage< ::sg::ControllerInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::ControllerInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserPVPState* Arena::CreateMaybeMessage< ::sg::UserPVPState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserPVPState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPMatchService_PVPMatchRequest* Arena::CreateMaybeMessage< ::sg::PVPMatchService_PVPMatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPMatchService_PVPMatchRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPMatchService_PVPMatchResponse* Arena::CreateMaybeMessage< ::sg::PVPMatchService_PVPMatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPMatchService_PVPMatchResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::PVPMatchService* Arena::CreateMaybeMessage< ::sg::PVPMatchService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::PVPMatchService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::NewTicketNotify* Arena::CreateMaybeMessage< ::sg::NewTicketNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::NewTicketNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::RoundOverNotify* Arena::CreateMaybeMessage< ::sg::RoundOverNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::RoundOverNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::SingleMatchedNotify* Arena::CreateMaybeMessage< ::sg::SingleMatchedNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::SingleMatchedNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
