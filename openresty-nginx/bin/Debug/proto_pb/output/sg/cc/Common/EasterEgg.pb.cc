// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EasterEgg.proto

#include "EasterEgg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pb_pair_int64_int;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Reward;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_EasterEgg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_EasterEgg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EasterEgg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_EasterEgg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EasterEggService_EasterEggRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_EasterEgg_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EasterEggService_EasterEggResponse;
}  // namespace protobuf_EasterEgg_2eproto
namespace sg {
class EasterEggDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EasterEgg>
      _instance;
} _EasterEgg_default_instance_;
class EasterEggService_EasterEggRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EasterEggService_EasterEggRequest>
      _instance;
} _EasterEggService_EasterEggRequest_default_instance_;
class EasterEggService_EasterEggResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EasterEggService_EasterEggResponse>
      _instance;
} _EasterEggService_EasterEggResponse_default_instance_;
class EasterEggServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EasterEggService>
      _instance;
} _EasterEggService_default_instance_;
}  // namespace sg
namespace protobuf_EasterEgg_2eproto {
static void InitDefaultsEasterEgg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_EasterEgg_default_instance_;
    new (ptr) ::sg::EasterEgg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::EasterEgg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EasterEgg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEasterEgg}, {}};

static void InitDefaultsEasterEggService_EasterEggRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_EasterEggService_EasterEggRequest_default_instance_;
    new (ptr) ::sg::EasterEggService_EasterEggRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::EasterEggService_EasterEggRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EasterEggService_EasterEggRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEasterEggService_EasterEggRequest}, {}};

static void InitDefaultsEasterEggService_EasterEggResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_EasterEggService_EasterEggResponse_default_instance_;
    new (ptr) ::sg::EasterEggService_EasterEggResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::EasterEggService_EasterEggResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_EasterEggService_EasterEggResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsEasterEggService_EasterEggResponse}, {
      &protobuf_EasterEgg_2eproto::scc_info_EasterEgg.base,
      &protobuf_BaseStruct_2eproto::scc_info_pb_pair_int64_int.base,
      &protobuf_BaseStruct_2eproto::scc_info_Reward.base,}};

static void InitDefaultsEasterEggService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_EasterEggService_default_instance_;
    new (ptr) ::sg::EasterEggService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::EasterEggService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EasterEggService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEasterEggService}, {
      &protobuf_EasterEgg_2eproto::scc_info_EasterEggService_EasterEggRequest.base,
      &protobuf_EasterEgg_2eproto::scc_info_EasterEggService_EasterEggResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EasterEgg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EasterEggService_EasterEggRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EasterEggService_EasterEggResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EasterEggService.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEgg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEgg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEgg, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEgg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEgg, timestamp_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggRequest, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggRequest, choice_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggResponse, easter_egg_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggResponse, saved_customer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggResponse, get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService_EasterEggResponse, lose_),
  3,
  ~0u,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::EasterEggService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::sg::EasterEgg)},
  { 11, 19, sizeof(::sg::EasterEggService_EasterEggRequest)},
  { 22, 32, sizeof(::sg::EasterEggService_EasterEggResponse)},
  { 37, 44, sizeof(::sg::EasterEggService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_EasterEgg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_EasterEggService_EasterEggRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_EasterEggService_EasterEggResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_EasterEggService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "EasterEgg.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017EasterEgg.proto\022\002sg\032\020BaseStruct.proto\""
      ";\n\tEasterEgg\022\017\n\007entryid\030\001 \001(\004\022\n\n\002id\030\002 \001("
      "\005\022\021\n\ttimestamp\030\003 \001(\020\"\244\003\n\020EasterEggServic"
      "e\0222\n\003req\030\001 \001(\0132%.sg.EasterEggService.Eas"
      "terEggRequest\0224\n\004resp\030\002 \001(\0132&.sg.EasterE"
      "ggService.EasterEggResponse\032Z\n\020EasterEgg"
      "Request\022%\n\003cmd\030\001 \002(\0162\030.sg.EasterEggServi"
      "ce.CMD\022\017\n\007entryid\030\002 \001(\004\022\016\n\006choice\030\003 \001(\005\032"
      "\255\001\n\021EasterEggResponse\022\016\n\006result\030\001 \002(\005\022&\n"
      "\017easter_egg_list\030\003 \003(\0132\r.sg.EasterEgg\022-\n"
      "\016saved_customer\030\004 \001(\0132\025.sg.pb_pair_int64"
      "_int\022\027\n\003get\030\005 \001(\0132\n.sg.Reward\022\030\n\004lose\030\006 "
      "\001(\0132\n.sg.Reward\"\032\n\003CMD\022\t\n\005QUERY\020\001\022\010\n\004OPE"
      "N\020\002B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EasterEgg.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_EasterEgg_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* EasterEggService_CMD_descriptor() {
  protobuf_EasterEgg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EasterEgg_2eproto::file_level_enum_descriptors[0];
}
bool EasterEggService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EasterEggService_CMD EasterEggService::QUERY;
const EasterEggService_CMD EasterEggService::OPEN;
const EasterEggService_CMD EasterEggService::CMD_MIN;
const EasterEggService_CMD EasterEggService::CMD_MAX;
const int EasterEggService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EasterEgg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EasterEgg::kEntryidFieldNumber;
const int EasterEgg::kIdFieldNumber;
const int EasterEgg::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EasterEgg::EasterEgg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_EasterEgg_2eproto::scc_info_EasterEgg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.EasterEgg)
}
EasterEgg::EasterEgg(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_EasterEgg_2eproto::scc_info_EasterEgg.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.EasterEgg)
}
EasterEgg::EasterEgg(const EasterEgg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:sg.EasterEgg)
}

void EasterEgg::SharedCtor() {
  ::memset(&entryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&entryid_)) + sizeof(id_));
}

EasterEgg::~EasterEgg() {
  // @@protoc_insertion_point(destructor:sg.EasterEgg)
  SharedDtor();
}

void EasterEgg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void EasterEgg::ArenaDtor(void* object) {
  EasterEgg* _this = reinterpret_cast< EasterEgg* >(object);
  (void)_this;
}
void EasterEgg::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EasterEgg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EasterEgg::descriptor() {
  ::protobuf_EasterEgg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EasterEgg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EasterEgg& EasterEgg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_EasterEgg_2eproto::scc_info_EasterEgg.base);
  return *internal_default_instance();
}


void EasterEgg::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.EasterEgg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EasterEgg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.EasterEgg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 entryid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.EasterEgg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.EasterEgg)
  return false;
#undef DO_
}

void EasterEgg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.EasterEgg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 entryid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entryid(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional sfixed64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.EasterEgg)
}

::google::protobuf::uint8* EasterEgg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.EasterEgg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 entryid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entryid(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional sfixed64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.EasterEgg)
  return target;
}

size_t EasterEgg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.EasterEgg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 entryid = 1;
    if (has_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entryid());
    }

    // optional sfixed64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EasterEgg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.EasterEgg)
  GOOGLE_DCHECK_NE(&from, this);
  const EasterEgg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EasterEgg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.EasterEgg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.EasterEgg)
    MergeFrom(*source);
  }
}

void EasterEgg::MergeFrom(const EasterEgg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.EasterEgg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EasterEgg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.EasterEgg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EasterEgg::CopyFrom(const EasterEgg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.EasterEgg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasterEgg::IsInitialized() const {
  return true;
}

void EasterEgg::Swap(EasterEgg* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EasterEgg* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EasterEgg::UnsafeArenaSwap(EasterEgg* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EasterEgg::InternalSwap(EasterEgg* other) {
  using std::swap;
  swap(entryid_, other->entryid_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EasterEgg::GetMetadata() const {
  protobuf_EasterEgg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EasterEgg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EasterEggService_EasterEggRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EasterEggService_EasterEggRequest::kCmdFieldNumber;
const int EasterEggService_EasterEggRequest::kEntryidFieldNumber;
const int EasterEggService_EasterEggRequest::kChoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EasterEggService_EasterEggRequest::EasterEggService_EasterEggRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_EasterEgg_2eproto::scc_info_EasterEggService_EasterEggRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.EasterEggService.EasterEggRequest)
}
EasterEggService_EasterEggRequest::EasterEggService_EasterEggRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_EasterEgg_2eproto::scc_info_EasterEggService_EasterEggRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.EasterEggService.EasterEggRequest)
}
EasterEggService_EasterEggRequest::EasterEggService_EasterEggRequest(const EasterEggService_EasterEggRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:sg.EasterEggService.EasterEggRequest)
}

void EasterEggService_EasterEggRequest::SharedCtor() {
  ::memset(&entryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&choice_) -
      reinterpret_cast<char*>(&entryid_)) + sizeof(choice_));
  cmd_ = 1;
}

EasterEggService_EasterEggRequest::~EasterEggService_EasterEggRequest() {
  // @@protoc_insertion_point(destructor:sg.EasterEggService.EasterEggRequest)
  SharedDtor();
}

void EasterEggService_EasterEggRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void EasterEggService_EasterEggRequest::ArenaDtor(void* object) {
  EasterEggService_EasterEggRequest* _this = reinterpret_cast< EasterEggService_EasterEggRequest* >(object);
  (void)_this;
}
void EasterEggService_EasterEggRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EasterEggService_EasterEggRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EasterEggService_EasterEggRequest::descriptor() {
  ::protobuf_EasterEgg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EasterEgg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EasterEggService_EasterEggRequest& EasterEggService_EasterEggRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_EasterEgg_2eproto::scc_info_EasterEggService_EasterEggRequest.base);
  return *internal_default_instance();
}


void EasterEggService_EasterEggRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.EasterEggService.EasterEggRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&choice_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(choice_));
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EasterEggService_EasterEggRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.EasterEggService.EasterEggRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.EasterEggService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::EasterEggService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::EasterEggService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 entryid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 choice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_choice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.EasterEggService.EasterEggRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.EasterEggService.EasterEggRequest)
  return false;
#undef DO_
}

void EasterEggService_EasterEggRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.EasterEggService.EasterEggRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.EasterEggService.CMD cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint64 entryid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->entryid(), output);
  }

  // optional int32 choice = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->choice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.EasterEggService.EasterEggRequest)
}

::google::protobuf::uint8* EasterEggService_EasterEggRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.EasterEggService.EasterEggRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.EasterEggService.CMD cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint64 entryid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->entryid(), target);
  }

  // optional int32 choice = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->choice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.EasterEggService.EasterEggRequest)
  return target;
}

size_t EasterEggService_EasterEggRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.EasterEggService.EasterEggRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.EasterEggService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 entryid = 2;
    if (has_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entryid());
    }

    // optional int32 choice = 3;
    if (has_choice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choice());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EasterEggService_EasterEggRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.EasterEggService.EasterEggRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EasterEggService_EasterEggRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EasterEggService_EasterEggRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.EasterEggService.EasterEggRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.EasterEggService.EasterEggRequest)
    MergeFrom(*source);
  }
}

void EasterEggService_EasterEggRequest::MergeFrom(const EasterEggService_EasterEggRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.EasterEggService.EasterEggRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000002u) {
      choice_ = from.choice_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EasterEggService_EasterEggRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.EasterEggService.EasterEggRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EasterEggService_EasterEggRequest::CopyFrom(const EasterEggService_EasterEggRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.EasterEggService.EasterEggRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasterEggService_EasterEggRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void EasterEggService_EasterEggRequest::Swap(EasterEggService_EasterEggRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EasterEggService_EasterEggRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EasterEggService_EasterEggRequest::UnsafeArenaSwap(EasterEggService_EasterEggRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EasterEggService_EasterEggRequest::InternalSwap(EasterEggService_EasterEggRequest* other) {
  using std::swap;
  swap(entryid_, other->entryid_);
  swap(choice_, other->choice_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EasterEggService_EasterEggRequest::GetMetadata() const {
  protobuf_EasterEgg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EasterEgg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EasterEggService_EasterEggResponse::InitAsDefaultInstance() {
  ::sg::_EasterEggService_EasterEggResponse_default_instance_._instance.get_mutable()->saved_customer_ = const_cast< ::sg::pb_pair_int64_int*>(
      ::sg::pb_pair_int64_int::internal_default_instance());
  ::sg::_EasterEggService_EasterEggResponse_default_instance_._instance.get_mutable()->get_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
  ::sg::_EasterEggService_EasterEggResponse_default_instance_._instance.get_mutable()->lose_ = const_cast< ::sg::Reward*>(
      ::sg::Reward::internal_default_instance());
}
void EasterEggService_EasterEggResponse::unsafe_arena_set_allocated_saved_customer(
    ::sg::pb_pair_int64_int* saved_customer) {
  if (GetArenaNoVirtual() == NULL) {
    delete saved_customer_;
  }
  saved_customer_ = saved_customer;
  if (saved_customer) {
    set_has_saved_customer();
  } else {
    clear_has_saved_customer();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.EasterEggService.EasterEggResponse.saved_customer)
}
void EasterEggService_EasterEggResponse::clear_saved_customer() {
  if (saved_customer_ != NULL) saved_customer_->Clear();
  clear_has_saved_customer();
}
void EasterEggService_EasterEggResponse::unsafe_arena_set_allocated_get(
    ::sg::Reward* get) {
  if (GetArenaNoVirtual() == NULL) {
    delete get_;
  }
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.EasterEggService.EasterEggResponse.get)
}
void EasterEggService_EasterEggResponse::clear_get() {
  if (get_ != NULL) get_->Clear();
  clear_has_get();
}
void EasterEggService_EasterEggResponse::unsafe_arena_set_allocated_lose(
    ::sg::Reward* lose) {
  if (GetArenaNoVirtual() == NULL) {
    delete lose_;
  }
  lose_ = lose;
  if (lose) {
    set_has_lose();
  } else {
    clear_has_lose();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.EasterEggService.EasterEggResponse.lose)
}
void EasterEggService_EasterEggResponse::clear_lose() {
  if (lose_ != NULL) lose_->Clear();
  clear_has_lose();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EasterEggService_EasterEggResponse::kResultFieldNumber;
const int EasterEggService_EasterEggResponse::kEasterEggListFieldNumber;
const int EasterEggService_EasterEggResponse::kSavedCustomerFieldNumber;
const int EasterEggService_EasterEggResponse::kGetFieldNumber;
const int EasterEggService_EasterEggResponse::kLoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EasterEggService_EasterEggResponse::EasterEggService_EasterEggResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_EasterEgg_2eproto::scc_info_EasterEggService_EasterEggResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.EasterEggService.EasterEggResponse)
}
EasterEggService_EasterEggResponse::EasterEggService_EasterEggResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  easter_egg_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_EasterEgg_2eproto::scc_info_EasterEggService_EasterEggResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.EasterEggService.EasterEggResponse)
}
EasterEggService_EasterEggResponse::EasterEggService_EasterEggResponse(const EasterEggService_EasterEggResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      easter_egg_list_(from.easter_egg_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_saved_customer()) {
    saved_customer_ = new ::sg::pb_pair_int64_int(*from.saved_customer_);
  } else {
    saved_customer_ = NULL;
  }
  if (from.has_get()) {
    get_ = new ::sg::Reward(*from.get_);
  } else {
    get_ = NULL;
  }
  if (from.has_lose()) {
    lose_ = new ::sg::Reward(*from.lose_);
  } else {
    lose_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.EasterEggService.EasterEggResponse)
}

void EasterEggService_EasterEggResponse::SharedCtor() {
  ::memset(&saved_customer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&saved_customer_)) + sizeof(result_));
}

EasterEggService_EasterEggResponse::~EasterEggService_EasterEggResponse() {
  // @@protoc_insertion_point(destructor:sg.EasterEggService.EasterEggResponse)
  SharedDtor();
}

void EasterEggService_EasterEggResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete saved_customer_;
  if (this != internal_default_instance()) delete get_;
  if (this != internal_default_instance()) delete lose_;
}

void EasterEggService_EasterEggResponse::ArenaDtor(void* object) {
  EasterEggService_EasterEggResponse* _this = reinterpret_cast< EasterEggService_EasterEggResponse* >(object);
  (void)_this;
}
void EasterEggService_EasterEggResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EasterEggService_EasterEggResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EasterEggService_EasterEggResponse::descriptor() {
  ::protobuf_EasterEgg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EasterEgg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EasterEggService_EasterEggResponse& EasterEggService_EasterEggResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_EasterEgg_2eproto::scc_info_EasterEggService_EasterEggResponse.base);
  return *internal_default_instance();
}


void EasterEggService_EasterEggResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.EasterEggService.EasterEggResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  easter_egg_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(saved_customer_ != NULL);
      saved_customer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_ != NULL);
      get_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lose_ != NULL);
      lose_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EasterEggService_EasterEggResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.EasterEggService.EasterEggResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.EasterEgg easter_egg_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_easter_egg_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.pb_pair_int64_int saved_customer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_saved_customer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward get = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.Reward lose = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.EasterEggService.EasterEggResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.EasterEggService.EasterEggResponse)
  return false;
#undef DO_
}

void EasterEggService_EasterEggResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.EasterEggService.EasterEggResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.EasterEgg easter_egg_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->easter_egg_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->easter_egg_list(static_cast<int>(i)),
      output);
  }

  // optional .sg.pb_pair_int64_int saved_customer = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_saved_customer(), output);
  }

  // optional .sg.Reward get = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_get(), output);
  }

  // optional .sg.Reward lose = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_lose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.EasterEggService.EasterEggResponse)
}

::google::protobuf::uint8* EasterEggService_EasterEggResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.EasterEggService.EasterEggResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.EasterEgg easter_egg_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->easter_egg_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->easter_egg_list(static_cast<int>(i)), deterministic, target);
  }

  // optional .sg.pb_pair_int64_int saved_customer = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_saved_customer(), deterministic, target);
  }

  // optional .sg.Reward get = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_get(), deterministic, target);
  }

  // optional .sg.Reward lose = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_lose(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.EasterEggService.EasterEggResponse)
  return target;
}

size_t EasterEggService_EasterEggResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.EasterEggService.EasterEggResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.EasterEgg easter_egg_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->easter_egg_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->easter_egg_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .sg.pb_pair_int64_int saved_customer = 4;
    if (has_saved_customer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *saved_customer_);
    }

    // optional .sg.Reward get = 5;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_);
    }

    // optional .sg.Reward lose = 6;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lose_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EasterEggService_EasterEggResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.EasterEggService.EasterEggResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EasterEggService_EasterEggResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EasterEggService_EasterEggResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.EasterEggService.EasterEggResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.EasterEggService.EasterEggResponse)
    MergeFrom(*source);
  }
}

void EasterEggService_EasterEggResponse::MergeFrom(const EasterEggService_EasterEggResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.EasterEggService.EasterEggResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  easter_egg_list_.MergeFrom(from.easter_egg_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_saved_customer()->::sg::pb_pair_int64_int::MergeFrom(from.saved_customer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_get()->::sg::Reward::MergeFrom(from.get());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lose()->::sg::Reward::MergeFrom(from.lose());
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EasterEggService_EasterEggResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.EasterEggService.EasterEggResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EasterEggService_EasterEggResponse::CopyFrom(const EasterEggService_EasterEggResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.EasterEggService.EasterEggResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasterEggService_EasterEggResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_saved_customer()) {
    if (!this->saved_customer_->IsInitialized()) return false;
  }
  if (has_get()) {
    if (!this->get_->IsInitialized()) return false;
  }
  if (has_lose()) {
    if (!this->lose_->IsInitialized()) return false;
  }
  return true;
}

void EasterEggService_EasterEggResponse::Swap(EasterEggService_EasterEggResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EasterEggService_EasterEggResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EasterEggService_EasterEggResponse::UnsafeArenaSwap(EasterEggService_EasterEggResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EasterEggService_EasterEggResponse::InternalSwap(EasterEggService_EasterEggResponse* other) {
  using std::swap;
  CastToBase(&easter_egg_list_)->InternalSwap(CastToBase(&other->easter_egg_list_));
  swap(saved_customer_, other->saved_customer_);
  swap(get_, other->get_);
  swap(lose_, other->lose_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EasterEggService_EasterEggResponse::GetMetadata() const {
  protobuf_EasterEgg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EasterEgg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EasterEggService::InitAsDefaultInstance() {
  ::sg::_EasterEggService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::EasterEggService_EasterEggRequest*>(
      ::sg::EasterEggService_EasterEggRequest::internal_default_instance());
  ::sg::_EasterEggService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::EasterEggService_EasterEggResponse*>(
      ::sg::EasterEggService_EasterEggResponse::internal_default_instance());
}
void EasterEggService::unsafe_arena_set_allocated_req(
    ::sg::EasterEggService_EasterEggRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.EasterEggService.req)
}
void EasterEggService::unsafe_arena_set_allocated_resp(
    ::sg::EasterEggService_EasterEggResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.EasterEggService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EasterEggService::kReqFieldNumber;
const int EasterEggService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EasterEggService::EasterEggService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_EasterEgg_2eproto::scc_info_EasterEggService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.EasterEggService)
}
EasterEggService::EasterEggService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_EasterEgg_2eproto::scc_info_EasterEggService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.EasterEggService)
}
EasterEggService::EasterEggService(const EasterEggService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::EasterEggService_EasterEggRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::EasterEggService_EasterEggResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.EasterEggService)
}

void EasterEggService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

EasterEggService::~EasterEggService() {
  // @@protoc_insertion_point(destructor:sg.EasterEggService)
  SharedDtor();
}

void EasterEggService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void EasterEggService::ArenaDtor(void* object) {
  EasterEggService* _this = reinterpret_cast< EasterEggService* >(object);
  (void)_this;
}
void EasterEggService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EasterEggService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EasterEggService::descriptor() {
  ::protobuf_EasterEgg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EasterEgg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EasterEggService& EasterEggService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_EasterEgg_2eproto::scc_info_EasterEggService.base);
  return *internal_default_instance();
}


void EasterEggService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.EasterEggService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EasterEggService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.EasterEggService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.EasterEggService.EasterEggRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.EasterEggService.EasterEggResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.EasterEggService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.EasterEggService)
  return false;
#undef DO_
}

void EasterEggService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.EasterEggService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.EasterEggService.EasterEggRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.EasterEggService.EasterEggResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.EasterEggService)
}

::google::protobuf::uint8* EasterEggService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.EasterEggService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.EasterEggService.EasterEggRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.EasterEggService.EasterEggResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.EasterEggService)
  return target;
}

size_t EasterEggService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.EasterEggService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.EasterEggService.EasterEggRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.EasterEggService.EasterEggResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EasterEggService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.EasterEggService)
  GOOGLE_DCHECK_NE(&from, this);
  const EasterEggService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EasterEggService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.EasterEggService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.EasterEggService)
    MergeFrom(*source);
  }
}

void EasterEggService::MergeFrom(const EasterEggService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.EasterEggService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::EasterEggService_EasterEggRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::EasterEggService_EasterEggResponse::MergeFrom(from.resp());
    }
  }
}

void EasterEggService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.EasterEggService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EasterEggService::CopyFrom(const EasterEggService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.EasterEggService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasterEggService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void EasterEggService::Swap(EasterEggService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EasterEggService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EasterEggService::UnsafeArenaSwap(EasterEggService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EasterEggService::InternalSwap(EasterEggService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EasterEggService::GetMetadata() const {
  protobuf_EasterEgg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_EasterEgg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::EasterEgg* Arena::CreateMaybeMessage< ::sg::EasterEgg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::EasterEgg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::EasterEggService_EasterEggRequest* Arena::CreateMaybeMessage< ::sg::EasterEggService_EasterEggRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::EasterEggService_EasterEggRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::EasterEggService_EasterEggResponse* Arena::CreateMaybeMessage< ::sg::EasterEggService_EasterEggResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::EasterEggService_EasterEggResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::EasterEggService* Arena::CreateMaybeMessage< ::sg::EasterEggService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::EasterEggService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
