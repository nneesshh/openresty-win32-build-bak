// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wanted.proto

#include "Wanted.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Locale;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Wanted_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Wanted_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserWantedService_UserWantedRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Wanted_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserWantedService_UserWantedResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Wanted_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Wanted;
}  // namespace protobuf_Wanted_2eproto
namespace sg {
class WantedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Wanted>
      _instance;
} _Wanted_default_instance_;
class UserWantedService_UserWantedRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserWantedService_UserWantedRequest>
      _instance;
} _UserWantedService_UserWantedRequest_default_instance_;
class UserWantedService_UserWantedResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserWantedService_UserWantedResponse>
      _instance;
} _UserWantedService_UserWantedResponse_default_instance_;
class UserWantedServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserWantedService>
      _instance;
} _UserWantedService_default_instance_;
class UserWantedNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserWantedNotify>
      _instance;
} _UserWantedNotify_default_instance_;
}  // namespace sg
namespace protobuf_Wanted_2eproto {
static void InitDefaultsWanted() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_Wanted_default_instance_;
    new (ptr) ::sg::Wanted();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::Wanted::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Wanted =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWanted}, {
      &protobuf_BaseStruct_2eproto::scc_info_Locale.base,}};

static void InitDefaultsUserWantedService_UserWantedRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserWantedService_UserWantedRequest_default_instance_;
    new (ptr) ::sg::UserWantedService_UserWantedRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserWantedService_UserWantedRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserWantedService_UserWantedRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserWantedService_UserWantedRequest}, {}};

static void InitDefaultsUserWantedService_UserWantedResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserWantedService_UserWantedResponse_default_instance_;
    new (ptr) ::sg::UserWantedService_UserWantedResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserWantedService_UserWantedResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserWantedService_UserWantedResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserWantedService_UserWantedResponse}, {
      &protobuf_Wanted_2eproto::scc_info_Wanted.base,}};

static void InitDefaultsUserWantedService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserWantedService_default_instance_;
    new (ptr) ::sg::UserWantedService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserWantedService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserWantedService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserWantedService}, {
      &protobuf_Wanted_2eproto::scc_info_UserWantedService_UserWantedRequest.base,
      &protobuf_Wanted_2eproto::scc_info_UserWantedService_UserWantedResponse.base,}};

static void InitDefaultsUserWantedNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserWantedNotify_default_instance_;
    new (ptr) ::sg::UserWantedNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserWantedNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserWantedNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserWantedNotify}, {
      &protobuf_Wanted_2eproto::scc_info_Wanted.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Wanted.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserWantedService_UserWantedRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserWantedService_UserWantedResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserWantedService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserWantedNotify.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Wanted, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Wanted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Wanted, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Wanted, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Wanted, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Wanted, locale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::Wanted, optime_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService_UserWantedRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService_UserWantedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService_UserWantedRequest, cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService_UserWantedResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService_UserWantedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService_UserWantedResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService_UserWantedResponse, wanted_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserWantedNotify, wanted_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::sg::Wanted)},
  { 15, 21, sizeof(::sg::UserWantedService_UserWantedRequest)},
  { 22, 29, sizeof(::sg::UserWantedService_UserWantedResponse)},
  { 31, 38, sizeof(::sg::UserWantedService)},
  { 40, 46, sizeof(::sg::UserWantedNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_Wanted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserWantedService_UserWantedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserWantedService_UserWantedResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserWantedService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserWantedNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Wanted.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Wanted.proto\022\002sg\032\020BaseStruct.proto\"_\n\006"
      "Wanted\022\n\n\002id\030\002 \002(\005\022\016\n\006typeid\030\003 \002(\005\022\r\n\005st"
      "ate\030\004 \002(\005\022\032\n\006locale\030\005 \002(\0132\n.sg.Locale\022\016\n"
      "\006optime\030\010 \002(\020\"\245\002\n\021UserWantedService\0224\n\003r"
      "eq\030\001 \001(\0132\'.sg.UserWantedService.UserWant"
      "edRequest\0226\n\004resp\030\002 \001(\0132(.sg.UserWantedS"
      "ervice.UserWantedResponse\032B\n\021UserWantedR"
      "equest\022-\n\003cmd\030\001 \002(\0162 .sg.UserWantedServi"
      "ce.WANTED_CMD\032E\n\022UserWantedResponse\022\016\n\006r"
      "esult\030\001 \002(\005\022\037\n\013wanted_list\030\002 \003(\0132\n.sg.Wa"
      "nted\"\027\n\nWANTED_CMD\022\t\n\005QUERY\020\001\".\n\020UserWan"
      "tedNotify\022\032\n\006wanted\030\001 \002(\0132\n.sg.WantedB\003\370"
      "\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Wanted.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Wanted_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* UserWantedService_WANTED_CMD_descriptor() {
  protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wanted_2eproto::file_level_enum_descriptors[0];
}
bool UserWantedService_WANTED_CMD_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserWantedService_WANTED_CMD UserWantedService::QUERY;
const UserWantedService_WANTED_CMD UserWantedService::WANTED_CMD_MIN;
const UserWantedService_WANTED_CMD UserWantedService::WANTED_CMD_MAX;
const int UserWantedService::WANTED_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Wanted::InitAsDefaultInstance() {
  ::sg::_Wanted_default_instance_._instance.get_mutable()->locale_ = const_cast< ::sg::Locale*>(
      ::sg::Locale::internal_default_instance());
}
void Wanted::unsafe_arena_set_allocated_locale(
    ::sg::Locale* locale) {
  if (GetArenaNoVirtual() == NULL) {
    delete locale_;
  }
  locale_ = locale;
  if (locale) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.Wanted.locale)
}
void Wanted::clear_locale() {
  if (locale_ != NULL) locale_->Clear();
  clear_has_locale();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wanted::kIdFieldNumber;
const int Wanted::kTypeidFieldNumber;
const int Wanted::kStateFieldNumber;
const int Wanted::kLocaleFieldNumber;
const int Wanted::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wanted::Wanted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Wanted_2eproto::scc_info_Wanted.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.Wanted)
}
Wanted::Wanted(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_Wanted.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.Wanted)
}
Wanted::Wanted(const Wanted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_locale()) {
    locale_ = new ::sg::Locale(*from.locale_);
  } else {
    locale_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&id_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:sg.Wanted)
}

void Wanted::SharedCtor() {
  ::memset(&locale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&locale_)) + sizeof(optime_));
}

Wanted::~Wanted() {
  // @@protoc_insertion_point(destructor:sg.Wanted)
  SharedDtor();
}

void Wanted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete locale_;
}

void Wanted::ArenaDtor(void* object) {
  Wanted* _this = reinterpret_cast< Wanted* >(object);
  (void)_this;
}
void Wanted::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Wanted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Wanted::descriptor() {
  ::protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Wanted& Wanted::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_Wanted.base);
  return *internal_default_instance();
}


void Wanted::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.Wanted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(locale_ != NULL);
    locale_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&id_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Wanted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.Wanted)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sg.Locale locale = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.Wanted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.Wanted)
  return false;
#undef DO_
}

void Wanted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.Wanted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 typeid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeid_(), output);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // required .sg.Locale locale = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_locale(), output);
  }

  // required sfixed64 optime = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.Wanted)
}

::google::protobuf::uint8* Wanted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.Wanted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 typeid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeid_(), target);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // required .sg.Locale locale = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_locale(), deterministic, target);
  }

  // required sfixed64 optime = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(8, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.Wanted)
  return target;
}

size_t Wanted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.Wanted)
  size_t total_size = 0;

  if (has_locale()) {
    // required .sg.Locale locale = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *locale_);
  }

  if (has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_state()) {
    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_optime()) {
    // required sfixed64 optime = 8;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Wanted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.Wanted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .sg.Locale locale = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *locale_);

    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 typeid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required sfixed64 optime = 8;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wanted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.Wanted)
  GOOGLE_DCHECK_NE(&from, this);
  const Wanted* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Wanted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.Wanted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.Wanted)
    MergeFrom(*source);
  }
}

void Wanted::MergeFrom(const Wanted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.Wanted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_locale()->::sg::Locale::MergeFrom(from.locale());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wanted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.Wanted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wanted::CopyFrom(const Wanted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.Wanted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wanted::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_locale()) {
    if (!this->locale_->IsInitialized()) return false;
  }
  return true;
}

void Wanted::Swap(Wanted* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Wanted* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Wanted::UnsafeArenaSwap(Wanted* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Wanted::InternalSwap(Wanted* other) {
  using std::swap;
  swap(locale_, other->locale_);
  swap(id_, other->id_);
  swap(typeid__, other->typeid__);
  swap(state_, other->state_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Wanted::GetMetadata() const {
  protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserWantedService_UserWantedRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserWantedService_UserWantedRequest::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserWantedService_UserWantedRequest::UserWantedService_UserWantedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Wanted_2eproto::scc_info_UserWantedService_UserWantedRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserWantedService.UserWantedRequest)
}
UserWantedService_UserWantedRequest::UserWantedService_UserWantedRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_UserWantedService_UserWantedRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserWantedService.UserWantedRequest)
}
UserWantedService_UserWantedRequest::UserWantedService_UserWantedRequest(const UserWantedService_UserWantedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:sg.UserWantedService.UserWantedRequest)
}

void UserWantedService_UserWantedRequest::SharedCtor() {
  cmd_ = 1;
}

UserWantedService_UserWantedRequest::~UserWantedService_UserWantedRequest() {
  // @@protoc_insertion_point(destructor:sg.UserWantedService.UserWantedRequest)
  SharedDtor();
}

void UserWantedService_UserWantedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserWantedService_UserWantedRequest::ArenaDtor(void* object) {
  UserWantedService_UserWantedRequest* _this = reinterpret_cast< UserWantedService_UserWantedRequest* >(object);
  (void)_this;
}
void UserWantedService_UserWantedRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserWantedService_UserWantedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserWantedService_UserWantedRequest::descriptor() {
  ::protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserWantedService_UserWantedRequest& UserWantedService_UserWantedRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_UserWantedService_UserWantedRequest.base);
  return *internal_default_instance();
}


void UserWantedService_UserWantedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserWantedService.UserWantedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserWantedService_UserWantedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserWantedService.UserWantedRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserWantedService.WANTED_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserWantedService_WANTED_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserWantedService_WANTED_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserWantedService.UserWantedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserWantedService.UserWantedRequest)
  return false;
#undef DO_
}

void UserWantedService_UserWantedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserWantedService.UserWantedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserWantedService.WANTED_CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserWantedService.UserWantedRequest)
}

::google::protobuf::uint8* UserWantedService_UserWantedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserWantedService.UserWantedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserWantedService.WANTED_CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserWantedService.UserWantedRequest)
  return target;
}

size_t UserWantedService_UserWantedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserWantedService.UserWantedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserWantedService.WANTED_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserWantedService_UserWantedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserWantedService.UserWantedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserWantedService_UserWantedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserWantedService_UserWantedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserWantedService.UserWantedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserWantedService.UserWantedRequest)
    MergeFrom(*source);
  }
}

void UserWantedService_UserWantedRequest::MergeFrom(const UserWantedService_UserWantedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserWantedService.UserWantedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmd()) {
    set_cmd(from.cmd());
  }
}

void UserWantedService_UserWantedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserWantedService.UserWantedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWantedService_UserWantedRequest::CopyFrom(const UserWantedService_UserWantedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserWantedService.UserWantedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWantedService_UserWantedRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserWantedService_UserWantedRequest::Swap(UserWantedService_UserWantedRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserWantedService_UserWantedRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserWantedService_UserWantedRequest::UnsafeArenaSwap(UserWantedService_UserWantedRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserWantedService_UserWantedRequest::InternalSwap(UserWantedService_UserWantedRequest* other) {
  using std::swap;
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserWantedService_UserWantedRequest::GetMetadata() const {
  protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserWantedService_UserWantedResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserWantedService_UserWantedResponse::kResultFieldNumber;
const int UserWantedService_UserWantedResponse::kWantedListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserWantedService_UserWantedResponse::UserWantedService_UserWantedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Wanted_2eproto::scc_info_UserWantedService_UserWantedResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserWantedService.UserWantedResponse)
}
UserWantedService_UserWantedResponse::UserWantedService_UserWantedResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  wanted_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_UserWantedService_UserWantedResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserWantedService.UserWantedResponse)
}
UserWantedService_UserWantedResponse::UserWantedService_UserWantedResponse(const UserWantedService_UserWantedResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      wanted_list_(from.wanted_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.UserWantedService.UserWantedResponse)
}

void UserWantedService_UserWantedResponse::SharedCtor() {
  result_ = 0;
}

UserWantedService_UserWantedResponse::~UserWantedService_UserWantedResponse() {
  // @@protoc_insertion_point(destructor:sg.UserWantedService.UserWantedResponse)
  SharedDtor();
}

void UserWantedService_UserWantedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserWantedService_UserWantedResponse::ArenaDtor(void* object) {
  UserWantedService_UserWantedResponse* _this = reinterpret_cast< UserWantedService_UserWantedResponse* >(object);
  (void)_this;
}
void UserWantedService_UserWantedResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserWantedService_UserWantedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserWantedService_UserWantedResponse::descriptor() {
  ::protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserWantedService_UserWantedResponse& UserWantedService_UserWantedResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_UserWantedService_UserWantedResponse.base);
  return *internal_default_instance();
}


void UserWantedService_UserWantedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserWantedService.UserWantedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wanted_list_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserWantedService_UserWantedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserWantedService.UserWantedResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.Wanted wanted_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_wanted_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserWantedService.UserWantedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserWantedService.UserWantedResponse)
  return false;
#undef DO_
}

void UserWantedService_UserWantedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserWantedService.UserWantedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.Wanted wanted_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wanted_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->wanted_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserWantedService.UserWantedResponse)
}

::google::protobuf::uint8* UserWantedService_UserWantedResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserWantedService.UserWantedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.Wanted wanted_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wanted_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->wanted_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserWantedService.UserWantedResponse)
  return target;
}

size_t UserWantedService_UserWantedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserWantedService.UserWantedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.Wanted wanted_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->wanted_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wanted_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserWantedService_UserWantedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserWantedService.UserWantedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserWantedService_UserWantedResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserWantedService_UserWantedResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserWantedService.UserWantedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserWantedService.UserWantedResponse)
    MergeFrom(*source);
  }
}

void UserWantedService_UserWantedResponse::MergeFrom(const UserWantedService_UserWantedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserWantedService.UserWantedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wanted_list_.MergeFrom(from.wanted_list_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void UserWantedService_UserWantedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserWantedService.UserWantedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWantedService_UserWantedResponse::CopyFrom(const UserWantedService_UserWantedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserWantedService.UserWantedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWantedService_UserWantedResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wanted_list())) return false;
  return true;
}

void UserWantedService_UserWantedResponse::Swap(UserWantedService_UserWantedResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserWantedService_UserWantedResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserWantedService_UserWantedResponse::UnsafeArenaSwap(UserWantedService_UserWantedResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserWantedService_UserWantedResponse::InternalSwap(UserWantedService_UserWantedResponse* other) {
  using std::swap;
  CastToBase(&wanted_list_)->InternalSwap(CastToBase(&other->wanted_list_));
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserWantedService_UserWantedResponse::GetMetadata() const {
  protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserWantedService::InitAsDefaultInstance() {
  ::sg::_UserWantedService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserWantedService_UserWantedRequest*>(
      ::sg::UserWantedService_UserWantedRequest::internal_default_instance());
  ::sg::_UserWantedService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserWantedService_UserWantedResponse*>(
      ::sg::UserWantedService_UserWantedResponse::internal_default_instance());
}
void UserWantedService::unsafe_arena_set_allocated_req(
    ::sg::UserWantedService_UserWantedRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserWantedService.req)
}
void UserWantedService::unsafe_arena_set_allocated_resp(
    ::sg::UserWantedService_UserWantedResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserWantedService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserWantedService::kReqFieldNumber;
const int UserWantedService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserWantedService::UserWantedService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Wanted_2eproto::scc_info_UserWantedService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserWantedService)
}
UserWantedService::UserWantedService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_UserWantedService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserWantedService)
}
UserWantedService::UserWantedService(const UserWantedService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserWantedService_UserWantedRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserWantedService_UserWantedResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserWantedService)
}

void UserWantedService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserWantedService::~UserWantedService() {
  // @@protoc_insertion_point(destructor:sg.UserWantedService)
  SharedDtor();
}

void UserWantedService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserWantedService::ArenaDtor(void* object) {
  UserWantedService* _this = reinterpret_cast< UserWantedService* >(object);
  (void)_this;
}
void UserWantedService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserWantedService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserWantedService::descriptor() {
  ::protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserWantedService& UserWantedService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_UserWantedService.base);
  return *internal_default_instance();
}


void UserWantedService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserWantedService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserWantedService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserWantedService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserWantedService.UserWantedRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserWantedService.UserWantedResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserWantedService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserWantedService)
  return false;
#undef DO_
}

void UserWantedService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserWantedService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserWantedService.UserWantedRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserWantedService.UserWantedResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserWantedService)
}

::google::protobuf::uint8* UserWantedService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserWantedService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserWantedService.UserWantedRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserWantedService.UserWantedResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserWantedService)
  return target;
}

size_t UserWantedService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserWantedService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserWantedService.UserWantedRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserWantedService.UserWantedResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserWantedService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserWantedService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserWantedService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserWantedService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserWantedService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserWantedService)
    MergeFrom(*source);
  }
}

void UserWantedService::MergeFrom(const UserWantedService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserWantedService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserWantedService_UserWantedRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserWantedService_UserWantedResponse::MergeFrom(from.resp());
    }
  }
}

void UserWantedService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserWantedService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWantedService::CopyFrom(const UserWantedService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserWantedService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWantedService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserWantedService::Swap(UserWantedService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserWantedService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserWantedService::UnsafeArenaSwap(UserWantedService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserWantedService::InternalSwap(UserWantedService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserWantedService::GetMetadata() const {
  protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserWantedNotify::InitAsDefaultInstance() {
  ::sg::_UserWantedNotify_default_instance_._instance.get_mutable()->wanted_ = const_cast< ::sg::Wanted*>(
      ::sg::Wanted::internal_default_instance());
}
void UserWantedNotify::unsafe_arena_set_allocated_wanted(
    ::sg::Wanted* wanted) {
  if (GetArenaNoVirtual() == NULL) {
    delete wanted_;
  }
  wanted_ = wanted;
  if (wanted) {
    set_has_wanted();
  } else {
    clear_has_wanted();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserWantedNotify.wanted)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserWantedNotify::kWantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserWantedNotify::UserWantedNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Wanted_2eproto::scc_info_UserWantedNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserWantedNotify)
}
UserWantedNotify::UserWantedNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_UserWantedNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserWantedNotify)
}
UserWantedNotify::UserWantedNotify(const UserWantedNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_wanted()) {
    wanted_ = new ::sg::Wanted(*from.wanted_);
  } else {
    wanted_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserWantedNotify)
}

void UserWantedNotify::SharedCtor() {
  wanted_ = NULL;
}

UserWantedNotify::~UserWantedNotify() {
  // @@protoc_insertion_point(destructor:sg.UserWantedNotify)
  SharedDtor();
}

void UserWantedNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete wanted_;
}

void UserWantedNotify::ArenaDtor(void* object) {
  UserWantedNotify* _this = reinterpret_cast< UserWantedNotify* >(object);
  (void)_this;
}
void UserWantedNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserWantedNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserWantedNotify::descriptor() {
  ::protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserWantedNotify& UserWantedNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Wanted_2eproto::scc_info_UserWantedNotify.base);
  return *internal_default_instance();
}


void UserWantedNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserWantedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(wanted_ != NULL);
    wanted_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserWantedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserWantedNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.Wanted wanted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wanted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserWantedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserWantedNotify)
  return false;
#undef DO_
}

void UserWantedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserWantedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Wanted wanted = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_wanted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserWantedNotify)
}

::google::protobuf::uint8* UserWantedNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserWantedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.Wanted wanted = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_wanted(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserWantedNotify)
  return target;
}

size_t UserWantedNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserWantedNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.Wanted wanted = 1;
  if (has_wanted()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wanted_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserWantedNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserWantedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserWantedNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserWantedNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserWantedNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserWantedNotify)
    MergeFrom(*source);
  }
}

void UserWantedNotify::MergeFrom(const UserWantedNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserWantedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wanted()) {
    mutable_wanted()->::sg::Wanted::MergeFrom(from.wanted());
  }
}

void UserWantedNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserWantedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWantedNotify::CopyFrom(const UserWantedNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserWantedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWantedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_wanted()) {
    if (!this->wanted_->IsInitialized()) return false;
  }
  return true;
}

void UserWantedNotify::Swap(UserWantedNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserWantedNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserWantedNotify::UnsafeArenaSwap(UserWantedNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserWantedNotify::InternalSwap(UserWantedNotify* other) {
  using std::swap;
  swap(wanted_, other->wanted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserWantedNotify::GetMetadata() const {
  protobuf_Wanted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Wanted_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::Wanted* Arena::CreateMaybeMessage< ::sg::Wanted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::Wanted >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserWantedService_UserWantedRequest* Arena::CreateMaybeMessage< ::sg::UserWantedService_UserWantedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserWantedService_UserWantedRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserWantedService_UserWantedResponse* Arena::CreateMaybeMessage< ::sg::UserWantedService_UserWantedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserWantedService_UserWantedResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserWantedService* Arena::CreateMaybeMessage< ::sg::UserWantedService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserWantedService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserWantedNotify* Arena::CreateMaybeMessage< ::sg::UserWantedNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserWantedNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
