// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#include "Game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Game_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Game_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameService_GameRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Game_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameService_GameResponse;
}  // namespace protobuf_Game_2eproto
namespace sg {
class GameService_GameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameService_GameRequest>
      _instance;
} _GameService_GameRequest_default_instance_;
class GameService_GameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameService_GameResponse>
      _instance;
} _GameService_GameResponse_default_instance_;
class GameServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameService>
      _instance;
} _GameService_default_instance_;
class GameAnnouncementNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameAnnouncementNotify>
      _instance;
} _GameAnnouncementNotify_default_instance_;
}  // namespace sg
namespace protobuf_Game_2eproto {
static void InitDefaultsGameService_GameRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameService_GameRequest_default_instance_;
    new (ptr) ::sg::GameService_GameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameService_GameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameService_GameRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameService_GameRequest}, {}};

static void InitDefaultsGameService_GameResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameService_GameResponse_default_instance_;
    new (ptr) ::sg::GameService_GameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameService_GameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameService_GameResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameService_GameResponse}, {}};

static void InitDefaultsGameService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameService_default_instance_;
    new (ptr) ::sg::GameService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GameService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGameService}, {
      &protobuf_Game_2eproto::scc_info_GameService_GameRequest.base,
      &protobuf_Game_2eproto::scc_info_GameService_GameResponse.base,}};

static void InitDefaultsGameAnnouncementNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_GameAnnouncementNotify_default_instance_;
    new (ptr) ::sg::GameAnnouncementNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::GameAnnouncementNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameAnnouncementNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameAnnouncementNotify}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameService_GameRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameService_GameResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameAnnouncementNotify.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService_GameRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService_GameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService_GameRequest, cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService_GameResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService_GameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService_GameResponse, server_time_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameAnnouncementNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameAnnouncementNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameAnnouncementNotify, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::GameAnnouncementNotify, data_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::sg::GameService_GameRequest)},
  { 7, 13, sizeof(::sg::GameService_GameResponse)},
  { 14, 21, sizeof(::sg::GameService)},
  { 23, 30, sizeof(::sg::GameAnnouncementNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameService_GameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameService_GameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_GameAnnouncementNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Game.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nGame.proto\022\002sg\"\313\001\n\013GameService\022(\n\003req\030"
      "\001 \001(\0132\033.sg.GameService.GameRequest\022*\n\004re"
      "sp\030\002 \001(\0132\034.sg.GameService.GameResponse\032/"
      "\n\013GameRequest\022 \n\003cmd\030\001 \002(\0162\023.sg.GameServ"
      "ice.CMD\032#\n\014GameResponse\022\023\n\013server_time\030\001"
      " \001(\020\"\020\n\003CMD\022\t\n\005QUERY\020\001\"4\n\026GameAnnounceme"
      "ntNotify\022\014\n\004type\030\001 \002(\005\022\014\n\004data\030\002 \002(\014B\003\370\001"
      "\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Game.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Game_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* GameService_CMD_descriptor() {
  protobuf_Game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Game_2eproto::file_level_enum_descriptors[0];
}
bool GameService_CMD_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameService_CMD GameService::QUERY;
const GameService_CMD GameService::CMD_MIN;
const GameService_CMD GameService::CMD_MAX;
const int GameService::CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void GameService_GameRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameService_GameRequest::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameService_GameRequest::GameService_GameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Game_2eproto::scc_info_GameService_GameRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameService.GameRequest)
}
GameService_GameRequest::GameService_GameRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Game_2eproto::scc_info_GameService_GameRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameService.GameRequest)
}
GameService_GameRequest::GameService_GameRequest(const GameService_GameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:sg.GameService.GameRequest)
}

void GameService_GameRequest::SharedCtor() {
  cmd_ = 1;
}

GameService_GameRequest::~GameService_GameRequest() {
  // @@protoc_insertion_point(destructor:sg.GameService.GameRequest)
  SharedDtor();
}

void GameService_GameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GameService_GameRequest::ArenaDtor(void* object) {
  GameService_GameRequest* _this = reinterpret_cast< GameService_GameRequest* >(object);
  (void)_this;
}
void GameService_GameRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameService_GameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameService_GameRequest::descriptor() {
  ::protobuf_Game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameService_GameRequest& GameService_GameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Game_2eproto::scc_info_GameService_GameRequest.base);
  return *internal_default_instance();
}


void GameService_GameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameService.GameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameService_GameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameService.GameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.GameService.CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::GameService_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::GameService_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameService.GameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameService.GameRequest)
  return false;
#undef DO_
}

void GameService_GameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameService.GameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GameService.CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameService.GameRequest)
}

::google::protobuf::uint8* GameService_GameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameService.GameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.GameService.CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameService.GameRequest)
  return target;
}

size_t GameService_GameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameService.GameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.GameService.CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameService_GameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameService.GameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameService_GameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameService_GameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameService.GameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameService.GameRequest)
    MergeFrom(*source);
  }
}

void GameService_GameRequest::MergeFrom(const GameService_GameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameService.GameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmd()) {
    set_cmd(from.cmd());
  }
}

void GameService_GameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameService.GameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameService_GameRequest::CopyFrom(const GameService_GameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameService.GameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameService_GameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameService_GameRequest::Swap(GameService_GameRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameService_GameRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameService_GameRequest::UnsafeArenaSwap(GameService_GameRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameService_GameRequest::InternalSwap(GameService_GameRequest* other) {
  using std::swap;
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameService_GameRequest::GetMetadata() const {
  protobuf_Game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameService_GameResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameService_GameResponse::kServerTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameService_GameResponse::GameService_GameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Game_2eproto::scc_info_GameService_GameResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameService.GameResponse)
}
GameService_GameResponse::GameService_GameResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Game_2eproto::scc_info_GameService_GameResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameService.GameResponse)
}
GameService_GameResponse::GameService_GameResponse(const GameService_GameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_time_ = from.server_time_;
  // @@protoc_insertion_point(copy_constructor:sg.GameService.GameResponse)
}

void GameService_GameResponse::SharedCtor() {
  server_time_ = GOOGLE_LONGLONG(0);
}

GameService_GameResponse::~GameService_GameResponse() {
  // @@protoc_insertion_point(destructor:sg.GameService.GameResponse)
  SharedDtor();
}

void GameService_GameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GameService_GameResponse::ArenaDtor(void* object) {
  GameService_GameResponse* _this = reinterpret_cast< GameService_GameResponse* >(object);
  (void)_this;
}
void GameService_GameResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameService_GameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameService_GameResponse::descriptor() {
  ::protobuf_Game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameService_GameResponse& GameService_GameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Game_2eproto::scc_info_GameService_GameResponse.base);
  return *internal_default_instance();
}


void GameService_GameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameService.GameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_time_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameService_GameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameService.GameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 server_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_server_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameService.GameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameService.GameResponse)
  return false;
#undef DO_
}

void GameService_GameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameService.GameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sfixed64 server_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->server_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameService.GameResponse)
}

::google::protobuf::uint8* GameService_GameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameService.GameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sfixed64 server_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->server_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameService.GameResponse)
  return target;
}

size_t GameService_GameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameService.GameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sfixed64 server_time = 1;
  if (has_server_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameService_GameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameService.GameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameService_GameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameService_GameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameService.GameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameService.GameResponse)
    MergeFrom(*source);
  }
}

void GameService_GameResponse::MergeFrom(const GameService_GameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameService.GameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_time()) {
    set_server_time(from.server_time());
  }
}

void GameService_GameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameService.GameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameService_GameResponse::CopyFrom(const GameService_GameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameService.GameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameService_GameResponse::IsInitialized() const {
  return true;
}

void GameService_GameResponse::Swap(GameService_GameResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameService_GameResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameService_GameResponse::UnsafeArenaSwap(GameService_GameResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameService_GameResponse::InternalSwap(GameService_GameResponse* other) {
  using std::swap;
  swap(server_time_, other->server_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameService_GameResponse::GetMetadata() const {
  protobuf_Game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameService::InitAsDefaultInstance() {
  ::sg::_GameService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::GameService_GameRequest*>(
      ::sg::GameService_GameRequest::internal_default_instance());
  ::sg::_GameService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::GameService_GameResponse*>(
      ::sg::GameService_GameResponse::internal_default_instance());
}
void GameService::unsafe_arena_set_allocated_req(
    ::sg::GameService_GameRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameService.req)
}
void GameService::unsafe_arena_set_allocated_resp(
    ::sg::GameService_GameResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.GameService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameService::kReqFieldNumber;
const int GameService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameService::GameService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Game_2eproto::scc_info_GameService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameService)
}
GameService::GameService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Game_2eproto::scc_info_GameService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameService)
}
GameService::GameService(const GameService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::GameService_GameRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::GameService_GameResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.GameService)
}

void GameService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

GameService::~GameService() {
  // @@protoc_insertion_point(destructor:sg.GameService)
  SharedDtor();
}

void GameService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void GameService::ArenaDtor(void* object) {
  GameService* _this = reinterpret_cast< GameService* >(object);
  (void)_this;
}
void GameService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameService::descriptor() {
  ::protobuf_Game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameService& GameService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Game_2eproto::scc_info_GameService.base);
  return *internal_default_instance();
}


void GameService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.GameService.GameRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.GameService.GameResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameService)
  return false;
#undef DO_
}

void GameService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.GameService.GameRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.GameService.GameResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameService)
}

::google::protobuf::uint8* GameService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.GameService.GameRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.GameService.GameResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameService)
  return target;
}

size_t GameService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.GameService.GameRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.GameService.GameResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameService)
  GOOGLE_DCHECK_NE(&from, this);
  const GameService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameService)
    MergeFrom(*source);
  }
}

void GameService::MergeFrom(const GameService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::GameService_GameRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::GameService_GameResponse::MergeFrom(from.resp());
    }
  }
}

void GameService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameService::CopyFrom(const GameService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  return true;
}

void GameService::Swap(GameService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameService::UnsafeArenaSwap(GameService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameService::InternalSwap(GameService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameService::GetMetadata() const {
  protobuf_Game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameAnnouncementNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameAnnouncementNotify::kTypeFieldNumber;
const int GameAnnouncementNotify::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameAnnouncementNotify::GameAnnouncementNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Game_2eproto::scc_info_GameAnnouncementNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.GameAnnouncementNotify)
}
GameAnnouncementNotify::GameAnnouncementNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Game_2eproto::scc_info_GameAnnouncementNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.GameAnnouncementNotify)
}
GameAnnouncementNotify::GameAnnouncementNotify(const GameAnnouncementNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sg.GameAnnouncementNotify)
}

void GameAnnouncementNotify::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

GameAnnouncementNotify::~GameAnnouncementNotify() {
  // @@protoc_insertion_point(destructor:sg.GameAnnouncementNotify)
  SharedDtor();
}

void GameAnnouncementNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameAnnouncementNotify::ArenaDtor(void* object) {
  GameAnnouncementNotify* _this = reinterpret_cast< GameAnnouncementNotify* >(object);
  (void)_this;
}
void GameAnnouncementNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameAnnouncementNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameAnnouncementNotify::descriptor() {
  ::protobuf_Game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameAnnouncementNotify& GameAnnouncementNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Game_2eproto::scc_info_GameAnnouncementNotify.base);
  return *internal_default_instance();
}


void GameAnnouncementNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.GameAnnouncementNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameAnnouncementNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.GameAnnouncementNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.GameAnnouncementNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.GameAnnouncementNotify)
  return false;
#undef DO_
}

void GameAnnouncementNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.GameAnnouncementNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.GameAnnouncementNotify)
}

::google::protobuf::uint8* GameAnnouncementNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.GameAnnouncementNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.GameAnnouncementNotify)
  return target;
}

size_t GameAnnouncementNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sg.GameAnnouncementNotify)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t GameAnnouncementNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.GameAnnouncementNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAnnouncementNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.GameAnnouncementNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAnnouncementNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameAnnouncementNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.GameAnnouncementNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.GameAnnouncementNotify)
    MergeFrom(*source);
  }
}

void GameAnnouncementNotify::MergeFrom(const GameAnnouncementNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.GameAnnouncementNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_data(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAnnouncementNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.GameAnnouncementNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAnnouncementNotify::CopyFrom(const GameAnnouncementNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.GameAnnouncementNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAnnouncementNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameAnnouncementNotify::Swap(GameAnnouncementNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameAnnouncementNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameAnnouncementNotify::UnsafeArenaSwap(GameAnnouncementNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameAnnouncementNotify::InternalSwap(GameAnnouncementNotify* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameAnnouncementNotify::GetMetadata() const {
  protobuf_Game_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Game_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameService_GameRequest* Arena::CreateMaybeMessage< ::sg::GameService_GameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameService_GameRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameService_GameResponse* Arena::CreateMaybeMessage< ::sg::GameService_GameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameService_GameResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameService* Arena::CreateMaybeMessage< ::sg::GameService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::GameAnnouncementNotify* Arena::CreateMaybeMessage< ::sg::GameAnnouncementNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::GameAnnouncementNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
