// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NPC.proto

#include "NPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NPC;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_NPC_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NPC_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserNPCService_UserNPCRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserNPCService_UserNPCResponse;
}  // namespace protobuf_NPC_2eproto
namespace sg {
class UserNPCService_UserNPCRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserNPCService_UserNPCRequest>
      _instance;
} _UserNPCService_UserNPCRequest_default_instance_;
class UserNPCService_UserNPCResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserNPCService_UserNPCResponse>
      _instance;
} _UserNPCService_UserNPCResponse_default_instance_;
class UserNPCServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserNPCService>
      _instance;
} _UserNPCService_default_instance_;
class UserNPCStateNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserNPCStateNotify>
      _instance;
} _UserNPCStateNotify_default_instance_;
}  // namespace sg
namespace protobuf_NPC_2eproto {
static void InitDefaultsUserNPCService_UserNPCRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserNPCService_UserNPCRequest_default_instance_;
    new (ptr) ::sg::UserNPCService_UserNPCRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserNPCService_UserNPCRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserNPCService_UserNPCRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserNPCService_UserNPCRequest}, {}};

static void InitDefaultsUserNPCService_UserNPCResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserNPCService_UserNPCResponse_default_instance_;
    new (ptr) ::sg::UserNPCService_UserNPCResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserNPCService_UserNPCResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserNPCService_UserNPCResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserNPCService_UserNPCResponse}, {
      &protobuf_BaseStruct_2eproto::scc_info_NPC.base,}};

static void InitDefaultsUserNPCService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserNPCService_default_instance_;
    new (ptr) ::sg::UserNPCService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserNPCService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserNPCService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserNPCService}, {
      &protobuf_NPC_2eproto::scc_info_UserNPCService_UserNPCRequest.base,
      &protobuf_NPC_2eproto::scc_info_UserNPCService_UserNPCResponse.base,}};

static void InitDefaultsUserNPCStateNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sg::_UserNPCStateNotify_default_instance_;
    new (ptr) ::sg::UserNPCStateNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sg::UserNPCStateNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserNPCStateNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserNPCStateNotify}, {
      &protobuf_BaseStruct_2eproto::scc_info_NPC.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserNPCService_UserNPCRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserNPCService_UserNPCResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserNPCService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserNPCStateNotify.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService_UserNPCRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService_UserNPCRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService_UserNPCRequest, cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService_UserNPCResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService_UserNPCResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService_UserNPCResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService_UserNPCResponse, npc_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCStateNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sg::UserNPCStateNotify, npc_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::sg::UserNPCService_UserNPCRequest)},
  { 7, 14, sizeof(::sg::UserNPCService_UserNPCResponse)},
  { 16, 23, sizeof(::sg::UserNPCService)},
  { 25, 31, sizeof(::sg::UserNPCStateNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserNPCService_UserNPCRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserNPCService_UserNPCResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserNPCService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sg::_UserNPCStateNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "NPC.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tNPC.proto\022\002sg\032\020BaseStruct.proto\"\201\002\n\016Us"
      "erNPCService\022.\n\003req\030\001 \001(\0132!.sg.UserNPCSe"
      "rvice.UserNPCRequest\0220\n\004resp\030\002 \001(\0132\".sg."
      "UserNPCService.UserNPCResponse\0329\n\016UserNP"
      "CRequest\022\'\n\003cmd\030\001 \002(\0162\032.sg.UserNPCServic"
      "e.NPC_CMD\032<\n\017UserNPCResponse\022\016\n\006result\030\001"
      " \002(\005\022\031\n\010npc_list\030\002 \003(\0132\007.sg.NPC\"\024\n\007NPC_C"
      "MD\022\t\n\005QUERY\020\001\"*\n\022UserNPCStateNotify\022\024\n\003n"
      "pc\030\001 \002(\0132\007.sg.NPCB\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NPC.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_NPC_2eproto
namespace sg {
const ::google::protobuf::EnumDescriptor* UserNPCService_NPC_CMD_descriptor() {
  protobuf_NPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NPC_2eproto::file_level_enum_descriptors[0];
}
bool UserNPCService_NPC_CMD_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserNPCService_NPC_CMD UserNPCService::QUERY;
const UserNPCService_NPC_CMD UserNPCService::NPC_CMD_MIN;
const UserNPCService_NPC_CMD UserNPCService::NPC_CMD_MAX;
const int UserNPCService::NPC_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void UserNPCService_UserNPCRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNPCService_UserNPCRequest::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNPCService_UserNPCRequest::UserNPCService_UserNPCRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NPC_2eproto::scc_info_UserNPCService_UserNPCRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserNPCService.UserNPCRequest)
}
UserNPCService_UserNPCRequest::UserNPCService_UserNPCRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_NPC_2eproto::scc_info_UserNPCService_UserNPCRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserNPCService.UserNPCRequest)
}
UserNPCService_UserNPCRequest::UserNPCService_UserNPCRequest(const UserNPCService_UserNPCRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:sg.UserNPCService.UserNPCRequest)
}

void UserNPCService_UserNPCRequest::SharedCtor() {
  cmd_ = 1;
}

UserNPCService_UserNPCRequest::~UserNPCService_UserNPCRequest() {
  // @@protoc_insertion_point(destructor:sg.UserNPCService.UserNPCRequest)
  SharedDtor();
}

void UserNPCService_UserNPCRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserNPCService_UserNPCRequest::ArenaDtor(void* object) {
  UserNPCService_UserNPCRequest* _this = reinterpret_cast< UserNPCService_UserNPCRequest* >(object);
  (void)_this;
}
void UserNPCService_UserNPCRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserNPCService_UserNPCRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserNPCService_UserNPCRequest::descriptor() {
  ::protobuf_NPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserNPCService_UserNPCRequest& UserNPCService_UserNPCRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NPC_2eproto::scc_info_UserNPCService_UserNPCRequest.base);
  return *internal_default_instance();
}


void UserNPCService_UserNPCRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserNPCService.UserNPCRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserNPCService_UserNPCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserNPCService.UserNPCRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.UserNPCService.NPC_CMD cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sg::UserNPCService_NPC_CMD_IsValid(value)) {
            set_cmd(static_cast< ::sg::UserNPCService_NPC_CMD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserNPCService.UserNPCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserNPCService.UserNPCRequest)
  return false;
#undef DO_
}

void UserNPCService_UserNPCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserNPCService.UserNPCRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserNPCService.NPC_CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserNPCService.UserNPCRequest)
}

::google::protobuf::uint8* UserNPCService_UserNPCRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserNPCService.UserNPCRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.UserNPCService.NPC_CMD cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserNPCService.UserNPCRequest)
  return target;
}

size_t UserNPCService_UserNPCRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserNPCService.UserNPCRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.UserNPCService.NPC_CMD cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserNPCService_UserNPCRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserNPCService.UserNPCRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserNPCService_UserNPCRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNPCService_UserNPCRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserNPCService.UserNPCRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserNPCService.UserNPCRequest)
    MergeFrom(*source);
  }
}

void UserNPCService_UserNPCRequest::MergeFrom(const UserNPCService_UserNPCRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserNPCService.UserNPCRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmd()) {
    set_cmd(from.cmd());
  }
}

void UserNPCService_UserNPCRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserNPCService.UserNPCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNPCService_UserNPCRequest::CopyFrom(const UserNPCService_UserNPCRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserNPCService.UserNPCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNPCService_UserNPCRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserNPCService_UserNPCRequest::Swap(UserNPCService_UserNPCRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserNPCService_UserNPCRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserNPCService_UserNPCRequest::UnsafeArenaSwap(UserNPCService_UserNPCRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserNPCService_UserNPCRequest::InternalSwap(UserNPCService_UserNPCRequest* other) {
  using std::swap;
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserNPCService_UserNPCRequest::GetMetadata() const {
  protobuf_NPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserNPCService_UserNPCResponse::InitAsDefaultInstance() {
}
void UserNPCService_UserNPCResponse::clear_npc_list() {
  npc_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNPCService_UserNPCResponse::kResultFieldNumber;
const int UserNPCService_UserNPCResponse::kNpcListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNPCService_UserNPCResponse::UserNPCService_UserNPCResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NPC_2eproto::scc_info_UserNPCService_UserNPCResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserNPCService.UserNPCResponse)
}
UserNPCService_UserNPCResponse::UserNPCService_UserNPCResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  npc_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_NPC_2eproto::scc_info_UserNPCService_UserNPCResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserNPCService.UserNPCResponse)
}
UserNPCService_UserNPCResponse::UserNPCService_UserNPCResponse(const UserNPCService_UserNPCResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      npc_list_(from.npc_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sg.UserNPCService.UserNPCResponse)
}

void UserNPCService_UserNPCResponse::SharedCtor() {
  result_ = 0;
}

UserNPCService_UserNPCResponse::~UserNPCService_UserNPCResponse() {
  // @@protoc_insertion_point(destructor:sg.UserNPCService.UserNPCResponse)
  SharedDtor();
}

void UserNPCService_UserNPCResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserNPCService_UserNPCResponse::ArenaDtor(void* object) {
  UserNPCService_UserNPCResponse* _this = reinterpret_cast< UserNPCService_UserNPCResponse* >(object);
  (void)_this;
}
void UserNPCService_UserNPCResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserNPCService_UserNPCResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserNPCService_UserNPCResponse::descriptor() {
  ::protobuf_NPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserNPCService_UserNPCResponse& UserNPCService_UserNPCResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NPC_2eproto::scc_info_UserNPCService_UserNPCResponse.base);
  return *internal_default_instance();
}


void UserNPCService_UserNPCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserNPCService.UserNPCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npc_list_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserNPCService_UserNPCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserNPCService.UserNPCResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sg.NPC npc_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_npc_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserNPCService.UserNPCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserNPCService.UserNPCResponse)
  return false;
#undef DO_
}

void UserNPCService_UserNPCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserNPCService.UserNPCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .sg.NPC npc_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->npc_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->npc_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserNPCService.UserNPCResponse)
}

::google::protobuf::uint8* UserNPCService_UserNPCResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserNPCService.UserNPCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .sg.NPC npc_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->npc_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->npc_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserNPCService.UserNPCResponse)
  return target;
}

size_t UserNPCService_UserNPCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserNPCService.UserNPCResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .sg.NPC npc_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->npc_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->npc_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserNPCService_UserNPCResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserNPCService.UserNPCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserNPCService_UserNPCResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNPCService_UserNPCResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserNPCService.UserNPCResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserNPCService.UserNPCResponse)
    MergeFrom(*source);
  }
}

void UserNPCService_UserNPCResponse::MergeFrom(const UserNPCService_UserNPCResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserNPCService.UserNPCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  npc_list_.MergeFrom(from.npc_list_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void UserNPCService_UserNPCResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserNPCService.UserNPCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNPCService_UserNPCResponse::CopyFrom(const UserNPCService_UserNPCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserNPCService.UserNPCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNPCService_UserNPCResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->npc_list())) return false;
  return true;
}

void UserNPCService_UserNPCResponse::Swap(UserNPCService_UserNPCResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserNPCService_UserNPCResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserNPCService_UserNPCResponse::UnsafeArenaSwap(UserNPCService_UserNPCResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserNPCService_UserNPCResponse::InternalSwap(UserNPCService_UserNPCResponse* other) {
  using std::swap;
  CastToBase(&npc_list_)->InternalSwap(CastToBase(&other->npc_list_));
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserNPCService_UserNPCResponse::GetMetadata() const {
  protobuf_NPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserNPCService::InitAsDefaultInstance() {
  ::sg::_UserNPCService_default_instance_._instance.get_mutable()->req_ = const_cast< ::sg::UserNPCService_UserNPCRequest*>(
      ::sg::UserNPCService_UserNPCRequest::internal_default_instance());
  ::sg::_UserNPCService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::sg::UserNPCService_UserNPCResponse*>(
      ::sg::UserNPCService_UserNPCResponse::internal_default_instance());
}
void UserNPCService::unsafe_arena_set_allocated_req(
    ::sg::UserNPCService_UserNPCRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserNPCService.req)
}
void UserNPCService::unsafe_arena_set_allocated_resp(
    ::sg::UserNPCService_UserNPCResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserNPCService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNPCService::kReqFieldNumber;
const int UserNPCService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNPCService::UserNPCService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NPC_2eproto::scc_info_UserNPCService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserNPCService)
}
UserNPCService::UserNPCService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_NPC_2eproto::scc_info_UserNPCService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserNPCService)
}
UserNPCService::UserNPCService(const UserNPCService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::sg::UserNPCService_UserNPCRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::sg::UserNPCService_UserNPCResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserNPCService)
}

void UserNPCService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserNPCService::~UserNPCService() {
  // @@protoc_insertion_point(destructor:sg.UserNPCService)
  SharedDtor();
}

void UserNPCService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserNPCService::ArenaDtor(void* object) {
  UserNPCService* _this = reinterpret_cast< UserNPCService* >(object);
  (void)_this;
}
void UserNPCService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserNPCService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserNPCService::descriptor() {
  ::protobuf_NPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserNPCService& UserNPCService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NPC_2eproto::scc_info_UserNPCService.base);
  return *internal_default_instance();
}


void UserNPCService::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserNPCService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserNPCService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserNPCService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sg.UserNPCService.UserNPCRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sg.UserNPCService.UserNPCResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserNPCService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserNPCService)
  return false;
#undef DO_
}

void UserNPCService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserNPCService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserNPCService.UserNPCRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .sg.UserNPCService.UserNPCResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserNPCService)
}

::google::protobuf::uint8* UserNPCService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserNPCService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sg.UserNPCService.UserNPCRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .sg.UserNPCService.UserNPCResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserNPCService)
  return target;
}

size_t UserNPCService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserNPCService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sg.UserNPCService.UserNPCRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .sg.UserNPCService.UserNPCResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserNPCService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserNPCService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserNPCService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNPCService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserNPCService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserNPCService)
    MergeFrom(*source);
  }
}

void UserNPCService::MergeFrom(const UserNPCService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserNPCService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::sg::UserNPCService_UserNPCRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::sg::UserNPCService_UserNPCResponse::MergeFrom(from.resp());
    }
  }
}

void UserNPCService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserNPCService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNPCService::CopyFrom(const UserNPCService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserNPCService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNPCService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserNPCService::Swap(UserNPCService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserNPCService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserNPCService::UnsafeArenaSwap(UserNPCService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserNPCService::InternalSwap(UserNPCService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserNPCService::GetMetadata() const {
  protobuf_NPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserNPCStateNotify::InitAsDefaultInstance() {
  ::sg::_UserNPCStateNotify_default_instance_._instance.get_mutable()->npc_ = const_cast< ::sg::NPC*>(
      ::sg::NPC::internal_default_instance());
}
void UserNPCStateNotify::unsafe_arena_set_allocated_npc(
    ::sg::NPC* npc) {
  if (GetArenaNoVirtual() == NULL) {
    delete npc_;
  }
  npc_ = npc;
  if (npc) {
    set_has_npc();
  } else {
    clear_has_npc();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sg.UserNPCStateNotify.npc)
}
void UserNPCStateNotify::clear_npc() {
  if (npc_ != NULL) npc_->Clear();
  clear_has_npc();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserNPCStateNotify::kNpcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserNPCStateNotify::UserNPCStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NPC_2eproto::scc_info_UserNPCStateNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sg.UserNPCStateNotify)
}
UserNPCStateNotify::UserNPCStateNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_NPC_2eproto::scc_info_UserNPCStateNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sg.UserNPCStateNotify)
}
UserNPCStateNotify::UserNPCStateNotify(const UserNPCStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_npc()) {
    npc_ = new ::sg::NPC(*from.npc_);
  } else {
    npc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sg.UserNPCStateNotify)
}

void UserNPCStateNotify::SharedCtor() {
  npc_ = NULL;
}

UserNPCStateNotify::~UserNPCStateNotify() {
  // @@protoc_insertion_point(destructor:sg.UserNPCStateNotify)
  SharedDtor();
}

void UserNPCStateNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete npc_;
}

void UserNPCStateNotify::ArenaDtor(void* object) {
  UserNPCStateNotify* _this = reinterpret_cast< UserNPCStateNotify* >(object);
  (void)_this;
}
void UserNPCStateNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserNPCStateNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserNPCStateNotify::descriptor() {
  ::protobuf_NPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserNPCStateNotify& UserNPCStateNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NPC_2eproto::scc_info_UserNPCStateNotify.base);
  return *internal_default_instance();
}


void UserNPCStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:sg.UserNPCStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(npc_ != NULL);
    npc_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserNPCStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sg.UserNPCStateNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sg.NPC npc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_npc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sg.UserNPCStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sg.UserNPCStateNotify)
  return false;
#undef DO_
}

void UserNPCStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sg.UserNPCStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.NPC npc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_npc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sg.UserNPCStateNotify)
}

::google::protobuf::uint8* UserNPCStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sg.UserNPCStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sg.NPC npc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_npc(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sg.UserNPCStateNotify)
  return target;
}

size_t UserNPCStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sg.UserNPCStateNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .sg.NPC npc = 1;
  if (has_npc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *npc_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserNPCStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sg.UserNPCStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UserNPCStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserNPCStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sg.UserNPCStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sg.UserNPCStateNotify)
    MergeFrom(*source);
  }
}

void UserNPCStateNotify::MergeFrom(const UserNPCStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sg.UserNPCStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_npc()) {
    mutable_npc()->::sg::NPC::MergeFrom(from.npc());
  }
}

void UserNPCStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sg.UserNPCStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNPCStateNotify::CopyFrom(const UserNPCStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sg.UserNPCStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNPCStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_npc()) {
    if (!this->npc_->IsInitialized()) return false;
  }
  return true;
}

void UserNPCStateNotify::Swap(UserNPCStateNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserNPCStateNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserNPCStateNotify::UnsafeArenaSwap(UserNPCStateNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserNPCStateNotify::InternalSwap(UserNPCStateNotify* other) {
  using std::swap;
  swap(npc_, other->npc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserNPCStateNotify::GetMetadata() const {
  protobuf_NPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserNPCService_UserNPCRequest* Arena::CreateMaybeMessage< ::sg::UserNPCService_UserNPCRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserNPCService_UserNPCRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserNPCService_UserNPCResponse* Arena::CreateMaybeMessage< ::sg::UserNPCService_UserNPCResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserNPCService_UserNPCResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserNPCService* Arena::CreateMaybeMessage< ::sg::UserNPCService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserNPCService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sg::UserNPCStateNotify* Arena::CreateMaybeMessage< ::sg::UserNPCStateNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sg::UserNPCStateNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
