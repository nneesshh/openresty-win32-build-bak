// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcHarbour.proto

#include "StoredProcHarbour.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_StoredProcHarbour_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCustomer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCustomerOccupation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCustomerWealthGrade;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFood;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFoodFilter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFoodRecipe;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHarborFoodOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHarbour_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigPlaceGrade;
}  // namespace protobuf_StoredProcHarbour_2eproto
namespace db {
class ConfigFoodDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFood>
      _instance;
} _ConfigFood_default_instance_;
class ConfigFoodListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFoodList>
      _instance;
} _ConfigFoodList_default_instance_;
class ConfigFoodRecipeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFoodRecipe>
      _instance;
} _ConfigFoodRecipe_default_instance_;
class ConfigFoodRecipeListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFoodRecipeList>
      _instance;
} _ConfigFoodRecipeList_default_instance_;
class ConfigFoodFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFoodFilter>
      _instance;
} _ConfigFoodFilter_default_instance_;
class ConfigFoodFilterListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFoodFilterList>
      _instance;
} _ConfigFoodFilterList_default_instance_;
class ConfigCustomerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCustomer>
      _instance;
} _ConfigCustomer_default_instance_;
class ConfigCustomerListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCustomerList>
      _instance;
} _ConfigCustomerList_default_instance_;
class ConfigCustomerOccupationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCustomerOccupation>
      _instance;
} _ConfigCustomerOccupation_default_instance_;
class ConfigCustomerOccupationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCustomerOccupationList>
      _instance;
} _ConfigCustomerOccupationList_default_instance_;
class ConfigCustomerWealthGradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCustomerWealthGrade>
      _instance;
} _ConfigCustomerWealthGrade_default_instance_;
class ConfigCustomerWealthGradeListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCustomerWealthGradeList>
      _instance;
} _ConfigCustomerWealthGradeList_default_instance_;
class ConfigPlaceGradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigPlaceGrade>
      _instance;
} _ConfigPlaceGrade_default_instance_;
class ConfigPlaceGradeListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigPlaceGradeList>
      _instance;
} _ConfigPlaceGradeList_default_instance_;
class ConfigHarborFoodOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHarborFoodOrder>
      _instance;
} _ConfigHarborFoodOrder_default_instance_;
class ConfigHarborFoodOrderListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHarborFoodOrderList>
      _instance;
} _ConfigHarborFoodOrderList_default_instance_;
class UserHarborDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHarbor>
      _instance;
} _UserHarbor_default_instance_;
class UserHarborNpcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHarborNpc>
      _instance;
} _UserHarborNpc_default_instance_;
class UserFoodOrderSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserFoodOrderSlot>
      _instance;
} _UserFoodOrderSlot_default_instance_;
class UserCustomerUnlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserCustomerUnlock>
      _instance;
} _UserCustomerUnlock_default_instance_;
}  // namespace db
namespace protobuf_StoredProcHarbour_2eproto {
static void InitDefaultsConfigFood() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFood_default_instance_;
    new (ptr) ::db::ConfigFood();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFood::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFood =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFood}, {}};

static void InitDefaultsConfigFoodList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFoodList_default_instance_;
    new (ptr) ::db::ConfigFoodList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFoodList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigFoodList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigFoodList}, {
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFood.base,}};

static void InitDefaultsConfigFoodRecipe() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFoodRecipe_default_instance_;
    new (ptr) ::db::ConfigFoodRecipe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFoodRecipe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFoodRecipe =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFoodRecipe}, {}};

static void InitDefaultsConfigFoodRecipeList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFoodRecipeList_default_instance_;
    new (ptr) ::db::ConfigFoodRecipeList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFoodRecipeList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigFoodRecipeList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigFoodRecipeList}, {
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodRecipe.base,}};

static void InitDefaultsConfigFoodFilter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFoodFilter_default_instance_;
    new (ptr) ::db::ConfigFoodFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFoodFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFoodFilter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFoodFilter}, {}};

static void InitDefaultsConfigFoodFilterList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFoodFilterList_default_instance_;
    new (ptr) ::db::ConfigFoodFilterList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFoodFilterList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigFoodFilterList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigFoodFilterList}, {
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodFilter.base,}};

static void InitDefaultsConfigCustomer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCustomer_default_instance_;
    new (ptr) ::db::ConfigCustomer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCustomer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCustomer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCustomer}, {}};

static void InitDefaultsConfigCustomerList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCustomerList_default_instance_;
    new (ptr) ::db::ConfigCustomerList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCustomerList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigCustomerList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigCustomerList}, {
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomer.base,}};

static void InitDefaultsConfigCustomerOccupation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCustomerOccupation_default_instance_;
    new (ptr) ::db::ConfigCustomerOccupation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCustomerOccupation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCustomerOccupation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCustomerOccupation}, {}};

static void InitDefaultsConfigCustomerOccupationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCustomerOccupationList_default_instance_;
    new (ptr) ::db::ConfigCustomerOccupationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCustomerOccupationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigCustomerOccupationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigCustomerOccupationList}, {
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerOccupation.base,}};

static void InitDefaultsConfigCustomerWealthGrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCustomerWealthGrade_default_instance_;
    new (ptr) ::db::ConfigCustomerWealthGrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCustomerWealthGrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCustomerWealthGrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCustomerWealthGrade}, {}};

static void InitDefaultsConfigCustomerWealthGradeList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCustomerWealthGradeList_default_instance_;
    new (ptr) ::db::ConfigCustomerWealthGradeList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCustomerWealthGradeList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigCustomerWealthGradeList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigCustomerWealthGradeList}, {
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerWealthGrade.base,}};

static void InitDefaultsConfigPlaceGrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigPlaceGrade_default_instance_;
    new (ptr) ::db::ConfigPlaceGrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigPlaceGrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigPlaceGrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigPlaceGrade}, {}};

static void InitDefaultsConfigPlaceGradeList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigPlaceGradeList_default_instance_;
    new (ptr) ::db::ConfigPlaceGradeList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigPlaceGradeList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigPlaceGradeList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigPlaceGradeList}, {
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigPlaceGrade.base,}};

static void InitDefaultsConfigHarborFoodOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHarborFoodOrder_default_instance_;
    new (ptr) ::db::ConfigHarborFoodOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHarborFoodOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHarborFoodOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigHarborFoodOrder}, {}};

static void InitDefaultsConfigHarborFoodOrderList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHarborFoodOrderList_default_instance_;
    new (ptr) ::db::ConfigHarborFoodOrderList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHarborFoodOrderList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigHarborFoodOrderList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigHarborFoodOrderList}, {
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigHarborFoodOrder.base,}};

static void InitDefaultsUserHarbor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserHarbor_default_instance_;
    new (ptr) ::db::UserHarbor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserHarbor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserHarbor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserHarbor}, {}};

static void InitDefaultsUserHarborNpc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserHarborNpc_default_instance_;
    new (ptr) ::db::UserHarborNpc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserHarborNpc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserHarborNpc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserHarborNpc}, {}};

static void InitDefaultsUserFoodOrderSlot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserFoodOrderSlot_default_instance_;
    new (ptr) ::db::UserFoodOrderSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserFoodOrderSlot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserFoodOrderSlot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserFoodOrderSlot}, {}};

static void InitDefaultsUserCustomerUnlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserCustomerUnlock_default_instance_;
    new (ptr) ::db::UserCustomerUnlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserCustomerUnlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserCustomerUnlock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserCustomerUnlock}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFood.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFoodList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFoodRecipe.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFoodRecipeList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFoodFilter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFoodFilterList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCustomer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCustomerList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCustomerOccupation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCustomerOccupationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCustomerWealthGrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCustomerWealthGradeList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigPlaceGrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigPlaceGradeList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHarborFoodOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHarborFoodOrderList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHarbor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHarborNpc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserFoodOrderSlot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserCustomerUnlock.base);
}

::google::protobuf::Metadata file_level_metadata[20];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, food_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, fit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, smell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, taste_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, bellyful_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, detoxifcation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, sober_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, exorcism_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, poison_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, alcohol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, evil_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, sour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, sweet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, bitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, hot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFood, salty_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, constitute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, add_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, ship_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, cooker_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, cook_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, eat_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipe, satisfaction_),
  3,
  0,
  4,
  1,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  2,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipeList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodRecipeList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, parameter_need_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, parameter_hate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, smell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, taste_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, bellyful_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, flavor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilter, stuff_),
  9,
  0,
  10,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilterList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFoodFilterList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, occupationid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, wealth_grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, is_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, unlock_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, food_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, service_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, food_filter2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, service_ratio2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, food_filter3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, service_ratio3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, quality_tip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, special_cond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, satisfaction_cond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomer, hungry_timeout_),
  8,
  0,
  1,
  9,
  10,
  11,
  12,
  13,
  2,
  14,
  3,
  15,
  4,
  16,
  5,
  6,
  7,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupation, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupation, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupation, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupation, func_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupation, question_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupation, answer_bonus_ratio_),
  3,
  0,
  4,
  1,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupationList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerOccupationList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerWealthGrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerWealthGrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerWealthGrade, grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerWealthGrade, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerWealthGrade, comfort_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerWealthGradeList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerWealthGradeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCustomerWealthGradeList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, place_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, levelup_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, leveldown_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, boom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, customer_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, customer_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGrade, customer_add_number_),
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  1,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGradeList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGradeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlaceGradeList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrder, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrder, hungry_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrder, goaboard_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrder, goaboard_flucuation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrder, queueing_num_max_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrderList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHarborFoodOrderList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarbor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarbor, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarbor, harborid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarbor, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarbor, grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarbor, boom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarbor, growtime_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, harborid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, npc_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, cfgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, seqno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, wealth_grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, satisfaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, occupation_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, occupation_event_starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, question_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, special_cond_bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, satisfaction_accepted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, task_need_idx1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, task_reward_idx1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, task_reward_accept1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, task_need_idx2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, task_reward_idx2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, task_reward_accept2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, task_need_idx3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, task_reward_idx3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, task_reward_accept3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHarborNpc, optime_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  14,
  15,
  16,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  17,
  26,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, slotid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, slot_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, slot_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, workshopid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, workerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, foodfilterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, formulaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, gather_gold_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, gather_satisfaction_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, tip_gold_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, tip_diamond_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, answer_bonus_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFoodOrderSlot, starttime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserCustomerUnlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserCustomerUnlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserCustomerUnlock, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserCustomerUnlock, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserCustomerUnlock, cfgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserCustomerUnlock, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserCustomerUnlock, optime_),
  0,
  2,
  1,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, sizeof(::db::ConfigFood)},
  { 47, 53, sizeof(::db::ConfigFoodList)},
  { 54, 73, sizeof(::db::ConfigFoodRecipe)},
  { 87, 93, sizeof(::db::ConfigFoodRecipeList)},
  { 94, 110, sizeof(::db::ConfigFoodFilter)},
  { 121, 127, sizeof(::db::ConfigFoodFilterList)},
  { 128, 151, sizeof(::db::ConfigCustomer)},
  { 169, 175, sizeof(::db::ConfigCustomerList)},
  { 176, 187, sizeof(::db::ConfigCustomerOccupation)},
  { 193, 199, sizeof(::db::ConfigCustomerOccupationList)},
  { 200, 208, sizeof(::db::ConfigCustomerWealthGrade)},
  { 211, 217, sizeof(::db::ConfigCustomerWealthGradeList)},
  { 218, 233, sizeof(::db::ConfigPlaceGrade)},
  { 243, 249, sizeof(::db::ConfigPlaceGradeList)},
  { 250, 260, sizeof(::db::ConfigHarborFoodOrder)},
  { 265, 271, sizeof(::db::ConfigHarborFoodOrderList)},
  { 272, 283, sizeof(::db::UserHarbor)},
  { 289, 321, sizeof(::db::UserHarborNpc)},
  { 348, 370, sizeof(::db::UserFoodOrderSlot)},
  { 387, 397, sizeof(::db::UserCustomerUnlock)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFood_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFoodList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFoodRecipe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFoodRecipeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFoodFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFoodFilterList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCustomer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCustomerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCustomerOccupation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCustomerOccupationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCustomerWealthGrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCustomerWealthGradeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigPlaceGrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigPlaceGradeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHarborFoodOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHarborFoodOrderList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserHarbor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserHarborNpc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserFoodOrderSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserCustomerUnlock_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "StoredProcHarbour.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027StoredProcHarbour.proto\022\002db\"\325\002\n\nConfig"
      "Food\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003"
      " \002(\005\022\022\n\nfood_group\030\004 \002(\005\022\017\n\007quality\030\005 \002("
      "\005\022\013\n\003fit\030\006 \002(\005\022\r\n\005color\030\013 \002(\005\022\r\n\005smell\030\014"
      " \002(\005\022\r\n\005taste\030\r \002(\005\022\020\n\010bellyful\030\016 \002(\005\022\025\n"
      "\rdetoxifcation\030\025 \002(\005\022\r\n\005sober\030\026 \002(\005\022\020\n\010e"
      "xorcism\030\027 \002(\005\022\016\n\006poison\030\030 \002(\005\022\017\n\007alcohol"
      "\030\031 \002(\005\022\014\n\004evil\030\032 \002(\005\022\014\n\004sour\030\037 \002(\005\022\r\n\005sw"
      "eet\030  \002(\005\022\016\n\006bitter\030! \002(\005\022\013\n\003hot\030\" \002(\005\022\r"
      "\n\005salty\030# \002(\005\".\n\016ConfigFoodList\022\034\n\004list\030"
      "\001 \003(\0132\016.db.ConfigFood\"\374\001\n\020ConfigFoodReci"
      "pe\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003 \002"
      "(\005\022\022\n\nconstitute\030\004 \002(\014\022\017\n\007add_val\030\005 \002(\005\022"
      "\020\n\010ship_exp\030\006 \002(\005\022\022\n\ncooker_exp\030\007 \002(\005\022\014\n"
      "\004gold\030\010 \002(\005\022\021\n\tcook_time\030\013 \002(\005\022\020\n\010eat_ti"
      "me\030\014 \002(\005\022\013\n\003way\030\r \002(\005\022\021\n\tattribute\030\016 \002(\014"
      "\022\014\n\004star\030\017 \002(\005\022\024\n\014satisfaction\030\020 \002(\005\":\n\024"
      "ConfigFoodRecipeList\022\"\n\004list\030\001 \003(\0132\024.db."
      "ConfigFoodRecipe\"\310\001\n\020ConfigFoodFilter\022\n\n"
      "\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003 \002(\005\022\026\n"
      "\016parameter_need\030\004 \002(\014\022\026\n\016parameter_hate\030"
      "\005 \002(\014\022\r\n\005color\030\013 \002(\014\022\r\n\005smell\030\014 \002(\014\022\r\n\005t"
      "aste\030\r \002(\014\022\020\n\010bellyful\030\016 \002(\014\022\016\n\006flavor\030\017"
      " \002(\014\022\r\n\005stuff\030\020 \002(\014\":\n\024ConfigFoodFilterL"
      "ist\022\"\n\004list\030\001 \003(\0132\024.db.ConfigFoodFilter\""
      "\201\003\n\016ConfigCustomer\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002"
      " \002(\014\022\014\n\004desc\030\003 \002(\014\022\024\n\014occupationid\030\004 \002(\005"
      "\022\024\n\014wealth_grade\030\005 \002(\005\022\014\n\004gold\030\006 \002(\005\022\021\n\t"
      "is_unlock\030\007 \002(\005\022\024\n\014unlock_group\030\010 \002(\005\022\023\n"
      "\013food_filter\030\013 \002(\014\022\025\n\rservice_ratio\030\014 \002("
      "\002\022\024\n\014food_filter2\030\r \002(\014\022\026\n\016service_ratio"
      "2\030\016 \002(\002\022\024\n\014food_filter3\030\017 \002(\014\022\026\n\016service"
      "_ratio3\030\020 \002(\002\022\023\n\013quality_tip\030\025 \002(\014\022\024\n\014sp"
      "ecial_cond\030\026 \002(\014\022\031\n\021satisfaction_cond\030\027 "
      "\002(\014\022\026\n\016hungry_timeout\030\030 \002(\005\"6\n\022ConfigCus"
      "tomerList\022 \n\004list\030\001 \003(\0132\022.db.ConfigCusto"
      "mer\"\205\001\n\030ConfigCustomerOccupation\022\n\n\002id\030\001"
      " \002(\005\022\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003 \002(\005\022\014\n\004func"
      "\030\004 \002(\014\022\027\n\017question_status\030\013 \002(\014\022\032\n\022answe"
      "r_bonus_ratio\030\014 \002(\002\"J\n\034ConfigCustomerOcc"
      "upationList\022*\n\004list\030\001 \003(\0132\034.db.ConfigCus"
      "tomerOccupation\"I\n\031ConfigCustomerWealthG"
      "rade\022\r\n\005grade\030\001 \002(\005\022\014\n\004gold\030\002 \002(\005\022\017\n\007com"
      "fort\030\003 \002(\005\"L\n\035ConfigCustomerWealthGradeL"
      "ist\022+\n\004list\030\001 \003(\0132\035.db.ConfigCustomerWea"
      "lthGrade\"\330\001\n\020ConfigPlaceGrade\022\n\n\002id\030\001 \002("
      "\005\022\020\n\010place_id\030\002 \002(\005\022\014\n\004name\030\003 \002(\014\022\r\n\005lev"
      "el\030\004 \002(\005\022\026\n\016levelup_unlock\030\005 \002(\005\022\030\n\020leve"
      "ldown_unlock\030\006 \002(\005\022\014\n\004boom\030\007 \002(\005\022\026\n\016cust"
      "omer_group\030\013 \002(\014\022\024\n\014customer_max\030\014 \002(\005\022\033"
      "\n\023customer_add_number\030\r \002(\002\":\n\024ConfigPla"
      "ceGradeList\022\"\n\004list\030\001 \003(\0132\024.db.ConfigPla"
      "ceGrade\"\220\001\n\025ConfigHarborFoodOrder\022\r\n\005lev"
      "el\030\001 \002(\005\022\026\n\016hungry_timeout\030\002 \002(\005\022\031\n\021goab"
      "oard_interval\030\003 \002(\005\022\033\n\023goaboard_flucuati"
      "on\030\004 \002(\005\022\030\n\020queueing_num_max\030\005 \002(\005\"D\n\031Co"
      "nfigHarborFoodOrderList\022\'\n\004list\030\001 \003(\0132\031."
      "db.ConfigHarborFoodOrder\"l\n\nUserHarbor\022\016"
      "\n\006userid\030\001 \002(\014\022\020\n\010harborid\030\002 \002(\005\022\r\n\005stat"
      "e\030\003 \002(\005\022\r\n\005grade\030\004 \002(\005\022\014\n\004boom\030\005 \002(\005\022\020\n\010"
      "growtime\030\006 \002(\020\"\344\004\n\rUserHarborNpc\022\016\n\006user"
      "id\030\001 \002(\014\022\020\n\010harborid\030\002 \002(\005\022\n\n\002sn\030\003 \002(\005\022\020"
      "\n\010npc_type\030\004 \002(\005\022\r\n\005cfgid\030\005 \002(\004\022\r\n\005state"
      "\030\006 \002(\005\022\017\n\007seconds\030\007 \002(\005\022\r\n\005seqno\030\013 \002(\005\022\024"
      "\n\014wealth_grade\030\014 \002(\005\022\014\n\004gold\030\r \002(\005\022\024\n\014sa"
      "tisfaction\030\016 \002(\005\022\016\n\006seatid\030\017 \002(\005\022\026\n\016occu"
      "pation_val\030\025 \002(\005\022\"\n\032occupation_event_sta"
      "rttime\030\026 \002(\020\022\027\n\017question_status\030\027 \002(\005\022\032\n"
      "\022special_cond_bonus\030\030 \002(\005\022\035\n\025satisfactio"
      "n_accepted\030\031 \002(\005\022\026\n\016task_need_idx1\030\037 \002(\005"
      "\022\030\n\020task_reward_idx1\030  \002(\005\022\033\n\023task_rewar"
      "d_accept1\030! \002(\005\022\026\n\016task_need_idx2\030\" \002(\005\022"
      "\030\n\020task_reward_idx2\030# \002(\005\022\033\n\023task_reward"
      "_accept2\030$ \002(\005\022\026\n\016task_need_idx3\030% \002(\005\022\030"
      "\n\020task_reward_idx3\030& \002(\005\022\033\n\023task_reward_"
      "accept3\030\' \002(\005\022\016\n\006optime\030) \002(\020\"\363\002\n\021UserFo"
      "odOrderSlot\022\016\n\006userid\030\001 \002(\014\022\016\n\006slotid\030\002 "
      "\002(\005\022\021\n\tslot_type\030\003 \002(\005\022\022\n\nslot_state\030\004 \002"
      "(\005\022\022\n\nworkshopid\030\013 \002(\005\022\020\n\010workerid\030\014 \002(\005"
      "\022\024\n\014foodfilterid\030\r \002(\005\022\021\n\tformulaid\030\016 \002("
      "\005\022\021\n\tproductid\030\017 \002(\004\022\017\n\007seconds\030\020 \002(\005\022\014\n"
      "\004star\030\025 \002(\005\022\027\n\017gather_gold_num\030\026 \002(\005\022\037\n\027"
      "gather_satisfaction_num\030\027 \002(\005\022\024\n\014tip_gol"
      "d_num\030\030 \002(\005\022\027\n\017tip_diamond_num\030\031 \002(\005\022\032\n\022"
      "answer_bonus_ratio\030\032 \002(\002\022\021\n\tstarttime\030\037 "
      "\002(\020\"^\n\022UserCustomerUnlock\022\016\n\006userid\030\001 \002("
      "\014\022\n\n\002sn\030\002 \002(\005\022\r\n\005cfgid\030\003 \002(\004\022\r\n\005state\030\004 "
      "\002(\005\022\016\n\006optime\030\013 \002(\020B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StoredProcHarbour.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_StoredProcHarbour_2eproto
namespace db {

// ===================================================================

void ConfigFood::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFood::kIdFieldNumber;
const int ConfigFood::kNameFieldNumber;
const int ConfigFood::kTypeFieldNumber;
const int ConfigFood::kFoodGroupFieldNumber;
const int ConfigFood::kQualityFieldNumber;
const int ConfigFood::kFitFieldNumber;
const int ConfigFood::kColorFieldNumber;
const int ConfigFood::kSmellFieldNumber;
const int ConfigFood::kTasteFieldNumber;
const int ConfigFood::kBellyfulFieldNumber;
const int ConfigFood::kDetoxifcationFieldNumber;
const int ConfigFood::kSoberFieldNumber;
const int ConfigFood::kExorcismFieldNumber;
const int ConfigFood::kPoisonFieldNumber;
const int ConfigFood::kAlcoholFieldNumber;
const int ConfigFood::kEvilFieldNumber;
const int ConfigFood::kSourFieldNumber;
const int ConfigFood::kSweetFieldNumber;
const int ConfigFood::kBitterFieldNumber;
const int ConfigFood::kHotFieldNumber;
const int ConfigFood::kSaltyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFood::ConfigFood()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFood.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFood)
}
ConfigFood::ConfigFood(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFood.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFood)
}
ConfigFood::ConfigFood(const ConfigFood& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&salty_) -
    reinterpret_cast<char*>(&id_)) + sizeof(salty_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFood)
}

void ConfigFood::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&salty_) -
      reinterpret_cast<char*>(&id_)) + sizeof(salty_));
}

ConfigFood::~ConfigFood() {
  // @@protoc_insertion_point(destructor:db.ConfigFood)
  SharedDtor();
}

void ConfigFood::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFood::ArenaDtor(void* object) {
  ConfigFood* _this = reinterpret_cast< ConfigFood* >(object);
  (void)_this;
}
void ConfigFood::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFood::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFood::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFood& ConfigFood::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFood.base);
  return *internal_default_instance();
}


void ConfigFood::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFood)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&smell_) -
        reinterpret_cast<char*>(&id_)) + sizeof(smell_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&taste_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&evil_) -
        reinterpret_cast<char*>(&taste_)) + sizeof(evil_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&sour_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&salty_) -
        reinterpret_cast<char*>(&sour_)) + sizeof(salty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFood)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 food_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_food_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_fit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 color = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 smell = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_smell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 taste = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_taste();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taste_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bellyful = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_bellyful();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bellyful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 detoxifcation = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_detoxifcation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detoxifcation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sober = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_sober();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sober_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exorcism = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_exorcism();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exorcism_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 poison = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_poison();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poison_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 alcohol = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_alcohol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alcohol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 evil = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_evil();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evil_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sour = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_sour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sweet = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_sweet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bitter = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_bitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hot = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_hot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 salty = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_salty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &salty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFood)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFood)
  return false;
#undef DO_
}

void ConfigFood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFood)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 food_group = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->food_group(), output);
  }

  // required int32 quality = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // required int32 fit = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fit(), output);
  }

  // required int32 color = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->color(), output);
  }

  // required int32 smell = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->smell(), output);
  }

  // required int32 taste = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->taste(), output);
  }

  // required int32 bellyful = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bellyful(), output);
  }

  // required int32 detoxifcation = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->detoxifcation(), output);
  }

  // required int32 sober = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->sober(), output);
  }

  // required int32 exorcism = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->exorcism(), output);
  }

  // required int32 poison = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->poison(), output);
  }

  // required int32 alcohol = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->alcohol(), output);
  }

  // required int32 evil = 26;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->evil(), output);
  }

  // required int32 sour = 31;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->sour(), output);
  }

  // required int32 sweet = 32;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->sweet(), output);
  }

  // required int32 bitter = 33;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->bitter(), output);
  }

  // required int32 hot = 34;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->hot(), output);
  }

  // required int32 salty = 35;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->salty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFood)
}

::google::protobuf::uint8* ConfigFood::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFood)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 food_group = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->food_group(), target);
  }

  // required int32 quality = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // required int32 fit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fit(), target);
  }

  // required int32 color = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->color(), target);
  }

  // required int32 smell = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->smell(), target);
  }

  // required int32 taste = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->taste(), target);
  }

  // required int32 bellyful = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->bellyful(), target);
  }

  // required int32 detoxifcation = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->detoxifcation(), target);
  }

  // required int32 sober = 22;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->sober(), target);
  }

  // required int32 exorcism = 23;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->exorcism(), target);
  }

  // required int32 poison = 24;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->poison(), target);
  }

  // required int32 alcohol = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->alcohol(), target);
  }

  // required int32 evil = 26;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->evil(), target);
  }

  // required int32 sour = 31;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->sour(), target);
  }

  // required int32 sweet = 32;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->sweet(), target);
  }

  // required int32 bitter = 33;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->bitter(), target);
  }

  // required int32 hot = 34;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->hot(), target);
  }

  // required int32 salty = 35;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->salty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFood)
  return target;
}

size_t ConfigFood::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFood)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_food_group()) {
    // required int32 food_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->food_group());
  }

  if (has_quality()) {
    // required int32 quality = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  if (has_fit()) {
    // required int32 fit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fit());
  }

  if (has_color()) {
    // required int32 color = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  if (has_smell()) {
    // required int32 smell = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->smell());
  }

  if (has_taste()) {
    // required int32 taste = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taste());
  }

  if (has_bellyful()) {
    // required int32 bellyful = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bellyful());
  }

  if (has_detoxifcation()) {
    // required int32 detoxifcation = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->detoxifcation());
  }

  if (has_sober()) {
    // required int32 sober = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sober());
  }

  if (has_exorcism()) {
    // required int32 exorcism = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exorcism());
  }

  if (has_poison()) {
    // required int32 poison = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->poison());
  }

  if (has_alcohol()) {
    // required int32 alcohol = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alcohol());
  }

  if (has_evil()) {
    // required int32 evil = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->evil());
  }

  if (has_sour()) {
    // required int32 sour = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sour());
  }

  if (has_sweet()) {
    // required int32 sweet = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sweet());
  }

  if (has_bitter()) {
    // required int32 bitter = 33;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bitter());
  }

  if (has_hot()) {
    // required int32 hot = 34;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hot());
  }

  if (has_salty()) {
    // required int32 salty = 35;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->salty());
  }

  return total_size;
}
size_t ConfigFood::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFood)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x001fffff) ^ 0x001fffff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 food_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->food_group());

    // required int32 quality = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());

    // required int32 fit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fit());

    // required int32 color = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());

    // required int32 smell = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->smell());

    // required int32 taste = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taste());

    // required int32 bellyful = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bellyful());

    // required int32 detoxifcation = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->detoxifcation());

    // required int32 sober = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sober());

    // required int32 exorcism = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exorcism());

    // required int32 poison = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->poison());

    // required int32 alcohol = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alcohol());

    // required int32 evil = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->evil());

    // required int32 sour = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sour());

    // required int32 sweet = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sweet());

    // required int32 bitter = 33;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bitter());

    // required int32 hot = 34;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hot());

    // required int32 salty = 35;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->salty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFood::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFood)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFood* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFood>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFood)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFood)
    MergeFrom(*source);
  }
}

void ConfigFood::MergeFrom(const ConfigFood& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFood)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      food_group_ = from.food_group_;
    }
    if (cached_has_bits & 0x00000010u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      fit_ = from.fit_;
    }
    if (cached_has_bits & 0x00000040u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000080u) {
      smell_ = from.smell_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      taste_ = from.taste_;
    }
    if (cached_has_bits & 0x00000200u) {
      bellyful_ = from.bellyful_;
    }
    if (cached_has_bits & 0x00000400u) {
      detoxifcation_ = from.detoxifcation_;
    }
    if (cached_has_bits & 0x00000800u) {
      sober_ = from.sober_;
    }
    if (cached_has_bits & 0x00001000u) {
      exorcism_ = from.exorcism_;
    }
    if (cached_has_bits & 0x00002000u) {
      poison_ = from.poison_;
    }
    if (cached_has_bits & 0x00004000u) {
      alcohol_ = from.alcohol_;
    }
    if (cached_has_bits & 0x00008000u) {
      evil_ = from.evil_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      sour_ = from.sour_;
    }
    if (cached_has_bits & 0x00020000u) {
      sweet_ = from.sweet_;
    }
    if (cached_has_bits & 0x00040000u) {
      bitter_ = from.bitter_;
    }
    if (cached_has_bits & 0x00080000u) {
      hot_ = from.hot_;
    }
    if (cached_has_bits & 0x00100000u) {
      salty_ = from.salty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFood::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFood::CopyFrom(const ConfigFood& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFood::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;
  return true;
}

void ConfigFood::Swap(ConfigFood* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFood* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFood::UnsafeArenaSwap(ConfigFood* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFood::InternalSwap(ConfigFood* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(food_group_, other->food_group_);
  swap(quality_, other->quality_);
  swap(fit_, other->fit_);
  swap(color_, other->color_);
  swap(smell_, other->smell_);
  swap(taste_, other->taste_);
  swap(bellyful_, other->bellyful_);
  swap(detoxifcation_, other->detoxifcation_);
  swap(sober_, other->sober_);
  swap(exorcism_, other->exorcism_);
  swap(poison_, other->poison_);
  swap(alcohol_, other->alcohol_);
  swap(evil_, other->evil_);
  swap(sour_, other->sour_);
  swap(sweet_, other->sweet_);
  swap(bitter_, other->bitter_);
  swap(hot_, other->hot_);
  swap(salty_, other->salty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFood::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFoodList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFoodList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFoodList::ConfigFoodList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFoodList)
}
ConfigFoodList::ConfigFoodList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFoodList)
}
ConfigFoodList::ConfigFoodList(const ConfigFoodList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigFoodList)
}

void ConfigFoodList::SharedCtor() {
}

ConfigFoodList::~ConfigFoodList() {
  // @@protoc_insertion_point(destructor:db.ConfigFoodList)
  SharedDtor();
}

void ConfigFoodList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigFoodList::ArenaDtor(void* object) {
  ConfigFoodList* _this = reinterpret_cast< ConfigFoodList* >(object);
  (void)_this;
}
void ConfigFoodList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFoodList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFoodList::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFoodList& ConfigFoodList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodList.base);
  return *internal_default_instance();
}


void ConfigFoodList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFoodList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFoodList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFoodList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigFood list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFoodList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFoodList)
  return false;
#undef DO_
}

void ConfigFoodList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFoodList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigFood list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFoodList)
}

::google::protobuf::uint8* ConfigFoodList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFoodList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigFood list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFoodList)
  return target;
}

size_t ConfigFoodList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFoodList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigFood list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFoodList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFoodList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFoodList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFoodList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFoodList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFoodList)
    MergeFrom(*source);
  }
}

void ConfigFoodList::MergeFrom(const ConfigFoodList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFoodList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigFoodList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFoodList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFoodList::CopyFrom(const ConfigFoodList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFoodList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFoodList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigFoodList::Swap(ConfigFoodList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFoodList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFoodList::UnsafeArenaSwap(ConfigFoodList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFoodList::InternalSwap(ConfigFoodList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFoodList::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFoodRecipe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFoodRecipe::kIdFieldNumber;
const int ConfigFoodRecipe::kNameFieldNumber;
const int ConfigFoodRecipe::kTypeFieldNumber;
const int ConfigFoodRecipe::kConstituteFieldNumber;
const int ConfigFoodRecipe::kAddValFieldNumber;
const int ConfigFoodRecipe::kShipExpFieldNumber;
const int ConfigFoodRecipe::kCookerExpFieldNumber;
const int ConfigFoodRecipe::kGoldFieldNumber;
const int ConfigFoodRecipe::kCookTimeFieldNumber;
const int ConfigFoodRecipe::kEatTimeFieldNumber;
const int ConfigFoodRecipe::kWayFieldNumber;
const int ConfigFoodRecipe::kAttributeFieldNumber;
const int ConfigFoodRecipe::kStarFieldNumber;
const int ConfigFoodRecipe::kSatisfactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFoodRecipe::ConfigFoodRecipe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodRecipe.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFoodRecipe)
}
ConfigFoodRecipe::ConfigFoodRecipe(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodRecipe.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFoodRecipe)
}
ConfigFoodRecipe::ConfigFoodRecipe(const ConfigFoodRecipe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  constitute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_constitute()) {
    constitute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.constitute(),
      GetArenaNoVirtual());
  }
  attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attribute()) {
    attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&satisfaction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(satisfaction_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFoodRecipe)
}

void ConfigFoodRecipe::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constitute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&satisfaction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(satisfaction_));
}

ConfigFoodRecipe::~ConfigFoodRecipe() {
  // @@protoc_insertion_point(destructor:db.ConfigFoodRecipe)
  SharedDtor();
}

void ConfigFoodRecipe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constitute_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFoodRecipe::ArenaDtor(void* object) {
  ConfigFoodRecipe* _this = reinterpret_cast< ConfigFoodRecipe* >(object);
  (void)_this;
}
void ConfigFoodRecipe::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFoodRecipe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFoodRecipe::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFoodRecipe& ConfigFoodRecipe::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodRecipe.base);
  return *internal_default_instance();
}


void ConfigFoodRecipe::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFoodRecipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      constitute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      attribute_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooker_exp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(cooker_exp_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&satisfaction_) -
        reinterpret_cast<char*>(&gold_)) + sizeof(satisfaction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFoodRecipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFoodRecipe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes constitute = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_constitute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 add_val = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_add_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ship_exp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ship_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cooker_exp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_cooker_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooker_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cook_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_cook_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cook_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 eat_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_eat_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eat_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 way = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_way();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &way_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes attribute = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 satisfaction = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_satisfaction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satisfaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFoodRecipe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFoodRecipe)
  return false;
#undef DO_
}

void ConfigFoodRecipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFoodRecipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required bytes constitute = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->constitute(), output);
  }

  // required int32 add_val = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_val(), output);
  }

  // required int32 ship_exp = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ship_exp(), output);
  }

  // required int32 cooker_exp = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cooker_exp(), output);
  }

  // required int32 gold = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gold(), output);
  }

  // required int32 cook_time = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cook_time(), output);
  }

  // required int32 eat_time = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->eat_time(), output);
  }

  // required int32 way = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->way(), output);
  }

  // required bytes attribute = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->attribute(), output);
  }

  // required int32 star = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->star(), output);
  }

  // required int32 satisfaction = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->satisfaction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFoodRecipe)
}

::google::protobuf::uint8* ConfigFoodRecipe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFoodRecipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required bytes constitute = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->constitute(), target);
  }

  // required int32 add_val = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_val(), target);
  }

  // required int32 ship_exp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ship_exp(), target);
  }

  // required int32 cooker_exp = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cooker_exp(), target);
  }

  // required int32 gold = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gold(), target);
  }

  // required int32 cook_time = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cook_time(), target);
  }

  // required int32 eat_time = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->eat_time(), target);
  }

  // required int32 way = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->way(), target);
  }

  // required bytes attribute = 14;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->attribute(), target);
  }

  // required int32 star = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->star(), target);
  }

  // required int32 satisfaction = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->satisfaction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFoodRecipe)
  return target;
}

size_t ConfigFoodRecipe::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFoodRecipe)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_constitute()) {
    // required bytes constitute = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->constitute());
  }

  if (has_attribute()) {
    // required bytes attribute = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_add_val()) {
    // required int32 add_val = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_val());
  }

  if (has_ship_exp()) {
    // required int32 ship_exp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ship_exp());
  }

  if (has_cooker_exp()) {
    // required int32 cooker_exp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cooker_exp());
  }

  if (has_gold()) {
    // required int32 gold = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  if (has_cook_time()) {
    // required int32 cook_time = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cook_time());
  }

  if (has_eat_time()) {
    // required int32 eat_time = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eat_time());
  }

  if (has_way()) {
    // required int32 way = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->way());
  }

  if (has_star()) {
    // required int32 star = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_satisfaction()) {
    // required int32 satisfaction = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->satisfaction());
  }

  return total_size;
}
size_t ConfigFoodRecipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFoodRecipe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes constitute = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->constitute());

    // required bytes attribute = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 add_val = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_val());

    // required int32 ship_exp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ship_exp());

    // required int32 cooker_exp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cooker_exp());

    // required int32 gold = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());

    // required int32 cook_time = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cook_time());

    // required int32 eat_time = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eat_time());

    // required int32 way = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->way());

    // required int32 star = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required int32 satisfaction = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->satisfaction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFoodRecipe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFoodRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFoodRecipe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFoodRecipe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFoodRecipe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFoodRecipe)
    MergeFrom(*source);
  }
}

void ConfigFoodRecipe::MergeFrom(const ConfigFoodRecipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFoodRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_constitute(from.constitute());
    }
    if (cached_has_bits & 0x00000004u) {
      set_attribute(from.attribute());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      add_val_ = from.add_val_;
    }
    if (cached_has_bits & 0x00000040u) {
      ship_exp_ = from.ship_exp_;
    }
    if (cached_has_bits & 0x00000080u) {
      cooker_exp_ = from.cooker_exp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000200u) {
      cook_time_ = from.cook_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      eat_time_ = from.eat_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      way_ = from.way_;
    }
    if (cached_has_bits & 0x00001000u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00002000u) {
      satisfaction_ = from.satisfaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFoodRecipe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFoodRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFoodRecipe::CopyFrom(const ConfigFoodRecipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFoodRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFoodRecipe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  return true;
}

void ConfigFoodRecipe::Swap(ConfigFoodRecipe* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFoodRecipe* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFoodRecipe::UnsafeArenaSwap(ConfigFoodRecipe* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFoodRecipe::InternalSwap(ConfigFoodRecipe* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  constitute_.Swap(&other->constitute_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attribute_.Swap(&other->attribute_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(add_val_, other->add_val_);
  swap(ship_exp_, other->ship_exp_);
  swap(cooker_exp_, other->cooker_exp_);
  swap(gold_, other->gold_);
  swap(cook_time_, other->cook_time_);
  swap(eat_time_, other->eat_time_);
  swap(way_, other->way_);
  swap(star_, other->star_);
  swap(satisfaction_, other->satisfaction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFoodRecipe::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFoodRecipeList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFoodRecipeList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFoodRecipeList::ConfigFoodRecipeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodRecipeList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFoodRecipeList)
}
ConfigFoodRecipeList::ConfigFoodRecipeList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodRecipeList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFoodRecipeList)
}
ConfigFoodRecipeList::ConfigFoodRecipeList(const ConfigFoodRecipeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigFoodRecipeList)
}

void ConfigFoodRecipeList::SharedCtor() {
}

ConfigFoodRecipeList::~ConfigFoodRecipeList() {
  // @@protoc_insertion_point(destructor:db.ConfigFoodRecipeList)
  SharedDtor();
}

void ConfigFoodRecipeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigFoodRecipeList::ArenaDtor(void* object) {
  ConfigFoodRecipeList* _this = reinterpret_cast< ConfigFoodRecipeList* >(object);
  (void)_this;
}
void ConfigFoodRecipeList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFoodRecipeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFoodRecipeList::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFoodRecipeList& ConfigFoodRecipeList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodRecipeList.base);
  return *internal_default_instance();
}


void ConfigFoodRecipeList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFoodRecipeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFoodRecipeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFoodRecipeList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigFoodRecipe list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFoodRecipeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFoodRecipeList)
  return false;
#undef DO_
}

void ConfigFoodRecipeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFoodRecipeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigFoodRecipe list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFoodRecipeList)
}

::google::protobuf::uint8* ConfigFoodRecipeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFoodRecipeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigFoodRecipe list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFoodRecipeList)
  return target;
}

size_t ConfigFoodRecipeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFoodRecipeList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigFoodRecipe list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFoodRecipeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFoodRecipeList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFoodRecipeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFoodRecipeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFoodRecipeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFoodRecipeList)
    MergeFrom(*source);
  }
}

void ConfigFoodRecipeList::MergeFrom(const ConfigFoodRecipeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFoodRecipeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigFoodRecipeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFoodRecipeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFoodRecipeList::CopyFrom(const ConfigFoodRecipeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFoodRecipeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFoodRecipeList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigFoodRecipeList::Swap(ConfigFoodRecipeList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFoodRecipeList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFoodRecipeList::UnsafeArenaSwap(ConfigFoodRecipeList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFoodRecipeList::InternalSwap(ConfigFoodRecipeList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFoodRecipeList::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFoodFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFoodFilter::kIdFieldNumber;
const int ConfigFoodFilter::kNameFieldNumber;
const int ConfigFoodFilter::kTypeFieldNumber;
const int ConfigFoodFilter::kParameterNeedFieldNumber;
const int ConfigFoodFilter::kParameterHateFieldNumber;
const int ConfigFoodFilter::kColorFieldNumber;
const int ConfigFoodFilter::kSmellFieldNumber;
const int ConfigFoodFilter::kTasteFieldNumber;
const int ConfigFoodFilter::kBellyfulFieldNumber;
const int ConfigFoodFilter::kFlavorFieldNumber;
const int ConfigFoodFilter::kStuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFoodFilter::ConfigFoodFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodFilter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFoodFilter)
}
ConfigFoodFilter::ConfigFoodFilter(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodFilter.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFoodFilter)
}
ConfigFoodFilter::ConfigFoodFilter(const ConfigFoodFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  parameter_need_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parameter_need()) {
    parameter_need_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameter_need(),
      GetArenaNoVirtual());
  }
  parameter_hate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parameter_hate()) {
    parameter_hate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameter_hate(),
      GetArenaNoVirtual());
  }
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color(),
      GetArenaNoVirtual());
  }
  smell_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smell()) {
    smell_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smell(),
      GetArenaNoVirtual());
  }
  taste_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_taste()) {
    taste_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taste(),
      GetArenaNoVirtual());
  }
  bellyful_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bellyful()) {
    bellyful_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bellyful(),
      GetArenaNoVirtual());
  }
  flavor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_flavor()) {
    flavor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flavor(),
      GetArenaNoVirtual());
  }
  stuff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stuff()) {
    stuff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stuff(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFoodFilter)
}

void ConfigFoodFilter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_need_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_hate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smell_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taste_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bellyful_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flavor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stuff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

ConfigFoodFilter::~ConfigFoodFilter() {
  // @@protoc_insertion_point(destructor:db.ConfigFoodFilter)
  SharedDtor();
}

void ConfigFoodFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_need_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_hate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smell_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taste_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bellyful_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flavor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stuff_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFoodFilter::ArenaDtor(void* object) {
  ConfigFoodFilter* _this = reinterpret_cast< ConfigFoodFilter* >(object);
  (void)_this;
}
void ConfigFoodFilter::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFoodFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFoodFilter::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFoodFilter& ConfigFoodFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodFilter.base);
  return *internal_default_instance();
}


void ConfigFoodFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFoodFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      parameter_need_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      parameter_hate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      smell_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      taste_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      bellyful_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      flavor_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    stuff_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 1536u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFoodFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFoodFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes parameter_need = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parameter_need()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes parameter_hate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parameter_hate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes color = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes smell = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_smell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes taste = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taste()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes bellyful = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bellyful()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes flavor = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_flavor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes stuff = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFoodFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFoodFilter)
  return false;
#undef DO_
}

void ConfigFoodFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFoodFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required bytes parameter_need = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->parameter_need(), output);
  }

  // required bytes parameter_hate = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->parameter_hate(), output);
  }

  // required bytes color = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->color(), output);
  }

  // required bytes smell = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->smell(), output);
  }

  // required bytes taste = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->taste(), output);
  }

  // required bytes bellyful = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->bellyful(), output);
  }

  // required bytes flavor = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->flavor(), output);
  }

  // required bytes stuff = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->stuff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFoodFilter)
}

::google::protobuf::uint8* ConfigFoodFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFoodFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required bytes parameter_need = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->parameter_need(), target);
  }

  // required bytes parameter_hate = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->parameter_hate(), target);
  }

  // required bytes color = 11;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->color(), target);
  }

  // required bytes smell = 12;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->smell(), target);
  }

  // required bytes taste = 13;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->taste(), target);
  }

  // required bytes bellyful = 14;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->bellyful(), target);
  }

  // required bytes flavor = 15;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->flavor(), target);
  }

  // required bytes stuff = 16;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->stuff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFoodFilter)
  return target;
}

size_t ConfigFoodFilter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFoodFilter)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_parameter_need()) {
    // required bytes parameter_need = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parameter_need());
  }

  if (has_parameter_hate()) {
    // required bytes parameter_hate = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parameter_hate());
  }

  if (has_color()) {
    // required bytes color = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->color());
  }

  if (has_smell()) {
    // required bytes smell = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->smell());
  }

  if (has_taste()) {
    // required bytes taste = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taste());
  }

  if (has_bellyful()) {
    // required bytes bellyful = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bellyful());
  }

  if (has_flavor()) {
    // required bytes flavor = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->flavor());
  }

  if (has_stuff()) {
    // required bytes stuff = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stuff());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ConfigFoodFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFoodFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes parameter_need = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parameter_need());

    // required bytes parameter_hate = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parameter_hate());

    // required bytes color = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->color());

    // required bytes smell = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->smell());

    // required bytes taste = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taste());

    // required bytes bellyful = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bellyful());

    // required bytes flavor = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->flavor());

    // required bytes stuff = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stuff());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFoodFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFoodFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFoodFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFoodFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFoodFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFoodFilter)
    MergeFrom(*source);
  }
}

void ConfigFoodFilter::MergeFrom(const ConfigFoodFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFoodFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_parameter_need(from.parameter_need());
    }
    if (cached_has_bits & 0x00000004u) {
      set_parameter_hate(from.parameter_hate());
    }
    if (cached_has_bits & 0x00000008u) {
      set_color(from.color());
    }
    if (cached_has_bits & 0x00000010u) {
      set_smell(from.smell());
    }
    if (cached_has_bits & 0x00000020u) {
      set_taste(from.taste());
    }
    if (cached_has_bits & 0x00000040u) {
      set_bellyful(from.bellyful());
    }
    if (cached_has_bits & 0x00000080u) {
      set_flavor(from.flavor());
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      set_stuff(from.stuff());
    }
    if (cached_has_bits & 0x00000200u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFoodFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFoodFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFoodFilter::CopyFrom(const ConfigFoodFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFoodFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFoodFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void ConfigFoodFilter::Swap(ConfigFoodFilter* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFoodFilter* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFoodFilter::UnsafeArenaSwap(ConfigFoodFilter* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFoodFilter::InternalSwap(ConfigFoodFilter* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parameter_need_.Swap(&other->parameter_need_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parameter_hate_.Swap(&other->parameter_hate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  smell_.Swap(&other->smell_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  taste_.Swap(&other->taste_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bellyful_.Swap(&other->bellyful_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  flavor_.Swap(&other->flavor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stuff_.Swap(&other->stuff_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFoodFilter::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFoodFilterList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFoodFilterList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFoodFilterList::ConfigFoodFilterList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodFilterList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFoodFilterList)
}
ConfigFoodFilterList::ConfigFoodFilterList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodFilterList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFoodFilterList)
}
ConfigFoodFilterList::ConfigFoodFilterList(const ConfigFoodFilterList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigFoodFilterList)
}

void ConfigFoodFilterList::SharedCtor() {
}

ConfigFoodFilterList::~ConfigFoodFilterList() {
  // @@protoc_insertion_point(destructor:db.ConfigFoodFilterList)
  SharedDtor();
}

void ConfigFoodFilterList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigFoodFilterList::ArenaDtor(void* object) {
  ConfigFoodFilterList* _this = reinterpret_cast< ConfigFoodFilterList* >(object);
  (void)_this;
}
void ConfigFoodFilterList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFoodFilterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFoodFilterList::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFoodFilterList& ConfigFoodFilterList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigFoodFilterList.base);
  return *internal_default_instance();
}


void ConfigFoodFilterList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFoodFilterList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFoodFilterList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFoodFilterList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigFoodFilter list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFoodFilterList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFoodFilterList)
  return false;
#undef DO_
}

void ConfigFoodFilterList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFoodFilterList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigFoodFilter list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFoodFilterList)
}

::google::protobuf::uint8* ConfigFoodFilterList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFoodFilterList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigFoodFilter list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFoodFilterList)
  return target;
}

size_t ConfigFoodFilterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFoodFilterList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigFoodFilter list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFoodFilterList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFoodFilterList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFoodFilterList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFoodFilterList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFoodFilterList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFoodFilterList)
    MergeFrom(*source);
  }
}

void ConfigFoodFilterList::MergeFrom(const ConfigFoodFilterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFoodFilterList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigFoodFilterList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFoodFilterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFoodFilterList::CopyFrom(const ConfigFoodFilterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFoodFilterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFoodFilterList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigFoodFilterList::Swap(ConfigFoodFilterList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFoodFilterList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFoodFilterList::UnsafeArenaSwap(ConfigFoodFilterList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFoodFilterList::InternalSwap(ConfigFoodFilterList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFoodFilterList::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCustomer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCustomer::kIdFieldNumber;
const int ConfigCustomer::kNameFieldNumber;
const int ConfigCustomer::kDescFieldNumber;
const int ConfigCustomer::kOccupationidFieldNumber;
const int ConfigCustomer::kWealthGradeFieldNumber;
const int ConfigCustomer::kGoldFieldNumber;
const int ConfigCustomer::kIsUnlockFieldNumber;
const int ConfigCustomer::kUnlockGroupFieldNumber;
const int ConfigCustomer::kFoodFilterFieldNumber;
const int ConfigCustomer::kServiceRatioFieldNumber;
const int ConfigCustomer::kFoodFilter2FieldNumber;
const int ConfigCustomer::kServiceRatio2FieldNumber;
const int ConfigCustomer::kFoodFilter3FieldNumber;
const int ConfigCustomer::kServiceRatio3FieldNumber;
const int ConfigCustomer::kQualityTipFieldNumber;
const int ConfigCustomer::kSpecialCondFieldNumber;
const int ConfigCustomer::kSatisfactionCondFieldNumber;
const int ConfigCustomer::kHungryTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCustomer::ConfigCustomer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCustomer)
}
ConfigCustomer::ConfigCustomer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomer.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCustomer)
}
ConfigCustomer::ConfigCustomer(const ConfigCustomer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc(),
      GetArenaNoVirtual());
  }
  food_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_food_filter()) {
    food_filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.food_filter(),
      GetArenaNoVirtual());
  }
  food_filter2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_food_filter2()) {
    food_filter2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.food_filter2(),
      GetArenaNoVirtual());
  }
  food_filter3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_food_filter3()) {
    food_filter3_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.food_filter3(),
      GetArenaNoVirtual());
  }
  quality_tip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_quality_tip()) {
    quality_tip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_tip(),
      GetArenaNoVirtual());
  }
  special_cond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_special_cond()) {
    special_cond_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.special_cond(),
      GetArenaNoVirtual());
  }
  satisfaction_cond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_satisfaction_cond()) {
    satisfaction_cond_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.satisfaction_cond(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hungry_timeout_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hungry_timeout_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCustomer)
}

void ConfigCustomer::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  food_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  food_filter2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  food_filter3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_tip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_cond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  satisfaction_cond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hungry_timeout_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hungry_timeout_));
}

ConfigCustomer::~ConfigCustomer() {
  // @@protoc_insertion_point(destructor:db.ConfigCustomer)
  SharedDtor();
}

void ConfigCustomer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  food_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  food_filter2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  food_filter3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_tip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_cond_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  satisfaction_cond_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigCustomer::ArenaDtor(void* object) {
  ConfigCustomer* _this = reinterpret_cast< ConfigCustomer* >(object);
  (void)_this;
}
void ConfigCustomer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCustomer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCustomer::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCustomer& ConfigCustomer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomer.base);
  return *internal_default_instance();
}


void ConfigCustomer::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCustomer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      food_filter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      food_filter2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      food_filter3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      quality_tip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      special_cond_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      satisfaction_cond_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_ratio2_) -
        reinterpret_cast<char*>(&id_)) + sizeof(service_ratio2_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&service_ratio3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hungry_timeout_) -
        reinterpret_cast<char*>(&service_ratio3_)) + sizeof(hungry_timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCustomer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCustomer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 occupationid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_occupationid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupationid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 wealth_grade = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_wealth_grade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wealth_grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 is_unlock = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_unlock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_unlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 unlock_group = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_unlock_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes food_filter = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_food_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float service_ratio = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_service_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &service_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes food_filter2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_food_filter2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float service_ratio2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_service_ratio2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &service_ratio2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes food_filter3 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_food_filter3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float service_ratio3 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_service_ratio3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &service_ratio3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes quality_tip = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quality_tip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes special_cond = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_special_cond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes satisfaction_cond = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_satisfaction_cond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hungry_timeout = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_hungry_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hungry_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCustomer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCustomer)
  return false;
#undef DO_
}

void ConfigCustomer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCustomer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->desc(), output);
  }

  // required int32 occupationid = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->occupationid(), output);
  }

  // required int32 wealth_grade = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wealth_grade(), output);
  }

  // required int32 gold = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gold(), output);
  }

  // required int32 is_unlock = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_unlock(), output);
  }

  // required int32 unlock_group = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->unlock_group(), output);
  }

  // required bytes food_filter = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->food_filter(), output);
  }

  // required float service_ratio = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->service_ratio(), output);
  }

  // required bytes food_filter2 = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->food_filter2(), output);
  }

  // required float service_ratio2 = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->service_ratio2(), output);
  }

  // required bytes food_filter3 = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->food_filter3(), output);
  }

  // required float service_ratio3 = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->service_ratio3(), output);
  }

  // required bytes quality_tip = 21;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->quality_tip(), output);
  }

  // required bytes special_cond = 22;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->special_cond(), output);
  }

  // required bytes satisfaction_cond = 23;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->satisfaction_cond(), output);
  }

  // required int32 hungry_timeout = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->hungry_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCustomer)
}

::google::protobuf::uint8* ConfigCustomer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCustomer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes desc = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->desc(), target);
  }

  // required int32 occupationid = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->occupationid(), target);
  }

  // required int32 wealth_grade = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wealth_grade(), target);
  }

  // required int32 gold = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gold(), target);
  }

  // required int32 is_unlock = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_unlock(), target);
  }

  // required int32 unlock_group = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->unlock_group(), target);
  }

  // required bytes food_filter = 11;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->food_filter(), target);
  }

  // required float service_ratio = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->service_ratio(), target);
  }

  // required bytes food_filter2 = 13;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->food_filter2(), target);
  }

  // required float service_ratio2 = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->service_ratio2(), target);
  }

  // required bytes food_filter3 = 15;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->food_filter3(), target);
  }

  // required float service_ratio3 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->service_ratio3(), target);
  }

  // required bytes quality_tip = 21;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->quality_tip(), target);
  }

  // required bytes special_cond = 22;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->special_cond(), target);
  }

  // required bytes satisfaction_cond = 23;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->satisfaction_cond(), target);
  }

  // required int32 hungry_timeout = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->hungry_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCustomer)
  return target;
}

size_t ConfigCustomer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCustomer)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_desc()) {
    // required bytes desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (has_food_filter()) {
    // required bytes food_filter = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->food_filter());
  }

  if (has_food_filter2()) {
    // required bytes food_filter2 = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->food_filter2());
  }

  if (has_food_filter3()) {
    // required bytes food_filter3 = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->food_filter3());
  }

  if (has_quality_tip()) {
    // required bytes quality_tip = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality_tip());
  }

  if (has_special_cond()) {
    // required bytes special_cond = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_cond());
  }

  if (has_satisfaction_cond()) {
    // required bytes satisfaction_cond = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->satisfaction_cond());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_occupationid()) {
    // required int32 occupationid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupationid());
  }

  if (has_wealth_grade()) {
    // required int32 wealth_grade = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wealth_grade());
  }

  if (has_gold()) {
    // required int32 gold = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  if (has_is_unlock()) {
    // required int32 is_unlock = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_unlock());
  }

  if (has_unlock_group()) {
    // required int32 unlock_group = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unlock_group());
  }

  if (has_service_ratio()) {
    // required float service_ratio = 12;
    total_size += 1 + 4;
  }

  if (has_service_ratio2()) {
    // required float service_ratio2 = 14;
    total_size += 1 + 4;
  }

  if (has_service_ratio3()) {
    // required float service_ratio3 = 16;
    total_size += 2 + 4;
  }

  if (has_hungry_timeout()) {
    // required int32 hungry_timeout = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hungry_timeout());
  }

  return total_size;
}
size_t ConfigCustomer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCustomer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());

    // required bytes food_filter = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->food_filter());

    // required bytes food_filter2 = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->food_filter2());

    // required bytes food_filter3 = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->food_filter3());

    // required bytes quality_tip = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality_tip());

    // required bytes special_cond = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_cond());

    // required bytes satisfaction_cond = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->satisfaction_cond());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 occupationid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupationid());

    // required int32 wealth_grade = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wealth_grade());

    // required int32 gold = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());

    // required int32 is_unlock = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_unlock());

    // required int32 unlock_group = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unlock_group());

    // required float service_ratio = 12;
    total_size += 1 + 4;

    // required float service_ratio2 = 14;
    total_size += 1 + 4;

    // required float service_ratio3 = 16;
    total_size += 2 + 4;

    // required int32 hungry_timeout = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hungry_timeout());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCustomer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCustomer)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCustomer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCustomer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCustomer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCustomer)
    MergeFrom(*source);
  }
}

void ConfigCustomer::MergeFrom(const ConfigCustomer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCustomer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_desc(from.desc());
    }
    if (cached_has_bits & 0x00000004u) {
      set_food_filter(from.food_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      set_food_filter2(from.food_filter2());
    }
    if (cached_has_bits & 0x00000010u) {
      set_food_filter3(from.food_filter3());
    }
    if (cached_has_bits & 0x00000020u) {
      set_quality_tip(from.quality_tip());
    }
    if (cached_has_bits & 0x00000040u) {
      set_special_cond(from.special_cond());
    }
    if (cached_has_bits & 0x00000080u) {
      set_satisfaction_cond(from.satisfaction_cond());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      occupationid_ = from.occupationid_;
    }
    if (cached_has_bits & 0x00000400u) {
      wealth_grade_ = from.wealth_grade_;
    }
    if (cached_has_bits & 0x00000800u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_unlock_ = from.is_unlock_;
    }
    if (cached_has_bits & 0x00002000u) {
      unlock_group_ = from.unlock_group_;
    }
    if (cached_has_bits & 0x00004000u) {
      service_ratio_ = from.service_ratio_;
    }
    if (cached_has_bits & 0x00008000u) {
      service_ratio2_ = from.service_ratio2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      service_ratio3_ = from.service_ratio3_;
    }
    if (cached_has_bits & 0x00020000u) {
      hungry_timeout_ = from.hungry_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCustomer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCustomer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCustomer::CopyFrom(const ConfigCustomer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCustomer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCustomer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  return true;
}

void ConfigCustomer::Swap(ConfigCustomer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCustomer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCustomer::UnsafeArenaSwap(ConfigCustomer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCustomer::InternalSwap(ConfigCustomer* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  food_filter_.Swap(&other->food_filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  food_filter2_.Swap(&other->food_filter2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  food_filter3_.Swap(&other->food_filter3_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  quality_tip_.Swap(&other->quality_tip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  special_cond_.Swap(&other->special_cond_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  satisfaction_cond_.Swap(&other->satisfaction_cond_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(occupationid_, other->occupationid_);
  swap(wealth_grade_, other->wealth_grade_);
  swap(gold_, other->gold_);
  swap(is_unlock_, other->is_unlock_);
  swap(unlock_group_, other->unlock_group_);
  swap(service_ratio_, other->service_ratio_);
  swap(service_ratio2_, other->service_ratio2_);
  swap(service_ratio3_, other->service_ratio3_);
  swap(hungry_timeout_, other->hungry_timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCustomer::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCustomerList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCustomerList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCustomerList::ConfigCustomerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCustomerList)
}
ConfigCustomerList::ConfigCustomerList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCustomerList)
}
ConfigCustomerList::ConfigCustomerList(const ConfigCustomerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigCustomerList)
}

void ConfigCustomerList::SharedCtor() {
}

ConfigCustomerList::~ConfigCustomerList() {
  // @@protoc_insertion_point(destructor:db.ConfigCustomerList)
  SharedDtor();
}

void ConfigCustomerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigCustomerList::ArenaDtor(void* object) {
  ConfigCustomerList* _this = reinterpret_cast< ConfigCustomerList* >(object);
  (void)_this;
}
void ConfigCustomerList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCustomerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCustomerList::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCustomerList& ConfigCustomerList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerList.base);
  return *internal_default_instance();
}


void ConfigCustomerList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCustomerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCustomerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCustomerList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigCustomer list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCustomerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCustomerList)
  return false;
#undef DO_
}

void ConfigCustomerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCustomerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigCustomer list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCustomerList)
}

::google::protobuf::uint8* ConfigCustomerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCustomerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigCustomer list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCustomerList)
  return target;
}

size_t ConfigCustomerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCustomerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigCustomer list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCustomerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCustomerList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCustomerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCustomerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCustomerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCustomerList)
    MergeFrom(*source);
  }
}

void ConfigCustomerList::MergeFrom(const ConfigCustomerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCustomerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigCustomerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCustomerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCustomerList::CopyFrom(const ConfigCustomerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCustomerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCustomerList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigCustomerList::Swap(ConfigCustomerList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCustomerList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCustomerList::UnsafeArenaSwap(ConfigCustomerList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCustomerList::InternalSwap(ConfigCustomerList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCustomerList::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCustomerOccupation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCustomerOccupation::kIdFieldNumber;
const int ConfigCustomerOccupation::kNameFieldNumber;
const int ConfigCustomerOccupation::kTypeFieldNumber;
const int ConfigCustomerOccupation::kFuncFieldNumber;
const int ConfigCustomerOccupation::kQuestionStatusFieldNumber;
const int ConfigCustomerOccupation::kAnswerBonusRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCustomerOccupation::ConfigCustomerOccupation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerOccupation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCustomerOccupation)
}
ConfigCustomerOccupation::ConfigCustomerOccupation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerOccupation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCustomerOccupation)
}
ConfigCustomerOccupation::ConfigCustomerOccupation(const ConfigCustomerOccupation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_func()) {
    func_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func(),
      GetArenaNoVirtual());
  }
  question_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_question_status()) {
    question_status_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_status(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&answer_bonus_ratio_) -
    reinterpret_cast<char*>(&id_)) + sizeof(answer_bonus_ratio_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCustomerOccupation)
}

void ConfigCustomerOccupation::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  question_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&answer_bonus_ratio_) -
      reinterpret_cast<char*>(&id_)) + sizeof(answer_bonus_ratio_));
}

ConfigCustomerOccupation::~ConfigCustomerOccupation() {
  // @@protoc_insertion_point(destructor:db.ConfigCustomerOccupation)
  SharedDtor();
}

void ConfigCustomerOccupation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  question_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigCustomerOccupation::ArenaDtor(void* object) {
  ConfigCustomerOccupation* _this = reinterpret_cast< ConfigCustomerOccupation* >(object);
  (void)_this;
}
void ConfigCustomerOccupation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCustomerOccupation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCustomerOccupation::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCustomerOccupation& ConfigCustomerOccupation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerOccupation.base);
  return *internal_default_instance();
}


void ConfigCustomerOccupation::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCustomerOccupation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      func_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      question_status_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&answer_bonus_ratio_) -
        reinterpret_cast<char*>(&id_)) + sizeof(answer_bonus_ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCustomerOccupation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCustomerOccupation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes func = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_func()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes question_status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_question_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float answer_bonus_ratio = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_answer_bonus_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &answer_bonus_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCustomerOccupation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCustomerOccupation)
  return false;
#undef DO_
}

void ConfigCustomerOccupation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCustomerOccupation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required bytes func = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->func(), output);
  }

  // required bytes question_status = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->question_status(), output);
  }

  // required float answer_bonus_ratio = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->answer_bonus_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCustomerOccupation)
}

::google::protobuf::uint8* ConfigCustomerOccupation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCustomerOccupation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required bytes func = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->func(), target);
  }

  // required bytes question_status = 11;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->question_status(), target);
  }

  // required float answer_bonus_ratio = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->answer_bonus_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCustomerOccupation)
  return target;
}

size_t ConfigCustomerOccupation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCustomerOccupation)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_func()) {
    // required bytes func = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->func());
  }

  if (has_question_status()) {
    // required bytes question_status = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->question_status());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_answer_bonus_ratio()) {
    // required float answer_bonus_ratio = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ConfigCustomerOccupation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCustomerOccupation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes func = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->func());

    // required bytes question_status = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->question_status());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required float answer_bonus_ratio = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCustomerOccupation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCustomerOccupation)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCustomerOccupation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCustomerOccupation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCustomerOccupation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCustomerOccupation)
    MergeFrom(*source);
  }
}

void ConfigCustomerOccupation::MergeFrom(const ConfigCustomerOccupation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCustomerOccupation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_func(from.func());
    }
    if (cached_has_bits & 0x00000004u) {
      set_question_status(from.question_status());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      answer_bonus_ratio_ = from.answer_bonus_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCustomerOccupation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCustomerOccupation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCustomerOccupation::CopyFrom(const ConfigCustomerOccupation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCustomerOccupation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCustomerOccupation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigCustomerOccupation::Swap(ConfigCustomerOccupation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCustomerOccupation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCustomerOccupation::UnsafeArenaSwap(ConfigCustomerOccupation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCustomerOccupation::InternalSwap(ConfigCustomerOccupation* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  func_.Swap(&other->func_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  question_status_.Swap(&other->question_status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(answer_bonus_ratio_, other->answer_bonus_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCustomerOccupation::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCustomerOccupationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCustomerOccupationList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCustomerOccupationList::ConfigCustomerOccupationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerOccupationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCustomerOccupationList)
}
ConfigCustomerOccupationList::ConfigCustomerOccupationList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerOccupationList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCustomerOccupationList)
}
ConfigCustomerOccupationList::ConfigCustomerOccupationList(const ConfigCustomerOccupationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigCustomerOccupationList)
}

void ConfigCustomerOccupationList::SharedCtor() {
}

ConfigCustomerOccupationList::~ConfigCustomerOccupationList() {
  // @@protoc_insertion_point(destructor:db.ConfigCustomerOccupationList)
  SharedDtor();
}

void ConfigCustomerOccupationList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigCustomerOccupationList::ArenaDtor(void* object) {
  ConfigCustomerOccupationList* _this = reinterpret_cast< ConfigCustomerOccupationList* >(object);
  (void)_this;
}
void ConfigCustomerOccupationList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCustomerOccupationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCustomerOccupationList::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCustomerOccupationList& ConfigCustomerOccupationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerOccupationList.base);
  return *internal_default_instance();
}


void ConfigCustomerOccupationList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCustomerOccupationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCustomerOccupationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCustomerOccupationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigCustomerOccupation list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCustomerOccupationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCustomerOccupationList)
  return false;
#undef DO_
}

void ConfigCustomerOccupationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCustomerOccupationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigCustomerOccupation list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCustomerOccupationList)
}

::google::protobuf::uint8* ConfigCustomerOccupationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCustomerOccupationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigCustomerOccupation list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCustomerOccupationList)
  return target;
}

size_t ConfigCustomerOccupationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCustomerOccupationList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigCustomerOccupation list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCustomerOccupationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCustomerOccupationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCustomerOccupationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCustomerOccupationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCustomerOccupationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCustomerOccupationList)
    MergeFrom(*source);
  }
}

void ConfigCustomerOccupationList::MergeFrom(const ConfigCustomerOccupationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCustomerOccupationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigCustomerOccupationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCustomerOccupationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCustomerOccupationList::CopyFrom(const ConfigCustomerOccupationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCustomerOccupationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCustomerOccupationList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigCustomerOccupationList::Swap(ConfigCustomerOccupationList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCustomerOccupationList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCustomerOccupationList::UnsafeArenaSwap(ConfigCustomerOccupationList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCustomerOccupationList::InternalSwap(ConfigCustomerOccupationList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCustomerOccupationList::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCustomerWealthGrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCustomerWealthGrade::kGradeFieldNumber;
const int ConfigCustomerWealthGrade::kGoldFieldNumber;
const int ConfigCustomerWealthGrade::kComfortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCustomerWealthGrade::ConfigCustomerWealthGrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerWealthGrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCustomerWealthGrade)
}
ConfigCustomerWealthGrade::ConfigCustomerWealthGrade(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerWealthGrade.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCustomerWealthGrade)
}
ConfigCustomerWealthGrade::ConfigCustomerWealthGrade(const ConfigCustomerWealthGrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&grade_, &from.grade_,
    static_cast<size_t>(reinterpret_cast<char*>(&comfort_) -
    reinterpret_cast<char*>(&grade_)) + sizeof(comfort_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCustomerWealthGrade)
}

void ConfigCustomerWealthGrade::SharedCtor() {
  ::memset(&grade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comfort_) -
      reinterpret_cast<char*>(&grade_)) + sizeof(comfort_));
}

ConfigCustomerWealthGrade::~ConfigCustomerWealthGrade() {
  // @@protoc_insertion_point(destructor:db.ConfigCustomerWealthGrade)
  SharedDtor();
}

void ConfigCustomerWealthGrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigCustomerWealthGrade::ArenaDtor(void* object) {
  ConfigCustomerWealthGrade* _this = reinterpret_cast< ConfigCustomerWealthGrade* >(object);
  (void)_this;
}
void ConfigCustomerWealthGrade::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCustomerWealthGrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCustomerWealthGrade::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCustomerWealthGrade& ConfigCustomerWealthGrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerWealthGrade.base);
  return *internal_default_instance();
}


void ConfigCustomerWealthGrade::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCustomerWealthGrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&grade_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&comfort_) -
        reinterpret_cast<char*>(&grade_)) + sizeof(comfort_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCustomerWealthGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCustomerWealthGrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_grade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 comfort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_comfort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comfort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCustomerWealthGrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCustomerWealthGrade)
  return false;
#undef DO_
}

void ConfigCustomerWealthGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCustomerWealthGrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 grade = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // required int32 gold = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // required int32 comfort = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comfort(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCustomerWealthGrade)
}

::google::protobuf::uint8* ConfigCustomerWealthGrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCustomerWealthGrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 grade = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // required int32 gold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // required int32 comfort = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->comfort(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCustomerWealthGrade)
  return target;
}

size_t ConfigCustomerWealthGrade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCustomerWealthGrade)
  size_t total_size = 0;

  if (has_grade()) {
    // required int32 grade = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grade());
  }

  if (has_gold()) {
    // required int32 gold = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  if (has_comfort()) {
    // required int32 comfort = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->comfort());
  }

  return total_size;
}
size_t ConfigCustomerWealthGrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCustomerWealthGrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 grade = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grade());

    // required int32 gold = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());

    // required int32 comfort = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->comfort());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCustomerWealthGrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCustomerWealthGrade)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCustomerWealthGrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCustomerWealthGrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCustomerWealthGrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCustomerWealthGrade)
    MergeFrom(*source);
  }
}

void ConfigCustomerWealthGrade::MergeFrom(const ConfigCustomerWealthGrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCustomerWealthGrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000004u) {
      comfort_ = from.comfort_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCustomerWealthGrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCustomerWealthGrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCustomerWealthGrade::CopyFrom(const ConfigCustomerWealthGrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCustomerWealthGrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCustomerWealthGrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigCustomerWealthGrade::Swap(ConfigCustomerWealthGrade* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCustomerWealthGrade* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCustomerWealthGrade::UnsafeArenaSwap(ConfigCustomerWealthGrade* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCustomerWealthGrade::InternalSwap(ConfigCustomerWealthGrade* other) {
  using std::swap;
  swap(grade_, other->grade_);
  swap(gold_, other->gold_);
  swap(comfort_, other->comfort_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCustomerWealthGrade::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCustomerWealthGradeList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCustomerWealthGradeList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCustomerWealthGradeList::ConfigCustomerWealthGradeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerWealthGradeList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCustomerWealthGradeList)
}
ConfigCustomerWealthGradeList::ConfigCustomerWealthGradeList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerWealthGradeList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCustomerWealthGradeList)
}
ConfigCustomerWealthGradeList::ConfigCustomerWealthGradeList(const ConfigCustomerWealthGradeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigCustomerWealthGradeList)
}

void ConfigCustomerWealthGradeList::SharedCtor() {
}

ConfigCustomerWealthGradeList::~ConfigCustomerWealthGradeList() {
  // @@protoc_insertion_point(destructor:db.ConfigCustomerWealthGradeList)
  SharedDtor();
}

void ConfigCustomerWealthGradeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigCustomerWealthGradeList::ArenaDtor(void* object) {
  ConfigCustomerWealthGradeList* _this = reinterpret_cast< ConfigCustomerWealthGradeList* >(object);
  (void)_this;
}
void ConfigCustomerWealthGradeList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCustomerWealthGradeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCustomerWealthGradeList::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCustomerWealthGradeList& ConfigCustomerWealthGradeList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigCustomerWealthGradeList.base);
  return *internal_default_instance();
}


void ConfigCustomerWealthGradeList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCustomerWealthGradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCustomerWealthGradeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCustomerWealthGradeList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigCustomerWealthGrade list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCustomerWealthGradeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCustomerWealthGradeList)
  return false;
#undef DO_
}

void ConfigCustomerWealthGradeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCustomerWealthGradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigCustomerWealthGrade list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCustomerWealthGradeList)
}

::google::protobuf::uint8* ConfigCustomerWealthGradeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCustomerWealthGradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigCustomerWealthGrade list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCustomerWealthGradeList)
  return target;
}

size_t ConfigCustomerWealthGradeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCustomerWealthGradeList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigCustomerWealthGrade list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCustomerWealthGradeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCustomerWealthGradeList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCustomerWealthGradeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCustomerWealthGradeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCustomerWealthGradeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCustomerWealthGradeList)
    MergeFrom(*source);
  }
}

void ConfigCustomerWealthGradeList::MergeFrom(const ConfigCustomerWealthGradeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCustomerWealthGradeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigCustomerWealthGradeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCustomerWealthGradeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCustomerWealthGradeList::CopyFrom(const ConfigCustomerWealthGradeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCustomerWealthGradeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCustomerWealthGradeList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigCustomerWealthGradeList::Swap(ConfigCustomerWealthGradeList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCustomerWealthGradeList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCustomerWealthGradeList::UnsafeArenaSwap(ConfigCustomerWealthGradeList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCustomerWealthGradeList::InternalSwap(ConfigCustomerWealthGradeList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCustomerWealthGradeList::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigPlaceGrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPlaceGrade::kIdFieldNumber;
const int ConfigPlaceGrade::kPlaceIdFieldNumber;
const int ConfigPlaceGrade::kNameFieldNumber;
const int ConfigPlaceGrade::kLevelFieldNumber;
const int ConfigPlaceGrade::kLevelupUnlockFieldNumber;
const int ConfigPlaceGrade::kLeveldownUnlockFieldNumber;
const int ConfigPlaceGrade::kBoomFieldNumber;
const int ConfigPlaceGrade::kCustomerGroupFieldNumber;
const int ConfigPlaceGrade::kCustomerMaxFieldNumber;
const int ConfigPlaceGrade::kCustomerAddNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPlaceGrade::ConfigPlaceGrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigPlaceGrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigPlaceGrade)
}
ConfigPlaceGrade::ConfigPlaceGrade(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigPlaceGrade.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigPlaceGrade)
}
ConfigPlaceGrade::ConfigPlaceGrade(const ConfigPlaceGrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  customer_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_customer_group()) {
    customer_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_group(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&customer_add_number_) -
    reinterpret_cast<char*>(&id_)) + sizeof(customer_add_number_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigPlaceGrade)
}

void ConfigPlaceGrade::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&customer_add_number_) -
      reinterpret_cast<char*>(&id_)) + sizeof(customer_add_number_));
}

ConfigPlaceGrade::~ConfigPlaceGrade() {
  // @@protoc_insertion_point(destructor:db.ConfigPlaceGrade)
  SharedDtor();
}

void ConfigPlaceGrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigPlaceGrade::ArenaDtor(void* object) {
  ConfigPlaceGrade* _this = reinterpret_cast< ConfigPlaceGrade* >(object);
  (void)_this;
}
void ConfigPlaceGrade::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigPlaceGrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigPlaceGrade::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigPlaceGrade& ConfigPlaceGrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigPlaceGrade.base);
  return *internal_default_instance();
}


void ConfigPlaceGrade::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigPlaceGrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      customer_group_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boom_) -
        reinterpret_cast<char*>(&id_)) + sizeof(boom_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&customer_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&customer_add_number_) -
        reinterpret_cast<char*>(&customer_max_)) + sizeof(customer_add_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigPlaceGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigPlaceGrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 place_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_place_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 levelup_unlock = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_levelup_unlock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelup_unlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 leveldown_unlock = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_leveldown_unlock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leveldown_unlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 boom = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_boom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes customer_group = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_customer_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 customer_max = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_customer_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float customer_add_number = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_customer_add_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &customer_add_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigPlaceGrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigPlaceGrade)
  return false;
#undef DO_
}

void ConfigPlaceGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigPlaceGrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 place_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->place_id(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 levelup_unlock = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->levelup_unlock(), output);
  }

  // required int32 leveldown_unlock = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leveldown_unlock(), output);
  }

  // required int32 boom = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->boom(), output);
  }

  // required bytes customer_group = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->customer_group(), output);
  }

  // required int32 customer_max = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->customer_max(), output);
  }

  // required float customer_add_number = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->customer_add_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigPlaceGrade)
}

::google::protobuf::uint8* ConfigPlaceGrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigPlaceGrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 place_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->place_id(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 levelup_unlock = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->levelup_unlock(), target);
  }

  // required int32 leveldown_unlock = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leveldown_unlock(), target);
  }

  // required int32 boom = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->boom(), target);
  }

  // required bytes customer_group = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->customer_group(), target);
  }

  // required int32 customer_max = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->customer_max(), target);
  }

  // required float customer_add_number = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->customer_add_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigPlaceGrade)
  return target;
}

size_t ConfigPlaceGrade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigPlaceGrade)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_customer_group()) {
    // required bytes customer_group = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->customer_group());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_place_id()) {
    // required int32 place_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->place_id());
  }

  if (has_level()) {
    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_levelup_unlock()) {
    // required int32 levelup_unlock = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->levelup_unlock());
  }

  if (has_leveldown_unlock()) {
    // required int32 leveldown_unlock = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leveldown_unlock());
  }

  if (has_boom()) {
    // required int32 boom = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boom());
  }

  if (has_customer_max()) {
    // required int32 customer_max = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->customer_max());
  }

  if (has_customer_add_number()) {
    // required float customer_add_number = 13;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ConfigPlaceGrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigPlaceGrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes customer_group = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->customer_group());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 place_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->place_id());

    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 levelup_unlock = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->levelup_unlock());

    // required int32 leveldown_unlock = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leveldown_unlock());

    // required int32 boom = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boom());

    // required int32 customer_max = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->customer_max());

    // required float customer_add_number = 13;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPlaceGrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigPlaceGrade)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPlaceGrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPlaceGrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigPlaceGrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigPlaceGrade)
    MergeFrom(*source);
  }
}

void ConfigPlaceGrade::MergeFrom(const ConfigPlaceGrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigPlaceGrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_customer_group(from.customer_group());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      place_id_ = from.place_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      levelup_unlock_ = from.levelup_unlock_;
    }
    if (cached_has_bits & 0x00000040u) {
      leveldown_unlock_ = from.leveldown_unlock_;
    }
    if (cached_has_bits & 0x00000080u) {
      boom_ = from.boom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      customer_max_ = from.customer_max_;
    }
    if (cached_has_bits & 0x00000200u) {
      customer_add_number_ = from.customer_add_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigPlaceGrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigPlaceGrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPlaceGrade::CopyFrom(const ConfigPlaceGrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigPlaceGrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPlaceGrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void ConfigPlaceGrade::Swap(ConfigPlaceGrade* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigPlaceGrade* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigPlaceGrade::UnsafeArenaSwap(ConfigPlaceGrade* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigPlaceGrade::InternalSwap(ConfigPlaceGrade* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_group_.Swap(&other->customer_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(place_id_, other->place_id_);
  swap(level_, other->level_);
  swap(levelup_unlock_, other->levelup_unlock_);
  swap(leveldown_unlock_, other->leveldown_unlock_);
  swap(boom_, other->boom_);
  swap(customer_max_, other->customer_max_);
  swap(customer_add_number_, other->customer_add_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigPlaceGrade::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigPlaceGradeList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPlaceGradeList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPlaceGradeList::ConfigPlaceGradeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigPlaceGradeList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigPlaceGradeList)
}
ConfigPlaceGradeList::ConfigPlaceGradeList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigPlaceGradeList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigPlaceGradeList)
}
ConfigPlaceGradeList::ConfigPlaceGradeList(const ConfigPlaceGradeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigPlaceGradeList)
}

void ConfigPlaceGradeList::SharedCtor() {
}

ConfigPlaceGradeList::~ConfigPlaceGradeList() {
  // @@protoc_insertion_point(destructor:db.ConfigPlaceGradeList)
  SharedDtor();
}

void ConfigPlaceGradeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigPlaceGradeList::ArenaDtor(void* object) {
  ConfigPlaceGradeList* _this = reinterpret_cast< ConfigPlaceGradeList* >(object);
  (void)_this;
}
void ConfigPlaceGradeList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigPlaceGradeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigPlaceGradeList::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigPlaceGradeList& ConfigPlaceGradeList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigPlaceGradeList.base);
  return *internal_default_instance();
}


void ConfigPlaceGradeList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigPlaceGradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigPlaceGradeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigPlaceGradeList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigPlaceGrade list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigPlaceGradeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigPlaceGradeList)
  return false;
#undef DO_
}

void ConfigPlaceGradeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigPlaceGradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigPlaceGrade list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigPlaceGradeList)
}

::google::protobuf::uint8* ConfigPlaceGradeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigPlaceGradeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigPlaceGrade list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigPlaceGradeList)
  return target;
}

size_t ConfigPlaceGradeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigPlaceGradeList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigPlaceGrade list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPlaceGradeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigPlaceGradeList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPlaceGradeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPlaceGradeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigPlaceGradeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigPlaceGradeList)
    MergeFrom(*source);
  }
}

void ConfigPlaceGradeList::MergeFrom(const ConfigPlaceGradeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigPlaceGradeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigPlaceGradeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigPlaceGradeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPlaceGradeList::CopyFrom(const ConfigPlaceGradeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigPlaceGradeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPlaceGradeList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigPlaceGradeList::Swap(ConfigPlaceGradeList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigPlaceGradeList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigPlaceGradeList::UnsafeArenaSwap(ConfigPlaceGradeList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigPlaceGradeList::InternalSwap(ConfigPlaceGradeList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigPlaceGradeList::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigHarborFoodOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHarborFoodOrder::kLevelFieldNumber;
const int ConfigHarborFoodOrder::kHungryTimeoutFieldNumber;
const int ConfigHarborFoodOrder::kGoaboardIntervalFieldNumber;
const int ConfigHarborFoodOrder::kGoaboardFlucuationFieldNumber;
const int ConfigHarborFoodOrder::kQueueingNumMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHarborFoodOrder::ConfigHarborFoodOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigHarborFoodOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHarborFoodOrder)
}
ConfigHarborFoodOrder::ConfigHarborFoodOrder(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigHarborFoodOrder.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHarborFoodOrder)
}
ConfigHarborFoodOrder::ConfigHarborFoodOrder(const ConfigHarborFoodOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&queueing_num_max_) -
    reinterpret_cast<char*>(&level_)) + sizeof(queueing_num_max_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigHarborFoodOrder)
}

void ConfigHarborFoodOrder::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queueing_num_max_) -
      reinterpret_cast<char*>(&level_)) + sizeof(queueing_num_max_));
}

ConfigHarborFoodOrder::~ConfigHarborFoodOrder() {
  // @@protoc_insertion_point(destructor:db.ConfigHarborFoodOrder)
  SharedDtor();
}

void ConfigHarborFoodOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigHarborFoodOrder::ArenaDtor(void* object) {
  ConfigHarborFoodOrder* _this = reinterpret_cast< ConfigHarborFoodOrder* >(object);
  (void)_this;
}
void ConfigHarborFoodOrder::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHarborFoodOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHarborFoodOrder::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHarborFoodOrder& ConfigHarborFoodOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigHarborFoodOrder.base);
  return *internal_default_instance();
}


void ConfigHarborFoodOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHarborFoodOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&queueing_num_max_) -
        reinterpret_cast<char*>(&level_)) + sizeof(queueing_num_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHarborFoodOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHarborFoodOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hungry_timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hungry_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hungry_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goaboard_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_goaboard_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goaboard_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goaboard_flucuation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_goaboard_flucuation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goaboard_flucuation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 queueing_num_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_queueing_num_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queueing_num_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHarborFoodOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHarborFoodOrder)
  return false;
#undef DO_
}

void ConfigHarborFoodOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHarborFoodOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 hungry_timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hungry_timeout(), output);
  }

  // required int32 goaboard_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goaboard_interval(), output);
  }

  // required int32 goaboard_flucuation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goaboard_flucuation(), output);
  }

  // required int32 queueing_num_max = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->queueing_num_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHarborFoodOrder)
}

::google::protobuf::uint8* ConfigHarborFoodOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHarborFoodOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 hungry_timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hungry_timeout(), target);
  }

  // required int32 goaboard_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goaboard_interval(), target);
  }

  // required int32 goaboard_flucuation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goaboard_flucuation(), target);
  }

  // required int32 queueing_num_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->queueing_num_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHarborFoodOrder)
  return target;
}

size_t ConfigHarborFoodOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigHarborFoodOrder)
  size_t total_size = 0;

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_hungry_timeout()) {
    // required int32 hungry_timeout = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hungry_timeout());
  }

  if (has_goaboard_interval()) {
    // required int32 goaboard_interval = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goaboard_interval());
  }

  if (has_goaboard_flucuation()) {
    // required int32 goaboard_flucuation = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goaboard_flucuation());
  }

  if (has_queueing_num_max()) {
    // required int32 queueing_num_max = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queueing_num_max());
  }

  return total_size;
}
size_t ConfigHarborFoodOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHarborFoodOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 hungry_timeout = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hungry_timeout());

    // required int32 goaboard_interval = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goaboard_interval());

    // required int32 goaboard_flucuation = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goaboard_flucuation());

    // required int32 queueing_num_max = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queueing_num_max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHarborFoodOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHarborFoodOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHarborFoodOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHarborFoodOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHarborFoodOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHarborFoodOrder)
    MergeFrom(*source);
  }
}

void ConfigHarborFoodOrder::MergeFrom(const ConfigHarborFoodOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHarborFoodOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      hungry_timeout_ = from.hungry_timeout_;
    }
    if (cached_has_bits & 0x00000004u) {
      goaboard_interval_ = from.goaboard_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      goaboard_flucuation_ = from.goaboard_flucuation_;
    }
    if (cached_has_bits & 0x00000010u) {
      queueing_num_max_ = from.queueing_num_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigHarborFoodOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHarborFoodOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHarborFoodOrder::CopyFrom(const ConfigHarborFoodOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHarborFoodOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHarborFoodOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ConfigHarborFoodOrder::Swap(ConfigHarborFoodOrder* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHarborFoodOrder* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHarborFoodOrder::UnsafeArenaSwap(ConfigHarborFoodOrder* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHarborFoodOrder::InternalSwap(ConfigHarborFoodOrder* other) {
  using std::swap;
  swap(level_, other->level_);
  swap(hungry_timeout_, other->hungry_timeout_);
  swap(goaboard_interval_, other->goaboard_interval_);
  swap(goaboard_flucuation_, other->goaboard_flucuation_);
  swap(queueing_num_max_, other->queueing_num_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHarborFoodOrder::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigHarborFoodOrderList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHarborFoodOrderList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHarborFoodOrderList::ConfigHarborFoodOrderList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_ConfigHarborFoodOrderList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHarborFoodOrderList)
}
ConfigHarborFoodOrderList::ConfigHarborFoodOrderList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigHarborFoodOrderList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHarborFoodOrderList)
}
ConfigHarborFoodOrderList::ConfigHarborFoodOrderList(const ConfigHarborFoodOrderList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigHarborFoodOrderList)
}

void ConfigHarborFoodOrderList::SharedCtor() {
}

ConfigHarborFoodOrderList::~ConfigHarborFoodOrderList() {
  // @@protoc_insertion_point(destructor:db.ConfigHarborFoodOrderList)
  SharedDtor();
}

void ConfigHarborFoodOrderList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigHarborFoodOrderList::ArenaDtor(void* object) {
  ConfigHarborFoodOrderList* _this = reinterpret_cast< ConfigHarborFoodOrderList* >(object);
  (void)_this;
}
void ConfigHarborFoodOrderList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHarborFoodOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHarborFoodOrderList::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHarborFoodOrderList& ConfigHarborFoodOrderList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_ConfigHarborFoodOrderList.base);
  return *internal_default_instance();
}


void ConfigHarborFoodOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHarborFoodOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHarborFoodOrderList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHarborFoodOrderList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigHarborFoodOrder list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHarborFoodOrderList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHarborFoodOrderList)
  return false;
#undef DO_
}

void ConfigHarborFoodOrderList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHarborFoodOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHarborFoodOrder list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHarborFoodOrderList)
}

::google::protobuf::uint8* ConfigHarborFoodOrderList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHarborFoodOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHarborFoodOrder list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHarborFoodOrderList)
  return target;
}

size_t ConfigHarborFoodOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHarborFoodOrderList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigHarborFoodOrder list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHarborFoodOrderList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHarborFoodOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHarborFoodOrderList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHarborFoodOrderList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHarborFoodOrderList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHarborFoodOrderList)
    MergeFrom(*source);
  }
}

void ConfigHarborFoodOrderList::MergeFrom(const ConfigHarborFoodOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHarborFoodOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigHarborFoodOrderList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHarborFoodOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHarborFoodOrderList::CopyFrom(const ConfigHarborFoodOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHarborFoodOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHarborFoodOrderList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigHarborFoodOrderList::Swap(ConfigHarborFoodOrderList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHarborFoodOrderList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHarborFoodOrderList::UnsafeArenaSwap(ConfigHarborFoodOrderList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHarborFoodOrderList::InternalSwap(ConfigHarborFoodOrderList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHarborFoodOrderList::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHarbor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHarbor::kUseridFieldNumber;
const int UserHarbor::kHarboridFieldNumber;
const int UserHarbor::kStateFieldNumber;
const int UserHarbor::kGradeFieldNumber;
const int UserHarbor::kBoomFieldNumber;
const int UserHarbor::kGrowtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHarbor::UserHarbor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_UserHarbor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserHarbor)
}
UserHarbor::UserHarbor(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_UserHarbor.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserHarbor)
}
UserHarbor::UserHarbor(const UserHarbor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&harborid_, &from.harborid_,
    static_cast<size_t>(reinterpret_cast<char*>(&growtime_) -
    reinterpret_cast<char*>(&harborid_)) + sizeof(growtime_));
  // @@protoc_insertion_point(copy_constructor:db.UserHarbor)
}

void UserHarbor::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&harborid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&growtime_) -
      reinterpret_cast<char*>(&harborid_)) + sizeof(growtime_));
}

UserHarbor::~UserHarbor() {
  // @@protoc_insertion_point(destructor:db.UserHarbor)
  SharedDtor();
}

void UserHarbor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserHarbor::ArenaDtor(void* object) {
  UserHarbor* _this = reinterpret_cast< UserHarbor* >(object);
  (void)_this;
}
void UserHarbor::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHarbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHarbor::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHarbor& UserHarbor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_UserHarbor.base);
  return *internal_default_instance();
}


void UserHarbor::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserHarbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 62u) {
    ::memset(&harborid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&growtime_) -
        reinterpret_cast<char*>(&harborid_)) + sizeof(growtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHarbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserHarbor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 harborid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_harborid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harborid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 grade = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_grade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 boom = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_boom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 growtime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_growtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &growtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserHarbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserHarbor)
  return false;
#undef DO_
}

void UserHarbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserHarbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 harborid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->harborid(), output);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // required int32 grade = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grade(), output);
  }

  // required int32 boom = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->boom(), output);
  }

  // required sfixed64 growtime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->growtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserHarbor)
}

::google::protobuf::uint8* UserHarbor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserHarbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 harborid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->harborid(), target);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // required int32 grade = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grade(), target);
  }

  // required int32 boom = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->boom(), target);
  }

  // required sfixed64 growtime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->growtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserHarbor)
  return target;
}

size_t UserHarbor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserHarbor)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_harborid()) {
    // required int32 harborid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harborid());
  }

  if (has_state()) {
    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_grade()) {
    // required int32 grade = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grade());
  }

  if (has_boom()) {
    // required int32 boom = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boom());
  }

  if (has_growtime()) {
    // required sfixed64 growtime = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t UserHarbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserHarbor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required int32 harborid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harborid());

    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 grade = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grade());

    // required int32 boom = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boom());

    // required sfixed64 growtime = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHarbor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserHarbor)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHarbor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHarbor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserHarbor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserHarbor)
    MergeFrom(*source);
  }
}

void UserHarbor::MergeFrom(const UserHarbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserHarbor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      harborid_ = from.harborid_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000010u) {
      boom_ = from.boom_;
    }
    if (cached_has_bits & 0x00000020u) {
      growtime_ = from.growtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHarbor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserHarbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHarbor::CopyFrom(const UserHarbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserHarbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHarbor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void UserHarbor::Swap(UserHarbor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHarbor* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHarbor::UnsafeArenaSwap(UserHarbor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHarbor::InternalSwap(UserHarbor* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(harborid_, other->harborid_);
  swap(state_, other->state_);
  swap(grade_, other->grade_);
  swap(boom_, other->boom_);
  swap(growtime_, other->growtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHarbor::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHarborNpc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHarborNpc::kUseridFieldNumber;
const int UserHarborNpc::kHarboridFieldNumber;
const int UserHarborNpc::kSnFieldNumber;
const int UserHarborNpc::kNpcTypeFieldNumber;
const int UserHarborNpc::kCfgidFieldNumber;
const int UserHarborNpc::kStateFieldNumber;
const int UserHarborNpc::kSecondsFieldNumber;
const int UserHarborNpc::kSeqnoFieldNumber;
const int UserHarborNpc::kWealthGradeFieldNumber;
const int UserHarborNpc::kGoldFieldNumber;
const int UserHarborNpc::kSatisfactionFieldNumber;
const int UserHarborNpc::kSeatidFieldNumber;
const int UserHarborNpc::kOccupationValFieldNumber;
const int UserHarborNpc::kOccupationEventStarttimeFieldNumber;
const int UserHarborNpc::kQuestionStatusFieldNumber;
const int UserHarborNpc::kSpecialCondBonusFieldNumber;
const int UserHarborNpc::kSatisfactionAcceptedFieldNumber;
const int UserHarborNpc::kTaskNeedIdx1FieldNumber;
const int UserHarborNpc::kTaskRewardIdx1FieldNumber;
const int UserHarborNpc::kTaskRewardAccept1FieldNumber;
const int UserHarborNpc::kTaskNeedIdx2FieldNumber;
const int UserHarborNpc::kTaskRewardIdx2FieldNumber;
const int UserHarborNpc::kTaskRewardAccept2FieldNumber;
const int UserHarborNpc::kTaskNeedIdx3FieldNumber;
const int UserHarborNpc::kTaskRewardIdx3FieldNumber;
const int UserHarborNpc::kTaskRewardAccept3FieldNumber;
const int UserHarborNpc::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHarborNpc::UserHarborNpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_UserHarborNpc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserHarborNpc)
}
UserHarborNpc::UserHarborNpc(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_UserHarborNpc.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserHarborNpc)
}
UserHarborNpc::UserHarborNpc(const UserHarborNpc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&harborid_, &from.harborid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&harborid_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.UserHarborNpc)
}

void UserHarborNpc::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&harborid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&harborid_)) + sizeof(optime_));
}

UserHarborNpc::~UserHarborNpc() {
  // @@protoc_insertion_point(destructor:db.UserHarborNpc)
  SharedDtor();
}

void UserHarborNpc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserHarborNpc::ArenaDtor(void* object) {
  UserHarborNpc* _this = reinterpret_cast< UserHarborNpc* >(object);
  (void)_this;
}
void UserHarborNpc::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHarborNpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHarborNpc::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHarborNpc& UserHarborNpc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_UserHarborNpc.base);
  return *internal_default_instance();
}


void UserHarborNpc::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserHarborNpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&harborid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqno_) -
        reinterpret_cast<char*>(&harborid_)) + sizeof(seqno_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&wealth_grade_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&special_cond_bonus_) -
        reinterpret_cast<char*>(&wealth_grade_)) + sizeof(special_cond_bonus_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&satisfaction_accepted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&task_reward_accept2_) -
        reinterpret_cast<char*>(&satisfaction_accepted_)) + sizeof(task_reward_accept2_));
  }
  if (cached_has_bits & 117440512u) {
    ::memset(&task_need_idx3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&task_need_idx3_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHarborNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserHarborNpc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 harborid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_harborid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harborid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 npc_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_npc_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 cfgid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cfgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seconds = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seqno = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_seqno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 wealth_grade = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_wealth_grade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wealth_grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 satisfaction = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_satisfaction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satisfaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seatid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_seatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 occupation_val = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_occupation_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 occupation_event_starttime = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_occupation_event_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &occupation_event_starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 question_status = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_question_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &question_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 special_cond_bonus = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_special_cond_bonus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &special_cond_bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 satisfaction_accepted = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_satisfaction_accepted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satisfaction_accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_need_idx1 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_task_need_idx1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_need_idx1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_reward_idx1 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_task_reward_idx1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_reward_idx1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_reward_accept1 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_task_reward_accept1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_reward_accept1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_need_idx2 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_task_need_idx2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_need_idx2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_reward_idx2 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_task_reward_idx2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_reward_idx2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_reward_accept2 = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_task_reward_accept2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_reward_accept2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_need_idx3 = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_task_need_idx3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_need_idx3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_reward_idx3 = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_task_reward_idx3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_reward_idx3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_reward_accept3 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_task_reward_accept3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_reward_accept3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserHarborNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserHarborNpc)
  return false;
#undef DO_
}

void UserHarborNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserHarborNpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 harborid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->harborid(), output);
  }

  // required int32 sn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sn(), output);
  }

  // required int32 npc_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npc_type(), output);
  }

  // required uint64 cfgid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cfgid(), output);
  }

  // required int32 state = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  // required int32 seconds = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seconds(), output);
  }

  // required int32 seqno = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->seqno(), output);
  }

  // required int32 wealth_grade = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->wealth_grade(), output);
  }

  // required int32 gold = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gold(), output);
  }

  // required int32 satisfaction = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->satisfaction(), output);
  }

  // required int32 seatid = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->seatid(), output);
  }

  // required int32 occupation_val = 21;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->occupation_val(), output);
  }

  // required sfixed64 occupation_event_starttime = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(22, this->occupation_event_starttime(), output);
  }

  // required int32 question_status = 23;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->question_status(), output);
  }

  // required int32 special_cond_bonus = 24;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->special_cond_bonus(), output);
  }

  // required int32 satisfaction_accepted = 25;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->satisfaction_accepted(), output);
  }

  // required int32 task_need_idx1 = 31;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->task_need_idx1(), output);
  }

  // required int32 task_reward_idx1 = 32;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->task_reward_idx1(), output);
  }

  // required int32 task_reward_accept1 = 33;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->task_reward_accept1(), output);
  }

  // required int32 task_need_idx2 = 34;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->task_need_idx2(), output);
  }

  // required int32 task_reward_idx2 = 35;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->task_reward_idx2(), output);
  }

  // required int32 task_reward_accept2 = 36;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->task_reward_accept2(), output);
  }

  // required int32 task_need_idx3 = 37;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->task_need_idx3(), output);
  }

  // required int32 task_reward_idx3 = 38;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->task_reward_idx3(), output);
  }

  // required int32 task_reward_accept3 = 39;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->task_reward_accept3(), output);
  }

  // required sfixed64 optime = 41;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(41, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserHarborNpc)
}

::google::protobuf::uint8* UserHarborNpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserHarborNpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 harborid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->harborid(), target);
  }

  // required int32 sn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sn(), target);
  }

  // required int32 npc_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npc_type(), target);
  }

  // required uint64 cfgid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cfgid(), target);
  }

  // required int32 state = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  // required int32 seconds = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seconds(), target);
  }

  // required int32 seqno = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->seqno(), target);
  }

  // required int32 wealth_grade = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->wealth_grade(), target);
  }

  // required int32 gold = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gold(), target);
  }

  // required int32 satisfaction = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->satisfaction(), target);
  }

  // required int32 seatid = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->seatid(), target);
  }

  // required int32 occupation_val = 21;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->occupation_val(), target);
  }

  // required sfixed64 occupation_event_starttime = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(22, this->occupation_event_starttime(), target);
  }

  // required int32 question_status = 23;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->question_status(), target);
  }

  // required int32 special_cond_bonus = 24;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->special_cond_bonus(), target);
  }

  // required int32 satisfaction_accepted = 25;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->satisfaction_accepted(), target);
  }

  // required int32 task_need_idx1 = 31;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->task_need_idx1(), target);
  }

  // required int32 task_reward_idx1 = 32;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->task_reward_idx1(), target);
  }

  // required int32 task_reward_accept1 = 33;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->task_reward_accept1(), target);
  }

  // required int32 task_need_idx2 = 34;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->task_need_idx2(), target);
  }

  // required int32 task_reward_idx2 = 35;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->task_reward_idx2(), target);
  }

  // required int32 task_reward_accept2 = 36;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->task_reward_accept2(), target);
  }

  // required int32 task_need_idx3 = 37;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->task_need_idx3(), target);
  }

  // required int32 task_reward_idx3 = 38;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->task_reward_idx3(), target);
  }

  // required int32 task_reward_accept3 = 39;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->task_reward_accept3(), target);
  }

  // required sfixed64 optime = 41;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(41, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserHarborNpc)
  return target;
}

size_t UserHarborNpc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserHarborNpc)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_harborid()) {
    // required int32 harborid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harborid());
  }

  if (has_sn()) {
    // required int32 sn = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());
  }

  if (has_cfgid()) {
    // required uint64 cfgid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cfgid());
  }

  if (has_npc_type()) {
    // required int32 npc_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npc_type());
  }

  if (has_state()) {
    // required int32 state = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_seconds()) {
    // required int32 seconds = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  if (has_seqno()) {
    // required int32 seqno = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seqno());
  }

  if (has_wealth_grade()) {
    // required int32 wealth_grade = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wealth_grade());
  }

  if (has_gold()) {
    // required int32 gold = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  if (has_satisfaction()) {
    // required int32 satisfaction = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->satisfaction());
  }

  if (has_seatid()) {
    // required int32 seatid = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  if (has_occupation_event_starttime()) {
    // required sfixed64 occupation_event_starttime = 22;
    total_size += 2 + 8;
  }

  if (has_occupation_val()) {
    // required int32 occupation_val = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupation_val());
  }

  if (has_question_status()) {
    // required int32 question_status = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->question_status());
  }

  if (has_special_cond_bonus()) {
    // required int32 special_cond_bonus = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->special_cond_bonus());
  }

  if (has_satisfaction_accepted()) {
    // required int32 satisfaction_accepted = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->satisfaction_accepted());
  }

  if (has_task_reward_accept3()) {
    // required int32 task_reward_accept3 = 39;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_accept3());
  }

  if (has_task_need_idx1()) {
    // required int32 task_need_idx1 = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_need_idx1());
  }

  if (has_task_reward_idx1()) {
    // required int32 task_reward_idx1 = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_idx1());
  }

  if (has_task_reward_accept1()) {
    // required int32 task_reward_accept1 = 33;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_accept1());
  }

  if (has_task_need_idx2()) {
    // required int32 task_need_idx2 = 34;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_need_idx2());
  }

  if (has_task_reward_idx2()) {
    // required int32 task_reward_idx2 = 35;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_idx2());
  }

  if (has_task_reward_accept2()) {
    // required int32 task_reward_accept2 = 36;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_accept2());
  }

  if (has_task_need_idx3()) {
    // required int32 task_need_idx3 = 37;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_need_idx3());
  }

  if (has_task_reward_idx3()) {
    // required int32 task_reward_idx3 = 38;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_idx3());
  }

  if (has_optime()) {
    // required sfixed64 optime = 41;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t UserHarborNpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserHarborNpc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x07ffffff) ^ 0x07ffffff) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required int32 harborid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harborid());

    // required int32 sn = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());

    // required uint64 cfgid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cfgid());

    // required int32 npc_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npc_type());

    // required int32 state = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 seconds = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());

    // required int32 seqno = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seqno());

    // required int32 wealth_grade = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wealth_grade());

    // required int32 gold = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());

    // required int32 satisfaction = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->satisfaction());

    // required int32 seatid = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());

    // required sfixed64 occupation_event_starttime = 22;
    total_size += 2 + 8;

    // required int32 occupation_val = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupation_val());

    // required int32 question_status = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->question_status());

    // required int32 special_cond_bonus = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->special_cond_bonus());

    // required int32 satisfaction_accepted = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->satisfaction_accepted());

    // required int32 task_reward_accept3 = 39;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_accept3());

    // required int32 task_need_idx1 = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_need_idx1());

    // required int32 task_reward_idx1 = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_idx1());

    // required int32 task_reward_accept1 = 33;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_accept1());

    // required int32 task_need_idx2 = 34;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_need_idx2());

    // required int32 task_reward_idx2 = 35;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_idx2());

    // required int32 task_reward_accept2 = 36;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_accept2());

    // required int32 task_need_idx3 = 37;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_need_idx3());

    // required int32 task_reward_idx3 = 38;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_reward_idx3());

    // required sfixed64 optime = 41;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHarborNpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserHarborNpc)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHarborNpc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHarborNpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserHarborNpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserHarborNpc)
    MergeFrom(*source);
  }
}

void UserHarborNpc::MergeFrom(const UserHarborNpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserHarborNpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      harborid_ = from.harborid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sn_ = from.sn_;
    }
    if (cached_has_bits & 0x00000008u) {
      cfgid_ = from.cfgid_;
    }
    if (cached_has_bits & 0x00000010u) {
      npc_type_ = from.npc_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000080u) {
      seqno_ = from.seqno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      wealth_grade_ = from.wealth_grade_;
    }
    if (cached_has_bits & 0x00000200u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000400u) {
      satisfaction_ = from.satisfaction_;
    }
    if (cached_has_bits & 0x00000800u) {
      seatid_ = from.seatid_;
    }
    if (cached_has_bits & 0x00001000u) {
      occupation_event_starttime_ = from.occupation_event_starttime_;
    }
    if (cached_has_bits & 0x00002000u) {
      occupation_val_ = from.occupation_val_;
    }
    if (cached_has_bits & 0x00004000u) {
      question_status_ = from.question_status_;
    }
    if (cached_has_bits & 0x00008000u) {
      special_cond_bonus_ = from.special_cond_bonus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      satisfaction_accepted_ = from.satisfaction_accepted_;
    }
    if (cached_has_bits & 0x00020000u) {
      task_reward_accept3_ = from.task_reward_accept3_;
    }
    if (cached_has_bits & 0x00040000u) {
      task_need_idx1_ = from.task_need_idx1_;
    }
    if (cached_has_bits & 0x00080000u) {
      task_reward_idx1_ = from.task_reward_idx1_;
    }
    if (cached_has_bits & 0x00100000u) {
      task_reward_accept1_ = from.task_reward_accept1_;
    }
    if (cached_has_bits & 0x00200000u) {
      task_need_idx2_ = from.task_need_idx2_;
    }
    if (cached_has_bits & 0x00400000u) {
      task_reward_idx2_ = from.task_reward_idx2_;
    }
    if (cached_has_bits & 0x00800000u) {
      task_reward_accept2_ = from.task_reward_accept2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      task_need_idx3_ = from.task_need_idx3_;
    }
    if (cached_has_bits & 0x02000000u) {
      task_reward_idx3_ = from.task_reward_idx3_;
    }
    if (cached_has_bits & 0x04000000u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHarborNpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserHarborNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHarborNpc::CopyFrom(const UserHarborNpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserHarborNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHarborNpc::IsInitialized() const {
  if ((_has_bits_[0] & 0x07ffffff) != 0x07ffffff) return false;
  return true;
}

void UserHarborNpc::Swap(UserHarborNpc* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHarborNpc* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHarborNpc::UnsafeArenaSwap(UserHarborNpc* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHarborNpc::InternalSwap(UserHarborNpc* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(harborid_, other->harborid_);
  swap(sn_, other->sn_);
  swap(cfgid_, other->cfgid_);
  swap(npc_type_, other->npc_type_);
  swap(state_, other->state_);
  swap(seconds_, other->seconds_);
  swap(seqno_, other->seqno_);
  swap(wealth_grade_, other->wealth_grade_);
  swap(gold_, other->gold_);
  swap(satisfaction_, other->satisfaction_);
  swap(seatid_, other->seatid_);
  swap(occupation_event_starttime_, other->occupation_event_starttime_);
  swap(occupation_val_, other->occupation_val_);
  swap(question_status_, other->question_status_);
  swap(special_cond_bonus_, other->special_cond_bonus_);
  swap(satisfaction_accepted_, other->satisfaction_accepted_);
  swap(task_reward_accept3_, other->task_reward_accept3_);
  swap(task_need_idx1_, other->task_need_idx1_);
  swap(task_reward_idx1_, other->task_reward_idx1_);
  swap(task_reward_accept1_, other->task_reward_accept1_);
  swap(task_need_idx2_, other->task_need_idx2_);
  swap(task_reward_idx2_, other->task_reward_idx2_);
  swap(task_reward_accept2_, other->task_reward_accept2_);
  swap(task_need_idx3_, other->task_need_idx3_);
  swap(task_reward_idx3_, other->task_reward_idx3_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHarborNpc::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserFoodOrderSlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserFoodOrderSlot::kUseridFieldNumber;
const int UserFoodOrderSlot::kSlotidFieldNumber;
const int UserFoodOrderSlot::kSlotTypeFieldNumber;
const int UserFoodOrderSlot::kSlotStateFieldNumber;
const int UserFoodOrderSlot::kWorkshopidFieldNumber;
const int UserFoodOrderSlot::kWorkeridFieldNumber;
const int UserFoodOrderSlot::kFoodfilteridFieldNumber;
const int UserFoodOrderSlot::kFormulaidFieldNumber;
const int UserFoodOrderSlot::kProductidFieldNumber;
const int UserFoodOrderSlot::kSecondsFieldNumber;
const int UserFoodOrderSlot::kStarFieldNumber;
const int UserFoodOrderSlot::kGatherGoldNumFieldNumber;
const int UserFoodOrderSlot::kGatherSatisfactionNumFieldNumber;
const int UserFoodOrderSlot::kTipGoldNumFieldNumber;
const int UserFoodOrderSlot::kTipDiamondNumFieldNumber;
const int UserFoodOrderSlot::kAnswerBonusRatioFieldNumber;
const int UserFoodOrderSlot::kStarttimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserFoodOrderSlot::UserFoodOrderSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_UserFoodOrderSlot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserFoodOrderSlot)
}
UserFoodOrderSlot::UserFoodOrderSlot(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_UserFoodOrderSlot.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserFoodOrderSlot)
}
UserFoodOrderSlot::UserFoodOrderSlot(const UserFoodOrderSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&slotid_, &from.slotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&slotid_)) + sizeof(starttime_));
  // @@protoc_insertion_point(copy_constructor:db.UserFoodOrderSlot)
}

void UserFoodOrderSlot::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&slotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&slotid_)) + sizeof(starttime_));
}

UserFoodOrderSlot::~UserFoodOrderSlot() {
  // @@protoc_insertion_point(destructor:db.UserFoodOrderSlot)
  SharedDtor();
}

void UserFoodOrderSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserFoodOrderSlot::ArenaDtor(void* object) {
  UserFoodOrderSlot* _this = reinterpret_cast< UserFoodOrderSlot* >(object);
  (void)_this;
}
void UserFoodOrderSlot::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserFoodOrderSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserFoodOrderSlot::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserFoodOrderSlot& UserFoodOrderSlot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_UserFoodOrderSlot.base);
  return *internal_default_instance();
}


void UserFoodOrderSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserFoodOrderSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&slotid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&productid_) -
        reinterpret_cast<char*>(&slotid_)) + sizeof(productid_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&formulaid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&answer_bonus_ratio_) -
        reinterpret_cast<char*>(&formulaid_)) + sizeof(answer_bonus_ratio_));
  }
  starttime_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserFoodOrderSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserFoodOrderSlot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 slotid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_slotid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 slot_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_slot_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 slot_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_slot_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 workshopid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_workshopid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workshopid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 workerid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_workerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 foodfilterid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_foodfilterid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foodfilterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 formulaid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_formulaid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formulaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 productid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_productid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &productid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seconds = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gather_gold_num = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_gather_gold_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_gold_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gather_satisfaction_num = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_gather_satisfaction_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_satisfaction_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tip_gold_num = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_tip_gold_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tip_gold_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tip_diamond_num = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_tip_diamond_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tip_diamond_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float answer_bonus_ratio = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {
          set_has_answer_bonus_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &answer_bonus_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 starttime = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserFoodOrderSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserFoodOrderSlot)
  return false;
#undef DO_
}

void UserFoodOrderSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserFoodOrderSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 slotid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slotid(), output);
  }

  // required int32 slot_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_type(), output);
  }

  // required int32 slot_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slot_state(), output);
  }

  // required int32 workshopid = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->workshopid(), output);
  }

  // required int32 workerid = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->workerid(), output);
  }

  // required int32 foodfilterid = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->foodfilterid(), output);
  }

  // required int32 formulaid = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->formulaid(), output);
  }

  // required uint64 productid = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->productid(), output);
  }

  // required int32 seconds = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->seconds(), output);
  }

  // required int32 star = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->star(), output);
  }

  // required int32 gather_gold_num = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->gather_gold_num(), output);
  }

  // required int32 gather_satisfaction_num = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->gather_satisfaction_num(), output);
  }

  // required int32 tip_gold_num = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tip_gold_num(), output);
  }

  // required int32 tip_diamond_num = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tip_diamond_num(), output);
  }

  // required float answer_bonus_ratio = 26;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->answer_bonus_ratio(), output);
  }

  // required sfixed64 starttime = 31;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(31, this->starttime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserFoodOrderSlot)
}

::google::protobuf::uint8* UserFoodOrderSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserFoodOrderSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 slotid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slotid(), target);
  }

  // required int32 slot_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_type(), target);
  }

  // required int32 slot_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slot_state(), target);
  }

  // required int32 workshopid = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->workshopid(), target);
  }

  // required int32 workerid = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->workerid(), target);
  }

  // required int32 foodfilterid = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->foodfilterid(), target);
  }

  // required int32 formulaid = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->formulaid(), target);
  }

  // required uint64 productid = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->productid(), target);
  }

  // required int32 seconds = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->seconds(), target);
  }

  // required int32 star = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->star(), target);
  }

  // required int32 gather_gold_num = 22;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->gather_gold_num(), target);
  }

  // required int32 gather_satisfaction_num = 23;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->gather_satisfaction_num(), target);
  }

  // required int32 tip_gold_num = 24;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tip_gold_num(), target);
  }

  // required int32 tip_diamond_num = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tip_diamond_num(), target);
  }

  // required float answer_bonus_ratio = 26;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->answer_bonus_ratio(), target);
  }

  // required sfixed64 starttime = 31;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(31, this->starttime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserFoodOrderSlot)
  return target;
}

size_t UserFoodOrderSlot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserFoodOrderSlot)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_slotid()) {
    // required int32 slotid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slotid());
  }

  if (has_slot_type()) {
    // required int32 slot_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_type());
  }

  if (has_slot_state()) {
    // required int32 slot_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_state());
  }

  if (has_workshopid()) {
    // required int32 workshopid = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshopid());
  }

  if (has_workerid()) {
    // required int32 workerid = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workerid());
  }

  if (has_foodfilterid()) {
    // required int32 foodfilterid = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->foodfilterid());
  }

  if (has_productid()) {
    // required uint64 productid = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->productid());
  }

  if (has_formulaid()) {
    // required int32 formulaid = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->formulaid());
  }

  if (has_seconds()) {
    // required int32 seconds = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  if (has_star()) {
    // required int32 star = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_gather_gold_num()) {
    // required int32 gather_gold_num = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_gold_num());
  }

  if (has_gather_satisfaction_num()) {
    // required int32 gather_satisfaction_num = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_satisfaction_num());
  }

  if (has_tip_gold_num()) {
    // required int32 tip_gold_num = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tip_gold_num());
  }

  if (has_tip_diamond_num()) {
    // required int32 tip_diamond_num = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tip_diamond_num());
  }

  if (has_answer_bonus_ratio()) {
    // required float answer_bonus_ratio = 26;
    total_size += 2 + 4;
  }

  if (has_starttime()) {
    // required sfixed64 starttime = 31;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t UserFoodOrderSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserFoodOrderSlot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0001ffff) ^ 0x0001ffff) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required int32 slotid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slotid());

    // required int32 slot_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_type());

    // required int32 slot_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_state());

    // required int32 workshopid = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshopid());

    // required int32 workerid = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workerid());

    // required int32 foodfilterid = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->foodfilterid());

    // required uint64 productid = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->productid());

    // required int32 formulaid = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->formulaid());

    // required int32 seconds = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());

    // required int32 star = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required int32 gather_gold_num = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_gold_num());

    // required int32 gather_satisfaction_num = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_satisfaction_num());

    // required int32 tip_gold_num = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tip_gold_num());

    // required int32 tip_diamond_num = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tip_diamond_num());

    // required float answer_bonus_ratio = 26;
    total_size += 2 + 4;

    // required sfixed64 starttime = 31;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFoodOrderSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserFoodOrderSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFoodOrderSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserFoodOrderSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserFoodOrderSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserFoodOrderSlot)
    MergeFrom(*source);
  }
}

void UserFoodOrderSlot::MergeFrom(const UserFoodOrderSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserFoodOrderSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      slotid_ = from.slotid_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_type_ = from.slot_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      slot_state_ = from.slot_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      workshopid_ = from.workshopid_;
    }
    if (cached_has_bits & 0x00000020u) {
      workerid_ = from.workerid_;
    }
    if (cached_has_bits & 0x00000040u) {
      foodfilterid_ = from.foodfilterid_;
    }
    if (cached_has_bits & 0x00000080u) {
      productid_ = from.productid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      formulaid_ = from.formulaid_;
    }
    if (cached_has_bits & 0x00000200u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000800u) {
      gather_gold_num_ = from.gather_gold_num_;
    }
    if (cached_has_bits & 0x00001000u) {
      gather_satisfaction_num_ = from.gather_satisfaction_num_;
    }
    if (cached_has_bits & 0x00002000u) {
      tip_gold_num_ = from.tip_gold_num_;
    }
    if (cached_has_bits & 0x00004000u) {
      tip_diamond_num_ = from.tip_diamond_num_;
    }
    if (cached_has_bits & 0x00008000u) {
      answer_bonus_ratio_ = from.answer_bonus_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_starttime(from.starttime());
  }
}

void UserFoodOrderSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserFoodOrderSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFoodOrderSlot::CopyFrom(const UserFoodOrderSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserFoodOrderSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFoodOrderSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;
  return true;
}

void UserFoodOrderSlot::Swap(UserFoodOrderSlot* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserFoodOrderSlot* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserFoodOrderSlot::UnsafeArenaSwap(UserFoodOrderSlot* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserFoodOrderSlot::InternalSwap(UserFoodOrderSlot* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(slotid_, other->slotid_);
  swap(slot_type_, other->slot_type_);
  swap(slot_state_, other->slot_state_);
  swap(workshopid_, other->workshopid_);
  swap(workerid_, other->workerid_);
  swap(foodfilterid_, other->foodfilterid_);
  swap(productid_, other->productid_);
  swap(formulaid_, other->formulaid_);
  swap(seconds_, other->seconds_);
  swap(star_, other->star_);
  swap(gather_gold_num_, other->gather_gold_num_);
  swap(gather_satisfaction_num_, other->gather_satisfaction_num_);
  swap(tip_gold_num_, other->tip_gold_num_);
  swap(tip_diamond_num_, other->tip_diamond_num_);
  swap(answer_bonus_ratio_, other->answer_bonus_ratio_);
  swap(starttime_, other->starttime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserFoodOrderSlot::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserCustomerUnlock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserCustomerUnlock::kUseridFieldNumber;
const int UserCustomerUnlock::kSnFieldNumber;
const int UserCustomerUnlock::kCfgidFieldNumber;
const int UserCustomerUnlock::kStateFieldNumber;
const int UserCustomerUnlock::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserCustomerUnlock::UserCustomerUnlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHarbour_2eproto::scc_info_UserCustomerUnlock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserCustomerUnlock)
}
UserCustomerUnlock::UserCustomerUnlock(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_UserCustomerUnlock.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserCustomerUnlock)
}
UserCustomerUnlock::UserCustomerUnlock(const UserCustomerUnlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&cfgid_, &from.cfgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&cfgid_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.UserCustomerUnlock)
}

void UserCustomerUnlock::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cfgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&cfgid_)) + sizeof(optime_));
}

UserCustomerUnlock::~UserCustomerUnlock() {
  // @@protoc_insertion_point(destructor:db.UserCustomerUnlock)
  SharedDtor();
}

void UserCustomerUnlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserCustomerUnlock::ArenaDtor(void* object) {
  UserCustomerUnlock* _this = reinterpret_cast< UserCustomerUnlock* >(object);
  (void)_this;
}
void UserCustomerUnlock::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserCustomerUnlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserCustomerUnlock::descriptor() {
  ::protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserCustomerUnlock& UserCustomerUnlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHarbour_2eproto::scc_info_UserCustomerUnlock.base);
  return *internal_default_instance();
}


void UserCustomerUnlock::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserCustomerUnlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 30u) {
    ::memset(&cfgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&cfgid_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserCustomerUnlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserCustomerUnlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 cfgid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cfgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserCustomerUnlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserCustomerUnlock)
  return false;
#undef DO_
}

void UserCustomerUnlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserCustomerUnlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 sn = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sn(), output);
  }

  // required uint64 cfgid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cfgid(), output);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserCustomerUnlock)
}

::google::protobuf::uint8* UserCustomerUnlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserCustomerUnlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 sn = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sn(), target);
  }

  // required uint64 cfgid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cfgid(), target);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserCustomerUnlock)
  return target;
}

size_t UserCustomerUnlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserCustomerUnlock)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_cfgid()) {
    // required uint64 cfgid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cfgid());
  }

  if (has_sn()) {
    // required int32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());
  }

  if (has_state()) {
    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_optime()) {
    // required sfixed64 optime = 11;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t UserCustomerUnlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserCustomerUnlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required uint64 cfgid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cfgid());

    // required int32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());

    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required sfixed64 optime = 11;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserCustomerUnlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserCustomerUnlock)
  GOOGLE_DCHECK_NE(&from, this);
  const UserCustomerUnlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserCustomerUnlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserCustomerUnlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserCustomerUnlock)
    MergeFrom(*source);
  }
}

void UserCustomerUnlock::MergeFrom(const UserCustomerUnlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserCustomerUnlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      cfgid_ = from.cfgid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sn_ = from.sn_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserCustomerUnlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserCustomerUnlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCustomerUnlock::CopyFrom(const UserCustomerUnlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserCustomerUnlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCustomerUnlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void UserCustomerUnlock::Swap(UserCustomerUnlock* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserCustomerUnlock* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserCustomerUnlock::UnsafeArenaSwap(UserCustomerUnlock* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserCustomerUnlock::InternalSwap(UserCustomerUnlock* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cfgid_, other->cfgid_);
  swap(sn_, other->sn_);
  swap(state_, other->state_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserCustomerUnlock::GetMetadata() const {
  protobuf_StoredProcHarbour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHarbour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFood* Arena::CreateMaybeMessage< ::db::ConfigFood >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFood >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFoodList* Arena::CreateMaybeMessage< ::db::ConfigFoodList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFoodList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFoodRecipe* Arena::CreateMaybeMessage< ::db::ConfigFoodRecipe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFoodRecipe >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFoodRecipeList* Arena::CreateMaybeMessage< ::db::ConfigFoodRecipeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFoodRecipeList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFoodFilter* Arena::CreateMaybeMessage< ::db::ConfigFoodFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFoodFilter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFoodFilterList* Arena::CreateMaybeMessage< ::db::ConfigFoodFilterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFoodFilterList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCustomer* Arena::CreateMaybeMessage< ::db::ConfigCustomer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCustomer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCustomerList* Arena::CreateMaybeMessage< ::db::ConfigCustomerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCustomerList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCustomerOccupation* Arena::CreateMaybeMessage< ::db::ConfigCustomerOccupation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCustomerOccupation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCustomerOccupationList* Arena::CreateMaybeMessage< ::db::ConfigCustomerOccupationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCustomerOccupationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCustomerWealthGrade* Arena::CreateMaybeMessage< ::db::ConfigCustomerWealthGrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCustomerWealthGrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCustomerWealthGradeList* Arena::CreateMaybeMessage< ::db::ConfigCustomerWealthGradeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCustomerWealthGradeList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigPlaceGrade* Arena::CreateMaybeMessage< ::db::ConfigPlaceGrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigPlaceGrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigPlaceGradeList* Arena::CreateMaybeMessage< ::db::ConfigPlaceGradeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigPlaceGradeList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHarborFoodOrder* Arena::CreateMaybeMessage< ::db::ConfigHarborFoodOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHarborFoodOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHarborFoodOrderList* Arena::CreateMaybeMessage< ::db::ConfigHarborFoodOrderList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHarborFoodOrderList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserHarbor* Arena::CreateMaybeMessage< ::db::UserHarbor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserHarbor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserHarborNpc* Arena::CreateMaybeMessage< ::db::UserHarborNpc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserHarborNpc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserFoodOrderSlot* Arena::CreateMaybeMessage< ::db::UserFoodOrderSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserFoodOrderSlot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserCustomerUnlock* Arena::CreateMaybeMessage< ::db::UserCustomerUnlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserCustomerUnlock >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
