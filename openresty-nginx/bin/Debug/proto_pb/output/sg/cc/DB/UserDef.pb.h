// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserDef.proto

#ifndef PROTOBUF_INCLUDED_UserDef_2eproto
#define PROTOBUF_INCLUDED_UserDef_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_UserDef_2eproto 

namespace protobuf_UserDef_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[60];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_UserDef_2eproto
namespace db {
class PlayerInvadeRecord;
class PlayerInvadeRecordDefaultTypeInternal;
extern PlayerInvadeRecordDefaultTypeInternal _PlayerInvadeRecord_default_instance_;
class PlayerInvadeState;
class PlayerInvadeStateDefaultTypeInternal;
extern PlayerInvadeStateDefaultTypeInternal _PlayerInvadeState_default_instance_;
class ShoppingRecord;
class ShoppingRecordDefaultTypeInternal;
extern ShoppingRecordDefaultTypeInternal _ShoppingRecord_default_instance_;
class UserAchievement;
class UserAchievementDefaultTypeInternal;
extern UserAchievementDefaultTypeInternal _UserAchievement_default_instance_;
class UserArchive;
class UserArchiveDefaultTypeInternal;
extern UserArchiveDefaultTypeInternal _UserArchive_default_instance_;
class UserAttribute;
class UserAttributeDefaultTypeInternal;
extern UserAttributeDefaultTypeInternal _UserAttribute_default_instance_;
class UserBattleState;
class UserBattleStateDefaultTypeInternal;
extern UserBattleStateDefaultTypeInternal _UserBattleState_default_instance_;
class UserChest;
class UserChestDefaultTypeInternal;
extern UserChestDefaultTypeInternal _UserChest_default_instance_;
class UserDailyGift;
class UserDailyGiftDefaultTypeInternal;
extern UserDailyGiftDefaultTypeInternal _UserDailyGift_default_instance_;
class UserDungeonChest;
class UserDungeonChestDefaultTypeInternal;
extern UserDungeonChestDefaultTypeInternal _UserDungeonChest_default_instance_;
class UserDungeonEvent;
class UserDungeonEventDefaultTypeInternal;
extern UserDungeonEventDefaultTypeInternal _UserDungeonEvent_default_instance_;
class UserDungeonState;
class UserDungeonStateDefaultTypeInternal;
extern UserDungeonStateDefaultTypeInternal _UserDungeonState_default_instance_;
class UserEasterEgg;
class UserEasterEggDefaultTypeInternal;
extern UserEasterEggDefaultTypeInternal _UserEasterEgg_default_instance_;
class UserEquip;
class UserEquipDefaultTypeInternal;
extern UserEquipDefaultTypeInternal _UserEquip_default_instance_;
class UserEventCache;
class UserEventCacheDefaultTypeInternal;
extern UserEventCacheDefaultTypeInternal _UserEventCache_default_instance_;
class UserEventRecord;
class UserEventRecordDefaultTypeInternal;
extern UserEventRecordDefaultTypeInternal _UserEventRecord_default_instance_;
class UserExploreEvent;
class UserExploreEventDefaultTypeInternal;
extern UserExploreEventDefaultTypeInternal _UserExploreEvent_default_instance_;
class UserExploreRecord;
class UserExploreRecordDefaultTypeInternal;
extern UserExploreRecordDefaultTypeInternal _UserExploreRecord_default_instance_;
class UserExploreStage;
class UserExploreStageDefaultTypeInternal;
extern UserExploreStageDefaultTypeInternal _UserExploreStage_default_instance_;
class UserExploreState;
class UserExploreStateDefaultTypeInternal;
extern UserExploreStateDefaultTypeInternal _UserExploreState_default_instance_;
class UserFacility;
class UserFacilityDefaultTypeInternal;
extern UserFacilityDefaultTypeInternal _UserFacility_default_instance_;
class UserFightManual;
class UserFightManualDefaultTypeInternal;
extern UserFightManualDefaultTypeInternal _UserFightManual_default_instance_;
class UserFormula;
class UserFormulaDefaultTypeInternal;
extern UserFormulaDefaultTypeInternal _UserFormula_default_instance_;
class UserGhostShip;
class UserGhostShipDefaultTypeInternal;
extern UserGhostShipDefaultTypeInternal _UserGhostShip_default_instance_;
class UserGhostStage;
class UserGhostStageDefaultTypeInternal;
extern UserGhostStageDefaultTypeInternal _UserGhostStage_default_instance_;
class UserHiddenData;
class UserHiddenDataDefaultTypeInternal;
extern UserHiddenDataDefaultTypeInternal _UserHiddenData_default_instance_;
class UserItem;
class UserItemDefaultTypeInternal;
extern UserItemDefaultTypeInternal _UserItem_default_instance_;
class UserLogCostDiamond;
class UserLogCostDiamondDefaultTypeInternal;
extern UserLogCostDiamondDefaultTypeInternal _UserLogCostDiamond_default_instance_;
class UserLogCostItem;
class UserLogCostItemDefaultTypeInternal;
extern UserLogCostItemDefaultTypeInternal _UserLogCostItem_default_instance_;
class UserLogShopping;
class UserLogShoppingDefaultTypeInternal;
extern UserLogShoppingDefaultTypeInternal _UserLogShopping_default_instance_;
class UserMaelstromBuilding;
class UserMaelstromBuildingDefaultTypeInternal;
extern UserMaelstromBuildingDefaultTypeInternal _UserMaelstromBuilding_default_instance_;
class UserMaelstromEvent;
class UserMaelstromEventDefaultTypeInternal;
extern UserMaelstromEventDefaultTypeInternal _UserMaelstromEvent_default_instance_;
class UserMaelstromState;
class UserMaelstromStateDefaultTypeInternal;
extern UserMaelstromStateDefaultTypeInternal _UserMaelstromState_default_instance_;
class UserManual;
class UserManualDefaultTypeInternal;
extern UserManualDefaultTypeInternal _UserManual_default_instance_;
class UserNavigationRecord;
class UserNavigationRecordDefaultTypeInternal;
extern UserNavigationRecordDefaultTypeInternal _UserNavigationRecord_default_instance_;
class UserNavigationState;
class UserNavigationStateDefaultTypeInternal;
extern UserNavigationStateDefaultTypeInternal _UserNavigationState_default_instance_;
class UserNpc;
class UserNpcDefaultTypeInternal;
extern UserNpcDefaultTypeInternal _UserNpc_default_instance_;
class UserPVPRecord;
class UserPVPRecordDefaultTypeInternal;
extern UserPVPRecordDefaultTypeInternal _UserPVPRecord_default_instance_;
class UserProduceOrder;
class UserProduceOrderDefaultTypeInternal;
extern UserProduceOrderDefaultTypeInternal _UserProduceOrder_default_instance_;
class UserPveMap;
class UserPveMapDefaultTypeInternal;
extern UserPveMapDefaultTypeInternal _UserPveMap_default_instance_;
class UserPvpState;
class UserPvpStateDefaultTypeInternal;
extern UserPvpStateDefaultTypeInternal _UserPvpState_default_instance_;
class UserRegion;
class UserRegionDefaultTypeInternal;
extern UserRegionDefaultTypeInternal _UserRegion_default_instance_;
class UserRoom;
class UserRoomDefaultTypeInternal;
extern UserRoomDefaultTypeInternal _UserRoom_default_instance_;
class UserRoomModel;
class UserRoomModelDefaultTypeInternal;
extern UserRoomModelDefaultTypeInternal _UserRoomModel_default_instance_;
class UserSailor;
class UserSailorDefaultTypeInternal;
extern UserSailorDefaultTypeInternal _UserSailor_default_instance_;
class UserSailorEquip;
class UserSailorEquipDefaultTypeInternal;
extern UserSailorEquipDefaultTypeInternal _UserSailorEquip_default_instance_;
class UserSailorFarmSkill;
class UserSailorFarmSkillDefaultTypeInternal;
extern UserSailorFarmSkillDefaultTypeInternal _UserSailorFarmSkill_default_instance_;
class UserSailorInGhostShip;
class UserSailorInGhostShipDefaultTypeInternal;
extern UserSailorInGhostShipDefaultTypeInternal _UserSailorInGhostShip_default_instance_;
class UserSailorSkill;
class UserSailorSkillDefaultTypeInternal;
extern UserSailorSkillDefaultTypeInternal _UserSailorSkill_default_instance_;
class UserShip;
class UserShipDefaultTypeInternal;
extern UserShipDefaultTypeInternal _UserShip_default_instance_;
class UserShipEvent;
class UserShipEventDefaultTypeInternal;
extern UserShipEventDefaultTypeInternal _UserShipEvent_default_instance_;
class UserShipEventTiming;
class UserShipEventTimingDefaultTypeInternal;
extern UserShipEventTimingDefaultTypeInternal _UserShipEventTiming_default_instance_;
class UserShipModel;
class UserShipModelDefaultTypeInternal;
extern UserShipModelDefaultTypeInternal _UserShipModel_default_instance_;
class UserShoppingGoods;
class UserShoppingGoodsDefaultTypeInternal;
extern UserShoppingGoodsDefaultTypeInternal _UserShoppingGoods_default_instance_;
class UserShoppingMall;
class UserShoppingMallDefaultTypeInternal;
extern UserShoppingMallDefaultTypeInternal _UserShoppingMall_default_instance_;
class UserSpecialEvent;
class UserSpecialEventDefaultTypeInternal;
extern UserSpecialEventDefaultTypeInternal _UserSpecialEvent_default_instance_;
class UserState;
class UserStateDefaultTypeInternal;
extern UserStateDefaultTypeInternal _UserState_default_instance_;
class UserSystemTask;
class UserSystemTaskDefaultTypeInternal;
extern UserSystemTaskDefaultTypeInternal _UserSystemTask_default_instance_;
class UserTask;
class UserTaskDefaultTypeInternal;
extern UserTaskDefaultTypeInternal _UserTask_default_instance_;
class UserWanted;
class UserWantedDefaultTypeInternal;
extern UserWantedDefaultTypeInternal _UserWanted_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::PlayerInvadeRecord* Arena::CreateMaybeMessage<::db::PlayerInvadeRecord>(Arena*);
template<> ::db::PlayerInvadeState* Arena::CreateMaybeMessage<::db::PlayerInvadeState>(Arena*);
template<> ::db::ShoppingRecord* Arena::CreateMaybeMessage<::db::ShoppingRecord>(Arena*);
template<> ::db::UserAchievement* Arena::CreateMaybeMessage<::db::UserAchievement>(Arena*);
template<> ::db::UserArchive* Arena::CreateMaybeMessage<::db::UserArchive>(Arena*);
template<> ::db::UserAttribute* Arena::CreateMaybeMessage<::db::UserAttribute>(Arena*);
template<> ::db::UserBattleState* Arena::CreateMaybeMessage<::db::UserBattleState>(Arena*);
template<> ::db::UserChest* Arena::CreateMaybeMessage<::db::UserChest>(Arena*);
template<> ::db::UserDailyGift* Arena::CreateMaybeMessage<::db::UserDailyGift>(Arena*);
template<> ::db::UserDungeonChest* Arena::CreateMaybeMessage<::db::UserDungeonChest>(Arena*);
template<> ::db::UserDungeonEvent* Arena::CreateMaybeMessage<::db::UserDungeonEvent>(Arena*);
template<> ::db::UserDungeonState* Arena::CreateMaybeMessage<::db::UserDungeonState>(Arena*);
template<> ::db::UserEasterEgg* Arena::CreateMaybeMessage<::db::UserEasterEgg>(Arena*);
template<> ::db::UserEquip* Arena::CreateMaybeMessage<::db::UserEquip>(Arena*);
template<> ::db::UserEventCache* Arena::CreateMaybeMessage<::db::UserEventCache>(Arena*);
template<> ::db::UserEventRecord* Arena::CreateMaybeMessage<::db::UserEventRecord>(Arena*);
template<> ::db::UserExploreEvent* Arena::CreateMaybeMessage<::db::UserExploreEvent>(Arena*);
template<> ::db::UserExploreRecord* Arena::CreateMaybeMessage<::db::UserExploreRecord>(Arena*);
template<> ::db::UserExploreStage* Arena::CreateMaybeMessage<::db::UserExploreStage>(Arena*);
template<> ::db::UserExploreState* Arena::CreateMaybeMessage<::db::UserExploreState>(Arena*);
template<> ::db::UserFacility* Arena::CreateMaybeMessage<::db::UserFacility>(Arena*);
template<> ::db::UserFightManual* Arena::CreateMaybeMessage<::db::UserFightManual>(Arena*);
template<> ::db::UserFormula* Arena::CreateMaybeMessage<::db::UserFormula>(Arena*);
template<> ::db::UserGhostShip* Arena::CreateMaybeMessage<::db::UserGhostShip>(Arena*);
template<> ::db::UserGhostStage* Arena::CreateMaybeMessage<::db::UserGhostStage>(Arena*);
template<> ::db::UserHiddenData* Arena::CreateMaybeMessage<::db::UserHiddenData>(Arena*);
template<> ::db::UserItem* Arena::CreateMaybeMessage<::db::UserItem>(Arena*);
template<> ::db::UserLogCostDiamond* Arena::CreateMaybeMessage<::db::UserLogCostDiamond>(Arena*);
template<> ::db::UserLogCostItem* Arena::CreateMaybeMessage<::db::UserLogCostItem>(Arena*);
template<> ::db::UserLogShopping* Arena::CreateMaybeMessage<::db::UserLogShopping>(Arena*);
template<> ::db::UserMaelstromBuilding* Arena::CreateMaybeMessage<::db::UserMaelstromBuilding>(Arena*);
template<> ::db::UserMaelstromEvent* Arena::CreateMaybeMessage<::db::UserMaelstromEvent>(Arena*);
template<> ::db::UserMaelstromState* Arena::CreateMaybeMessage<::db::UserMaelstromState>(Arena*);
template<> ::db::UserManual* Arena::CreateMaybeMessage<::db::UserManual>(Arena*);
template<> ::db::UserNavigationRecord* Arena::CreateMaybeMessage<::db::UserNavigationRecord>(Arena*);
template<> ::db::UserNavigationState* Arena::CreateMaybeMessage<::db::UserNavigationState>(Arena*);
template<> ::db::UserNpc* Arena::CreateMaybeMessage<::db::UserNpc>(Arena*);
template<> ::db::UserPVPRecord* Arena::CreateMaybeMessage<::db::UserPVPRecord>(Arena*);
template<> ::db::UserProduceOrder* Arena::CreateMaybeMessage<::db::UserProduceOrder>(Arena*);
template<> ::db::UserPveMap* Arena::CreateMaybeMessage<::db::UserPveMap>(Arena*);
template<> ::db::UserPvpState* Arena::CreateMaybeMessage<::db::UserPvpState>(Arena*);
template<> ::db::UserRegion* Arena::CreateMaybeMessage<::db::UserRegion>(Arena*);
template<> ::db::UserRoom* Arena::CreateMaybeMessage<::db::UserRoom>(Arena*);
template<> ::db::UserRoomModel* Arena::CreateMaybeMessage<::db::UserRoomModel>(Arena*);
template<> ::db::UserSailor* Arena::CreateMaybeMessage<::db::UserSailor>(Arena*);
template<> ::db::UserSailorEquip* Arena::CreateMaybeMessage<::db::UserSailorEquip>(Arena*);
template<> ::db::UserSailorFarmSkill* Arena::CreateMaybeMessage<::db::UserSailorFarmSkill>(Arena*);
template<> ::db::UserSailorInGhostShip* Arena::CreateMaybeMessage<::db::UserSailorInGhostShip>(Arena*);
template<> ::db::UserSailorSkill* Arena::CreateMaybeMessage<::db::UserSailorSkill>(Arena*);
template<> ::db::UserShip* Arena::CreateMaybeMessage<::db::UserShip>(Arena*);
template<> ::db::UserShipEvent* Arena::CreateMaybeMessage<::db::UserShipEvent>(Arena*);
template<> ::db::UserShipEventTiming* Arena::CreateMaybeMessage<::db::UserShipEventTiming>(Arena*);
template<> ::db::UserShipModel* Arena::CreateMaybeMessage<::db::UserShipModel>(Arena*);
template<> ::db::UserShoppingGoods* Arena::CreateMaybeMessage<::db::UserShoppingGoods>(Arena*);
template<> ::db::UserShoppingMall* Arena::CreateMaybeMessage<::db::UserShoppingMall>(Arena*);
template<> ::db::UserSpecialEvent* Arena::CreateMaybeMessage<::db::UserSpecialEvent>(Arena*);
template<> ::db::UserState* Arena::CreateMaybeMessage<::db::UserState>(Arena*);
template<> ::db::UserSystemTask* Arena::CreateMaybeMessage<::db::UserSystemTask>(Arena*);
template<> ::db::UserTask* Arena::CreateMaybeMessage<::db::UserTask>(Arena*);
template<> ::db::UserWanted* Arena::CreateMaybeMessage<::db::UserWanted>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

// ===================================================================

class UserAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserAttribute) */ {
 public:
  UserAttribute();
  virtual ~UserAttribute();

  UserAttribute(const UserAttribute& from);

  inline UserAttribute& operator=(const UserAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAttribute(UserAttribute&& from) noexcept
    : UserAttribute() {
    *this = ::std::move(from);
  }

  inline UserAttribute& operator=(UserAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAttribute* internal_default_instance() {
    return reinterpret_cast<const UserAttribute*>(
               &_UserAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(UserAttribute* other);
  void Swap(UserAttribute* other);
  friend void swap(UserAttribute& a, UserAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAttribute* New() const final {
    return CreateMaybeMessage<UserAttribute>(NULL);
  }

  UserAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAttribute& from);
  void MergeFrom(const UserAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAttribute* other);
  protected:
  explicit UserAttribute(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes nick = 2;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required bytes signature = 6;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 6;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_signature();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      ::std::string* signature);

  // optional bytes grow_gift = 14;
  bool has_grow_gift() const;
  void clear_grow_gift();
  static const int kGrowGiftFieldNumber = 14;
  const ::std::string& grow_gift() const;
  void set_grow_gift(const ::std::string& value);
  #if LANG_CXX11
  void set_grow_gift(::std::string&& value);
  #endif
  void set_grow_gift(const char* value);
  void set_grow_gift(const void* value, size_t size);
  ::std::string* mutable_grow_gift();
  ::std::string* release_grow_gift();
  void set_allocated_grow_gift(::std::string* grow_gift);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_grow_gift();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_grow_gift(
      ::std::string* grow_gift);

  // required int32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 exp = 4;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 4;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // required int32 portrait = 5;
  bool has_portrait() const;
  void clear_portrait();
  static const int kPortraitFieldNumber = 5;
  ::google::protobuf::int32 portrait() const;
  void set_portrait(::google::protobuf::int32 value);

  // required int32 rank = 7;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 7;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // required sfixed64 createtime = 8;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreatetimeFieldNumber = 8;
  ::google::protobuf::int64 createtime() const;
  void set_createtime(::google::protobuf::int64 value);

  // required sfixed64 optime = 11;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 11;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // required int32 ticketid = 12;
  bool has_ticketid() const;
  void clear_ticketid();
  static const int kTicketidFieldNumber = 12;
  ::google::protobuf::int32 ticketid() const;
  void set_ticketid(::google::protobuf::int32 value);

  // optional int32 force = 13;
  bool has_force() const;
  void clear_force();
  static const int kForceFieldNumber = 13;
  ::google::protobuf::int32 force() const;
  void set_force(::google::protobuf::int32 value);

  // optional sfixed64 last_rename_time = 15;
  bool has_last_rename_time() const;
  void clear_last_rename_time();
  static const int kLastRenameTimeFieldNumber = 15;
  ::google::protobuf::int64 last_rename_time() const;
  void set_last_rename_time(::google::protobuf::int64 value);

  // optional int32 portrait_frame = 16;
  bool has_portrait_frame() const;
  void clear_portrait_frame();
  static const int kPortraitFrameFieldNumber = 16;
  ::google::protobuf::int32 portrait_frame() const;
  void set_portrait_frame(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserAttribute)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_nick();
  void clear_has_nick();
  void set_has_level();
  void clear_has_level();
  void set_has_exp();
  void clear_has_exp();
  void set_has_portrait();
  void clear_has_portrait();
  void set_has_signature();
  void clear_has_signature();
  void set_has_rank();
  void clear_has_rank();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_optime();
  void clear_has_optime();
  void set_has_ticketid();
  void clear_has_ticketid();
  void set_has_force();
  void clear_has_force();
  void set_has_grow_gift();
  void clear_has_grow_gift();
  void set_has_last_rename_time();
  void clear_has_last_rename_time();
  void set_has_portrait_frame();
  void clear_has_portrait_frame();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr grow_gift_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 portrait_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 optime_;
  ::google::protobuf::int32 ticketid_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int64 last_rename_time_;
  ::google::protobuf::int32 portrait_frame_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserShip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserShip) */ {
 public:
  UserShip();
  virtual ~UserShip();

  UserShip(const UserShip& from);

  inline UserShip& operator=(const UserShip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserShip(UserShip&& from) noexcept
    : UserShip() {
    *this = ::std::move(from);
  }

  inline UserShip& operator=(UserShip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserShip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserShip* internal_default_instance() {
    return reinterpret_cast<const UserShip*>(
               &_UserShip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(UserShip* other);
  void Swap(UserShip* other);
  friend void swap(UserShip& a, UserShip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserShip* New() const final {
    return CreateMaybeMessage<UserShip>(NULL);
  }

  UserShip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserShip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserShip& from);
  void MergeFrom(const UserShip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserShip* other);
  protected:
  explicit UserShip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes ship = 3;
  bool has_ship() const;
  void clear_ship();
  static const int kShipFieldNumber = 3;
  const ::std::string& ship() const;
  void set_ship(const ::std::string& value);
  #if LANG_CXX11
  void set_ship(::std::string&& value);
  #endif
  void set_ship(const char* value);
  void set_ship(const void* value, size_t size);
  ::std::string* mutable_ship();
  ::std::string* release_ship();
  void set_allocated_ship(::std::string* ship);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ship();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ship(
      ::std::string* ship);

  // required bytes ship_tiles = 4;
  bool has_ship_tiles() const;
  void clear_ship_tiles();
  static const int kShipTilesFieldNumber = 4;
  const ::std::string& ship_tiles() const;
  void set_ship_tiles(const ::std::string& value);
  #if LANG_CXX11
  void set_ship_tiles(::std::string&& value);
  #endif
  void set_ship_tiles(const char* value);
  void set_ship_tiles(const void* value, size_t size);
  ::std::string* mutable_ship_tiles();
  ::std::string* release_ship_tiles();
  void set_allocated_ship_tiles(::std::string* ship_tiles);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ship_tiles();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ship_tiles(
      ::std::string* ship_tiles);

  // required bytes facility = 5;
  bool has_facility() const;
  void clear_facility();
  static const int kFacilityFieldNumber = 5;
  const ::std::string& facility() const;
  void set_facility(const ::std::string& value);
  #if LANG_CXX11
  void set_facility(::std::string&& value);
  #endif
  void set_facility(const char* value);
  void set_facility(const void* value, size_t size);
  ::std::string* mutable_facility();
  ::std::string* release_facility();
  void set_allocated_facility(::std::string* facility);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_facility();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_facility(
      ::std::string* facility);

  // required bytes unlock_room = 8;
  bool has_unlock_room() const;
  void clear_unlock_room();
  static const int kUnlockRoomFieldNumber = 8;
  const ::std::string& unlock_room() const;
  void set_unlock_room(const ::std::string& value);
  #if LANG_CXX11
  void set_unlock_room(::std::string&& value);
  #endif
  void set_unlock_room(const char* value);
  void set_unlock_room(const void* value, size_t size);
  ::std::string* mutable_unlock_room();
  ::std::string* release_unlock_room();
  void set_allocated_unlock_room(::std::string* unlock_room);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unlock_room();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unlock_room(
      ::std::string* unlock_room);

  // required int32 ship_model = 2;
  bool has_ship_model() const;
  void clear_ship_model();
  static const int kShipModelFieldNumber = 2;
  ::google::protobuf::int32 ship_model() const;
  void set_ship_model(::google::protobuf::int32 value);

  // required int32 width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required int32 height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserShip)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_ship_model();
  void clear_has_ship_model();
  void set_has_ship();
  void clear_has_ship();
  void set_has_ship_tiles();
  void clear_has_ship_tiles();
  void set_has_facility();
  void clear_has_facility();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_unlock_room();
  void clear_has_unlock_room();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr ship_;
  ::google::protobuf::internal::ArenaStringPtr ship_tiles_;
  ::google::protobuf::internal::ArenaStringPtr facility_;
  ::google::protobuf::internal::ArenaStringPtr unlock_room_;
  ::google::protobuf::int32 ship_model_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRoom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserRoom) */ {
 public:
  UserRoom();
  virtual ~UserRoom();

  UserRoom(const UserRoom& from);

  inline UserRoom& operator=(const UserRoom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRoom(UserRoom&& from) noexcept
    : UserRoom() {
    *this = ::std::move(from);
  }

  inline UserRoom& operator=(UserRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRoom* internal_default_instance() {
    return reinterpret_cast<const UserRoom*>(
               &_UserRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(UserRoom* other);
  void Swap(UserRoom* other);
  friend void swap(UserRoom& a, UserRoom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRoom* New() const final {
    return CreateMaybeMessage<UserRoom>(NULL);
  }

  UserRoom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRoom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRoom& from);
  void MergeFrom(const UserRoom& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRoom* other);
  protected:
  explicit UserRoom(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes room_struct = 5;
  bool has_room_struct() const;
  void clear_room_struct();
  static const int kRoomStructFieldNumber = 5;
  const ::std::string& room_struct() const;
  void set_room_struct(const ::std::string& value);
  #if LANG_CXX11
  void set_room_struct(::std::string&& value);
  #endif
  void set_room_struct(const char* value);
  void set_room_struct(const void* value, size_t size);
  ::std::string* mutable_room_struct();
  ::std::string* release_room_struct();
  void set_allocated_room_struct(::std::string* room_struct);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_room_struct();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_room_struct(
      ::std::string* room_struct);

  // required int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 room_type = 3;
  bool has_room_type() const;
  void clear_room_type();
  static const int kRoomTypeFieldNumber = 3;
  ::google::protobuf::int32 room_type() const;
  void set_room_type(::google::protobuf::int32 value);

  // required int32 orderid = 4;
  bool has_orderid() const;
  void clear_orderid();
  static const int kOrderidFieldNumber = 4;
  ::google::protobuf::int32 orderid() const;
  void set_orderid(::google::protobuf::int32 value);

  // required int32 state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 region = 7;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 7;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserRoom)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_room_type();
  void clear_has_room_type();
  void set_has_orderid();
  void clear_has_orderid();
  void set_has_room_struct();
  void clear_has_room_struct();
  void set_has_state();
  void clear_has_state();
  void set_has_region();
  void clear_has_region();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr room_struct_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 room_type_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 region_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSailor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserSailor) */ {
 public:
  UserSailor();
  virtual ~UserSailor();

  UserSailor(const UserSailor& from);

  inline UserSailor& operator=(const UserSailor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSailor(UserSailor&& from) noexcept
    : UserSailor() {
    *this = ::std::move(from);
  }

  inline UserSailor& operator=(UserSailor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSailor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSailor* internal_default_instance() {
    return reinterpret_cast<const UserSailor*>(
               &_UserSailor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UserSailor* other);
  void Swap(UserSailor* other);
  friend void swap(UserSailor& a, UserSailor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSailor* New() const final {
    return CreateMaybeMessage<UserSailor>(NULL);
  }

  UserSailor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSailor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSailor& from);
  void MergeFrom(const UserSailor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSailor* other);
  protected:
  explicit UserSailor(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes conduct_list = 17;
  bool has_conduct_list() const;
  void clear_conduct_list();
  static const int kConductListFieldNumber = 17;
  const ::std::string& conduct_list() const;
  void set_conduct_list(const ::std::string& value);
  #if LANG_CXX11
  void set_conduct_list(::std::string&& value);
  #endif
  void set_conduct_list(const char* value);
  void set_conduct_list(const void* value, size_t size);
  ::std::string* mutable_conduct_list();
  ::std::string* release_conduct_list();
  void set_allocated_conduct_list(::std::string* conduct_list);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_conduct_list();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_conduct_list(
      ::std::string* conduct_list);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 typeid = 3;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 3;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required uint64 place = 5;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 5;
  ::google::protobuf::uint64 place() const;
  void set_place(::google::protobuf::uint64 value);

  // required int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 facility_id = 6;
  bool has_facility_id() const;
  void clear_facility_id();
  static const int kFacilityIdFieldNumber = 6;
  ::google::protobuf::int32 facility_id() const;
  void set_facility_id(::google::protobuf::int32 value);

  // required int32 level = 7;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 7;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 star = 8;
  bool has_star() const;
  void clear_star();
  static const int kStarFieldNumber = 8;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // required int32 phase = 9;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 9;
  ::google::protobuf::int32 phase() const;
  void set_phase(::google::protobuf::int32 value);

  // required int32 hp_lost = 10;
  bool has_hp_lost() const;
  void clear_hp_lost();
  static const int kHpLostFieldNumber = 10;
  ::google::protobuf::int32 hp_lost() const;
  void set_hp_lost(::google::protobuf::int32 value);

  // required float vim = 11;
  bool has_vim() const;
  void clear_vim();
  static const int kVimFieldNumber = 11;
  float vim() const;
  void set_vim(float value);

  // required int32 exp = 12;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 12;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // required sfixed64 last_rest_time = 15;
  bool has_last_rest_time() const;
  void clear_last_rest_time();
  static const int kLastRestTimeFieldNumber = 15;
  ::google::protobuf::int64 last_rest_time() const;
  void set_last_rest_time(::google::protobuf::int64 value);

  // required int32 orderid = 14;
  bool has_orderid() const;
  void clear_orderid();
  static const int kOrderidFieldNumber = 14;
  ::google::protobuf::int32 orderid() const;
  void set_orderid(::google::protobuf::int32 value);

  // required int32 job = 16;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 16;
  ::google::protobuf::int32 job() const;
  void set_job(::google::protobuf::int32 value);

  // optional int32 practice = 18;
  bool has_practice() const;
  void clear_practice();
  static const int kPracticeFieldNumber = 18;
  ::google::protobuf::int32 practice() const;
  void set_practice(::google::protobuf::int32 value);

  // optional int32 region = 19;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 19;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // optional float hunger = 20;
  bool has_hunger() const;
  void clear_hunger();
  static const int kHungerFieldNumber = 20;
  float hunger() const;
  void set_hunger(float value);

  // @@protoc_insertion_point(class_scope:db.UserSailor)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_state();
  void clear_has_state();
  void set_has_place();
  void clear_has_place();
  void set_has_facility_id();
  void clear_has_facility_id();
  void set_has_level();
  void clear_has_level();
  void set_has_star();
  void clear_has_star();
  void set_has_phase();
  void clear_has_phase();
  void set_has_hp_lost();
  void clear_has_hp_lost();
  void set_has_vim();
  void clear_has_vim();
  void set_has_exp();
  void clear_has_exp();
  void set_has_orderid();
  void clear_has_orderid();
  void set_has_last_rest_time();
  void clear_has_last_rest_time();
  void set_has_job();
  void clear_has_job();
  void set_has_conduct_list();
  void clear_has_conduct_list();
  void set_has_practice();
  void clear_has_practice();
  void set_has_region();
  void clear_has_region();
  void set_has_hunger();
  void clear_has_hunger();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr conduct_list_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::uint64 place_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 facility_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 phase_;
  ::google::protobuf::int32 hp_lost_;
  float vim_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int64 last_rest_time_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 practice_;
  ::google::protobuf::int32 region_;
  float hunger_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSailorEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserSailorEquip) */ {
 public:
  UserSailorEquip();
  virtual ~UserSailorEquip();

  UserSailorEquip(const UserSailorEquip& from);

  inline UserSailorEquip& operator=(const UserSailorEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSailorEquip(UserSailorEquip&& from) noexcept
    : UserSailorEquip() {
    *this = ::std::move(from);
  }

  inline UserSailorEquip& operator=(UserSailorEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSailorEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSailorEquip* internal_default_instance() {
    return reinterpret_cast<const UserSailorEquip*>(
               &_UserSailorEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(UserSailorEquip* other);
  void Swap(UserSailorEquip* other);
  friend void swap(UserSailorEquip& a, UserSailorEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSailorEquip* New() const final {
    return CreateMaybeMessage<UserSailorEquip>(NULL);
  }

  UserSailorEquip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSailorEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSailorEquip& from);
  void MergeFrom(const UserSailorEquip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSailorEquip* other);
  protected:
  explicit UserSailorEquip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 part = 3;
  bool has_part() const;
  void clear_part();
  static const int kPartFieldNumber = 3;
  ::google::protobuf::int32 part() const;
  void set_part(::google::protobuf::int32 value);

  // required int32 equip_id = 4;
  bool has_equip_id() const;
  void clear_equip_id();
  static const int kEquipIdFieldNumber = 4;
  ::google::protobuf::int32 equip_id() const;
  void set_equip_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserSailorEquip)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_part();
  void clear_has_part();
  void set_has_equip_id();
  void clear_has_equip_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 part_;
  ::google::protobuf::int32 equip_id_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserItem) */ {
 public:
  UserItem();
  virtual ~UserItem();

  UserItem(const UserItem& from);

  inline UserItem& operator=(const UserItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserItem(UserItem&& from) noexcept
    : UserItem() {
    *this = ::std::move(from);
  }

  inline UserItem& operator=(UserItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserItem* internal_default_instance() {
    return reinterpret_cast<const UserItem*>(
               &_UserItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(UserItem* other);
  void Swap(UserItem* other);
  friend void swap(UserItem& a, UserItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserItem* New() const final {
    return CreateMaybeMessage<UserItem>(NULL);
  }

  UserItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserItem& from);
  void MergeFrom(const UserItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserItem* other);
  protected:
  explicit UserItem(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int64 item_num = 3;
  bool has_item_num() const;
  void clear_item_num();
  static const int kItemNumFieldNumber = 3;
  ::google::protobuf::int64 item_num() const;
  void set_item_num(::google::protobuf::int64 value);

  // required int32 item_typeid = 2;
  bool has_item_typeid() const;
  void clear_item_typeid();
  static const int kItemTypeidFieldNumber = 2;
  ::google::protobuf::int32 item_typeid() const;
  void set_item_typeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserItem)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_item_typeid();
  void clear_has_item_typeid();
  void set_has_item_num();
  void clear_has_item_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 item_num_;
  ::google::protobuf::int32 item_typeid_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserFacility : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserFacility) */ {
 public:
  UserFacility();
  virtual ~UserFacility();

  UserFacility(const UserFacility& from);

  inline UserFacility& operator=(const UserFacility& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserFacility(UserFacility&& from) noexcept
    : UserFacility() {
    *this = ::std::move(from);
  }

  inline UserFacility& operator=(UserFacility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFacility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFacility* internal_default_instance() {
    return reinterpret_cast<const UserFacility*>(
               &_UserFacility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(UserFacility* other);
  void Swap(UserFacility* other);
  friend void swap(UserFacility& a, UserFacility& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserFacility* New() const final {
    return CreateMaybeMessage<UserFacility>(NULL);
  }

  UserFacility* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserFacility>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserFacility& from);
  void MergeFrom(const UserFacility& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFacility* other);
  protected:
  explicit UserFacility(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes order_list = 5;
  bool has_order_list() const;
  void clear_order_list();
  static const int kOrderListFieldNumber = 5;
  const ::std::string& order_list() const;
  void set_order_list(const ::std::string& value);
  #if LANG_CXX11
  void set_order_list(::std::string&& value);
  #endif
  void set_order_list(const char* value);
  void set_order_list(const void* value, size_t size);
  ::std::string* mutable_order_list();
  ::std::string* release_order_list();
  void set_allocated_order_list(::std::string* order_list);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_order_list();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_order_list(
      ::std::string* order_list);

  // required bytes worker_list = 7;
  bool has_worker_list() const;
  void clear_worker_list();
  static const int kWorkerListFieldNumber = 7;
  const ::std::string& worker_list() const;
  void set_worker_list(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_list(::std::string&& value);
  #endif
  void set_worker_list(const char* value);
  void set_worker_list(const void* value, size_t size);
  ::std::string* mutable_worker_list();
  ::std::string* release_worker_list();
  void set_allocated_worker_list(::std::string* worker_list);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_worker_list();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_worker_list(
      ::std::string* worker_list);

  // optional bytes special_data = 12;
  bool has_special_data() const;
  void clear_special_data();
  static const int kSpecialDataFieldNumber = 12;
  const ::std::string& special_data() const;
  void set_special_data(const ::std::string& value);
  #if LANG_CXX11
  void set_special_data(::std::string&& value);
  #endif
  void set_special_data(const char* value);
  void set_special_data(const void* value, size_t size);
  ::std::string* mutable_special_data();
  ::std::string* release_special_data();
  void set_allocated_special_data(::std::string* special_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_special_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_special_data(
      ::std::string* special_data);

  // optional bytes unlock_order_slot = 14;
  bool has_unlock_order_slot() const;
  void clear_unlock_order_slot();
  static const int kUnlockOrderSlotFieldNumber = 14;
  const ::std::string& unlock_order_slot() const;
  void set_unlock_order_slot(const ::std::string& value);
  #if LANG_CXX11
  void set_unlock_order_slot(::std::string&& value);
  #endif
  void set_unlock_order_slot(const char* value);
  void set_unlock_order_slot(const void* value, size_t size);
  ::std::string* mutable_unlock_order_slot();
  ::std::string* release_unlock_order_slot();
  void set_allocated_unlock_order_slot(::std::string* unlock_order_slot);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unlock_order_slot();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unlock_order_slot(
      ::std::string* unlock_order_slot);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 typeid = 3;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 3;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 style = 4;
  bool has_style() const;
  void clear_style();
  static const int kStyleFieldNumber = 4;
  ::google::protobuf::int32 style() const;
  void set_style(::google::protobuf::int32 value);

  // required int32 roomid = 6;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 6;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 pos_x = 8;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 8;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // required int32 pos_y = 9;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 9;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // required int32 level = 10;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 10;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 region = 11;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 11;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // optional sfixed64 level_up_starttime = 15;
  bool has_level_up_starttime() const;
  void clear_level_up_starttime();
  static const int kLevelUpStarttimeFieldNumber = 15;
  ::google::protobuf::int64 level_up_starttime() const;
  void set_level_up_starttime(::google::protobuf::int64 value);

  // optional int32 remain_food = 13;
  bool has_remain_food() const;
  void clear_remain_food();
  static const int kRemainFoodFieldNumber = 13;
  ::google::protobuf::int32 remain_food() const;
  void set_remain_food(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserFacility)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_style();
  void clear_has_style();
  void set_has_order_list();
  void clear_has_order_list();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_worker_list();
  void clear_has_worker_list();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();
  void set_has_level();
  void clear_has_level();
  void set_has_region();
  void clear_has_region();
  void set_has_special_data();
  void clear_has_special_data();
  void set_has_remain_food();
  void clear_has_remain_food();
  void set_has_unlock_order_slot();
  void clear_has_unlock_order_slot();
  void set_has_level_up_starttime();
  void clear_has_level_up_starttime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr order_list_;
  ::google::protobuf::internal::ArenaStringPtr worker_list_;
  ::google::protobuf::internal::ArenaStringPtr special_data_;
  ::google::protobuf::internal::ArenaStringPtr unlock_order_slot_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 style_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int64 level_up_starttime_;
  ::google::protobuf::int32 remain_food_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserProduceOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserProduceOrder) */ {
 public:
  UserProduceOrder();
  virtual ~UserProduceOrder();

  UserProduceOrder(const UserProduceOrder& from);

  inline UserProduceOrder& operator=(const UserProduceOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserProduceOrder(UserProduceOrder&& from) noexcept
    : UserProduceOrder() {
    *this = ::std::move(from);
  }

  inline UserProduceOrder& operator=(UserProduceOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserProduceOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserProduceOrder* internal_default_instance() {
    return reinterpret_cast<const UserProduceOrder*>(
               &_UserProduceOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(UserProduceOrder* other);
  void Swap(UserProduceOrder* other);
  friend void swap(UserProduceOrder& a, UserProduceOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserProduceOrder* New() const final {
    return CreateMaybeMessage<UserProduceOrder>(NULL);
  }

  UserProduceOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserProduceOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserProduceOrder& from);
  void MergeFrom(const UserProduceOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserProduceOrder* other);
  protected:
  explicit UserProduceOrder(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes basics = 6;
  bool has_basics() const;
  void clear_basics();
  static const int kBasicsFieldNumber = 6;
  const ::std::string& basics() const;
  void set_basics(const ::std::string& value);
  #if LANG_CXX11
  void set_basics(::std::string&& value);
  #endif
  void set_basics(const char* value);
  void set_basics(const void* value, size_t size);
  ::std::string* mutable_basics();
  ::std::string* release_basics();
  void set_allocated_basics(::std::string* basics);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_basics();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_basics(
      ::std::string* basics);

  // optional bytes skill_influence = 16;
  bool has_skill_influence() const;
  void clear_skill_influence();
  static const int kSkillInfluenceFieldNumber = 16;
  const ::std::string& skill_influence() const;
  void set_skill_influence(const ::std::string& value);
  #if LANG_CXX11
  void set_skill_influence(::std::string&& value);
  #endif
  void set_skill_influence(const char* value);
  void set_skill_influence(const void* value, size_t size);
  ::std::string* mutable_skill_influence();
  ::std::string* release_skill_influence();
  void set_allocated_skill_influence(::std::string* skill_influence);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_skill_influence();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_influence(
      ::std::string* skill_influence);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 production_type = 4;
  bool has_production_type() const;
  void clear_production_type();
  static const int kProductionTypeFieldNumber = 4;
  ::google::protobuf::int32 production_type() const;
  void set_production_type(::google::protobuf::int32 value);

  // required int32 production = 5;
  bool has_production() const;
  void clear_production();
  static const int kProductionFieldNumber = 5;
  ::google::protobuf::int32 production() const;
  void set_production(::google::protobuf::int32 value);

  // required int32 output_num = 7;
  bool has_output_num() const;
  void clear_output_num();
  static const int kOutputNumFieldNumber = 7;
  ::google::protobuf::int32 output_num() const;
  void set_output_num(::google::protobuf::int32 value);

  // required int32 circle_num = 8;
  bool has_circle_num() const;
  void clear_circle_num();
  static const int kCircleNumFieldNumber = 8;
  ::google::protobuf::int32 circle_num() const;
  void set_circle_num(::google::protobuf::int32 value);

  // required int32 finish_num = 9;
  bool has_finish_num() const;
  void clear_finish_num();
  static const int kFinishNumFieldNumber = 9;
  ::google::protobuf::int32 finish_num() const;
  void set_finish_num(::google::protobuf::int32 value);

  // required float speed = 10;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 10;
  float speed() const;
  void set_speed(float value);

  // required sfixed64 timestamp = 12;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 12;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required float ratio = 11;
  bool has_ratio() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 11;
  float ratio() const;
  void set_ratio(float value);

  // required int32 pre_order = 13;
  bool has_pre_order() const;
  void clear_pre_order();
  static const int kPreOrderFieldNumber = 13;
  ::google::protobuf::int32 pre_order() const;
  void set_pre_order(::google::protobuf::int32 value);

  // required int32 next_order = 14;
  bool has_next_order() const;
  void clear_next_order();
  static const int kNextOrderFieldNumber = 14;
  ::google::protobuf::int32 next_order() const;
  void set_next_order(::google::protobuf::int32 value);

  // optional float ratio_stamp = 15;
  bool has_ratio_stamp() const;
  void clear_ratio_stamp();
  static const int kRatioStampFieldNumber = 15;
  float ratio_stamp() const;
  void set_ratio_stamp(float value);

  // @@protoc_insertion_point(class_scope:db.UserProduceOrder)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_production_type();
  void clear_has_production_type();
  void set_has_production();
  void clear_has_production();
  void set_has_basics();
  void clear_has_basics();
  void set_has_output_num();
  void clear_has_output_num();
  void set_has_circle_num();
  void clear_has_circle_num();
  void set_has_finish_num();
  void clear_has_finish_num();
  void set_has_speed();
  void clear_has_speed();
  void set_has_ratio();
  void clear_has_ratio();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_pre_order();
  void clear_has_pre_order();
  void set_has_next_order();
  void clear_has_next_order();
  void set_has_ratio_stamp();
  void clear_has_ratio_stamp();
  void set_has_skill_influence();
  void clear_has_skill_influence();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr basics_;
  ::google::protobuf::internal::ArenaStringPtr skill_influence_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 production_type_;
  ::google::protobuf::int32 production_;
  ::google::protobuf::int32 output_num_;
  ::google::protobuf::int32 circle_num_;
  ::google::protobuf::int32 finish_num_;
  float speed_;
  ::google::protobuf::int64 timestamp_;
  float ratio_;
  ::google::protobuf::int32 pre_order_;
  ::google::protobuf::int32 next_order_;
  float ratio_stamp_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNavigationState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserNavigationState) */ {
 public:
  UserNavigationState();
  virtual ~UserNavigationState();

  UserNavigationState(const UserNavigationState& from);

  inline UserNavigationState& operator=(const UserNavigationState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNavigationState(UserNavigationState&& from) noexcept
    : UserNavigationState() {
    *this = ::std::move(from);
  }

  inline UserNavigationState& operator=(UserNavigationState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNavigationState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNavigationState* internal_default_instance() {
    return reinterpret_cast<const UserNavigationState*>(
               &_UserNavigationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(UserNavigationState* other);
  void Swap(UserNavigationState* other);
  friend void swap(UserNavigationState& a, UserNavigationState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNavigationState* New() const final {
    return CreateMaybeMessage<UserNavigationState>(NULL);
  }

  UserNavigationState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNavigationState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNavigationState& from);
  void MergeFrom(const UserNavigationState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNavigationState* other);
  protected:
  explicit UserNavigationState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes path = 5;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 5;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      ::std::string* path);

  // optional bytes event_pos = 8;
  bool has_event_pos() const;
  void clear_event_pos();
  static const int kEventPosFieldNumber = 8;
  const ::std::string& event_pos() const;
  void set_event_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_event_pos(::std::string&& value);
  #endif
  void set_event_pos(const char* value);
  void set_event_pos(const void* value, size_t size);
  ::std::string* mutable_event_pos();
  ::std::string* release_event_pos();
  void set_allocated_event_pos(::std::string* event_pos);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_event_pos();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_pos(
      ::std::string* event_pos);

  // optional bytes event_data = 9;
  bool has_event_data() const;
  void clear_event_data();
  static const int kEventDataFieldNumber = 9;
  const ::std::string& event_data() const;
  void set_event_data(const ::std::string& value);
  #if LANG_CXX11
  void set_event_data(::std::string&& value);
  #endif
  void set_event_data(const char* value);
  void set_event_data(const void* value, size_t size);
  ::std::string* mutable_event_data();
  ::std::string* release_event_data();
  void set_allocated_event_data(::std::string* event_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_event_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_data(
      ::std::string* event_data);

  // required uint64 origin = 2;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 2;
  ::google::protobuf::uint64 origin() const;
  void set_origin(::google::protobuf::uint64 value);

  // required uint64 destination = 3;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 3;
  ::google::protobuf::uint64 destination() const;
  void set_destination(::google::protobuf::uint64 value);

  // required sfixed64 start_date = 4;
  bool has_start_date() const;
  void clear_start_date();
  static const int kStartDateFieldNumber = 4;
  ::google::protobuf::int64 start_date() const;
  void set_start_date(::google::protobuf::int64 value);

  // optional int32 event_id = 6;
  bool has_event_id() const;
  void clear_event_id();
  static const int kEventIdFieldNumber = 6;
  ::google::protobuf::int32 event_id() const;
  void set_event_id(::google::protobuf::int32 value);

  // optional int32 event_duration = 7;
  bool has_event_duration() const;
  void clear_event_duration();
  static const int kEventDurationFieldNumber = 7;
  ::google::protobuf::int32 event_duration() const;
  void set_event_duration(::google::protobuf::int32 value);

  // optional sfixed64 timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 event_happened_times = 10;
  bool has_event_happened_times() const;
  void clear_event_happened_times();
  static const int kEventHappenedTimesFieldNumber = 10;
  ::google::protobuf::int32 event_happened_times() const;
  void set_event_happened_times(::google::protobuf::int32 value);

  // optional int32 event_state = 12;
  bool has_event_state() const;
  void clear_event_state();
  static const int kEventStateFieldNumber = 12;
  ::google::protobuf::int32 event_state() const;
  void set_event_state(::google::protobuf::int32 value);

  // optional sfixed64 ticket_timestamp = 14;
  bool has_ticket_timestamp() const;
  void clear_ticket_timestamp();
  static const int kTicketTimestampFieldNumber = 14;
  ::google::protobuf::int64 ticket_timestamp() const;
  void set_ticket_timestamp(::google::protobuf::int64 value);

  // optional int32 fast_reach_ticket = 13;
  bool has_fast_reach_ticket() const;
  void clear_fast_reach_ticket();
  static const int kFastReachTicketFieldNumber = 13;
  ::google::protobuf::int32 fast_reach_ticket() const;
  void set_fast_reach_ticket(::google::protobuf::int32 value);

  // optional int32 first_tag = 15;
  bool has_first_tag() const;
  void clear_first_tag();
  static const int kFirstTagFieldNumber = 15;
  ::google::protobuf::int32 first_tag() const;
  void set_first_tag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserNavigationState)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_origin();
  void clear_has_origin();
  void set_has_destination();
  void clear_has_destination();
  void set_has_start_date();
  void clear_has_start_date();
  void set_has_path();
  void clear_has_path();
  void set_has_event_id();
  void clear_has_event_id();
  void set_has_event_state();
  void clear_has_event_state();
  void set_has_event_duration();
  void clear_has_event_duration();
  void set_has_event_pos();
  void clear_has_event_pos();
  void set_has_event_data();
  void clear_has_event_data();
  void set_has_event_happened_times();
  void clear_has_event_happened_times();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_fast_reach_ticket();
  void clear_has_fast_reach_ticket();
  void set_has_ticket_timestamp();
  void clear_has_ticket_timestamp();
  void set_has_first_tag();
  void clear_has_first_tag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr event_pos_;
  ::google::protobuf::internal::ArenaStringPtr event_data_;
  ::google::protobuf::uint64 origin_;
  ::google::protobuf::uint64 destination_;
  ::google::protobuf::int64 start_date_;
  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 event_duration_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 event_happened_times_;
  ::google::protobuf::int32 event_state_;
  ::google::protobuf::int64 ticket_timestamp_;
  ::google::protobuf::int32 fast_reach_ticket_;
  ::google::protobuf::int32 first_tag_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNavigationRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserNavigationRecord) */ {
 public:
  UserNavigationRecord();
  virtual ~UserNavigationRecord();

  UserNavigationRecord(const UserNavigationRecord& from);

  inline UserNavigationRecord& operator=(const UserNavigationRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNavigationRecord(UserNavigationRecord&& from) noexcept
    : UserNavigationRecord() {
    *this = ::std::move(from);
  }

  inline UserNavigationRecord& operator=(UserNavigationRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNavigationRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNavigationRecord* internal_default_instance() {
    return reinterpret_cast<const UserNavigationRecord*>(
               &_UserNavigationRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(UserNavigationRecord* other);
  void Swap(UserNavigationRecord* other);
  friend void swap(UserNavigationRecord& a, UserNavigationRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNavigationRecord* New() const final {
    return CreateMaybeMessage<UserNavigationRecord>(NULL);
  }

  UserNavigationRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNavigationRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNavigationRecord& from);
  void MergeFrom(const UserNavigationRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNavigationRecord* other);
  protected:
  explicit UserNavigationRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required sfixed64 recently_visit_time = 3;
  bool has_recently_visit_time() const;
  void clear_recently_visit_time();
  static const int kRecentlyVisitTimeFieldNumber = 3;
  ::google::protobuf::int64 recently_visit_time() const;
  void set_recently_visit_time(::google::protobuf::int64 value);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserNavigationRecord)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_recently_visit_time();
  void clear_has_recently_visit_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 recently_visit_time_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserExploreState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserExploreState) */ {
 public:
  UserExploreState();
  virtual ~UserExploreState();

  UserExploreState(const UserExploreState& from);

  inline UserExploreState& operator=(const UserExploreState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserExploreState(UserExploreState&& from) noexcept
    : UserExploreState() {
    *this = ::std::move(from);
  }

  inline UserExploreState& operator=(UserExploreState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserExploreState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserExploreState* internal_default_instance() {
    return reinterpret_cast<const UserExploreState*>(
               &_UserExploreState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(UserExploreState* other);
  void Swap(UserExploreState* other);
  friend void swap(UserExploreState& a, UserExploreState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserExploreState* New() const final {
    return CreateMaybeMessage<UserExploreState>(NULL);
  }

  UserExploreState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserExploreState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserExploreState& from);
  void MergeFrom(const UserExploreState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserExploreState* other);
  protected:
  explicit UserExploreState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  ::google::protobuf::int32 location() const;
  void set_location(::google::protobuf::int32 value);

  // required int32 step = 3;
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 3;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // required int32 pos_x = 4;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 4;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // required int32 pos_y = 5;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 5;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserExploreState)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_location();
  void clear_has_location();
  void set_has_step();
  void clear_has_step();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 location_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserExploreStage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserExploreStage) */ {
 public:
  UserExploreStage();
  virtual ~UserExploreStage();

  UserExploreStage(const UserExploreStage& from);

  inline UserExploreStage& operator=(const UserExploreStage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserExploreStage(UserExploreStage&& from) noexcept
    : UserExploreStage() {
    *this = ::std::move(from);
  }

  inline UserExploreStage& operator=(UserExploreStage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserExploreStage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserExploreStage* internal_default_instance() {
    return reinterpret_cast<const UserExploreStage*>(
               &_UserExploreStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(UserExploreStage* other);
  void Swap(UserExploreStage* other);
  friend void swap(UserExploreStage& a, UserExploreStage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserExploreStage* New() const final {
    return CreateMaybeMessage<UserExploreStage>(NULL);
  }

  UserExploreStage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserExploreStage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserExploreStage& from);
  void MergeFrom(const UserExploreStage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserExploreStage* other);
  protected:
  explicit UserExploreStage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes fog = 3;
  bool has_fog() const;
  void clear_fog();
  static const int kFogFieldNumber = 3;
  const ::std::string& fog() const;
  void set_fog(const ::std::string& value);
  #if LANG_CXX11
  void set_fog(::std::string&& value);
  #endif
  void set_fog(const char* value);
  void set_fog(const void* value, size_t size);
  ::std::string* mutable_fog();
  ::std::string* release_fog();
  void set_allocated_fog(::std::string* fog);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_fog();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fog(
      ::std::string* fog);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserExploreStage)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_fog();
  void clear_has_fog();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr fog_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserExploreRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserExploreRecord) */ {
 public:
  UserExploreRecord();
  virtual ~UserExploreRecord();

  UserExploreRecord(const UserExploreRecord& from);

  inline UserExploreRecord& operator=(const UserExploreRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserExploreRecord(UserExploreRecord&& from) noexcept
    : UserExploreRecord() {
    *this = ::std::move(from);
  }

  inline UserExploreRecord& operator=(UserExploreRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserExploreRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserExploreRecord* internal_default_instance() {
    return reinterpret_cast<const UserExploreRecord*>(
               &_UserExploreRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(UserExploreRecord* other);
  void Swap(UserExploreRecord* other);
  friend void swap(UserExploreRecord& a, UserExploreRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserExploreRecord* New() const final {
    return CreateMaybeMessage<UserExploreRecord>(NULL);
  }

  UserExploreRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserExploreRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserExploreRecord& from);
  void MergeFrom(const UserExploreRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserExploreRecord* other);
  protected:
  explicit UserExploreRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes content = 5;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 object = 4;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 4;
  ::google::protobuf::int32 object() const;
  void set_object(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserExploreRecord)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_object();
  void clear_has_object();
  void set_has_content();
  void clear_has_content();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 object_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserExploreEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserExploreEvent) */ {
 public:
  UserExploreEvent();
  virtual ~UserExploreEvent();

  UserExploreEvent(const UserExploreEvent& from);

  inline UserExploreEvent& operator=(const UserExploreEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserExploreEvent(UserExploreEvent&& from) noexcept
    : UserExploreEvent() {
    *this = ::std::move(from);
  }

  inline UserExploreEvent& operator=(UserExploreEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserExploreEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserExploreEvent* internal_default_instance() {
    return reinterpret_cast<const UserExploreEvent*>(
               &_UserExploreEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(UserExploreEvent* other);
  void Swap(UserExploreEvent* other);
  friend void swap(UserExploreEvent& a, UserExploreEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserExploreEvent* New() const final {
    return CreateMaybeMessage<UserExploreEvent>(NULL);
  }

  UserExploreEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserExploreEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserExploreEvent& from);
  void MergeFrom(const UserExploreEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserExploreEvent* other);
  protected:
  explicit UserExploreEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes content = 10;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 10;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 typeid = 5;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 5;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 locale_type = 6;
  bool has_locale_type() const;
  void clear_locale_type();
  static const int kLocaleTypeFieldNumber = 6;
  ::google::protobuf::int32 locale_type() const;
  void set_locale_type(::google::protobuf::int32 value);

  // required int32 locale = 7;
  bool has_locale() const;
  void clear_locale();
  static const int kLocaleFieldNumber = 7;
  ::google::protobuf::int32 locale() const;
  void set_locale(::google::protobuf::int32 value);

  // required int32 pos_x = 8;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 8;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // required int32 pos_y = 9;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 9;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required sfixed64 deadline = 12;
  bool has_deadline() const;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 12;
  ::google::protobuf::int64 deadline() const;
  void set_deadline(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserExploreEvent)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_type();
  void clear_has_type();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_locale_type();
  void clear_has_locale_type();
  void set_has_locale();
  void clear_has_locale();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();
  void set_has_content();
  void clear_has_content();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_deadline();
  void clear_has_deadline();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 locale_type_;
  ::google::protobuf::int32 locale_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 deadline_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShoppingRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ShoppingRecord) */ {
 public:
  ShoppingRecord();
  virtual ~ShoppingRecord();

  ShoppingRecord(const ShoppingRecord& from);

  inline ShoppingRecord& operator=(const ShoppingRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShoppingRecord(ShoppingRecord&& from) noexcept
    : ShoppingRecord() {
    *this = ::std::move(from);
  }

  inline ShoppingRecord& operator=(ShoppingRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShoppingRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShoppingRecord* internal_default_instance() {
    return reinterpret_cast<const ShoppingRecord*>(
               &_ShoppingRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(ShoppingRecord* other);
  void Swap(ShoppingRecord* other);
  friend void swap(ShoppingRecord& a, ShoppingRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShoppingRecord* New() const final {
    return CreateMaybeMessage<ShoppingRecord>(NULL);
  }

  ShoppingRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShoppingRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShoppingRecord& from);
  void MergeFrom(const ShoppingRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShoppingRecord* other);
  protected:
  explicit ShoppingRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 goodsid = 3;
  bool has_goodsid() const;
  void clear_goodsid();
  static const int kGoodsidFieldNumber = 3;
  ::google::protobuf::int32 goodsid() const;
  void set_goodsid(::google::protobuf::int32 value);

  // required sfixed64 begin_time = 4;
  bool has_begin_time() const;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 4;
  ::google::protobuf::int64 begin_time() const;
  void set_begin_time(::google::protobuf::int64 value);

  // required sfixed64 end_time = 5;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  ::google::protobuf::int64 end_time() const;
  void set_end_time(::google::protobuf::int64 value);

  // required int32 goodsnum = 6;
  bool has_goodsnum() const;
  void clear_goodsnum();
  static const int kGoodsnumFieldNumber = 6;
  ::google::protobuf::int32 goodsnum() const;
  void set_goodsnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ShoppingRecord)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_goodsid();
  void clear_has_goodsid();
  void set_has_begin_time();
  void clear_has_begin_time();
  void set_has_end_time();
  void clear_has_end_time();
  void set_has_goodsnum();
  void clear_has_goodsnum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 goodsid_;
  ::google::protobuf::int64 begin_time_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::int32 goodsnum_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserWanted : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserWanted) */ {
 public:
  UserWanted();
  virtual ~UserWanted();

  UserWanted(const UserWanted& from);

  inline UserWanted& operator=(const UserWanted& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserWanted(UserWanted&& from) noexcept
    : UserWanted() {
    *this = ::std::move(from);
  }

  inline UserWanted& operator=(UserWanted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserWanted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserWanted* internal_default_instance() {
    return reinterpret_cast<const UserWanted*>(
               &_UserWanted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(UserWanted* other);
  void Swap(UserWanted* other);
  friend void swap(UserWanted& a, UserWanted& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserWanted* New() const final {
    return CreateMaybeMessage<UserWanted>(NULL);
  }

  UserWanted* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserWanted>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserWanted& from);
  void MergeFrom(const UserWanted& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserWanted* other);
  protected:
  explicit UserWanted(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 typeid = 3;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 3;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 place = 5;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 5;
  ::google::protobuf::int32 place() const;
  void set_place(::google::protobuf::int32 value);

  // required int32 pos_type = 6;
  bool has_pos_type() const;
  void clear_pos_type();
  static const int kPosTypeFieldNumber = 6;
  ::google::protobuf::int32 pos_type() const;
  void set_pos_type(::google::protobuf::int32 value);

  // required int32 pos_x = 7;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 7;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // required sfixed64 optime = 9;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 9;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // required int32 pos_y = 8;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 8;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserWanted)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_state();
  void clear_has_state();
  void set_has_place();
  void clear_has_place();
  void set_has_pos_type();
  void clear_has_pos_type();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 place_;
  ::google::protobuf::int32 pos_type_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int64 optime_;
  ::google::protobuf::int32 pos_y_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserTask) */ {
 public:
  UserTask();
  virtual ~UserTask();

  UserTask(const UserTask& from);

  inline UserTask& operator=(const UserTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTask(UserTask&& from) noexcept
    : UserTask() {
    *this = ::std::move(from);
  }

  inline UserTask& operator=(UserTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTask* internal_default_instance() {
    return reinterpret_cast<const UserTask*>(
               &_UserTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(UserTask* other);
  void Swap(UserTask* other);
  friend void swap(UserTask& a, UserTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTask* New() const final {
    return CreateMaybeMessage<UserTask>(NULL);
  }

  UserTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTask& from);
  void MergeFrom(const UserTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTask* other);
  protected:
  explicit UserTask(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes finish_value = 5;
  bool has_finish_value() const;
  void clear_finish_value();
  static const int kFinishValueFieldNumber = 5;
  const ::std::string& finish_value() const;
  void set_finish_value(const ::std::string& value);
  #if LANG_CXX11
  void set_finish_value(::std::string&& value);
  #endif
  void set_finish_value(const char* value);
  void set_finish_value(const void* value, size_t size);
  ::std::string* mutable_finish_value();
  ::std::string* release_finish_value();
  void set_allocated_finish_value(::std::string* finish_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_finish_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_finish_value(
      ::std::string* finish_value);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 step = 4;
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 4;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserTask)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_step();
  void clear_has_step();
  void set_has_finish_value();
  void clear_has_finish_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr finish_value_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 step_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserNpc) */ {
 public:
  UserNpc();
  virtual ~UserNpc();

  UserNpc(const UserNpc& from);

  inline UserNpc& operator=(const UserNpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNpc(UserNpc&& from) noexcept
    : UserNpc() {
    *this = ::std::move(from);
  }

  inline UserNpc& operator=(UserNpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserNpc* internal_default_instance() {
    return reinterpret_cast<const UserNpc*>(
               &_UserNpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(UserNpc* other);
  void Swap(UserNpc* other);
  friend void swap(UserNpc& a, UserNpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNpc* New() const final {
    return CreateMaybeMessage<UserNpc>(NULL);
  }

  UserNpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserNpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserNpc& from);
  void MergeFrom(const UserNpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNpc* other);
  protected:
  explicit UserNpc(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 place = 5;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 5;
  ::google::protobuf::int32 place() const;
  void set_place(::google::protobuf::int32 value);

  // required int32 pos_type = 6;
  bool has_pos_type() const;
  void clear_pos_type();
  static const int kPosTypeFieldNumber = 6;
  ::google::protobuf::int32 pos_type() const;
  void set_pos_type(::google::protobuf::int32 value);

  // required int32 pos_x = 7;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 7;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // required int32 pos_y = 8;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 8;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserNpc)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_place();
  void clear_has_place();
  void set_has_pos_type();
  void clear_has_pos_type();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 place_;
  ::google::protobuf::int32 pos_type_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserManual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserManual) */ {
 public:
  UserManual();
  virtual ~UserManual();

  UserManual(const UserManual& from);

  inline UserManual& operator=(const UserManual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserManual(UserManual&& from) noexcept
    : UserManual() {
    *this = ::std::move(from);
  }

  inline UserManual& operator=(UserManual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserManual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserManual* internal_default_instance() {
    return reinterpret_cast<const UserManual*>(
               &_UserManual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(UserManual* other);
  void Swap(UserManual* other);
  friend void swap(UserManual& a, UserManual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserManual* New() const final {
    return CreateMaybeMessage<UserManual>(NULL);
  }

  UserManual* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserManual>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserManual& from);
  void MergeFrom(const UserManual& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserManual* other);
  protected:
  explicit UserManual(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required sfixed64 optime = 3;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 3;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // required int32 typeid = 2;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 2;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserManual)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 optime_;
  ::google::protobuf::int32 typeid__;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserState) */ {
 public:
  UserState();
  virtual ~UserState();

  UserState(const UserState& from);

  inline UserState& operator=(const UserState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserState(UserState&& from) noexcept
    : UserState() {
    *this = ::std::move(from);
  }

  inline UserState& operator=(UserState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserState* internal_default_instance() {
    return reinterpret_cast<const UserState*>(
               &_UserState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(UserState* other);
  void Swap(UserState* other);
  friend void swap(UserState& a, UserState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserState* New() const final {
    return CreateMaybeMessage<UserState>(NULL);
  }

  UserState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserState& from);
  void MergeFrom(const UserState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserState* other);
  protected:
  explicit UserState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes guide_val = 2;
  bool has_guide_val() const;
  void clear_guide_val();
  static const int kGuideValFieldNumber = 2;
  const ::std::string& guide_val() const;
  void set_guide_val(const ::std::string& value);
  #if LANG_CXX11
  void set_guide_val(::std::string&& value);
  #endif
  void set_guide_val(const char* value);
  void set_guide_val(const void* value, size_t size);
  ::std::string* mutable_guide_val();
  ::std::string* release_guide_val();
  void set_allocated_guide_val(::std::string* guide_val);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_guide_val();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_guide_val(
      ::std::string* guide_val);

  // required sfixed64 tab_time = 3;
  bool has_tab_time() const;
  void clear_tab_time();
  static const int kTabTimeFieldNumber = 3;
  ::google::protobuf::int64 tab_time() const;
  void set_tab_time(::google::protobuf::int64 value);

  // required int32 gold_lottery_times_once = 4;
  bool has_gold_lottery_times_once() const;
  void clear_gold_lottery_times_once();
  static const int kGoldLotteryTimesOnceFieldNumber = 4;
  ::google::protobuf::int32 gold_lottery_times_once() const;
  void set_gold_lottery_times_once(::google::protobuf::int32 value);

  // required int32 diamond_lottery_times_once = 5;
  bool has_diamond_lottery_times_once() const;
  void clear_diamond_lottery_times_once();
  static const int kDiamondLotteryTimesOnceFieldNumber = 5;
  ::google::protobuf::int32 diamond_lottery_times_once() const;
  void set_diamond_lottery_times_once(::google::protobuf::int32 value);

  // required int32 gold_lottery_times_ten = 6;
  bool has_gold_lottery_times_ten() const;
  void clear_gold_lottery_times_ten();
  static const int kGoldLotteryTimesTenFieldNumber = 6;
  ::google::protobuf::int32 gold_lottery_times_ten() const;
  void set_gold_lottery_times_ten(::google::protobuf::int32 value);

  // required int32 diamond_lottery_times_ten = 7;
  bool has_diamond_lottery_times_ten() const;
  void clear_diamond_lottery_times_ten();
  static const int kDiamondLotteryTimesTenFieldNumber = 7;
  ::google::protobuf::int32 diamond_lottery_times_ten() const;
  void set_diamond_lottery_times_ten(::google::protobuf::int32 value);

  // required sfixed64 daily_refresh_time = 8;
  bool has_daily_refresh_time() const;
  void clear_daily_refresh_time();
  static const int kDailyRefreshTimeFieldNumber = 8;
  ::google::protobuf::int64 daily_refresh_time() const;
  void set_daily_refresh_time(::google::protobuf::int64 value);

  // optional int32 daily_lottery_times = 9;
  bool has_daily_lottery_times() const;
  void clear_daily_lottery_times();
  static const int kDailyLotteryTimesFieldNumber = 9;
  ::google::protobuf::int32 daily_lottery_times() const;
  void set_daily_lottery_times(::google::protobuf::int32 value);

  // optional int32 daily_occupy_monster_ship = 10;
  bool has_daily_occupy_monster_ship() const;
  void clear_daily_occupy_monster_ship();
  static const int kDailyOccupyMonsterShipFieldNumber = 10;
  ::google::protobuf::int32 daily_occupy_monster_ship() const;
  void set_daily_occupy_monster_ship(::google::protobuf::int32 value);

  // optional int32 daily_occupy_player_ship = 11;
  bool has_daily_occupy_player_ship() const;
  void clear_daily_occupy_player_ship();
  static const int kDailyOccupyPlayerShipFieldNumber = 11;
  ::google::protobuf::int32 daily_occupy_player_ship() const;
  void set_daily_occupy_player_ship(::google::protobuf::int32 value);

  // optional int32 daily_occupy_special_ship = 12;
  bool has_daily_occupy_special_ship() const;
  void clear_daily_occupy_special_ship();
  static const int kDailyOccupySpecialShipFieldNumber = 12;
  ::google::protobuf::int32 daily_occupy_special_ship() const;
  void set_daily_occupy_special_ship(::google::protobuf::int32 value);

  // optional int32 daily_buy_vitality_times = 13;
  bool has_daily_buy_vitality_times() const;
  void clear_daily_buy_vitality_times();
  static const int kDailyBuyVitalityTimesFieldNumber = 13;
  ::google::protobuf::int32 daily_buy_vitality_times() const;
  void set_daily_buy_vitality_times(::google::protobuf::int32 value);

  // optional int32 daily_single_ranking_times = 14;
  bool has_daily_single_ranking_times() const;
  void clear_daily_single_ranking_times();
  static const int kDailySingleRankingTimesFieldNumber = 14;
  ::google::protobuf::int32 daily_single_ranking_times() const;
  void set_daily_single_ranking_times(::google::protobuf::int32 value);

  // optional sfixed64 easter_egg_refresh_time = 16;
  bool has_easter_egg_refresh_time() const;
  void clear_easter_egg_refresh_time();
  static const int kEasterEggRefreshTimeFieldNumber = 16;
  ::google::protobuf::int64 easter_egg_refresh_time() const;
  void set_easter_egg_refresh_time(::google::protobuf::int64 value);

  // optional sfixed64 login_time = 17;
  bool has_login_time() const;
  void clear_login_time();
  static const int kLoginTimeFieldNumber = 17;
  ::google::protobuf::int64 login_time() const;
  void set_login_time(::google::protobuf::int64 value);

  // optional int32 daily_multiple_ranking_times = 15;
  bool has_daily_multiple_ranking_times() const;
  void clear_daily_multiple_ranking_times();
  static const int kDailyMultipleRankingTimesFieldNumber = 15;
  ::google::protobuf::int32 daily_multiple_ranking_times() const;
  void set_daily_multiple_ranking_times(::google::protobuf::int32 value);

  // optional int32 repeat_task_refresh_times = 20;
  bool has_repeat_task_refresh_times() const;
  void clear_repeat_task_refresh_times();
  static const int kRepeatTaskRefreshTimesFieldNumber = 20;
  ::google::protobuf::int32 repeat_task_refresh_times() const;
  void set_repeat_task_refresh_times(::google::protobuf::int32 value);

  // optional sfixed64 logout_time = 18;
  bool has_logout_time() const;
  void clear_logout_time();
  static const int kLogoutTimeFieldNumber = 18;
  ::google::protobuf::int64 logout_time() const;
  void set_logout_time(::google::protobuf::int64 value);

  // optional sfixed64 heartbeat_time = 19;
  bool has_heartbeat_time() const;
  void clear_heartbeat_time();
  static const int kHeartbeatTimeFieldNumber = 19;
  ::google::protobuf::int64 heartbeat_time() const;
  void set_heartbeat_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserState)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_guide_val();
  void clear_has_guide_val();
  void set_has_tab_time();
  void clear_has_tab_time();
  void set_has_gold_lottery_times_once();
  void clear_has_gold_lottery_times_once();
  void set_has_diamond_lottery_times_once();
  void clear_has_diamond_lottery_times_once();
  void set_has_gold_lottery_times_ten();
  void clear_has_gold_lottery_times_ten();
  void set_has_diamond_lottery_times_ten();
  void clear_has_diamond_lottery_times_ten();
  void set_has_daily_refresh_time();
  void clear_has_daily_refresh_time();
  void set_has_daily_lottery_times();
  void clear_has_daily_lottery_times();
  void set_has_daily_occupy_monster_ship();
  void clear_has_daily_occupy_monster_ship();
  void set_has_daily_occupy_player_ship();
  void clear_has_daily_occupy_player_ship();
  void set_has_daily_occupy_special_ship();
  void clear_has_daily_occupy_special_ship();
  void set_has_daily_buy_vitality_times();
  void clear_has_daily_buy_vitality_times();
  void set_has_daily_single_ranking_times();
  void clear_has_daily_single_ranking_times();
  void set_has_daily_multiple_ranking_times();
  void clear_has_daily_multiple_ranking_times();
  void set_has_easter_egg_refresh_time();
  void clear_has_easter_egg_refresh_time();
  void set_has_login_time();
  void clear_has_login_time();
  void set_has_logout_time();
  void clear_has_logout_time();
  void set_has_heartbeat_time();
  void clear_has_heartbeat_time();
  void set_has_repeat_task_refresh_times();
  void clear_has_repeat_task_refresh_times();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr guide_val_;
  ::google::protobuf::int64 tab_time_;
  ::google::protobuf::int32 gold_lottery_times_once_;
  ::google::protobuf::int32 diamond_lottery_times_once_;
  ::google::protobuf::int32 gold_lottery_times_ten_;
  ::google::protobuf::int32 diamond_lottery_times_ten_;
  ::google::protobuf::int64 daily_refresh_time_;
  ::google::protobuf::int32 daily_lottery_times_;
  ::google::protobuf::int32 daily_occupy_monster_ship_;
  ::google::protobuf::int32 daily_occupy_player_ship_;
  ::google::protobuf::int32 daily_occupy_special_ship_;
  ::google::protobuf::int32 daily_buy_vitality_times_;
  ::google::protobuf::int32 daily_single_ranking_times_;
  ::google::protobuf::int64 easter_egg_refresh_time_;
  ::google::protobuf::int64 login_time_;
  ::google::protobuf::int32 daily_multiple_ranking_times_;
  ::google::protobuf::int32 repeat_task_refresh_times_;
  ::google::protobuf::int64 logout_time_;
  ::google::protobuf::int64 heartbeat_time_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserRegion) */ {
 public:
  UserRegion();
  virtual ~UserRegion();

  UserRegion(const UserRegion& from);

  inline UserRegion& operator=(const UserRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegion(UserRegion&& from) noexcept
    : UserRegion() {
    *this = ::std::move(from);
  }

  inline UserRegion& operator=(UserRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegion* internal_default_instance() {
    return reinterpret_cast<const UserRegion*>(
               &_UserRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(UserRegion* other);
  void Swap(UserRegion* other);
  friend void swap(UserRegion& a, UserRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegion* New() const final {
    return CreateMaybeMessage<UserRegion>(NULL);
  }

  UserRegion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegion& from);
  void MergeFrom(const UserRegion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegion* other);
  protected:
  explicit UserRegion(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // optional bytes map_data = 5;
  bool has_map_data() const;
  void clear_map_data();
  static const int kMapDataFieldNumber = 5;
  const ::std::string& map_data() const;
  void set_map_data(const ::std::string& value);
  #if LANG_CXX11
  void set_map_data(::std::string&& value);
  #endif
  void set_map_data(const char* value);
  void set_map_data(const void* value, size_t size);
  ::std::string* mutable_map_data();
  ::std::string* release_map_data();
  void set_allocated_map_data(::std::string* map_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_map_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_data(
      ::std::string* map_data);

  // optional bytes unlock_room = 6;
  bool has_unlock_room() const;
  void clear_unlock_room();
  static const int kUnlockRoomFieldNumber = 6;
  const ::std::string& unlock_room() const;
  void set_unlock_room(const ::std::string& value);
  #if LANG_CXX11
  void set_unlock_room(::std::string&& value);
  #endif
  void set_unlock_room(const char* value);
  void set_unlock_room(const void* value, size_t size);
  ::std::string* mutable_unlock_room();
  ::std::string* release_unlock_room();
  void set_allocated_unlock_room(::std::string* unlock_room);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unlock_room();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unlock_room(
      ::std::string* unlock_room);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 fast_finish_times = 4;
  bool has_fast_finish_times() const;
  void clear_fast_finish_times();
  static const int kFastFinishTimesFieldNumber = 4;
  ::google::protobuf::int32 fast_finish_times() const;
  void set_fast_finish_times(::google::protobuf::int32 value);

  // optional sfixed64 first_reach_time = 7;
  bool has_first_reach_time() const;
  void clear_first_reach_time();
  static const int kFirstReachTimeFieldNumber = 7;
  ::google::protobuf::int64 first_reach_time() const;
  void set_first_reach_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserRegion)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_fast_finish_times();
  void clear_has_fast_finish_times();
  void set_has_map_data();
  void clear_has_map_data();
  void set_has_unlock_room();
  void clear_has_unlock_room();
  void set_has_first_reach_time();
  void clear_has_first_reach_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr map_data_;
  ::google::protobuf::internal::ArenaStringPtr unlock_room_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 fast_finish_times_;
  ::google::protobuf::int64 first_reach_time_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSystemTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserSystemTask) */ {
 public:
  UserSystemTask();
  virtual ~UserSystemTask();

  UserSystemTask(const UserSystemTask& from);

  inline UserSystemTask& operator=(const UserSystemTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSystemTask(UserSystemTask&& from) noexcept
    : UserSystemTask() {
    *this = ::std::move(from);
  }

  inline UserSystemTask& operator=(UserSystemTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSystemTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSystemTask* internal_default_instance() {
    return reinterpret_cast<const UserSystemTask*>(
               &_UserSystemTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(UserSystemTask* other);
  void Swap(UserSystemTask* other);
  friend void swap(UserSystemTask& a, UserSystemTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSystemTask* New() const final {
    return CreateMaybeMessage<UserSystemTask>(NULL);
  }

  UserSystemTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSystemTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSystemTask& from);
  void MergeFrom(const UserSystemTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSystemTask* other);
  protected:
  explicit UserSystemTask(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required sfixed64 deadline = 5;
  bool has_deadline() const;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 5;
  ::google::protobuf::int64 deadline() const;
  void set_deadline(::google::protobuf::int64 value);

  // required sfixed64 timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 finish_value = 4;
  bool has_finish_value() const;
  void clear_finish_value();
  static const int kFinishValueFieldNumber = 4;
  ::google::protobuf::int32 finish_value() const;
  void set_finish_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserSystemTask)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_finish_value();
  void clear_has_finish_value();
  void set_has_deadline();
  void clear_has_deadline();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 deadline_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 finish_value_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserShoppingGoods : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserShoppingGoods) */ {
 public:
  UserShoppingGoods();
  virtual ~UserShoppingGoods();

  UserShoppingGoods(const UserShoppingGoods& from);

  inline UserShoppingGoods& operator=(const UserShoppingGoods& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserShoppingGoods(UserShoppingGoods&& from) noexcept
    : UserShoppingGoods() {
    *this = ::std::move(from);
  }

  inline UserShoppingGoods& operator=(UserShoppingGoods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserShoppingGoods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserShoppingGoods* internal_default_instance() {
    return reinterpret_cast<const UserShoppingGoods*>(
               &_UserShoppingGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(UserShoppingGoods* other);
  void Swap(UserShoppingGoods* other);
  friend void swap(UserShoppingGoods& a, UserShoppingGoods& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserShoppingGoods* New() const final {
    return CreateMaybeMessage<UserShoppingGoods>(NULL);
  }

  UserShoppingGoods* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserShoppingGoods>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserShoppingGoods& from);
  void MergeFrom(const UserShoppingGoods& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserShoppingGoods* other);
  protected:
  explicit UserShoppingGoods(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int64 store = 2;
  bool has_store() const;
  void clear_store();
  static const int kStoreFieldNumber = 2;
  ::google::protobuf::int64 store() const;
  void set_store(::google::protobuf::int64 value);

  // required int32 goods_id = 3;
  bool has_goods_id() const;
  void clear_goods_id();
  static const int kGoodsIdFieldNumber = 3;
  ::google::protobuf::int32 goods_id() const;
  void set_goods_id(::google::protobuf::int32 value);

  // required int32 goods_typeid = 4;
  bool has_goods_typeid() const;
  void clear_goods_typeid();
  static const int kGoodsTypeidFieldNumber = 4;
  ::google::protobuf::int32 goods_typeid() const;
  void set_goods_typeid(::google::protobuf::int32 value);

  // required int32 state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 purchase_times = 6;
  bool has_purchase_times() const;
  void clear_purchase_times();
  static const int kPurchaseTimesFieldNumber = 6;
  ::google::protobuf::int32 purchase_times() const;
  void set_purchase_times(::google::protobuf::int32 value);

  // required float discount = 7;
  bool has_discount() const;
  void clear_discount();
  static const int kDiscountFieldNumber = 7;
  float discount() const;
  void set_discount(float value);

  // required float price_fluctuation = 8;
  bool has_price_fluctuation() const;
  void clear_price_fluctuation();
  static const int kPriceFluctuationFieldNumber = 8;
  float price_fluctuation() const;
  void set_price_fluctuation(float value);

  // required sfixed64 timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 duration = 10;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 10;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserShoppingGoods)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_store();
  void clear_has_store();
  void set_has_goods_id();
  void clear_has_goods_id();
  void set_has_goods_typeid();
  void clear_has_goods_typeid();
  void set_has_state();
  void clear_has_state();
  void set_has_purchase_times();
  void clear_has_purchase_times();
  void set_has_discount();
  void clear_has_discount();
  void set_has_price_fluctuation();
  void clear_has_price_fluctuation();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_duration();
  void clear_has_duration();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 store_;
  ::google::protobuf::int32 goods_id_;
  ::google::protobuf::int32 goods_typeid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 purchase_times_;
  float discount_;
  float price_fluctuation_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 duration_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserShoppingMall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserShoppingMall) */ {
 public:
  UserShoppingMall();
  virtual ~UserShoppingMall();

  UserShoppingMall(const UserShoppingMall& from);

  inline UserShoppingMall& operator=(const UserShoppingMall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserShoppingMall(UserShoppingMall&& from) noexcept
    : UserShoppingMall() {
    *this = ::std::move(from);
  }

  inline UserShoppingMall& operator=(UserShoppingMall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserShoppingMall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserShoppingMall* internal_default_instance() {
    return reinterpret_cast<const UserShoppingMall*>(
               &_UserShoppingMall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(UserShoppingMall* other);
  void Swap(UserShoppingMall* other);
  friend void swap(UserShoppingMall& a, UserShoppingMall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserShoppingMall* New() const final {
    return CreateMaybeMessage<UserShoppingMall>(NULL);
  }

  UserShoppingMall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserShoppingMall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserShoppingMall& from);
  void MergeFrom(const UserShoppingMall& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserShoppingMall* other);
  protected:
  explicit UserShoppingMall(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int64 tag = 4;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 4;
  ::google::protobuf::int64 tag() const;
  void set_tag(::google::protobuf::int64 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 duration = 7;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 7;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserShoppingMall)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_tag();
  void clear_has_tag();
  void set_has_state();
  void clear_has_state();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_duration();
  void clear_has_duration();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 tag_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 duration_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserShipModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserShipModel) */ {
 public:
  UserShipModel();
  virtual ~UserShipModel();

  UserShipModel(const UserShipModel& from);

  inline UserShipModel& operator=(const UserShipModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserShipModel(UserShipModel&& from) noexcept
    : UserShipModel() {
    *this = ::std::move(from);
  }

  inline UserShipModel& operator=(UserShipModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserShipModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserShipModel* internal_default_instance() {
    return reinterpret_cast<const UserShipModel*>(
               &_UserShipModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void UnsafeArenaSwap(UserShipModel* other);
  void Swap(UserShipModel* other);
  friend void swap(UserShipModel& a, UserShipModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserShipModel* New() const final {
    return CreateMaybeMessage<UserShipModel>(NULL);
  }

  UserShipModel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserShipModel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserShipModel& from);
  void MergeFrom(const UserShipModel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserShipModel* other);
  protected:
  explicit UserShipModel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 ship_model = 2;
  bool has_ship_model() const;
  void clear_ship_model();
  static const int kShipModelFieldNumber = 2;
  ::google::protobuf::int32 ship_model() const;
  void set_ship_model(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required sfixed64 optime = 4;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 4;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserShipModel)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_ship_model();
  void clear_has_ship_model();
  void set_has_state();
  void clear_has_state();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 ship_model_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 optime_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserArchive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserArchive) */ {
 public:
  UserArchive();
  virtual ~UserArchive();

  UserArchive(const UserArchive& from);

  inline UserArchive& operator=(const UserArchive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserArchive(UserArchive&& from) noexcept
    : UserArchive() {
    *this = ::std::move(from);
  }

  inline UserArchive& operator=(UserArchive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserArchive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserArchive* internal_default_instance() {
    return reinterpret_cast<const UserArchive*>(
               &_UserArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void UnsafeArenaSwap(UserArchive* other);
  void Swap(UserArchive* other);
  friend void swap(UserArchive& a, UserArchive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserArchive* New() const final {
    return CreateMaybeMessage<UserArchive>(NULL);
  }

  UserArchive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserArchive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserArchive& from);
  void MergeFrom(const UserArchive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserArchive* other);
  protected:
  explicit UserArchive(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes ship_tiles = 6;
  bool has_ship_tiles() const;
  void clear_ship_tiles();
  static const int kShipTilesFieldNumber = 6;
  const ::std::string& ship_tiles() const;
  void set_ship_tiles(const ::std::string& value);
  #if LANG_CXX11
  void set_ship_tiles(::std::string&& value);
  #endif
  void set_ship_tiles(const char* value);
  void set_ship_tiles(const void* value, size_t size);
  ::std::string* mutable_ship_tiles();
  ::std::string* release_ship_tiles();
  void set_allocated_ship_tiles(::std::string* ship_tiles);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ship_tiles();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ship_tiles(
      ::std::string* ship_tiles);

  // required bytes facilitys = 7;
  bool has_facilitys() const;
  void clear_facilitys();
  static const int kFacilitysFieldNumber = 7;
  const ::std::string& facilitys() const;
  void set_facilitys(const ::std::string& value);
  #if LANG_CXX11
  void set_facilitys(::std::string&& value);
  #endif
  void set_facilitys(const char* value);
  void set_facilitys(const void* value, size_t size);
  ::std::string* mutable_facilitys();
  ::std::string* release_facilitys();
  void set_allocated_facilitys(::std::string* facilitys);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_facilitys();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_facilitys(
      ::std::string* facilitys);

  // required bytes devices = 8;
  bool has_devices() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 8;
  const ::std::string& devices() const;
  void set_devices(const ::std::string& value);
  #if LANG_CXX11
  void set_devices(::std::string&& value);
  #endif
  void set_devices(const char* value);
  void set_devices(const void* value, size_t size);
  ::std::string* mutable_devices();
  ::std::string* release_devices();
  void set_allocated_devices(::std::string* devices);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_devices();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_devices(
      ::std::string* devices);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 ship_model = 5;
  bool has_ship_model() const;
  void clear_ship_model();
  static const int kShipModelFieldNumber = 5;
  ::google::protobuf::int32 ship_model() const;
  void set_ship_model(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserArchive)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_name();
  void clear_has_name();
  void set_has_ship_model();
  void clear_has_ship_model();
  void set_has_ship_tiles();
  void clear_has_ship_tiles();
  void set_has_facilitys();
  void clear_has_facilitys();
  void set_has_devices();
  void clear_has_devices();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ship_tiles_;
  ::google::protobuf::internal::ArenaStringPtr facilitys_;
  ::google::protobuf::internal::ArenaStringPtr devices_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 ship_model_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserFormula : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserFormula) */ {
 public:
  UserFormula();
  virtual ~UserFormula();

  UserFormula(const UserFormula& from);

  inline UserFormula& operator=(const UserFormula& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserFormula(UserFormula&& from) noexcept
    : UserFormula() {
    *this = ::std::move(from);
  }

  inline UserFormula& operator=(UserFormula&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFormula& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFormula* internal_default_instance() {
    return reinterpret_cast<const UserFormula*>(
               &_UserFormula_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void UnsafeArenaSwap(UserFormula* other);
  void Swap(UserFormula* other);
  friend void swap(UserFormula& a, UserFormula& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserFormula* New() const final {
    return CreateMaybeMessage<UserFormula>(NULL);
  }

  UserFormula* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserFormula>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserFormula& from);
  void MergeFrom(const UserFormula& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFormula* other);
  protected:
  explicit UserFormula(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 formula_id = 2;
  bool has_formula_id() const;
  void clear_formula_id();
  static const int kFormulaIdFieldNumber = 2;
  ::google::protobuf::int32 formula_id() const;
  void set_formula_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserFormula)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_formula_id();
  void clear_has_formula_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 formula_id_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAchievement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserAchievement) */ {
 public:
  UserAchievement();
  virtual ~UserAchievement();

  UserAchievement(const UserAchievement& from);

  inline UserAchievement& operator=(const UserAchievement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAchievement(UserAchievement&& from) noexcept
    : UserAchievement() {
    *this = ::std::move(from);
  }

  inline UserAchievement& operator=(UserAchievement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAchievement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAchievement* internal_default_instance() {
    return reinterpret_cast<const UserAchievement*>(
               &_UserAchievement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void UnsafeArenaSwap(UserAchievement* other);
  void Swap(UserAchievement* other);
  friend void swap(UserAchievement& a, UserAchievement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAchievement* New() const final {
    return CreateMaybeMessage<UserAchievement>(NULL);
  }

  UserAchievement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAchievement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAchievement& from);
  void MergeFrom(const UserAchievement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAchievement* other);
  protected:
  explicit UserAchievement(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int64 finish_value = 3;
  bool has_finish_value() const;
  void clear_finish_value();
  static const int kFinishValueFieldNumber = 3;
  ::google::protobuf::int64 finish_value() const;
  void set_finish_value(::google::protobuf::int64 value);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 phase = 5;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 5;
  ::google::protobuf::int32 phase() const;
  void set_phase(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserAchievement)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_finish_value();
  void clear_has_finish_value();
  void set_has_state();
  void clear_has_state();
  void set_has_phase();
  void clear_has_phase();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 finish_value_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 phase_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserDungeonEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserDungeonEvent) */ {
 public:
  UserDungeonEvent();
  virtual ~UserDungeonEvent();

  UserDungeonEvent(const UserDungeonEvent& from);

  inline UserDungeonEvent& operator=(const UserDungeonEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDungeonEvent(UserDungeonEvent&& from) noexcept
    : UserDungeonEvent() {
    *this = ::std::move(from);
  }

  inline UserDungeonEvent& operator=(UserDungeonEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDungeonEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDungeonEvent* internal_default_instance() {
    return reinterpret_cast<const UserDungeonEvent*>(
               &_UserDungeonEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void UnsafeArenaSwap(UserDungeonEvent* other);
  void Swap(UserDungeonEvent* other);
  friend void swap(UserDungeonEvent& a, UserDungeonEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDungeonEvent* New() const final {
    return CreateMaybeMessage<UserDungeonEvent>(NULL);
  }

  UserDungeonEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserDungeonEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserDungeonEvent& from);
  void MergeFrom(const UserDungeonEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDungeonEvent* other);
  protected:
  explicit UserDungeonEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 finish_value = 3;
  bool has_finish_value() const;
  void clear_finish_value();
  static const int kFinishValueFieldNumber = 3;
  ::google::protobuf::int32 finish_value() const;
  void set_finish_value(::google::protobuf::int32 value);

  // required int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserDungeonEvent)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_finish_value();
  void clear_has_finish_value();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 finish_value_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserDungeonState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserDungeonState) */ {
 public:
  UserDungeonState();
  virtual ~UserDungeonState();

  UserDungeonState(const UserDungeonState& from);

  inline UserDungeonState& operator=(const UserDungeonState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDungeonState(UserDungeonState&& from) noexcept
    : UserDungeonState() {
    *this = ::std::move(from);
  }

  inline UserDungeonState& operator=(UserDungeonState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDungeonState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDungeonState* internal_default_instance() {
    return reinterpret_cast<const UserDungeonState*>(
               &_UserDungeonState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void UnsafeArenaSwap(UserDungeonState* other);
  void Swap(UserDungeonState* other);
  friend void swap(UserDungeonState& a, UserDungeonState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDungeonState* New() const final {
    return CreateMaybeMessage<UserDungeonState>(NULL);
  }

  UserDungeonState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserDungeonState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserDungeonState& from);
  void MergeFrom(const UserDungeonState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDungeonState* other);
  protected:
  explicit UserDungeonState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // optional bytes reward_received = 6;
  bool has_reward_received() const;
  void clear_reward_received();
  static const int kRewardReceivedFieldNumber = 6;
  const ::std::string& reward_received() const;
  void set_reward_received(const ::std::string& value);
  #if LANG_CXX11
  void set_reward_received(::std::string&& value);
  #endif
  void set_reward_received(const char* value);
  void set_reward_received(const void* value, size_t size);
  ::std::string* mutable_reward_received();
  ::std::string* release_reward_received();
  void set_allocated_reward_received(::std::string* reward_received);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward_received();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward_received(
      ::std::string* reward_received);

  // optional bytes open_chest = 8;
  bool has_open_chest() const;
  void clear_open_chest();
  static const int kOpenChestFieldNumber = 8;
  const ::std::string& open_chest() const;
  void set_open_chest(const ::std::string& value);
  #if LANG_CXX11
  void set_open_chest(::std::string&& value);
  #endif
  void set_open_chest(const char* value);
  void set_open_chest(const void* value, size_t size);
  ::std::string* mutable_open_chest();
  ::std::string* release_open_chest();
  void set_allocated_open_chest(::std::string* open_chest);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_open_chest();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_open_chest(
      ::std::string* open_chest);

  // required int32 dungeon_id = 2;
  bool has_dungeon_id() const;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 2;
  ::google::protobuf::int32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 clear_times = 4;
  bool has_clear_times() const;
  void clear_clear_times();
  static const int kClearTimesFieldNumber = 4;
  ::google::protobuf::int32 clear_times() const;
  void set_clear_times(::google::protobuf::int32 value);

  // optional int32 max_layer = 5;
  bool has_max_layer() const;
  void clear_max_layer();
  static const int kMaxLayerFieldNumber = 5;
  ::google::protobuf::int32 max_layer() const;
  void set_max_layer(::google::protobuf::int32 value);

  // optional int32 daily_times = 7;
  bool has_daily_times() const;
  void clear_daily_times();
  static const int kDailyTimesFieldNumber = 7;
  ::google::protobuf::int32 daily_times() const;
  void set_daily_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserDungeonState)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_dungeon_id();
  void clear_has_dungeon_id();
  void set_has_state();
  void clear_has_state();
  void set_has_clear_times();
  void clear_has_clear_times();
  void set_has_max_layer();
  void clear_has_max_layer();
  void set_has_reward_received();
  void clear_has_reward_received();
  void set_has_daily_times();
  void clear_has_daily_times();
  void set_has_open_chest();
  void clear_has_open_chest();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr reward_received_;
  ::google::protobuf::internal::ArenaStringPtr open_chest_;
  ::google::protobuf::int32 dungeon_id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 clear_times_;
  ::google::protobuf::int32 max_layer_;
  ::google::protobuf::int32 daily_times_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserPveMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserPveMap) */ {
 public:
  UserPveMap();
  virtual ~UserPveMap();

  UserPveMap(const UserPveMap& from);

  inline UserPveMap& operator=(const UserPveMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserPveMap(UserPveMap&& from) noexcept
    : UserPveMap() {
    *this = ::std::move(from);
  }

  inline UserPveMap& operator=(UserPveMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPveMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPveMap* internal_default_instance() {
    return reinterpret_cast<const UserPveMap*>(
               &_UserPveMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void UnsafeArenaSwap(UserPveMap* other);
  void Swap(UserPveMap* other);
  friend void swap(UserPveMap& a, UserPveMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserPveMap* New() const final {
    return CreateMaybeMessage<UserPveMap>(NULL);
  }

  UserPveMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserPveMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserPveMap& from);
  void MergeFrom(const UserPveMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPveMap* other);
  protected:
  explicit UserPveMap(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // required uint64 belong_island = 2;
  bool has_belong_island() const;
  void clear_belong_island();
  static const int kBelongIslandFieldNumber = 2;
  ::google::protobuf::uint64 belong_island() const;
  void set_belong_island(::google::protobuf::uint64 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserPveMap)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_belong_island();
  void clear_has_belong_island();
  void set_has_type();
  void clear_has_type();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 belong_island_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserChest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserChest) */ {
 public:
  UserChest();
  virtual ~UserChest();

  UserChest(const UserChest& from);

  inline UserChest& operator=(const UserChest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserChest(UserChest&& from) noexcept
    : UserChest() {
    *this = ::std::move(from);
  }

  inline UserChest& operator=(UserChest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserChest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserChest* internal_default_instance() {
    return reinterpret_cast<const UserChest*>(
               &_UserChest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void UnsafeArenaSwap(UserChest* other);
  void Swap(UserChest* other);
  friend void swap(UserChest& a, UserChest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserChest* New() const final {
    return CreateMaybeMessage<UserChest>(NULL);
  }

  UserChest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserChest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserChest& from);
  void MergeFrom(const UserChest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserChest* other);
  protected:
  explicit UserChest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserChest)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserEventRecord) */ {
 public:
  UserEventRecord();
  virtual ~UserEventRecord();

  UserEventRecord(const UserEventRecord& from);

  inline UserEventRecord& operator=(const UserEventRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEventRecord(UserEventRecord&& from) noexcept
    : UserEventRecord() {
    *this = ::std::move(from);
  }

  inline UserEventRecord& operator=(UserEventRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserEventRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventRecord* internal_default_instance() {
    return reinterpret_cast<const UserEventRecord*>(
               &_UserEventRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void UnsafeArenaSwap(UserEventRecord* other);
  void Swap(UserEventRecord* other);
  friend void swap(UserEventRecord& a, UserEventRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEventRecord* New() const final {
    return CreateMaybeMessage<UserEventRecord>(NULL);
  }

  UserEventRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserEventRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserEventRecord& from);
  void MergeFrom(const UserEventRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEventRecord* other);
  protected:
  explicit UserEventRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes contant = 5;
  bool has_contant() const;
  void clear_contant();
  static const int kContantFieldNumber = 5;
  const ::std::string& contant() const;
  void set_contant(const ::std::string& value);
  #if LANG_CXX11
  void set_contant(::std::string&& value);
  #endif
  void set_contant(const char* value);
  void set_contant(const void* value, size_t size);
  ::std::string* mutable_contant();
  ::std::string* release_contant();
  void set_allocated_contant(::std::string* contant);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_contant();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contant(
      ::std::string* contant);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserEventRecord)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_type();
  void clear_has_type();
  void set_has_contant();
  void clear_has_contant();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr contant_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventCache : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserEventCache) */ {
 public:
  UserEventCache();
  virtual ~UserEventCache();

  UserEventCache(const UserEventCache& from);

  inline UserEventCache& operator=(const UserEventCache& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEventCache(UserEventCache&& from) noexcept
    : UserEventCache() {
    *this = ::std::move(from);
  }

  inline UserEventCache& operator=(UserEventCache&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserEventCache& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventCache* internal_default_instance() {
    return reinterpret_cast<const UserEventCache*>(
               &_UserEventCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void UnsafeArenaSwap(UserEventCache* other);
  void Swap(UserEventCache* other);
  friend void swap(UserEventCache& a, UserEventCache& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEventCache* New() const final {
    return CreateMaybeMessage<UserEventCache>(NULL);
  }

  UserEventCache* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserEventCache>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserEventCache& from);
  void MergeFrom(const UserEventCache& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEventCache* other);
  protected:
  explicit UserEventCache(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes contant = 3;
  bool has_contant() const;
  void clear_contant();
  static const int kContantFieldNumber = 3;
  const ::std::string& contant() const;
  void set_contant(const ::std::string& value);
  #if LANG_CXX11
  void set_contant(::std::string&& value);
  #endif
  void set_contant(const char* value);
  void set_contant(const void* value, size_t size);
  ::std::string* mutable_contant();
  ::std::string* release_contant();
  void set_allocated_contant(::std::string* contant);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_contant();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contant(
      ::std::string* contant);

  // required sfixed64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserEventCache)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_type();
  void clear_has_type();
  void set_has_contant();
  void clear_has_contant();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr contant_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserEquip) */ {
 public:
  UserEquip();
  virtual ~UserEquip();

  UserEquip(const UserEquip& from);

  inline UserEquip& operator=(const UserEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEquip(UserEquip&& from) noexcept
    : UserEquip() {
    *this = ::std::move(from);
  }

  inline UserEquip& operator=(UserEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEquip* internal_default_instance() {
    return reinterpret_cast<const UserEquip*>(
               &_UserEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void UnsafeArenaSwap(UserEquip* other);
  void Swap(UserEquip* other);
  friend void swap(UserEquip& a, UserEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEquip* New() const final {
    return CreateMaybeMessage<UserEquip>(NULL);
  }

  UserEquip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserEquip& from);
  void MergeFrom(const UserEquip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEquip* other);
  protected:
  explicit UserEquip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes attribute = 6;
  bool has_attribute() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 6;
  const ::std::string& attribute() const;
  void set_attribute(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute(::std::string&& value);
  #endif
  void set_attribute(const char* value);
  void set_attribute(const void* value, size_t size);
  ::std::string* mutable_attribute();
  ::std::string* release_attribute();
  void set_allocated_attribute(::std::string* attribute);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attribute();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attribute(
      ::std::string* attribute);

  // required bytes special_attr = 7;
  bool has_special_attr() const;
  void clear_special_attr();
  static const int kSpecialAttrFieldNumber = 7;
  const ::std::string& special_attr() const;
  void set_special_attr(const ::std::string& value);
  #if LANG_CXX11
  void set_special_attr(::std::string&& value);
  #endif
  void set_special_attr(const char* value);
  void set_special_attr(const void* value, size_t size);
  ::std::string* mutable_special_attr();
  ::std::string* release_special_attr();
  void set_allocated_special_attr(::std::string* special_attr);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_special_attr();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_special_attr(
      ::std::string* special_attr);

  // required bytes attribute_slot = 8;
  bool has_attribute_slot() const;
  void clear_attribute_slot();
  static const int kAttributeSlotFieldNumber = 8;
  const ::std::string& attribute_slot() const;
  void set_attribute_slot(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute_slot(::std::string&& value);
  #endif
  void set_attribute_slot(const char* value);
  void set_attribute_slot(const void* value, size_t size);
  ::std::string* mutable_attribute_slot();
  ::std::string* release_attribute_slot();
  void set_allocated_attribute_slot(::std::string* attribute_slot);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attribute_slot();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attribute_slot(
      ::std::string* attribute_slot);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 typeid = 3;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 3;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 quality = 4;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 4;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // required int32 state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 belong_to = 9;
  bool has_belong_to() const;
  void clear_belong_to();
  static const int kBelongToFieldNumber = 9;
  ::google::protobuf::int32 belong_to() const;
  void set_belong_to(::google::protobuf::int32 value);

  // optional int32 quality_refine_times = 10;
  bool has_quality_refine_times() const;
  void clear_quality_refine_times();
  static const int kQualityRefineTimesFieldNumber = 10;
  ::google::protobuf::int32 quality_refine_times() const;
  void set_quality_refine_times(::google::protobuf::int32 value);

  // optional int64 skill = 11;
  bool has_skill() const;
  void clear_skill();
  static const int kSkillFieldNumber = 11;
  ::google::protobuf::int64 skill() const;
  void set_skill(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserEquip)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_quality();
  void clear_has_quality();
  void set_has_state();
  void clear_has_state();
  void set_has_attribute();
  void clear_has_attribute();
  void set_has_special_attr();
  void clear_has_special_attr();
  void set_has_attribute_slot();
  void clear_has_attribute_slot();
  void set_has_belong_to();
  void clear_has_belong_to();
  void set_has_quality_refine_times();
  void clear_has_quality_refine_times();
  void set_has_skill();
  void clear_has_skill();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr attribute_;
  ::google::protobuf::internal::ArenaStringPtr special_attr_;
  ::google::protobuf::internal::ArenaStringPtr attribute_slot_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 belong_to_;
  ::google::protobuf::int32 quality_refine_times_;
  ::google::protobuf::int64 skill_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSailorSkill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserSailorSkill) */ {
 public:
  UserSailorSkill();
  virtual ~UserSailorSkill();

  UserSailorSkill(const UserSailorSkill& from);

  inline UserSailorSkill& operator=(const UserSailorSkill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSailorSkill(UserSailorSkill&& from) noexcept
    : UserSailorSkill() {
    *this = ::std::move(from);
  }

  inline UserSailorSkill& operator=(UserSailorSkill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSailorSkill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSailorSkill* internal_default_instance() {
    return reinterpret_cast<const UserSailorSkill*>(
               &_UserSailorSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void UnsafeArenaSwap(UserSailorSkill* other);
  void Swap(UserSailorSkill* other);
  friend void swap(UserSailorSkill& a, UserSailorSkill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSailorSkill* New() const final {
    return CreateMaybeMessage<UserSailorSkill>(NULL);
  }

  UserSailorSkill* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSailorSkill>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSailorSkill& from);
  void MergeFrom(const UserSailorSkill& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSailorSkill* other);
  protected:
  explicit UserSailorSkill(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 slotid = 3;
  bool has_slotid() const;
  void clear_slotid();
  static const int kSlotidFieldNumber = 3;
  ::google::protobuf::int32 slotid() const;
  void set_slotid(::google::protobuf::int32 value);

  // required uint64 skillid = 5;
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillidFieldNumber = 5;
  ::google::protobuf::uint64 skillid() const;
  void set_skillid(::google::protobuf::uint64 value);

  // required int32 type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 level = 6;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 6;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserSailorSkill)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_slotid();
  void clear_has_slotid();
  void set_has_type();
  void clear_has_type();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_level();
  void clear_has_level();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 slotid_;
  ::google::protobuf::uint64 skillid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSailorFarmSkill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserSailorFarmSkill) */ {
 public:
  UserSailorFarmSkill();
  virtual ~UserSailorFarmSkill();

  UserSailorFarmSkill(const UserSailorFarmSkill& from);

  inline UserSailorFarmSkill& operator=(const UserSailorFarmSkill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSailorFarmSkill(UserSailorFarmSkill&& from) noexcept
    : UserSailorFarmSkill() {
    *this = ::std::move(from);
  }

  inline UserSailorFarmSkill& operator=(UserSailorFarmSkill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSailorFarmSkill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSailorFarmSkill* internal_default_instance() {
    return reinterpret_cast<const UserSailorFarmSkill*>(
               &_UserSailorFarmSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void UnsafeArenaSwap(UserSailorFarmSkill* other);
  void Swap(UserSailorFarmSkill* other);
  friend void swap(UserSailorFarmSkill& a, UserSailorFarmSkill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSailorFarmSkill* New() const final {
    return CreateMaybeMessage<UserSailorFarmSkill>(NULL);
  }

  UserSailorFarmSkill* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSailorFarmSkill>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSailorFarmSkill& from);
  void MergeFrom(const UserSailorFarmSkill& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSailorFarmSkill* other);
  protected:
  explicit UserSailorFarmSkill(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required uint64 skillid = 3;
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillidFieldNumber = 3;
  ::google::protobuf::uint64 skillid() const;
  void set_skillid(::google::protobuf::uint64 value);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 level = 4;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 exp = 5;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 5;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserSailorFarmSkill)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_level();
  void clear_has_level();
  void set_has_exp();
  void clear_has_exp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::uint64 skillid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserFightManual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserFightManual) */ {
 public:
  UserFightManual();
  virtual ~UserFightManual();

  UserFightManual(const UserFightManual& from);

  inline UserFightManual& operator=(const UserFightManual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserFightManual(UserFightManual&& from) noexcept
    : UserFightManual() {
    *this = ::std::move(from);
  }

  inline UserFightManual& operator=(UserFightManual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFightManual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFightManual* internal_default_instance() {
    return reinterpret_cast<const UserFightManual*>(
               &_UserFightManual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void UnsafeArenaSwap(UserFightManual* other);
  void Swap(UserFightManual* other);
  friend void swap(UserFightManual& a, UserFightManual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserFightManual* New() const final {
    return CreateMaybeMessage<UserFightManual>(NULL);
  }

  UserFightManual* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserFightManual>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserFightManual& from);
  void MergeFrom(const UserFightManual& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFightManual* other);
  protected:
  explicit UserFightManual(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 typeid = 3;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 3;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserFightManual)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_type();
  void clear_has_type();
  void set_has_typeid_();
  void clear_has_typeid_();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 typeid__;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserHiddenData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserHiddenData) */ {
 public:
  UserHiddenData();
  virtual ~UserHiddenData();

  UserHiddenData(const UserHiddenData& from);

  inline UserHiddenData& operator=(const UserHiddenData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserHiddenData(UserHiddenData&& from) noexcept
    : UserHiddenData() {
    *this = ::std::move(from);
  }

  inline UserHiddenData& operator=(UserHiddenData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserHiddenData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserHiddenData* internal_default_instance() {
    return reinterpret_cast<const UserHiddenData*>(
               &_UserHiddenData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void UnsafeArenaSwap(UserHiddenData* other);
  void Swap(UserHiddenData* other);
  friend void swap(UserHiddenData& a, UserHiddenData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserHiddenData* New() const final {
    return CreateMaybeMessage<UserHiddenData>(NULL);
  }

  UserHiddenData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserHiddenData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserHiddenData& from);
  void MergeFrom(const UserHiddenData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserHiddenData* other);
  protected:
  explicit UserHiddenData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required float businessman_pro_add = 2;
  bool has_businessman_pro_add() const;
  void clear_businessman_pro_add();
  static const int kBusinessmanProAddFieldNumber = 2;
  float businessman_pro_add() const;
  void set_businessman_pro_add(float value);

  // @@protoc_insertion_point(class_scope:db.UserHiddenData)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_businessman_pro_add();
  void clear_has_businessman_pro_add();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  float businessman_pro_add_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSpecialEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserSpecialEvent) */ {
 public:
  UserSpecialEvent();
  virtual ~UserSpecialEvent();

  UserSpecialEvent(const UserSpecialEvent& from);

  inline UserSpecialEvent& operator=(const UserSpecialEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSpecialEvent(UserSpecialEvent&& from) noexcept
    : UserSpecialEvent() {
    *this = ::std::move(from);
  }

  inline UserSpecialEvent& operator=(UserSpecialEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSpecialEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSpecialEvent* internal_default_instance() {
    return reinterpret_cast<const UserSpecialEvent*>(
               &_UserSpecialEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void UnsafeArenaSwap(UserSpecialEvent* other);
  void Swap(UserSpecialEvent* other);
  friend void swap(UserSpecialEvent& a, UserSpecialEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSpecialEvent* New() const final {
    return CreateMaybeMessage<UserSpecialEvent>(NULL);
  }

  UserSpecialEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSpecialEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSpecialEvent& from);
  void MergeFrom(const UserSpecialEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSpecialEvent* other);
  protected:
  explicit UserSpecialEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int32 trigger_times = 3;
  bool has_trigger_times() const;
  void clear_trigger_times();
  static const int kTriggerTimesFieldNumber = 3;
  ::google::protobuf::int32 trigger_times() const;
  void set_trigger_times(::google::protobuf::int32 value);

  // required int32 happen_times = 4;
  bool has_happen_times() const;
  void clear_happen_times();
  static const int kHappenTimesFieldNumber = 4;
  ::google::protobuf::int32 happen_times() const;
  void set_happen_times(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserSpecialEvent)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_trigger_times();
  void clear_has_trigger_times();
  void set_has_happen_times();
  void clear_has_happen_times();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 trigger_times_;
  ::google::protobuf::int32 happen_times_;
  ::google::protobuf::int64 timestamp_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSailorInGhostShip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserSailorInGhostShip) */ {
 public:
  UserSailorInGhostShip();
  virtual ~UserSailorInGhostShip();

  UserSailorInGhostShip(const UserSailorInGhostShip& from);

  inline UserSailorInGhostShip& operator=(const UserSailorInGhostShip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSailorInGhostShip(UserSailorInGhostShip&& from) noexcept
    : UserSailorInGhostShip() {
    *this = ::std::move(from);
  }

  inline UserSailorInGhostShip& operator=(UserSailorInGhostShip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSailorInGhostShip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSailorInGhostShip* internal_default_instance() {
    return reinterpret_cast<const UserSailorInGhostShip*>(
               &_UserSailorInGhostShip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void UnsafeArenaSwap(UserSailorInGhostShip* other);
  void Swap(UserSailorInGhostShip* other);
  friend void swap(UserSailorInGhostShip& a, UserSailorInGhostShip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSailorInGhostShip* New() const final {
    return CreateMaybeMessage<UserSailorInGhostShip>(NULL);
  }

  UserSailorInGhostShip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserSailorInGhostShip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserSailorInGhostShip& from);
  void MergeFrom(const UserSailorInGhostShip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSailorInGhostShip* other);
  protected:
  explicit UserSailorInGhostShip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserSailorInGhostShip)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserGhostStage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserGhostStage) */ {
 public:
  UserGhostStage();
  virtual ~UserGhostStage();

  UserGhostStage(const UserGhostStage& from);

  inline UserGhostStage& operator=(const UserGhostStage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserGhostStage(UserGhostStage&& from) noexcept
    : UserGhostStage() {
    *this = ::std::move(from);
  }

  inline UserGhostStage& operator=(UserGhostStage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGhostStage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserGhostStage* internal_default_instance() {
    return reinterpret_cast<const UserGhostStage*>(
               &_UserGhostStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void UnsafeArenaSwap(UserGhostStage* other);
  void Swap(UserGhostStage* other);
  friend void swap(UserGhostStage& a, UserGhostStage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserGhostStage* New() const final {
    return CreateMaybeMessage<UserGhostStage>(NULL);
  }

  UserGhostStage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserGhostStage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserGhostStage& from);
  void MergeFrom(const UserGhostStage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGhostStage* other);
  protected:
  explicit UserGhostStage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes battle_data = 7;
  bool has_battle_data() const;
  void clear_battle_data();
  static const int kBattleDataFieldNumber = 7;
  const ::std::string& battle_data() const;
  void set_battle_data(const ::std::string& value);
  #if LANG_CXX11
  void set_battle_data(::std::string&& value);
  #endif
  void set_battle_data(const char* value);
  void set_battle_data(const void* value, size_t size);
  ::std::string* mutable_battle_data();
  ::std::string* release_battle_data();
  void set_allocated_battle_data(::std::string* battle_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_battle_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_battle_data(
      ::std::string* battle_data);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserGhostStage)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();
  void set_has_level();
  void clear_has_level();
  void set_has_state();
  void clear_has_state();
  void set_has_battle_data();
  void clear_has_battle_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr battle_data_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserGhostShip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserGhostShip) */ {
 public:
  UserGhostShip();
  virtual ~UserGhostShip();

  UserGhostShip(const UserGhostShip& from);

  inline UserGhostShip& operator=(const UserGhostShip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserGhostShip(UserGhostShip&& from) noexcept
    : UserGhostShip() {
    *this = ::std::move(from);
  }

  inline UserGhostShip& operator=(UserGhostShip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGhostShip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserGhostShip* internal_default_instance() {
    return reinterpret_cast<const UserGhostShip*>(
               &_UserGhostShip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void UnsafeArenaSwap(UserGhostShip* other);
  void Swap(UserGhostShip* other);
  friend void swap(UserGhostShip& a, UserGhostShip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserGhostShip* New() const final {
    return CreateMaybeMessage<UserGhostShip>(NULL);
  }

  UserGhostShip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserGhostShip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserGhostShip& from);
  void MergeFrom(const UserGhostShip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGhostShip* other);
  protected:
  explicit UserGhostShip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes buff_get = 4;
  bool has_buff_get() const;
  void clear_buff_get();
  static const int kBuffGetFieldNumber = 4;
  const ::std::string& buff_get() const;
  void set_buff_get(const ::std::string& value);
  #if LANG_CXX11
  void set_buff_get(::std::string&& value);
  #endif
  void set_buff_get(const char* value);
  void set_buff_get(const void* value, size_t size);
  ::std::string* mutable_buff_get();
  ::std::string* release_buff_get();
  void set_allocated_buff_get(::std::string* buff_get);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_buff_get();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buff_get(
      ::std::string* buff_get);

  // required int32 state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 reset_times = 3;
  bool has_reset_times() const;
  void clear_reset_times();
  static const int kResetTimesFieldNumber = 3;
  ::google::protobuf::int32 reset_times() const;
  void set_reset_times(::google::protobuf::int32 value);

  // required int32 attack_times = 5;
  bool has_attack_times() const;
  void clear_attack_times();
  static const int kAttackTimesFieldNumber = 5;
  ::google::protobuf::int32 attack_times() const;
  void set_attack_times(::google::protobuf::int32 value);

  // required int32 rank = 6;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 6;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserGhostShip)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_state();
  void clear_has_state();
  void set_has_reset_times();
  void clear_has_reset_times();
  void set_has_buff_get();
  void clear_has_buff_get();
  void set_has_attack_times();
  void clear_has_attack_times();
  void set_has_rank();
  void clear_has_rank();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr buff_get_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 reset_times_;
  ::google::protobuf::int32 attack_times_;
  ::google::protobuf::int32 rank_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserBattleState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserBattleState) */ {
 public:
  UserBattleState();
  virtual ~UserBattleState();

  UserBattleState(const UserBattleState& from);

  inline UserBattleState& operator=(const UserBattleState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserBattleState(UserBattleState&& from) noexcept
    : UserBattleState() {
    *this = ::std::move(from);
  }

  inline UserBattleState& operator=(UserBattleState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBattleState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBattleState* internal_default_instance() {
    return reinterpret_cast<const UserBattleState*>(
               &_UserBattleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void UnsafeArenaSwap(UserBattleState* other);
  void Swap(UserBattleState* other);
  friend void swap(UserBattleState& a, UserBattleState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserBattleState* New() const final {
    return CreateMaybeMessage<UserBattleState>(NULL);
  }

  UserBattleState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserBattleState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserBattleState& from);
  void MergeFrom(const UserBattleState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBattleState* other);
  protected:
  explicit UserBattleState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes user_info = 4;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  const ::std::string& user_info() const;
  void set_user_info(const ::std::string& value);
  #if LANG_CXX11
  void set_user_info(::std::string&& value);
  #endif
  void set_user_info(const char* value);
  void set_user_info(const void* value, size_t size);
  ::std::string* mutable_user_info();
  ::std::string* release_user_info();
  void set_allocated_user_info(::std::string* user_info);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_user_info();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_info(
      ::std::string* user_info);

  // required bytes battle_data = 5;
  bool has_battle_data() const;
  void clear_battle_data();
  static const int kBattleDataFieldNumber = 5;
  const ::std::string& battle_data() const;
  void set_battle_data(const ::std::string& value);
  #if LANG_CXX11
  void set_battle_data(::std::string&& value);
  #endif
  void set_battle_data(const char* value);
  void set_battle_data(const void* value, size_t size);
  ::std::string* mutable_battle_data();
  ::std::string* release_battle_data();
  void set_allocated_battle_data(::std::string* battle_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_battle_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_battle_data(
      ::std::string* battle_data);

  // optional bytes team_data = 6;
  bool has_team_data() const;
  void clear_team_data();
  static const int kTeamDataFieldNumber = 6;
  const ::std::string& team_data() const;
  void set_team_data(const ::std::string& value);
  #if LANG_CXX11
  void set_team_data(::std::string&& value);
  #endif
  void set_team_data(const char* value);
  void set_team_data(const void* value, size_t size);
  ::std::string* mutable_team_data();
  ::std::string* release_team_data();
  void set_allocated_team_data(::std::string* team_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_team_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_team_data(
      ::std::string* team_data);

  // required int32 dungeon_id = 2;
  bool has_dungeon_id() const;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 2;
  ::google::protobuf::int32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserBattleState)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_dungeon_id();
  void clear_has_dungeon_id();
  void set_has_user_info();
  void clear_has_user_info();
  void set_has_battle_data();
  void clear_has_battle_data();
  void set_has_team_data();
  void clear_has_team_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr user_info_;
  ::google::protobuf::internal::ArenaStringPtr battle_data_;
  ::google::protobuf::internal::ArenaStringPtr team_data_;
  ::google::protobuf::int32 dungeon_id_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserPvpState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserPvpState) */ {
 public:
  UserPvpState();
  virtual ~UserPvpState();

  UserPvpState(const UserPvpState& from);

  inline UserPvpState& operator=(const UserPvpState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserPvpState(UserPvpState&& from) noexcept
    : UserPvpState() {
    *this = ::std::move(from);
  }

  inline UserPvpState& operator=(UserPvpState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPvpState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPvpState* internal_default_instance() {
    return reinterpret_cast<const UserPvpState*>(
               &_UserPvpState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void UnsafeArenaSwap(UserPvpState* other);
  void Swap(UserPvpState* other);
  friend void swap(UserPvpState& a, UserPvpState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserPvpState* New() const final {
    return CreateMaybeMessage<UserPvpState>(NULL);
  }

  UserPvpState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserPvpState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserPvpState& from);
  void MergeFrom(const UserPvpState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPvpState* other);
  protected:
  explicit UserPvpState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 remain_times = 2;
  bool has_remain_times() const;
  void clear_remain_times();
  static const int kRemainTimesFieldNumber = 2;
  ::google::protobuf::int32 remain_times() const;
  void set_remain_times(::google::protobuf::int32 value);

  // required int32 combo = 3;
  bool has_combo() const;
  void clear_combo();
  static const int kComboFieldNumber = 3;
  ::google::protobuf::int32 combo() const;
  void set_combo(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required sfixed64 round_start = 5;
  bool has_round_start() const;
  void clear_round_start();
  static const int kRoundStartFieldNumber = 5;
  ::google::protobuf::int64 round_start() const;
  void set_round_start(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserPvpState)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_remain_times();
  void clear_has_remain_times();
  void set_has_combo();
  void clear_has_combo();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_round_start();
  void clear_has_round_start();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 remain_times_;
  ::google::protobuf::int32 combo_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 round_start_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEasterEgg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserEasterEgg) */ {
 public:
  UserEasterEgg();
  virtual ~UserEasterEgg();

  UserEasterEgg(const UserEasterEgg& from);

  inline UserEasterEgg& operator=(const UserEasterEgg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEasterEgg(UserEasterEgg&& from) noexcept
    : UserEasterEgg() {
    *this = ::std::move(from);
  }

  inline UserEasterEgg& operator=(UserEasterEgg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserEasterEgg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEasterEgg* internal_default_instance() {
    return reinterpret_cast<const UserEasterEgg*>(
               &_UserEasterEgg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void UnsafeArenaSwap(UserEasterEgg* other);
  void Swap(UserEasterEgg* other);
  friend void swap(UserEasterEgg& a, UserEasterEgg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEasterEgg* New() const final {
    return CreateMaybeMessage<UserEasterEgg>(NULL);
  }

  UserEasterEgg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserEasterEgg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserEasterEgg& from);
  void MergeFrom(const UserEasterEgg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEasterEgg* other);
  protected:
  explicit UserEasterEgg(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int64 entryid = 2;
  bool has_entryid() const;
  void clear_entryid();
  static const int kEntryidFieldNumber = 2;
  ::google::protobuf::int64 entryid() const;
  void set_entryid(::google::protobuf::int64 value);

  // required int64 easter_egg = 3;
  bool has_easter_egg() const;
  void clear_easter_egg();
  static const int kEasterEggFieldNumber = 3;
  ::google::protobuf::int64 easter_egg() const;
  void set_easter_egg(::google::protobuf::int64 value);

  // required sfixed64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 exist_times = 5;
  bool has_exist_times() const;
  void clear_exist_times();
  static const int kExistTimesFieldNumber = 5;
  ::google::protobuf::int32 exist_times() const;
  void set_exist_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserEasterEgg)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_entryid();
  void clear_has_entryid();
  void set_has_easter_egg();
  void clear_has_easter_egg();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_exist_times();
  void clear_has_exist_times();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 entryid_;
  ::google::protobuf::int64 easter_egg_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 exist_times_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserShipEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserShipEvent) */ {
 public:
  UserShipEvent();
  virtual ~UserShipEvent();

  UserShipEvent(const UserShipEvent& from);

  inline UserShipEvent& operator=(const UserShipEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserShipEvent(UserShipEvent&& from) noexcept
    : UserShipEvent() {
    *this = ::std::move(from);
  }

  inline UserShipEvent& operator=(UserShipEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserShipEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserShipEvent* internal_default_instance() {
    return reinterpret_cast<const UserShipEvent*>(
               &_UserShipEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void UnsafeArenaSwap(UserShipEvent* other);
  void Swap(UserShipEvent* other);
  friend void swap(UserShipEvent& a, UserShipEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserShipEvent* New() const final {
    return CreateMaybeMessage<UserShipEvent>(NULL);
  }

  UserShipEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserShipEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserShipEvent& from);
  void MergeFrom(const UserShipEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserShipEvent* other);
  protected:
  explicit UserShipEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int64 typeid = 3;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 3;
  ::google::protobuf::int64 typeid_() const;
  void set_typeid_(::google::protobuf::int64 value);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 seat = 4;
  bool has_seat() const;
  void clear_seat();
  static const int kSeatFieldNumber = 4;
  ::google::protobuf::int32 seat() const;
  void set_seat(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 region = 7;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 7;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserShipEvent)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_seat();
  void clear_has_seat();
  void set_has_state();
  void clear_has_state();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_region();
  void clear_has_region();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 typeid__;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 region_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserShipEventTiming : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserShipEventTiming) */ {
 public:
  UserShipEventTiming();
  virtual ~UserShipEventTiming();

  UserShipEventTiming(const UserShipEventTiming& from);

  inline UserShipEventTiming& operator=(const UserShipEventTiming& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserShipEventTiming(UserShipEventTiming&& from) noexcept
    : UserShipEventTiming() {
    *this = ::std::move(from);
  }

  inline UserShipEventTiming& operator=(UserShipEventTiming&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserShipEventTiming& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserShipEventTiming* internal_default_instance() {
    return reinterpret_cast<const UserShipEventTiming*>(
               &_UserShipEventTiming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void UnsafeArenaSwap(UserShipEventTiming* other);
  void Swap(UserShipEventTiming* other);
  friend void swap(UserShipEventTiming& a, UserShipEventTiming& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserShipEventTiming* New() const final {
    return CreateMaybeMessage<UserShipEventTiming>(NULL);
  }

  UserShipEventTiming* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserShipEventTiming>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserShipEventTiming& from);
  void MergeFrom(const UserShipEventTiming& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserShipEventTiming* other);
  protected:
  explicit UserShipEventTiming(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int64 event = 2;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  ::google::protobuf::int64 event() const;
  void set_event(::google::protobuf::int64 value);

  // required int64 online_seconds = 3;
  bool has_online_seconds() const;
  void clear_online_seconds();
  static const int kOnlineSecondsFieldNumber = 3;
  ::google::protobuf::int64 online_seconds() const;
  void set_online_seconds(::google::protobuf::int64 value);

  // required int64 offline_seconds = 4;
  bool has_offline_seconds() const;
  void clear_offline_seconds();
  static const int kOfflineSecondsFieldNumber = 4;
  ::google::protobuf::int64 offline_seconds() const;
  void set_offline_seconds(::google::protobuf::int64 value);

  // required int32 happened_times = 5;
  bool has_happened_times() const;
  void clear_happened_times();
  static const int kHappenedTimesFieldNumber = 5;
  ::google::protobuf::int32 happened_times() const;
  void set_happened_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserShipEventTiming)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_event();
  void clear_has_event();
  void set_has_online_seconds();
  void clear_has_online_seconds();
  void set_has_offline_seconds();
  void clear_has_offline_seconds();
  void set_has_happened_times();
  void clear_has_happened_times();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 event_;
  ::google::protobuf::int64 online_seconds_;
  ::google::protobuf::int64 offline_seconds_;
  ::google::protobuf::int32 happened_times_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserDailyGift : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserDailyGift) */ {
 public:
  UserDailyGift();
  virtual ~UserDailyGift();

  UserDailyGift(const UserDailyGift& from);

  inline UserDailyGift& operator=(const UserDailyGift& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDailyGift(UserDailyGift&& from) noexcept
    : UserDailyGift() {
    *this = ::std::move(from);
  }

  inline UserDailyGift& operator=(UserDailyGift&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDailyGift& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDailyGift* internal_default_instance() {
    return reinterpret_cast<const UserDailyGift*>(
               &_UserDailyGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void UnsafeArenaSwap(UserDailyGift* other);
  void Swap(UserDailyGift* other);
  friend void swap(UserDailyGift& a, UserDailyGift& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDailyGift* New() const final {
    return CreateMaybeMessage<UserDailyGift>(NULL);
  }

  UserDailyGift* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserDailyGift>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserDailyGift& from);
  void MergeFrom(const UserDailyGift& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDailyGift* other);
  protected:
  explicit UserDailyGift(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 gift_id = 2;
  bool has_gift_id() const;
  void clear_gift_id();
  static const int kGiftIdFieldNumber = 2;
  ::google::protobuf::int32 gift_id() const;
  void set_gift_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 be_recieved = 4;
  bool has_be_recieved() const;
  void clear_be_recieved();
  static const int kBeRecievedFieldNumber = 4;
  ::google::protobuf::int32 be_recieved() const;
  void set_be_recieved(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserDailyGift)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_gift_id();
  void clear_has_gift_id();
  void set_has_state();
  void clear_has_state();
  void set_has_be_recieved();
  void clear_has_be_recieved();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 gift_id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 be_recieved_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserPVPRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserPVPRecord) */ {
 public:
  UserPVPRecord();
  virtual ~UserPVPRecord();

  UserPVPRecord(const UserPVPRecord& from);

  inline UserPVPRecord& operator=(const UserPVPRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserPVPRecord(UserPVPRecord&& from) noexcept
    : UserPVPRecord() {
    *this = ::std::move(from);
  }

  inline UserPVPRecord& operator=(UserPVPRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPVPRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPVPRecord* internal_default_instance() {
    return reinterpret_cast<const UserPVPRecord*>(
               &_UserPVPRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void UnsafeArenaSwap(UserPVPRecord* other);
  void Swap(UserPVPRecord* other);
  friend void swap(UserPVPRecord& a, UserPVPRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserPVPRecord* New() const final {
    return CreateMaybeMessage<UserPVPRecord>(NULL);
  }

  UserPVPRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserPVPRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserPVPRecord& from);
  void MergeFrom(const UserPVPRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPVPRecord* other);
  protected:
  explicit UserPVPRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes player_nick = 4;
  bool has_player_nick() const;
  void clear_player_nick();
  static const int kPlayerNickFieldNumber = 4;
  const ::std::string& player_nick() const;
  void set_player_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_player_nick(::std::string&& value);
  #endif
  void set_player_nick(const char* value);
  void set_player_nick(const void* value, size_t size);
  ::std::string* mutable_player_nick();
  ::std::string* release_player_nick();
  void set_allocated_player_nick(::std::string* player_nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_player_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player_nick(
      ::std::string* player_nick);

  // required bytes team_data = 8;
  bool has_team_data() const;
  void clear_team_data();
  static const int kTeamDataFieldNumber = 8;
  const ::std::string& team_data() const;
  void set_team_data(const ::std::string& value);
  #if LANG_CXX11
  void set_team_data(::std::string&& value);
  #endif
  void set_team_data(const char* value);
  void set_team_data(const void* value, size_t size);
  ::std::string* mutable_team_data();
  ::std::string* release_team_data();
  void set_allocated_team_data(::std::string* team_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_team_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_team_data(
      ::std::string* team_data);

  // required bytes enemy_data = 9;
  bool has_enemy_data() const;
  void clear_enemy_data();
  static const int kEnemyDataFieldNumber = 9;
  const ::std::string& enemy_data() const;
  void set_enemy_data(const ::std::string& value);
  #if LANG_CXX11
  void set_enemy_data(::std::string&& value);
  #endif
  void set_enemy_data(const char* value);
  void set_enemy_data(const void* value, size_t size);
  ::std::string* mutable_enemy_data();
  ::std::string* release_enemy_data();
  void set_allocated_enemy_data(::std::string* enemy_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_enemy_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enemy_data(
      ::std::string* enemy_data);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 player = 3;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 3;
  ::google::protobuf::int32 player() const;
  void set_player(::google::protobuf::int32 value);

  // required int32 player_level = 5;
  bool has_player_level() const;
  void clear_player_level();
  static const int kPlayerLevelFieldNumber = 5;
  ::google::protobuf::int32 player_level() const;
  void set_player_level(::google::protobuf::int32 value);

  // required int32 result = 6;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 6;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 10;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 win_score = 7;
  bool has_win_score() const;
  void clear_win_score();
  static const int kWinScoreFieldNumber = 7;
  ::google::protobuf::int32 win_score() const;
  void set_win_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserPVPRecord)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_player();
  void clear_has_player();
  void set_has_player_nick();
  void clear_has_player_nick();
  void set_has_player_level();
  void clear_has_player_level();
  void set_has_result();
  void clear_has_result();
  void set_has_win_score();
  void clear_has_win_score();
  void set_has_team_data();
  void clear_has_team_data();
  void set_has_enemy_data();
  void clear_has_enemy_data();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr player_nick_;
  ::google::protobuf::internal::ArenaStringPtr team_data_;
  ::google::protobuf::internal::ArenaStringPtr enemy_data_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 player_;
  ::google::protobuf::int32 player_level_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 win_score_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMaelstromState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserMaelstromState) */ {
 public:
  UserMaelstromState();
  virtual ~UserMaelstromState();

  UserMaelstromState(const UserMaelstromState& from);

  inline UserMaelstromState& operator=(const UserMaelstromState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMaelstromState(UserMaelstromState&& from) noexcept
    : UserMaelstromState() {
    *this = ::std::move(from);
  }

  inline UserMaelstromState& operator=(UserMaelstromState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMaelstromState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMaelstromState* internal_default_instance() {
    return reinterpret_cast<const UserMaelstromState*>(
               &_UserMaelstromState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void UnsafeArenaSwap(UserMaelstromState* other);
  void Swap(UserMaelstromState* other);
  friend void swap(UserMaelstromState& a, UserMaelstromState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMaelstromState* New() const final {
    return CreateMaybeMessage<UserMaelstromState>(NULL);
  }

  UserMaelstromState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMaelstromState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMaelstromState& from);
  void MergeFrom(const UserMaelstromState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMaelstromState* other);
  protected:
  explicit UserMaelstromState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes map_size = 2;
  bool has_map_size() const;
  void clear_map_size();
  static const int kMapSizeFieldNumber = 2;
  const ::std::string& map_size() const;
  void set_map_size(const ::std::string& value);
  #if LANG_CXX11
  void set_map_size(::std::string&& value);
  #endif
  void set_map_size(const char* value);
  void set_map_size(const void* value, size_t size);
  ::std::string* mutable_map_size();
  ::std::string* release_map_size();
  void set_allocated_map_size(::std::string* map_size);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_map_size();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_size(
      ::std::string* map_size);

  // required bytes pos = 4;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  const ::std::string& pos() const;
  void set_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_pos(::std::string&& value);
  #endif
  void set_pos(const char* value);
  void set_pos(const void* value, size_t size);
  ::std::string* mutable_pos();
  ::std::string* release_pos();
  void set_allocated_pos(::std::string* pos);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pos();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pos(
      ::std::string* pos);

  // required bytes fog = 5;
  bool has_fog() const;
  void clear_fog();
  static const int kFogFieldNumber = 5;
  const ::std::string& fog() const;
  void set_fog(const ::std::string& value);
  #if LANG_CXX11
  void set_fog(::std::string&& value);
  #endif
  void set_fog(const char* value);
  void set_fog(const void* value, size_t size);
  ::std::string* mutable_fog();
  ::std::string* release_fog();
  void set_allocated_fog(::std::string* fog);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_fog();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fog(
      ::std::string* fog);

  // optional bytes talent = 10;
  bool has_talent() const;
  void clear_talent();
  static const int kTalentFieldNumber = 10;
  const ::std::string& talent() const;
  void set_talent(const ::std::string& value);
  #if LANG_CXX11
  void set_talent(::std::string&& value);
  #endif
  void set_talent(const char* value);
  void set_talent(const void* value, size_t size);
  ::std::string* mutable_talent();
  ::std::string* release_talent();
  void set_allocated_talent(::std::string* talent);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_talent();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_talent(
      ::std::string* talent);

  // optional bytes event_record = 11;
  bool has_event_record() const;
  void clear_event_record();
  static const int kEventRecordFieldNumber = 11;
  const ::std::string& event_record() const;
  void set_event_record(const ::std::string& value);
  #if LANG_CXX11
  void set_event_record(::std::string&& value);
  #endif
  void set_event_record(const char* value);
  void set_event_record(const void* value, size_t size);
  ::std::string* mutable_event_record();
  ::std::string* release_event_record();
  void set_allocated_event_record(::std::string* event_record);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_event_record();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_record(
      ::std::string* event_record);

  // required int32 explore_level = 3;
  bool has_explore_level() const;
  void clear_explore_level();
  static const int kExploreLevelFieldNumber = 3;
  ::google::protobuf::int32 explore_level() const;
  void set_explore_level(::google::protobuf::int32 value);

  // required int32 oil = 6;
  bool has_oil() const;
  void clear_oil();
  static const int kOilFieldNumber = 6;
  ::google::protobuf::int32 oil() const;
  void set_oil(::google::protobuf::int32 value);

  // required sfixed64 repair_timestamp = 7;
  bool has_repair_timestamp() const;
  void clear_repair_timestamp();
  static const int kRepairTimestampFieldNumber = 7;
  ::google::protobuf::int64 repair_timestamp() const;
  void set_repair_timestamp(::google::protobuf::int64 value);

  // required sfixed64 refresh_timestamp = 8;
  bool has_refresh_timestamp() const;
  void clear_refresh_timestamp();
  static const int kRefreshTimestampFieldNumber = 8;
  ::google::protobuf::int64 refresh_timestamp() const;
  void set_refresh_timestamp(::google::protobuf::int64 value);

  // optional int32 explore_point = 9;
  bool has_explore_point() const;
  void clear_explore_point();
  static const int kExplorePointFieldNumber = 9;
  ::google::protobuf::int32 explore_point() const;
  void set_explore_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserMaelstromState)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_map_size();
  void clear_has_map_size();
  void set_has_explore_level();
  void clear_has_explore_level();
  void set_has_pos();
  void clear_has_pos();
  void set_has_fog();
  void clear_has_fog();
  void set_has_oil();
  void clear_has_oil();
  void set_has_repair_timestamp();
  void clear_has_repair_timestamp();
  void set_has_refresh_timestamp();
  void clear_has_refresh_timestamp();
  void set_has_explore_point();
  void clear_has_explore_point();
  void set_has_talent();
  void clear_has_talent();
  void set_has_event_record();
  void clear_has_event_record();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr map_size_;
  ::google::protobuf::internal::ArenaStringPtr pos_;
  ::google::protobuf::internal::ArenaStringPtr fog_;
  ::google::protobuf::internal::ArenaStringPtr talent_;
  ::google::protobuf::internal::ArenaStringPtr event_record_;
  ::google::protobuf::int32 explore_level_;
  ::google::protobuf::int32 oil_;
  ::google::protobuf::int64 repair_timestamp_;
  ::google::protobuf::int64 refresh_timestamp_;
  ::google::protobuf::int32 explore_point_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMaelstromBuilding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserMaelstromBuilding) */ {
 public:
  UserMaelstromBuilding();
  virtual ~UserMaelstromBuilding();

  UserMaelstromBuilding(const UserMaelstromBuilding& from);

  inline UserMaelstromBuilding& operator=(const UserMaelstromBuilding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMaelstromBuilding(UserMaelstromBuilding&& from) noexcept
    : UserMaelstromBuilding() {
    *this = ::std::move(from);
  }

  inline UserMaelstromBuilding& operator=(UserMaelstromBuilding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMaelstromBuilding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMaelstromBuilding* internal_default_instance() {
    return reinterpret_cast<const UserMaelstromBuilding*>(
               &_UserMaelstromBuilding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void UnsafeArenaSwap(UserMaelstromBuilding* other);
  void Swap(UserMaelstromBuilding* other);
  friend void swap(UserMaelstromBuilding& a, UserMaelstromBuilding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMaelstromBuilding* New() const final {
    return CreateMaybeMessage<UserMaelstromBuilding>(NULL);
  }

  UserMaelstromBuilding* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMaelstromBuilding>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMaelstromBuilding& from);
  void MergeFrom(const UserMaelstromBuilding& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMaelstromBuilding* other);
  protected:
  explicit UserMaelstromBuilding(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required sfixed64 level_up_timestamp = 6;
  bool has_level_up_timestamp() const;
  void clear_level_up_timestamp();
  static const int kLevelUpTimestampFieldNumber = 6;
  ::google::protobuf::int64 level_up_timestamp() const;
  void set_level_up_timestamp(::google::protobuf::int64 value);

  // required int32 level = 4;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserMaelstromBuilding)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_level();
  void clear_has_level();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_level_up_timestamp();
  void clear_has_level_up_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 level_up_timestamp_;
  ::google::protobuf::int32 level_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMaelstromEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserMaelstromEvent) */ {
 public:
  UserMaelstromEvent();
  virtual ~UserMaelstromEvent();

  UserMaelstromEvent(const UserMaelstromEvent& from);

  inline UserMaelstromEvent& operator=(const UserMaelstromEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMaelstromEvent(UserMaelstromEvent&& from) noexcept
    : UserMaelstromEvent() {
    *this = ::std::move(from);
  }

  inline UserMaelstromEvent& operator=(UserMaelstromEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMaelstromEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMaelstromEvent* internal_default_instance() {
    return reinterpret_cast<const UserMaelstromEvent*>(
               &_UserMaelstromEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void UnsafeArenaSwap(UserMaelstromEvent* other);
  void Swap(UserMaelstromEvent* other);
  friend void swap(UserMaelstromEvent& a, UserMaelstromEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMaelstromEvent* New() const final {
    return CreateMaybeMessage<UserMaelstromEvent>(NULL);
  }

  UserMaelstromEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMaelstromEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMaelstromEvent& from);
  void MergeFrom(const UserMaelstromEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMaelstromEvent* other);
  protected:
  explicit UserMaelstromEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes pos = 5;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  const ::std::string& pos() const;
  void set_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_pos(::std::string&& value);
  #endif
  void set_pos(const char* value);
  void set_pos(const void* value, size_t size);
  ::std::string* mutable_pos();
  ::std::string* release_pos();
  void set_allocated_pos(::std::string* pos);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pos();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pos(
      ::std::string* pos);

  // required bytes data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 typeid = 3;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 3;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 level = 4;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserMaelstromEvent)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_level();
  void clear_has_level();
  void set_has_pos();
  void clear_has_pos();
  void set_has_state();
  void clear_has_state();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr pos_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserDungeonChest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserDungeonChest) */ {
 public:
  UserDungeonChest();
  virtual ~UserDungeonChest();

  UserDungeonChest(const UserDungeonChest& from);

  inline UserDungeonChest& operator=(const UserDungeonChest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDungeonChest(UserDungeonChest&& from) noexcept
    : UserDungeonChest() {
    *this = ::std::move(from);
  }

  inline UserDungeonChest& operator=(UserDungeonChest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDungeonChest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDungeonChest* internal_default_instance() {
    return reinterpret_cast<const UserDungeonChest*>(
               &_UserDungeonChest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void UnsafeArenaSwap(UserDungeonChest* other);
  void Swap(UserDungeonChest* other);
  friend void swap(UserDungeonChest& a, UserDungeonChest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDungeonChest* New() const final {
    return CreateMaybeMessage<UserDungeonChest>(NULL);
  }

  UserDungeonChest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserDungeonChest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserDungeonChest& from);
  void MergeFrom(const UserDungeonChest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDungeonChest* other);
  protected:
  explicit UserDungeonChest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required float add_probability = 3;
  bool has_add_probability() const;
  void clear_add_probability();
  static const int kAddProbabilityFieldNumber = 3;
  float add_probability() const;
  void set_add_probability(float value);

  // @@protoc_insertion_point(class_scope:db.UserDungeonChest)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();
  void set_has_add_probability();
  void clear_has_add_probability();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  float add_probability_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerInvadeRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.PlayerInvadeRecord) */ {
 public:
  PlayerInvadeRecord();
  virtual ~PlayerInvadeRecord();

  PlayerInvadeRecord(const PlayerInvadeRecord& from);

  inline PlayerInvadeRecord& operator=(const PlayerInvadeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInvadeRecord(PlayerInvadeRecord&& from) noexcept
    : PlayerInvadeRecord() {
    *this = ::std::move(from);
  }

  inline PlayerInvadeRecord& operator=(PlayerInvadeRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInvadeRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInvadeRecord* internal_default_instance() {
    return reinterpret_cast<const PlayerInvadeRecord*>(
               &_PlayerInvadeRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void UnsafeArenaSwap(PlayerInvadeRecord* other);
  void Swap(PlayerInvadeRecord* other);
  friend void swap(PlayerInvadeRecord& a, PlayerInvadeRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInvadeRecord* New() const final {
    return CreateMaybeMessage<PlayerInvadeRecord>(NULL);
  }

  PlayerInvadeRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInvadeRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerInvadeRecord& from);
  void MergeFrom(const PlayerInvadeRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInvadeRecord* other);
  protected:
  explicit PlayerInvadeRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes record_data = 4;
  bool has_record_data() const;
  void clear_record_data();
  static const int kRecordDataFieldNumber = 4;
  const ::std::string& record_data() const;
  void set_record_data(const ::std::string& value);
  #if LANG_CXX11
  void set_record_data(::std::string&& value);
  #endif
  void set_record_data(const char* value);
  void set_record_data(const void* value, size_t size);
  ::std::string* mutable_record_data();
  ::std::string* release_record_data();
  void set_allocated_record_data(::std::string* record_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_record_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_record_data(
      ::std::string* record_data);

  // required bytes revenge_reward = 5;
  bool has_revenge_reward() const;
  void clear_revenge_reward();
  static const int kRevengeRewardFieldNumber = 5;
  const ::std::string& revenge_reward() const;
  void set_revenge_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_revenge_reward(::std::string&& value);
  #endif
  void set_revenge_reward(const char* value);
  void set_revenge_reward(const void* value, size_t size);
  ::std::string* mutable_revenge_reward();
  ::std::string* release_revenge_reward();
  void set_allocated_revenge_reward(::std::string* revenge_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_revenge_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_revenge_reward(
      ::std::string* revenge_reward);

  // required int32 ticketid = 1;
  bool has_ticketid() const;
  void clear_ticketid();
  static const int kTicketidFieldNumber = 1;
  ::google::protobuf::int32 ticketid() const;
  void set_ticketid(::google::protobuf::int32 value);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required sfixed64 happened_time = 6;
  bool has_happened_time() const;
  void clear_happened_time();
  static const int kHappenedTimeFieldNumber = 6;
  ::google::protobuf::int64 happened_time() const;
  void set_happened_time(::google::protobuf::int64 value);

  // required sfixed64 deadline = 7;
  bool has_deadline() const;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 7;
  ::google::protobuf::int64 deadline() const;
  void set_deadline(::google::protobuf::int64 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.PlayerInvadeRecord)
 private:
  void set_has_ticketid();
  void clear_has_ticketid();
  void set_has_id();
  void clear_has_id();
  void set_has_state();
  void clear_has_state();
  void set_has_record_data();
  void clear_has_record_data();
  void set_has_revenge_reward();
  void clear_has_revenge_reward();
  void set_has_happened_time();
  void clear_has_happened_time();
  void set_has_deadline();
  void clear_has_deadline();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr record_data_;
  ::google::protobuf::internal::ArenaStringPtr revenge_reward_;
  ::google::protobuf::int32 ticketid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int64 happened_time_;
  ::google::protobuf::int64 deadline_;
  ::google::protobuf::int32 state_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerInvadeState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.PlayerInvadeState) */ {
 public:
  PlayerInvadeState();
  virtual ~PlayerInvadeState();

  PlayerInvadeState(const PlayerInvadeState& from);

  inline PlayerInvadeState& operator=(const PlayerInvadeState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInvadeState(PlayerInvadeState&& from) noexcept
    : PlayerInvadeState() {
    *this = ::std::move(from);
  }

  inline PlayerInvadeState& operator=(PlayerInvadeState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInvadeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInvadeState* internal_default_instance() {
    return reinterpret_cast<const PlayerInvadeState*>(
               &_PlayerInvadeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void UnsafeArenaSwap(PlayerInvadeState* other);
  void Swap(PlayerInvadeState* other);
  friend void swap(PlayerInvadeState& a, PlayerInvadeState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInvadeState* New() const final {
    return CreateMaybeMessage<PlayerInvadeState>(NULL);
  }

  PlayerInvadeState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInvadeState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerInvadeState& from);
  void MergeFrom(const PlayerInvadeState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInvadeState* other);
  protected:
  explicit PlayerInvadeState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes matched_player = 2;
  bool has_matched_player() const;
  void clear_matched_player();
  static const int kMatchedPlayerFieldNumber = 2;
  const ::std::string& matched_player() const;
  void set_matched_player(const ::std::string& value);
  #if LANG_CXX11
  void set_matched_player(::std::string&& value);
  #endif
  void set_matched_player(const char* value);
  void set_matched_player(const void* value, size_t size);
  ::std::string* mutable_matched_player();
  ::std::string* release_matched_player();
  void set_allocated_matched_player(::std::string* matched_player);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_matched_player();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_matched_player(
      ::std::string* matched_player);

  // optional bytes drop_get = 8;
  bool has_drop_get() const;
  void clear_drop_get();
  static const int kDropGetFieldNumber = 8;
  const ::std::string& drop_get() const;
  void set_drop_get(const ::std::string& value);
  #if LANG_CXX11
  void set_drop_get(::std::string&& value);
  #endif
  void set_drop_get(const char* value);
  void set_drop_get(const void* value, size_t size);
  ::std::string* mutable_drop_get();
  ::std::string* release_drop_get();
  void set_allocated_drop_get(::std::string* drop_get);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop_get();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop_get(
      ::std::string* drop_get);

  // required sfixed64 defend_deadline = 3;
  bool has_defend_deadline() const;
  void clear_defend_deadline();
  static const int kDefendDeadlineFieldNumber = 3;
  ::google::protobuf::int64 defend_deadline() const;
  void set_defend_deadline(::google::protobuf::int64 value);

  // required int32 ticketid = 1;
  bool has_ticketid() const;
  void clear_ticketid();
  static const int kTicketidFieldNumber = 1;
  ::google::protobuf::int32 ticketid() const;
  void set_ticketid(::google::protobuf::int32 value);

  // required int32 win = 5;
  bool has_win() const;
  void clear_win();
  static const int kWinFieldNumber = 5;
  ::google::protobuf::int32 win() const;
  void set_win(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required sfixed64 daily_timestamp = 7;
  bool has_daily_timestamp() const;
  void clear_daily_timestamp();
  static const int kDailyTimestampFieldNumber = 7;
  ::google::protobuf::int64 daily_timestamp() const;
  void set_daily_timestamp(::google::protobuf::int64 value);

  // required int32 navigation_times = 6;
  bool has_navigation_times() const;
  void clear_navigation_times();
  static const int kNavigationTimesFieldNumber = 6;
  ::google::protobuf::int32 navigation_times() const;
  void set_navigation_times(::google::protobuf::int32 value);

  // optional int32 score = 9;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 9;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.PlayerInvadeState)
 private:
  void set_has_ticketid();
  void clear_has_ticketid();
  void set_has_matched_player();
  void clear_has_matched_player();
  void set_has_defend_deadline();
  void clear_has_defend_deadline();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_win();
  void clear_has_win();
  void set_has_navigation_times();
  void clear_has_navigation_times();
  void set_has_daily_timestamp();
  void clear_has_daily_timestamp();
  void set_has_drop_get();
  void clear_has_drop_get();
  void set_has_score();
  void clear_has_score();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr matched_player_;
  ::google::protobuf::internal::ArenaStringPtr drop_get_;
  ::google::protobuf::int64 defend_deadline_;
  ::google::protobuf::int32 ticketid_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 daily_timestamp_;
  ::google::protobuf::int32 navigation_times_;
  ::google::protobuf::int32 score_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRoomModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserRoomModel) */ {
 public:
  UserRoomModel();
  virtual ~UserRoomModel();

  UserRoomModel(const UserRoomModel& from);

  inline UserRoomModel& operator=(const UserRoomModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRoomModel(UserRoomModel&& from) noexcept
    : UserRoomModel() {
    *this = ::std::move(from);
  }

  inline UserRoomModel& operator=(UserRoomModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRoomModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRoomModel* internal_default_instance() {
    return reinterpret_cast<const UserRoomModel*>(
               &_UserRoomModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void UnsafeArenaSwap(UserRoomModel* other);
  void Swap(UserRoomModel* other);
  friend void swap(UserRoomModel& a, UserRoomModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRoomModel* New() const final {
    return CreateMaybeMessage<UserRoomModel>(NULL);
  }

  UserRoomModel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRoomModel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRoomModel& from);
  void MergeFrom(const UserRoomModel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRoomModel* other);
  protected:
  explicit UserRoomModel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserRoomModel)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLogCostDiamond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserLogCostDiamond) */ {
 public:
  UserLogCostDiamond();
  virtual ~UserLogCostDiamond();

  UserLogCostDiamond(const UserLogCostDiamond& from);

  inline UserLogCostDiamond& operator=(const UserLogCostDiamond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLogCostDiamond(UserLogCostDiamond&& from) noexcept
    : UserLogCostDiamond() {
    *this = ::std::move(from);
  }

  inline UserLogCostDiamond& operator=(UserLogCostDiamond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogCostDiamond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogCostDiamond* internal_default_instance() {
    return reinterpret_cast<const UserLogCostDiamond*>(
               &_UserLogCostDiamond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void UnsafeArenaSwap(UserLogCostDiamond* other);
  void Swap(UserLogCostDiamond* other);
  friend void swap(UserLogCostDiamond& a, UserLogCostDiamond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogCostDiamond* New() const final {
    return CreateMaybeMessage<UserLogCostDiamond>(NULL);
  }

  UserLogCostDiamond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLogCostDiamond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLogCostDiamond& from);
  void MergeFrom(const UserLogCostDiamond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogCostDiamond* other);
  protected:
  explicit UserLogCostDiamond(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int64 param = 3;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 3;
  ::google::protobuf::int64 param() const;
  void set_param(::google::protobuf::int64 value);

  // required int32 way = 2;
  bool has_way() const;
  void clear_way();
  static const int kWayFieldNumber = 2;
  ::google::protobuf::int32 way() const;
  void set_way(::google::protobuf::int32 value);

  // required int32 cost_num = 4;
  bool has_cost_num() const;
  void clear_cost_num();
  static const int kCostNumFieldNumber = 4;
  ::google::protobuf::int32 cost_num() const;
  void set_cost_num(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserLogCostDiamond)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_way();
  void clear_has_way();
  void set_has_param();
  void clear_has_param();
  void set_has_cost_num();
  void clear_has_cost_num();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 param_;
  ::google::protobuf::int32 way_;
  ::google::protobuf::int32 cost_num_;
  ::google::protobuf::int64 timestamp_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLogCostItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserLogCostItem) */ {
 public:
  UserLogCostItem();
  virtual ~UserLogCostItem();

  UserLogCostItem(const UserLogCostItem& from);

  inline UserLogCostItem& operator=(const UserLogCostItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLogCostItem(UserLogCostItem&& from) noexcept
    : UserLogCostItem() {
    *this = ::std::move(from);
  }

  inline UserLogCostItem& operator=(UserLogCostItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogCostItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogCostItem* internal_default_instance() {
    return reinterpret_cast<const UserLogCostItem*>(
               &_UserLogCostItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void UnsafeArenaSwap(UserLogCostItem* other);
  void Swap(UserLogCostItem* other);
  friend void swap(UserLogCostItem& a, UserLogCostItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogCostItem* New() const final {
    return CreateMaybeMessage<UserLogCostItem>(NULL);
  }

  UserLogCostItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLogCostItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLogCostItem& from);
  void MergeFrom(const UserLogCostItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogCostItem* other);
  protected:
  explicit UserLogCostItem(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 item_typeid = 2;
  bool has_item_typeid() const;
  void clear_item_typeid();
  static const int kItemTypeidFieldNumber = 2;
  ::google::protobuf::int32 item_typeid() const;
  void set_item_typeid(::google::protobuf::int32 value);

  // required int32 item_num = 3;
  bool has_item_num() const;
  void clear_item_num();
  static const int kItemNumFieldNumber = 3;
  ::google::protobuf::int32 item_num() const;
  void set_item_num(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 way = 4;
  bool has_way() const;
  void clear_way();
  static const int kWayFieldNumber = 4;
  ::google::protobuf::int32 way() const;
  void set_way(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserLogCostItem)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_item_typeid();
  void clear_has_item_typeid();
  void set_has_item_num();
  void clear_has_item_num();
  void set_has_way();
  void clear_has_way();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 item_typeid_;
  ::google::protobuf::int32 item_num_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 way_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLogShopping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserLogShopping) */ {
 public:
  UserLogShopping();
  virtual ~UserLogShopping();

  UserLogShopping(const UserLogShopping& from);

  inline UserLogShopping& operator=(const UserLogShopping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLogShopping(UserLogShopping&& from) noexcept
    : UserLogShopping() {
    *this = ::std::move(from);
  }

  inline UserLogShopping& operator=(UserLogShopping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogShopping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogShopping* internal_default_instance() {
    return reinterpret_cast<const UserLogShopping*>(
               &_UserLogShopping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void UnsafeArenaSwap(UserLogShopping* other);
  void Swap(UserLogShopping* other);
  friend void swap(UserLogShopping& a, UserLogShopping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogShopping* New() const final {
    return CreateMaybeMessage<UserLogShopping>(NULL);
  }

  UserLogShopping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLogShopping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLogShopping& from);
  void MergeFrom(const UserLogShopping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogShopping* other);
  protected:
  explicit UserLogShopping(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 goods_typeid = 2;
  bool has_goods_typeid() const;
  void clear_goods_typeid();
  static const int kGoodsTypeidFieldNumber = 2;
  ::google::protobuf::int32 goods_typeid() const;
  void set_goods_typeid(::google::protobuf::int32 value);

  // required int32 goods_num = 3;
  bool has_goods_num() const;
  void clear_goods_num();
  static const int kGoodsNumFieldNumber = 3;
  ::google::protobuf::int32 goods_num() const;
  void set_goods_num(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 belong_store = 4;
  bool has_belong_store() const;
  void clear_belong_store();
  static const int kBelongStoreFieldNumber = 4;
  ::google::protobuf::int32 belong_store() const;
  void set_belong_store(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.UserLogShopping)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_goods_typeid();
  void clear_has_goods_typeid();
  void set_has_goods_num();
  void clear_has_goods_num();
  void set_has_belong_store();
  void clear_has_belong_store();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 goods_typeid_;
  ::google::protobuf::int32 goods_num_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 belong_store_;
  friend struct ::protobuf_UserDef_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserAttribute

// required bytes userid = 1;
inline bool UserAttribute::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAttribute::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAttribute::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAttribute::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserAttribute::userid() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.userid)
  return userid_.Get();
}
inline void UserAttribute::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserAttribute.userid)
}
#if LANG_CXX11
inline void UserAttribute::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserAttribute.userid)
}
#endif
inline void UserAttribute::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserAttribute.userid)
}
inline void UserAttribute::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserAttribute.userid)
}
inline ::std::string* UserAttribute::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserAttribute.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAttribute::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserAttribute.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAttribute::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserAttribute.userid)
}
inline ::std::string* UserAttribute::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserAttribute.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAttribute::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserAttribute.userid)
}

// required bytes nick = 2;
inline bool UserAttribute::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAttribute::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAttribute::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAttribute::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& UserAttribute::nick() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.nick)
  return nick_.Get();
}
inline void UserAttribute::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserAttribute.nick)
}
#if LANG_CXX11
inline void UserAttribute::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserAttribute.nick)
}
#endif
inline void UserAttribute::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserAttribute.nick)
}
inline void UserAttribute::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserAttribute.nick)
}
inline ::std::string* UserAttribute::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:db.UserAttribute.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAttribute::release_nick() {
  // @@protoc_insertion_point(field_release:db.UserAttribute.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAttribute::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserAttribute.nick)
}
inline ::std::string* UserAttribute::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserAttribute.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAttribute::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserAttribute.nick)
}

// required int32 level = 3;
inline bool UserAttribute::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserAttribute::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserAttribute::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserAttribute::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserAttribute::level() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.level)
  return level_;
}
inline void UserAttribute::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.level)
}

// required int32 exp = 4;
inline bool UserAttribute::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserAttribute::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserAttribute::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserAttribute::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 UserAttribute::exp() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.exp)
  return exp_;
}
inline void UserAttribute::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.exp)
}

// required int32 portrait = 5;
inline bool UserAttribute::has_portrait() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserAttribute::set_has_portrait() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserAttribute::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserAttribute::clear_portrait() {
  portrait_ = 0;
  clear_has_portrait();
}
inline ::google::protobuf::int32 UserAttribute::portrait() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.portrait)
  return portrait_;
}
inline void UserAttribute::set_portrait(::google::protobuf::int32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.portrait)
}

// required bytes signature = 6;
inline bool UserAttribute::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserAttribute::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserAttribute::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserAttribute::clear_signature() {
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_signature();
}
inline const ::std::string& UserAttribute::signature() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.signature)
  return signature_.Get();
}
inline void UserAttribute::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserAttribute.signature)
}
#if LANG_CXX11
inline void UserAttribute::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserAttribute.signature)
}
#endif
inline void UserAttribute::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserAttribute.signature)
}
inline void UserAttribute::set_signature(const void* value,
    size_t size) {
  set_has_signature();
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserAttribute.signature)
}
inline ::std::string* UserAttribute::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:db.UserAttribute.signature)
  return signature_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAttribute::release_signature() {
  // @@protoc_insertion_point(field_release:db.UserAttribute.signature)
  if (!has_signature()) {
    return NULL;
  }
  clear_has_signature();
  return signature_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAttribute::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserAttribute.signature)
}
inline ::std::string* UserAttribute::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserAttribute.signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_signature();
  return signature_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAttribute::unsafe_arena_set_allocated_signature(
    ::std::string* signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserAttribute.signature)
}

// required int32 rank = 7;
inline bool UserAttribute::has_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserAttribute::set_has_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserAttribute::clear_has_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserAttribute::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 UserAttribute::rank() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.rank)
  return rank_;
}
inline void UserAttribute::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.rank)
}

// required sfixed64 createtime = 8;
inline bool UserAttribute::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserAttribute::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserAttribute::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserAttribute::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 UserAttribute::createtime() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.createtime)
  return createtime_;
}
inline void UserAttribute::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.createtime)
}

// required sfixed64 optime = 11;
inline bool UserAttribute::has_optime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserAttribute::set_has_optime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserAttribute::clear_has_optime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserAttribute::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 UserAttribute::optime() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.optime)
  return optime_;
}
inline void UserAttribute::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.optime)
}

// required int32 ticketid = 12;
inline bool UserAttribute::has_ticketid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserAttribute::set_has_ticketid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserAttribute::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserAttribute::clear_ticketid() {
  ticketid_ = 0;
  clear_has_ticketid();
}
inline ::google::protobuf::int32 UserAttribute::ticketid() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.ticketid)
  return ticketid_;
}
inline void UserAttribute::set_ticketid(::google::protobuf::int32 value) {
  set_has_ticketid();
  ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.ticketid)
}

// optional int32 force = 13;
inline bool UserAttribute::has_force() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserAttribute::set_has_force() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserAttribute::clear_has_force() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserAttribute::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 UserAttribute::force() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.force)
  return force_;
}
inline void UserAttribute::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.force)
}

// optional bytes grow_gift = 14;
inline bool UserAttribute::has_grow_gift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserAttribute::set_has_grow_gift() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserAttribute::clear_has_grow_gift() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserAttribute::clear_grow_gift() {
  grow_gift_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_grow_gift();
}
inline const ::std::string& UserAttribute::grow_gift() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.grow_gift)
  return grow_gift_.Get();
}
inline void UserAttribute::set_grow_gift(const ::std::string& value) {
  set_has_grow_gift();
  grow_gift_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserAttribute.grow_gift)
}
#if LANG_CXX11
inline void UserAttribute::set_grow_gift(::std::string&& value) {
  set_has_grow_gift();
  grow_gift_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserAttribute.grow_gift)
}
#endif
inline void UserAttribute::set_grow_gift(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_grow_gift();
  grow_gift_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserAttribute.grow_gift)
}
inline void UserAttribute::set_grow_gift(const void* value,
    size_t size) {
  set_has_grow_gift();
  grow_gift_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserAttribute.grow_gift)
}
inline ::std::string* UserAttribute::mutable_grow_gift() {
  set_has_grow_gift();
  // @@protoc_insertion_point(field_mutable:db.UserAttribute.grow_gift)
  return grow_gift_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAttribute::release_grow_gift() {
  // @@protoc_insertion_point(field_release:db.UserAttribute.grow_gift)
  if (!has_grow_gift()) {
    return NULL;
  }
  clear_has_grow_gift();
  return grow_gift_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAttribute::set_allocated_grow_gift(::std::string* grow_gift) {
  if (grow_gift != NULL) {
    set_has_grow_gift();
  } else {
    clear_has_grow_gift();
  }
  grow_gift_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grow_gift,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserAttribute.grow_gift)
}
inline ::std::string* UserAttribute::unsafe_arena_release_grow_gift() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserAttribute.grow_gift)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_grow_gift();
  return grow_gift_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAttribute::unsafe_arena_set_allocated_grow_gift(
    ::std::string* grow_gift) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (grow_gift != NULL) {
    set_has_grow_gift();
  } else {
    clear_has_grow_gift();
  }
  grow_gift_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      grow_gift, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserAttribute.grow_gift)
}

// optional sfixed64 last_rename_time = 15;
inline bool UserAttribute::has_last_rename_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserAttribute::set_has_last_rename_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserAttribute::clear_has_last_rename_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserAttribute::clear_last_rename_time() {
  last_rename_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_rename_time();
}
inline ::google::protobuf::int64 UserAttribute::last_rename_time() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.last_rename_time)
  return last_rename_time_;
}
inline void UserAttribute::set_last_rename_time(::google::protobuf::int64 value) {
  set_has_last_rename_time();
  last_rename_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.last_rename_time)
}

// optional int32 portrait_frame = 16;
inline bool UserAttribute::has_portrait_frame() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserAttribute::set_has_portrait_frame() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserAttribute::clear_has_portrait_frame() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserAttribute::clear_portrait_frame() {
  portrait_frame_ = 0;
  clear_has_portrait_frame();
}
inline ::google::protobuf::int32 UserAttribute::portrait_frame() const {
  // @@protoc_insertion_point(field_get:db.UserAttribute.portrait_frame)
  return portrait_frame_;
}
inline void UserAttribute::set_portrait_frame(::google::protobuf::int32 value) {
  set_has_portrait_frame();
  portrait_frame_ = value;
  // @@protoc_insertion_point(field_set:db.UserAttribute.portrait_frame)
}

// -------------------------------------------------------------------

// UserShip

// required bytes userid = 1;
inline bool UserShip::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserShip::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserShip::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserShip::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserShip::userid() const {
  // @@protoc_insertion_point(field_get:db.UserShip.userid)
  return userid_.Get();
}
inline void UserShip::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShip.userid)
}
#if LANG_CXX11
inline void UserShip::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShip.userid)
}
#endif
inline void UserShip::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShip.userid)
}
inline void UserShip::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShip.userid)
}
inline ::std::string* UserShip::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserShip.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShip::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserShip.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShip::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShip.userid)
}
inline ::std::string* UserShip::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShip.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShip::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShip.userid)
}

// required int32 ship_model = 2;
inline bool UserShip::has_ship_model() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserShip::set_has_ship_model() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserShip::clear_has_ship_model() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserShip::clear_ship_model() {
  ship_model_ = 0;
  clear_has_ship_model();
}
inline ::google::protobuf::int32 UserShip::ship_model() const {
  // @@protoc_insertion_point(field_get:db.UserShip.ship_model)
  return ship_model_;
}
inline void UserShip::set_ship_model(::google::protobuf::int32 value) {
  set_has_ship_model();
  ship_model_ = value;
  // @@protoc_insertion_point(field_set:db.UserShip.ship_model)
}

// required bytes ship = 3;
inline bool UserShip::has_ship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserShip::set_has_ship() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserShip::clear_has_ship() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserShip::clear_ship() {
  ship_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ship();
}
inline const ::std::string& UserShip::ship() const {
  // @@protoc_insertion_point(field_get:db.UserShip.ship)
  return ship_.Get();
}
inline void UserShip::set_ship(const ::std::string& value) {
  set_has_ship();
  ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShip.ship)
}
#if LANG_CXX11
inline void UserShip::set_ship(::std::string&& value) {
  set_has_ship();
  ship_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShip.ship)
}
#endif
inline void UserShip::set_ship(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ship();
  ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShip.ship)
}
inline void UserShip::set_ship(const void* value,
    size_t size) {
  set_has_ship();
  ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShip.ship)
}
inline ::std::string* UserShip::mutable_ship() {
  set_has_ship();
  // @@protoc_insertion_point(field_mutable:db.UserShip.ship)
  return ship_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShip::release_ship() {
  // @@protoc_insertion_point(field_release:db.UserShip.ship)
  if (!has_ship()) {
    return NULL;
  }
  clear_has_ship();
  return ship_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShip::set_allocated_ship(::std::string* ship) {
  if (ship != NULL) {
    set_has_ship();
  } else {
    clear_has_ship();
  }
  ship_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ship,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShip.ship)
}
inline ::std::string* UserShip::unsafe_arena_release_ship() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShip.ship)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ship();
  return ship_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShip::unsafe_arena_set_allocated_ship(
    ::std::string* ship) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ship != NULL) {
    set_has_ship();
  } else {
    clear_has_ship();
  }
  ship_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ship, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShip.ship)
}

// required bytes ship_tiles = 4;
inline bool UserShip::has_ship_tiles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserShip::set_has_ship_tiles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserShip::clear_has_ship_tiles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserShip::clear_ship_tiles() {
  ship_tiles_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ship_tiles();
}
inline const ::std::string& UserShip::ship_tiles() const {
  // @@protoc_insertion_point(field_get:db.UserShip.ship_tiles)
  return ship_tiles_.Get();
}
inline void UserShip::set_ship_tiles(const ::std::string& value) {
  set_has_ship_tiles();
  ship_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShip.ship_tiles)
}
#if LANG_CXX11
inline void UserShip::set_ship_tiles(::std::string&& value) {
  set_has_ship_tiles();
  ship_tiles_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShip.ship_tiles)
}
#endif
inline void UserShip::set_ship_tiles(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ship_tiles();
  ship_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShip.ship_tiles)
}
inline void UserShip::set_ship_tiles(const void* value,
    size_t size) {
  set_has_ship_tiles();
  ship_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShip.ship_tiles)
}
inline ::std::string* UserShip::mutable_ship_tiles() {
  set_has_ship_tiles();
  // @@protoc_insertion_point(field_mutable:db.UserShip.ship_tiles)
  return ship_tiles_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShip::release_ship_tiles() {
  // @@protoc_insertion_point(field_release:db.UserShip.ship_tiles)
  if (!has_ship_tiles()) {
    return NULL;
  }
  clear_has_ship_tiles();
  return ship_tiles_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShip::set_allocated_ship_tiles(::std::string* ship_tiles) {
  if (ship_tiles != NULL) {
    set_has_ship_tiles();
  } else {
    clear_has_ship_tiles();
  }
  ship_tiles_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ship_tiles,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShip.ship_tiles)
}
inline ::std::string* UserShip::unsafe_arena_release_ship_tiles() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShip.ship_tiles)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ship_tiles();
  return ship_tiles_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShip::unsafe_arena_set_allocated_ship_tiles(
    ::std::string* ship_tiles) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ship_tiles != NULL) {
    set_has_ship_tiles();
  } else {
    clear_has_ship_tiles();
  }
  ship_tiles_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ship_tiles, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShip.ship_tiles)
}

// required bytes facility = 5;
inline bool UserShip::has_facility() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserShip::set_has_facility() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserShip::clear_has_facility() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserShip::clear_facility() {
  facility_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_facility();
}
inline const ::std::string& UserShip::facility() const {
  // @@protoc_insertion_point(field_get:db.UserShip.facility)
  return facility_.Get();
}
inline void UserShip::set_facility(const ::std::string& value) {
  set_has_facility();
  facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShip.facility)
}
#if LANG_CXX11
inline void UserShip::set_facility(::std::string&& value) {
  set_has_facility();
  facility_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShip.facility)
}
#endif
inline void UserShip::set_facility(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_facility();
  facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShip.facility)
}
inline void UserShip::set_facility(const void* value,
    size_t size) {
  set_has_facility();
  facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShip.facility)
}
inline ::std::string* UserShip::mutable_facility() {
  set_has_facility();
  // @@protoc_insertion_point(field_mutable:db.UserShip.facility)
  return facility_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShip::release_facility() {
  // @@protoc_insertion_point(field_release:db.UserShip.facility)
  if (!has_facility()) {
    return NULL;
  }
  clear_has_facility();
  return facility_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShip::set_allocated_facility(::std::string* facility) {
  if (facility != NULL) {
    set_has_facility();
  } else {
    clear_has_facility();
  }
  facility_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facility,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShip.facility)
}
inline ::std::string* UserShip::unsafe_arena_release_facility() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShip.facility)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_facility();
  return facility_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShip::unsafe_arena_set_allocated_facility(
    ::std::string* facility) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (facility != NULL) {
    set_has_facility();
  } else {
    clear_has_facility();
  }
  facility_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      facility, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShip.facility)
}

// required int32 width = 6;
inline bool UserShip::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserShip::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserShip::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserShip::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 UserShip::width() const {
  // @@protoc_insertion_point(field_get:db.UserShip.width)
  return width_;
}
inline void UserShip::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:db.UserShip.width)
}

// required int32 height = 7;
inline bool UserShip::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserShip::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserShip::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserShip::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 UserShip::height() const {
  // @@protoc_insertion_point(field_get:db.UserShip.height)
  return height_;
}
inline void UserShip::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:db.UserShip.height)
}

// required bytes unlock_room = 8;
inline bool UserShip::has_unlock_room() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserShip::set_has_unlock_room() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserShip::clear_has_unlock_room() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserShip::clear_unlock_room() {
  unlock_room_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_unlock_room();
}
inline const ::std::string& UserShip::unlock_room() const {
  // @@protoc_insertion_point(field_get:db.UserShip.unlock_room)
  return unlock_room_.Get();
}
inline void UserShip::set_unlock_room(const ::std::string& value) {
  set_has_unlock_room();
  unlock_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShip.unlock_room)
}
#if LANG_CXX11
inline void UserShip::set_unlock_room(::std::string&& value) {
  set_has_unlock_room();
  unlock_room_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShip.unlock_room)
}
#endif
inline void UserShip::set_unlock_room(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_room();
  unlock_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShip.unlock_room)
}
inline void UserShip::set_unlock_room(const void* value,
    size_t size) {
  set_has_unlock_room();
  unlock_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShip.unlock_room)
}
inline ::std::string* UserShip::mutable_unlock_room() {
  set_has_unlock_room();
  // @@protoc_insertion_point(field_mutable:db.UserShip.unlock_room)
  return unlock_room_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShip::release_unlock_room() {
  // @@protoc_insertion_point(field_release:db.UserShip.unlock_room)
  if (!has_unlock_room()) {
    return NULL;
  }
  clear_has_unlock_room();
  return unlock_room_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShip::set_allocated_unlock_room(::std::string* unlock_room) {
  if (unlock_room != NULL) {
    set_has_unlock_room();
  } else {
    clear_has_unlock_room();
  }
  unlock_room_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_room,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShip.unlock_room)
}
inline ::std::string* UserShip::unsafe_arena_release_unlock_room() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShip.unlock_room)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_unlock_room();
  return unlock_room_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShip::unsafe_arena_set_allocated_unlock_room(
    ::std::string* unlock_room) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unlock_room != NULL) {
    set_has_unlock_room();
  } else {
    clear_has_unlock_room();
  }
  unlock_room_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unlock_room, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShip.unlock_room)
}

// -------------------------------------------------------------------

// UserRoom

// required bytes userid = 1;
inline bool UserRoom::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRoom::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRoom::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRoom::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserRoom::userid() const {
  // @@protoc_insertion_point(field_get:db.UserRoom.userid)
  return userid_.Get();
}
inline void UserRoom::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserRoom.userid)
}
#if LANG_CXX11
inline void UserRoom::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserRoom.userid)
}
#endif
inline void UserRoom::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserRoom.userid)
}
inline void UserRoom::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserRoom.userid)
}
inline ::std::string* UserRoom::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserRoom.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserRoom::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserRoom.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserRoom::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserRoom.userid)
}
inline ::std::string* UserRoom::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserRoom.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserRoom::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserRoom.userid)
}

// required int32 roomid = 2;
inline bool UserRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRoom::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 UserRoom::roomid() const {
  // @@protoc_insertion_point(field_get:db.UserRoom.roomid)
  return roomid_;
}
inline void UserRoom::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:db.UserRoom.roomid)
}

// required int32 room_type = 3;
inline bool UserRoom::has_room_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRoom::set_has_room_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRoom::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRoom::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 UserRoom::room_type() const {
  // @@protoc_insertion_point(field_get:db.UserRoom.room_type)
  return room_type_;
}
inline void UserRoom::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:db.UserRoom.room_type)
}

// required int32 orderid = 4;
inline bool UserRoom::has_orderid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRoom::set_has_orderid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRoom::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRoom::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 UserRoom::orderid() const {
  // @@protoc_insertion_point(field_get:db.UserRoom.orderid)
  return orderid_;
}
inline void UserRoom::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:db.UserRoom.orderid)
}

// required bytes room_struct = 5;
inline bool UserRoom::has_room_struct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRoom::set_has_room_struct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRoom::clear_has_room_struct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRoom::clear_room_struct() {
  room_struct_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_room_struct();
}
inline const ::std::string& UserRoom::room_struct() const {
  // @@protoc_insertion_point(field_get:db.UserRoom.room_struct)
  return room_struct_.Get();
}
inline void UserRoom::set_room_struct(const ::std::string& value) {
  set_has_room_struct();
  room_struct_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserRoom.room_struct)
}
#if LANG_CXX11
inline void UserRoom::set_room_struct(::std::string&& value) {
  set_has_room_struct();
  room_struct_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserRoom.room_struct)
}
#endif
inline void UserRoom::set_room_struct(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_room_struct();
  room_struct_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserRoom.room_struct)
}
inline void UserRoom::set_room_struct(const void* value,
    size_t size) {
  set_has_room_struct();
  room_struct_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserRoom.room_struct)
}
inline ::std::string* UserRoom::mutable_room_struct() {
  set_has_room_struct();
  // @@protoc_insertion_point(field_mutable:db.UserRoom.room_struct)
  return room_struct_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserRoom::release_room_struct() {
  // @@protoc_insertion_point(field_release:db.UserRoom.room_struct)
  if (!has_room_struct()) {
    return NULL;
  }
  clear_has_room_struct();
  return room_struct_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserRoom::set_allocated_room_struct(::std::string* room_struct) {
  if (room_struct != NULL) {
    set_has_room_struct();
  } else {
    clear_has_room_struct();
  }
  room_struct_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_struct,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserRoom.room_struct)
}
inline ::std::string* UserRoom::unsafe_arena_release_room_struct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserRoom.room_struct)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_room_struct();
  return room_struct_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserRoom::unsafe_arena_set_allocated_room_struct(
    ::std::string* room_struct) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_struct != NULL) {
    set_has_room_struct();
  } else {
    clear_has_room_struct();
  }
  room_struct_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_struct, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserRoom.room_struct)
}

// required int32 state = 6;
inline bool UserRoom::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRoom::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRoom::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRoom::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserRoom::state() const {
  // @@protoc_insertion_point(field_get:db.UserRoom.state)
  return state_;
}
inline void UserRoom::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserRoom.state)
}

// optional int32 region = 7;
inline bool UserRoom::has_region() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserRoom::set_has_region() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserRoom::clear_has_region() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserRoom::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 UserRoom::region() const {
  // @@protoc_insertion_point(field_get:db.UserRoom.region)
  return region_;
}
inline void UserRoom::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:db.UserRoom.region)
}

// -------------------------------------------------------------------

// UserSailor

// required bytes userid = 1;
inline bool UserSailor::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSailor::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSailor::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSailor::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserSailor::userid() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.userid)
  return userid_.Get();
}
inline void UserSailor::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserSailor.userid)
}
#if LANG_CXX11
inline void UserSailor::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserSailor.userid)
}
#endif
inline void UserSailor::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserSailor.userid)
}
inline void UserSailor::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserSailor.userid)
}
inline ::std::string* UserSailor::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserSailor.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserSailor::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserSailor.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserSailor::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserSailor.userid)
}
inline ::std::string* UserSailor::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserSailor.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserSailor::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserSailor.userid)
}

// required int32 id = 2;
inline bool UserSailor::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSailor::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSailor::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSailor::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserSailor::id() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.id)
  return id_;
}
inline void UserSailor::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.id)
}

// required int32 typeid = 3;
inline bool UserSailor::has_typeid_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSailor::set_has_typeid_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSailor::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSailor::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 UserSailor::typeid_() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.typeid)
  return typeid__;
}
inline void UserSailor::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.typeid)
}

// required int32 state = 4;
inline bool UserSailor::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserSailor::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserSailor::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserSailor::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserSailor::state() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.state)
  return state_;
}
inline void UserSailor::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.state)
}

// required uint64 place = 5;
inline bool UserSailor::has_place() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSailor::set_has_place() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSailor::clear_has_place() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSailor::clear_place() {
  place_ = GOOGLE_ULONGLONG(0);
  clear_has_place();
}
inline ::google::protobuf::uint64 UserSailor::place() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.place)
  return place_;
}
inline void UserSailor::set_place(::google::protobuf::uint64 value) {
  set_has_place();
  place_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.place)
}

// required int32 facility_id = 6;
inline bool UserSailor::has_facility_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserSailor::set_has_facility_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserSailor::clear_has_facility_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserSailor::clear_facility_id() {
  facility_id_ = 0;
  clear_has_facility_id();
}
inline ::google::protobuf::int32 UserSailor::facility_id() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.facility_id)
  return facility_id_;
}
inline void UserSailor::set_facility_id(::google::protobuf::int32 value) {
  set_has_facility_id();
  facility_id_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.facility_id)
}

// required int32 level = 7;
inline bool UserSailor::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserSailor::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserSailor::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserSailor::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserSailor::level() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.level)
  return level_;
}
inline void UserSailor::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.level)
}

// required int32 star = 8;
inline bool UserSailor::has_star() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserSailor::set_has_star() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserSailor::clear_has_star() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserSailor::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 UserSailor::star() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.star)
  return star_;
}
inline void UserSailor::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.star)
}

// required int32 phase = 9;
inline bool UserSailor::has_phase() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserSailor::set_has_phase() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserSailor::clear_has_phase() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserSailor::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 UserSailor::phase() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.phase)
  return phase_;
}
inline void UserSailor::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.phase)
}

// required int32 hp_lost = 10;
inline bool UserSailor::has_hp_lost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserSailor::set_has_hp_lost() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserSailor::clear_has_hp_lost() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserSailor::clear_hp_lost() {
  hp_lost_ = 0;
  clear_has_hp_lost();
}
inline ::google::protobuf::int32 UserSailor::hp_lost() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.hp_lost)
  return hp_lost_;
}
inline void UserSailor::set_hp_lost(::google::protobuf::int32 value) {
  set_has_hp_lost();
  hp_lost_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.hp_lost)
}

// required float vim = 11;
inline bool UserSailor::has_vim() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserSailor::set_has_vim() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserSailor::clear_has_vim() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserSailor::clear_vim() {
  vim_ = 0;
  clear_has_vim();
}
inline float UserSailor::vim() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.vim)
  return vim_;
}
inline void UserSailor::set_vim(float value) {
  set_has_vim();
  vim_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.vim)
}

// required int32 exp = 12;
inline bool UserSailor::has_exp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserSailor::set_has_exp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserSailor::clear_has_exp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserSailor::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 UserSailor::exp() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.exp)
  return exp_;
}
inline void UserSailor::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.exp)
}

// required int32 orderid = 14;
inline bool UserSailor::has_orderid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserSailor::set_has_orderid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserSailor::clear_has_orderid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserSailor::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 UserSailor::orderid() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.orderid)
  return orderid_;
}
inline void UserSailor::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.orderid)
}

// required sfixed64 last_rest_time = 15;
inline bool UserSailor::has_last_rest_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserSailor::set_has_last_rest_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserSailor::clear_has_last_rest_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserSailor::clear_last_rest_time() {
  last_rest_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_rest_time();
}
inline ::google::protobuf::int64 UserSailor::last_rest_time() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.last_rest_time)
  return last_rest_time_;
}
inline void UserSailor::set_last_rest_time(::google::protobuf::int64 value) {
  set_has_last_rest_time();
  last_rest_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.last_rest_time)
}

// required int32 job = 16;
inline bool UserSailor::has_job() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserSailor::set_has_job() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserSailor::clear_has_job() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserSailor::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 UserSailor::job() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.job)
  return job_;
}
inline void UserSailor::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.job)
}

// required bytes conduct_list = 17;
inline bool UserSailor::has_conduct_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSailor::set_has_conduct_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSailor::clear_has_conduct_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSailor::clear_conduct_list() {
  conduct_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_conduct_list();
}
inline const ::std::string& UserSailor::conduct_list() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.conduct_list)
  return conduct_list_.Get();
}
inline void UserSailor::set_conduct_list(const ::std::string& value) {
  set_has_conduct_list();
  conduct_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserSailor.conduct_list)
}
#if LANG_CXX11
inline void UserSailor::set_conduct_list(::std::string&& value) {
  set_has_conduct_list();
  conduct_list_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserSailor.conduct_list)
}
#endif
inline void UserSailor::set_conduct_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_conduct_list();
  conduct_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserSailor.conduct_list)
}
inline void UserSailor::set_conduct_list(const void* value,
    size_t size) {
  set_has_conduct_list();
  conduct_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserSailor.conduct_list)
}
inline ::std::string* UserSailor::mutable_conduct_list() {
  set_has_conduct_list();
  // @@protoc_insertion_point(field_mutable:db.UserSailor.conduct_list)
  return conduct_list_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserSailor::release_conduct_list() {
  // @@protoc_insertion_point(field_release:db.UserSailor.conduct_list)
  if (!has_conduct_list()) {
    return NULL;
  }
  clear_has_conduct_list();
  return conduct_list_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserSailor::set_allocated_conduct_list(::std::string* conduct_list) {
  if (conduct_list != NULL) {
    set_has_conduct_list();
  } else {
    clear_has_conduct_list();
  }
  conduct_list_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conduct_list,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserSailor.conduct_list)
}
inline ::std::string* UserSailor::unsafe_arena_release_conduct_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserSailor.conduct_list)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_conduct_list();
  return conduct_list_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserSailor::unsafe_arena_set_allocated_conduct_list(
    ::std::string* conduct_list) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (conduct_list != NULL) {
    set_has_conduct_list();
  } else {
    clear_has_conduct_list();
  }
  conduct_list_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      conduct_list, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserSailor.conduct_list)
}

// optional int32 practice = 18;
inline bool UserSailor::has_practice() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserSailor::set_has_practice() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserSailor::clear_has_practice() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserSailor::clear_practice() {
  practice_ = 0;
  clear_has_practice();
}
inline ::google::protobuf::int32 UserSailor::practice() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.practice)
  return practice_;
}
inline void UserSailor::set_practice(::google::protobuf::int32 value) {
  set_has_practice();
  practice_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.practice)
}

// optional int32 region = 19;
inline bool UserSailor::has_region() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserSailor::set_has_region() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserSailor::clear_has_region() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserSailor::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 UserSailor::region() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.region)
  return region_;
}
inline void UserSailor::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.region)
}

// optional float hunger = 20;
inline bool UserSailor::has_hunger() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserSailor::set_has_hunger() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserSailor::clear_has_hunger() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserSailor::clear_hunger() {
  hunger_ = 0;
  clear_has_hunger();
}
inline float UserSailor::hunger() const {
  // @@protoc_insertion_point(field_get:db.UserSailor.hunger)
  return hunger_;
}
inline void UserSailor::set_hunger(float value) {
  set_has_hunger();
  hunger_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailor.hunger)
}

// -------------------------------------------------------------------

// UserSailorEquip

// required bytes userid = 1;
inline bool UserSailorEquip::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSailorEquip::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSailorEquip::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSailorEquip::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserSailorEquip::userid() const {
  // @@protoc_insertion_point(field_get:db.UserSailorEquip.userid)
  return userid_.Get();
}
inline void UserSailorEquip::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserSailorEquip.userid)
}
#if LANG_CXX11
inline void UserSailorEquip::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserSailorEquip.userid)
}
#endif
inline void UserSailorEquip::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserSailorEquip.userid)
}
inline void UserSailorEquip::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserSailorEquip.userid)
}
inline ::std::string* UserSailorEquip::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserSailorEquip.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserSailorEquip::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserSailorEquip.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserSailorEquip::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserSailorEquip.userid)
}
inline ::std::string* UserSailorEquip::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserSailorEquip.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserSailorEquip::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserSailorEquip.userid)
}

// required int32 id = 2;
inline bool UserSailorEquip::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSailorEquip::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSailorEquip::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSailorEquip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserSailorEquip::id() const {
  // @@protoc_insertion_point(field_get:db.UserSailorEquip.id)
  return id_;
}
inline void UserSailorEquip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorEquip.id)
}

// required int32 part = 3;
inline bool UserSailorEquip::has_part() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSailorEquip::set_has_part() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSailorEquip::clear_has_part() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSailorEquip::clear_part() {
  part_ = 0;
  clear_has_part();
}
inline ::google::protobuf::int32 UserSailorEquip::part() const {
  // @@protoc_insertion_point(field_get:db.UserSailorEquip.part)
  return part_;
}
inline void UserSailorEquip::set_part(::google::protobuf::int32 value) {
  set_has_part();
  part_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorEquip.part)
}

// required int32 equip_id = 4;
inline bool UserSailorEquip::has_equip_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSailorEquip::set_has_equip_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSailorEquip::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSailorEquip::clear_equip_id() {
  equip_id_ = 0;
  clear_has_equip_id();
}
inline ::google::protobuf::int32 UserSailorEquip::equip_id() const {
  // @@protoc_insertion_point(field_get:db.UserSailorEquip.equip_id)
  return equip_id_;
}
inline void UserSailorEquip::set_equip_id(::google::protobuf::int32 value) {
  set_has_equip_id();
  equip_id_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorEquip.equip_id)
}

// -------------------------------------------------------------------

// UserItem

// required bytes userid = 1;
inline bool UserItem::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserItem::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserItem::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserItem::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserItem::userid() const {
  // @@protoc_insertion_point(field_get:db.UserItem.userid)
  return userid_.Get();
}
inline void UserItem::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserItem.userid)
}
#if LANG_CXX11
inline void UserItem::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserItem.userid)
}
#endif
inline void UserItem::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserItem.userid)
}
inline void UserItem::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserItem.userid)
}
inline ::std::string* UserItem::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserItem.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserItem::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserItem.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserItem::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserItem.userid)
}
inline ::std::string* UserItem::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserItem.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserItem::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserItem.userid)
}

// required int32 item_typeid = 2;
inline bool UserItem::has_item_typeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserItem::set_has_item_typeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserItem::clear_has_item_typeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserItem::clear_item_typeid() {
  item_typeid_ = 0;
  clear_has_item_typeid();
}
inline ::google::protobuf::int32 UserItem::item_typeid() const {
  // @@protoc_insertion_point(field_get:db.UserItem.item_typeid)
  return item_typeid_;
}
inline void UserItem::set_item_typeid(::google::protobuf::int32 value) {
  set_has_item_typeid();
  item_typeid_ = value;
  // @@protoc_insertion_point(field_set:db.UserItem.item_typeid)
}

// required int64 item_num = 3;
inline bool UserItem::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserItem::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserItem::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserItem::clear_item_num() {
  item_num_ = GOOGLE_LONGLONG(0);
  clear_has_item_num();
}
inline ::google::protobuf::int64 UserItem::item_num() const {
  // @@protoc_insertion_point(field_get:db.UserItem.item_num)
  return item_num_;
}
inline void UserItem::set_item_num(::google::protobuf::int64 value) {
  set_has_item_num();
  item_num_ = value;
  // @@protoc_insertion_point(field_set:db.UserItem.item_num)
}

// -------------------------------------------------------------------

// UserFacility

// required bytes userid = 1;
inline bool UserFacility::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFacility::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFacility::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFacility::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserFacility::userid() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.userid)
  return userid_.Get();
}
inline void UserFacility::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserFacility.userid)
}
#if LANG_CXX11
inline void UserFacility::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserFacility.userid)
}
#endif
inline void UserFacility::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserFacility.userid)
}
inline void UserFacility::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserFacility.userid)
}
inline ::std::string* UserFacility::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserFacility.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserFacility::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserFacility.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserFacility::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserFacility.userid)
}
inline ::std::string* UserFacility::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserFacility.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserFacility::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserFacility.userid)
}

// required int32 id = 2;
inline bool UserFacility::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserFacility::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserFacility::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserFacility::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserFacility::id() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.id)
  return id_;
}
inline void UserFacility::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.id)
}

// required int32 typeid = 3;
inline bool UserFacility::has_typeid_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserFacility::set_has_typeid_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserFacility::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserFacility::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 UserFacility::typeid_() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.typeid)
  return typeid__;
}
inline void UserFacility::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.typeid)
}

// required int32 style = 4;
inline bool UserFacility::has_style() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserFacility::set_has_style() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserFacility::clear_has_style() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserFacility::clear_style() {
  style_ = 0;
  clear_has_style();
}
inline ::google::protobuf::int32 UserFacility::style() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.style)
  return style_;
}
inline void UserFacility::set_style(::google::protobuf::int32 value) {
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.style)
}

// required bytes order_list = 5;
inline bool UserFacility::has_order_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFacility::set_has_order_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFacility::clear_has_order_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFacility::clear_order_list() {
  order_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_order_list();
}
inline const ::std::string& UserFacility::order_list() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.order_list)
  return order_list_.Get();
}
inline void UserFacility::set_order_list(const ::std::string& value) {
  set_has_order_list();
  order_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserFacility.order_list)
}
#if LANG_CXX11
inline void UserFacility::set_order_list(::std::string&& value) {
  set_has_order_list();
  order_list_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserFacility.order_list)
}
#endif
inline void UserFacility::set_order_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_list();
  order_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserFacility.order_list)
}
inline void UserFacility::set_order_list(const void* value,
    size_t size) {
  set_has_order_list();
  order_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserFacility.order_list)
}
inline ::std::string* UserFacility::mutable_order_list() {
  set_has_order_list();
  // @@protoc_insertion_point(field_mutable:db.UserFacility.order_list)
  return order_list_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserFacility::release_order_list() {
  // @@protoc_insertion_point(field_release:db.UserFacility.order_list)
  if (!has_order_list()) {
    return NULL;
  }
  clear_has_order_list();
  return order_list_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserFacility::set_allocated_order_list(::std::string* order_list) {
  if (order_list != NULL) {
    set_has_order_list();
  } else {
    clear_has_order_list();
  }
  order_list_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_list,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserFacility.order_list)
}
inline ::std::string* UserFacility::unsafe_arena_release_order_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserFacility.order_list)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_order_list();
  return order_list_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserFacility::unsafe_arena_set_allocated_order_list(
    ::std::string* order_list) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (order_list != NULL) {
    set_has_order_list();
  } else {
    clear_has_order_list();
  }
  order_list_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      order_list, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserFacility.order_list)
}

// required int32 roomid = 6;
inline bool UserFacility::has_roomid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserFacility::set_has_roomid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserFacility::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserFacility::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 UserFacility::roomid() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.roomid)
  return roomid_;
}
inline void UserFacility::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.roomid)
}

// required bytes worker_list = 7;
inline bool UserFacility::has_worker_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserFacility::set_has_worker_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserFacility::clear_has_worker_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserFacility::clear_worker_list() {
  worker_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_worker_list();
}
inline const ::std::string& UserFacility::worker_list() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.worker_list)
  return worker_list_.Get();
}
inline void UserFacility::set_worker_list(const ::std::string& value) {
  set_has_worker_list();
  worker_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserFacility.worker_list)
}
#if LANG_CXX11
inline void UserFacility::set_worker_list(::std::string&& value) {
  set_has_worker_list();
  worker_list_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserFacility.worker_list)
}
#endif
inline void UserFacility::set_worker_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_worker_list();
  worker_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserFacility.worker_list)
}
inline void UserFacility::set_worker_list(const void* value,
    size_t size) {
  set_has_worker_list();
  worker_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserFacility.worker_list)
}
inline ::std::string* UserFacility::mutable_worker_list() {
  set_has_worker_list();
  // @@protoc_insertion_point(field_mutable:db.UserFacility.worker_list)
  return worker_list_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserFacility::release_worker_list() {
  // @@protoc_insertion_point(field_release:db.UserFacility.worker_list)
  if (!has_worker_list()) {
    return NULL;
  }
  clear_has_worker_list();
  return worker_list_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserFacility::set_allocated_worker_list(::std::string* worker_list) {
  if (worker_list != NULL) {
    set_has_worker_list();
  } else {
    clear_has_worker_list();
  }
  worker_list_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_list,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserFacility.worker_list)
}
inline ::std::string* UserFacility::unsafe_arena_release_worker_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserFacility.worker_list)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_worker_list();
  return worker_list_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserFacility::unsafe_arena_set_allocated_worker_list(
    ::std::string* worker_list) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (worker_list != NULL) {
    set_has_worker_list();
  } else {
    clear_has_worker_list();
  }
  worker_list_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      worker_list, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserFacility.worker_list)
}

// required int32 pos_x = 8;
inline bool UserFacility::has_pos_x() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserFacility::set_has_pos_x() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserFacility::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserFacility::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 UserFacility::pos_x() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.pos_x)
  return pos_x_;
}
inline void UserFacility::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.pos_x)
}

// required int32 pos_y = 9;
inline bool UserFacility::has_pos_y() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserFacility::set_has_pos_y() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserFacility::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserFacility::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 UserFacility::pos_y() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.pos_y)
  return pos_y_;
}
inline void UserFacility::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.pos_y)
}

// required int32 level = 10;
inline bool UserFacility::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserFacility::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserFacility::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserFacility::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserFacility::level() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.level)
  return level_;
}
inline void UserFacility::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.level)
}

// optional int32 region = 11;
inline bool UserFacility::has_region() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserFacility::set_has_region() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserFacility::clear_has_region() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserFacility::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 UserFacility::region() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.region)
  return region_;
}
inline void UserFacility::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.region)
}

// optional bytes special_data = 12;
inline bool UserFacility::has_special_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserFacility::set_has_special_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserFacility::clear_has_special_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserFacility::clear_special_data() {
  special_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_special_data();
}
inline const ::std::string& UserFacility::special_data() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.special_data)
  return special_data_.Get();
}
inline void UserFacility::set_special_data(const ::std::string& value) {
  set_has_special_data();
  special_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserFacility.special_data)
}
#if LANG_CXX11
inline void UserFacility::set_special_data(::std::string&& value) {
  set_has_special_data();
  special_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserFacility.special_data)
}
#endif
inline void UserFacility::set_special_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_special_data();
  special_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserFacility.special_data)
}
inline void UserFacility::set_special_data(const void* value,
    size_t size) {
  set_has_special_data();
  special_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserFacility.special_data)
}
inline ::std::string* UserFacility::mutable_special_data() {
  set_has_special_data();
  // @@protoc_insertion_point(field_mutable:db.UserFacility.special_data)
  return special_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserFacility::release_special_data() {
  // @@protoc_insertion_point(field_release:db.UserFacility.special_data)
  if (!has_special_data()) {
    return NULL;
  }
  clear_has_special_data();
  return special_data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserFacility::set_allocated_special_data(::std::string* special_data) {
  if (special_data != NULL) {
    set_has_special_data();
  } else {
    clear_has_special_data();
  }
  special_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), special_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserFacility.special_data)
}
inline ::std::string* UserFacility::unsafe_arena_release_special_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserFacility.special_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_special_data();
  return special_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserFacility::unsafe_arena_set_allocated_special_data(
    ::std::string* special_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (special_data != NULL) {
    set_has_special_data();
  } else {
    clear_has_special_data();
  }
  special_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      special_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserFacility.special_data)
}

// optional int32 remain_food = 13;
inline bool UserFacility::has_remain_food() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserFacility::set_has_remain_food() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserFacility::clear_has_remain_food() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserFacility::clear_remain_food() {
  remain_food_ = 0;
  clear_has_remain_food();
}
inline ::google::protobuf::int32 UserFacility::remain_food() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.remain_food)
  return remain_food_;
}
inline void UserFacility::set_remain_food(::google::protobuf::int32 value) {
  set_has_remain_food();
  remain_food_ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.remain_food)
}

// optional bytes unlock_order_slot = 14;
inline bool UserFacility::has_unlock_order_slot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserFacility::set_has_unlock_order_slot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserFacility::clear_has_unlock_order_slot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserFacility::clear_unlock_order_slot() {
  unlock_order_slot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_unlock_order_slot();
}
inline const ::std::string& UserFacility::unlock_order_slot() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.unlock_order_slot)
  return unlock_order_slot_.Get();
}
inline void UserFacility::set_unlock_order_slot(const ::std::string& value) {
  set_has_unlock_order_slot();
  unlock_order_slot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserFacility.unlock_order_slot)
}
#if LANG_CXX11
inline void UserFacility::set_unlock_order_slot(::std::string&& value) {
  set_has_unlock_order_slot();
  unlock_order_slot_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserFacility.unlock_order_slot)
}
#endif
inline void UserFacility::set_unlock_order_slot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_order_slot();
  unlock_order_slot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserFacility.unlock_order_slot)
}
inline void UserFacility::set_unlock_order_slot(const void* value,
    size_t size) {
  set_has_unlock_order_slot();
  unlock_order_slot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserFacility.unlock_order_slot)
}
inline ::std::string* UserFacility::mutable_unlock_order_slot() {
  set_has_unlock_order_slot();
  // @@protoc_insertion_point(field_mutable:db.UserFacility.unlock_order_slot)
  return unlock_order_slot_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserFacility::release_unlock_order_slot() {
  // @@protoc_insertion_point(field_release:db.UserFacility.unlock_order_slot)
  if (!has_unlock_order_slot()) {
    return NULL;
  }
  clear_has_unlock_order_slot();
  return unlock_order_slot_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserFacility::set_allocated_unlock_order_slot(::std::string* unlock_order_slot) {
  if (unlock_order_slot != NULL) {
    set_has_unlock_order_slot();
  } else {
    clear_has_unlock_order_slot();
  }
  unlock_order_slot_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_order_slot,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserFacility.unlock_order_slot)
}
inline ::std::string* UserFacility::unsafe_arena_release_unlock_order_slot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserFacility.unlock_order_slot)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_unlock_order_slot();
  return unlock_order_slot_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserFacility::unsafe_arena_set_allocated_unlock_order_slot(
    ::std::string* unlock_order_slot) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unlock_order_slot != NULL) {
    set_has_unlock_order_slot();
  } else {
    clear_has_unlock_order_slot();
  }
  unlock_order_slot_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unlock_order_slot, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserFacility.unlock_order_slot)
}

// optional sfixed64 level_up_starttime = 15;
inline bool UserFacility::has_level_up_starttime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserFacility::set_has_level_up_starttime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserFacility::clear_has_level_up_starttime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserFacility::clear_level_up_starttime() {
  level_up_starttime_ = GOOGLE_LONGLONG(0);
  clear_has_level_up_starttime();
}
inline ::google::protobuf::int64 UserFacility::level_up_starttime() const {
  // @@protoc_insertion_point(field_get:db.UserFacility.level_up_starttime)
  return level_up_starttime_;
}
inline void UserFacility::set_level_up_starttime(::google::protobuf::int64 value) {
  set_has_level_up_starttime();
  level_up_starttime_ = value;
  // @@protoc_insertion_point(field_set:db.UserFacility.level_up_starttime)
}

// -------------------------------------------------------------------

// UserProduceOrder

// required bytes userid = 1;
inline bool UserProduceOrder::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserProduceOrder::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserProduceOrder::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserProduceOrder::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserProduceOrder::userid() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.userid)
  return userid_.Get();
}
inline void UserProduceOrder::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.userid)
}
#if LANG_CXX11
inline void UserProduceOrder::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserProduceOrder.userid)
}
#endif
inline void UserProduceOrder::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserProduceOrder.userid)
}
inline void UserProduceOrder::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserProduceOrder.userid)
}
inline ::std::string* UserProduceOrder::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserProduceOrder.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserProduceOrder::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserProduceOrder.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserProduceOrder::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserProduceOrder.userid)
}
inline ::std::string* UserProduceOrder::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserProduceOrder.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserProduceOrder::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserProduceOrder.userid)
}

// required int32 id = 2;
inline bool UserProduceOrder::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserProduceOrder::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserProduceOrder::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserProduceOrder::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserProduceOrder::id() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.id)
  return id_;
}
inline void UserProduceOrder::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.id)
}

// required int32 state = 3;
inline bool UserProduceOrder::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserProduceOrder::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserProduceOrder::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserProduceOrder::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserProduceOrder::state() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.state)
  return state_;
}
inline void UserProduceOrder::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.state)
}

// required int32 production_type = 4;
inline bool UserProduceOrder::has_production_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserProduceOrder::set_has_production_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserProduceOrder::clear_has_production_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserProduceOrder::clear_production_type() {
  production_type_ = 0;
  clear_has_production_type();
}
inline ::google::protobuf::int32 UserProduceOrder::production_type() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.production_type)
  return production_type_;
}
inline void UserProduceOrder::set_production_type(::google::protobuf::int32 value) {
  set_has_production_type();
  production_type_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.production_type)
}

// required int32 production = 5;
inline bool UserProduceOrder::has_production() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserProduceOrder::set_has_production() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserProduceOrder::clear_has_production() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserProduceOrder::clear_production() {
  production_ = 0;
  clear_has_production();
}
inline ::google::protobuf::int32 UserProduceOrder::production() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.production)
  return production_;
}
inline void UserProduceOrder::set_production(::google::protobuf::int32 value) {
  set_has_production();
  production_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.production)
}

// required bytes basics = 6;
inline bool UserProduceOrder::has_basics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserProduceOrder::set_has_basics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserProduceOrder::clear_has_basics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserProduceOrder::clear_basics() {
  basics_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_basics();
}
inline const ::std::string& UserProduceOrder::basics() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.basics)
  return basics_.Get();
}
inline void UserProduceOrder::set_basics(const ::std::string& value) {
  set_has_basics();
  basics_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.basics)
}
#if LANG_CXX11
inline void UserProduceOrder::set_basics(::std::string&& value) {
  set_has_basics();
  basics_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserProduceOrder.basics)
}
#endif
inline void UserProduceOrder::set_basics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_basics();
  basics_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserProduceOrder.basics)
}
inline void UserProduceOrder::set_basics(const void* value,
    size_t size) {
  set_has_basics();
  basics_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserProduceOrder.basics)
}
inline ::std::string* UserProduceOrder::mutable_basics() {
  set_has_basics();
  // @@protoc_insertion_point(field_mutable:db.UserProduceOrder.basics)
  return basics_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserProduceOrder::release_basics() {
  // @@protoc_insertion_point(field_release:db.UserProduceOrder.basics)
  if (!has_basics()) {
    return NULL;
  }
  clear_has_basics();
  return basics_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserProduceOrder::set_allocated_basics(::std::string* basics) {
  if (basics != NULL) {
    set_has_basics();
  } else {
    clear_has_basics();
  }
  basics_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basics,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserProduceOrder.basics)
}
inline ::std::string* UserProduceOrder::unsafe_arena_release_basics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserProduceOrder.basics)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_basics();
  return basics_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserProduceOrder::unsafe_arena_set_allocated_basics(
    ::std::string* basics) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (basics != NULL) {
    set_has_basics();
  } else {
    clear_has_basics();
  }
  basics_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      basics, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserProduceOrder.basics)
}

// required int32 output_num = 7;
inline bool UserProduceOrder::has_output_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserProduceOrder::set_has_output_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserProduceOrder::clear_has_output_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserProduceOrder::clear_output_num() {
  output_num_ = 0;
  clear_has_output_num();
}
inline ::google::protobuf::int32 UserProduceOrder::output_num() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.output_num)
  return output_num_;
}
inline void UserProduceOrder::set_output_num(::google::protobuf::int32 value) {
  set_has_output_num();
  output_num_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.output_num)
}

// required int32 circle_num = 8;
inline bool UserProduceOrder::has_circle_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserProduceOrder::set_has_circle_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserProduceOrder::clear_has_circle_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserProduceOrder::clear_circle_num() {
  circle_num_ = 0;
  clear_has_circle_num();
}
inline ::google::protobuf::int32 UserProduceOrder::circle_num() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.circle_num)
  return circle_num_;
}
inline void UserProduceOrder::set_circle_num(::google::protobuf::int32 value) {
  set_has_circle_num();
  circle_num_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.circle_num)
}

// required int32 finish_num = 9;
inline bool UserProduceOrder::has_finish_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserProduceOrder::set_has_finish_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserProduceOrder::clear_has_finish_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserProduceOrder::clear_finish_num() {
  finish_num_ = 0;
  clear_has_finish_num();
}
inline ::google::protobuf::int32 UserProduceOrder::finish_num() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.finish_num)
  return finish_num_;
}
inline void UserProduceOrder::set_finish_num(::google::protobuf::int32 value) {
  set_has_finish_num();
  finish_num_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.finish_num)
}

// required float speed = 10;
inline bool UserProduceOrder::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserProduceOrder::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserProduceOrder::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserProduceOrder::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float UserProduceOrder::speed() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.speed)
  return speed_;
}
inline void UserProduceOrder::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.speed)
}

// required float ratio = 11;
inline bool UserProduceOrder::has_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserProduceOrder::set_has_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserProduceOrder::clear_has_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserProduceOrder::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline float UserProduceOrder::ratio() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.ratio)
  return ratio_;
}
inline void UserProduceOrder::set_ratio(float value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.ratio)
}

// required sfixed64 timestamp = 12;
inline bool UserProduceOrder::has_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserProduceOrder::set_has_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserProduceOrder::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserProduceOrder::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserProduceOrder::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.timestamp)
  return timestamp_;
}
inline void UserProduceOrder::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.timestamp)
}

// required int32 pre_order = 13;
inline bool UserProduceOrder::has_pre_order() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserProduceOrder::set_has_pre_order() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserProduceOrder::clear_has_pre_order() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserProduceOrder::clear_pre_order() {
  pre_order_ = 0;
  clear_has_pre_order();
}
inline ::google::protobuf::int32 UserProduceOrder::pre_order() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.pre_order)
  return pre_order_;
}
inline void UserProduceOrder::set_pre_order(::google::protobuf::int32 value) {
  set_has_pre_order();
  pre_order_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.pre_order)
}

// required int32 next_order = 14;
inline bool UserProduceOrder::has_next_order() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserProduceOrder::set_has_next_order() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserProduceOrder::clear_has_next_order() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserProduceOrder::clear_next_order() {
  next_order_ = 0;
  clear_has_next_order();
}
inline ::google::protobuf::int32 UserProduceOrder::next_order() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.next_order)
  return next_order_;
}
inline void UserProduceOrder::set_next_order(::google::protobuf::int32 value) {
  set_has_next_order();
  next_order_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.next_order)
}

// optional float ratio_stamp = 15;
inline bool UserProduceOrder::has_ratio_stamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserProduceOrder::set_has_ratio_stamp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserProduceOrder::clear_has_ratio_stamp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserProduceOrder::clear_ratio_stamp() {
  ratio_stamp_ = 0;
  clear_has_ratio_stamp();
}
inline float UserProduceOrder::ratio_stamp() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.ratio_stamp)
  return ratio_stamp_;
}
inline void UserProduceOrder::set_ratio_stamp(float value) {
  set_has_ratio_stamp();
  ratio_stamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.ratio_stamp)
}

// optional bytes skill_influence = 16;
inline bool UserProduceOrder::has_skill_influence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserProduceOrder::set_has_skill_influence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserProduceOrder::clear_has_skill_influence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserProduceOrder::clear_skill_influence() {
  skill_influence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_skill_influence();
}
inline const ::std::string& UserProduceOrder::skill_influence() const {
  // @@protoc_insertion_point(field_get:db.UserProduceOrder.skill_influence)
  return skill_influence_.Get();
}
inline void UserProduceOrder::set_skill_influence(const ::std::string& value) {
  set_has_skill_influence();
  skill_influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserProduceOrder.skill_influence)
}
#if LANG_CXX11
inline void UserProduceOrder::set_skill_influence(::std::string&& value) {
  set_has_skill_influence();
  skill_influence_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserProduceOrder.skill_influence)
}
#endif
inline void UserProduceOrder::set_skill_influence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_skill_influence();
  skill_influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserProduceOrder.skill_influence)
}
inline void UserProduceOrder::set_skill_influence(const void* value,
    size_t size) {
  set_has_skill_influence();
  skill_influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserProduceOrder.skill_influence)
}
inline ::std::string* UserProduceOrder::mutable_skill_influence() {
  set_has_skill_influence();
  // @@protoc_insertion_point(field_mutable:db.UserProduceOrder.skill_influence)
  return skill_influence_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserProduceOrder::release_skill_influence() {
  // @@protoc_insertion_point(field_release:db.UserProduceOrder.skill_influence)
  if (!has_skill_influence()) {
    return NULL;
  }
  clear_has_skill_influence();
  return skill_influence_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserProduceOrder::set_allocated_skill_influence(::std::string* skill_influence) {
  if (skill_influence != NULL) {
    set_has_skill_influence();
  } else {
    clear_has_skill_influence();
  }
  skill_influence_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill_influence,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserProduceOrder.skill_influence)
}
inline ::std::string* UserProduceOrder::unsafe_arena_release_skill_influence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserProduceOrder.skill_influence)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_skill_influence();
  return skill_influence_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserProduceOrder::unsafe_arena_set_allocated_skill_influence(
    ::std::string* skill_influence) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (skill_influence != NULL) {
    set_has_skill_influence();
  } else {
    clear_has_skill_influence();
  }
  skill_influence_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      skill_influence, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserProduceOrder.skill_influence)
}

// -------------------------------------------------------------------

// UserNavigationState

// required bytes userid = 1;
inline bool UserNavigationState::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNavigationState::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNavigationState::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNavigationState::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserNavigationState::userid() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.userid)
  return userid_.Get();
}
inline void UserNavigationState::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserNavigationState.userid)
}
#if LANG_CXX11
inline void UserNavigationState::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserNavigationState.userid)
}
#endif
inline void UserNavigationState::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserNavigationState.userid)
}
inline void UserNavigationState::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserNavigationState.userid)
}
inline ::std::string* UserNavigationState::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserNavigationState.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserNavigationState::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserNavigationState.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserNavigationState::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserNavigationState.userid)
}
inline ::std::string* UserNavigationState::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserNavigationState.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserNavigationState::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserNavigationState.userid)
}

// required uint64 origin = 2;
inline bool UserNavigationState::has_origin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserNavigationState::set_has_origin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserNavigationState::clear_has_origin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserNavigationState::clear_origin() {
  origin_ = GOOGLE_ULONGLONG(0);
  clear_has_origin();
}
inline ::google::protobuf::uint64 UserNavigationState::origin() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.origin)
  return origin_;
}
inline void UserNavigationState::set_origin(::google::protobuf::uint64 value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.origin)
}

// required uint64 destination = 3;
inline bool UserNavigationState::has_destination() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserNavigationState::set_has_destination() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserNavigationState::clear_has_destination() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserNavigationState::clear_destination() {
  destination_ = GOOGLE_ULONGLONG(0);
  clear_has_destination();
}
inline ::google::protobuf::uint64 UserNavigationState::destination() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.destination)
  return destination_;
}
inline void UserNavigationState::set_destination(::google::protobuf::uint64 value) {
  set_has_destination();
  destination_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.destination)
}

// required sfixed64 start_date = 4;
inline bool UserNavigationState::has_start_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserNavigationState::set_has_start_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserNavigationState::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserNavigationState::clear_start_date() {
  start_date_ = GOOGLE_LONGLONG(0);
  clear_has_start_date();
}
inline ::google::protobuf::int64 UserNavigationState::start_date() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.start_date)
  return start_date_;
}
inline void UserNavigationState::set_start_date(::google::protobuf::int64 value) {
  set_has_start_date();
  start_date_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.start_date)
}

// required bytes path = 5;
inline bool UserNavigationState::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserNavigationState::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserNavigationState::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserNavigationState::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_path();
}
inline const ::std::string& UserNavigationState::path() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.path)
  return path_.Get();
}
inline void UserNavigationState::set_path(const ::std::string& value) {
  set_has_path();
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserNavigationState.path)
}
#if LANG_CXX11
inline void UserNavigationState::set_path(::std::string&& value) {
  set_has_path();
  path_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserNavigationState.path)
}
#endif
inline void UserNavigationState::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserNavigationState.path)
}
inline void UserNavigationState::set_path(const void* value,
    size_t size) {
  set_has_path();
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserNavigationState.path)
}
inline ::std::string* UserNavigationState::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:db.UserNavigationState.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserNavigationState::release_path() {
  // @@protoc_insertion_point(field_release:db.UserNavigationState.path)
  if (!has_path()) {
    return NULL;
  }
  clear_has_path();
  return path_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserNavigationState::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserNavigationState.path)
}
inline ::std::string* UserNavigationState::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserNavigationState.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_path();
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserNavigationState::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserNavigationState.path)
}

// optional int32 event_id = 6;
inline bool UserNavigationState::has_event_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserNavigationState::set_has_event_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserNavigationState::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserNavigationState::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 UserNavigationState::event_id() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.event_id)
  return event_id_;
}
inline void UserNavigationState::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.event_id)
}

// optional int32 event_state = 12;
inline bool UserNavigationState::has_event_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserNavigationState::set_has_event_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserNavigationState::clear_has_event_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserNavigationState::clear_event_state() {
  event_state_ = 0;
  clear_has_event_state();
}
inline ::google::protobuf::int32 UserNavigationState::event_state() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.event_state)
  return event_state_;
}
inline void UserNavigationState::set_event_state(::google::protobuf::int32 value) {
  set_has_event_state();
  event_state_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.event_state)
}

// optional int32 event_duration = 7;
inline bool UserNavigationState::has_event_duration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserNavigationState::set_has_event_duration() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserNavigationState::clear_has_event_duration() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserNavigationState::clear_event_duration() {
  event_duration_ = 0;
  clear_has_event_duration();
}
inline ::google::protobuf::int32 UserNavigationState::event_duration() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.event_duration)
  return event_duration_;
}
inline void UserNavigationState::set_event_duration(::google::protobuf::int32 value) {
  set_has_event_duration();
  event_duration_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.event_duration)
}

// optional bytes event_pos = 8;
inline bool UserNavigationState::has_event_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserNavigationState::set_has_event_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserNavigationState::clear_has_event_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserNavigationState::clear_event_pos() {
  event_pos_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_event_pos();
}
inline const ::std::string& UserNavigationState::event_pos() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.event_pos)
  return event_pos_.Get();
}
inline void UserNavigationState::set_event_pos(const ::std::string& value) {
  set_has_event_pos();
  event_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserNavigationState.event_pos)
}
#if LANG_CXX11
inline void UserNavigationState::set_event_pos(::std::string&& value) {
  set_has_event_pos();
  event_pos_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserNavigationState.event_pos)
}
#endif
inline void UserNavigationState::set_event_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_pos();
  event_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserNavigationState.event_pos)
}
inline void UserNavigationState::set_event_pos(const void* value,
    size_t size) {
  set_has_event_pos();
  event_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserNavigationState.event_pos)
}
inline ::std::string* UserNavigationState::mutable_event_pos() {
  set_has_event_pos();
  // @@protoc_insertion_point(field_mutable:db.UserNavigationState.event_pos)
  return event_pos_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserNavigationState::release_event_pos() {
  // @@protoc_insertion_point(field_release:db.UserNavigationState.event_pos)
  if (!has_event_pos()) {
    return NULL;
  }
  clear_has_event_pos();
  return event_pos_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserNavigationState::set_allocated_event_pos(::std::string* event_pos) {
  if (event_pos != NULL) {
    set_has_event_pos();
  } else {
    clear_has_event_pos();
  }
  event_pos_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_pos,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserNavigationState.event_pos)
}
inline ::std::string* UserNavigationState::unsafe_arena_release_event_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserNavigationState.event_pos)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_event_pos();
  return event_pos_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserNavigationState::unsafe_arena_set_allocated_event_pos(
    ::std::string* event_pos) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (event_pos != NULL) {
    set_has_event_pos();
  } else {
    clear_has_event_pos();
  }
  event_pos_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      event_pos, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserNavigationState.event_pos)
}

// optional bytes event_data = 9;
inline bool UserNavigationState::has_event_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserNavigationState::set_has_event_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserNavigationState::clear_has_event_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserNavigationState::clear_event_data() {
  event_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_event_data();
}
inline const ::std::string& UserNavigationState::event_data() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.event_data)
  return event_data_.Get();
}
inline void UserNavigationState::set_event_data(const ::std::string& value) {
  set_has_event_data();
  event_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserNavigationState.event_data)
}
#if LANG_CXX11
inline void UserNavigationState::set_event_data(::std::string&& value) {
  set_has_event_data();
  event_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserNavigationState.event_data)
}
#endif
inline void UserNavigationState::set_event_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_data();
  event_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserNavigationState.event_data)
}
inline void UserNavigationState::set_event_data(const void* value,
    size_t size) {
  set_has_event_data();
  event_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserNavigationState.event_data)
}
inline ::std::string* UserNavigationState::mutable_event_data() {
  set_has_event_data();
  // @@protoc_insertion_point(field_mutable:db.UserNavigationState.event_data)
  return event_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserNavigationState::release_event_data() {
  // @@protoc_insertion_point(field_release:db.UserNavigationState.event_data)
  if (!has_event_data()) {
    return NULL;
  }
  clear_has_event_data();
  return event_data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserNavigationState::set_allocated_event_data(::std::string* event_data) {
  if (event_data != NULL) {
    set_has_event_data();
  } else {
    clear_has_event_data();
  }
  event_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserNavigationState.event_data)
}
inline ::std::string* UserNavigationState::unsafe_arena_release_event_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserNavigationState.event_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_event_data();
  return event_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserNavigationState::unsafe_arena_set_allocated_event_data(
    ::std::string* event_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (event_data != NULL) {
    set_has_event_data();
  } else {
    clear_has_event_data();
  }
  event_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      event_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserNavigationState.event_data)
}

// optional int32 event_happened_times = 10;
inline bool UserNavigationState::has_event_happened_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserNavigationState::set_has_event_happened_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserNavigationState::clear_has_event_happened_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserNavigationState::clear_event_happened_times() {
  event_happened_times_ = 0;
  clear_has_event_happened_times();
}
inline ::google::protobuf::int32 UserNavigationState::event_happened_times() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.event_happened_times)
  return event_happened_times_;
}
inline void UserNavigationState::set_event_happened_times(::google::protobuf::int32 value) {
  set_has_event_happened_times();
  event_happened_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.event_happened_times)
}

// optional sfixed64 timestamp = 11;
inline bool UserNavigationState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserNavigationState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserNavigationState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserNavigationState::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserNavigationState::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.timestamp)
  return timestamp_;
}
inline void UserNavigationState::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.timestamp)
}

// optional int32 fast_reach_ticket = 13;
inline bool UserNavigationState::has_fast_reach_ticket() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserNavigationState::set_has_fast_reach_ticket() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserNavigationState::clear_has_fast_reach_ticket() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserNavigationState::clear_fast_reach_ticket() {
  fast_reach_ticket_ = 0;
  clear_has_fast_reach_ticket();
}
inline ::google::protobuf::int32 UserNavigationState::fast_reach_ticket() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.fast_reach_ticket)
  return fast_reach_ticket_;
}
inline void UserNavigationState::set_fast_reach_ticket(::google::protobuf::int32 value) {
  set_has_fast_reach_ticket();
  fast_reach_ticket_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.fast_reach_ticket)
}

// optional sfixed64 ticket_timestamp = 14;
inline bool UserNavigationState::has_ticket_timestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserNavigationState::set_has_ticket_timestamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserNavigationState::clear_has_ticket_timestamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserNavigationState::clear_ticket_timestamp() {
  ticket_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_ticket_timestamp();
}
inline ::google::protobuf::int64 UserNavigationState::ticket_timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.ticket_timestamp)
  return ticket_timestamp_;
}
inline void UserNavigationState::set_ticket_timestamp(::google::protobuf::int64 value) {
  set_has_ticket_timestamp();
  ticket_timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.ticket_timestamp)
}

// optional int32 first_tag = 15;
inline bool UserNavigationState::has_first_tag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserNavigationState::set_has_first_tag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserNavigationState::clear_has_first_tag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserNavigationState::clear_first_tag() {
  first_tag_ = 0;
  clear_has_first_tag();
}
inline ::google::protobuf::int32 UserNavigationState::first_tag() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationState.first_tag)
  return first_tag_;
}
inline void UserNavigationState::set_first_tag(::google::protobuf::int32 value) {
  set_has_first_tag();
  first_tag_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationState.first_tag)
}

// -------------------------------------------------------------------

// UserNavigationRecord

// required bytes userid = 1;
inline bool UserNavigationRecord::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNavigationRecord::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNavigationRecord::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNavigationRecord::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserNavigationRecord::userid() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationRecord.userid)
  return userid_.Get();
}
inline void UserNavigationRecord::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserNavigationRecord.userid)
}
#if LANG_CXX11
inline void UserNavigationRecord::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserNavigationRecord.userid)
}
#endif
inline void UserNavigationRecord::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserNavigationRecord.userid)
}
inline void UserNavigationRecord::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserNavigationRecord.userid)
}
inline ::std::string* UserNavigationRecord::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserNavigationRecord.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserNavigationRecord::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserNavigationRecord.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserNavigationRecord::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserNavigationRecord.userid)
}
inline ::std::string* UserNavigationRecord::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserNavigationRecord.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserNavigationRecord::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserNavigationRecord.userid)
}

// required int32 id = 2;
inline bool UserNavigationRecord::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserNavigationRecord::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserNavigationRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserNavigationRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserNavigationRecord::id() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationRecord.id)
  return id_;
}
inline void UserNavigationRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationRecord.id)
}

// required sfixed64 recently_visit_time = 3;
inline bool UserNavigationRecord::has_recently_visit_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserNavigationRecord::set_has_recently_visit_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserNavigationRecord::clear_has_recently_visit_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserNavigationRecord::clear_recently_visit_time() {
  recently_visit_time_ = GOOGLE_LONGLONG(0);
  clear_has_recently_visit_time();
}
inline ::google::protobuf::int64 UserNavigationRecord::recently_visit_time() const {
  // @@protoc_insertion_point(field_get:db.UserNavigationRecord.recently_visit_time)
  return recently_visit_time_;
}
inline void UserNavigationRecord::set_recently_visit_time(::google::protobuf::int64 value) {
  set_has_recently_visit_time();
  recently_visit_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserNavigationRecord.recently_visit_time)
}

// -------------------------------------------------------------------

// UserExploreState

// required bytes userid = 1;
inline bool UserExploreState::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserExploreState::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserExploreState::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserExploreState::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserExploreState::userid() const {
  // @@protoc_insertion_point(field_get:db.UserExploreState.userid)
  return userid_.Get();
}
inline void UserExploreState::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserExploreState.userid)
}
#if LANG_CXX11
inline void UserExploreState::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserExploreState.userid)
}
#endif
inline void UserExploreState::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserExploreState.userid)
}
inline void UserExploreState::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserExploreState.userid)
}
inline ::std::string* UserExploreState::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserExploreState.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserExploreState::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserExploreState.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserExploreState::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserExploreState.userid)
}
inline ::std::string* UserExploreState::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserExploreState.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserExploreState::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserExploreState.userid)
}

// required int32 location = 2;
inline bool UserExploreState::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserExploreState::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserExploreState::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserExploreState::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 UserExploreState::location() const {
  // @@protoc_insertion_point(field_get:db.UserExploreState.location)
  return location_;
}
inline void UserExploreState::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreState.location)
}

// required int32 step = 3;
inline bool UserExploreState::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserExploreState::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserExploreState::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserExploreState::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 UserExploreState::step() const {
  // @@protoc_insertion_point(field_get:db.UserExploreState.step)
  return step_;
}
inline void UserExploreState::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreState.step)
}

// required int32 pos_x = 4;
inline bool UserExploreState::has_pos_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserExploreState::set_has_pos_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserExploreState::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserExploreState::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 UserExploreState::pos_x() const {
  // @@protoc_insertion_point(field_get:db.UserExploreState.pos_x)
  return pos_x_;
}
inline void UserExploreState::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreState.pos_x)
}

// required int32 pos_y = 5;
inline bool UserExploreState::has_pos_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserExploreState::set_has_pos_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserExploreState::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserExploreState::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 UserExploreState::pos_y() const {
  // @@protoc_insertion_point(field_get:db.UserExploreState.pos_y)
  return pos_y_;
}
inline void UserExploreState::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreState.pos_y)
}

// -------------------------------------------------------------------

// UserExploreStage

// required bytes userid = 1;
inline bool UserExploreStage::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserExploreStage::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserExploreStage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserExploreStage::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserExploreStage::userid() const {
  // @@protoc_insertion_point(field_get:db.UserExploreStage.userid)
  return userid_.Get();
}
inline void UserExploreStage::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserExploreStage.userid)
}
#if LANG_CXX11
inline void UserExploreStage::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserExploreStage.userid)
}
#endif
inline void UserExploreStage::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserExploreStage.userid)
}
inline void UserExploreStage::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserExploreStage.userid)
}
inline ::std::string* UserExploreStage::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserExploreStage.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserExploreStage::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserExploreStage.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserExploreStage::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserExploreStage.userid)
}
inline ::std::string* UserExploreStage::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserExploreStage.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserExploreStage::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserExploreStage.userid)
}

// required int32 id = 2;
inline bool UserExploreStage::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserExploreStage::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserExploreStage::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserExploreStage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserExploreStage::id() const {
  // @@protoc_insertion_point(field_get:db.UserExploreStage.id)
  return id_;
}
inline void UserExploreStage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreStage.id)
}

// required bytes fog = 3;
inline bool UserExploreStage::has_fog() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserExploreStage::set_has_fog() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserExploreStage::clear_has_fog() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserExploreStage::clear_fog() {
  fog_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_fog();
}
inline const ::std::string& UserExploreStage::fog() const {
  // @@protoc_insertion_point(field_get:db.UserExploreStage.fog)
  return fog_.Get();
}
inline void UserExploreStage::set_fog(const ::std::string& value) {
  set_has_fog();
  fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserExploreStage.fog)
}
#if LANG_CXX11
inline void UserExploreStage::set_fog(::std::string&& value) {
  set_has_fog();
  fog_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserExploreStage.fog)
}
#endif
inline void UserExploreStage::set_fog(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fog();
  fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserExploreStage.fog)
}
inline void UserExploreStage::set_fog(const void* value,
    size_t size) {
  set_has_fog();
  fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserExploreStage.fog)
}
inline ::std::string* UserExploreStage::mutable_fog() {
  set_has_fog();
  // @@protoc_insertion_point(field_mutable:db.UserExploreStage.fog)
  return fog_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserExploreStage::release_fog() {
  // @@protoc_insertion_point(field_release:db.UserExploreStage.fog)
  if (!has_fog()) {
    return NULL;
  }
  clear_has_fog();
  return fog_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserExploreStage::set_allocated_fog(::std::string* fog) {
  if (fog != NULL) {
    set_has_fog();
  } else {
    clear_has_fog();
  }
  fog_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fog,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserExploreStage.fog)
}
inline ::std::string* UserExploreStage::unsafe_arena_release_fog() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserExploreStage.fog)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_fog();
  return fog_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserExploreStage::unsafe_arena_set_allocated_fog(
    ::std::string* fog) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fog != NULL) {
    set_has_fog();
  } else {
    clear_has_fog();
  }
  fog_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fog, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserExploreStage.fog)
}

// -------------------------------------------------------------------

// UserExploreRecord

// required bytes userid = 1;
inline bool UserExploreRecord::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserExploreRecord::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserExploreRecord::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserExploreRecord::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserExploreRecord::userid() const {
  // @@protoc_insertion_point(field_get:db.UserExploreRecord.userid)
  return userid_.Get();
}
inline void UserExploreRecord::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserExploreRecord.userid)
}
#if LANG_CXX11
inline void UserExploreRecord::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserExploreRecord.userid)
}
#endif
inline void UserExploreRecord::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserExploreRecord.userid)
}
inline void UserExploreRecord::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserExploreRecord.userid)
}
inline ::std::string* UserExploreRecord::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserExploreRecord.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserExploreRecord::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserExploreRecord.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserExploreRecord::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserExploreRecord.userid)
}
inline ::std::string* UserExploreRecord::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserExploreRecord.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserExploreRecord::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserExploreRecord.userid)
}

// required int32 id = 2;
inline bool UserExploreRecord::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserExploreRecord::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserExploreRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserExploreRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserExploreRecord::id() const {
  // @@protoc_insertion_point(field_get:db.UserExploreRecord.id)
  return id_;
}
inline void UserExploreRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreRecord.id)
}

// required int32 type = 3;
inline bool UserExploreRecord::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserExploreRecord::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserExploreRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserExploreRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserExploreRecord::type() const {
  // @@protoc_insertion_point(field_get:db.UserExploreRecord.type)
  return type_;
}
inline void UserExploreRecord::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreRecord.type)
}

// required int32 object = 4;
inline bool UserExploreRecord::has_object() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserExploreRecord::set_has_object() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserExploreRecord::clear_has_object() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserExploreRecord::clear_object() {
  object_ = 0;
  clear_has_object();
}
inline ::google::protobuf::int32 UserExploreRecord::object() const {
  // @@protoc_insertion_point(field_get:db.UserExploreRecord.object)
  return object_;
}
inline void UserExploreRecord::set_object(::google::protobuf::int32 value) {
  set_has_object();
  object_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreRecord.object)
}

// required bytes content = 5;
inline bool UserExploreRecord::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserExploreRecord::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserExploreRecord::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserExploreRecord::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_content();
}
inline const ::std::string& UserExploreRecord::content() const {
  // @@protoc_insertion_point(field_get:db.UserExploreRecord.content)
  return content_.Get();
}
inline void UserExploreRecord::set_content(const ::std::string& value) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserExploreRecord.content)
}
#if LANG_CXX11
inline void UserExploreRecord::set_content(::std::string&& value) {
  set_has_content();
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserExploreRecord.content)
}
#endif
inline void UserExploreRecord::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserExploreRecord.content)
}
inline void UserExploreRecord::set_content(const void* value,
    size_t size) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserExploreRecord.content)
}
inline ::std::string* UserExploreRecord::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:db.UserExploreRecord.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserExploreRecord::release_content() {
  // @@protoc_insertion_point(field_release:db.UserExploreRecord.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserExploreRecord::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserExploreRecord.content)
}
inline ::std::string* UserExploreRecord::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserExploreRecord.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_content();
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserExploreRecord::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserExploreRecord.content)
}

// required sfixed64 timestamp = 6;
inline bool UserExploreRecord::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserExploreRecord::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserExploreRecord::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserExploreRecord::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserExploreRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserExploreRecord.timestamp)
  return timestamp_;
}
inline void UserExploreRecord::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreRecord.timestamp)
}

// -------------------------------------------------------------------

// UserExploreEvent

// required bytes userid = 1;
inline bool UserExploreEvent::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserExploreEvent::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserExploreEvent::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserExploreEvent::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserExploreEvent::userid() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.userid)
  return userid_.Get();
}
inline void UserExploreEvent::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.userid)
}
#if LANG_CXX11
inline void UserExploreEvent::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserExploreEvent.userid)
}
#endif
inline void UserExploreEvent::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserExploreEvent.userid)
}
inline void UserExploreEvent::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserExploreEvent.userid)
}
inline ::std::string* UserExploreEvent::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserExploreEvent.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserExploreEvent::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserExploreEvent.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserExploreEvent::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserExploreEvent.userid)
}
inline ::std::string* UserExploreEvent::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserExploreEvent.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserExploreEvent::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserExploreEvent.userid)
}

// required int32 id = 2;
inline bool UserExploreEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserExploreEvent::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserExploreEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserExploreEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserExploreEvent::id() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.id)
  return id_;
}
inline void UserExploreEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.id)
}

// required int32 state = 3;
inline bool UserExploreEvent::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserExploreEvent::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserExploreEvent::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserExploreEvent::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserExploreEvent::state() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.state)
  return state_;
}
inline void UserExploreEvent::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.state)
}

// required int32 type = 4;
inline bool UserExploreEvent::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserExploreEvent::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserExploreEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserExploreEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserExploreEvent::type() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.type)
  return type_;
}
inline void UserExploreEvent::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.type)
}

// required int32 typeid = 5;
inline bool UserExploreEvent::has_typeid_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserExploreEvent::set_has_typeid_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserExploreEvent::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserExploreEvent::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 UserExploreEvent::typeid_() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.typeid)
  return typeid__;
}
inline void UserExploreEvent::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.typeid)
}

// required int32 locale_type = 6;
inline bool UserExploreEvent::has_locale_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserExploreEvent::set_has_locale_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserExploreEvent::clear_has_locale_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserExploreEvent::clear_locale_type() {
  locale_type_ = 0;
  clear_has_locale_type();
}
inline ::google::protobuf::int32 UserExploreEvent::locale_type() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.locale_type)
  return locale_type_;
}
inline void UserExploreEvent::set_locale_type(::google::protobuf::int32 value) {
  set_has_locale_type();
  locale_type_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.locale_type)
}

// required int32 locale = 7;
inline bool UserExploreEvent::has_locale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserExploreEvent::set_has_locale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserExploreEvent::clear_has_locale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserExploreEvent::clear_locale() {
  locale_ = 0;
  clear_has_locale();
}
inline ::google::protobuf::int32 UserExploreEvent::locale() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.locale)
  return locale_;
}
inline void UserExploreEvent::set_locale(::google::protobuf::int32 value) {
  set_has_locale();
  locale_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.locale)
}

// required int32 pos_x = 8;
inline bool UserExploreEvent::has_pos_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserExploreEvent::set_has_pos_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserExploreEvent::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserExploreEvent::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 UserExploreEvent::pos_x() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.pos_x)
  return pos_x_;
}
inline void UserExploreEvent::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.pos_x)
}

// required int32 pos_y = 9;
inline bool UserExploreEvent::has_pos_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserExploreEvent::set_has_pos_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserExploreEvent::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserExploreEvent::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 UserExploreEvent::pos_y() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.pos_y)
  return pos_y_;
}
inline void UserExploreEvent::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.pos_y)
}

// required bytes content = 10;
inline bool UserExploreEvent::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserExploreEvent::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserExploreEvent::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserExploreEvent::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_content();
}
inline const ::std::string& UserExploreEvent::content() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.content)
  return content_.Get();
}
inline void UserExploreEvent::set_content(const ::std::string& value) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.content)
}
#if LANG_CXX11
inline void UserExploreEvent::set_content(::std::string&& value) {
  set_has_content();
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserExploreEvent.content)
}
#endif
inline void UserExploreEvent::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserExploreEvent.content)
}
inline void UserExploreEvent::set_content(const void* value,
    size_t size) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserExploreEvent.content)
}
inline ::std::string* UserExploreEvent::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:db.UserExploreEvent.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserExploreEvent::release_content() {
  // @@protoc_insertion_point(field_release:db.UserExploreEvent.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserExploreEvent::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserExploreEvent.content)
}
inline ::std::string* UserExploreEvent::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserExploreEvent.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_content();
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserExploreEvent::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserExploreEvent.content)
}

// required sfixed64 timestamp = 11;
inline bool UserExploreEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserExploreEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserExploreEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserExploreEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserExploreEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.timestamp)
  return timestamp_;
}
inline void UserExploreEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.timestamp)
}

// required sfixed64 deadline = 12;
inline bool UserExploreEvent::has_deadline() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserExploreEvent::set_has_deadline() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserExploreEvent::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserExploreEvent::clear_deadline() {
  deadline_ = GOOGLE_LONGLONG(0);
  clear_has_deadline();
}
inline ::google::protobuf::int64 UserExploreEvent::deadline() const {
  // @@protoc_insertion_point(field_get:db.UserExploreEvent.deadline)
  return deadline_;
}
inline void UserExploreEvent::set_deadline(::google::protobuf::int64 value) {
  set_has_deadline();
  deadline_ = value;
  // @@protoc_insertion_point(field_set:db.UserExploreEvent.deadline)
}

// -------------------------------------------------------------------

// ShoppingRecord

// required bytes userid = 1;
inline bool ShoppingRecord::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShoppingRecord::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShoppingRecord::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShoppingRecord::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& ShoppingRecord::userid() const {
  // @@protoc_insertion_point(field_get:db.ShoppingRecord.userid)
  return userid_.Get();
}
inline void ShoppingRecord::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ShoppingRecord.userid)
}
#if LANG_CXX11
inline void ShoppingRecord::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ShoppingRecord.userid)
}
#endif
inline void ShoppingRecord::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ShoppingRecord.userid)
}
inline void ShoppingRecord::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ShoppingRecord.userid)
}
inline ::std::string* ShoppingRecord::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.ShoppingRecord.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ShoppingRecord::release_userid() {
  // @@protoc_insertion_point(field_release:db.ShoppingRecord.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ShoppingRecord::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ShoppingRecord.userid)
}
inline ::std::string* ShoppingRecord::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ShoppingRecord.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ShoppingRecord::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ShoppingRecord.userid)
}

// required int32 id = 2;
inline bool ShoppingRecord::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShoppingRecord::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShoppingRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShoppingRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ShoppingRecord::id() const {
  // @@protoc_insertion_point(field_get:db.ShoppingRecord.id)
  return id_;
}
inline void ShoppingRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ShoppingRecord.id)
}

// required int32 goodsid = 3;
inline bool ShoppingRecord::has_goodsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShoppingRecord::set_has_goodsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShoppingRecord::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShoppingRecord::clear_goodsid() {
  goodsid_ = 0;
  clear_has_goodsid();
}
inline ::google::protobuf::int32 ShoppingRecord::goodsid() const {
  // @@protoc_insertion_point(field_get:db.ShoppingRecord.goodsid)
  return goodsid_;
}
inline void ShoppingRecord::set_goodsid(::google::protobuf::int32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:db.ShoppingRecord.goodsid)
}

// required sfixed64 begin_time = 4;
inline bool ShoppingRecord::has_begin_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShoppingRecord::set_has_begin_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShoppingRecord::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShoppingRecord::clear_begin_time() {
  begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::int64 ShoppingRecord::begin_time() const {
  // @@protoc_insertion_point(field_get:db.ShoppingRecord.begin_time)
  return begin_time_;
}
inline void ShoppingRecord::set_begin_time(::google::protobuf::int64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:db.ShoppingRecord.begin_time)
}

// required sfixed64 end_time = 5;
inline bool ShoppingRecord::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShoppingRecord::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShoppingRecord::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShoppingRecord::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 ShoppingRecord::end_time() const {
  // @@protoc_insertion_point(field_get:db.ShoppingRecord.end_time)
  return end_time_;
}
inline void ShoppingRecord::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:db.ShoppingRecord.end_time)
}

// required int32 goodsnum = 6;
inline bool ShoppingRecord::has_goodsnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShoppingRecord::set_has_goodsnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShoppingRecord::clear_has_goodsnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShoppingRecord::clear_goodsnum() {
  goodsnum_ = 0;
  clear_has_goodsnum();
}
inline ::google::protobuf::int32 ShoppingRecord::goodsnum() const {
  // @@protoc_insertion_point(field_get:db.ShoppingRecord.goodsnum)
  return goodsnum_;
}
inline void ShoppingRecord::set_goodsnum(::google::protobuf::int32 value) {
  set_has_goodsnum();
  goodsnum_ = value;
  // @@protoc_insertion_point(field_set:db.ShoppingRecord.goodsnum)
}

// -------------------------------------------------------------------

// UserWanted

// required bytes userid = 1;
inline bool UserWanted::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserWanted::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserWanted::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserWanted::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserWanted::userid() const {
  // @@protoc_insertion_point(field_get:db.UserWanted.userid)
  return userid_.Get();
}
inline void UserWanted::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserWanted.userid)
}
#if LANG_CXX11
inline void UserWanted::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserWanted.userid)
}
#endif
inline void UserWanted::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserWanted.userid)
}
inline void UserWanted::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserWanted.userid)
}
inline ::std::string* UserWanted::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserWanted.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserWanted::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserWanted.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserWanted::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserWanted.userid)
}
inline ::std::string* UserWanted::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserWanted.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserWanted::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserWanted.userid)
}

// required int32 id = 2;
inline bool UserWanted::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserWanted::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserWanted::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserWanted::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserWanted::id() const {
  // @@protoc_insertion_point(field_get:db.UserWanted.id)
  return id_;
}
inline void UserWanted::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserWanted.id)
}

// required int32 typeid = 3;
inline bool UserWanted::has_typeid_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserWanted::set_has_typeid_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserWanted::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserWanted::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 UserWanted::typeid_() const {
  // @@protoc_insertion_point(field_get:db.UserWanted.typeid)
  return typeid__;
}
inline void UserWanted::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.UserWanted.typeid)
}

// required int32 state = 4;
inline bool UserWanted::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserWanted::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserWanted::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserWanted::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserWanted::state() const {
  // @@protoc_insertion_point(field_get:db.UserWanted.state)
  return state_;
}
inline void UserWanted::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserWanted.state)
}

// required int32 place = 5;
inline bool UserWanted::has_place() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserWanted::set_has_place() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserWanted::clear_has_place() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserWanted::clear_place() {
  place_ = 0;
  clear_has_place();
}
inline ::google::protobuf::int32 UserWanted::place() const {
  // @@protoc_insertion_point(field_get:db.UserWanted.place)
  return place_;
}
inline void UserWanted::set_place(::google::protobuf::int32 value) {
  set_has_place();
  place_ = value;
  // @@protoc_insertion_point(field_set:db.UserWanted.place)
}

// required int32 pos_type = 6;
inline bool UserWanted::has_pos_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserWanted::set_has_pos_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserWanted::clear_has_pos_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserWanted::clear_pos_type() {
  pos_type_ = 0;
  clear_has_pos_type();
}
inline ::google::protobuf::int32 UserWanted::pos_type() const {
  // @@protoc_insertion_point(field_get:db.UserWanted.pos_type)
  return pos_type_;
}
inline void UserWanted::set_pos_type(::google::protobuf::int32 value) {
  set_has_pos_type();
  pos_type_ = value;
  // @@protoc_insertion_point(field_set:db.UserWanted.pos_type)
}

// required int32 pos_x = 7;
inline bool UserWanted::has_pos_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserWanted::set_has_pos_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserWanted::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserWanted::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 UserWanted::pos_x() const {
  // @@protoc_insertion_point(field_get:db.UserWanted.pos_x)
  return pos_x_;
}
inline void UserWanted::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:db.UserWanted.pos_x)
}

// required int32 pos_y = 8;
inline bool UserWanted::has_pos_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserWanted::set_has_pos_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserWanted::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserWanted::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 UserWanted::pos_y() const {
  // @@protoc_insertion_point(field_get:db.UserWanted.pos_y)
  return pos_y_;
}
inline void UserWanted::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:db.UserWanted.pos_y)
}

// required sfixed64 optime = 9;
inline bool UserWanted::has_optime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserWanted::set_has_optime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserWanted::clear_has_optime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserWanted::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 UserWanted::optime() const {
  // @@protoc_insertion_point(field_get:db.UserWanted.optime)
  return optime_;
}
inline void UserWanted::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.UserWanted.optime)
}

// -------------------------------------------------------------------

// UserTask

// required bytes userid = 1;
inline bool UserTask::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTask::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserTask::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserTask::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserTask::userid() const {
  // @@protoc_insertion_point(field_get:db.UserTask.userid)
  return userid_.Get();
}
inline void UserTask::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserTask.userid)
}
#if LANG_CXX11
inline void UserTask::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserTask.userid)
}
#endif
inline void UserTask::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserTask.userid)
}
inline void UserTask::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserTask.userid)
}
inline ::std::string* UserTask::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserTask.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserTask::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserTask.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserTask::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserTask.userid)
}
inline ::std::string* UserTask::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserTask.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserTask::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserTask.userid)
}

// required int32 id = 2;
inline bool UserTask::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserTask::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserTask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserTask::id() const {
  // @@protoc_insertion_point(field_get:db.UserTask.id)
  return id_;
}
inline void UserTask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserTask.id)
}

// required int32 state = 3;
inline bool UserTask::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserTask::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserTask::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserTask::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserTask::state() const {
  // @@protoc_insertion_point(field_get:db.UserTask.state)
  return state_;
}
inline void UserTask::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserTask.state)
}

// required int32 step = 4;
inline bool UserTask::has_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserTask::set_has_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserTask::clear_has_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserTask::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 UserTask::step() const {
  // @@protoc_insertion_point(field_get:db.UserTask.step)
  return step_;
}
inline void UserTask::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:db.UserTask.step)
}

// required bytes finish_value = 5;
inline bool UserTask::has_finish_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTask::set_has_finish_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserTask::clear_has_finish_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserTask::clear_finish_value() {
  finish_value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_finish_value();
}
inline const ::std::string& UserTask::finish_value() const {
  // @@protoc_insertion_point(field_get:db.UserTask.finish_value)
  return finish_value_.Get();
}
inline void UserTask::set_finish_value(const ::std::string& value) {
  set_has_finish_value();
  finish_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserTask.finish_value)
}
#if LANG_CXX11
inline void UserTask::set_finish_value(::std::string&& value) {
  set_has_finish_value();
  finish_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserTask.finish_value)
}
#endif
inline void UserTask::set_finish_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_finish_value();
  finish_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserTask.finish_value)
}
inline void UserTask::set_finish_value(const void* value,
    size_t size) {
  set_has_finish_value();
  finish_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserTask.finish_value)
}
inline ::std::string* UserTask::mutable_finish_value() {
  set_has_finish_value();
  // @@protoc_insertion_point(field_mutable:db.UserTask.finish_value)
  return finish_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserTask::release_finish_value() {
  // @@protoc_insertion_point(field_release:db.UserTask.finish_value)
  if (!has_finish_value()) {
    return NULL;
  }
  clear_has_finish_value();
  return finish_value_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserTask::set_allocated_finish_value(::std::string* finish_value) {
  if (finish_value != NULL) {
    set_has_finish_value();
  } else {
    clear_has_finish_value();
  }
  finish_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), finish_value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserTask.finish_value)
}
inline ::std::string* UserTask::unsafe_arena_release_finish_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserTask.finish_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_finish_value();
  return finish_value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserTask::unsafe_arena_set_allocated_finish_value(
    ::std::string* finish_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (finish_value != NULL) {
    set_has_finish_value();
  } else {
    clear_has_finish_value();
  }
  finish_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      finish_value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserTask.finish_value)
}

// -------------------------------------------------------------------

// UserNpc

// required bytes userid = 1;
inline bool UserNpc::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNpc::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNpc::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNpc::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserNpc::userid() const {
  // @@protoc_insertion_point(field_get:db.UserNpc.userid)
  return userid_.Get();
}
inline void UserNpc::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserNpc.userid)
}
#if LANG_CXX11
inline void UserNpc::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserNpc.userid)
}
#endif
inline void UserNpc::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserNpc.userid)
}
inline void UserNpc::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserNpc.userid)
}
inline ::std::string* UserNpc::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserNpc.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserNpc::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserNpc.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserNpc::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserNpc.userid)
}
inline ::std::string* UserNpc::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserNpc.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserNpc::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserNpc.userid)
}

// required int32 id = 2;
inline bool UserNpc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserNpc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserNpc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserNpc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserNpc::id() const {
  // @@protoc_insertion_point(field_get:db.UserNpc.id)
  return id_;
}
inline void UserNpc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserNpc.id)
}

// required int32 state = 3;
inline bool UserNpc::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserNpc::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserNpc::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserNpc::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserNpc::state() const {
  // @@protoc_insertion_point(field_get:db.UserNpc.state)
  return state_;
}
inline void UserNpc::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserNpc.state)
}

// required int32 place = 5;
inline bool UserNpc::has_place() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserNpc::set_has_place() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserNpc::clear_has_place() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserNpc::clear_place() {
  place_ = 0;
  clear_has_place();
}
inline ::google::protobuf::int32 UserNpc::place() const {
  // @@protoc_insertion_point(field_get:db.UserNpc.place)
  return place_;
}
inline void UserNpc::set_place(::google::protobuf::int32 value) {
  set_has_place();
  place_ = value;
  // @@protoc_insertion_point(field_set:db.UserNpc.place)
}

// required int32 pos_type = 6;
inline bool UserNpc::has_pos_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserNpc::set_has_pos_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserNpc::clear_has_pos_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserNpc::clear_pos_type() {
  pos_type_ = 0;
  clear_has_pos_type();
}
inline ::google::protobuf::int32 UserNpc::pos_type() const {
  // @@protoc_insertion_point(field_get:db.UserNpc.pos_type)
  return pos_type_;
}
inline void UserNpc::set_pos_type(::google::protobuf::int32 value) {
  set_has_pos_type();
  pos_type_ = value;
  // @@protoc_insertion_point(field_set:db.UserNpc.pos_type)
}

// required int32 pos_x = 7;
inline bool UserNpc::has_pos_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserNpc::set_has_pos_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserNpc::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserNpc::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 UserNpc::pos_x() const {
  // @@protoc_insertion_point(field_get:db.UserNpc.pos_x)
  return pos_x_;
}
inline void UserNpc::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:db.UserNpc.pos_x)
}

// required int32 pos_y = 8;
inline bool UserNpc::has_pos_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserNpc::set_has_pos_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserNpc::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserNpc::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 UserNpc::pos_y() const {
  // @@protoc_insertion_point(field_get:db.UserNpc.pos_y)
  return pos_y_;
}
inline void UserNpc::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:db.UserNpc.pos_y)
}

// -------------------------------------------------------------------

// UserManual

// required bytes userid = 1;
inline bool UserManual::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserManual::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserManual::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserManual::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserManual::userid() const {
  // @@protoc_insertion_point(field_get:db.UserManual.userid)
  return userid_.Get();
}
inline void UserManual::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserManual.userid)
}
#if LANG_CXX11
inline void UserManual::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserManual.userid)
}
#endif
inline void UserManual::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserManual.userid)
}
inline void UserManual::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserManual.userid)
}
inline ::std::string* UserManual::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserManual.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserManual::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserManual.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserManual::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserManual.userid)
}
inline ::std::string* UserManual::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserManual.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserManual::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserManual.userid)
}

// required int32 typeid = 2;
inline bool UserManual::has_typeid_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserManual::set_has_typeid_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserManual::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserManual::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 UserManual::typeid_() const {
  // @@protoc_insertion_point(field_get:db.UserManual.typeid)
  return typeid__;
}
inline void UserManual::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.UserManual.typeid)
}

// required sfixed64 optime = 3;
inline bool UserManual::has_optime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserManual::set_has_optime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserManual::clear_has_optime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserManual::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 UserManual::optime() const {
  // @@protoc_insertion_point(field_get:db.UserManual.optime)
  return optime_;
}
inline void UserManual::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.UserManual.optime)
}

// -------------------------------------------------------------------

// UserState

// required bytes userid = 1;
inline bool UserState::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserState::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserState::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserState::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserState::userid() const {
  // @@protoc_insertion_point(field_get:db.UserState.userid)
  return userid_.Get();
}
inline void UserState::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserState.userid)
}
#if LANG_CXX11
inline void UserState::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserState.userid)
}
#endif
inline void UserState::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserState.userid)
}
inline void UserState::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserState.userid)
}
inline ::std::string* UserState::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserState.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserState::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserState.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserState::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserState.userid)
}
inline ::std::string* UserState::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserState.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserState::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserState.userid)
}

// required bytes guide_val = 2;
inline bool UserState::has_guide_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserState::set_has_guide_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserState::clear_has_guide_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserState::clear_guide_val() {
  guide_val_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_guide_val();
}
inline const ::std::string& UserState::guide_val() const {
  // @@protoc_insertion_point(field_get:db.UserState.guide_val)
  return guide_val_.Get();
}
inline void UserState::set_guide_val(const ::std::string& value) {
  set_has_guide_val();
  guide_val_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserState.guide_val)
}
#if LANG_CXX11
inline void UserState::set_guide_val(::std::string&& value) {
  set_has_guide_val();
  guide_val_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserState.guide_val)
}
#endif
inline void UserState::set_guide_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guide_val();
  guide_val_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserState.guide_val)
}
inline void UserState::set_guide_val(const void* value,
    size_t size) {
  set_has_guide_val();
  guide_val_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserState.guide_val)
}
inline ::std::string* UserState::mutable_guide_val() {
  set_has_guide_val();
  // @@protoc_insertion_point(field_mutable:db.UserState.guide_val)
  return guide_val_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserState::release_guide_val() {
  // @@protoc_insertion_point(field_release:db.UserState.guide_val)
  if (!has_guide_val()) {
    return NULL;
  }
  clear_has_guide_val();
  return guide_val_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserState::set_allocated_guide_val(::std::string* guide_val) {
  if (guide_val != NULL) {
    set_has_guide_val();
  } else {
    clear_has_guide_val();
  }
  guide_val_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guide_val,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserState.guide_val)
}
inline ::std::string* UserState::unsafe_arena_release_guide_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserState.guide_val)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_guide_val();
  return guide_val_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserState::unsafe_arena_set_allocated_guide_val(
    ::std::string* guide_val) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (guide_val != NULL) {
    set_has_guide_val();
  } else {
    clear_has_guide_val();
  }
  guide_val_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      guide_val, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserState.guide_val)
}

// required sfixed64 tab_time = 3;
inline bool UserState::has_tab_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserState::set_has_tab_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserState::clear_has_tab_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserState::clear_tab_time() {
  tab_time_ = GOOGLE_LONGLONG(0);
  clear_has_tab_time();
}
inline ::google::protobuf::int64 UserState::tab_time() const {
  // @@protoc_insertion_point(field_get:db.UserState.tab_time)
  return tab_time_;
}
inline void UserState::set_tab_time(::google::protobuf::int64 value) {
  set_has_tab_time();
  tab_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.tab_time)
}

// required int32 gold_lottery_times_once = 4;
inline bool UserState::has_gold_lottery_times_once() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserState::set_has_gold_lottery_times_once() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserState::clear_has_gold_lottery_times_once() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserState::clear_gold_lottery_times_once() {
  gold_lottery_times_once_ = 0;
  clear_has_gold_lottery_times_once();
}
inline ::google::protobuf::int32 UserState::gold_lottery_times_once() const {
  // @@protoc_insertion_point(field_get:db.UserState.gold_lottery_times_once)
  return gold_lottery_times_once_;
}
inline void UserState::set_gold_lottery_times_once(::google::protobuf::int32 value) {
  set_has_gold_lottery_times_once();
  gold_lottery_times_once_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.gold_lottery_times_once)
}

// required int32 diamond_lottery_times_once = 5;
inline bool UserState::has_diamond_lottery_times_once() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserState::set_has_diamond_lottery_times_once() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserState::clear_has_diamond_lottery_times_once() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserState::clear_diamond_lottery_times_once() {
  diamond_lottery_times_once_ = 0;
  clear_has_diamond_lottery_times_once();
}
inline ::google::protobuf::int32 UserState::diamond_lottery_times_once() const {
  // @@protoc_insertion_point(field_get:db.UserState.diamond_lottery_times_once)
  return diamond_lottery_times_once_;
}
inline void UserState::set_diamond_lottery_times_once(::google::protobuf::int32 value) {
  set_has_diamond_lottery_times_once();
  diamond_lottery_times_once_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.diamond_lottery_times_once)
}

// required int32 gold_lottery_times_ten = 6;
inline bool UserState::has_gold_lottery_times_ten() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserState::set_has_gold_lottery_times_ten() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserState::clear_has_gold_lottery_times_ten() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserState::clear_gold_lottery_times_ten() {
  gold_lottery_times_ten_ = 0;
  clear_has_gold_lottery_times_ten();
}
inline ::google::protobuf::int32 UserState::gold_lottery_times_ten() const {
  // @@protoc_insertion_point(field_get:db.UserState.gold_lottery_times_ten)
  return gold_lottery_times_ten_;
}
inline void UserState::set_gold_lottery_times_ten(::google::protobuf::int32 value) {
  set_has_gold_lottery_times_ten();
  gold_lottery_times_ten_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.gold_lottery_times_ten)
}

// required int32 diamond_lottery_times_ten = 7;
inline bool UserState::has_diamond_lottery_times_ten() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserState::set_has_diamond_lottery_times_ten() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserState::clear_has_diamond_lottery_times_ten() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserState::clear_diamond_lottery_times_ten() {
  diamond_lottery_times_ten_ = 0;
  clear_has_diamond_lottery_times_ten();
}
inline ::google::protobuf::int32 UserState::diamond_lottery_times_ten() const {
  // @@protoc_insertion_point(field_get:db.UserState.diamond_lottery_times_ten)
  return diamond_lottery_times_ten_;
}
inline void UserState::set_diamond_lottery_times_ten(::google::protobuf::int32 value) {
  set_has_diamond_lottery_times_ten();
  diamond_lottery_times_ten_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.diamond_lottery_times_ten)
}

// required sfixed64 daily_refresh_time = 8;
inline bool UserState::has_daily_refresh_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserState::set_has_daily_refresh_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserState::clear_has_daily_refresh_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserState::clear_daily_refresh_time() {
  daily_refresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_daily_refresh_time();
}
inline ::google::protobuf::int64 UserState::daily_refresh_time() const {
  // @@protoc_insertion_point(field_get:db.UserState.daily_refresh_time)
  return daily_refresh_time_;
}
inline void UserState::set_daily_refresh_time(::google::protobuf::int64 value) {
  set_has_daily_refresh_time();
  daily_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.daily_refresh_time)
}

// optional int32 daily_lottery_times = 9;
inline bool UserState::has_daily_lottery_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserState::set_has_daily_lottery_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserState::clear_has_daily_lottery_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserState::clear_daily_lottery_times() {
  daily_lottery_times_ = 0;
  clear_has_daily_lottery_times();
}
inline ::google::protobuf::int32 UserState::daily_lottery_times() const {
  // @@protoc_insertion_point(field_get:db.UserState.daily_lottery_times)
  return daily_lottery_times_;
}
inline void UserState::set_daily_lottery_times(::google::protobuf::int32 value) {
  set_has_daily_lottery_times();
  daily_lottery_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.daily_lottery_times)
}

// optional int32 daily_occupy_monster_ship = 10;
inline bool UserState::has_daily_occupy_monster_ship() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserState::set_has_daily_occupy_monster_ship() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserState::clear_has_daily_occupy_monster_ship() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserState::clear_daily_occupy_monster_ship() {
  daily_occupy_monster_ship_ = 0;
  clear_has_daily_occupy_monster_ship();
}
inline ::google::protobuf::int32 UserState::daily_occupy_monster_ship() const {
  // @@protoc_insertion_point(field_get:db.UserState.daily_occupy_monster_ship)
  return daily_occupy_monster_ship_;
}
inline void UserState::set_daily_occupy_monster_ship(::google::protobuf::int32 value) {
  set_has_daily_occupy_monster_ship();
  daily_occupy_monster_ship_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.daily_occupy_monster_ship)
}

// optional int32 daily_occupy_player_ship = 11;
inline bool UserState::has_daily_occupy_player_ship() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserState::set_has_daily_occupy_player_ship() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserState::clear_has_daily_occupy_player_ship() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserState::clear_daily_occupy_player_ship() {
  daily_occupy_player_ship_ = 0;
  clear_has_daily_occupy_player_ship();
}
inline ::google::protobuf::int32 UserState::daily_occupy_player_ship() const {
  // @@protoc_insertion_point(field_get:db.UserState.daily_occupy_player_ship)
  return daily_occupy_player_ship_;
}
inline void UserState::set_daily_occupy_player_ship(::google::protobuf::int32 value) {
  set_has_daily_occupy_player_ship();
  daily_occupy_player_ship_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.daily_occupy_player_ship)
}

// optional int32 daily_occupy_special_ship = 12;
inline bool UserState::has_daily_occupy_special_ship() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserState::set_has_daily_occupy_special_ship() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserState::clear_has_daily_occupy_special_ship() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserState::clear_daily_occupy_special_ship() {
  daily_occupy_special_ship_ = 0;
  clear_has_daily_occupy_special_ship();
}
inline ::google::protobuf::int32 UserState::daily_occupy_special_ship() const {
  // @@protoc_insertion_point(field_get:db.UserState.daily_occupy_special_ship)
  return daily_occupy_special_ship_;
}
inline void UserState::set_daily_occupy_special_ship(::google::protobuf::int32 value) {
  set_has_daily_occupy_special_ship();
  daily_occupy_special_ship_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.daily_occupy_special_ship)
}

// optional int32 daily_buy_vitality_times = 13;
inline bool UserState::has_daily_buy_vitality_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserState::set_has_daily_buy_vitality_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserState::clear_has_daily_buy_vitality_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserState::clear_daily_buy_vitality_times() {
  daily_buy_vitality_times_ = 0;
  clear_has_daily_buy_vitality_times();
}
inline ::google::protobuf::int32 UserState::daily_buy_vitality_times() const {
  // @@protoc_insertion_point(field_get:db.UserState.daily_buy_vitality_times)
  return daily_buy_vitality_times_;
}
inline void UserState::set_daily_buy_vitality_times(::google::protobuf::int32 value) {
  set_has_daily_buy_vitality_times();
  daily_buy_vitality_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.daily_buy_vitality_times)
}

// optional int32 daily_single_ranking_times = 14;
inline bool UserState::has_daily_single_ranking_times() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserState::set_has_daily_single_ranking_times() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserState::clear_has_daily_single_ranking_times() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserState::clear_daily_single_ranking_times() {
  daily_single_ranking_times_ = 0;
  clear_has_daily_single_ranking_times();
}
inline ::google::protobuf::int32 UserState::daily_single_ranking_times() const {
  // @@protoc_insertion_point(field_get:db.UserState.daily_single_ranking_times)
  return daily_single_ranking_times_;
}
inline void UserState::set_daily_single_ranking_times(::google::protobuf::int32 value) {
  set_has_daily_single_ranking_times();
  daily_single_ranking_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.daily_single_ranking_times)
}

// optional int32 daily_multiple_ranking_times = 15;
inline bool UserState::has_daily_multiple_ranking_times() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserState::set_has_daily_multiple_ranking_times() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserState::clear_has_daily_multiple_ranking_times() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserState::clear_daily_multiple_ranking_times() {
  daily_multiple_ranking_times_ = 0;
  clear_has_daily_multiple_ranking_times();
}
inline ::google::protobuf::int32 UserState::daily_multiple_ranking_times() const {
  // @@protoc_insertion_point(field_get:db.UserState.daily_multiple_ranking_times)
  return daily_multiple_ranking_times_;
}
inline void UserState::set_daily_multiple_ranking_times(::google::protobuf::int32 value) {
  set_has_daily_multiple_ranking_times();
  daily_multiple_ranking_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.daily_multiple_ranking_times)
}

// optional sfixed64 easter_egg_refresh_time = 16;
inline bool UserState::has_easter_egg_refresh_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserState::set_has_easter_egg_refresh_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserState::clear_has_easter_egg_refresh_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserState::clear_easter_egg_refresh_time() {
  easter_egg_refresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_easter_egg_refresh_time();
}
inline ::google::protobuf::int64 UserState::easter_egg_refresh_time() const {
  // @@protoc_insertion_point(field_get:db.UserState.easter_egg_refresh_time)
  return easter_egg_refresh_time_;
}
inline void UserState::set_easter_egg_refresh_time(::google::protobuf::int64 value) {
  set_has_easter_egg_refresh_time();
  easter_egg_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.easter_egg_refresh_time)
}

// optional sfixed64 login_time = 17;
inline bool UserState::has_login_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserState::set_has_login_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserState::clear_has_login_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserState::clear_login_time() {
  login_time_ = GOOGLE_LONGLONG(0);
  clear_has_login_time();
}
inline ::google::protobuf::int64 UserState::login_time() const {
  // @@protoc_insertion_point(field_get:db.UserState.login_time)
  return login_time_;
}
inline void UserState::set_login_time(::google::protobuf::int64 value) {
  set_has_login_time();
  login_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.login_time)
}

// optional sfixed64 logout_time = 18;
inline bool UserState::has_logout_time() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserState::set_has_logout_time() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserState::clear_has_logout_time() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserState::clear_logout_time() {
  logout_time_ = GOOGLE_LONGLONG(0);
  clear_has_logout_time();
}
inline ::google::protobuf::int64 UserState::logout_time() const {
  // @@protoc_insertion_point(field_get:db.UserState.logout_time)
  return logout_time_;
}
inline void UserState::set_logout_time(::google::protobuf::int64 value) {
  set_has_logout_time();
  logout_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.logout_time)
}

// optional sfixed64 heartbeat_time = 19;
inline bool UserState::has_heartbeat_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserState::set_has_heartbeat_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserState::clear_has_heartbeat_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserState::clear_heartbeat_time() {
  heartbeat_time_ = GOOGLE_LONGLONG(0);
  clear_has_heartbeat_time();
}
inline ::google::protobuf::int64 UserState::heartbeat_time() const {
  // @@protoc_insertion_point(field_get:db.UserState.heartbeat_time)
  return heartbeat_time_;
}
inline void UserState::set_heartbeat_time(::google::protobuf::int64 value) {
  set_has_heartbeat_time();
  heartbeat_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.heartbeat_time)
}

// optional int32 repeat_task_refresh_times = 20;
inline bool UserState::has_repeat_task_refresh_times() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserState::set_has_repeat_task_refresh_times() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserState::clear_has_repeat_task_refresh_times() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserState::clear_repeat_task_refresh_times() {
  repeat_task_refresh_times_ = 0;
  clear_has_repeat_task_refresh_times();
}
inline ::google::protobuf::int32 UserState::repeat_task_refresh_times() const {
  // @@protoc_insertion_point(field_get:db.UserState.repeat_task_refresh_times)
  return repeat_task_refresh_times_;
}
inline void UserState::set_repeat_task_refresh_times(::google::protobuf::int32 value) {
  set_has_repeat_task_refresh_times();
  repeat_task_refresh_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserState.repeat_task_refresh_times)
}

// -------------------------------------------------------------------

// UserRegion

// required bytes userid = 1;
inline bool UserRegion::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRegion::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRegion::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRegion::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserRegion::userid() const {
  // @@protoc_insertion_point(field_get:db.UserRegion.userid)
  return userid_.Get();
}
inline void UserRegion::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserRegion.userid)
}
#if LANG_CXX11
inline void UserRegion::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserRegion.userid)
}
#endif
inline void UserRegion::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserRegion.userid)
}
inline void UserRegion::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserRegion.userid)
}
inline ::std::string* UserRegion::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserRegion.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserRegion::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserRegion.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserRegion::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserRegion.userid)
}
inline ::std::string* UserRegion::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserRegion.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserRegion::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserRegion.userid)
}

// required int32 id = 2;
inline bool UserRegion::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRegion::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRegion::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRegion::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserRegion::id() const {
  // @@protoc_insertion_point(field_get:db.UserRegion.id)
  return id_;
}
inline void UserRegion::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserRegion.id)
}

// required int32 fast_finish_times = 4;
inline bool UserRegion::has_fast_finish_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRegion::set_has_fast_finish_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRegion::clear_has_fast_finish_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRegion::clear_fast_finish_times() {
  fast_finish_times_ = 0;
  clear_has_fast_finish_times();
}
inline ::google::protobuf::int32 UserRegion::fast_finish_times() const {
  // @@protoc_insertion_point(field_get:db.UserRegion.fast_finish_times)
  return fast_finish_times_;
}
inline void UserRegion::set_fast_finish_times(::google::protobuf::int32 value) {
  set_has_fast_finish_times();
  fast_finish_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserRegion.fast_finish_times)
}

// optional bytes map_data = 5;
inline bool UserRegion::has_map_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRegion::set_has_map_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRegion::clear_has_map_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRegion::clear_map_data() {
  map_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_map_data();
}
inline const ::std::string& UserRegion::map_data() const {
  // @@protoc_insertion_point(field_get:db.UserRegion.map_data)
  return map_data_.Get();
}
inline void UserRegion::set_map_data(const ::std::string& value) {
  set_has_map_data();
  map_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserRegion.map_data)
}
#if LANG_CXX11
inline void UserRegion::set_map_data(::std::string&& value) {
  set_has_map_data();
  map_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserRegion.map_data)
}
#endif
inline void UserRegion::set_map_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_data();
  map_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserRegion.map_data)
}
inline void UserRegion::set_map_data(const void* value,
    size_t size) {
  set_has_map_data();
  map_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserRegion.map_data)
}
inline ::std::string* UserRegion::mutable_map_data() {
  set_has_map_data();
  // @@protoc_insertion_point(field_mutable:db.UserRegion.map_data)
  return map_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserRegion::release_map_data() {
  // @@protoc_insertion_point(field_release:db.UserRegion.map_data)
  if (!has_map_data()) {
    return NULL;
  }
  clear_has_map_data();
  return map_data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserRegion::set_allocated_map_data(::std::string* map_data) {
  if (map_data != NULL) {
    set_has_map_data();
  } else {
    clear_has_map_data();
  }
  map_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserRegion.map_data)
}
inline ::std::string* UserRegion::unsafe_arena_release_map_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserRegion.map_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_map_data();
  return map_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserRegion::unsafe_arena_set_allocated_map_data(
    ::std::string* map_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (map_data != NULL) {
    set_has_map_data();
  } else {
    clear_has_map_data();
  }
  map_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      map_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserRegion.map_data)
}

// optional bytes unlock_room = 6;
inline bool UserRegion::has_unlock_room() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRegion::set_has_unlock_room() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRegion::clear_has_unlock_room() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRegion::clear_unlock_room() {
  unlock_room_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_unlock_room();
}
inline const ::std::string& UserRegion::unlock_room() const {
  // @@protoc_insertion_point(field_get:db.UserRegion.unlock_room)
  return unlock_room_.Get();
}
inline void UserRegion::set_unlock_room(const ::std::string& value) {
  set_has_unlock_room();
  unlock_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserRegion.unlock_room)
}
#if LANG_CXX11
inline void UserRegion::set_unlock_room(::std::string&& value) {
  set_has_unlock_room();
  unlock_room_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserRegion.unlock_room)
}
#endif
inline void UserRegion::set_unlock_room(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_room();
  unlock_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserRegion.unlock_room)
}
inline void UserRegion::set_unlock_room(const void* value,
    size_t size) {
  set_has_unlock_room();
  unlock_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserRegion.unlock_room)
}
inline ::std::string* UserRegion::mutable_unlock_room() {
  set_has_unlock_room();
  // @@protoc_insertion_point(field_mutable:db.UserRegion.unlock_room)
  return unlock_room_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserRegion::release_unlock_room() {
  // @@protoc_insertion_point(field_release:db.UserRegion.unlock_room)
  if (!has_unlock_room()) {
    return NULL;
  }
  clear_has_unlock_room();
  return unlock_room_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserRegion::set_allocated_unlock_room(::std::string* unlock_room) {
  if (unlock_room != NULL) {
    set_has_unlock_room();
  } else {
    clear_has_unlock_room();
  }
  unlock_room_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_room,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserRegion.unlock_room)
}
inline ::std::string* UserRegion::unsafe_arena_release_unlock_room() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserRegion.unlock_room)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_unlock_room();
  return unlock_room_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserRegion::unsafe_arena_set_allocated_unlock_room(
    ::std::string* unlock_room) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unlock_room != NULL) {
    set_has_unlock_room();
  } else {
    clear_has_unlock_room();
  }
  unlock_room_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unlock_room, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserRegion.unlock_room)
}

// optional sfixed64 first_reach_time = 7;
inline bool UserRegion::has_first_reach_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRegion::set_has_first_reach_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRegion::clear_has_first_reach_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRegion::clear_first_reach_time() {
  first_reach_time_ = GOOGLE_LONGLONG(0);
  clear_has_first_reach_time();
}
inline ::google::protobuf::int64 UserRegion::first_reach_time() const {
  // @@protoc_insertion_point(field_get:db.UserRegion.first_reach_time)
  return first_reach_time_;
}
inline void UserRegion::set_first_reach_time(::google::protobuf::int64 value) {
  set_has_first_reach_time();
  first_reach_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserRegion.first_reach_time)
}

// -------------------------------------------------------------------

// UserSystemTask

// required bytes userid = 1;
inline bool UserSystemTask::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSystemTask::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSystemTask::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSystemTask::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserSystemTask::userid() const {
  // @@protoc_insertion_point(field_get:db.UserSystemTask.userid)
  return userid_.Get();
}
inline void UserSystemTask::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserSystemTask.userid)
}
#if LANG_CXX11
inline void UserSystemTask::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserSystemTask.userid)
}
#endif
inline void UserSystemTask::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserSystemTask.userid)
}
inline void UserSystemTask::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserSystemTask.userid)
}
inline ::std::string* UserSystemTask::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserSystemTask.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserSystemTask::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserSystemTask.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserSystemTask::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserSystemTask.userid)
}
inline ::std::string* UserSystemTask::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserSystemTask.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserSystemTask::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserSystemTask.userid)
}

// required int32 id = 2;
inline bool UserSystemTask::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSystemTask::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSystemTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSystemTask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserSystemTask::id() const {
  // @@protoc_insertion_point(field_get:db.UserSystemTask.id)
  return id_;
}
inline void UserSystemTask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserSystemTask.id)
}

// required int32 state = 3;
inline bool UserSystemTask::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSystemTask::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSystemTask::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSystemTask::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserSystemTask::state() const {
  // @@protoc_insertion_point(field_get:db.UserSystemTask.state)
  return state_;
}
inline void UserSystemTask::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserSystemTask.state)
}

// required int32 finish_value = 4;
inline bool UserSystemTask::has_finish_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserSystemTask::set_has_finish_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserSystemTask::clear_has_finish_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserSystemTask::clear_finish_value() {
  finish_value_ = 0;
  clear_has_finish_value();
}
inline ::google::protobuf::int32 UserSystemTask::finish_value() const {
  // @@protoc_insertion_point(field_get:db.UserSystemTask.finish_value)
  return finish_value_;
}
inline void UserSystemTask::set_finish_value(::google::protobuf::int32 value) {
  set_has_finish_value();
  finish_value_ = value;
  // @@protoc_insertion_point(field_set:db.UserSystemTask.finish_value)
}

// required sfixed64 deadline = 5;
inline bool UserSystemTask::has_deadline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSystemTask::set_has_deadline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSystemTask::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSystemTask::clear_deadline() {
  deadline_ = GOOGLE_LONGLONG(0);
  clear_has_deadline();
}
inline ::google::protobuf::int64 UserSystemTask::deadline() const {
  // @@protoc_insertion_point(field_get:db.UserSystemTask.deadline)
  return deadline_;
}
inline void UserSystemTask::set_deadline(::google::protobuf::int64 value) {
  set_has_deadline();
  deadline_ = value;
  // @@protoc_insertion_point(field_set:db.UserSystemTask.deadline)
}

// required sfixed64 timestamp = 6;
inline bool UserSystemTask::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSystemTask::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSystemTask::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSystemTask::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserSystemTask::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserSystemTask.timestamp)
  return timestamp_;
}
inline void UserSystemTask::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserSystemTask.timestamp)
}

// -------------------------------------------------------------------

// UserShoppingGoods

// required bytes userid = 1;
inline bool UserShoppingGoods::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserShoppingGoods::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserShoppingGoods::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserShoppingGoods::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserShoppingGoods::userid() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.userid)
  return userid_.Get();
}
inline void UserShoppingGoods::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.userid)
}
#if LANG_CXX11
inline void UserShoppingGoods::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShoppingGoods.userid)
}
#endif
inline void UserShoppingGoods::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShoppingGoods.userid)
}
inline void UserShoppingGoods::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShoppingGoods.userid)
}
inline ::std::string* UserShoppingGoods::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserShoppingGoods.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShoppingGoods::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserShoppingGoods.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShoppingGoods::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShoppingGoods.userid)
}
inline ::std::string* UserShoppingGoods::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShoppingGoods.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShoppingGoods::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShoppingGoods.userid)
}

// required int64 store = 2;
inline bool UserShoppingGoods::has_store() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserShoppingGoods::set_has_store() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserShoppingGoods::clear_has_store() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserShoppingGoods::clear_store() {
  store_ = GOOGLE_LONGLONG(0);
  clear_has_store();
}
inline ::google::protobuf::int64 UserShoppingGoods::store() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.store)
  return store_;
}
inline void UserShoppingGoods::set_store(::google::protobuf::int64 value) {
  set_has_store();
  store_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.store)
}

// required int32 goods_id = 3;
inline bool UserShoppingGoods::has_goods_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserShoppingGoods::set_has_goods_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserShoppingGoods::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserShoppingGoods::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
inline ::google::protobuf::int32 UserShoppingGoods::goods_id() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.goods_id)
  return goods_id_;
}
inline void UserShoppingGoods::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.goods_id)
}

// required int32 goods_typeid = 4;
inline bool UserShoppingGoods::has_goods_typeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserShoppingGoods::set_has_goods_typeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserShoppingGoods::clear_has_goods_typeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserShoppingGoods::clear_goods_typeid() {
  goods_typeid_ = 0;
  clear_has_goods_typeid();
}
inline ::google::protobuf::int32 UserShoppingGoods::goods_typeid() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.goods_typeid)
  return goods_typeid_;
}
inline void UserShoppingGoods::set_goods_typeid(::google::protobuf::int32 value) {
  set_has_goods_typeid();
  goods_typeid_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.goods_typeid)
}

// required int32 state = 5;
inline bool UserShoppingGoods::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserShoppingGoods::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserShoppingGoods::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserShoppingGoods::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserShoppingGoods::state() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.state)
  return state_;
}
inline void UserShoppingGoods::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.state)
}

// required int32 purchase_times = 6;
inline bool UserShoppingGoods::has_purchase_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserShoppingGoods::set_has_purchase_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserShoppingGoods::clear_has_purchase_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserShoppingGoods::clear_purchase_times() {
  purchase_times_ = 0;
  clear_has_purchase_times();
}
inline ::google::protobuf::int32 UserShoppingGoods::purchase_times() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.purchase_times)
  return purchase_times_;
}
inline void UserShoppingGoods::set_purchase_times(::google::protobuf::int32 value) {
  set_has_purchase_times();
  purchase_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.purchase_times)
}

// required float discount = 7;
inline bool UserShoppingGoods::has_discount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserShoppingGoods::set_has_discount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserShoppingGoods::clear_has_discount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserShoppingGoods::clear_discount() {
  discount_ = 0;
  clear_has_discount();
}
inline float UserShoppingGoods::discount() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.discount)
  return discount_;
}
inline void UserShoppingGoods::set_discount(float value) {
  set_has_discount();
  discount_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.discount)
}

// required float price_fluctuation = 8;
inline bool UserShoppingGoods::has_price_fluctuation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserShoppingGoods::set_has_price_fluctuation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserShoppingGoods::clear_has_price_fluctuation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserShoppingGoods::clear_price_fluctuation() {
  price_fluctuation_ = 0;
  clear_has_price_fluctuation();
}
inline float UserShoppingGoods::price_fluctuation() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.price_fluctuation)
  return price_fluctuation_;
}
inline void UserShoppingGoods::set_price_fluctuation(float value) {
  set_has_price_fluctuation();
  price_fluctuation_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.price_fluctuation)
}

// required sfixed64 timestamp = 9;
inline bool UserShoppingGoods::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserShoppingGoods::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserShoppingGoods::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserShoppingGoods::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserShoppingGoods::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.timestamp)
  return timestamp_;
}
inline void UserShoppingGoods::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.timestamp)
}

// required int32 duration = 10;
inline bool UserShoppingGoods::has_duration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserShoppingGoods::set_has_duration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserShoppingGoods::clear_has_duration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserShoppingGoods::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 UserShoppingGoods::duration() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingGoods.duration)
  return duration_;
}
inline void UserShoppingGoods::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingGoods.duration)
}

// -------------------------------------------------------------------

// UserShoppingMall

// required bytes userid = 1;
inline bool UserShoppingMall::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserShoppingMall::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserShoppingMall::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserShoppingMall::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserShoppingMall::userid() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingMall.userid)
  return userid_.Get();
}
inline void UserShoppingMall::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShoppingMall.userid)
}
#if LANG_CXX11
inline void UserShoppingMall::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShoppingMall.userid)
}
#endif
inline void UserShoppingMall::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShoppingMall.userid)
}
inline void UserShoppingMall::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShoppingMall.userid)
}
inline ::std::string* UserShoppingMall::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserShoppingMall.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShoppingMall::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserShoppingMall.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShoppingMall::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShoppingMall.userid)
}
inline ::std::string* UserShoppingMall::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShoppingMall.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShoppingMall::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShoppingMall.userid)
}

// required int64 id = 2;
inline bool UserShoppingMall::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserShoppingMall::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserShoppingMall::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserShoppingMall::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 UserShoppingMall::id() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingMall.id)
  return id_;
}
inline void UserShoppingMall::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingMall.id)
}

// required int32 type = 3;
inline bool UserShoppingMall::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserShoppingMall::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserShoppingMall::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserShoppingMall::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserShoppingMall::type() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingMall.type)
  return type_;
}
inline void UserShoppingMall::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingMall.type)
}

// required int64 tag = 4;
inline bool UserShoppingMall::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserShoppingMall::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserShoppingMall::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserShoppingMall::clear_tag() {
  tag_ = GOOGLE_LONGLONG(0);
  clear_has_tag();
}
inline ::google::protobuf::int64 UserShoppingMall::tag() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingMall.tag)
  return tag_;
}
inline void UserShoppingMall::set_tag(::google::protobuf::int64 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingMall.tag)
}

// required int32 state = 5;
inline bool UserShoppingMall::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserShoppingMall::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserShoppingMall::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserShoppingMall::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserShoppingMall::state() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingMall.state)
  return state_;
}
inline void UserShoppingMall::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingMall.state)
}

// required sfixed64 timestamp = 6;
inline bool UserShoppingMall::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserShoppingMall::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserShoppingMall::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserShoppingMall::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserShoppingMall::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingMall.timestamp)
  return timestamp_;
}
inline void UserShoppingMall::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingMall.timestamp)
}

// required int32 duration = 7;
inline bool UserShoppingMall::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserShoppingMall::set_has_duration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserShoppingMall::clear_has_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserShoppingMall::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 UserShoppingMall::duration() const {
  // @@protoc_insertion_point(field_get:db.UserShoppingMall.duration)
  return duration_;
}
inline void UserShoppingMall::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:db.UserShoppingMall.duration)
}

// -------------------------------------------------------------------

// UserShipModel

// required bytes userid = 1;
inline bool UserShipModel::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserShipModel::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserShipModel::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserShipModel::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserShipModel::userid() const {
  // @@protoc_insertion_point(field_get:db.UserShipModel.userid)
  return userid_.Get();
}
inline void UserShipModel::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShipModel.userid)
}
#if LANG_CXX11
inline void UserShipModel::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShipModel.userid)
}
#endif
inline void UserShipModel::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShipModel.userid)
}
inline void UserShipModel::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShipModel.userid)
}
inline ::std::string* UserShipModel::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserShipModel.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShipModel::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserShipModel.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShipModel::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShipModel.userid)
}
inline ::std::string* UserShipModel::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShipModel.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShipModel::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShipModel.userid)
}

// required int32 ship_model = 2;
inline bool UserShipModel::has_ship_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserShipModel::set_has_ship_model() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserShipModel::clear_has_ship_model() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserShipModel::clear_ship_model() {
  ship_model_ = 0;
  clear_has_ship_model();
}
inline ::google::protobuf::int32 UserShipModel::ship_model() const {
  // @@protoc_insertion_point(field_get:db.UserShipModel.ship_model)
  return ship_model_;
}
inline void UserShipModel::set_ship_model(::google::protobuf::int32 value) {
  set_has_ship_model();
  ship_model_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipModel.ship_model)
}

// required int32 state = 3;
inline bool UserShipModel::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserShipModel::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserShipModel::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserShipModel::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserShipModel::state() const {
  // @@protoc_insertion_point(field_get:db.UserShipModel.state)
  return state_;
}
inline void UserShipModel::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipModel.state)
}

// required sfixed64 optime = 4;
inline bool UserShipModel::has_optime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserShipModel::set_has_optime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserShipModel::clear_has_optime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserShipModel::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 UserShipModel::optime() const {
  // @@protoc_insertion_point(field_get:db.UserShipModel.optime)
  return optime_;
}
inline void UserShipModel::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipModel.optime)
}

// -------------------------------------------------------------------

// UserArchive

// required bytes userid = 1;
inline bool UserArchive::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserArchive::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserArchive::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserArchive::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserArchive::userid() const {
  // @@protoc_insertion_point(field_get:db.UserArchive.userid)
  return userid_.Get();
}
inline void UserArchive::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserArchive.userid)
}
#if LANG_CXX11
inline void UserArchive::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserArchive.userid)
}
#endif
inline void UserArchive::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserArchive.userid)
}
inline void UserArchive::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserArchive.userid)
}
inline ::std::string* UserArchive::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserArchive.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserArchive::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserArchive.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserArchive::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserArchive.userid)
}
inline ::std::string* UserArchive::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserArchive.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserArchive::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserArchive.userid)
}

// required int32 id = 2;
inline bool UserArchive::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserArchive::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserArchive::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserArchive::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserArchive::id() const {
  // @@protoc_insertion_point(field_get:db.UserArchive.id)
  return id_;
}
inline void UserArchive::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserArchive.id)
}

// required int32 state = 3;
inline bool UserArchive::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserArchive::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserArchive::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserArchive::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserArchive::state() const {
  // @@protoc_insertion_point(field_get:db.UserArchive.state)
  return state_;
}
inline void UserArchive::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserArchive.state)
}

// required bytes name = 4;
inline bool UserArchive::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserArchive::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserArchive::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserArchive::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& UserArchive::name() const {
  // @@protoc_insertion_point(field_get:db.UserArchive.name)
  return name_.Get();
}
inline void UserArchive::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserArchive.name)
}
#if LANG_CXX11
inline void UserArchive::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserArchive.name)
}
#endif
inline void UserArchive::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserArchive.name)
}
inline void UserArchive::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserArchive.name)
}
inline ::std::string* UserArchive::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.UserArchive.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserArchive::release_name() {
  // @@protoc_insertion_point(field_release:db.UserArchive.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserArchive::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserArchive.name)
}
inline ::std::string* UserArchive::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserArchive.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserArchive::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserArchive.name)
}

// required int32 ship_model = 5;
inline bool UserArchive::has_ship_model() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserArchive::set_has_ship_model() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserArchive::clear_has_ship_model() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserArchive::clear_ship_model() {
  ship_model_ = 0;
  clear_has_ship_model();
}
inline ::google::protobuf::int32 UserArchive::ship_model() const {
  // @@protoc_insertion_point(field_get:db.UserArchive.ship_model)
  return ship_model_;
}
inline void UserArchive::set_ship_model(::google::protobuf::int32 value) {
  set_has_ship_model();
  ship_model_ = value;
  // @@protoc_insertion_point(field_set:db.UserArchive.ship_model)
}

// required bytes ship_tiles = 6;
inline bool UserArchive::has_ship_tiles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserArchive::set_has_ship_tiles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserArchive::clear_has_ship_tiles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserArchive::clear_ship_tiles() {
  ship_tiles_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ship_tiles();
}
inline const ::std::string& UserArchive::ship_tiles() const {
  // @@protoc_insertion_point(field_get:db.UserArchive.ship_tiles)
  return ship_tiles_.Get();
}
inline void UserArchive::set_ship_tiles(const ::std::string& value) {
  set_has_ship_tiles();
  ship_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserArchive.ship_tiles)
}
#if LANG_CXX11
inline void UserArchive::set_ship_tiles(::std::string&& value) {
  set_has_ship_tiles();
  ship_tiles_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserArchive.ship_tiles)
}
#endif
inline void UserArchive::set_ship_tiles(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ship_tiles();
  ship_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserArchive.ship_tiles)
}
inline void UserArchive::set_ship_tiles(const void* value,
    size_t size) {
  set_has_ship_tiles();
  ship_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserArchive.ship_tiles)
}
inline ::std::string* UserArchive::mutable_ship_tiles() {
  set_has_ship_tiles();
  // @@protoc_insertion_point(field_mutable:db.UserArchive.ship_tiles)
  return ship_tiles_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserArchive::release_ship_tiles() {
  // @@protoc_insertion_point(field_release:db.UserArchive.ship_tiles)
  if (!has_ship_tiles()) {
    return NULL;
  }
  clear_has_ship_tiles();
  return ship_tiles_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserArchive::set_allocated_ship_tiles(::std::string* ship_tiles) {
  if (ship_tiles != NULL) {
    set_has_ship_tiles();
  } else {
    clear_has_ship_tiles();
  }
  ship_tiles_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ship_tiles,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserArchive.ship_tiles)
}
inline ::std::string* UserArchive::unsafe_arena_release_ship_tiles() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserArchive.ship_tiles)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ship_tiles();
  return ship_tiles_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserArchive::unsafe_arena_set_allocated_ship_tiles(
    ::std::string* ship_tiles) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ship_tiles != NULL) {
    set_has_ship_tiles();
  } else {
    clear_has_ship_tiles();
  }
  ship_tiles_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ship_tiles, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserArchive.ship_tiles)
}

// required bytes facilitys = 7;
inline bool UserArchive::has_facilitys() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserArchive::set_has_facilitys() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserArchive::clear_has_facilitys() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserArchive::clear_facilitys() {
  facilitys_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_facilitys();
}
inline const ::std::string& UserArchive::facilitys() const {
  // @@protoc_insertion_point(field_get:db.UserArchive.facilitys)
  return facilitys_.Get();
}
inline void UserArchive::set_facilitys(const ::std::string& value) {
  set_has_facilitys();
  facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserArchive.facilitys)
}
#if LANG_CXX11
inline void UserArchive::set_facilitys(::std::string&& value) {
  set_has_facilitys();
  facilitys_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserArchive.facilitys)
}
#endif
inline void UserArchive::set_facilitys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_facilitys();
  facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserArchive.facilitys)
}
inline void UserArchive::set_facilitys(const void* value,
    size_t size) {
  set_has_facilitys();
  facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserArchive.facilitys)
}
inline ::std::string* UserArchive::mutable_facilitys() {
  set_has_facilitys();
  // @@protoc_insertion_point(field_mutable:db.UserArchive.facilitys)
  return facilitys_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserArchive::release_facilitys() {
  // @@protoc_insertion_point(field_release:db.UserArchive.facilitys)
  if (!has_facilitys()) {
    return NULL;
  }
  clear_has_facilitys();
  return facilitys_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserArchive::set_allocated_facilitys(::std::string* facilitys) {
  if (facilitys != NULL) {
    set_has_facilitys();
  } else {
    clear_has_facilitys();
  }
  facilitys_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facilitys,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserArchive.facilitys)
}
inline ::std::string* UserArchive::unsafe_arena_release_facilitys() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserArchive.facilitys)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_facilitys();
  return facilitys_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserArchive::unsafe_arena_set_allocated_facilitys(
    ::std::string* facilitys) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (facilitys != NULL) {
    set_has_facilitys();
  } else {
    clear_has_facilitys();
  }
  facilitys_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      facilitys, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserArchive.facilitys)
}

// required bytes devices = 8;
inline bool UserArchive::has_devices() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserArchive::set_has_devices() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserArchive::clear_has_devices() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserArchive::clear_devices() {
  devices_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_devices();
}
inline const ::std::string& UserArchive::devices() const {
  // @@protoc_insertion_point(field_get:db.UserArchive.devices)
  return devices_.Get();
}
inline void UserArchive::set_devices(const ::std::string& value) {
  set_has_devices();
  devices_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserArchive.devices)
}
#if LANG_CXX11
inline void UserArchive::set_devices(::std::string&& value) {
  set_has_devices();
  devices_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserArchive.devices)
}
#endif
inline void UserArchive::set_devices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devices();
  devices_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserArchive.devices)
}
inline void UserArchive::set_devices(const void* value,
    size_t size) {
  set_has_devices();
  devices_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserArchive.devices)
}
inline ::std::string* UserArchive::mutable_devices() {
  set_has_devices();
  // @@protoc_insertion_point(field_mutable:db.UserArchive.devices)
  return devices_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserArchive::release_devices() {
  // @@protoc_insertion_point(field_release:db.UserArchive.devices)
  if (!has_devices()) {
    return NULL;
  }
  clear_has_devices();
  return devices_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserArchive::set_allocated_devices(::std::string* devices) {
  if (devices != NULL) {
    set_has_devices();
  } else {
    clear_has_devices();
  }
  devices_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devices,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserArchive.devices)
}
inline ::std::string* UserArchive::unsafe_arena_release_devices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserArchive.devices)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_devices();
  return devices_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserArchive::unsafe_arena_set_allocated_devices(
    ::std::string* devices) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (devices != NULL) {
    set_has_devices();
  } else {
    clear_has_devices();
  }
  devices_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      devices, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserArchive.devices)
}

// -------------------------------------------------------------------

// UserFormula

// required bytes userid = 1;
inline bool UserFormula::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFormula::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFormula::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFormula::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserFormula::userid() const {
  // @@protoc_insertion_point(field_get:db.UserFormula.userid)
  return userid_.Get();
}
inline void UserFormula::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserFormula.userid)
}
#if LANG_CXX11
inline void UserFormula::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserFormula.userid)
}
#endif
inline void UserFormula::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserFormula.userid)
}
inline void UserFormula::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserFormula.userid)
}
inline ::std::string* UserFormula::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserFormula.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserFormula::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserFormula.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserFormula::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserFormula.userid)
}
inline ::std::string* UserFormula::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserFormula.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserFormula::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserFormula.userid)
}

// required int32 formula_id = 2;
inline bool UserFormula::has_formula_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFormula::set_has_formula_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFormula::clear_has_formula_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFormula::clear_formula_id() {
  formula_id_ = 0;
  clear_has_formula_id();
}
inline ::google::protobuf::int32 UserFormula::formula_id() const {
  // @@protoc_insertion_point(field_get:db.UserFormula.formula_id)
  return formula_id_;
}
inline void UserFormula::set_formula_id(::google::protobuf::int32 value) {
  set_has_formula_id();
  formula_id_ = value;
  // @@protoc_insertion_point(field_set:db.UserFormula.formula_id)
}

// -------------------------------------------------------------------

// UserAchievement

// required bytes userid = 1;
inline bool UserAchievement::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAchievement::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAchievement::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAchievement::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserAchievement::userid() const {
  // @@protoc_insertion_point(field_get:db.UserAchievement.userid)
  return userid_.Get();
}
inline void UserAchievement::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserAchievement.userid)
}
#if LANG_CXX11
inline void UserAchievement::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserAchievement.userid)
}
#endif
inline void UserAchievement::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserAchievement.userid)
}
inline void UserAchievement::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserAchievement.userid)
}
inline ::std::string* UserAchievement::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserAchievement.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserAchievement::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserAchievement.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserAchievement::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserAchievement.userid)
}
inline ::std::string* UserAchievement::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserAchievement.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserAchievement::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserAchievement.userid)
}

// required int32 id = 2;
inline bool UserAchievement::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserAchievement::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserAchievement::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserAchievement::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserAchievement::id() const {
  // @@protoc_insertion_point(field_get:db.UserAchievement.id)
  return id_;
}
inline void UserAchievement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserAchievement.id)
}

// required int64 finish_value = 3;
inline bool UserAchievement::has_finish_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAchievement::set_has_finish_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAchievement::clear_has_finish_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAchievement::clear_finish_value() {
  finish_value_ = GOOGLE_LONGLONG(0);
  clear_has_finish_value();
}
inline ::google::protobuf::int64 UserAchievement::finish_value() const {
  // @@protoc_insertion_point(field_get:db.UserAchievement.finish_value)
  return finish_value_;
}
inline void UserAchievement::set_finish_value(::google::protobuf::int64 value) {
  set_has_finish_value();
  finish_value_ = value;
  // @@protoc_insertion_point(field_set:db.UserAchievement.finish_value)
}

// optional int32 state = 4;
inline bool UserAchievement::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserAchievement::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserAchievement::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserAchievement::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserAchievement::state() const {
  // @@protoc_insertion_point(field_get:db.UserAchievement.state)
  return state_;
}
inline void UserAchievement::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserAchievement.state)
}

// optional int32 phase = 5;
inline bool UserAchievement::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserAchievement::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserAchievement::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserAchievement::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 UserAchievement::phase() const {
  // @@protoc_insertion_point(field_get:db.UserAchievement.phase)
  return phase_;
}
inline void UserAchievement::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:db.UserAchievement.phase)
}

// -------------------------------------------------------------------

// UserDungeonEvent

// required bytes userid = 1;
inline bool UserDungeonEvent::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDungeonEvent::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDungeonEvent::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDungeonEvent::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserDungeonEvent::userid() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonEvent.userid)
  return userid_.Get();
}
inline void UserDungeonEvent::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserDungeonEvent.userid)
}
#if LANG_CXX11
inline void UserDungeonEvent::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserDungeonEvent.userid)
}
#endif
inline void UserDungeonEvent::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserDungeonEvent.userid)
}
inline void UserDungeonEvent::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserDungeonEvent.userid)
}
inline ::std::string* UserDungeonEvent::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserDungeonEvent.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserDungeonEvent::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserDungeonEvent.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserDungeonEvent::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserDungeonEvent.userid)
}
inline ::std::string* UserDungeonEvent::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserDungeonEvent.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserDungeonEvent::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserDungeonEvent.userid)
}

// required int32 id = 2;
inline bool UserDungeonEvent::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDungeonEvent::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDungeonEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDungeonEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserDungeonEvent::id() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonEvent.id)
  return id_;
}
inline void UserDungeonEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonEvent.id)
}

// required int32 finish_value = 3;
inline bool UserDungeonEvent::has_finish_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDungeonEvent::set_has_finish_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDungeonEvent::clear_has_finish_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDungeonEvent::clear_finish_value() {
  finish_value_ = 0;
  clear_has_finish_value();
}
inline ::google::protobuf::int32 UserDungeonEvent::finish_value() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonEvent.finish_value)
  return finish_value_;
}
inline void UserDungeonEvent::set_finish_value(::google::protobuf::int32 value) {
  set_has_finish_value();
  finish_value_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonEvent.finish_value)
}

// required int32 state = 4;
inline bool UserDungeonEvent::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDungeonEvent::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDungeonEvent::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDungeonEvent::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserDungeonEvent::state() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonEvent.state)
  return state_;
}
inline void UserDungeonEvent::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonEvent.state)
}

// -------------------------------------------------------------------

// UserDungeonState

// required bytes userid = 1;
inline bool UserDungeonState::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDungeonState::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDungeonState::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDungeonState::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserDungeonState::userid() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonState.userid)
  return userid_.Get();
}
inline void UserDungeonState::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserDungeonState.userid)
}
#if LANG_CXX11
inline void UserDungeonState::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserDungeonState.userid)
}
#endif
inline void UserDungeonState::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserDungeonState.userid)
}
inline void UserDungeonState::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserDungeonState.userid)
}
inline ::std::string* UserDungeonState::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserDungeonState.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserDungeonState::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserDungeonState.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserDungeonState::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserDungeonState.userid)
}
inline ::std::string* UserDungeonState::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserDungeonState.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserDungeonState::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserDungeonState.userid)
}

// required int32 dungeon_id = 2;
inline bool UserDungeonState::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDungeonState::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDungeonState::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDungeonState::clear_dungeon_id() {
  dungeon_id_ = 0;
  clear_has_dungeon_id();
}
inline ::google::protobuf::int32 UserDungeonState::dungeon_id() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonState.dungeon_id)
  return dungeon_id_;
}
inline void UserDungeonState::set_dungeon_id(::google::protobuf::int32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonState.dungeon_id)
}

// required int32 state = 3;
inline bool UserDungeonState::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserDungeonState::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserDungeonState::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserDungeonState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserDungeonState::state() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonState.state)
  return state_;
}
inline void UserDungeonState::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonState.state)
}

// required int32 clear_times = 4;
inline bool UserDungeonState::has_clear_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserDungeonState::set_has_clear_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserDungeonState::clear_has_clear_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserDungeonState::clear_clear_times() {
  clear_times_ = 0;
  clear_has_clear_times();
}
inline ::google::protobuf::int32 UserDungeonState::clear_times() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonState.clear_times)
  return clear_times_;
}
inline void UserDungeonState::set_clear_times(::google::protobuf::int32 value) {
  set_has_clear_times();
  clear_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonState.clear_times)
}

// optional int32 max_layer = 5;
inline bool UserDungeonState::has_max_layer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserDungeonState::set_has_max_layer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserDungeonState::clear_has_max_layer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserDungeonState::clear_max_layer() {
  max_layer_ = 0;
  clear_has_max_layer();
}
inline ::google::protobuf::int32 UserDungeonState::max_layer() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonState.max_layer)
  return max_layer_;
}
inline void UserDungeonState::set_max_layer(::google::protobuf::int32 value) {
  set_has_max_layer();
  max_layer_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonState.max_layer)
}

// optional bytes reward_received = 6;
inline bool UserDungeonState::has_reward_received() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDungeonState::set_has_reward_received() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDungeonState::clear_has_reward_received() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDungeonState::clear_reward_received() {
  reward_received_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward_received();
}
inline const ::std::string& UserDungeonState::reward_received() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonState.reward_received)
  return reward_received_.Get();
}
inline void UserDungeonState::set_reward_received(const ::std::string& value) {
  set_has_reward_received();
  reward_received_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserDungeonState.reward_received)
}
#if LANG_CXX11
inline void UserDungeonState::set_reward_received(::std::string&& value) {
  set_has_reward_received();
  reward_received_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserDungeonState.reward_received)
}
#endif
inline void UserDungeonState::set_reward_received(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward_received();
  reward_received_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserDungeonState.reward_received)
}
inline void UserDungeonState::set_reward_received(const void* value,
    size_t size) {
  set_has_reward_received();
  reward_received_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserDungeonState.reward_received)
}
inline ::std::string* UserDungeonState::mutable_reward_received() {
  set_has_reward_received();
  // @@protoc_insertion_point(field_mutable:db.UserDungeonState.reward_received)
  return reward_received_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserDungeonState::release_reward_received() {
  // @@protoc_insertion_point(field_release:db.UserDungeonState.reward_received)
  if (!has_reward_received()) {
    return NULL;
  }
  clear_has_reward_received();
  return reward_received_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserDungeonState::set_allocated_reward_received(::std::string* reward_received) {
  if (reward_received != NULL) {
    set_has_reward_received();
  } else {
    clear_has_reward_received();
  }
  reward_received_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward_received,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserDungeonState.reward_received)
}
inline ::std::string* UserDungeonState::unsafe_arena_release_reward_received() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserDungeonState.reward_received)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward_received();
  return reward_received_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserDungeonState::unsafe_arena_set_allocated_reward_received(
    ::std::string* reward_received) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward_received != NULL) {
    set_has_reward_received();
  } else {
    clear_has_reward_received();
  }
  reward_received_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward_received, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserDungeonState.reward_received)
}

// optional int32 daily_times = 7;
inline bool UserDungeonState::has_daily_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserDungeonState::set_has_daily_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserDungeonState::clear_has_daily_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserDungeonState::clear_daily_times() {
  daily_times_ = 0;
  clear_has_daily_times();
}
inline ::google::protobuf::int32 UserDungeonState::daily_times() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonState.daily_times)
  return daily_times_;
}
inline void UserDungeonState::set_daily_times(::google::protobuf::int32 value) {
  set_has_daily_times();
  daily_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonState.daily_times)
}

// optional bytes open_chest = 8;
inline bool UserDungeonState::has_open_chest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDungeonState::set_has_open_chest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDungeonState::clear_has_open_chest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDungeonState::clear_open_chest() {
  open_chest_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_open_chest();
}
inline const ::std::string& UserDungeonState::open_chest() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonState.open_chest)
  return open_chest_.Get();
}
inline void UserDungeonState::set_open_chest(const ::std::string& value) {
  set_has_open_chest();
  open_chest_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserDungeonState.open_chest)
}
#if LANG_CXX11
inline void UserDungeonState::set_open_chest(::std::string&& value) {
  set_has_open_chest();
  open_chest_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserDungeonState.open_chest)
}
#endif
inline void UserDungeonState::set_open_chest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_open_chest();
  open_chest_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserDungeonState.open_chest)
}
inline void UserDungeonState::set_open_chest(const void* value,
    size_t size) {
  set_has_open_chest();
  open_chest_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserDungeonState.open_chest)
}
inline ::std::string* UserDungeonState::mutable_open_chest() {
  set_has_open_chest();
  // @@protoc_insertion_point(field_mutable:db.UserDungeonState.open_chest)
  return open_chest_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserDungeonState::release_open_chest() {
  // @@protoc_insertion_point(field_release:db.UserDungeonState.open_chest)
  if (!has_open_chest()) {
    return NULL;
  }
  clear_has_open_chest();
  return open_chest_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserDungeonState::set_allocated_open_chest(::std::string* open_chest) {
  if (open_chest != NULL) {
    set_has_open_chest();
  } else {
    clear_has_open_chest();
  }
  open_chest_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), open_chest,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserDungeonState.open_chest)
}
inline ::std::string* UserDungeonState::unsafe_arena_release_open_chest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserDungeonState.open_chest)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_open_chest();
  return open_chest_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserDungeonState::unsafe_arena_set_allocated_open_chest(
    ::std::string* open_chest) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (open_chest != NULL) {
    set_has_open_chest();
  } else {
    clear_has_open_chest();
  }
  open_chest_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      open_chest, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserDungeonState.open_chest)
}

// -------------------------------------------------------------------

// UserPveMap

// required bytes userid = 1;
inline bool UserPveMap::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPveMap::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPveMap::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPveMap::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserPveMap::userid() const {
  // @@protoc_insertion_point(field_get:db.UserPveMap.userid)
  return userid_.Get();
}
inline void UserPveMap::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPveMap.userid)
}
#if LANG_CXX11
inline void UserPveMap::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPveMap.userid)
}
#endif
inline void UserPveMap::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPveMap.userid)
}
inline void UserPveMap::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPveMap.userid)
}
inline ::std::string* UserPveMap::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserPveMap.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPveMap::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserPveMap.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPveMap::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPveMap.userid)
}
inline ::std::string* UserPveMap::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPveMap.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPveMap::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPveMap.userid)
}

// required uint64 belong_island = 2;
inline bool UserPveMap::has_belong_island() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPveMap::set_has_belong_island() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPveMap::clear_has_belong_island() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPveMap::clear_belong_island() {
  belong_island_ = GOOGLE_ULONGLONG(0);
  clear_has_belong_island();
}
inline ::google::protobuf::uint64 UserPveMap::belong_island() const {
  // @@protoc_insertion_point(field_get:db.UserPveMap.belong_island)
  return belong_island_;
}
inline void UserPveMap::set_belong_island(::google::protobuf::uint64 value) {
  set_has_belong_island();
  belong_island_ = value;
  // @@protoc_insertion_point(field_set:db.UserPveMap.belong_island)
}

// required int32 type = 3;
inline bool UserPveMap::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserPveMap::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserPveMap::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserPveMap::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserPveMap::type() const {
  // @@protoc_insertion_point(field_get:db.UserPveMap.type)
  return type_;
}
inline void UserPveMap::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserPveMap.type)
}

// required bytes data = 4;
inline bool UserPveMap::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPveMap::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPveMap::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPveMap::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
inline const ::std::string& UserPveMap::data() const {
  // @@protoc_insertion_point(field_get:db.UserPveMap.data)
  return data_.Get();
}
inline void UserPveMap::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPveMap.data)
}
#if LANG_CXX11
inline void UserPveMap::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPveMap.data)
}
#endif
inline void UserPveMap::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPveMap.data)
}
inline void UserPveMap::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPveMap.data)
}
inline ::std::string* UserPveMap::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:db.UserPveMap.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPveMap::release_data() {
  // @@protoc_insertion_point(field_release:db.UserPveMap.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPveMap::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPveMap.data)
}
inline ::std::string* UserPveMap::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPveMap.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPveMap::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPveMap.data)
}

// -------------------------------------------------------------------

// UserChest

// required bytes userid = 1;
inline bool UserChest::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserChest::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserChest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserChest::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserChest::userid() const {
  // @@protoc_insertion_point(field_get:db.UserChest.userid)
  return userid_.Get();
}
inline void UserChest::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserChest.userid)
}
#if LANG_CXX11
inline void UserChest::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserChest.userid)
}
#endif
inline void UserChest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserChest.userid)
}
inline void UserChest::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserChest.userid)
}
inline ::std::string* UserChest::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserChest.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserChest::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserChest.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserChest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserChest.userid)
}
inline ::std::string* UserChest::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserChest.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserChest::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserChest.userid)
}

// required int32 id = 2;
inline bool UserChest::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserChest::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserChest::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserChest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserChest::id() const {
  // @@protoc_insertion_point(field_get:db.UserChest.id)
  return id_;
}
inline void UserChest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserChest.id)
}

// required int32 state = 3;
inline bool UserChest::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserChest::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserChest::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserChest::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserChest::state() const {
  // @@protoc_insertion_point(field_get:db.UserChest.state)
  return state_;
}
inline void UserChest::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserChest.state)
}

// -------------------------------------------------------------------

// UserEventRecord

// required bytes userid = 1;
inline bool UserEventRecord::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventRecord::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventRecord::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventRecord::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserEventRecord::userid() const {
  // @@protoc_insertion_point(field_get:db.UserEventRecord.userid)
  return userid_.Get();
}
inline void UserEventRecord::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserEventRecord.userid)
}
#if LANG_CXX11
inline void UserEventRecord::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserEventRecord.userid)
}
#endif
inline void UserEventRecord::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserEventRecord.userid)
}
inline void UserEventRecord::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserEventRecord.userid)
}
inline ::std::string* UserEventRecord::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserEventRecord.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserEventRecord::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserEventRecord.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserEventRecord::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserEventRecord.userid)
}
inline ::std::string* UserEventRecord::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserEventRecord.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserEventRecord::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserEventRecord.userid)
}

// required int32 id = 2;
inline bool UserEventRecord::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventRecord::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserEventRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserEventRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserEventRecord::id() const {
  // @@protoc_insertion_point(field_get:db.UserEventRecord.id)
  return id_;
}
inline void UserEventRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserEventRecord.id)
}

// required int32 state = 3;
inline bool UserEventRecord::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserEventRecord::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserEventRecord::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserEventRecord::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserEventRecord::state() const {
  // @@protoc_insertion_point(field_get:db.UserEventRecord.state)
  return state_;
}
inline void UserEventRecord::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserEventRecord.state)
}

// required int32 type = 4;
inline bool UserEventRecord::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserEventRecord::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserEventRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserEventRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserEventRecord::type() const {
  // @@protoc_insertion_point(field_get:db.UserEventRecord.type)
  return type_;
}
inline void UserEventRecord::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserEventRecord.type)
}

// required bytes contant = 5;
inline bool UserEventRecord::has_contant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventRecord::set_has_contant() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEventRecord::clear_has_contant() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEventRecord::clear_contant() {
  contant_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_contant();
}
inline const ::std::string& UserEventRecord::contant() const {
  // @@protoc_insertion_point(field_get:db.UserEventRecord.contant)
  return contant_.Get();
}
inline void UserEventRecord::set_contant(const ::std::string& value) {
  set_has_contant();
  contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserEventRecord.contant)
}
#if LANG_CXX11
inline void UserEventRecord::set_contant(::std::string&& value) {
  set_has_contant();
  contant_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserEventRecord.contant)
}
#endif
inline void UserEventRecord::set_contant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contant();
  contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserEventRecord.contant)
}
inline void UserEventRecord::set_contant(const void* value,
    size_t size) {
  set_has_contant();
  contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserEventRecord.contant)
}
inline ::std::string* UserEventRecord::mutable_contant() {
  set_has_contant();
  // @@protoc_insertion_point(field_mutable:db.UserEventRecord.contant)
  return contant_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserEventRecord::release_contant() {
  // @@protoc_insertion_point(field_release:db.UserEventRecord.contant)
  if (!has_contant()) {
    return NULL;
  }
  clear_has_contant();
  return contant_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserEventRecord::set_allocated_contant(::std::string* contant) {
  if (contant != NULL) {
    set_has_contant();
  } else {
    clear_has_contant();
  }
  contant_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contant,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserEventRecord.contant)
}
inline ::std::string* UserEventRecord::unsafe_arena_release_contant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserEventRecord.contant)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_contant();
  return contant_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserEventRecord::unsafe_arena_set_allocated_contant(
    ::std::string* contant) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (contant != NULL) {
    set_has_contant();
  } else {
    clear_has_contant();
  }
  contant_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      contant, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserEventRecord.contant)
}

// required sfixed64 timestamp = 6;
inline bool UserEventRecord::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserEventRecord::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserEventRecord::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserEventRecord::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserEventRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserEventRecord.timestamp)
  return timestamp_;
}
inline void UserEventRecord::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserEventRecord.timestamp)
}

// -------------------------------------------------------------------

// UserEventCache

// required bytes userid = 1;
inline bool UserEventCache::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventCache::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventCache::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventCache::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserEventCache::userid() const {
  // @@protoc_insertion_point(field_get:db.UserEventCache.userid)
  return userid_.Get();
}
inline void UserEventCache::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserEventCache.userid)
}
#if LANG_CXX11
inline void UserEventCache::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserEventCache.userid)
}
#endif
inline void UserEventCache::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserEventCache.userid)
}
inline void UserEventCache::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserEventCache.userid)
}
inline ::std::string* UserEventCache::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserEventCache.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserEventCache::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserEventCache.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserEventCache::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserEventCache.userid)
}
inline ::std::string* UserEventCache::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserEventCache.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserEventCache::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserEventCache.userid)
}

// required int32 type = 2;
inline bool UserEventCache::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserEventCache::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserEventCache::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserEventCache::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserEventCache::type() const {
  // @@protoc_insertion_point(field_get:db.UserEventCache.type)
  return type_;
}
inline void UserEventCache::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserEventCache.type)
}

// required bytes contant = 3;
inline bool UserEventCache::has_contant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventCache::set_has_contant() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEventCache::clear_has_contant() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEventCache::clear_contant() {
  contant_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_contant();
}
inline const ::std::string& UserEventCache::contant() const {
  // @@protoc_insertion_point(field_get:db.UserEventCache.contant)
  return contant_.Get();
}
inline void UserEventCache::set_contant(const ::std::string& value) {
  set_has_contant();
  contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserEventCache.contant)
}
#if LANG_CXX11
inline void UserEventCache::set_contant(::std::string&& value) {
  set_has_contant();
  contant_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserEventCache.contant)
}
#endif
inline void UserEventCache::set_contant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contant();
  contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserEventCache.contant)
}
inline void UserEventCache::set_contant(const void* value,
    size_t size) {
  set_has_contant();
  contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserEventCache.contant)
}
inline ::std::string* UserEventCache::mutable_contant() {
  set_has_contant();
  // @@protoc_insertion_point(field_mutable:db.UserEventCache.contant)
  return contant_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserEventCache::release_contant() {
  // @@protoc_insertion_point(field_release:db.UserEventCache.contant)
  if (!has_contant()) {
    return NULL;
  }
  clear_has_contant();
  return contant_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserEventCache::set_allocated_contant(::std::string* contant) {
  if (contant != NULL) {
    set_has_contant();
  } else {
    clear_has_contant();
  }
  contant_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contant,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserEventCache.contant)
}
inline ::std::string* UserEventCache::unsafe_arena_release_contant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserEventCache.contant)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_contant();
  return contant_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserEventCache::unsafe_arena_set_allocated_contant(
    ::std::string* contant) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (contant != NULL) {
    set_has_contant();
  } else {
    clear_has_contant();
  }
  contant_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      contant, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserEventCache.contant)
}

// required sfixed64 timestamp = 4;
inline bool UserEventCache::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventCache::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserEventCache::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserEventCache::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserEventCache::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserEventCache.timestamp)
  return timestamp_;
}
inline void UserEventCache::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserEventCache.timestamp)
}

// -------------------------------------------------------------------

// UserEquip

// required bytes userid = 1;
inline bool UserEquip::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEquip::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEquip::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEquip::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserEquip::userid() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.userid)
  return userid_.Get();
}
inline void UserEquip::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserEquip.userid)
}
#if LANG_CXX11
inline void UserEquip::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserEquip.userid)
}
#endif
inline void UserEquip::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserEquip.userid)
}
inline void UserEquip::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserEquip.userid)
}
inline ::std::string* UserEquip::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserEquip.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserEquip::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserEquip.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserEquip::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserEquip.userid)
}
inline ::std::string* UserEquip::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserEquip.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserEquip::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserEquip.userid)
}

// required int32 id = 2;
inline bool UserEquip::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserEquip::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserEquip::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserEquip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserEquip::id() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.id)
  return id_;
}
inline void UserEquip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserEquip.id)
}

// required int32 typeid = 3;
inline bool UserEquip::has_typeid_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserEquip::set_has_typeid_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserEquip::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserEquip::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 UserEquip::typeid_() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.typeid)
  return typeid__;
}
inline void UserEquip::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.UserEquip.typeid)
}

// required int32 quality = 4;
inline bool UserEquip::has_quality() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserEquip::set_has_quality() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserEquip::clear_has_quality() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserEquip::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 UserEquip::quality() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.quality)
  return quality_;
}
inline void UserEquip::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:db.UserEquip.quality)
}

// required int32 state = 5;
inline bool UserEquip::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserEquip::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserEquip::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserEquip::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserEquip::state() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.state)
  return state_;
}
inline void UserEquip::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserEquip.state)
}

// required bytes attribute = 6;
inline bool UserEquip::has_attribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEquip::set_has_attribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEquip::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEquip::clear_attribute() {
  attribute_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attribute();
}
inline const ::std::string& UserEquip::attribute() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.attribute)
  return attribute_.Get();
}
inline void UserEquip::set_attribute(const ::std::string& value) {
  set_has_attribute();
  attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserEquip.attribute)
}
#if LANG_CXX11
inline void UserEquip::set_attribute(::std::string&& value) {
  set_has_attribute();
  attribute_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserEquip.attribute)
}
#endif
inline void UserEquip::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attribute();
  attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserEquip.attribute)
}
inline void UserEquip::set_attribute(const void* value,
    size_t size) {
  set_has_attribute();
  attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserEquip.attribute)
}
inline ::std::string* UserEquip::mutable_attribute() {
  set_has_attribute();
  // @@protoc_insertion_point(field_mutable:db.UserEquip.attribute)
  return attribute_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserEquip::release_attribute() {
  // @@protoc_insertion_point(field_release:db.UserEquip.attribute)
  if (!has_attribute()) {
    return NULL;
  }
  clear_has_attribute();
  return attribute_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserEquip::set_allocated_attribute(::std::string* attribute) {
  if (attribute != NULL) {
    set_has_attribute();
  } else {
    clear_has_attribute();
  }
  attribute_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserEquip.attribute)
}
inline ::std::string* UserEquip::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserEquip.attribute)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attribute();
  return attribute_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserEquip::unsafe_arena_set_allocated_attribute(
    ::std::string* attribute) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attribute != NULL) {
    set_has_attribute();
  } else {
    clear_has_attribute();
  }
  attribute_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attribute, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserEquip.attribute)
}

// required bytes special_attr = 7;
inline bool UserEquip::has_special_attr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEquip::set_has_special_attr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserEquip::clear_has_special_attr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserEquip::clear_special_attr() {
  special_attr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_special_attr();
}
inline const ::std::string& UserEquip::special_attr() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.special_attr)
  return special_attr_.Get();
}
inline void UserEquip::set_special_attr(const ::std::string& value) {
  set_has_special_attr();
  special_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserEquip.special_attr)
}
#if LANG_CXX11
inline void UserEquip::set_special_attr(::std::string&& value) {
  set_has_special_attr();
  special_attr_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserEquip.special_attr)
}
#endif
inline void UserEquip::set_special_attr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_special_attr();
  special_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserEquip.special_attr)
}
inline void UserEquip::set_special_attr(const void* value,
    size_t size) {
  set_has_special_attr();
  special_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserEquip.special_attr)
}
inline ::std::string* UserEquip::mutable_special_attr() {
  set_has_special_attr();
  // @@protoc_insertion_point(field_mutable:db.UserEquip.special_attr)
  return special_attr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserEquip::release_special_attr() {
  // @@protoc_insertion_point(field_release:db.UserEquip.special_attr)
  if (!has_special_attr()) {
    return NULL;
  }
  clear_has_special_attr();
  return special_attr_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserEquip::set_allocated_special_attr(::std::string* special_attr) {
  if (special_attr != NULL) {
    set_has_special_attr();
  } else {
    clear_has_special_attr();
  }
  special_attr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), special_attr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserEquip.special_attr)
}
inline ::std::string* UserEquip::unsafe_arena_release_special_attr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserEquip.special_attr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_special_attr();
  return special_attr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserEquip::unsafe_arena_set_allocated_special_attr(
    ::std::string* special_attr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (special_attr != NULL) {
    set_has_special_attr();
  } else {
    clear_has_special_attr();
  }
  special_attr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      special_attr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserEquip.special_attr)
}

// required bytes attribute_slot = 8;
inline bool UserEquip::has_attribute_slot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserEquip::set_has_attribute_slot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserEquip::clear_has_attribute_slot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserEquip::clear_attribute_slot() {
  attribute_slot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attribute_slot();
}
inline const ::std::string& UserEquip::attribute_slot() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.attribute_slot)
  return attribute_slot_.Get();
}
inline void UserEquip::set_attribute_slot(const ::std::string& value) {
  set_has_attribute_slot();
  attribute_slot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserEquip.attribute_slot)
}
#if LANG_CXX11
inline void UserEquip::set_attribute_slot(::std::string&& value) {
  set_has_attribute_slot();
  attribute_slot_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserEquip.attribute_slot)
}
#endif
inline void UserEquip::set_attribute_slot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attribute_slot();
  attribute_slot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserEquip.attribute_slot)
}
inline void UserEquip::set_attribute_slot(const void* value,
    size_t size) {
  set_has_attribute_slot();
  attribute_slot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserEquip.attribute_slot)
}
inline ::std::string* UserEquip::mutable_attribute_slot() {
  set_has_attribute_slot();
  // @@protoc_insertion_point(field_mutable:db.UserEquip.attribute_slot)
  return attribute_slot_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserEquip::release_attribute_slot() {
  // @@protoc_insertion_point(field_release:db.UserEquip.attribute_slot)
  if (!has_attribute_slot()) {
    return NULL;
  }
  clear_has_attribute_slot();
  return attribute_slot_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserEquip::set_allocated_attribute_slot(::std::string* attribute_slot) {
  if (attribute_slot != NULL) {
    set_has_attribute_slot();
  } else {
    clear_has_attribute_slot();
  }
  attribute_slot_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute_slot,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserEquip.attribute_slot)
}
inline ::std::string* UserEquip::unsafe_arena_release_attribute_slot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserEquip.attribute_slot)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attribute_slot();
  return attribute_slot_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserEquip::unsafe_arena_set_allocated_attribute_slot(
    ::std::string* attribute_slot) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attribute_slot != NULL) {
    set_has_attribute_slot();
  } else {
    clear_has_attribute_slot();
  }
  attribute_slot_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attribute_slot, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserEquip.attribute_slot)
}

// required int32 belong_to = 9;
inline bool UserEquip::has_belong_to() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserEquip::set_has_belong_to() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserEquip::clear_has_belong_to() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserEquip::clear_belong_to() {
  belong_to_ = 0;
  clear_has_belong_to();
}
inline ::google::protobuf::int32 UserEquip::belong_to() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.belong_to)
  return belong_to_;
}
inline void UserEquip::set_belong_to(::google::protobuf::int32 value) {
  set_has_belong_to();
  belong_to_ = value;
  // @@protoc_insertion_point(field_set:db.UserEquip.belong_to)
}

// optional int32 quality_refine_times = 10;
inline bool UserEquip::has_quality_refine_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserEquip::set_has_quality_refine_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserEquip::clear_has_quality_refine_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserEquip::clear_quality_refine_times() {
  quality_refine_times_ = 0;
  clear_has_quality_refine_times();
}
inline ::google::protobuf::int32 UserEquip::quality_refine_times() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.quality_refine_times)
  return quality_refine_times_;
}
inline void UserEquip::set_quality_refine_times(::google::protobuf::int32 value) {
  set_has_quality_refine_times();
  quality_refine_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserEquip.quality_refine_times)
}

// optional int64 skill = 11;
inline bool UserEquip::has_skill() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserEquip::set_has_skill() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserEquip::clear_has_skill() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserEquip::clear_skill() {
  skill_ = GOOGLE_LONGLONG(0);
  clear_has_skill();
}
inline ::google::protobuf::int64 UserEquip::skill() const {
  // @@protoc_insertion_point(field_get:db.UserEquip.skill)
  return skill_;
}
inline void UserEquip::set_skill(::google::protobuf::int64 value) {
  set_has_skill();
  skill_ = value;
  // @@protoc_insertion_point(field_set:db.UserEquip.skill)
}

// -------------------------------------------------------------------

// UserSailorSkill

// required bytes userid = 1;
inline bool UserSailorSkill::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSailorSkill::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSailorSkill::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSailorSkill::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserSailorSkill::userid() const {
  // @@protoc_insertion_point(field_get:db.UserSailorSkill.userid)
  return userid_.Get();
}
inline void UserSailorSkill::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserSailorSkill.userid)
}
#if LANG_CXX11
inline void UserSailorSkill::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserSailorSkill.userid)
}
#endif
inline void UserSailorSkill::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserSailorSkill.userid)
}
inline void UserSailorSkill::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserSailorSkill.userid)
}
inline ::std::string* UserSailorSkill::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserSailorSkill.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserSailorSkill::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserSailorSkill.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserSailorSkill::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserSailorSkill.userid)
}
inline ::std::string* UserSailorSkill::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserSailorSkill.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserSailorSkill::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserSailorSkill.userid)
}

// required int32 id = 2;
inline bool UserSailorSkill::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSailorSkill::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSailorSkill::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSailorSkill::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserSailorSkill::id() const {
  // @@protoc_insertion_point(field_get:db.UserSailorSkill.id)
  return id_;
}
inline void UserSailorSkill::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorSkill.id)
}

// required int32 slotid = 3;
inline bool UserSailorSkill::has_slotid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSailorSkill::set_has_slotid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSailorSkill::clear_has_slotid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSailorSkill::clear_slotid() {
  slotid_ = 0;
  clear_has_slotid();
}
inline ::google::protobuf::int32 UserSailorSkill::slotid() const {
  // @@protoc_insertion_point(field_get:db.UserSailorSkill.slotid)
  return slotid_;
}
inline void UserSailorSkill::set_slotid(::google::protobuf::int32 value) {
  set_has_slotid();
  slotid_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorSkill.slotid)
}

// required int32 type = 4;
inline bool UserSailorSkill::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSailorSkill::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSailorSkill::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSailorSkill::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserSailorSkill::type() const {
  // @@protoc_insertion_point(field_get:db.UserSailorSkill.type)
  return type_;
}
inline void UserSailorSkill::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorSkill.type)
}

// required uint64 skillid = 5;
inline bool UserSailorSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSailorSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSailorSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSailorSkill::clear_skillid() {
  skillid_ = GOOGLE_ULONGLONG(0);
  clear_has_skillid();
}
inline ::google::protobuf::uint64 UserSailorSkill::skillid() const {
  // @@protoc_insertion_point(field_get:db.UserSailorSkill.skillid)
  return skillid_;
}
inline void UserSailorSkill::set_skillid(::google::protobuf::uint64 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorSkill.skillid)
}

// required int32 level = 6;
inline bool UserSailorSkill::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserSailorSkill::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserSailorSkill::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserSailorSkill::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserSailorSkill::level() const {
  // @@protoc_insertion_point(field_get:db.UserSailorSkill.level)
  return level_;
}
inline void UserSailorSkill::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorSkill.level)
}

// -------------------------------------------------------------------

// UserSailorFarmSkill

// required bytes userid = 1;
inline bool UserSailorFarmSkill::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSailorFarmSkill::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSailorFarmSkill::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSailorFarmSkill::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserSailorFarmSkill::userid() const {
  // @@protoc_insertion_point(field_get:db.UserSailorFarmSkill.userid)
  return userid_.Get();
}
inline void UserSailorFarmSkill::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserSailorFarmSkill.userid)
}
#if LANG_CXX11
inline void UserSailorFarmSkill::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserSailorFarmSkill.userid)
}
#endif
inline void UserSailorFarmSkill::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserSailorFarmSkill.userid)
}
inline void UserSailorFarmSkill::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserSailorFarmSkill.userid)
}
inline ::std::string* UserSailorFarmSkill::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserSailorFarmSkill.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserSailorFarmSkill::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserSailorFarmSkill.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserSailorFarmSkill::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserSailorFarmSkill.userid)
}
inline ::std::string* UserSailorFarmSkill::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserSailorFarmSkill.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserSailorFarmSkill::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserSailorFarmSkill.userid)
}

// required int32 id = 2;
inline bool UserSailorFarmSkill::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSailorFarmSkill::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSailorFarmSkill::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSailorFarmSkill::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserSailorFarmSkill::id() const {
  // @@protoc_insertion_point(field_get:db.UserSailorFarmSkill.id)
  return id_;
}
inline void UserSailorFarmSkill::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorFarmSkill.id)
}

// required uint64 skillid = 3;
inline bool UserSailorFarmSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSailorFarmSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSailorFarmSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSailorFarmSkill::clear_skillid() {
  skillid_ = GOOGLE_ULONGLONG(0);
  clear_has_skillid();
}
inline ::google::protobuf::uint64 UserSailorFarmSkill::skillid() const {
  // @@protoc_insertion_point(field_get:db.UserSailorFarmSkill.skillid)
  return skillid_;
}
inline void UserSailorFarmSkill::set_skillid(::google::protobuf::uint64 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorFarmSkill.skillid)
}

// required int32 level = 4;
inline bool UserSailorFarmSkill::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSailorFarmSkill::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSailorFarmSkill::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSailorFarmSkill::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserSailorFarmSkill::level() const {
  // @@protoc_insertion_point(field_get:db.UserSailorFarmSkill.level)
  return level_;
}
inline void UserSailorFarmSkill::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorFarmSkill.level)
}

// required int32 exp = 5;
inline bool UserSailorFarmSkill::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSailorFarmSkill::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSailorFarmSkill::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSailorFarmSkill::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 UserSailorFarmSkill::exp() const {
  // @@protoc_insertion_point(field_get:db.UserSailorFarmSkill.exp)
  return exp_;
}
inline void UserSailorFarmSkill::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorFarmSkill.exp)
}

// -------------------------------------------------------------------

// UserFightManual

// required bytes userid = 1;
inline bool UserFightManual::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFightManual::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFightManual::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFightManual::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserFightManual::userid() const {
  // @@protoc_insertion_point(field_get:db.UserFightManual.userid)
  return userid_.Get();
}
inline void UserFightManual::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserFightManual.userid)
}
#if LANG_CXX11
inline void UserFightManual::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserFightManual.userid)
}
#endif
inline void UserFightManual::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserFightManual.userid)
}
inline void UserFightManual::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserFightManual.userid)
}
inline ::std::string* UserFightManual::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserFightManual.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserFightManual::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserFightManual.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserFightManual::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserFightManual.userid)
}
inline ::std::string* UserFightManual::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserFightManual.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserFightManual::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserFightManual.userid)
}

// required int32 type = 2;
inline bool UserFightManual::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFightManual::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFightManual::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFightManual::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserFightManual::type() const {
  // @@protoc_insertion_point(field_get:db.UserFightManual.type)
  return type_;
}
inline void UserFightManual::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserFightManual.type)
}

// required int32 typeid = 3;
inline bool UserFightManual::has_typeid_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserFightManual::set_has_typeid_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserFightManual::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserFightManual::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 UserFightManual::typeid_() const {
  // @@protoc_insertion_point(field_get:db.UserFightManual.typeid)
  return typeid__;
}
inline void UserFightManual::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.UserFightManual.typeid)
}

// -------------------------------------------------------------------

// UserHiddenData

// required bytes userid = 1;
inline bool UserHiddenData::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserHiddenData::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserHiddenData::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserHiddenData::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserHiddenData::userid() const {
  // @@protoc_insertion_point(field_get:db.UserHiddenData.userid)
  return userid_.Get();
}
inline void UserHiddenData::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserHiddenData.userid)
}
#if LANG_CXX11
inline void UserHiddenData::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserHiddenData.userid)
}
#endif
inline void UserHiddenData::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserHiddenData.userid)
}
inline void UserHiddenData::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserHiddenData.userid)
}
inline ::std::string* UserHiddenData::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserHiddenData.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserHiddenData::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserHiddenData.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserHiddenData::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserHiddenData.userid)
}
inline ::std::string* UserHiddenData::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserHiddenData.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserHiddenData::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserHiddenData.userid)
}

// required float businessman_pro_add = 2;
inline bool UserHiddenData::has_businessman_pro_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserHiddenData::set_has_businessman_pro_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserHiddenData::clear_has_businessman_pro_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserHiddenData::clear_businessman_pro_add() {
  businessman_pro_add_ = 0;
  clear_has_businessman_pro_add();
}
inline float UserHiddenData::businessman_pro_add() const {
  // @@protoc_insertion_point(field_get:db.UserHiddenData.businessman_pro_add)
  return businessman_pro_add_;
}
inline void UserHiddenData::set_businessman_pro_add(float value) {
  set_has_businessman_pro_add();
  businessman_pro_add_ = value;
  // @@protoc_insertion_point(field_set:db.UserHiddenData.businessman_pro_add)
}

// -------------------------------------------------------------------

// UserSpecialEvent

// required bytes userid = 1;
inline bool UserSpecialEvent::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSpecialEvent::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSpecialEvent::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSpecialEvent::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserSpecialEvent::userid() const {
  // @@protoc_insertion_point(field_get:db.UserSpecialEvent.userid)
  return userid_.Get();
}
inline void UserSpecialEvent::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserSpecialEvent.userid)
}
#if LANG_CXX11
inline void UserSpecialEvent::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserSpecialEvent.userid)
}
#endif
inline void UserSpecialEvent::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserSpecialEvent.userid)
}
inline void UserSpecialEvent::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserSpecialEvent.userid)
}
inline ::std::string* UserSpecialEvent::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserSpecialEvent.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserSpecialEvent::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserSpecialEvent.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserSpecialEvent::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserSpecialEvent.userid)
}
inline ::std::string* UserSpecialEvent::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserSpecialEvent.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserSpecialEvent::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserSpecialEvent.userid)
}

// required int64 id = 2;
inline bool UserSpecialEvent::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSpecialEvent::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSpecialEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSpecialEvent::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 UserSpecialEvent::id() const {
  // @@protoc_insertion_point(field_get:db.UserSpecialEvent.id)
  return id_;
}
inline void UserSpecialEvent::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserSpecialEvent.id)
}

// required int32 trigger_times = 3;
inline bool UserSpecialEvent::has_trigger_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSpecialEvent::set_has_trigger_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSpecialEvent::clear_has_trigger_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSpecialEvent::clear_trigger_times() {
  trigger_times_ = 0;
  clear_has_trigger_times();
}
inline ::google::protobuf::int32 UserSpecialEvent::trigger_times() const {
  // @@protoc_insertion_point(field_get:db.UserSpecialEvent.trigger_times)
  return trigger_times_;
}
inline void UserSpecialEvent::set_trigger_times(::google::protobuf::int32 value) {
  set_has_trigger_times();
  trigger_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserSpecialEvent.trigger_times)
}

// required int32 happen_times = 4;
inline bool UserSpecialEvent::has_happen_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSpecialEvent::set_has_happen_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSpecialEvent::clear_has_happen_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSpecialEvent::clear_happen_times() {
  happen_times_ = 0;
  clear_has_happen_times();
}
inline ::google::protobuf::int32 UserSpecialEvent::happen_times() const {
  // @@protoc_insertion_point(field_get:db.UserSpecialEvent.happen_times)
  return happen_times_;
}
inline void UserSpecialEvent::set_happen_times(::google::protobuf::int32 value) {
  set_has_happen_times();
  happen_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserSpecialEvent.happen_times)
}

// required sfixed64 timestamp = 5;
inline bool UserSpecialEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSpecialEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSpecialEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSpecialEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserSpecialEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserSpecialEvent.timestamp)
  return timestamp_;
}
inline void UserSpecialEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserSpecialEvent.timestamp)
}

// -------------------------------------------------------------------

// UserSailorInGhostShip

// required bytes userid = 1;
inline bool UserSailorInGhostShip::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSailorInGhostShip::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSailorInGhostShip::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSailorInGhostShip::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserSailorInGhostShip::userid() const {
  // @@protoc_insertion_point(field_get:db.UserSailorInGhostShip.userid)
  return userid_.Get();
}
inline void UserSailorInGhostShip::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserSailorInGhostShip.userid)
}
#if LANG_CXX11
inline void UserSailorInGhostShip::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserSailorInGhostShip.userid)
}
#endif
inline void UserSailorInGhostShip::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserSailorInGhostShip.userid)
}
inline void UserSailorInGhostShip::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserSailorInGhostShip.userid)
}
inline ::std::string* UserSailorInGhostShip::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserSailorInGhostShip.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserSailorInGhostShip::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserSailorInGhostShip.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserSailorInGhostShip::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserSailorInGhostShip.userid)
}
inline ::std::string* UserSailorInGhostShip::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserSailorInGhostShip.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserSailorInGhostShip::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserSailorInGhostShip.userid)
}

// required int32 id = 2;
inline bool UserSailorInGhostShip::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSailorInGhostShip::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSailorInGhostShip::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSailorInGhostShip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserSailorInGhostShip::id() const {
  // @@protoc_insertion_point(field_get:db.UserSailorInGhostShip.id)
  return id_;
}
inline void UserSailorInGhostShip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserSailorInGhostShip.id)
}

// required bytes data = 4;
inline bool UserSailorInGhostShip::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSailorInGhostShip::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSailorInGhostShip::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSailorInGhostShip::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
inline const ::std::string& UserSailorInGhostShip::data() const {
  // @@protoc_insertion_point(field_get:db.UserSailorInGhostShip.data)
  return data_.Get();
}
inline void UserSailorInGhostShip::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserSailorInGhostShip.data)
}
#if LANG_CXX11
inline void UserSailorInGhostShip::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserSailorInGhostShip.data)
}
#endif
inline void UserSailorInGhostShip::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserSailorInGhostShip.data)
}
inline void UserSailorInGhostShip::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserSailorInGhostShip.data)
}
inline ::std::string* UserSailorInGhostShip::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:db.UserSailorInGhostShip.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserSailorInGhostShip::release_data() {
  // @@protoc_insertion_point(field_release:db.UserSailorInGhostShip.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserSailorInGhostShip::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserSailorInGhostShip.data)
}
inline ::std::string* UserSailorInGhostShip::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserSailorInGhostShip.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserSailorInGhostShip::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserSailorInGhostShip.data)
}

// -------------------------------------------------------------------

// UserGhostStage

// required bytes userid = 1;
inline bool UserGhostStage::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserGhostStage::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserGhostStage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserGhostStage::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserGhostStage::userid() const {
  // @@protoc_insertion_point(field_get:db.UserGhostStage.userid)
  return userid_.Get();
}
inline void UserGhostStage::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserGhostStage.userid)
}
#if LANG_CXX11
inline void UserGhostStage::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserGhostStage.userid)
}
#endif
inline void UserGhostStage::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserGhostStage.userid)
}
inline void UserGhostStage::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserGhostStage.userid)
}
inline ::std::string* UserGhostStage::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserGhostStage.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserGhostStage::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserGhostStage.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserGhostStage::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserGhostStage.userid)
}
inline ::std::string* UserGhostStage::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserGhostStage.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserGhostStage::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserGhostStage.userid)
}

// required int32 id = 2;
inline bool UserGhostStage::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserGhostStage::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserGhostStage::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserGhostStage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserGhostStage::id() const {
  // @@protoc_insertion_point(field_get:db.UserGhostStage.id)
  return id_;
}
inline void UserGhostStage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserGhostStage.id)
}

// required int32 type = 3;
inline bool UserGhostStage::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserGhostStage::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserGhostStage::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserGhostStage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserGhostStage::type() const {
  // @@protoc_insertion_point(field_get:db.UserGhostStage.type)
  return type_;
}
inline void UserGhostStage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserGhostStage.type)
}

// required bytes name = 4;
inline bool UserGhostStage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserGhostStage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserGhostStage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserGhostStage::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& UserGhostStage::name() const {
  // @@protoc_insertion_point(field_get:db.UserGhostStage.name)
  return name_.Get();
}
inline void UserGhostStage::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserGhostStage.name)
}
#if LANG_CXX11
inline void UserGhostStage::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserGhostStage.name)
}
#endif
inline void UserGhostStage::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserGhostStage.name)
}
inline void UserGhostStage::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserGhostStage.name)
}
inline ::std::string* UserGhostStage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.UserGhostStage.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserGhostStage::release_name() {
  // @@protoc_insertion_point(field_release:db.UserGhostStage.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserGhostStage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserGhostStage.name)
}
inline ::std::string* UserGhostStage::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserGhostStage.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserGhostStage::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserGhostStage.name)
}

// required int32 level = 5;
inline bool UserGhostStage::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserGhostStage::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserGhostStage::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserGhostStage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserGhostStage::level() const {
  // @@protoc_insertion_point(field_get:db.UserGhostStage.level)
  return level_;
}
inline void UserGhostStage::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.UserGhostStage.level)
}

// required int32 state = 6;
inline bool UserGhostStage::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserGhostStage::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserGhostStage::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserGhostStage::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserGhostStage::state() const {
  // @@protoc_insertion_point(field_get:db.UserGhostStage.state)
  return state_;
}
inline void UserGhostStage::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserGhostStage.state)
}

// required bytes battle_data = 7;
inline bool UserGhostStage::has_battle_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserGhostStage::set_has_battle_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserGhostStage::clear_has_battle_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserGhostStage::clear_battle_data() {
  battle_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_battle_data();
}
inline const ::std::string& UserGhostStage::battle_data() const {
  // @@protoc_insertion_point(field_get:db.UserGhostStage.battle_data)
  return battle_data_.Get();
}
inline void UserGhostStage::set_battle_data(const ::std::string& value) {
  set_has_battle_data();
  battle_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserGhostStage.battle_data)
}
#if LANG_CXX11
inline void UserGhostStage::set_battle_data(::std::string&& value) {
  set_has_battle_data();
  battle_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserGhostStage.battle_data)
}
#endif
inline void UserGhostStage::set_battle_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_battle_data();
  battle_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserGhostStage.battle_data)
}
inline void UserGhostStage::set_battle_data(const void* value,
    size_t size) {
  set_has_battle_data();
  battle_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserGhostStage.battle_data)
}
inline ::std::string* UserGhostStage::mutable_battle_data() {
  set_has_battle_data();
  // @@protoc_insertion_point(field_mutable:db.UserGhostStage.battle_data)
  return battle_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserGhostStage::release_battle_data() {
  // @@protoc_insertion_point(field_release:db.UserGhostStage.battle_data)
  if (!has_battle_data()) {
    return NULL;
  }
  clear_has_battle_data();
  return battle_data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserGhostStage::set_allocated_battle_data(::std::string* battle_data) {
  if (battle_data != NULL) {
    set_has_battle_data();
  } else {
    clear_has_battle_data();
  }
  battle_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), battle_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserGhostStage.battle_data)
}
inline ::std::string* UserGhostStage::unsafe_arena_release_battle_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserGhostStage.battle_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_battle_data();
  return battle_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserGhostStage::unsafe_arena_set_allocated_battle_data(
    ::std::string* battle_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (battle_data != NULL) {
    set_has_battle_data();
  } else {
    clear_has_battle_data();
  }
  battle_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      battle_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserGhostStage.battle_data)
}

// -------------------------------------------------------------------

// UserGhostShip

// required bytes userid = 1;
inline bool UserGhostShip::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserGhostShip::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserGhostShip::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserGhostShip::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserGhostShip::userid() const {
  // @@protoc_insertion_point(field_get:db.UserGhostShip.userid)
  return userid_.Get();
}
inline void UserGhostShip::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserGhostShip.userid)
}
#if LANG_CXX11
inline void UserGhostShip::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserGhostShip.userid)
}
#endif
inline void UserGhostShip::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserGhostShip.userid)
}
inline void UserGhostShip::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserGhostShip.userid)
}
inline ::std::string* UserGhostShip::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserGhostShip.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserGhostShip::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserGhostShip.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserGhostShip::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserGhostShip.userid)
}
inline ::std::string* UserGhostShip::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserGhostShip.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserGhostShip::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserGhostShip.userid)
}

// required int32 state = 2;
inline bool UserGhostShip::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserGhostShip::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserGhostShip::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserGhostShip::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserGhostShip::state() const {
  // @@protoc_insertion_point(field_get:db.UserGhostShip.state)
  return state_;
}
inline void UserGhostShip::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserGhostShip.state)
}

// required int32 reset_times = 3;
inline bool UserGhostShip::has_reset_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserGhostShip::set_has_reset_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserGhostShip::clear_has_reset_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserGhostShip::clear_reset_times() {
  reset_times_ = 0;
  clear_has_reset_times();
}
inline ::google::protobuf::int32 UserGhostShip::reset_times() const {
  // @@protoc_insertion_point(field_get:db.UserGhostShip.reset_times)
  return reset_times_;
}
inline void UserGhostShip::set_reset_times(::google::protobuf::int32 value) {
  set_has_reset_times();
  reset_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserGhostShip.reset_times)
}

// required bytes buff_get = 4;
inline bool UserGhostShip::has_buff_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserGhostShip::set_has_buff_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserGhostShip::clear_has_buff_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserGhostShip::clear_buff_get() {
  buff_get_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_buff_get();
}
inline const ::std::string& UserGhostShip::buff_get() const {
  // @@protoc_insertion_point(field_get:db.UserGhostShip.buff_get)
  return buff_get_.Get();
}
inline void UserGhostShip::set_buff_get(const ::std::string& value) {
  set_has_buff_get();
  buff_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserGhostShip.buff_get)
}
#if LANG_CXX11
inline void UserGhostShip::set_buff_get(::std::string&& value) {
  set_has_buff_get();
  buff_get_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserGhostShip.buff_get)
}
#endif
inline void UserGhostShip::set_buff_get(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buff_get();
  buff_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserGhostShip.buff_get)
}
inline void UserGhostShip::set_buff_get(const void* value,
    size_t size) {
  set_has_buff_get();
  buff_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserGhostShip.buff_get)
}
inline ::std::string* UserGhostShip::mutable_buff_get() {
  set_has_buff_get();
  // @@protoc_insertion_point(field_mutable:db.UserGhostShip.buff_get)
  return buff_get_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserGhostShip::release_buff_get() {
  // @@protoc_insertion_point(field_release:db.UserGhostShip.buff_get)
  if (!has_buff_get()) {
    return NULL;
  }
  clear_has_buff_get();
  return buff_get_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserGhostShip::set_allocated_buff_get(::std::string* buff_get) {
  if (buff_get != NULL) {
    set_has_buff_get();
  } else {
    clear_has_buff_get();
  }
  buff_get_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buff_get,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserGhostShip.buff_get)
}
inline ::std::string* UserGhostShip::unsafe_arena_release_buff_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserGhostShip.buff_get)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_buff_get();
  return buff_get_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserGhostShip::unsafe_arena_set_allocated_buff_get(
    ::std::string* buff_get) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (buff_get != NULL) {
    set_has_buff_get();
  } else {
    clear_has_buff_get();
  }
  buff_get_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      buff_get, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserGhostShip.buff_get)
}

// required int32 attack_times = 5;
inline bool UserGhostShip::has_attack_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserGhostShip::set_has_attack_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserGhostShip::clear_has_attack_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserGhostShip::clear_attack_times() {
  attack_times_ = 0;
  clear_has_attack_times();
}
inline ::google::protobuf::int32 UserGhostShip::attack_times() const {
  // @@protoc_insertion_point(field_get:db.UserGhostShip.attack_times)
  return attack_times_;
}
inline void UserGhostShip::set_attack_times(::google::protobuf::int32 value) {
  set_has_attack_times();
  attack_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserGhostShip.attack_times)
}

// required int32 rank = 6;
inline bool UserGhostShip::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserGhostShip::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserGhostShip::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserGhostShip::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 UserGhostShip::rank() const {
  // @@protoc_insertion_point(field_get:db.UserGhostShip.rank)
  return rank_;
}
inline void UserGhostShip::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:db.UserGhostShip.rank)
}

// -------------------------------------------------------------------

// UserBattleState

// required bytes userid = 1;
inline bool UserBattleState::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBattleState::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBattleState::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBattleState::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserBattleState::userid() const {
  // @@protoc_insertion_point(field_get:db.UserBattleState.userid)
  return userid_.Get();
}
inline void UserBattleState::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserBattleState.userid)
}
#if LANG_CXX11
inline void UserBattleState::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserBattleState.userid)
}
#endif
inline void UserBattleState::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserBattleState.userid)
}
inline void UserBattleState::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserBattleState.userid)
}
inline ::std::string* UserBattleState::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserBattleState.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserBattleState::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserBattleState.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserBattleState::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserBattleState.userid)
}
inline ::std::string* UserBattleState::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserBattleState.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserBattleState::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserBattleState.userid)
}

// required int32 dungeon_id = 2;
inline bool UserBattleState::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserBattleState::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserBattleState::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserBattleState::clear_dungeon_id() {
  dungeon_id_ = 0;
  clear_has_dungeon_id();
}
inline ::google::protobuf::int32 UserBattleState::dungeon_id() const {
  // @@protoc_insertion_point(field_get:db.UserBattleState.dungeon_id)
  return dungeon_id_;
}
inline void UserBattleState::set_dungeon_id(::google::protobuf::int32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:db.UserBattleState.dungeon_id)
}

// required bytes user_info = 4;
inline bool UserBattleState::has_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBattleState::set_has_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBattleState::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBattleState::clear_user_info() {
  user_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_user_info();
}
inline const ::std::string& UserBattleState::user_info() const {
  // @@protoc_insertion_point(field_get:db.UserBattleState.user_info)
  return user_info_.Get();
}
inline void UserBattleState::set_user_info(const ::std::string& value) {
  set_has_user_info();
  user_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserBattleState.user_info)
}
#if LANG_CXX11
inline void UserBattleState::set_user_info(::std::string&& value) {
  set_has_user_info();
  user_info_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserBattleState.user_info)
}
#endif
inline void UserBattleState::set_user_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_info();
  user_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserBattleState.user_info)
}
inline void UserBattleState::set_user_info(const void* value,
    size_t size) {
  set_has_user_info();
  user_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserBattleState.user_info)
}
inline ::std::string* UserBattleState::mutable_user_info() {
  set_has_user_info();
  // @@protoc_insertion_point(field_mutable:db.UserBattleState.user_info)
  return user_info_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserBattleState::release_user_info() {
  // @@protoc_insertion_point(field_release:db.UserBattleState.user_info)
  if (!has_user_info()) {
    return NULL;
  }
  clear_has_user_info();
  return user_info_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserBattleState::set_allocated_user_info(::std::string* user_info) {
  if (user_info != NULL) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  user_info_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_info,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserBattleState.user_info)
}
inline ::std::string* UserBattleState::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserBattleState.user_info)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_user_info();
  return user_info_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserBattleState::unsafe_arena_set_allocated_user_info(
    ::std::string* user_info) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_info != NULL) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  user_info_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_info, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserBattleState.user_info)
}

// required bytes battle_data = 5;
inline bool UserBattleState::has_battle_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBattleState::set_has_battle_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBattleState::clear_has_battle_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBattleState::clear_battle_data() {
  battle_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_battle_data();
}
inline const ::std::string& UserBattleState::battle_data() const {
  // @@protoc_insertion_point(field_get:db.UserBattleState.battle_data)
  return battle_data_.Get();
}
inline void UserBattleState::set_battle_data(const ::std::string& value) {
  set_has_battle_data();
  battle_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserBattleState.battle_data)
}
#if LANG_CXX11
inline void UserBattleState::set_battle_data(::std::string&& value) {
  set_has_battle_data();
  battle_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserBattleState.battle_data)
}
#endif
inline void UserBattleState::set_battle_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_battle_data();
  battle_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserBattleState.battle_data)
}
inline void UserBattleState::set_battle_data(const void* value,
    size_t size) {
  set_has_battle_data();
  battle_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserBattleState.battle_data)
}
inline ::std::string* UserBattleState::mutable_battle_data() {
  set_has_battle_data();
  // @@protoc_insertion_point(field_mutable:db.UserBattleState.battle_data)
  return battle_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserBattleState::release_battle_data() {
  // @@protoc_insertion_point(field_release:db.UserBattleState.battle_data)
  if (!has_battle_data()) {
    return NULL;
  }
  clear_has_battle_data();
  return battle_data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserBattleState::set_allocated_battle_data(::std::string* battle_data) {
  if (battle_data != NULL) {
    set_has_battle_data();
  } else {
    clear_has_battle_data();
  }
  battle_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), battle_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserBattleState.battle_data)
}
inline ::std::string* UserBattleState::unsafe_arena_release_battle_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserBattleState.battle_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_battle_data();
  return battle_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserBattleState::unsafe_arena_set_allocated_battle_data(
    ::std::string* battle_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (battle_data != NULL) {
    set_has_battle_data();
  } else {
    clear_has_battle_data();
  }
  battle_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      battle_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserBattleState.battle_data)
}

// optional bytes team_data = 6;
inline bool UserBattleState::has_team_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserBattleState::set_has_team_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserBattleState::clear_has_team_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserBattleState::clear_team_data() {
  team_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_team_data();
}
inline const ::std::string& UserBattleState::team_data() const {
  // @@protoc_insertion_point(field_get:db.UserBattleState.team_data)
  return team_data_.Get();
}
inline void UserBattleState::set_team_data(const ::std::string& value) {
  set_has_team_data();
  team_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserBattleState.team_data)
}
#if LANG_CXX11
inline void UserBattleState::set_team_data(::std::string&& value) {
  set_has_team_data();
  team_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserBattleState.team_data)
}
#endif
inline void UserBattleState::set_team_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_data();
  team_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserBattleState.team_data)
}
inline void UserBattleState::set_team_data(const void* value,
    size_t size) {
  set_has_team_data();
  team_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserBattleState.team_data)
}
inline ::std::string* UserBattleState::mutable_team_data() {
  set_has_team_data();
  // @@protoc_insertion_point(field_mutable:db.UserBattleState.team_data)
  return team_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserBattleState::release_team_data() {
  // @@protoc_insertion_point(field_release:db.UserBattleState.team_data)
  if (!has_team_data()) {
    return NULL;
  }
  clear_has_team_data();
  return team_data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserBattleState::set_allocated_team_data(::std::string* team_data) {
  if (team_data != NULL) {
    set_has_team_data();
  } else {
    clear_has_team_data();
  }
  team_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserBattleState.team_data)
}
inline ::std::string* UserBattleState::unsafe_arena_release_team_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserBattleState.team_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_team_data();
  return team_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserBattleState::unsafe_arena_set_allocated_team_data(
    ::std::string* team_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (team_data != NULL) {
    set_has_team_data();
  } else {
    clear_has_team_data();
  }
  team_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      team_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserBattleState.team_data)
}

// -------------------------------------------------------------------

// UserPvpState

// required bytes userid = 1;
inline bool UserPvpState::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPvpState::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPvpState::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPvpState::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserPvpState::userid() const {
  // @@protoc_insertion_point(field_get:db.UserPvpState.userid)
  return userid_.Get();
}
inline void UserPvpState::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPvpState.userid)
}
#if LANG_CXX11
inline void UserPvpState::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPvpState.userid)
}
#endif
inline void UserPvpState::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPvpState.userid)
}
inline void UserPvpState::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPvpState.userid)
}
inline ::std::string* UserPvpState::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserPvpState.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPvpState::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserPvpState.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPvpState::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPvpState.userid)
}
inline ::std::string* UserPvpState::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPvpState.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPvpState::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPvpState.userid)
}

// required int32 remain_times = 2;
inline bool UserPvpState::has_remain_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPvpState::set_has_remain_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPvpState::clear_has_remain_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPvpState::clear_remain_times() {
  remain_times_ = 0;
  clear_has_remain_times();
}
inline ::google::protobuf::int32 UserPvpState::remain_times() const {
  // @@protoc_insertion_point(field_get:db.UserPvpState.remain_times)
  return remain_times_;
}
inline void UserPvpState::set_remain_times(::google::protobuf::int32 value) {
  set_has_remain_times();
  remain_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpState.remain_times)
}

// required int32 combo = 3;
inline bool UserPvpState::has_combo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPvpState::set_has_combo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPvpState::clear_has_combo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPvpState::clear_combo() {
  combo_ = 0;
  clear_has_combo();
}
inline ::google::protobuf::int32 UserPvpState::combo() const {
  // @@protoc_insertion_point(field_get:db.UserPvpState.combo)
  return combo_;
}
inline void UserPvpState::set_combo(::google::protobuf::int32 value) {
  set_has_combo();
  combo_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpState.combo)
}

// required sfixed64 timestamp = 4;
inline bool UserPvpState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserPvpState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserPvpState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserPvpState::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserPvpState::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserPvpState.timestamp)
  return timestamp_;
}
inline void UserPvpState::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpState.timestamp)
}

// required sfixed64 round_start = 5;
inline bool UserPvpState::has_round_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserPvpState::set_has_round_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserPvpState::clear_has_round_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserPvpState::clear_round_start() {
  round_start_ = GOOGLE_LONGLONG(0);
  clear_has_round_start();
}
inline ::google::protobuf::int64 UserPvpState::round_start() const {
  // @@protoc_insertion_point(field_get:db.UserPvpState.round_start)
  return round_start_;
}
inline void UserPvpState::set_round_start(::google::protobuf::int64 value) {
  set_has_round_start();
  round_start_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpState.round_start)
}

// -------------------------------------------------------------------

// UserEasterEgg

// required bytes userid = 1;
inline bool UserEasterEgg::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEasterEgg::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEasterEgg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEasterEgg::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserEasterEgg::userid() const {
  // @@protoc_insertion_point(field_get:db.UserEasterEgg.userid)
  return userid_.Get();
}
inline void UserEasterEgg::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserEasterEgg.userid)
}
#if LANG_CXX11
inline void UserEasterEgg::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserEasterEgg.userid)
}
#endif
inline void UserEasterEgg::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserEasterEgg.userid)
}
inline void UserEasterEgg::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserEasterEgg.userid)
}
inline ::std::string* UserEasterEgg::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserEasterEgg.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserEasterEgg::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserEasterEgg.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserEasterEgg::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserEasterEgg.userid)
}
inline ::std::string* UserEasterEgg::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserEasterEgg.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserEasterEgg::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserEasterEgg.userid)
}

// required int64 entryid = 2;
inline bool UserEasterEgg::has_entryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEasterEgg::set_has_entryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEasterEgg::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEasterEgg::clear_entryid() {
  entryid_ = GOOGLE_LONGLONG(0);
  clear_has_entryid();
}
inline ::google::protobuf::int64 UserEasterEgg::entryid() const {
  // @@protoc_insertion_point(field_get:db.UserEasterEgg.entryid)
  return entryid_;
}
inline void UserEasterEgg::set_entryid(::google::protobuf::int64 value) {
  set_has_entryid();
  entryid_ = value;
  // @@protoc_insertion_point(field_set:db.UserEasterEgg.entryid)
}

// required int64 easter_egg = 3;
inline bool UserEasterEgg::has_easter_egg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEasterEgg::set_has_easter_egg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserEasterEgg::clear_has_easter_egg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserEasterEgg::clear_easter_egg() {
  easter_egg_ = GOOGLE_LONGLONG(0);
  clear_has_easter_egg();
}
inline ::google::protobuf::int64 UserEasterEgg::easter_egg() const {
  // @@protoc_insertion_point(field_get:db.UserEasterEgg.easter_egg)
  return easter_egg_;
}
inline void UserEasterEgg::set_easter_egg(::google::protobuf::int64 value) {
  set_has_easter_egg();
  easter_egg_ = value;
  // @@protoc_insertion_point(field_set:db.UserEasterEgg.easter_egg)
}

// required sfixed64 timestamp = 4;
inline bool UserEasterEgg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserEasterEgg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserEasterEgg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserEasterEgg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserEasterEgg::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserEasterEgg.timestamp)
  return timestamp_;
}
inline void UserEasterEgg::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserEasterEgg.timestamp)
}

// optional int32 exist_times = 5;
inline bool UserEasterEgg::has_exist_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserEasterEgg::set_has_exist_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserEasterEgg::clear_has_exist_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserEasterEgg::clear_exist_times() {
  exist_times_ = 0;
  clear_has_exist_times();
}
inline ::google::protobuf::int32 UserEasterEgg::exist_times() const {
  // @@protoc_insertion_point(field_get:db.UserEasterEgg.exist_times)
  return exist_times_;
}
inline void UserEasterEgg::set_exist_times(::google::protobuf::int32 value) {
  set_has_exist_times();
  exist_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserEasterEgg.exist_times)
}

// -------------------------------------------------------------------

// UserShipEvent

// required bytes userid = 1;
inline bool UserShipEvent::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserShipEvent::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserShipEvent::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserShipEvent::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserShipEvent::userid() const {
  // @@protoc_insertion_point(field_get:db.UserShipEvent.userid)
  return userid_.Get();
}
inline void UserShipEvent::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShipEvent.userid)
}
#if LANG_CXX11
inline void UserShipEvent::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShipEvent.userid)
}
#endif
inline void UserShipEvent::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShipEvent.userid)
}
inline void UserShipEvent::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShipEvent.userid)
}
inline ::std::string* UserShipEvent::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserShipEvent.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShipEvent::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserShipEvent.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShipEvent::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShipEvent.userid)
}
inline ::std::string* UserShipEvent::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShipEvent.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShipEvent::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShipEvent.userid)
}

// required int32 id = 2;
inline bool UserShipEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserShipEvent::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserShipEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserShipEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserShipEvent::id() const {
  // @@protoc_insertion_point(field_get:db.UserShipEvent.id)
  return id_;
}
inline void UserShipEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEvent.id)
}

// required int64 typeid = 3;
inline bool UserShipEvent::has_typeid_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserShipEvent::set_has_typeid_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserShipEvent::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserShipEvent::clear_typeid_() {
  typeid__ = GOOGLE_LONGLONG(0);
  clear_has_typeid_();
}
inline ::google::protobuf::int64 UserShipEvent::typeid_() const {
  // @@protoc_insertion_point(field_get:db.UserShipEvent.typeid)
  return typeid__;
}
inline void UserShipEvent::set_typeid_(::google::protobuf::int64 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEvent.typeid)
}

// required int32 seat = 4;
inline bool UserShipEvent::has_seat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserShipEvent::set_has_seat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserShipEvent::clear_has_seat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserShipEvent::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 UserShipEvent::seat() const {
  // @@protoc_insertion_point(field_get:db.UserShipEvent.seat)
  return seat_;
}
inline void UserShipEvent::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEvent.seat)
}

// required int32 state = 5;
inline bool UserShipEvent::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserShipEvent::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserShipEvent::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserShipEvent::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserShipEvent::state() const {
  // @@protoc_insertion_point(field_get:db.UserShipEvent.state)
  return state_;
}
inline void UserShipEvent::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEvent.state)
}

// required sfixed64 timestamp = 6;
inline bool UserShipEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserShipEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserShipEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserShipEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserShipEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserShipEvent.timestamp)
  return timestamp_;
}
inline void UserShipEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEvent.timestamp)
}

// optional int32 region = 7;
inline bool UserShipEvent::has_region() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserShipEvent::set_has_region() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserShipEvent::clear_has_region() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserShipEvent::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 UserShipEvent::region() const {
  // @@protoc_insertion_point(field_get:db.UserShipEvent.region)
  return region_;
}
inline void UserShipEvent::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEvent.region)
}

// -------------------------------------------------------------------

// UserShipEventTiming

// required bytes userid = 1;
inline bool UserShipEventTiming::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserShipEventTiming::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserShipEventTiming::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserShipEventTiming::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserShipEventTiming::userid() const {
  // @@protoc_insertion_point(field_get:db.UserShipEventTiming.userid)
  return userid_.Get();
}
inline void UserShipEventTiming::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserShipEventTiming.userid)
}
#if LANG_CXX11
inline void UserShipEventTiming::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserShipEventTiming.userid)
}
#endif
inline void UserShipEventTiming::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserShipEventTiming.userid)
}
inline void UserShipEventTiming::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserShipEventTiming.userid)
}
inline ::std::string* UserShipEventTiming::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserShipEventTiming.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserShipEventTiming::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserShipEventTiming.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserShipEventTiming::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserShipEventTiming.userid)
}
inline ::std::string* UserShipEventTiming::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserShipEventTiming.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserShipEventTiming::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserShipEventTiming.userid)
}

// required int64 event = 2;
inline bool UserShipEventTiming::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserShipEventTiming::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserShipEventTiming::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserShipEventTiming::clear_event() {
  event_ = GOOGLE_LONGLONG(0);
  clear_has_event();
}
inline ::google::protobuf::int64 UserShipEventTiming::event() const {
  // @@protoc_insertion_point(field_get:db.UserShipEventTiming.event)
  return event_;
}
inline void UserShipEventTiming::set_event(::google::protobuf::int64 value) {
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEventTiming.event)
}

// required int64 online_seconds = 3;
inline bool UserShipEventTiming::has_online_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserShipEventTiming::set_has_online_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserShipEventTiming::clear_has_online_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserShipEventTiming::clear_online_seconds() {
  online_seconds_ = GOOGLE_LONGLONG(0);
  clear_has_online_seconds();
}
inline ::google::protobuf::int64 UserShipEventTiming::online_seconds() const {
  // @@protoc_insertion_point(field_get:db.UserShipEventTiming.online_seconds)
  return online_seconds_;
}
inline void UserShipEventTiming::set_online_seconds(::google::protobuf::int64 value) {
  set_has_online_seconds();
  online_seconds_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEventTiming.online_seconds)
}

// required int64 offline_seconds = 4;
inline bool UserShipEventTiming::has_offline_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserShipEventTiming::set_has_offline_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserShipEventTiming::clear_has_offline_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserShipEventTiming::clear_offline_seconds() {
  offline_seconds_ = GOOGLE_LONGLONG(0);
  clear_has_offline_seconds();
}
inline ::google::protobuf::int64 UserShipEventTiming::offline_seconds() const {
  // @@protoc_insertion_point(field_get:db.UserShipEventTiming.offline_seconds)
  return offline_seconds_;
}
inline void UserShipEventTiming::set_offline_seconds(::google::protobuf::int64 value) {
  set_has_offline_seconds();
  offline_seconds_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEventTiming.offline_seconds)
}

// required int32 happened_times = 5;
inline bool UserShipEventTiming::has_happened_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserShipEventTiming::set_has_happened_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserShipEventTiming::clear_has_happened_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserShipEventTiming::clear_happened_times() {
  happened_times_ = 0;
  clear_has_happened_times();
}
inline ::google::protobuf::int32 UserShipEventTiming::happened_times() const {
  // @@protoc_insertion_point(field_get:db.UserShipEventTiming.happened_times)
  return happened_times_;
}
inline void UserShipEventTiming::set_happened_times(::google::protobuf::int32 value) {
  set_has_happened_times();
  happened_times_ = value;
  // @@protoc_insertion_point(field_set:db.UserShipEventTiming.happened_times)
}

// -------------------------------------------------------------------

// UserDailyGift

// required bytes userid = 1;
inline bool UserDailyGift::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDailyGift::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDailyGift::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDailyGift::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserDailyGift::userid() const {
  // @@protoc_insertion_point(field_get:db.UserDailyGift.userid)
  return userid_.Get();
}
inline void UserDailyGift::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserDailyGift.userid)
}
#if LANG_CXX11
inline void UserDailyGift::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserDailyGift.userid)
}
#endif
inline void UserDailyGift::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserDailyGift.userid)
}
inline void UserDailyGift::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserDailyGift.userid)
}
inline ::std::string* UserDailyGift::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserDailyGift.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserDailyGift::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserDailyGift.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserDailyGift::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserDailyGift.userid)
}
inline ::std::string* UserDailyGift::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserDailyGift.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserDailyGift::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserDailyGift.userid)
}

// required int32 gift_id = 2;
inline bool UserDailyGift::has_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDailyGift::set_has_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDailyGift::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDailyGift::clear_gift_id() {
  gift_id_ = 0;
  clear_has_gift_id();
}
inline ::google::protobuf::int32 UserDailyGift::gift_id() const {
  // @@protoc_insertion_point(field_get:db.UserDailyGift.gift_id)
  return gift_id_;
}
inline void UserDailyGift::set_gift_id(::google::protobuf::int32 value) {
  set_has_gift_id();
  gift_id_ = value;
  // @@protoc_insertion_point(field_set:db.UserDailyGift.gift_id)
}

// required int32 state = 3;
inline bool UserDailyGift::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDailyGift::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDailyGift::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDailyGift::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserDailyGift::state() const {
  // @@protoc_insertion_point(field_get:db.UserDailyGift.state)
  return state_;
}
inline void UserDailyGift::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserDailyGift.state)
}

// required int32 be_recieved = 4;
inline bool UserDailyGift::has_be_recieved() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserDailyGift::set_has_be_recieved() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserDailyGift::clear_has_be_recieved() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserDailyGift::clear_be_recieved() {
  be_recieved_ = 0;
  clear_has_be_recieved();
}
inline ::google::protobuf::int32 UserDailyGift::be_recieved() const {
  // @@protoc_insertion_point(field_get:db.UserDailyGift.be_recieved)
  return be_recieved_;
}
inline void UserDailyGift::set_be_recieved(::google::protobuf::int32 value) {
  set_has_be_recieved();
  be_recieved_ = value;
  // @@protoc_insertion_point(field_set:db.UserDailyGift.be_recieved)
}

// required sfixed64 timestamp = 5;
inline bool UserDailyGift::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDailyGift::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDailyGift::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDailyGift::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserDailyGift::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserDailyGift.timestamp)
  return timestamp_;
}
inline void UserDailyGift::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserDailyGift.timestamp)
}

// -------------------------------------------------------------------

// UserPVPRecord

// required bytes userid = 1;
inline bool UserPVPRecord::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPVPRecord::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPVPRecord::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPVPRecord::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserPVPRecord::userid() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.userid)
  return userid_.Get();
}
inline void UserPVPRecord::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.userid)
}
#if LANG_CXX11
inline void UserPVPRecord::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPVPRecord.userid)
}
#endif
inline void UserPVPRecord::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPVPRecord.userid)
}
inline void UserPVPRecord::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPVPRecord.userid)
}
inline ::std::string* UserPVPRecord::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserPVPRecord.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPVPRecord::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserPVPRecord.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPVPRecord::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPVPRecord.userid)
}
inline ::std::string* UserPVPRecord::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPVPRecord.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPVPRecord::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPVPRecord.userid)
}

// required int32 id = 2;
inline bool UserPVPRecord::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserPVPRecord::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserPVPRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserPVPRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserPVPRecord::id() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.id)
  return id_;
}
inline void UserPVPRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.id)
}

// required int32 player = 3;
inline bool UserPVPRecord::has_player() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserPVPRecord::set_has_player() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserPVPRecord::clear_has_player() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserPVPRecord::clear_player() {
  player_ = 0;
  clear_has_player();
}
inline ::google::protobuf::int32 UserPVPRecord::player() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.player)
  return player_;
}
inline void UserPVPRecord::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.player)
}

// required bytes player_nick = 4;
inline bool UserPVPRecord::has_player_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPVPRecord::set_has_player_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPVPRecord::clear_has_player_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPVPRecord::clear_player_nick() {
  player_nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_player_nick();
}
inline const ::std::string& UserPVPRecord::player_nick() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.player_nick)
  return player_nick_.Get();
}
inline void UserPVPRecord::set_player_nick(const ::std::string& value) {
  set_has_player_nick();
  player_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.player_nick)
}
#if LANG_CXX11
inline void UserPVPRecord::set_player_nick(::std::string&& value) {
  set_has_player_nick();
  player_nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPVPRecord.player_nick)
}
#endif
inline void UserPVPRecord::set_player_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_nick();
  player_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPVPRecord.player_nick)
}
inline void UserPVPRecord::set_player_nick(const void* value,
    size_t size) {
  set_has_player_nick();
  player_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPVPRecord.player_nick)
}
inline ::std::string* UserPVPRecord::mutable_player_nick() {
  set_has_player_nick();
  // @@protoc_insertion_point(field_mutable:db.UserPVPRecord.player_nick)
  return player_nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPVPRecord::release_player_nick() {
  // @@protoc_insertion_point(field_release:db.UserPVPRecord.player_nick)
  if (!has_player_nick()) {
    return NULL;
  }
  clear_has_player_nick();
  return player_nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPVPRecord::set_allocated_player_nick(::std::string* player_nick) {
  if (player_nick != NULL) {
    set_has_player_nick();
  } else {
    clear_has_player_nick();
  }
  player_nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPVPRecord.player_nick)
}
inline ::std::string* UserPVPRecord::unsafe_arena_release_player_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPVPRecord.player_nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_player_nick();
  return player_nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPVPRecord::unsafe_arena_set_allocated_player_nick(
    ::std::string* player_nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (player_nick != NULL) {
    set_has_player_nick();
  } else {
    clear_has_player_nick();
  }
  player_nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      player_nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPVPRecord.player_nick)
}

// required int32 player_level = 5;
inline bool UserPVPRecord::has_player_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserPVPRecord::set_has_player_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserPVPRecord::clear_has_player_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserPVPRecord::clear_player_level() {
  player_level_ = 0;
  clear_has_player_level();
}
inline ::google::protobuf::int32 UserPVPRecord::player_level() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.player_level)
  return player_level_;
}
inline void UserPVPRecord::set_player_level(::google::protobuf::int32 value) {
  set_has_player_level();
  player_level_ = value;
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.player_level)
}

// required int32 result = 6;
inline bool UserPVPRecord::has_result() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserPVPRecord::set_has_result() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserPVPRecord::clear_has_result() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserPVPRecord::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserPVPRecord::result() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.result)
  return result_;
}
inline void UserPVPRecord::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.result)
}

// required int32 win_score = 7;
inline bool UserPVPRecord::has_win_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserPVPRecord::set_has_win_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserPVPRecord::clear_has_win_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserPVPRecord::clear_win_score() {
  win_score_ = 0;
  clear_has_win_score();
}
inline ::google::protobuf::int32 UserPVPRecord::win_score() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.win_score)
  return win_score_;
}
inline void UserPVPRecord::set_win_score(::google::protobuf::int32 value) {
  set_has_win_score();
  win_score_ = value;
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.win_score)
}

// required bytes team_data = 8;
inline bool UserPVPRecord::has_team_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPVPRecord::set_has_team_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPVPRecord::clear_has_team_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPVPRecord::clear_team_data() {
  team_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_team_data();
}
inline const ::std::string& UserPVPRecord::team_data() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.team_data)
  return team_data_.Get();
}
inline void UserPVPRecord::set_team_data(const ::std::string& value) {
  set_has_team_data();
  team_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.team_data)
}
#if LANG_CXX11
inline void UserPVPRecord::set_team_data(::std::string&& value) {
  set_has_team_data();
  team_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPVPRecord.team_data)
}
#endif
inline void UserPVPRecord::set_team_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_data();
  team_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPVPRecord.team_data)
}
inline void UserPVPRecord::set_team_data(const void* value,
    size_t size) {
  set_has_team_data();
  team_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPVPRecord.team_data)
}
inline ::std::string* UserPVPRecord::mutable_team_data() {
  set_has_team_data();
  // @@protoc_insertion_point(field_mutable:db.UserPVPRecord.team_data)
  return team_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPVPRecord::release_team_data() {
  // @@protoc_insertion_point(field_release:db.UserPVPRecord.team_data)
  if (!has_team_data()) {
    return NULL;
  }
  clear_has_team_data();
  return team_data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPVPRecord::set_allocated_team_data(::std::string* team_data) {
  if (team_data != NULL) {
    set_has_team_data();
  } else {
    clear_has_team_data();
  }
  team_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPVPRecord.team_data)
}
inline ::std::string* UserPVPRecord::unsafe_arena_release_team_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPVPRecord.team_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_team_data();
  return team_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPVPRecord::unsafe_arena_set_allocated_team_data(
    ::std::string* team_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (team_data != NULL) {
    set_has_team_data();
  } else {
    clear_has_team_data();
  }
  team_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      team_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPVPRecord.team_data)
}

// required bytes enemy_data = 9;
inline bool UserPVPRecord::has_enemy_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserPVPRecord::set_has_enemy_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserPVPRecord::clear_has_enemy_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserPVPRecord::clear_enemy_data() {
  enemy_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_enemy_data();
}
inline const ::std::string& UserPVPRecord::enemy_data() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.enemy_data)
  return enemy_data_.Get();
}
inline void UserPVPRecord::set_enemy_data(const ::std::string& value) {
  set_has_enemy_data();
  enemy_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.enemy_data)
}
#if LANG_CXX11
inline void UserPVPRecord::set_enemy_data(::std::string&& value) {
  set_has_enemy_data();
  enemy_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPVPRecord.enemy_data)
}
#endif
inline void UserPVPRecord::set_enemy_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enemy_data();
  enemy_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPVPRecord.enemy_data)
}
inline void UserPVPRecord::set_enemy_data(const void* value,
    size_t size) {
  set_has_enemy_data();
  enemy_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPVPRecord.enemy_data)
}
inline ::std::string* UserPVPRecord::mutable_enemy_data() {
  set_has_enemy_data();
  // @@protoc_insertion_point(field_mutable:db.UserPVPRecord.enemy_data)
  return enemy_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPVPRecord::release_enemy_data() {
  // @@protoc_insertion_point(field_release:db.UserPVPRecord.enemy_data)
  if (!has_enemy_data()) {
    return NULL;
  }
  clear_has_enemy_data();
  return enemy_data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPVPRecord::set_allocated_enemy_data(::std::string* enemy_data) {
  if (enemy_data != NULL) {
    set_has_enemy_data();
  } else {
    clear_has_enemy_data();
  }
  enemy_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enemy_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPVPRecord.enemy_data)
}
inline ::std::string* UserPVPRecord::unsafe_arena_release_enemy_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPVPRecord.enemy_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_enemy_data();
  return enemy_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPVPRecord::unsafe_arena_set_allocated_enemy_data(
    ::std::string* enemy_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (enemy_data != NULL) {
    set_has_enemy_data();
  } else {
    clear_has_enemy_data();
  }
  enemy_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      enemy_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPVPRecord.enemy_data)
}

// required sfixed64 timestamp = 10;
inline bool UserPVPRecord::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserPVPRecord::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserPVPRecord::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserPVPRecord::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserPVPRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserPVPRecord.timestamp)
  return timestamp_;
}
inline void UserPVPRecord::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserPVPRecord.timestamp)
}

// -------------------------------------------------------------------

// UserMaelstromState

// required bytes userid = 1;
inline bool UserMaelstromState::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMaelstromState::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMaelstromState::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMaelstromState::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserMaelstromState::userid() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.userid)
  return userid_.Get();
}
inline void UserMaelstromState::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.userid)
}
#if LANG_CXX11
inline void UserMaelstromState::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromState.userid)
}
#endif
inline void UserMaelstromState::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromState.userid)
}
inline void UserMaelstromState::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromState.userid)
}
inline ::std::string* UserMaelstromState::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromState.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromState::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromState.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromState::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromState.userid)
}
inline ::std::string* UserMaelstromState::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromState.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromState::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromState.userid)
}

// required bytes map_size = 2;
inline bool UserMaelstromState::has_map_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMaelstromState::set_has_map_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMaelstromState::clear_has_map_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMaelstromState::clear_map_size() {
  map_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_map_size();
}
inline const ::std::string& UserMaelstromState::map_size() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.map_size)
  return map_size_.Get();
}
inline void UserMaelstromState::set_map_size(const ::std::string& value) {
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.map_size)
}
#if LANG_CXX11
inline void UserMaelstromState::set_map_size(::std::string&& value) {
  set_has_map_size();
  map_size_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromState.map_size)
}
#endif
inline void UserMaelstromState::set_map_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromState.map_size)
}
inline void UserMaelstromState::set_map_size(const void* value,
    size_t size) {
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromState.map_size)
}
inline ::std::string* UserMaelstromState::mutable_map_size() {
  set_has_map_size();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromState.map_size)
  return map_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromState::release_map_size() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromState.map_size)
  if (!has_map_size()) {
    return NULL;
  }
  clear_has_map_size();
  return map_size_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromState::set_allocated_map_size(::std::string* map_size) {
  if (map_size != NULL) {
    set_has_map_size();
  } else {
    clear_has_map_size();
  }
  map_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromState.map_size)
}
inline ::std::string* UserMaelstromState::unsafe_arena_release_map_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromState.map_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_map_size();
  return map_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromState::unsafe_arena_set_allocated_map_size(
    ::std::string* map_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (map_size != NULL) {
    set_has_map_size();
  } else {
    clear_has_map_size();
  }
  map_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      map_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromState.map_size)
}

// required int32 explore_level = 3;
inline bool UserMaelstromState::has_explore_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserMaelstromState::set_has_explore_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserMaelstromState::clear_has_explore_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserMaelstromState::clear_explore_level() {
  explore_level_ = 0;
  clear_has_explore_level();
}
inline ::google::protobuf::int32 UserMaelstromState::explore_level() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.explore_level)
  return explore_level_;
}
inline void UserMaelstromState::set_explore_level(::google::protobuf::int32 value) {
  set_has_explore_level();
  explore_level_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.explore_level)
}

// required bytes pos = 4;
inline bool UserMaelstromState::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMaelstromState::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMaelstromState::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMaelstromState::clear_pos() {
  pos_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pos();
}
inline const ::std::string& UserMaelstromState::pos() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.pos)
  return pos_.Get();
}
inline void UserMaelstromState::set_pos(const ::std::string& value) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.pos)
}
#if LANG_CXX11
inline void UserMaelstromState::set_pos(::std::string&& value) {
  set_has_pos();
  pos_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromState.pos)
}
#endif
inline void UserMaelstromState::set_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromState.pos)
}
inline void UserMaelstromState::set_pos(const void* value,
    size_t size) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromState.pos)
}
inline ::std::string* UserMaelstromState::mutable_pos() {
  set_has_pos();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromState.pos)
  return pos_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromState::release_pos() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromState.pos)
  if (!has_pos()) {
    return NULL;
  }
  clear_has_pos();
  return pos_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromState::set_allocated_pos(::std::string* pos) {
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pos,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromState.pos)
}
inline ::std::string* UserMaelstromState::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromState.pos)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pos();
  return pos_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromState::unsafe_arena_set_allocated_pos(
    ::std::string* pos) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pos, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromState.pos)
}

// required bytes fog = 5;
inline bool UserMaelstromState::has_fog() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMaelstromState::set_has_fog() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMaelstromState::clear_has_fog() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMaelstromState::clear_fog() {
  fog_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_fog();
}
inline const ::std::string& UserMaelstromState::fog() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.fog)
  return fog_.Get();
}
inline void UserMaelstromState::set_fog(const ::std::string& value) {
  set_has_fog();
  fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.fog)
}
#if LANG_CXX11
inline void UserMaelstromState::set_fog(::std::string&& value) {
  set_has_fog();
  fog_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromState.fog)
}
#endif
inline void UserMaelstromState::set_fog(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fog();
  fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromState.fog)
}
inline void UserMaelstromState::set_fog(const void* value,
    size_t size) {
  set_has_fog();
  fog_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromState.fog)
}
inline ::std::string* UserMaelstromState::mutable_fog() {
  set_has_fog();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromState.fog)
  return fog_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromState::release_fog() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromState.fog)
  if (!has_fog()) {
    return NULL;
  }
  clear_has_fog();
  return fog_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromState::set_allocated_fog(::std::string* fog) {
  if (fog != NULL) {
    set_has_fog();
  } else {
    clear_has_fog();
  }
  fog_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fog,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromState.fog)
}
inline ::std::string* UserMaelstromState::unsafe_arena_release_fog() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromState.fog)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_fog();
  return fog_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromState::unsafe_arena_set_allocated_fog(
    ::std::string* fog) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fog != NULL) {
    set_has_fog();
  } else {
    clear_has_fog();
  }
  fog_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fog, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromState.fog)
}

// required int32 oil = 6;
inline bool UserMaelstromState::has_oil() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserMaelstromState::set_has_oil() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserMaelstromState::clear_has_oil() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserMaelstromState::clear_oil() {
  oil_ = 0;
  clear_has_oil();
}
inline ::google::protobuf::int32 UserMaelstromState::oil() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.oil)
  return oil_;
}
inline void UserMaelstromState::set_oil(::google::protobuf::int32 value) {
  set_has_oil();
  oil_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.oil)
}

// required sfixed64 repair_timestamp = 7;
inline bool UserMaelstromState::has_repair_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserMaelstromState::set_has_repair_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserMaelstromState::clear_has_repair_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserMaelstromState::clear_repair_timestamp() {
  repair_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_repair_timestamp();
}
inline ::google::protobuf::int64 UserMaelstromState::repair_timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.repair_timestamp)
  return repair_timestamp_;
}
inline void UserMaelstromState::set_repair_timestamp(::google::protobuf::int64 value) {
  set_has_repair_timestamp();
  repair_timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.repair_timestamp)
}

// required sfixed64 refresh_timestamp = 8;
inline bool UserMaelstromState::has_refresh_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserMaelstromState::set_has_refresh_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserMaelstromState::clear_has_refresh_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserMaelstromState::clear_refresh_timestamp() {
  refresh_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_refresh_timestamp();
}
inline ::google::protobuf::int64 UserMaelstromState::refresh_timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.refresh_timestamp)
  return refresh_timestamp_;
}
inline void UserMaelstromState::set_refresh_timestamp(::google::protobuf::int64 value) {
  set_has_refresh_timestamp();
  refresh_timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.refresh_timestamp)
}

// optional int32 explore_point = 9;
inline bool UserMaelstromState::has_explore_point() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserMaelstromState::set_has_explore_point() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserMaelstromState::clear_has_explore_point() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserMaelstromState::clear_explore_point() {
  explore_point_ = 0;
  clear_has_explore_point();
}
inline ::google::protobuf::int32 UserMaelstromState::explore_point() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.explore_point)
  return explore_point_;
}
inline void UserMaelstromState::set_explore_point(::google::protobuf::int32 value) {
  set_has_explore_point();
  explore_point_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.explore_point)
}

// optional bytes talent = 10;
inline bool UserMaelstromState::has_talent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserMaelstromState::set_has_talent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserMaelstromState::clear_has_talent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserMaelstromState::clear_talent() {
  talent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_talent();
}
inline const ::std::string& UserMaelstromState::talent() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.talent)
  return talent_.Get();
}
inline void UserMaelstromState::set_talent(const ::std::string& value) {
  set_has_talent();
  talent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.talent)
}
#if LANG_CXX11
inline void UserMaelstromState::set_talent(::std::string&& value) {
  set_has_talent();
  talent_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromState.talent)
}
#endif
inline void UserMaelstromState::set_talent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talent();
  talent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromState.talent)
}
inline void UserMaelstromState::set_talent(const void* value,
    size_t size) {
  set_has_talent();
  talent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromState.talent)
}
inline ::std::string* UserMaelstromState::mutable_talent() {
  set_has_talent();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromState.talent)
  return talent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromState::release_talent() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromState.talent)
  if (!has_talent()) {
    return NULL;
  }
  clear_has_talent();
  return talent_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromState::set_allocated_talent(::std::string* talent) {
  if (talent != NULL) {
    set_has_talent();
  } else {
    clear_has_talent();
  }
  talent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromState.talent)
}
inline ::std::string* UserMaelstromState::unsafe_arena_release_talent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromState.talent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_talent();
  return talent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromState::unsafe_arena_set_allocated_talent(
    ::std::string* talent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (talent != NULL) {
    set_has_talent();
  } else {
    clear_has_talent();
  }
  talent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      talent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromState.talent)
}

// optional bytes event_record = 11;
inline bool UserMaelstromState::has_event_record() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserMaelstromState::set_has_event_record() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserMaelstromState::clear_has_event_record() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserMaelstromState::clear_event_record() {
  event_record_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_event_record();
}
inline const ::std::string& UserMaelstromState::event_record() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromState.event_record)
  return event_record_.Get();
}
inline void UserMaelstromState::set_event_record(const ::std::string& value) {
  set_has_event_record();
  event_record_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromState.event_record)
}
#if LANG_CXX11
inline void UserMaelstromState::set_event_record(::std::string&& value) {
  set_has_event_record();
  event_record_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromState.event_record)
}
#endif
inline void UserMaelstromState::set_event_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_record();
  event_record_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromState.event_record)
}
inline void UserMaelstromState::set_event_record(const void* value,
    size_t size) {
  set_has_event_record();
  event_record_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromState.event_record)
}
inline ::std::string* UserMaelstromState::mutable_event_record() {
  set_has_event_record();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromState.event_record)
  return event_record_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromState::release_event_record() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromState.event_record)
  if (!has_event_record()) {
    return NULL;
  }
  clear_has_event_record();
  return event_record_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromState::set_allocated_event_record(::std::string* event_record) {
  if (event_record != NULL) {
    set_has_event_record();
  } else {
    clear_has_event_record();
  }
  event_record_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_record,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromState.event_record)
}
inline ::std::string* UserMaelstromState::unsafe_arena_release_event_record() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromState.event_record)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_event_record();
  return event_record_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromState::unsafe_arena_set_allocated_event_record(
    ::std::string* event_record) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (event_record != NULL) {
    set_has_event_record();
  } else {
    clear_has_event_record();
  }
  event_record_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      event_record, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromState.event_record)
}

// -------------------------------------------------------------------

// UserMaelstromBuilding

// required bytes userid = 1;
inline bool UserMaelstromBuilding::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMaelstromBuilding::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMaelstromBuilding::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMaelstromBuilding::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserMaelstromBuilding::userid() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromBuilding.userid)
  return userid_.Get();
}
inline void UserMaelstromBuilding::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromBuilding.userid)
}
#if LANG_CXX11
inline void UserMaelstromBuilding::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromBuilding.userid)
}
#endif
inline void UserMaelstromBuilding::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromBuilding.userid)
}
inline void UserMaelstromBuilding::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromBuilding.userid)
}
inline ::std::string* UserMaelstromBuilding::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromBuilding.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromBuilding::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromBuilding.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromBuilding::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromBuilding.userid)
}
inline ::std::string* UserMaelstromBuilding::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromBuilding.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromBuilding::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromBuilding.userid)
}

// required int32 id = 2;
inline bool UserMaelstromBuilding::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMaelstromBuilding::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMaelstromBuilding::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMaelstromBuilding::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserMaelstromBuilding::id() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromBuilding.id)
  return id_;
}
inline void UserMaelstromBuilding::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromBuilding.id)
}

// required int32 type = 3;
inline bool UserMaelstromBuilding::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMaelstromBuilding::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMaelstromBuilding::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMaelstromBuilding::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserMaelstromBuilding::type() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromBuilding.type)
  return type_;
}
inline void UserMaelstromBuilding::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromBuilding.type)
}

// required int32 level = 4;
inline bool UserMaelstromBuilding::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserMaelstromBuilding::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserMaelstromBuilding::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserMaelstromBuilding::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserMaelstromBuilding::level() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromBuilding.level)
  return level_;
}
inline void UserMaelstromBuilding::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromBuilding.level)
}

// required sfixed64 timestamp = 5;
inline bool UserMaelstromBuilding::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMaelstromBuilding::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMaelstromBuilding::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMaelstromBuilding::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserMaelstromBuilding::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromBuilding.timestamp)
  return timestamp_;
}
inline void UserMaelstromBuilding::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromBuilding.timestamp)
}

// required sfixed64 level_up_timestamp = 6;
inline bool UserMaelstromBuilding::has_level_up_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserMaelstromBuilding::set_has_level_up_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserMaelstromBuilding::clear_has_level_up_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserMaelstromBuilding::clear_level_up_timestamp() {
  level_up_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_level_up_timestamp();
}
inline ::google::protobuf::int64 UserMaelstromBuilding::level_up_timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromBuilding.level_up_timestamp)
  return level_up_timestamp_;
}
inline void UserMaelstromBuilding::set_level_up_timestamp(::google::protobuf::int64 value) {
  set_has_level_up_timestamp();
  level_up_timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromBuilding.level_up_timestamp)
}

// -------------------------------------------------------------------

// UserMaelstromEvent

// required bytes userid = 1;
inline bool UserMaelstromEvent::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMaelstromEvent::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMaelstromEvent::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMaelstromEvent::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserMaelstromEvent::userid() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromEvent.userid)
  return userid_.Get();
}
inline void UserMaelstromEvent::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromEvent.userid)
}
#if LANG_CXX11
inline void UserMaelstromEvent::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromEvent.userid)
}
#endif
inline void UserMaelstromEvent::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromEvent.userid)
}
inline void UserMaelstromEvent::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromEvent.userid)
}
inline ::std::string* UserMaelstromEvent::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromEvent.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromEvent::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromEvent.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromEvent::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromEvent.userid)
}
inline ::std::string* UserMaelstromEvent::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromEvent.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromEvent::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromEvent.userid)
}

// required int32 id = 2;
inline bool UserMaelstromEvent::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMaelstromEvent::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMaelstromEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMaelstromEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserMaelstromEvent::id() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromEvent.id)
  return id_;
}
inline void UserMaelstromEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromEvent.id)
}

// required int32 typeid = 3;
inline bool UserMaelstromEvent::has_typeid_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserMaelstromEvent::set_has_typeid_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserMaelstromEvent::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserMaelstromEvent::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 UserMaelstromEvent::typeid_() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromEvent.typeid)
  return typeid__;
}
inline void UserMaelstromEvent::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromEvent.typeid)
}

// required int32 level = 4;
inline bool UserMaelstromEvent::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserMaelstromEvent::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserMaelstromEvent::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserMaelstromEvent::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserMaelstromEvent::level() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromEvent.level)
  return level_;
}
inline void UserMaelstromEvent::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromEvent.level)
}

// required bytes pos = 5;
inline bool UserMaelstromEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMaelstromEvent::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMaelstromEvent::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMaelstromEvent::clear_pos() {
  pos_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pos();
}
inline const ::std::string& UserMaelstromEvent::pos() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromEvent.pos)
  return pos_.Get();
}
inline void UserMaelstromEvent::set_pos(const ::std::string& value) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromEvent.pos)
}
#if LANG_CXX11
inline void UserMaelstromEvent::set_pos(::std::string&& value) {
  set_has_pos();
  pos_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromEvent.pos)
}
#endif
inline void UserMaelstromEvent::set_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromEvent.pos)
}
inline void UserMaelstromEvent::set_pos(const void* value,
    size_t size) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromEvent.pos)
}
inline ::std::string* UserMaelstromEvent::mutable_pos() {
  set_has_pos();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromEvent.pos)
  return pos_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromEvent::release_pos() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromEvent.pos)
  if (!has_pos()) {
    return NULL;
  }
  clear_has_pos();
  return pos_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromEvent::set_allocated_pos(::std::string* pos) {
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pos,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromEvent.pos)
}
inline ::std::string* UserMaelstromEvent::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromEvent.pos)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pos();
  return pos_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromEvent::unsafe_arena_set_allocated_pos(
    ::std::string* pos) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pos, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromEvent.pos)
}

// required int32 state = 6;
inline bool UserMaelstromEvent::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserMaelstromEvent::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserMaelstromEvent::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserMaelstromEvent::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserMaelstromEvent::state() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromEvent.state)
  return state_;
}
inline void UserMaelstromEvent::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.UserMaelstromEvent.state)
}

// required bytes data = 7;
inline bool UserMaelstromEvent::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMaelstromEvent::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMaelstromEvent::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMaelstromEvent::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
inline const ::std::string& UserMaelstromEvent::data() const {
  // @@protoc_insertion_point(field_get:db.UserMaelstromEvent.data)
  return data_.Get();
}
inline void UserMaelstromEvent::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMaelstromEvent.data)
}
#if LANG_CXX11
inline void UserMaelstromEvent::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMaelstromEvent.data)
}
#endif
inline void UserMaelstromEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMaelstromEvent.data)
}
inline void UserMaelstromEvent::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMaelstromEvent.data)
}
inline ::std::string* UserMaelstromEvent::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:db.UserMaelstromEvent.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMaelstromEvent::release_data() {
  // @@protoc_insertion_point(field_release:db.UserMaelstromEvent.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMaelstromEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMaelstromEvent.data)
}
inline ::std::string* UserMaelstromEvent::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMaelstromEvent.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMaelstromEvent::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMaelstromEvent.data)
}

// -------------------------------------------------------------------

// UserDungeonChest

// required bytes userid = 1;
inline bool UserDungeonChest::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDungeonChest::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDungeonChest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDungeonChest::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserDungeonChest::userid() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonChest.userid)
  return userid_.Get();
}
inline void UserDungeonChest::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserDungeonChest.userid)
}
#if LANG_CXX11
inline void UserDungeonChest::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserDungeonChest.userid)
}
#endif
inline void UserDungeonChest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserDungeonChest.userid)
}
inline void UserDungeonChest::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserDungeonChest.userid)
}
inline ::std::string* UserDungeonChest::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserDungeonChest.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserDungeonChest::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserDungeonChest.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserDungeonChest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserDungeonChest.userid)
}
inline ::std::string* UserDungeonChest::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserDungeonChest.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserDungeonChest::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserDungeonChest.userid)
}

// required int32 id = 2;
inline bool UserDungeonChest::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDungeonChest::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDungeonChest::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDungeonChest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserDungeonChest::id() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonChest.id)
  return id_;
}
inline void UserDungeonChest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonChest.id)
}

// required float add_probability = 3;
inline bool UserDungeonChest::has_add_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDungeonChest::set_has_add_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDungeonChest::clear_has_add_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDungeonChest::clear_add_probability() {
  add_probability_ = 0;
  clear_has_add_probability();
}
inline float UserDungeonChest::add_probability() const {
  // @@protoc_insertion_point(field_get:db.UserDungeonChest.add_probability)
  return add_probability_;
}
inline void UserDungeonChest::set_add_probability(float value) {
  set_has_add_probability();
  add_probability_ = value;
  // @@protoc_insertion_point(field_set:db.UserDungeonChest.add_probability)
}

// -------------------------------------------------------------------

// PlayerInvadeRecord

// required int32 ticketid = 1;
inline bool PlayerInvadeRecord::has_ticketid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInvadeRecord::set_has_ticketid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInvadeRecord::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInvadeRecord::clear_ticketid() {
  ticketid_ = 0;
  clear_has_ticketid();
}
inline ::google::protobuf::int32 PlayerInvadeRecord::ticketid() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeRecord.ticketid)
  return ticketid_;
}
inline void PlayerInvadeRecord::set_ticketid(::google::protobuf::int32 value) {
  set_has_ticketid();
  ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeRecord.ticketid)
}

// required int32 id = 2;
inline bool PlayerInvadeRecord::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInvadeRecord::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInvadeRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInvadeRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlayerInvadeRecord::id() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeRecord.id)
  return id_;
}
inline void PlayerInvadeRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeRecord.id)
}

// required int32 state = 3;
inline bool PlayerInvadeRecord::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInvadeRecord::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInvadeRecord::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInvadeRecord::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 PlayerInvadeRecord::state() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeRecord.state)
  return state_;
}
inline void PlayerInvadeRecord::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeRecord.state)
}

// required bytes record_data = 4;
inline bool PlayerInvadeRecord::has_record_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInvadeRecord::set_has_record_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInvadeRecord::clear_has_record_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInvadeRecord::clear_record_data() {
  record_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_record_data();
}
inline const ::std::string& PlayerInvadeRecord::record_data() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeRecord.record_data)
  return record_data_.Get();
}
inline void PlayerInvadeRecord::set_record_data(const ::std::string& value) {
  set_has_record_data();
  record_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.PlayerInvadeRecord.record_data)
}
#if LANG_CXX11
inline void PlayerInvadeRecord::set_record_data(::std::string&& value) {
  set_has_record_data();
  record_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.PlayerInvadeRecord.record_data)
}
#endif
inline void PlayerInvadeRecord::set_record_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_data();
  record_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.PlayerInvadeRecord.record_data)
}
inline void PlayerInvadeRecord::set_record_data(const void* value,
    size_t size) {
  set_has_record_data();
  record_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.PlayerInvadeRecord.record_data)
}
inline ::std::string* PlayerInvadeRecord::mutable_record_data() {
  set_has_record_data();
  // @@protoc_insertion_point(field_mutable:db.PlayerInvadeRecord.record_data)
  return record_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerInvadeRecord::release_record_data() {
  // @@protoc_insertion_point(field_release:db.PlayerInvadeRecord.record_data)
  if (!has_record_data()) {
    return NULL;
  }
  clear_has_record_data();
  return record_data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerInvadeRecord::set_allocated_record_data(::std::string* record_data) {
  if (record_data != NULL) {
    set_has_record_data();
  } else {
    clear_has_record_data();
  }
  record_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.PlayerInvadeRecord.record_data)
}
inline ::std::string* PlayerInvadeRecord::unsafe_arena_release_record_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.PlayerInvadeRecord.record_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_record_data();
  return record_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerInvadeRecord::unsafe_arena_set_allocated_record_data(
    ::std::string* record_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (record_data != NULL) {
    set_has_record_data();
  } else {
    clear_has_record_data();
  }
  record_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      record_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.PlayerInvadeRecord.record_data)
}

// required bytes revenge_reward = 5;
inline bool PlayerInvadeRecord::has_revenge_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInvadeRecord::set_has_revenge_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInvadeRecord::clear_has_revenge_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInvadeRecord::clear_revenge_reward() {
  revenge_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_revenge_reward();
}
inline const ::std::string& PlayerInvadeRecord::revenge_reward() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeRecord.revenge_reward)
  return revenge_reward_.Get();
}
inline void PlayerInvadeRecord::set_revenge_reward(const ::std::string& value) {
  set_has_revenge_reward();
  revenge_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.PlayerInvadeRecord.revenge_reward)
}
#if LANG_CXX11
inline void PlayerInvadeRecord::set_revenge_reward(::std::string&& value) {
  set_has_revenge_reward();
  revenge_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.PlayerInvadeRecord.revenge_reward)
}
#endif
inline void PlayerInvadeRecord::set_revenge_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_revenge_reward();
  revenge_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.PlayerInvadeRecord.revenge_reward)
}
inline void PlayerInvadeRecord::set_revenge_reward(const void* value,
    size_t size) {
  set_has_revenge_reward();
  revenge_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.PlayerInvadeRecord.revenge_reward)
}
inline ::std::string* PlayerInvadeRecord::mutable_revenge_reward() {
  set_has_revenge_reward();
  // @@protoc_insertion_point(field_mutable:db.PlayerInvadeRecord.revenge_reward)
  return revenge_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerInvadeRecord::release_revenge_reward() {
  // @@protoc_insertion_point(field_release:db.PlayerInvadeRecord.revenge_reward)
  if (!has_revenge_reward()) {
    return NULL;
  }
  clear_has_revenge_reward();
  return revenge_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerInvadeRecord::set_allocated_revenge_reward(::std::string* revenge_reward) {
  if (revenge_reward != NULL) {
    set_has_revenge_reward();
  } else {
    clear_has_revenge_reward();
  }
  revenge_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revenge_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.PlayerInvadeRecord.revenge_reward)
}
inline ::std::string* PlayerInvadeRecord::unsafe_arena_release_revenge_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.PlayerInvadeRecord.revenge_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_revenge_reward();
  return revenge_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerInvadeRecord::unsafe_arena_set_allocated_revenge_reward(
    ::std::string* revenge_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (revenge_reward != NULL) {
    set_has_revenge_reward();
  } else {
    clear_has_revenge_reward();
  }
  revenge_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      revenge_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.PlayerInvadeRecord.revenge_reward)
}

// required sfixed64 happened_time = 6;
inline bool PlayerInvadeRecord::has_happened_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInvadeRecord::set_has_happened_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInvadeRecord::clear_has_happened_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInvadeRecord::clear_happened_time() {
  happened_time_ = GOOGLE_LONGLONG(0);
  clear_has_happened_time();
}
inline ::google::protobuf::int64 PlayerInvadeRecord::happened_time() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeRecord.happened_time)
  return happened_time_;
}
inline void PlayerInvadeRecord::set_happened_time(::google::protobuf::int64 value) {
  set_has_happened_time();
  happened_time_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeRecord.happened_time)
}

// required sfixed64 deadline = 7;
inline bool PlayerInvadeRecord::has_deadline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInvadeRecord::set_has_deadline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInvadeRecord::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInvadeRecord::clear_deadline() {
  deadline_ = GOOGLE_LONGLONG(0);
  clear_has_deadline();
}
inline ::google::protobuf::int64 PlayerInvadeRecord::deadline() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeRecord.deadline)
  return deadline_;
}
inline void PlayerInvadeRecord::set_deadline(::google::protobuf::int64 value) {
  set_has_deadline();
  deadline_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeRecord.deadline)
}

// -------------------------------------------------------------------

// PlayerInvadeState

// required int32 ticketid = 1;
inline bool PlayerInvadeState::has_ticketid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInvadeState::set_has_ticketid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInvadeState::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInvadeState::clear_ticketid() {
  ticketid_ = 0;
  clear_has_ticketid();
}
inline ::google::protobuf::int32 PlayerInvadeState::ticketid() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeState.ticketid)
  return ticketid_;
}
inline void PlayerInvadeState::set_ticketid(::google::protobuf::int32 value) {
  set_has_ticketid();
  ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeState.ticketid)
}

// required bytes matched_player = 2;
inline bool PlayerInvadeState::has_matched_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInvadeState::set_has_matched_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInvadeState::clear_has_matched_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInvadeState::clear_matched_player() {
  matched_player_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_matched_player();
}
inline const ::std::string& PlayerInvadeState::matched_player() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeState.matched_player)
  return matched_player_.Get();
}
inline void PlayerInvadeState::set_matched_player(const ::std::string& value) {
  set_has_matched_player();
  matched_player_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.PlayerInvadeState.matched_player)
}
#if LANG_CXX11
inline void PlayerInvadeState::set_matched_player(::std::string&& value) {
  set_has_matched_player();
  matched_player_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.PlayerInvadeState.matched_player)
}
#endif
inline void PlayerInvadeState::set_matched_player(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_matched_player();
  matched_player_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.PlayerInvadeState.matched_player)
}
inline void PlayerInvadeState::set_matched_player(const void* value,
    size_t size) {
  set_has_matched_player();
  matched_player_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.PlayerInvadeState.matched_player)
}
inline ::std::string* PlayerInvadeState::mutable_matched_player() {
  set_has_matched_player();
  // @@protoc_insertion_point(field_mutable:db.PlayerInvadeState.matched_player)
  return matched_player_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerInvadeState::release_matched_player() {
  // @@protoc_insertion_point(field_release:db.PlayerInvadeState.matched_player)
  if (!has_matched_player()) {
    return NULL;
  }
  clear_has_matched_player();
  return matched_player_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerInvadeState::set_allocated_matched_player(::std::string* matched_player) {
  if (matched_player != NULL) {
    set_has_matched_player();
  } else {
    clear_has_matched_player();
  }
  matched_player_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matched_player,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.PlayerInvadeState.matched_player)
}
inline ::std::string* PlayerInvadeState::unsafe_arena_release_matched_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.PlayerInvadeState.matched_player)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_matched_player();
  return matched_player_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerInvadeState::unsafe_arena_set_allocated_matched_player(
    ::std::string* matched_player) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (matched_player != NULL) {
    set_has_matched_player();
  } else {
    clear_has_matched_player();
  }
  matched_player_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      matched_player, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.PlayerInvadeState.matched_player)
}

// required sfixed64 defend_deadline = 3;
inline bool PlayerInvadeState::has_defend_deadline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInvadeState::set_has_defend_deadline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInvadeState::clear_has_defend_deadline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInvadeState::clear_defend_deadline() {
  defend_deadline_ = GOOGLE_LONGLONG(0);
  clear_has_defend_deadline();
}
inline ::google::protobuf::int64 PlayerInvadeState::defend_deadline() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeState.defend_deadline)
  return defend_deadline_;
}
inline void PlayerInvadeState::set_defend_deadline(::google::protobuf::int64 value) {
  set_has_defend_deadline();
  defend_deadline_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeState.defend_deadline)
}

// required sfixed64 timestamp = 4;
inline bool PlayerInvadeState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInvadeState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInvadeState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInvadeState::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 PlayerInvadeState::timestamp() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeState.timestamp)
  return timestamp_;
}
inline void PlayerInvadeState::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeState.timestamp)
}

// required int32 win = 5;
inline bool PlayerInvadeState::has_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInvadeState::set_has_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInvadeState::clear_has_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInvadeState::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 PlayerInvadeState::win() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeState.win)
  return win_;
}
inline void PlayerInvadeState::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeState.win)
}

// required int32 navigation_times = 6;
inline bool PlayerInvadeState::has_navigation_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerInvadeState::set_has_navigation_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerInvadeState::clear_has_navigation_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerInvadeState::clear_navigation_times() {
  navigation_times_ = 0;
  clear_has_navigation_times();
}
inline ::google::protobuf::int32 PlayerInvadeState::navigation_times() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeState.navigation_times)
  return navigation_times_;
}
inline void PlayerInvadeState::set_navigation_times(::google::protobuf::int32 value) {
  set_has_navigation_times();
  navigation_times_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeState.navigation_times)
}

// required sfixed64 daily_timestamp = 7;
inline bool PlayerInvadeState::has_daily_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInvadeState::set_has_daily_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInvadeState::clear_has_daily_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInvadeState::clear_daily_timestamp() {
  daily_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_daily_timestamp();
}
inline ::google::protobuf::int64 PlayerInvadeState::daily_timestamp() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeState.daily_timestamp)
  return daily_timestamp_;
}
inline void PlayerInvadeState::set_daily_timestamp(::google::protobuf::int64 value) {
  set_has_daily_timestamp();
  daily_timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeState.daily_timestamp)
}

// optional bytes drop_get = 8;
inline bool PlayerInvadeState::has_drop_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInvadeState::set_has_drop_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInvadeState::clear_has_drop_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInvadeState::clear_drop_get() {
  drop_get_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop_get();
}
inline const ::std::string& PlayerInvadeState::drop_get() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeState.drop_get)
  return drop_get_.Get();
}
inline void PlayerInvadeState::set_drop_get(const ::std::string& value) {
  set_has_drop_get();
  drop_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.PlayerInvadeState.drop_get)
}
#if LANG_CXX11
inline void PlayerInvadeState::set_drop_get(::std::string&& value) {
  set_has_drop_get();
  drop_get_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.PlayerInvadeState.drop_get)
}
#endif
inline void PlayerInvadeState::set_drop_get(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop_get();
  drop_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.PlayerInvadeState.drop_get)
}
inline void PlayerInvadeState::set_drop_get(const void* value,
    size_t size) {
  set_has_drop_get();
  drop_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.PlayerInvadeState.drop_get)
}
inline ::std::string* PlayerInvadeState::mutable_drop_get() {
  set_has_drop_get();
  // @@protoc_insertion_point(field_mutable:db.PlayerInvadeState.drop_get)
  return drop_get_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerInvadeState::release_drop_get() {
  // @@protoc_insertion_point(field_release:db.PlayerInvadeState.drop_get)
  if (!has_drop_get()) {
    return NULL;
  }
  clear_has_drop_get();
  return drop_get_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerInvadeState::set_allocated_drop_get(::std::string* drop_get) {
  if (drop_get != NULL) {
    set_has_drop_get();
  } else {
    clear_has_drop_get();
  }
  drop_get_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop_get,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.PlayerInvadeState.drop_get)
}
inline ::std::string* PlayerInvadeState::unsafe_arena_release_drop_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.PlayerInvadeState.drop_get)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop_get();
  return drop_get_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerInvadeState::unsafe_arena_set_allocated_drop_get(
    ::std::string* drop_get) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop_get != NULL) {
    set_has_drop_get();
  } else {
    clear_has_drop_get();
  }
  drop_get_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop_get, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.PlayerInvadeState.drop_get)
}

// optional int32 score = 9;
inline bool PlayerInvadeState::has_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerInvadeState::set_has_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerInvadeState::clear_has_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerInvadeState::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 PlayerInvadeState::score() const {
  // @@protoc_insertion_point(field_get:db.PlayerInvadeState.score)
  return score_;
}
inline void PlayerInvadeState::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:db.PlayerInvadeState.score)
}

// -------------------------------------------------------------------

// UserRoomModel

// required bytes userid = 1;
inline bool UserRoomModel::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRoomModel::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRoomModel::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRoomModel::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserRoomModel::userid() const {
  // @@protoc_insertion_point(field_get:db.UserRoomModel.userid)
  return userid_.Get();
}
inline void UserRoomModel::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserRoomModel.userid)
}
#if LANG_CXX11
inline void UserRoomModel::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserRoomModel.userid)
}
#endif
inline void UserRoomModel::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserRoomModel.userid)
}
inline void UserRoomModel::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserRoomModel.userid)
}
inline ::std::string* UserRoomModel::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserRoomModel.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserRoomModel::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserRoomModel.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserRoomModel::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserRoomModel.userid)
}
inline ::std::string* UserRoomModel::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserRoomModel.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserRoomModel::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserRoomModel.userid)
}

// required int32 id = 2;
inline bool UserRoomModel::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRoomModel::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRoomModel::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRoomModel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserRoomModel::id() const {
  // @@protoc_insertion_point(field_get:db.UserRoomModel.id)
  return id_;
}
inline void UserRoomModel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.UserRoomModel.id)
}

// -------------------------------------------------------------------

// UserLogCostDiamond

// required bytes userid = 1;
inline bool UserLogCostDiamond::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLogCostDiamond::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLogCostDiamond::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLogCostDiamond::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserLogCostDiamond::userid() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostDiamond.userid)
  return userid_.Get();
}
inline void UserLogCostDiamond::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserLogCostDiamond.userid)
}
#if LANG_CXX11
inline void UserLogCostDiamond::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserLogCostDiamond.userid)
}
#endif
inline void UserLogCostDiamond::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserLogCostDiamond.userid)
}
inline void UserLogCostDiamond::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserLogCostDiamond.userid)
}
inline ::std::string* UserLogCostDiamond::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserLogCostDiamond.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserLogCostDiamond::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserLogCostDiamond.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserLogCostDiamond::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserLogCostDiamond.userid)
}
inline ::std::string* UserLogCostDiamond::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserLogCostDiamond.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserLogCostDiamond::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserLogCostDiamond.userid)
}

// required int32 way = 2;
inline bool UserLogCostDiamond::has_way() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLogCostDiamond::set_has_way() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLogCostDiamond::clear_has_way() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLogCostDiamond::clear_way() {
  way_ = 0;
  clear_has_way();
}
inline ::google::protobuf::int32 UserLogCostDiamond::way() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostDiamond.way)
  return way_;
}
inline void UserLogCostDiamond::set_way(::google::protobuf::int32 value) {
  set_has_way();
  way_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogCostDiamond.way)
}

// required int64 param = 3;
inline bool UserLogCostDiamond::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLogCostDiamond::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLogCostDiamond::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLogCostDiamond::clear_param() {
  param_ = GOOGLE_LONGLONG(0);
  clear_has_param();
}
inline ::google::protobuf::int64 UserLogCostDiamond::param() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostDiamond.param)
  return param_;
}
inline void UserLogCostDiamond::set_param(::google::protobuf::int64 value) {
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogCostDiamond.param)
}

// required int32 cost_num = 4;
inline bool UserLogCostDiamond::has_cost_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLogCostDiamond::set_has_cost_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLogCostDiamond::clear_has_cost_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLogCostDiamond::clear_cost_num() {
  cost_num_ = 0;
  clear_has_cost_num();
}
inline ::google::protobuf::int32 UserLogCostDiamond::cost_num() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostDiamond.cost_num)
  return cost_num_;
}
inline void UserLogCostDiamond::set_cost_num(::google::protobuf::int32 value) {
  set_has_cost_num();
  cost_num_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogCostDiamond.cost_num)
}

// required sfixed64 timestamp = 5;
inline bool UserLogCostDiamond::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserLogCostDiamond::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserLogCostDiamond::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserLogCostDiamond::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserLogCostDiamond::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostDiamond.timestamp)
  return timestamp_;
}
inline void UserLogCostDiamond::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogCostDiamond.timestamp)
}

// -------------------------------------------------------------------

// UserLogCostItem

// required bytes userid = 1;
inline bool UserLogCostItem::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLogCostItem::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLogCostItem::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLogCostItem::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserLogCostItem::userid() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostItem.userid)
  return userid_.Get();
}
inline void UserLogCostItem::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserLogCostItem.userid)
}
#if LANG_CXX11
inline void UserLogCostItem::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserLogCostItem.userid)
}
#endif
inline void UserLogCostItem::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserLogCostItem.userid)
}
inline void UserLogCostItem::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserLogCostItem.userid)
}
inline ::std::string* UserLogCostItem::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserLogCostItem.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserLogCostItem::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserLogCostItem.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserLogCostItem::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserLogCostItem.userid)
}
inline ::std::string* UserLogCostItem::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserLogCostItem.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserLogCostItem::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserLogCostItem.userid)
}

// required int32 item_typeid = 2;
inline bool UserLogCostItem::has_item_typeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLogCostItem::set_has_item_typeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLogCostItem::clear_has_item_typeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLogCostItem::clear_item_typeid() {
  item_typeid_ = 0;
  clear_has_item_typeid();
}
inline ::google::protobuf::int32 UserLogCostItem::item_typeid() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostItem.item_typeid)
  return item_typeid_;
}
inline void UserLogCostItem::set_item_typeid(::google::protobuf::int32 value) {
  set_has_item_typeid();
  item_typeid_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogCostItem.item_typeid)
}

// required int32 item_num = 3;
inline bool UserLogCostItem::has_item_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLogCostItem::set_has_item_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLogCostItem::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLogCostItem::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 UserLogCostItem::item_num() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostItem.item_num)
  return item_num_;
}
inline void UserLogCostItem::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogCostItem.item_num)
}

// required int32 way = 4;
inline bool UserLogCostItem::has_way() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserLogCostItem::set_has_way() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserLogCostItem::clear_has_way() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserLogCostItem::clear_way() {
  way_ = 0;
  clear_has_way();
}
inline ::google::protobuf::int32 UserLogCostItem::way() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostItem.way)
  return way_;
}
inline void UserLogCostItem::set_way(::google::protobuf::int32 value) {
  set_has_way();
  way_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogCostItem.way)
}

// required sfixed64 timestamp = 5;
inline bool UserLogCostItem::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLogCostItem::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLogCostItem::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLogCostItem::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserLogCostItem::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserLogCostItem.timestamp)
  return timestamp_;
}
inline void UserLogCostItem::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogCostItem.timestamp)
}

// -------------------------------------------------------------------

// UserLogShopping

// required bytes userid = 1;
inline bool UserLogShopping::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLogShopping::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLogShopping::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLogShopping::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserLogShopping::userid() const {
  // @@protoc_insertion_point(field_get:db.UserLogShopping.userid)
  return userid_.Get();
}
inline void UserLogShopping::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserLogShopping.userid)
}
#if LANG_CXX11
inline void UserLogShopping::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserLogShopping.userid)
}
#endif
inline void UserLogShopping::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserLogShopping.userid)
}
inline void UserLogShopping::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserLogShopping.userid)
}
inline ::std::string* UserLogShopping::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserLogShopping.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserLogShopping::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserLogShopping.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserLogShopping::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserLogShopping.userid)
}
inline ::std::string* UserLogShopping::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserLogShopping.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserLogShopping::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserLogShopping.userid)
}

// required int32 goods_typeid = 2;
inline bool UserLogShopping::has_goods_typeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLogShopping::set_has_goods_typeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLogShopping::clear_has_goods_typeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLogShopping::clear_goods_typeid() {
  goods_typeid_ = 0;
  clear_has_goods_typeid();
}
inline ::google::protobuf::int32 UserLogShopping::goods_typeid() const {
  // @@protoc_insertion_point(field_get:db.UserLogShopping.goods_typeid)
  return goods_typeid_;
}
inline void UserLogShopping::set_goods_typeid(::google::protobuf::int32 value) {
  set_has_goods_typeid();
  goods_typeid_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogShopping.goods_typeid)
}

// required int32 goods_num = 3;
inline bool UserLogShopping::has_goods_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLogShopping::set_has_goods_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLogShopping::clear_has_goods_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLogShopping::clear_goods_num() {
  goods_num_ = 0;
  clear_has_goods_num();
}
inline ::google::protobuf::int32 UserLogShopping::goods_num() const {
  // @@protoc_insertion_point(field_get:db.UserLogShopping.goods_num)
  return goods_num_;
}
inline void UserLogShopping::set_goods_num(::google::protobuf::int32 value) {
  set_has_goods_num();
  goods_num_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogShopping.goods_num)
}

// required int32 belong_store = 4;
inline bool UserLogShopping::has_belong_store() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserLogShopping::set_has_belong_store() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserLogShopping::clear_has_belong_store() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserLogShopping::clear_belong_store() {
  belong_store_ = 0;
  clear_has_belong_store();
}
inline ::google::protobuf::int32 UserLogShopping::belong_store() const {
  // @@protoc_insertion_point(field_get:db.UserLogShopping.belong_store)
  return belong_store_;
}
inline void UserLogShopping::set_belong_store(::google::protobuf::int32 value) {
  set_has_belong_store();
  belong_store_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogShopping.belong_store)
}

// required sfixed64 timestamp = 5;
inline bool UserLogShopping::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLogShopping::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLogShopping::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLogShopping::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserLogShopping::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserLogShopping.timestamp)
  return timestamp_;
}
inline void UserLogShopping::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserLogShopping.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_UserDef_2eproto
